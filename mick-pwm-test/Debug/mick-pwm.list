
mick-pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003410  080001c0  080001c0  000011c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080035d0  080035d0  000045d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003610  08003610  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003610  08003610  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003610  08003610  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003610  08003610  00004610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003614  08003614  00004614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003618  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08003624  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08003624  00005078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fed  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001763  00000000  00000000  0000f029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00010790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ba  00000000  00000000  000112e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000287f4  00000000  00000000  00011b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bec4  00000000  00000000  0003a38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd1fe  00000000  00000000  00046252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143450  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fec  00000000  00000000  00143494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00146480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080035b8 	.word	0x080035b8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	080035b8 	.word	0x080035b8

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	@ 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2iz>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009a4:	d215      	bcs.n	80009d2 <__aeabi_d2iz+0x36>
 80009a6:	d511      	bpl.n	80009cc <__aeabi_d2iz+0x30>
 80009a8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d912      	bls.n	80009d8 <__aeabi_d2iz+0x3c>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	bf18      	it	ne
 80009c8:	4240      	negne	r0, r0
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d105      	bne.n	80009e4 <__aeabi_d2iz+0x48>
 80009d8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009dc:	bf08      	it	eq
 80009de:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	0000      	movs	r0, r0
	...

080009f0 <set_motor_speed>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void set_motor_speed(int motor_speed) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff fd53 	bl	80004a4 <__aeabi_i2d>
 80009fe:	f04f 0200 	mov.w	r2, #0
 8000a02:	4b23      	ldr	r3, [pc, #140]	@ (8000a90 <set_motor_speed+0xa0>)
 8000a04:	f7ff fee2 	bl	80007cc <__aeabi_ddiv>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	4610      	mov	r0, r2
 8000a0e:	4619      	mov	r1, r3
 8000a10:	a319      	add	r3, pc, #100	@ (adr r3, 8000a78 <set_motor_speed+0x88>)
 8000a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a16:	f7ff fdaf 	bl	8000578 <__aeabi_dmul>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	a317      	add	r3, pc, #92	@ (adr r3, 8000a80 <set_motor_speed+0x90>)
 8000a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a28:	f7ff fbf0 	bl	800020c <__adddf3>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	460b      	mov	r3, r1
 8000a30:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr2 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 8000a34:	f04f 0200 	mov.w	r2, #0
 8000a38:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <set_motor_speed+0xa4>)
 8000a3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000a3e:	f7ff fec5 	bl	80007cc <__aeabi_ddiv>
 8000a42:	4602      	mov	r2, r0
 8000a44:	460b      	mov	r3, r1
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	a30f      	add	r3, pc, #60	@ (adr r3, 8000a88 <set_motor_speed+0x98>)
 8000a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a50:	f7ff fd92 	bl	8000578 <__aeabi_dmul>
 8000a54:	4602      	mov	r2, r0
 8000a56:	460b      	mov	r3, r1
 8000a58:	4610      	mov	r0, r2
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	f7ff ff9e 	bl	800099c <__aeabi_d2iz>
 8000a60:	4603      	mov	r3, r0
 8000a62:	60fb      	str	r3, [r7, #12]

  TIM4->CCR2 = temp_ccr2;
 8000a64:	4a0c      	ldr	r2, [pc, #48]	@ (8000a98 <set_motor_speed+0xa8>)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	f3af 8000 	nop.w
 8000a78:	c28f5c29 	.word	0xc28f5c29
 8000a7c:	3fdc28f5 	.word	0x3fdc28f5
 8000a80:	47ae147b 	.word	0x47ae147b
 8000a84:	3ff47ae1 	.word	0x3ff47ae1
 8000a88:	00000000 	.word	0x00000000
 8000a8c:	411e8480 	.word	0x411e8480
 8000a90:	40590000 	.word	0x40590000
 8000a94:	408f4000 	.word	0x408f4000
 8000a98:	40000800 	.word	0x40000800

08000a9c <set_no_rotation>:


void set_no_rotation() {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	set_motor_speed(50);
 8000aa0:	2032      	movs	r0, #50	@ 0x32
 8000aa2:	f7ff ffa5 	bl	80009f0 <set_motor_speed>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab2:	f000 fc64 	bl	800137e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab6:	f000 f85d 	bl	8000b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aba:	f000 f8fd 	bl	8000cb8 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000abe:	f000 f89f 	bl	8000c00 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // NEEDED TO START PWM
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	4829      	ldr	r0, [pc, #164]	@ (8000b6c <main+0xc0>)
 8000ac6:	f001 ff13 	bl	80028f0 <HAL_TIM_PWM_Start>

  // Can change motorspeed from 0 - 100
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation
  int motor_speed = 50;
 8000aca:	2332      	movs	r3, #50	@ 0x32
 8000acc:	60fb      	str	r3, [r7, #12]

  int is_increasing = 1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	60bb      	str	r3, [r7, #8]

  int delay_num = 1000000;
 8000ad2:	4b27      	ldr	r3, [pc, #156]	@ (8000b70 <main+0xc4>)
 8000ad4:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // software delay
    for (int i = 0; i < delay_num; ++i);
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ada:	e002      	b.n	8000ae2 <main+0x36>
 8000adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ade:	3301      	adds	r3, #1
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	dbf8      	blt.n	8000adc <main+0x30>

    set_no_rotation();
 8000aea:	f7ff ffd7 	bl	8000a9c <set_no_rotation>

    for (int i = 0; i < delay_num; ++i);
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
 8000af2:	e002      	b.n	8000afa <main+0x4e>
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	3301      	adds	r3, #1
 8000af8:	623b      	str	r3, [r7, #32]
 8000afa:	6a3a      	ldr	r2, [r7, #32]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	dbf8      	blt.n	8000af4 <main+0x48>

    set_motor_speed(40);
 8000b02:	2028      	movs	r0, #40	@ 0x28
 8000b04:	f7ff ff74 	bl	80009f0 <set_motor_speed>

    for (int i = 0; i < delay_num; ++i);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
 8000b0c:	e002      	b.n	8000b14 <main+0x68>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3301      	adds	r3, #1
 8000b12:	61fb      	str	r3, [r7, #28]
 8000b14:	69fa      	ldr	r2, [r7, #28]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf8      	blt.n	8000b0e <main+0x62>

    set_motor_speed(70);
 8000b1c:	2046      	movs	r0, #70	@ 0x46
 8000b1e:	f7ff ff67 	bl	80009f0 <set_motor_speed>

    for (int i = 0; i < delay_num; ++i);
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
 8000b26:	e002      	b.n	8000b2e <main+0x82>
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	dbf8      	blt.n	8000b28 <main+0x7c>

    set_motor_speed(0);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f7ff ff5a 	bl	80009f0 <set_motor_speed>

    for (int i = 0; i < delay_num; ++i);
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	e002      	b.n	8000b48 <main+0x9c>
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbf8      	blt.n	8000b42 <main+0x96>

    set_motor_speed(100);
 8000b50:	2064      	movs	r0, #100	@ 0x64
 8000b52:	f7ff ff4d 	bl	80009f0 <set_motor_speed>
    
    for (int i = 0; i < delay_num; ++i);
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	e002      	b.n	8000b62 <main+0xb6>
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	dbf8      	blt.n	8000b5c <main+0xb0>
    for (int i = 0; i < delay_num; ++i);
 8000b6a:	e7b4      	b.n	8000ad6 <main+0x2a>
 8000b6c:	20000028 	.word	0x20000028
 8000b70:	000f4240 	.word	0x000f4240

08000b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b096      	sub	sp, #88	@ 0x58
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	2244      	movs	r2, #68	@ 0x44
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 fcec 	bl	8003560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b96:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b9a:	f000 fefd 	bl	8001998 <HAL_PWREx_ControlVoltageScaling>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ba4:	f000 fabc 	bl	8001120 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ba8:	2310      	movs	r3, #16
 8000baa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bac:	2301      	movs	r3, #1
 8000bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bb4:	2360      	movs	r3, #96	@ 0x60
 8000bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 ff9d 	bl	8001b00 <HAL_RCC_OscConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000bcc:	f000 faa8 	bl	8001120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000be4:	463b      	mov	r3, r7
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 fba3 	bl	8002334 <HAL_RCC_ClockConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bf4:	f000 fa94 	bl	8001120 <Error_Handler>
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	3758      	adds	r7, #88	@ 0x58
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	@ 0x28
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c12:	463b      	mov	r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
 8000c20:	615a      	str	r2, [r3, #20]
 8000c22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c24:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <MX_TIM4_Init+0xb0>)
 8000c26:	4a23      	ldr	r2, [pc, #140]	@ (8000cb4 <MX_TIM4_Init+0xb4>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	@ (8000cb0 <MX_TIM4_Init+0xb0>)
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <MX_TIM4_Init+0xb0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8000c36:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb0 <MX_TIM4_Init+0xb0>)
 8000c38:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <MX_TIM4_Init+0xb0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <MX_TIM4_Init+0xb0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c4a:	4819      	ldr	r0, [pc, #100]	@ (8000cb0 <MX_TIM4_Init+0xb0>)
 8000c4c:	f001 fdf8 	bl	8002840 <HAL_TIM_PWM_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000c56:	f000 fa63 	bl	8001120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	4811      	ldr	r0, [pc, #68]	@ (8000cb0 <MX_TIM4_Init+0xb0>)
 8000c6a:	f002 fbf1 	bl	8003450 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000c74:	f000 fa54 	bl	8001120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c78:	2360      	movs	r3, #96	@ 0x60
 8000c7a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 750;
 8000c7c:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8000c80:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	2204      	movs	r2, #4
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4807      	ldr	r0, [pc, #28]	@ (8000cb0 <MX_TIM4_Init+0xb0>)
 8000c92:	f001 ff33 	bl	8002afc <HAL_TIM_PWM_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000c9c:	f000 fa40 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ca0:	4803      	ldr	r0, [pc, #12]	@ (8000cb0 <MX_TIM4_Init+0xb0>)
 8000ca2:	f000 fac9 	bl	8001238 <HAL_TIM_MspPostInit>

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	@ 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000028 	.word	0x20000028
 8000cb4:	40000800 	.word	0x40000800

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	@ 0x38
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cce:	4bb2      	ldr	r3, [pc, #712]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd2:	4ab1      	ldr	r2, [pc, #708]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000cd4:	f043 0310 	orr.w	r3, r3, #16
 8000cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cda:	4baf      	ldr	r3, [pc, #700]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cde:	f003 0310 	and.w	r3, r3, #16
 8000ce2:	623b      	str	r3, [r7, #32]
 8000ce4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	4bac      	ldr	r3, [pc, #688]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cea:	4aab      	ldr	r2, [pc, #684]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf2:	4ba9      	ldr	r3, [pc, #676]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	61fb      	str	r3, [r7, #28]
 8000cfc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cfe:	4ba6      	ldr	r3, [pc, #664]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	4aa5      	ldr	r2, [pc, #660]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000d04:	f043 0320 	orr.w	r3, r3, #32
 8000d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0a:	4ba3      	ldr	r3, [pc, #652]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	f003 0320 	and.w	r3, r3, #32
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d16:	4ba0      	ldr	r3, [pc, #640]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	4a9f      	ldr	r2, [pc, #636]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d22:	4b9d      	ldr	r3, [pc, #628]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b9a      	ldr	r3, [pc, #616]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	4a99      	ldr	r2, [pc, #612]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3a:	4b97      	ldr	r3, [pc, #604]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4b94      	ldr	r3, [pc, #592]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	4a93      	ldr	r2, [pc, #588]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d52:	4b91      	ldr	r3, [pc, #580]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5e:	4b8e      	ldr	r3, [pc, #568]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	4a8d      	ldr	r2, [pc, #564]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6a:	4b8b      	ldr	r3, [pc, #556]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d76:	4b88      	ldr	r3, [pc, #544]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	4a87      	ldr	r2, [pc, #540]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000d7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d82:	4b85      	ldr	r3, [pc, #532]	@ (8000f98 <MX_GPIO_Init+0x2e0>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000d8e:	f000 fea7 	bl	8001ae0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d92:	230c      	movs	r3, #12
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000da2:	230d      	movs	r3, #13
 8000da4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000daa:	4619      	mov	r1, r3
 8000dac:	487b      	ldr	r0, [pc, #492]	@ (8000f9c <MX_GPIO_Init+0x2e4>)
 8000dae:	f000 fc41 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000db2:	2307      	movs	r3, #7
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db6:	2312      	movs	r3, #18
 8000db8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4874      	ldr	r0, [pc, #464]	@ (8000fa0 <MX_GPIO_Init+0x2e8>)
 8000dce:	f000 fc31 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dd2:	2380      	movs	r3, #128	@ 0x80
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000de2:	230d      	movs	r3, #13
 8000de4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dea:	4619      	mov	r1, r3
 8000dec:	486c      	ldr	r0, [pc, #432]	@ (8000fa0 <MX_GPIO_Init+0x2e8>)
 8000dee:	f000 fc21 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000df2:	233f      	movs	r3, #63	@ 0x3f
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000df6:	230b      	movs	r3, #11
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e02:	4619      	mov	r1, r3
 8000e04:	4867      	ldr	r0, [pc, #412]	@ (8000fa4 <MX_GPIO_Init+0x2ec>)
 8000e06:	f000 fc15 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e28:	f000 fc04 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000e2c:	230a      	movs	r3, #10
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e30:	230b      	movs	r3, #11
 8000e32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e42:	f000 fbf7 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e46:	23f0      	movs	r3, #240	@ 0xf0
 8000e48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e56:	2305      	movs	r3, #5
 8000e58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e64:	f000 fbe6 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e80:	4619      	mov	r1, r3
 8000e82:	4849      	ldr	r0, [pc, #292]	@ (8000fa8 <MX_GPIO_Init+0x2f0>)
 8000e84:	f000 fbd6 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e8c:	230b      	movs	r3, #11
 8000e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4843      	ldr	r0, [pc, #268]	@ (8000fa8 <MX_GPIO_Init+0x2f0>)
 8000e9c:	f000 fbca 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000ea0:	2344      	movs	r3, #68	@ 0x44
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	483d      	ldr	r0, [pc, #244]	@ (8000fa8 <MX_GPIO_Init+0x2f0>)
 8000eb4:	f000 fbbe 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000eb8:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4831      	ldr	r0, [pc, #196]	@ (8000f9c <MX_GPIO_Init+0x2e4>)
 8000ed6:	f000 fbad 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000eda:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000eec:	2303      	movs	r3, #3
 8000eee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4829      	ldr	r0, [pc, #164]	@ (8000f9c <MX_GPIO_Init+0x2e4>)
 8000ef8:	f000 fb9c 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000efc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f16:	4619      	mov	r1, r3
 8000f18:	4823      	ldr	r0, [pc, #140]	@ (8000fa8 <MX_GPIO_Init+0x2f0>)
 8000f1a:	f000 fb8b 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000f1e:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000f30:	230d      	movs	r3, #13
 8000f32:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	481b      	ldr	r0, [pc, #108]	@ (8000fa8 <MX_GPIO_Init+0x2f0>)
 8000f3c:	f000 fb7a 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000f52:	230e      	movs	r3, #14
 8000f54:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4812      	ldr	r0, [pc, #72]	@ (8000fa8 <MX_GPIO_Init+0x2f0>)
 8000f5e:	f000 fb69 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f74:	2307      	movs	r3, #7
 8000f76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480b      	ldr	r0, [pc, #44]	@ (8000fac <MX_GPIO_Init+0x2f4>)
 8000f80:	f000 fb58 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000f84:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e00c      	b.n	8000fb0 <MX_GPIO_Init+0x2f8>
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	48001000 	.word	0x48001000
 8000fa0:	48001400 	.word	0x48001400
 8000fa4:	48000800 	.word	0x48000800
 8000fa8:	48000400 	.word	0x48000400
 8000fac:	48000c00 	.word	0x48000c00
 8000fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000fb2:	2308      	movs	r3, #8
 8000fb4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4854      	ldr	r0, [pc, #336]	@ (8001110 <MX_GPIO_Init+0x458>)
 8000fbe:	f000 fb39 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fc2:	2340      	movs	r3, #64	@ 0x40
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000fd2:	230d      	movs	r3, #13
 8000fd4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fda:	4619      	mov	r1, r3
 8000fdc:	484d      	ldr	r0, [pc, #308]	@ (8001114 <MX_GPIO_Init+0x45c>)
 8000fde:	f000 fb29 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fe2:	2380      	movs	r3, #128	@ 0x80
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4845      	ldr	r0, [pc, #276]	@ (8001114 <MX_GPIO_Init+0x45c>)
 8000ffe:	f000 fb19 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001002:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001014:	230c      	movs	r3, #12
 8001016:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	483d      	ldr	r0, [pc, #244]	@ (8001114 <MX_GPIO_Init+0x45c>)
 8001020:	f000 fb08 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001024:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001028:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001036:	230a      	movs	r3, #10
 8001038:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	4619      	mov	r1, r3
 8001040:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001044:	f000 faf6 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001048:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104e:	2300      	movs	r3, #0
 8001050:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001060:	f000 fae8 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001064:	2301      	movs	r3, #1
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001074:	2309      	movs	r3, #9
 8001076:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	4826      	ldr	r0, [pc, #152]	@ (8001118 <MX_GPIO_Init+0x460>)
 8001080:	f000 fad8 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001084:	2304      	movs	r3, #4
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001094:	230c      	movs	r3, #12
 8001096:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109c:	4619      	mov	r1, r3
 800109e:	481e      	ldr	r0, [pc, #120]	@ (8001118 <MX_GPIO_Init+0x460>)
 80010a0:	f000 fac8 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80010a4:	2378      	movs	r3, #120	@ 0x78
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b4:	2307      	movs	r3, #7
 80010b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010bc:	4619      	mov	r1, r3
 80010be:	4816      	ldr	r0, [pc, #88]	@ (8001118 <MX_GPIO_Init+0x460>)
 80010c0:	f000 fab8 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80010c4:	2338      	movs	r3, #56	@ 0x38
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010d4:	2306      	movs	r3, #6
 80010d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	480f      	ldr	r0, [pc, #60]	@ (800111c <MX_GPIO_Init+0x464>)
 80010e0:	f000 faa8 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ea:	2312      	movs	r3, #18
 80010ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f6:	2304      	movs	r3, #4
 80010f8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_GPIO_Init+0x464>)
 8001102:	f000 fa97 	bl	8001634 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001106:	bf00      	nop
 8001108:	3738      	adds	r7, #56	@ 0x38
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	48001800 	.word	0x48001800
 8001114:	48000800 	.word	0x48000800
 8001118:	48000c00 	.word	0x48000c00
 800111c:	48000400 	.word	0x48000400

08001120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
}
 8001126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <Error_Handler+0x8>

0800112c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <HAL_MspInit+0x44>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001136:	4a0e      	ldr	r2, [pc, #56]	@ (8001170 <HAL_MspInit+0x44>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6613      	str	r3, [r2, #96]	@ 0x60
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <HAL_MspInit+0x44>)
 8001140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <HAL_MspInit+0x44>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114e:	4a08      	ldr	r2, [pc, #32]	@ (8001170 <HAL_MspInit+0x44>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001154:	6593      	str	r3, [r2, #88]	@ 0x58
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_MspInit+0x44>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000

08001174 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	@ 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM4)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a25      	ldr	r2, [pc, #148]	@ (8001228 <HAL_TIM_PWM_MspInit+0xb4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d144      	bne.n	8001220 <HAL_TIM_PWM_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001196:	4b25      	ldr	r3, [pc, #148]	@ (800122c <HAL_TIM_PWM_MspInit+0xb8>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119a:	4a24      	ldr	r2, [pc, #144]	@ (800122c <HAL_TIM_PWM_MspInit+0xb8>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011a2:	4b22      	ldr	r3, [pc, #136]	@ (800122c <HAL_TIM_PWM_MspInit+0xb8>)
 80011a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ae:	4b1f      	ldr	r3, [pc, #124]	@ (800122c <HAL_TIM_PWM_MspInit+0xb8>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	4a1e      	ldr	r2, [pc, #120]	@ (800122c <HAL_TIM_PWM_MspInit+0xb8>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <HAL_TIM_PWM_MspInit+0xb8>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011c6:	4b19      	ldr	r3, [pc, #100]	@ (800122c <HAL_TIM_PWM_MspInit+0xb8>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	4a18      	ldr	r2, [pc, #96]	@ (800122c <HAL_TIM_PWM_MspInit+0xb8>)
 80011cc:	f043 0310 	orr.w	r3, r3, #16
 80011d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d2:	4b16      	ldr	r3, [pc, #88]	@ (800122c <HAL_TIM_PWM_MspInit+0xb8>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	f003 0310 	and.w	r3, r3, #16
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80011de:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011f0:	2302      	movs	r3, #2
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	480d      	ldr	r0, [pc, #52]	@ (8001230 <HAL_TIM_PWM_MspInit+0xbc>)
 80011fc:	f000 fa1a 	bl	8001634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001200:	2301      	movs	r3, #1
 8001202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001210:	2302      	movs	r3, #2
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	4806      	ldr	r0, [pc, #24]	@ (8001234 <HAL_TIM_PWM_MspInit+0xc0>)
 800121c:	f000 fa0a 	bl	8001634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	@ 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40000800 	.word	0x40000800
 800122c:	40021000 	.word	0x40021000
 8001230:	48000c00 	.word	0x48000c00
 8001234:	48001000 	.word	0x48001000

08001238 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a11      	ldr	r2, [pc, #68]	@ (800129c <HAL_TIM_MspPostInit+0x64>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d11c      	bne.n	8001294 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800125a:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <HAL_TIM_MspPostInit+0x68>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	4a10      	ldr	r2, [pc, #64]	@ (80012a0 <HAL_TIM_MspPostInit+0x68>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001266:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <HAL_TIM_MspPostInit+0x68>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001272:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001276:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001284:	2302      	movs	r3, #2
 8001286:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	4619      	mov	r1, r3
 800128e:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <HAL_TIM_MspPostInit+0x6c>)
 8001290:	f000 f9d0 	bl	8001634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	3720      	adds	r7, #32
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40000800 	.word	0x40000800
 80012a0:	40021000 	.word	0x40021000
 80012a4:	48000c00 	.word	0x48000c00

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <NMI_Handler+0x4>

080012b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <MemManage_Handler+0x4>

080012c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <UsageFault_Handler+0x4>

080012d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fe:	f000 f893 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <SystemInit+0x20>)
 800130e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001312:	4a05      	ldr	r2, [pc, #20]	@ (8001328 <SystemInit+0x20>)
 8001314:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001318:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800132c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001364 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001330:	f7ff ffea 	bl	8001308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001334:	480c      	ldr	r0, [pc, #48]	@ (8001368 <LoopForever+0x6>)
  ldr r1, =_edata
 8001336:	490d      	ldr	r1, [pc, #52]	@ (800136c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001338:	4a0d      	ldr	r2, [pc, #52]	@ (8001370 <LoopForever+0xe>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0a      	ldr	r2, [pc, #40]	@ (8001374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800134c:	4c0a      	ldr	r4, [pc, #40]	@ (8001378 <LoopForever+0x16>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135a:	f002 f909 	bl	8003570 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800135e:	f7ff fba5 	bl	8000aac <main>

08001362 <LoopForever>:

LoopForever:
    b LoopForever
 8001362:	e7fe      	b.n	8001362 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001364:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800136c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001370:	08003618 	.word	0x08003618
  ldr r2, =_sbss
 8001374:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001378:	20000078 	.word	0x20000078

0800137c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC1_IRQHandler>

0800137e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001388:	2003      	movs	r0, #3
 800138a:	f000 f91f 	bl	80015cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800138e:	2000      	movs	r0, #0
 8001390:	f000 f80e 	bl	80013b0 <HAL_InitTick>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	71fb      	strb	r3, [r7, #7]
 800139e:	e001      	b.n	80013a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013a0:	f7ff fec4 	bl	800112c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013a4:	79fb      	ldrb	r3, [r7, #7]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013bc:	4b17      	ldr	r3, [pc, #92]	@ (800141c <HAL_InitTick+0x6c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d023      	beq.n	800140c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013c4:	4b16      	ldr	r3, [pc, #88]	@ (8001420 <HAL_InitTick+0x70>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b14      	ldr	r3, [pc, #80]	@ (800141c <HAL_InitTick+0x6c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f91d 	bl	800161a <HAL_SYSTICK_Config>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10f      	bne.n	8001406 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b0f      	cmp	r3, #15
 80013ea:	d809      	bhi.n	8001400 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ec:	2200      	movs	r2, #0
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f000 f8f5 	bl	80015e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <HAL_InitTick+0x74>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e007      	b.n	8001410 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	e004      	b.n	8001410 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	e001      	b.n	8001410 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001410:	7bfb      	ldrb	r3, [r7, #15]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000008 	.word	0x20000008
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	@ (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008
 800144c:	20000074 	.word	0x20000074

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000074 	.word	0x20000074

08001468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	@ (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	db0a      	blt.n	80014f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	490c      	ldr	r1, [pc, #48]	@ (8001518 <__NVIC_SetPriority+0x4c>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f4:	e00a      	b.n	800150c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4908      	ldr	r1, [pc, #32]	@ (800151c <__NVIC_SetPriority+0x50>)
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	3b04      	subs	r3, #4
 8001504:	0112      	lsls	r2, r2, #4
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	440b      	add	r3, r1
 800150a:	761a      	strb	r2, [r3, #24]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000e100 	.word	0xe000e100
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	@ 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f1c3 0307 	rsb	r3, r3, #7
 800153a:	2b04      	cmp	r3, #4
 800153c:	bf28      	it	cs
 800153e:	2304      	movcs	r3, #4
 8001540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3304      	adds	r3, #4
 8001546:	2b06      	cmp	r3, #6
 8001548:	d902      	bls.n	8001550 <NVIC_EncodePriority+0x30>
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3b03      	subs	r3, #3
 800154e:	e000      	b.n	8001552 <NVIC_EncodePriority+0x32>
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	43d9      	mvns	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	4313      	orrs	r3, r2
         );
}
 800157a:	4618      	mov	r0, r3
 800157c:	3724      	adds	r7, #36	@ 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001598:	d301      	bcc.n	800159e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159a:	2301      	movs	r3, #1
 800159c:	e00f      	b.n	80015be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159e:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <SysTick_Config+0x40>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a6:	210f      	movs	r1, #15
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f7ff ff8e 	bl	80014cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <SysTick_Config+0x40>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b6:	4b04      	ldr	r3, [pc, #16]	@ (80015c8 <SysTick_Config+0x40>)
 80015b8:	2207      	movs	r2, #7
 80015ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	e000e010 	.word	0xe000e010

080015cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ff47 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015f4:	f7ff ff5c 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 80015f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f7ff ff8e 	bl	8001520 <NVIC_EncodePriority>
 8001604:	4602      	mov	r2, r0
 8001606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff5d 	bl	80014cc <__NVIC_SetPriority>
}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ffb0 	bl	8001588 <SysTick_Config>
 8001628:	4603      	mov	r3, r0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001642:	e166      	b.n	8001912 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2101      	movs	r1, #1
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	4013      	ands	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8158 	beq.w	800190c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b01      	cmp	r3, #1
 8001666:	d005      	beq.n	8001674 <HAL_GPIO_Init+0x40>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d130      	bne.n	80016d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	2203      	movs	r2, #3
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016aa:	2201      	movs	r2, #1
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	f003 0201 	and.w	r2, r3, #1
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d017      	beq.n	8001712 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	2203      	movs	r2, #3
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d123      	bne.n	8001766 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	08da      	lsrs	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3208      	adds	r2, #8
 8001726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	220f      	movs	r2, #15
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	691a      	ldr	r2, [r3, #16]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	08da      	lsrs	r2, r3, #3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3208      	adds	r2, #8
 8001760:	6939      	ldr	r1, [r7, #16]
 8001762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0203 	and.w	r2, r3, #3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 80b2 	beq.w	800190c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a8:	4b61      	ldr	r3, [pc, #388]	@ (8001930 <HAL_GPIO_Init+0x2fc>)
 80017aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ac:	4a60      	ldr	r2, [pc, #384]	@ (8001930 <HAL_GPIO_Init+0x2fc>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80017b4:	4b5e      	ldr	r3, [pc, #376]	@ (8001930 <HAL_GPIO_Init+0x2fc>)
 80017b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017c0:	4a5c      	ldr	r2, [pc, #368]	@ (8001934 <HAL_GPIO_Init+0x300>)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	3302      	adds	r3, #2
 80017c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	220f      	movs	r2, #15
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017ea:	d02b      	beq.n	8001844 <HAL_GPIO_Init+0x210>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a52      	ldr	r2, [pc, #328]	@ (8001938 <HAL_GPIO_Init+0x304>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d025      	beq.n	8001840 <HAL_GPIO_Init+0x20c>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a51      	ldr	r2, [pc, #324]	@ (800193c <HAL_GPIO_Init+0x308>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d01f      	beq.n	800183c <HAL_GPIO_Init+0x208>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a50      	ldr	r2, [pc, #320]	@ (8001940 <HAL_GPIO_Init+0x30c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d019      	beq.n	8001838 <HAL_GPIO_Init+0x204>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a4f      	ldr	r2, [pc, #316]	@ (8001944 <HAL_GPIO_Init+0x310>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d013      	beq.n	8001834 <HAL_GPIO_Init+0x200>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a4e      	ldr	r2, [pc, #312]	@ (8001948 <HAL_GPIO_Init+0x314>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d00d      	beq.n	8001830 <HAL_GPIO_Init+0x1fc>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a4d      	ldr	r2, [pc, #308]	@ (800194c <HAL_GPIO_Init+0x318>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d007      	beq.n	800182c <HAL_GPIO_Init+0x1f8>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a4c      	ldr	r2, [pc, #304]	@ (8001950 <HAL_GPIO_Init+0x31c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_GPIO_Init+0x1f4>
 8001824:	2307      	movs	r3, #7
 8001826:	e00e      	b.n	8001846 <HAL_GPIO_Init+0x212>
 8001828:	2308      	movs	r3, #8
 800182a:	e00c      	b.n	8001846 <HAL_GPIO_Init+0x212>
 800182c:	2306      	movs	r3, #6
 800182e:	e00a      	b.n	8001846 <HAL_GPIO_Init+0x212>
 8001830:	2305      	movs	r3, #5
 8001832:	e008      	b.n	8001846 <HAL_GPIO_Init+0x212>
 8001834:	2304      	movs	r3, #4
 8001836:	e006      	b.n	8001846 <HAL_GPIO_Init+0x212>
 8001838:	2303      	movs	r3, #3
 800183a:	e004      	b.n	8001846 <HAL_GPIO_Init+0x212>
 800183c:	2302      	movs	r3, #2
 800183e:	e002      	b.n	8001846 <HAL_GPIO_Init+0x212>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <HAL_GPIO_Init+0x212>
 8001844:	2300      	movs	r3, #0
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	f002 0203 	and.w	r2, r2, #3
 800184c:	0092      	lsls	r2, r2, #2
 800184e:	4093      	lsls	r3, r2
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001856:	4937      	ldr	r1, [pc, #220]	@ (8001934 <HAL_GPIO_Init+0x300>)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	3302      	adds	r3, #2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001864:	4b3b      	ldr	r3, [pc, #236]	@ (8001954 <HAL_GPIO_Init+0x320>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001888:	4a32      	ldr	r2, [pc, #200]	@ (8001954 <HAL_GPIO_Init+0x320>)
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800188e:	4b31      	ldr	r3, [pc, #196]	@ (8001954 <HAL_GPIO_Init+0x320>)
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018b2:	4a28      	ldr	r2, [pc, #160]	@ (8001954 <HAL_GPIO_Init+0x320>)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018b8:	4b26      	ldr	r3, [pc, #152]	@ (8001954 <HAL_GPIO_Init+0x320>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001954 <HAL_GPIO_Init+0x320>)
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001954 <HAL_GPIO_Init+0x320>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001906:	4a13      	ldr	r2, [pc, #76]	@ (8001954 <HAL_GPIO_Init+0x320>)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	3301      	adds	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	f47f ae91 	bne.w	8001644 <HAL_GPIO_Init+0x10>
  }
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	371c      	adds	r7, #28
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000
 8001938:	48000400 	.word	0x48000400
 800193c:	48000800 	.word	0x48000800
 8001940:	48000c00 	.word	0x48000c00
 8001944:	48001000 	.word	0x48001000
 8001948:	48001400 	.word	0x48001400
 800194c:	48001800 	.word	0x48001800
 8001950:	48001c00 	.word	0x48001c00
 8001954:	40010400 	.word	0x40010400

08001958 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800195c:	4b0d      	ldr	r3, [pc, #52]	@ (8001994 <HAL_PWREx_GetVoltageRange+0x3c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001968:	d102      	bne.n	8001970 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800196a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800196e:	e00b      	b.n	8001988 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001970:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800197e:	d102      	bne.n	8001986 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001984:	e000      	b.n	8001988 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001986:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40007000 	.word	0x40007000

08001998 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d141      	bne.n	8001a2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019a6:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019b2:	d131      	bne.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019b4:	4b47      	ldr	r3, [pc, #284]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019ba:	4a46      	ldr	r2, [pc, #280]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c4:	4b43      	ldr	r3, [pc, #268]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019cc:	4a41      	ldr	r2, [pc, #260]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80019d4:	4b40      	ldr	r3, [pc, #256]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2232      	movs	r2, #50	@ 0x32
 80019da:	fb02 f303 	mul.w	r3, r2, r3
 80019de:	4a3f      	ldr	r2, [pc, #252]	@ (8001adc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	0c9b      	lsrs	r3, r3, #18
 80019e6:	3301      	adds	r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ea:	e002      	b.n	80019f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f2:	4b38      	ldr	r3, [pc, #224]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019fe:	d102      	bne.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f2      	bne.n	80019ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a06:	4b33      	ldr	r3, [pc, #204]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a12:	d158      	bne.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e057      	b.n	8001ac8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a18:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a28:	e04d      	b.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a30:	d141      	bne.n	8001ab6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a32:	4b28      	ldr	r3, [pc, #160]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a3e:	d131      	bne.n	8001aa4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a40:	4b24      	ldr	r3, [pc, #144]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a46:	4a23      	ldr	r2, [pc, #140]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a50:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a58:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2232      	movs	r2, #50	@ 0x32
 8001a66:	fb02 f303 	mul.w	r3, r2, r3
 8001a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001adc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	0c9b      	lsrs	r3, r3, #18
 8001a72:	3301      	adds	r3, #1
 8001a74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a76:	e002      	b.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a8a:	d102      	bne.n	8001a92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f2      	bne.n	8001a78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a9e:	d112      	bne.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e011      	b.n	8001ac8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ab4:	e007      	b.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ab6:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001abe:	4a05      	ldr	r2, [pc, #20]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ac4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	40007000 	.word	0x40007000
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	431bde83 	.word	0x431bde83

08001ae0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <HAL_PWREx_EnableVddIO2+0x1c>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a04      	ldr	r2, [pc, #16]	@ (8001afc <HAL_PWREx_EnableVddIO2+0x1c>)
 8001aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aee:	6053      	str	r3, [r2, #4]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40007000 	.word	0x40007000

08001b00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d102      	bne.n	8001b14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f000 bc08 	b.w	8002324 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b14:	4b96      	ldr	r3, [pc, #600]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b1e:	4b94      	ldr	r3, [pc, #592]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80e4 	beq.w	8001cfe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d007      	beq.n	8001b4c <HAL_RCC_OscConfig+0x4c>
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	f040 808b 	bne.w	8001c5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	f040 8087 	bne.w	8001c5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b4c:	4b88      	ldr	r3, [pc, #544]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_OscConfig+0x64>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e3df      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1a      	ldr	r2, [r3, #32]
 8001b68:	4b81      	ldr	r3, [pc, #516]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d004      	beq.n	8001b7e <HAL_RCC_OscConfig+0x7e>
 8001b74:	4b7e      	ldr	r3, [pc, #504]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b7c:	e005      	b.n	8001b8a <HAL_RCC_OscConfig+0x8a>
 8001b7e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d223      	bcs.n	8001bd6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 fd94 	bl	80026c0 <RCC_SetFlashLatencyFromMSIRange>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e3c0      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba2:	4b73      	ldr	r3, [pc, #460]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a72      	ldr	r2, [pc, #456]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001ba8:	f043 0308 	orr.w	r3, r3, #8
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b70      	ldr	r3, [pc, #448]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	496d      	ldr	r1, [pc, #436]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bc0:	4b6b      	ldr	r3, [pc, #428]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	4968      	ldr	r1, [pc, #416]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
 8001bd4:	e025      	b.n	8001c22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bd6:	4b66      	ldr	r3, [pc, #408]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a65      	ldr	r2, [pc, #404]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	f043 0308 	orr.w	r3, r3, #8
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b63      	ldr	r3, [pc, #396]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4960      	ldr	r1, [pc, #384]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bf4:	4b5e      	ldr	r3, [pc, #376]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	495b      	ldr	r1, [pc, #364]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d109      	bne.n	8001c22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 fd54 	bl	80026c0 <RCC_SetFlashLatencyFromMSIRange>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e380      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c22:	f000 fcc1 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4b51      	ldr	r3, [pc, #324]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	4950      	ldr	r1, [pc, #320]	@ (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c34:	5ccb      	ldrb	r3, [r1, r3]
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	4a4e      	ldr	r2, [pc, #312]	@ (8001d78 <HAL_RCC_OscConfig+0x278>)
 8001c40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c42:	4b4e      	ldr	r3, [pc, #312]	@ (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fbb2 	bl	80013b0 <HAL_InitTick>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d052      	beq.n	8001cfc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	e364      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d032      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c62:	4b43      	ldr	r3, [pc, #268]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a42      	ldr	r2, [pc, #264]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff fbef 	bl	8001450 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c76:	f7ff fbeb 	bl	8001450 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e34d      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c88:	4b39      	ldr	r3, [pc, #228]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c94:	4b36      	ldr	r3, [pc, #216]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a35      	ldr	r2, [pc, #212]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	f043 0308 	orr.w	r3, r3, #8
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b33      	ldr	r3, [pc, #204]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4930      	ldr	r1, [pc, #192]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	492b      	ldr	r1, [pc, #172]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	604b      	str	r3, [r1, #4]
 8001cc6:	e01a      	b.n	8001cfe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cc8:	4b29      	ldr	r3, [pc, #164]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a28      	ldr	r2, [pc, #160]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fbbc 	bl	8001450 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fbb8 	bl	8001450 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e31a      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cee:	4b20      	ldr	r3, [pc, #128]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x1dc>
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d073      	beq.n	8001df2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_OscConfig+0x21c>
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d10e      	bne.n	8001d34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d10b      	bne.n	8001d34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1c:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d063      	beq.n	8001df0 <HAL_RCC_OscConfig+0x2f0>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d15f      	bne.n	8001df0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e2f7      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d3c:	d106      	bne.n	8001d4c <HAL_RCC_OscConfig+0x24c>
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a0b      	ldr	r2, [pc, #44]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e025      	b.n	8001d98 <HAL_RCC_OscConfig+0x298>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d54:	d114      	bne.n	8001d80 <HAL_RCC_OscConfig+0x280>
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a05      	ldr	r2, [pc, #20]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	4b03      	ldr	r3, [pc, #12]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a02      	ldr	r2, [pc, #8]	@ (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e013      	b.n	8001d98 <HAL_RCC_OscConfig+0x298>
 8001d70:	40021000 	.word	0x40021000
 8001d74:	080035d0 	.word	0x080035d0
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000004 	.word	0x20000004
 8001d80:	4ba0      	ldr	r3, [pc, #640]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a9f      	ldr	r2, [pc, #636]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b9d      	ldr	r3, [pc, #628]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a9c      	ldr	r2, [pc, #624]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d013      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff fb56 	bl	8001450 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff fb52 	bl	8001450 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	@ 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e2b4      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dba:	4b92      	ldr	r3, [pc, #584]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x2a8>
 8001dc6:	e014      	b.n	8001df2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fb42 	bl	8001450 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff fb3e 	bl	8001450 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	@ 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e2a0      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001de2:	4b88      	ldr	r3, [pc, #544]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x2d0>
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d060      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_OscConfig+0x310>
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2b0c      	cmp	r3, #12
 8001e08:	d119      	bne.n	8001e3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d116      	bne.n	8001e3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e10:	4b7c      	ldr	r3, [pc, #496]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_OscConfig+0x328>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e27d      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e28:	4b76      	ldr	r3, [pc, #472]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	061b      	lsls	r3, r3, #24
 8001e36:	4973      	ldr	r1, [pc, #460]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e3c:	e040      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d023      	beq.n	8001e8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e46:	4b6f      	ldr	r3, [pc, #444]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a6e      	ldr	r2, [pc, #440]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7ff fafd 	bl	8001450 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5a:	f7ff faf9 	bl	8001450 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e25b      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e6c:	4b65      	ldr	r3, [pc, #404]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e78:	4b62      	ldr	r3, [pc, #392]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	495f      	ldr	r1, [pc, #380]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
 8001e8c:	e018      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a5c      	ldr	r2, [pc, #368]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7ff fad9 	bl	8001450 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea2:	f7ff fad5 	bl	8001450 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e237      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eb4:	4b53      	ldr	r3, [pc, #332]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d03c      	beq.n	8001f46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01c      	beq.n	8001f0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eda:	4a4a      	ldr	r2, [pc, #296]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7ff fab4 	bl	8001450 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eec:	f7ff fab0 	bl	8001450 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e212      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001efe:	4b41      	ldr	r3, [pc, #260]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ef      	beq.n	8001eec <HAL_RCC_OscConfig+0x3ec>
 8001f0c:	e01b      	b.n	8001f46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f14:	4a3b      	ldr	r2, [pc, #236]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1e:	f7ff fa97 	bl	8001450 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f26:	f7ff fa93 	bl	8001450 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e1f5      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f38:	4b32      	ldr	r3, [pc, #200]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ef      	bne.n	8001f26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80a6 	beq.w	80020a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f54:	2300      	movs	r3, #0
 8001f56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f58:	4b2a      	ldr	r3, [pc, #168]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10d      	bne.n	8001f80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f64:	4b27      	ldr	r3, [pc, #156]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f68:	4a26      	ldr	r2, [pc, #152]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f70:	4b24      	ldr	r3, [pc, #144]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f80:	4b21      	ldr	r3, [pc, #132]	@ (8002008 <HAL_RCC_OscConfig+0x508>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d118      	bne.n	8001fbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002008 <HAL_RCC_OscConfig+0x508>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1d      	ldr	r2, [pc, #116]	@ (8002008 <HAL_RCC_OscConfig+0x508>)
 8001f92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f98:	f7ff fa5a 	bl	8001450 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa0:	f7ff fa56 	bl	8001450 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1b8      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb2:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <HAL_RCC_OscConfig+0x508>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d108      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x4d8>
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fd6:	e029      	b.n	800202c <HAL_RCC_OscConfig+0x52c>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	d115      	bne.n	800200c <HAL_RCC_OscConfig+0x50c>
 8001fe0:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe6:	4a07      	ldr	r2, [pc, #28]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ff0:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff6:	4a03      	ldr	r2, [pc, #12]	@ (8002004 <HAL_RCC_OscConfig+0x504>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002000:	e014      	b.n	800202c <HAL_RCC_OscConfig+0x52c>
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	40007000 	.word	0x40007000
 800200c:	4b9d      	ldr	r3, [pc, #628]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002012:	4a9c      	ldr	r2, [pc, #624]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800201c:	4b99      	ldr	r3, [pc, #612]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002022:	4a98      	ldr	r2, [pc, #608]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d016      	beq.n	8002062 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7ff fa0c 	bl	8001450 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203a:	e00a      	b.n	8002052 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7ff fa08 	bl	8001450 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e168      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002052:	4b8c      	ldr	r3, [pc, #560]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ed      	beq.n	800203c <HAL_RCC_OscConfig+0x53c>
 8002060:	e015      	b.n	800208e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002062:	f7ff f9f5 	bl	8001450 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002068:	e00a      	b.n	8002080 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206a:	f7ff f9f1 	bl	8001450 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002078:	4293      	cmp	r3, r2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e151      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002080:	4b80      	ldr	r3, [pc, #512]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1ed      	bne.n	800206a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800208e:	7ffb      	ldrb	r3, [r7, #31]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d105      	bne.n	80020a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002094:	4b7b      	ldr	r3, [pc, #492]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002098:	4a7a      	ldr	r2, [pc, #488]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 800209a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800209e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d03c      	beq.n	8002126 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d01c      	beq.n	80020ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020b4:	4b73      	ldr	r3, [pc, #460]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 80020b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020ba:	4a72      	ldr	r2, [pc, #456]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7ff f9c4 	bl	8001450 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020cc:	f7ff f9c0 	bl	8001450 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e122      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020de:	4b69      	ldr	r3, [pc, #420]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 80020e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0ef      	beq.n	80020cc <HAL_RCC_OscConfig+0x5cc>
 80020ec:	e01b      	b.n	8002126 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020ee:	4b65      	ldr	r3, [pc, #404]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 80020f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020f4:	4a63      	ldr	r2, [pc, #396]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 80020f6:	f023 0301 	bic.w	r3, r3, #1
 80020fa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fe:	f7ff f9a7 	bl	8001450 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002106:	f7ff f9a3 	bl	8001450 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e105      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002118:	4b5a      	ldr	r3, [pc, #360]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 800211a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ef      	bne.n	8002106 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 80f9 	beq.w	8002322 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002134:	2b02      	cmp	r3, #2
 8002136:	f040 80cf 	bne.w	80022d8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800213a:	4b52      	ldr	r3, [pc, #328]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f003 0203 	and.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214a:	429a      	cmp	r2, r3
 800214c:	d12c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002158:	3b01      	subs	r3, #1
 800215a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d123      	bne.n	80021a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800216a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d11b      	bne.n	80021a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d113      	bne.n	80021a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800218a:	085b      	lsrs	r3, r3, #1
 800218c:	3b01      	subs	r3, #1
 800218e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d109      	bne.n	80021a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	085b      	lsrs	r3, r3, #1
 80021a0:	3b01      	subs	r3, #1
 80021a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d071      	beq.n	800228c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2b0c      	cmp	r3, #12
 80021ac:	d068      	beq.n	8002280 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021ae:	4b35      	ldr	r3, [pc, #212]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d105      	bne.n	80021c6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021ba:	4b32      	ldr	r3, [pc, #200]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e0ac      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 80021d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021d6:	f7ff f93b 	bl	8001450 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021de:	f7ff f937 	bl	8001450 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e099      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f0:	4b24      	ldr	r3, [pc, #144]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f0      	bne.n	80021de <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021fc:	4b21      	ldr	r3, [pc, #132]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	4b21      	ldr	r3, [pc, #132]	@ (8002288 <HAL_RCC_OscConfig+0x788>)
 8002202:	4013      	ands	r3, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800220c:	3a01      	subs	r2, #1
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	4311      	orrs	r1, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002216:	0212      	lsls	r2, r2, #8
 8002218:	4311      	orrs	r1, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800221e:	0852      	lsrs	r2, r2, #1
 8002220:	3a01      	subs	r2, #1
 8002222:	0552      	lsls	r2, r2, #21
 8002224:	4311      	orrs	r1, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800222a:	0852      	lsrs	r2, r2, #1
 800222c:	3a01      	subs	r2, #1
 800222e:	0652      	lsls	r2, r2, #25
 8002230:	4311      	orrs	r1, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002236:	06d2      	lsls	r2, r2, #27
 8002238:	430a      	orrs	r2, r1
 800223a:	4912      	ldr	r1, [pc, #72]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 800223c:	4313      	orrs	r3, r2
 800223e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002240:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0f      	ldr	r2, [pc, #60]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 8002246:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800224a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800224c:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a0c      	ldr	r2, [pc, #48]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 8002252:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002256:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002258:	f7ff f8fa 	bl	8001450 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7ff f8f6 	bl	8001450 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e058      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002272:	4b04      	ldr	r3, [pc, #16]	@ (8002284 <HAL_RCC_OscConfig+0x784>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800227e:	e050      	b.n	8002322 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e04f      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
 8002284:	40021000 	.word	0x40021000
 8002288:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228c:	4b27      	ldr	r3, [pc, #156]	@ (800232c <HAL_RCC_OscConfig+0x82c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d144      	bne.n	8002322 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002298:	4b24      	ldr	r3, [pc, #144]	@ (800232c <HAL_RCC_OscConfig+0x82c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a23      	ldr	r2, [pc, #140]	@ (800232c <HAL_RCC_OscConfig+0x82c>)
 800229e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022a4:	4b21      	ldr	r3, [pc, #132]	@ (800232c <HAL_RCC_OscConfig+0x82c>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4a20      	ldr	r2, [pc, #128]	@ (800232c <HAL_RCC_OscConfig+0x82c>)
 80022aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022b0:	f7ff f8ce 	bl	8001450 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b8:	f7ff f8ca 	bl	8001450 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e02c      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ca:	4b18      	ldr	r3, [pc, #96]	@ (800232c <HAL_RCC_OscConfig+0x82c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x7b8>
 80022d6:	e024      	b.n	8002322 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2b0c      	cmp	r3, #12
 80022dc:	d01f      	beq.n	800231e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022de:	4b13      	ldr	r3, [pc, #76]	@ (800232c <HAL_RCC_OscConfig+0x82c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a12      	ldr	r2, [pc, #72]	@ (800232c <HAL_RCC_OscConfig+0x82c>)
 80022e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ea:	f7ff f8b1 	bl	8001450 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f2:	f7ff f8ad 	bl	8001450 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e00f      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002304:	4b09      	ldr	r3, [pc, #36]	@ (800232c <HAL_RCC_OscConfig+0x82c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f0      	bne.n	80022f2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002310:	4b06      	ldr	r3, [pc, #24]	@ (800232c <HAL_RCC_OscConfig+0x82c>)
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	4905      	ldr	r1, [pc, #20]	@ (800232c <HAL_RCC_OscConfig+0x82c>)
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_RCC_OscConfig+0x830>)
 8002318:	4013      	ands	r3, r2
 800231a:	60cb      	str	r3, [r1, #12]
 800231c:	e001      	b.n	8002322 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40021000 	.word	0x40021000
 8002330:	feeefffc 	.word	0xfeeefffc

08002334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e11d      	b.n	8002588 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800234c:	4b90      	ldr	r3, [pc, #576]	@ (8002590 <HAL_RCC_ClockConfig+0x25c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d910      	bls.n	800237c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b8d      	ldr	r3, [pc, #564]	@ (8002590 <HAL_RCC_ClockConfig+0x25c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 020f 	bic.w	r2, r3, #15
 8002362:	498b      	ldr	r1, [pc, #556]	@ (8002590 <HAL_RCC_ClockConfig+0x25c>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b89      	ldr	r3, [pc, #548]	@ (8002590 <HAL_RCC_ClockConfig+0x25c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e105      	b.n	8002588 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d010      	beq.n	80023aa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	4b81      	ldr	r3, [pc, #516]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002394:	429a      	cmp	r2, r3
 8002396:	d908      	bls.n	80023aa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002398:	4b7e      	ldr	r3, [pc, #504]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	497b      	ldr	r1, [pc, #492]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d079      	beq.n	80024aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d11e      	bne.n	80023fc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023be:	4b75      	ldr	r3, [pc, #468]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e0dc      	b.n	8002588 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80023ce:	f000 f9d1 	bl	8002774 <RCC_GetSysClockFreqFromPLLSource>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4a70      	ldr	r2, [pc, #448]	@ (8002598 <HAL_RCC_ClockConfig+0x264>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d946      	bls.n	8002468 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80023da:	4b6e      	ldr	r3, [pc, #440]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d140      	bne.n	8002468 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023e6:	4b6b      	ldr	r3, [pc, #428]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023ee:	4a69      	ldr	r2, [pc, #420]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 80023f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023f6:	2380      	movs	r3, #128	@ 0x80
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	e035      	b.n	8002468 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d107      	bne.n	8002414 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002404:	4b63      	ldr	r3, [pc, #396]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d115      	bne.n	800243c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0b9      	b.n	8002588 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d107      	bne.n	800242c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800241c:	4b5d      	ldr	r3, [pc, #372]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d109      	bne.n	800243c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0ad      	b.n	8002588 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800242c:	4b59      	ldr	r3, [pc, #356]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0a5      	b.n	8002588 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800243c:	f000 f8b4 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8002440:	4603      	mov	r3, r0
 8002442:	4a55      	ldr	r2, [pc, #340]	@ (8002598 <HAL_RCC_ClockConfig+0x264>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d90f      	bls.n	8002468 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002448:	4b52      	ldr	r3, [pc, #328]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d109      	bne.n	8002468 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002454:	4b4f      	ldr	r3, [pc, #316]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800245c:	4a4d      	ldr	r2, [pc, #308]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 800245e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002462:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002464:	2380      	movs	r3, #128	@ 0x80
 8002466:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002468:	4b4a      	ldr	r3, [pc, #296]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 0203 	bic.w	r2, r3, #3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4947      	ldr	r1, [pc, #284]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800247a:	f7fe ffe9 	bl	8001450 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002480:	e00a      	b.n	8002498 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002482:	f7fe ffe5 	bl	8001450 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002490:	4293      	cmp	r3, r2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e077      	b.n	8002588 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002498:	4b3e      	ldr	r3, [pc, #248]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 020c 	and.w	r2, r3, #12
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d1eb      	bne.n	8002482 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2b80      	cmp	r3, #128	@ 0x80
 80024ae:	d105      	bne.n	80024bc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024b0:	4b38      	ldr	r3, [pc, #224]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4a37      	ldr	r2, [pc, #220]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 80024b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024ba:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d010      	beq.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	4b31      	ldr	r3, [pc, #196]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d208      	bcs.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	492b      	ldr	r1, [pc, #172]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ea:	4b29      	ldr	r3, [pc, #164]	@ (8002590 <HAL_RCC_ClockConfig+0x25c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d210      	bcs.n	800251a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f8:	4b25      	ldr	r3, [pc, #148]	@ (8002590 <HAL_RCC_ClockConfig+0x25c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f023 020f 	bic.w	r2, r3, #15
 8002500:	4923      	ldr	r1, [pc, #140]	@ (8002590 <HAL_RCC_ClockConfig+0x25c>)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002508:	4b21      	ldr	r3, [pc, #132]	@ (8002590 <HAL_RCC_ClockConfig+0x25c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d001      	beq.n	800251a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e036      	b.n	8002588 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002526:	4b1b      	ldr	r3, [pc, #108]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	4918      	ldr	r1, [pc, #96]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 8002534:	4313      	orrs	r3, r2
 8002536:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d009      	beq.n	8002558 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002544:	4b13      	ldr	r3, [pc, #76]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4910      	ldr	r1, [pc, #64]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 8002554:	4313      	orrs	r3, r2
 8002556:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002558:	f000 f826 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 800255c:	4602      	mov	r2, r0
 800255e:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <HAL_RCC_ClockConfig+0x260>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	091b      	lsrs	r3, r3, #4
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	490c      	ldr	r1, [pc, #48]	@ (800259c <HAL_RCC_ClockConfig+0x268>)
 800256a:	5ccb      	ldrb	r3, [r1, r3]
 800256c:	f003 031f 	and.w	r3, r3, #31
 8002570:	fa22 f303 	lsr.w	r3, r2, r3
 8002574:	4a0a      	ldr	r2, [pc, #40]	@ (80025a0 <HAL_RCC_ClockConfig+0x26c>)
 8002576:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002578:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <HAL_RCC_ClockConfig+0x270>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe ff17 	bl	80013b0 <HAL_InitTick>
 8002582:	4603      	mov	r3, r0
 8002584:	73fb      	strb	r3, [r7, #15]

  return status;
 8002586:	7bfb      	ldrb	r3, [r7, #15]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40022000 	.word	0x40022000
 8002594:	40021000 	.word	0x40021000
 8002598:	04c4b400 	.word	0x04c4b400
 800259c:	080035d0 	.word	0x080035d0
 80025a0:	20000000 	.word	0x20000000
 80025a4:	20000004 	.word	0x20000004

080025a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b089      	sub	sp, #36	@ 0x24
 80025ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025b6:	4b3e      	ldr	r3, [pc, #248]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025c0:	4b3b      	ldr	r3, [pc, #236]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x34>
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	d121      	bne.n	800261a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d11e      	bne.n	800261a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025dc:	4b34      	ldr	r3, [pc, #208]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025e8:	4b31      	ldr	r3, [pc, #196]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	e005      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025f8:	4b2d      	ldr	r3, [pc, #180]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002604:	4a2b      	ldr	r2, [pc, #172]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10d      	bne.n	8002630 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002618:	e00a      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	2b04      	cmp	r3, #4
 800261e:	d102      	bne.n	8002626 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002620:	4b25      	ldr	r3, [pc, #148]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002622:	61bb      	str	r3, [r7, #24]
 8002624:	e004      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	2b08      	cmp	r3, #8
 800262a:	d101      	bne.n	8002630 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800262c:	4b23      	ldr	r3, [pc, #140]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x114>)
 800262e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	2b0c      	cmp	r3, #12
 8002634:	d134      	bne.n	80026a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002636:	4b1e      	ldr	r3, [pc, #120]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d003      	beq.n	800264e <HAL_RCC_GetSysClockFreq+0xa6>
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b03      	cmp	r3, #3
 800264a:	d003      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0xac>
 800264c:	e005      	b.n	800265a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800264e:	4b1a      	ldr	r3, [pc, #104]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002650:	617b      	str	r3, [r7, #20]
      break;
 8002652:	e005      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002654:	4b19      	ldr	r3, [pc, #100]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x114>)
 8002656:	617b      	str	r3, [r7, #20]
      break;
 8002658:	e002      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	617b      	str	r3, [r7, #20]
      break;
 800265e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002660:	4b13      	ldr	r3, [pc, #76]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	3301      	adds	r3, #1
 800266c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800266e:	4b10      	ldr	r3, [pc, #64]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	fb03 f202 	mul.w	r2, r3, r2
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	fbb2 f3f3 	udiv	r3, r2, r3
 8002684:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002686:	4b0a      	ldr	r3, [pc, #40]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	0e5b      	lsrs	r3, r3, #25
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	3301      	adds	r3, #1
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	fbb2 f3f3 	udiv	r3, r2, r3
 800269e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026a0:	69bb      	ldr	r3, [r7, #24]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	@ 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
 80026b4:	080035e0 	.word	0x080035e0
 80026b8:	00f42400 	.word	0x00f42400
 80026bc:	007a1200 	.word	0x007a1200

080026c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026cc:	4b27      	ldr	r3, [pc, #156]	@ (800276c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026d8:	f7ff f93e 	bl	8001958 <HAL_PWREx_GetVoltageRange>
 80026dc:	6178      	str	r0, [r7, #20]
 80026de:	e014      	b.n	800270a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026e0:	4b22      	ldr	r3, [pc, #136]	@ (800276c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e4:	4a21      	ldr	r2, [pc, #132]	@ (800276c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80026ec:	4b1f      	ldr	r3, [pc, #124]	@ (800276c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026f8:	f7ff f92e 	bl	8001958 <HAL_PWREx_GetVoltageRange>
 80026fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026fe:	4b1b      	ldr	r3, [pc, #108]	@ (800276c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002702:	4a1a      	ldr	r2, [pc, #104]	@ (800276c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002704:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002708:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002710:	d10b      	bne.n	800272a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b80      	cmp	r3, #128	@ 0x80
 8002716:	d913      	bls.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2ba0      	cmp	r3, #160	@ 0xa0
 800271c:	d902      	bls.n	8002724 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800271e:	2302      	movs	r3, #2
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	e00d      	b.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002724:	2301      	movs	r3, #1
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	e00a      	b.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b7f      	cmp	r3, #127	@ 0x7f
 800272e:	d902      	bls.n	8002736 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002730:	2302      	movs	r3, #2
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	e004      	b.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b70      	cmp	r3, #112	@ 0x70
 800273a:	d101      	bne.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800273c:	2301      	movs	r3, #1
 800273e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002740:	4b0b      	ldr	r3, [pc, #44]	@ (8002770 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f023 020f 	bic.w	r2, r3, #15
 8002748:	4909      	ldr	r1, [pc, #36]	@ (8002770 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002750:	4b07      	ldr	r3, [pc, #28]	@ (8002770 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	429a      	cmp	r2, r3
 800275c:	d001      	beq.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	40022000 	.word	0x40022000

08002774 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800277a:	4b2d      	ldr	r3, [pc, #180]	@ (8002830 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d00b      	beq.n	80027a2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d825      	bhi.n	80027dc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d008      	beq.n	80027a8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d11f      	bne.n	80027dc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800279c:	4b25      	ldr	r3, [pc, #148]	@ (8002834 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800279e:	613b      	str	r3, [r7, #16]
    break;
 80027a0:	e01f      	b.n	80027e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80027a2:	4b25      	ldr	r3, [pc, #148]	@ (8002838 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80027a4:	613b      	str	r3, [r7, #16]
    break;
 80027a6:	e01c      	b.n	80027e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027a8:	4b21      	ldr	r3, [pc, #132]	@ (8002830 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d107      	bne.n	80027c4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002830 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e005      	b.n	80027d0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002830 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80027d0:	4a1a      	ldr	r2, [pc, #104]	@ (800283c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d8:	613b      	str	r3, [r7, #16]
    break;
 80027da:	e002      	b.n	80027e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]
    break;
 80027e0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027e2:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	f003 030f 	and.w	r3, r3, #15
 80027ec:	3301      	adds	r3, #1
 80027ee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002830 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	fb03 f202 	mul.w	r2, r3, r2
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	fbb2 f3f3 	udiv	r3, r2, r3
 8002806:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002808:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	0e5b      	lsrs	r3, r3, #25
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	3301      	adds	r3, #1
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002820:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002822:	683b      	ldr	r3, [r7, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	371c      	adds	r7, #28
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	40021000 	.word	0x40021000
 8002834:	00f42400 	.word	0x00f42400
 8002838:	007a1200 	.word	0x007a1200
 800283c:	080035e0 	.word	0x080035e0

08002840 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e049      	b.n	80028e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe fc84 	bl	8001174 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3304      	adds	r3, #4
 800287c:	4619      	mov	r1, r3
 800287e:	4610      	mov	r0, r2
 8002880:	f000 fa50 	bl	8002d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d109      	bne.n	8002914 <HAL_TIM_PWM_Start+0x24>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b01      	cmp	r3, #1
 800290a:	bf14      	ite	ne
 800290c:	2301      	movne	r3, #1
 800290e:	2300      	moveq	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	e03c      	b.n	800298e <HAL_TIM_PWM_Start+0x9e>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2b04      	cmp	r3, #4
 8002918:	d109      	bne.n	800292e <HAL_TIM_PWM_Start+0x3e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b01      	cmp	r3, #1
 8002924:	bf14      	ite	ne
 8002926:	2301      	movne	r3, #1
 8002928:	2300      	moveq	r3, #0
 800292a:	b2db      	uxtb	r3, r3
 800292c:	e02f      	b.n	800298e <HAL_TIM_PWM_Start+0x9e>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b08      	cmp	r3, #8
 8002932:	d109      	bne.n	8002948 <HAL_TIM_PWM_Start+0x58>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	bf14      	ite	ne
 8002940:	2301      	movne	r3, #1
 8002942:	2300      	moveq	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	e022      	b.n	800298e <HAL_TIM_PWM_Start+0x9e>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	2b0c      	cmp	r3, #12
 800294c:	d109      	bne.n	8002962 <HAL_TIM_PWM_Start+0x72>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b01      	cmp	r3, #1
 8002958:	bf14      	ite	ne
 800295a:	2301      	movne	r3, #1
 800295c:	2300      	moveq	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	e015      	b.n	800298e <HAL_TIM_PWM_Start+0x9e>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b10      	cmp	r3, #16
 8002966:	d109      	bne.n	800297c <HAL_TIM_PWM_Start+0x8c>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b01      	cmp	r3, #1
 8002972:	bf14      	ite	ne
 8002974:	2301      	movne	r3, #1
 8002976:	2300      	moveq	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	e008      	b.n	800298e <HAL_TIM_PWM_Start+0x9e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	bf14      	ite	ne
 8002988:	2301      	movne	r3, #1
 800298a:	2300      	moveq	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e09c      	b.n	8002ad0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d104      	bne.n	80029a6 <HAL_TIM_PWM_Start+0xb6>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029a4:	e023      	b.n	80029ee <HAL_TIM_PWM_Start+0xfe>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d104      	bne.n	80029b6 <HAL_TIM_PWM_Start+0xc6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029b4:	e01b      	b.n	80029ee <HAL_TIM_PWM_Start+0xfe>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d104      	bne.n	80029c6 <HAL_TIM_PWM_Start+0xd6>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029c4:	e013      	b.n	80029ee <HAL_TIM_PWM_Start+0xfe>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b0c      	cmp	r3, #12
 80029ca:	d104      	bne.n	80029d6 <HAL_TIM_PWM_Start+0xe6>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029d4:	e00b      	b.n	80029ee <HAL_TIM_PWM_Start+0xfe>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d104      	bne.n	80029e6 <HAL_TIM_PWM_Start+0xf6>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029e4:	e003      	b.n	80029ee <HAL_TIM_PWM_Start+0xfe>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2202      	movs	r2, #2
 80029ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2201      	movs	r2, #1
 80029f4:	6839      	ldr	r1, [r7, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fd04 	bl	8003404 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a35      	ldr	r2, [pc, #212]	@ (8002ad8 <HAL_TIM_PWM_Start+0x1e8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <HAL_TIM_PWM_Start+0x13e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a34      	ldr	r2, [pc, #208]	@ (8002adc <HAL_TIM_PWM_Start+0x1ec>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00e      	beq.n	8002a2e <HAL_TIM_PWM_Start+0x13e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a32      	ldr	r2, [pc, #200]	@ (8002ae0 <HAL_TIM_PWM_Start+0x1f0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d009      	beq.n	8002a2e <HAL_TIM_PWM_Start+0x13e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a31      	ldr	r2, [pc, #196]	@ (8002ae4 <HAL_TIM_PWM_Start+0x1f4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d004      	beq.n	8002a2e <HAL_TIM_PWM_Start+0x13e>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a2f      	ldr	r2, [pc, #188]	@ (8002ae8 <HAL_TIM_PWM_Start+0x1f8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_TIM_PWM_Start+0x142>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_TIM_PWM_Start+0x144>
 8002a32:	2300      	movs	r3, #0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d007      	beq.n	8002a48 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a46:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a22      	ldr	r2, [pc, #136]	@ (8002ad8 <HAL_TIM_PWM_Start+0x1e8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d01d      	beq.n	8002a8e <HAL_TIM_PWM_Start+0x19e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a5a:	d018      	beq.n	8002a8e <HAL_TIM_PWM_Start+0x19e>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a22      	ldr	r2, [pc, #136]	@ (8002aec <HAL_TIM_PWM_Start+0x1fc>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <HAL_TIM_PWM_Start+0x19e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a21      	ldr	r2, [pc, #132]	@ (8002af0 <HAL_TIM_PWM_Start+0x200>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00e      	beq.n	8002a8e <HAL_TIM_PWM_Start+0x19e>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1f      	ldr	r2, [pc, #124]	@ (8002af4 <HAL_TIM_PWM_Start+0x204>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d009      	beq.n	8002a8e <HAL_TIM_PWM_Start+0x19e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a17      	ldr	r2, [pc, #92]	@ (8002adc <HAL_TIM_PWM_Start+0x1ec>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d004      	beq.n	8002a8e <HAL_TIM_PWM_Start+0x19e>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a15      	ldr	r2, [pc, #84]	@ (8002ae0 <HAL_TIM_PWM_Start+0x1f0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d115      	bne.n	8002aba <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	4b18      	ldr	r3, [pc, #96]	@ (8002af8 <HAL_TIM_PWM_Start+0x208>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2b06      	cmp	r3, #6
 8002a9e:	d015      	beq.n	8002acc <HAL_TIM_PWM_Start+0x1dc>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aa6:	d011      	beq.n	8002acc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab8:	e008      	b.n	8002acc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0201 	orr.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	e000      	b.n	8002ace <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002acc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40012c00 	.word	0x40012c00
 8002adc:	40013400 	.word	0x40013400
 8002ae0:	40014000 	.word	0x40014000
 8002ae4:	40014400 	.word	0x40014400
 8002ae8:	40014800 	.word	0x40014800
 8002aec:	40000400 	.word	0x40000400
 8002af0:	40000800 	.word	0x40000800
 8002af4:	40000c00 	.word	0x40000c00
 8002af8:	00010007 	.word	0x00010007

08002afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e0ff      	b.n	8002d1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b14      	cmp	r3, #20
 8002b26:	f200 80f0 	bhi.w	8002d0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b30:	08002b85 	.word	0x08002b85
 8002b34:	08002d0b 	.word	0x08002d0b
 8002b38:	08002d0b 	.word	0x08002d0b
 8002b3c:	08002d0b 	.word	0x08002d0b
 8002b40:	08002bc5 	.word	0x08002bc5
 8002b44:	08002d0b 	.word	0x08002d0b
 8002b48:	08002d0b 	.word	0x08002d0b
 8002b4c:	08002d0b 	.word	0x08002d0b
 8002b50:	08002c07 	.word	0x08002c07
 8002b54:	08002d0b 	.word	0x08002d0b
 8002b58:	08002d0b 	.word	0x08002d0b
 8002b5c:	08002d0b 	.word	0x08002d0b
 8002b60:	08002c47 	.word	0x08002c47
 8002b64:	08002d0b 	.word	0x08002d0b
 8002b68:	08002d0b 	.word	0x08002d0b
 8002b6c:	08002d0b 	.word	0x08002d0b
 8002b70:	08002c89 	.word	0x08002c89
 8002b74:	08002d0b 	.word	0x08002d0b
 8002b78:	08002d0b 	.word	0x08002d0b
 8002b7c:	08002d0b 	.word	0x08002d0b
 8002b80:	08002cc9 	.word	0x08002cc9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f964 	bl	8002e58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0208 	orr.w	r2, r2, #8
 8002b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0204 	bic.w	r2, r2, #4
 8002bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6999      	ldr	r1, [r3, #24]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	619a      	str	r2, [r3, #24]
      break;
 8002bc2:	e0a5      	b.n	8002d10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f9d4 	bl	8002f78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6999      	ldr	r1, [r3, #24]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	021a      	lsls	r2, r3, #8
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	619a      	str	r2, [r3, #24]
      break;
 8002c04:	e084      	b.n	8002d10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fa3d 	bl	800308c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69da      	ldr	r2, [r3, #28]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0208 	orr.w	r2, r2, #8
 8002c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69da      	ldr	r2, [r3, #28]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0204 	bic.w	r2, r2, #4
 8002c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	69d9      	ldr	r1, [r3, #28]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	61da      	str	r2, [r3, #28]
      break;
 8002c44:	e064      	b.n	8002d10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 faa5 	bl	800319c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69da      	ldr	r2, [r3, #28]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69d9      	ldr	r1, [r3, #28]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	021a      	lsls	r2, r3, #8
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	61da      	str	r2, [r3, #28]
      break;
 8002c86:	e043      	b.n	8002d10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 faee 	bl	8003270 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0208 	orr.w	r2, r2, #8
 8002ca2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0204 	bic.w	r2, r2, #4
 8002cb2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002cc6:	e023      	b.n	8002d10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fb32 	bl	8003338 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ce2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cf2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	021a      	lsls	r2, r3, #8
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002d08:	e002      	b.n	8002d10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop

08002d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a40      	ldr	r2, [pc, #256]	@ (8002e38 <TIM_Base_SetConfig+0x114>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d42:	d00f      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a3d      	ldr	r2, [pc, #244]	@ (8002e3c <TIM_Base_SetConfig+0x118>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00b      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a3c      	ldr	r2, [pc, #240]	@ (8002e40 <TIM_Base_SetConfig+0x11c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d007      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a3b      	ldr	r2, [pc, #236]	@ (8002e44 <TIM_Base_SetConfig+0x120>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d003      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a3a      	ldr	r2, [pc, #232]	@ (8002e48 <TIM_Base_SetConfig+0x124>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d108      	bne.n	8002d76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a2f      	ldr	r2, [pc, #188]	@ (8002e38 <TIM_Base_SetConfig+0x114>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01f      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d84:	d01b      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a2c      	ldr	r2, [pc, #176]	@ (8002e3c <TIM_Base_SetConfig+0x118>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d017      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a2b      	ldr	r2, [pc, #172]	@ (8002e40 <TIM_Base_SetConfig+0x11c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a2a      	ldr	r2, [pc, #168]	@ (8002e44 <TIM_Base_SetConfig+0x120>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00f      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a29      	ldr	r2, [pc, #164]	@ (8002e48 <TIM_Base_SetConfig+0x124>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00b      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a28      	ldr	r2, [pc, #160]	@ (8002e4c <TIM_Base_SetConfig+0x128>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a27      	ldr	r2, [pc, #156]	@ (8002e50 <TIM_Base_SetConfig+0x12c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d003      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a26      	ldr	r2, [pc, #152]	@ (8002e54 <TIM_Base_SetConfig+0x130>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d108      	bne.n	8002dd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a10      	ldr	r2, [pc, #64]	@ (8002e38 <TIM_Base_SetConfig+0x114>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00f      	beq.n	8002e1c <TIM_Base_SetConfig+0xf8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a12      	ldr	r2, [pc, #72]	@ (8002e48 <TIM_Base_SetConfig+0x124>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00b      	beq.n	8002e1c <TIM_Base_SetConfig+0xf8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a11      	ldr	r2, [pc, #68]	@ (8002e4c <TIM_Base_SetConfig+0x128>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d007      	beq.n	8002e1c <TIM_Base_SetConfig+0xf8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a10      	ldr	r2, [pc, #64]	@ (8002e50 <TIM_Base_SetConfig+0x12c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d003      	beq.n	8002e1c <TIM_Base_SetConfig+0xf8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a0f      	ldr	r2, [pc, #60]	@ (8002e54 <TIM_Base_SetConfig+0x130>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d103      	bne.n	8002e24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	615a      	str	r2, [r3, #20]
}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	40000800 	.word	0x40000800
 8002e44:	40000c00 	.word	0x40000c00
 8002e48:	40013400 	.word	0x40013400
 8002e4c:	40014000 	.word	0x40014000
 8002e50:	40014400 	.word	0x40014400
 8002e54:	40014800 	.word	0x40014800

08002e58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f023 0201 	bic.w	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f023 0302 	bic.w	r3, r3, #2
 8002ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a2c      	ldr	r2, [pc, #176]	@ (8002f64 <TIM_OC1_SetConfig+0x10c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00f      	beq.n	8002ed8 <TIM_OC1_SetConfig+0x80>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a2b      	ldr	r2, [pc, #172]	@ (8002f68 <TIM_OC1_SetConfig+0x110>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00b      	beq.n	8002ed8 <TIM_OC1_SetConfig+0x80>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a2a      	ldr	r2, [pc, #168]	@ (8002f6c <TIM_OC1_SetConfig+0x114>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <TIM_OC1_SetConfig+0x80>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a29      	ldr	r2, [pc, #164]	@ (8002f70 <TIM_OC1_SetConfig+0x118>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <TIM_OC1_SetConfig+0x80>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a28      	ldr	r2, [pc, #160]	@ (8002f74 <TIM_OC1_SetConfig+0x11c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d10c      	bne.n	8002ef2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f023 0308 	bic.w	r3, r3, #8
 8002ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f023 0304 	bic.w	r3, r3, #4
 8002ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f64 <TIM_OC1_SetConfig+0x10c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00f      	beq.n	8002f1a <TIM_OC1_SetConfig+0xc2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a1a      	ldr	r2, [pc, #104]	@ (8002f68 <TIM_OC1_SetConfig+0x110>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00b      	beq.n	8002f1a <TIM_OC1_SetConfig+0xc2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a19      	ldr	r2, [pc, #100]	@ (8002f6c <TIM_OC1_SetConfig+0x114>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d007      	beq.n	8002f1a <TIM_OC1_SetConfig+0xc2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a18      	ldr	r2, [pc, #96]	@ (8002f70 <TIM_OC1_SetConfig+0x118>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d003      	beq.n	8002f1a <TIM_OC1_SetConfig+0xc2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a17      	ldr	r2, [pc, #92]	@ (8002f74 <TIM_OC1_SetConfig+0x11c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d111      	bne.n	8002f3e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	621a      	str	r2, [r3, #32]
}
 8002f58:	bf00      	nop
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40013400 	.word	0x40013400
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40014400 	.word	0x40014400
 8002f74:	40014800 	.word	0x40014800

08002f78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	f023 0210 	bic.w	r2, r3, #16
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f023 0320 	bic.w	r3, r3, #32
 8002fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a28      	ldr	r2, [pc, #160]	@ (8003078 <TIM_OC2_SetConfig+0x100>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d003      	beq.n	8002fe4 <TIM_OC2_SetConfig+0x6c>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a27      	ldr	r2, [pc, #156]	@ (800307c <TIM_OC2_SetConfig+0x104>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d10d      	bne.n	8003000 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ffe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a1d      	ldr	r2, [pc, #116]	@ (8003078 <TIM_OC2_SetConfig+0x100>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00f      	beq.n	8003028 <TIM_OC2_SetConfig+0xb0>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a1c      	ldr	r2, [pc, #112]	@ (800307c <TIM_OC2_SetConfig+0x104>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00b      	beq.n	8003028 <TIM_OC2_SetConfig+0xb0>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a1b      	ldr	r2, [pc, #108]	@ (8003080 <TIM_OC2_SetConfig+0x108>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d007      	beq.n	8003028 <TIM_OC2_SetConfig+0xb0>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a1a      	ldr	r2, [pc, #104]	@ (8003084 <TIM_OC2_SetConfig+0x10c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d003      	beq.n	8003028 <TIM_OC2_SetConfig+0xb0>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a19      	ldr	r2, [pc, #100]	@ (8003088 <TIM_OC2_SetConfig+0x110>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d113      	bne.n	8003050 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800302e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003036:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	621a      	str	r2, [r3, #32]
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40012c00 	.word	0x40012c00
 800307c:	40013400 	.word	0x40013400
 8003080:	40014000 	.word	0x40014000
 8003084:	40014400 	.word	0x40014400
 8003088:	40014800 	.word	0x40014800

0800308c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0303 	bic.w	r3, r3, #3
 80030c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	021b      	lsls	r3, r3, #8
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a27      	ldr	r2, [pc, #156]	@ (8003188 <TIM_OC3_SetConfig+0xfc>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d003      	beq.n	80030f6 <TIM_OC3_SetConfig+0x6a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a26      	ldr	r2, [pc, #152]	@ (800318c <TIM_OC3_SetConfig+0x100>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d10d      	bne.n	8003112 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	021b      	lsls	r3, r3, #8
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4313      	orrs	r3, r2
 8003108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a1c      	ldr	r2, [pc, #112]	@ (8003188 <TIM_OC3_SetConfig+0xfc>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00f      	beq.n	800313a <TIM_OC3_SetConfig+0xae>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a1b      	ldr	r2, [pc, #108]	@ (800318c <TIM_OC3_SetConfig+0x100>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00b      	beq.n	800313a <TIM_OC3_SetConfig+0xae>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a1a      	ldr	r2, [pc, #104]	@ (8003190 <TIM_OC3_SetConfig+0x104>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d007      	beq.n	800313a <TIM_OC3_SetConfig+0xae>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a19      	ldr	r2, [pc, #100]	@ (8003194 <TIM_OC3_SetConfig+0x108>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d003      	beq.n	800313a <TIM_OC3_SetConfig+0xae>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a18      	ldr	r2, [pc, #96]	@ (8003198 <TIM_OC3_SetConfig+0x10c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d113      	bne.n	8003162 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	621a      	str	r2, [r3, #32]
}
 800317c:	bf00      	nop
 800317e:	371c      	adds	r7, #28
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	40012c00 	.word	0x40012c00
 800318c:	40013400 	.word	0x40013400
 8003190:	40014000 	.word	0x40014000
 8003194:	40014400 	.word	0x40014400
 8003198:	40014800 	.word	0x40014800

0800319c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80031ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	031b      	lsls	r3, r3, #12
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a18      	ldr	r2, [pc, #96]	@ (800325c <TIM_OC4_SetConfig+0xc0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00f      	beq.n	8003220 <TIM_OC4_SetConfig+0x84>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a17      	ldr	r2, [pc, #92]	@ (8003260 <TIM_OC4_SetConfig+0xc4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00b      	beq.n	8003220 <TIM_OC4_SetConfig+0x84>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a16      	ldr	r2, [pc, #88]	@ (8003264 <TIM_OC4_SetConfig+0xc8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d007      	beq.n	8003220 <TIM_OC4_SetConfig+0x84>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a15      	ldr	r2, [pc, #84]	@ (8003268 <TIM_OC4_SetConfig+0xcc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d003      	beq.n	8003220 <TIM_OC4_SetConfig+0x84>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a14      	ldr	r2, [pc, #80]	@ (800326c <TIM_OC4_SetConfig+0xd0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d109      	bne.n	8003234 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	019b      	lsls	r3, r3, #6
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	621a      	str	r2, [r3, #32]
}
 800324e:	bf00      	nop
 8003250:	371c      	adds	r7, #28
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40012c00 	.word	0x40012c00
 8003260:	40013400 	.word	0x40013400
 8003264:	40014000 	.word	0x40014000
 8003268:	40014400 	.word	0x40014400
 800326c:	40014800 	.word	0x40014800

08003270 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800329e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80032b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	041b      	lsls	r3, r3, #16
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a17      	ldr	r2, [pc, #92]	@ (8003324 <TIM_OC5_SetConfig+0xb4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00f      	beq.n	80032ea <TIM_OC5_SetConfig+0x7a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a16      	ldr	r2, [pc, #88]	@ (8003328 <TIM_OC5_SetConfig+0xb8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00b      	beq.n	80032ea <TIM_OC5_SetConfig+0x7a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a15      	ldr	r2, [pc, #84]	@ (800332c <TIM_OC5_SetConfig+0xbc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d007      	beq.n	80032ea <TIM_OC5_SetConfig+0x7a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a14      	ldr	r2, [pc, #80]	@ (8003330 <TIM_OC5_SetConfig+0xc0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d003      	beq.n	80032ea <TIM_OC5_SetConfig+0x7a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a13      	ldr	r2, [pc, #76]	@ (8003334 <TIM_OC5_SetConfig+0xc4>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d109      	bne.n	80032fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	621a      	str	r2, [r3, #32]
}
 8003318:	bf00      	nop
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40012c00 	.word	0x40012c00
 8003328:	40013400 	.word	0x40013400
 800332c:	40014000 	.word	0x40014000
 8003330:	40014400 	.word	0x40014400
 8003334:	40014800 	.word	0x40014800

08003338 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800335e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003366:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800336a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800337e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	051b      	lsls	r3, r3, #20
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a18      	ldr	r2, [pc, #96]	@ (80033f0 <TIM_OC6_SetConfig+0xb8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d00f      	beq.n	80033b4 <TIM_OC6_SetConfig+0x7c>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a17      	ldr	r2, [pc, #92]	@ (80033f4 <TIM_OC6_SetConfig+0xbc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00b      	beq.n	80033b4 <TIM_OC6_SetConfig+0x7c>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a16      	ldr	r2, [pc, #88]	@ (80033f8 <TIM_OC6_SetConfig+0xc0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d007      	beq.n	80033b4 <TIM_OC6_SetConfig+0x7c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a15      	ldr	r2, [pc, #84]	@ (80033fc <TIM_OC6_SetConfig+0xc4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d003      	beq.n	80033b4 <TIM_OC6_SetConfig+0x7c>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a14      	ldr	r2, [pc, #80]	@ (8003400 <TIM_OC6_SetConfig+0xc8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d109      	bne.n	80033c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	029b      	lsls	r3, r3, #10
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	621a      	str	r2, [r3, #32]
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40012c00 	.word	0x40012c00
 80033f4:	40013400 	.word	0x40013400
 80033f8:	40014000 	.word	0x40014000
 80033fc:	40014400 	.word	0x40014400
 8003400:	40014800 	.word	0x40014800

08003404 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	2201      	movs	r2, #1
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a1a      	ldr	r2, [r3, #32]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	43db      	mvns	r3, r3
 8003426:	401a      	ands	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1a      	ldr	r2, [r3, #32]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	fa01 f303 	lsl.w	r3, r1, r3
 800343c:	431a      	orrs	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	621a      	str	r2, [r3, #32]
}
 8003442:	bf00      	nop
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003464:	2302      	movs	r3, #2
 8003466:	e068      	b.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a2e      	ldr	r2, [pc, #184]	@ (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a2d      	ldr	r2, [pc, #180]	@ (800354c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d108      	bne.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80034a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d01d      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034da:	d018      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003550 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d013      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003554 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00e      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a18      	ldr	r2, [pc, #96]	@ (8003558 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d009      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a13      	ldr	r2, [pc, #76]	@ (800354c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d004      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a14      	ldr	r2, [pc, #80]	@ (800355c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10c      	bne.n	8003528 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	4313      	orrs	r3, r2
 800351e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40012c00 	.word	0x40012c00
 800354c:	40013400 	.word	0x40013400
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800
 8003558:	40000c00 	.word	0x40000c00
 800355c:	40014000 	.word	0x40014000

08003560 <memset>:
 8003560:	4402      	add	r2, r0
 8003562:	4603      	mov	r3, r0
 8003564:	4293      	cmp	r3, r2
 8003566:	d100      	bne.n	800356a <memset+0xa>
 8003568:	4770      	bx	lr
 800356a:	f803 1b01 	strb.w	r1, [r3], #1
 800356e:	e7f9      	b.n	8003564 <memset+0x4>

08003570 <__libc_init_array>:
 8003570:	b570      	push	{r4, r5, r6, lr}
 8003572:	4d0d      	ldr	r5, [pc, #52]	@ (80035a8 <__libc_init_array+0x38>)
 8003574:	4c0d      	ldr	r4, [pc, #52]	@ (80035ac <__libc_init_array+0x3c>)
 8003576:	1b64      	subs	r4, r4, r5
 8003578:	10a4      	asrs	r4, r4, #2
 800357a:	2600      	movs	r6, #0
 800357c:	42a6      	cmp	r6, r4
 800357e:	d109      	bne.n	8003594 <__libc_init_array+0x24>
 8003580:	4d0b      	ldr	r5, [pc, #44]	@ (80035b0 <__libc_init_array+0x40>)
 8003582:	4c0c      	ldr	r4, [pc, #48]	@ (80035b4 <__libc_init_array+0x44>)
 8003584:	f000 f818 	bl	80035b8 <_init>
 8003588:	1b64      	subs	r4, r4, r5
 800358a:	10a4      	asrs	r4, r4, #2
 800358c:	2600      	movs	r6, #0
 800358e:	42a6      	cmp	r6, r4
 8003590:	d105      	bne.n	800359e <__libc_init_array+0x2e>
 8003592:	bd70      	pop	{r4, r5, r6, pc}
 8003594:	f855 3b04 	ldr.w	r3, [r5], #4
 8003598:	4798      	blx	r3
 800359a:	3601      	adds	r6, #1
 800359c:	e7ee      	b.n	800357c <__libc_init_array+0xc>
 800359e:	f855 3b04 	ldr.w	r3, [r5], #4
 80035a2:	4798      	blx	r3
 80035a4:	3601      	adds	r6, #1
 80035a6:	e7f2      	b.n	800358e <__libc_init_array+0x1e>
 80035a8:	08003610 	.word	0x08003610
 80035ac:	08003610 	.word	0x08003610
 80035b0:	08003610 	.word	0x08003610
 80035b4:	08003614 	.word	0x08003614

080035b8 <_init>:
 80035b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ba:	bf00      	nop
 80035bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035be:	bc08      	pop	{r3}
 80035c0:	469e      	mov	lr, r3
 80035c2:	4770      	bx	lr

080035c4 <_fini>:
 80035c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c6:	bf00      	nop
 80035c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ca:	bc08      	pop	{r3}
 80035cc:	469e      	mov	lr, r3
 80035ce:	4770      	bx	lr
