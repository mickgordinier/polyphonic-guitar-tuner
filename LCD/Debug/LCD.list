
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd4  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c8  08006f94  08006f94  00007f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800915c  0800915c  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800915c  0800915c  0000a15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009164  08009164  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009164  08009164  0000a164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009168  08009168  0000a168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800916c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  2000006c  080091d8  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  080091d8  0000b2e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011442  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d3  00000000  00000000  0001c4de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  0001ebb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002a0a0  00000000  00000000  0001f910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000117ca  00000000  00000000  000499b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ffdbd  00000000  00000000  0005b17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0015af37  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000a44  00000000  00000000  0015af7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003afc  00000000  00000000  0015b9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0015f4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006f7c 	.word	0x08006f7c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000070 	.word	0x20000070
 80001fc:	08006f7c 	.word	0x08006f7c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ILI9341_Select>:


#include "stm32l4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2110      	movs	r1, #16
 8000598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059c:	f001 fe4e 	bl	800223c <HAL_GPIO_WritePin>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2110      	movs	r1, #16
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b0:	f001 fe44 	bl	800223c <HAL_GPIO_WritePin>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <ILI9341_Reset>:

static void ILI9341_Reset() {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2101      	movs	r1, #1
 80005c0:	4806      	ldr	r0, [pc, #24]	@ (80005dc <ILI9341_Reset+0x24>)
 80005c2:	f001 fe3b 	bl	800223c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80005c6:	2005      	movs	r0, #5
 80005c8:	f001 f992 	bl	80018f0 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2101      	movs	r1, #1
 80005d0:	4802      	ldr	r0, [pc, #8]	@ (80005dc <ILI9341_Reset+0x24>)
 80005d2:	f001 fe33 	bl	800223c <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	48000400 	.word	0x48000400

080005e0 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2102      	movs	r1, #2
 80005ee:	4807      	ldr	r0, [pc, #28]	@ (800060c <ILI9341_WriteCommand+0x2c>)
 80005f0:	f001 fe24 	bl	800223c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80005f4:	1df9      	adds	r1, r7, #7
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	2201      	movs	r2, #1
 80005fc:	4804      	ldr	r0, [pc, #16]	@ (8000610 <ILI9341_WriteCommand+0x30>)
 80005fe:	f003 fb9c 	bl	8003d3a <HAL_SPI_Transmit>

}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	48000400 	.word	0x48000400
 8000610:	20000088 	.word	0x20000088

08000614 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	2102      	movs	r1, #2
 8000622:	4811      	ldr	r0, [pc, #68]	@ (8000668 <ILI9341_WriteData+0x54>)
 8000624:	f001 fe0a 	bl	800223c <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000628:	e015      	b.n	8000656 <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000630:	bf28      	it	cs
 8000632:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000636:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000638:	89fa      	ldrh	r2, [r7, #14]
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	6879      	ldr	r1, [r7, #4]
 8000640:	480a      	ldr	r0, [pc, #40]	@ (800066c <ILI9341_WriteData+0x58>)
 8000642:	f003 fb7a 	bl	8003d3a <HAL_SPI_Transmit>

        buff += chunk_size;
 8000646:	89fb      	ldrh	r3, [r7, #14]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 800064e:	89fb      	ldrh	r3, [r7, #14]
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1e6      	bne.n	800062a <ILI9341_WriteData+0x16>
    }
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	48000400 	.word	0x48000400
 800066c:	20000088 	.word	0x20000088

08000670 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	4604      	mov	r4, r0
 8000678:	4608      	mov	r0, r1
 800067a:	4611      	mov	r1, r2
 800067c:	461a      	mov	r2, r3
 800067e:	4623      	mov	r3, r4
 8000680:	80fb      	strh	r3, [r7, #6]
 8000682:	4603      	mov	r3, r0
 8000684:	80bb      	strh	r3, [r7, #4]
 8000686:	460b      	mov	r3, r1
 8000688:	807b      	strh	r3, [r7, #2]
 800068a:	4613      	mov	r3, r2
 800068c:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 800068e:	202a      	movs	r0, #42	@ 0x2a
 8000690:	f7ff ffa6 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	0a1b      	lsrs	r3, r3, #8
 8000698:	b29b      	uxth	r3, r3
 800069a:	b2db      	uxtb	r3, r3
 800069c:	733b      	strb	r3, [r7, #12]
 800069e:	88fb      	ldrh	r3, [r7, #6]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	737b      	strb	r3, [r7, #13]
 80006a4:	887b      	ldrh	r3, [r7, #2]
 80006a6:	0a1b      	lsrs	r3, r3, #8
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	73bb      	strb	r3, [r7, #14]
 80006ae:	887b      	ldrh	r3, [r7, #2]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2104      	movs	r1, #4
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffaa 	bl	8000614 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80006c0:	202b      	movs	r0, #43	@ 0x2b
 80006c2:	f7ff ff8d 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80006c6:	88bb      	ldrh	r3, [r7, #4]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	723b      	strb	r3, [r7, #8]
 80006d0:	88bb      	ldrh	r3, [r7, #4]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	727b      	strb	r3, [r7, #9]
 80006d6:	883b      	ldrh	r3, [r7, #0]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	b29b      	uxth	r3, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	72bb      	strb	r3, [r7, #10]
 80006e0:	883b      	ldrh	r3, [r7, #0]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2104      	movs	r1, #4
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ff91 	bl	8000614 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80006f2:	202c      	movs	r0, #44	@ 0x2c
 80006f4:	f7ff ff74 	bl	80005e0 <ILI9341_WriteCommand>
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd90      	pop	{r4, r7, pc}

08000700 <ILI9341_Init>:

void ILI9341_Init() {
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b09b      	sub	sp, #108	@ 0x6c
 8000704:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000706:	f7ff ff43 	bl	8000590 <ILI9341_Select>
    ILI9341_Reset();
 800070a:	f7ff ff55 	bl	80005b8 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 800070e:	2001      	movs	r0, #1
 8000710:	f7ff ff66 	bl	80005e0 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000714:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000718:	f001 f8ea 	bl	80018f0 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 800071c:	20cb      	movs	r0, #203	@ 0xcb
 800071e:	f7ff ff5f 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8000722:	4a87      	ldr	r2, [pc, #540]	@ (8000940 <ILI9341_Init+0x240>)
 8000724:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000728:	e892 0003 	ldmia.w	r2, {r0, r1}
 800072c:	6018      	str	r0, [r3, #0]
 800072e:	3304      	adds	r3, #4
 8000730:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000732:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000736:	2105      	movs	r1, #5
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff6b 	bl	8000614 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 800073e:	20cf      	movs	r0, #207	@ 0xcf
 8000740:	f7ff ff4e 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000744:	4a7f      	ldr	r2, [pc, #508]	@ (8000944 <ILI9341_Init+0x244>)
 8000746:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800074a:	6812      	ldr	r2, [r2, #0]
 800074c:	4611      	mov	r1, r2
 800074e:	8019      	strh	r1, [r3, #0]
 8000750:	3302      	adds	r3, #2
 8000752:	0c12      	lsrs	r2, r2, #16
 8000754:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000756:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800075a:	2103      	movs	r1, #3
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff59 	bl	8000614 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8000762:	20e8      	movs	r0, #232	@ 0xe8
 8000764:	f7ff ff3c 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000768:	4a77      	ldr	r2, [pc, #476]	@ (8000948 <ILI9341_Init+0x248>)
 800076a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800076e:	6812      	ldr	r2, [r2, #0]
 8000770:	4611      	mov	r1, r2
 8000772:	8019      	strh	r1, [r3, #0]
 8000774:	3302      	adds	r3, #2
 8000776:	0c12      	lsrs	r2, r2, #16
 8000778:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800077a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800077e:	2103      	movs	r1, #3
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff47 	bl	8000614 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8000786:	20ea      	movs	r0, #234	@ 0xea
 8000788:	f7ff ff2a 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 800078c:	2300      	movs	r3, #0
 800078e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 8000792:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000796:	2102      	movs	r1, #2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff3b 	bl	8000614 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800079e:	20ed      	movs	r0, #237	@ 0xed
 80007a0:	f7ff ff1e 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80007a4:	4b69      	ldr	r3, [pc, #420]	@ (800094c <ILI9341_Init+0x24c>)
 80007a6:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 80007a8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80007ac:	2104      	movs	r1, #4
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ff30 	bl	8000614 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80007b4:	20f7      	movs	r0, #247	@ 0xf7
 80007b6:	f7ff ff13 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 80007ba:	2320      	movs	r3, #32
 80007bc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80007c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007c4:	2101      	movs	r1, #1
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff24 	bl	8000614 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 80007cc:	20c0      	movs	r0, #192	@ 0xc0
 80007ce:	f7ff ff07 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 80007d2:	2323      	movs	r3, #35	@ 0x23
 80007d4:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 80007d8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007dc:	2101      	movs	r1, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff18 	bl	8000614 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80007e4:	20c1      	movs	r0, #193	@ 0xc1
 80007e6:	f7ff fefb 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80007ea:	2310      	movs	r3, #16
 80007ec:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 80007f0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80007f4:	2101      	movs	r1, #1
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff0c 	bl	8000614 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80007fc:	20c5      	movs	r0, #197	@ 0xc5
 80007fe:	f7ff feef 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8000802:	f642 033e 	movw	r3, #10302	@ 0x283e
 8000806:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 800080a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800080e:	2102      	movs	r1, #2
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff feff 	bl	8000614 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8000816:	20c7      	movs	r0, #199	@ 0xc7
 8000818:	f7ff fee2 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 800081c:	2386      	movs	r3, #134	@ 0x86
 800081e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8000822:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000826:	2101      	movs	r1, #1
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fef3 	bl	8000614 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 800082e:	2036      	movs	r0, #54	@ 0x36
 8000830:	f7ff fed6 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8000834:	2348      	movs	r3, #72	@ 0x48
 8000836:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 800083a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800083e:	2101      	movs	r1, #1
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fee7 	bl	8000614 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8000846:	203a      	movs	r0, #58	@ 0x3a
 8000848:	f7ff feca 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 800084c:	2355      	movs	r3, #85	@ 0x55
 800084e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 8000852:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000856:	2101      	movs	r1, #1
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fedb 	bl	8000614 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 800085e:	20b1      	movs	r0, #177	@ 0xb1
 8000860:	f7ff febe 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000864:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000868:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 800086a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800086e:	2102      	movs	r1, #2
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fecf 	bl	8000614 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8000876:	20b6      	movs	r0, #182	@ 0xb6
 8000878:	f7ff feb2 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 800087c:	4a34      	ldr	r2, [pc, #208]	@ (8000950 <ILI9341_Init+0x250>)
 800087e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000882:	6812      	ldr	r2, [r2, #0]
 8000884:	4611      	mov	r1, r2
 8000886:	8019      	strh	r1, [r3, #0]
 8000888:	3302      	adds	r3, #2
 800088a:	0c12      	lsrs	r2, r2, #16
 800088c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800088e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000892:	2103      	movs	r1, #3
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff febd 	bl	8000614 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 800089a:	20f2      	movs	r0, #242	@ 0xf2
 800089c:	f7ff fea0 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 80008a0:	2300      	movs	r3, #0
 80008a2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 80008a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008aa:	2101      	movs	r1, #1
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff feb1 	bl	8000614 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80008b2:	2026      	movs	r0, #38	@ 0x26
 80008b4:	f7ff fe94 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80008b8:	2301      	movs	r3, #1
 80008ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 80008be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c2:	2101      	movs	r1, #1
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fea5 	bl	8000614 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 80008ca:	20e0      	movs	r0, #224	@ 0xe0
 80008cc:	f7ff fe88 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80008d0:	4b20      	ldr	r3, [pc, #128]	@ (8000954 <ILI9341_Init+0x254>)
 80008d2:	f107 0414 	add.w	r4, r7, #20
 80008d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008d8:	c407      	stmia	r4!, {r0, r1, r2}
 80008da:	8023      	strh	r3, [r4, #0]
 80008dc:	3402      	adds	r4, #2
 80008de:	0c1b      	lsrs	r3, r3, #16
 80008e0:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	210f      	movs	r1, #15
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fe93 	bl	8000614 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80008ee:	20e1      	movs	r0, #225	@ 0xe1
 80008f0:	f7ff fe76 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80008f4:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <ILI9341_Init+0x258>)
 80008f6:	1d3c      	adds	r4, r7, #4
 80008f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008fa:	c407      	stmia	r4!, {r0, r1, r2}
 80008fc:	8023      	strh	r3, [r4, #0]
 80008fe:	3402      	adds	r4, #2
 8000900:	0c1b      	lsrs	r3, r3, #16
 8000902:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	210f      	movs	r1, #15
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fe83 	bl	8000614 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800090e:	2011      	movs	r0, #17
 8000910:	f7ff fe66 	bl	80005e0 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000914:	2078      	movs	r0, #120	@ 0x78
 8000916:	f000 ffeb 	bl	80018f0 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 800091a:	2029      	movs	r0, #41	@ 0x29
 800091c:	f7ff fe60 	bl	80005e0 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8000920:	2036      	movs	r0, #54	@ 0x36
 8000922:	f7ff fe5d 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8000926:	2348      	movs	r3, #72	@ 0x48
 8000928:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 800092a:	463b      	mov	r3, r7
 800092c:	2101      	movs	r1, #1
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fe70 	bl	8000614 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8000934:	f7ff fe36 	bl	80005a4 <ILI9341_Unselect>
}
 8000938:	bf00      	nop
 800093a:	376c      	adds	r7, #108	@ 0x6c
 800093c:	46bd      	mov	sp, r7
 800093e:	bd90      	pop	{r4, r7, pc}
 8000940:	08006f94 	.word	0x08006f94
 8000944:	08006f9c 	.word	0x08006f9c
 8000948:	08006fa0 	.word	0x08006fa0
 800094c:	81120364 	.word	0x81120364
 8000950:	08006fa4 	.word	0x08006fa4
 8000954:	08006fa8 	.word	0x08006fa8
 8000958:	08006fb8 	.word	0x08006fb8

0800095c <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800095c:	b082      	sub	sp, #8
 800095e:	b580      	push	{r7, lr}
 8000960:	b088      	sub	sp, #32
 8000962:	af00      	add	r7, sp, #0
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000966:	4603      	mov	r3, r0
 8000968:	80fb      	strh	r3, [r7, #6]
 800096a:	460b      	mov	r3, r1
 800096c:	80bb      	strh	r3, [r7, #4]
 800096e:	4613      	mov	r3, r2
 8000970:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000972:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000976:	461a      	mov	r2, r3
 8000978:	88fb      	ldrh	r3, [r7, #6]
 800097a:	4413      	add	r3, r2
 800097c:	b29b      	uxth	r3, r3
 800097e:	3b01      	subs	r3, #1
 8000980:	b29a      	uxth	r2, r3
 8000982:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000986:	4619      	mov	r1, r3
 8000988:	88bb      	ldrh	r3, [r7, #4]
 800098a:	440b      	add	r3, r1
 800098c:	b29b      	uxth	r3, r3
 800098e:	3b01      	subs	r3, #1
 8000990:	b29b      	uxth	r3, r3
 8000992:	88b9      	ldrh	r1, [r7, #4]
 8000994:	88f8      	ldrh	r0, [r7, #6]
 8000996:	f7ff fe6b 	bl	8000670 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
 800099e:	e041      	b.n	8000a24 <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 80009a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80009a2:	78fb      	ldrb	r3, [r7, #3]
 80009a4:	3b20      	subs	r3, #32
 80009a6:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80009aa:	fb01 f303 	mul.w	r3, r1, r3
 80009ae:	4619      	mov	r1, r3
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	440b      	add	r3, r1
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	4413      	add	r3, r2
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
 80009c0:	e027      	b.n	8000a12 <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00e      	beq.n	80009f0 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80009d2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	743b      	strb	r3, [r7, #16]
 80009dc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	2102      	movs	r1, #2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fe13 	bl	8000614 <ILI9341_WriteData>
 80009ee:	e00d      	b.n	8000a0c <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80009f0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80009f2:	0a1b      	lsrs	r3, r3, #8
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	733b      	strb	r3, [r7, #12]
 80009fa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	2102      	movs	r1, #2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fe04 	bl	8000614 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	61bb      	str	r3, [r7, #24]
 8000a12:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000a16:	461a      	mov	r2, r3
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d3d1      	bcc.n	80009c2 <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3301      	adds	r3, #1
 8000a22:	61fb      	str	r3, [r7, #28]
 8000a24:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000a28:	461a      	mov	r2, r3
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d3b7      	bcc.n	80009a0 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a3c:	b002      	add	sp, #8
 8000a3e:	4770      	bx	lr

08000a40 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a40:	b082      	sub	sp, #8
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af04      	add	r7, sp, #16
 8000a48:	603a      	str	r2, [r7, #0]
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	80fb      	strh	r3, [r7, #6]
 8000a50:	460b      	mov	r3, r1
 8000a52:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8000a54:	f7ff fd9c 	bl	8000590 <ILI9341_Select>

    while(*str) {
 8000a58:	e02e      	b.n	8000ab8 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	7d3a      	ldrb	r2, [r7, #20]
 8000a5e:	4413      	add	r3, r2
 8000a60:	2bef      	cmp	r3, #239	@ 0xef
 8000a62:	dd14      	ble.n	8000a8e <ILI9341_WriteString+0x4e>
            x = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000a68:	7d7b      	ldrb	r3, [r7, #21]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	88bb      	ldrh	r3, [r7, #4]
 8000a6e:	4413      	add	r3, r2
 8000a70:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8000a72:	88bb      	ldrh	r3, [r7, #4]
 8000a74:	7d7a      	ldrb	r2, [r7, #21]
 8000a76:	4413      	add	r3, r2
 8000a78:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a7c:	da21      	bge.n	8000ac2 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b20      	cmp	r3, #32
 8000a84:	d103      	bne.n	8000a8e <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	603b      	str	r3, [r7, #0]
                continue;
 8000a8c:	e014      	b.n	8000ab8 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	781a      	ldrb	r2, [r3, #0]
 8000a92:	88b9      	ldrh	r1, [r7, #4]
 8000a94:	88f8      	ldrh	r0, [r7, #6]
 8000a96:	8c3b      	ldrh	r3, [r7, #32]
 8000a98:	9302      	str	r3, [sp, #8]
 8000a9a:	8bbb      	ldrh	r3, [r7, #28]
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	f7ff ff5a 	bl	800095c <ILI9341_WriteChar>
        x += font.width;
 8000aa8:	7d3b      	ldrb	r3, [r7, #20]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	88fb      	ldrh	r3, [r7, #6]
 8000aae:	4413      	add	r3, r2
 8000ab0:	80fb      	strh	r3, [r7, #6]
        str++;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d1cc      	bne.n	8000a5a <ILI9341_WriteString+0x1a>
 8000ac0:	e000      	b.n	8000ac4 <ILI9341_WriteString+0x84>
                break;
 8000ac2:	bf00      	nop
    }

    ILI9341_Unselect();
 8000ac4:	f7ff fd6e 	bl	80005a4 <ILI9341_Unselect>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ad2:	b002      	add	sp, #8
 8000ad4:	4770      	bx	lr
	...

08000ad8 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4604      	mov	r4, r0
 8000ae0:	4608      	mov	r0, r1
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4623      	mov	r3, r4
 8000ae8:	80fb      	strh	r3, [r7, #6]
 8000aea:	4603      	mov	r3, r0
 8000aec:	80bb      	strh	r3, [r7, #4]
 8000aee:	460b      	mov	r3, r1
 8000af0:	807b      	strh	r3, [r7, #2]
 8000af2:	4613      	mov	r3, r2
 8000af4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	2bef      	cmp	r3, #239	@ 0xef
 8000afa:	d853      	bhi.n	8000ba4 <ILI9341_FillRectangle+0xcc>
 8000afc:	88bb      	ldrh	r3, [r7, #4]
 8000afe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b02:	d24f      	bcs.n	8000ba4 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000b04:	88fa      	ldrh	r2, [r7, #6]
 8000b06:	887b      	ldrh	r3, [r7, #2]
 8000b08:	4413      	add	r3, r2
 8000b0a:	2bf0      	cmp	r3, #240	@ 0xf0
 8000b0c:	dd03      	ble.n	8000b16 <ILI9341_FillRectangle+0x3e>
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000b14:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000b16:	88ba      	ldrh	r2, [r7, #4]
 8000b18:	883b      	ldrh	r3, [r7, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b20:	dd03      	ble.n	8000b2a <ILI9341_FillRectangle+0x52>
 8000b22:	88bb      	ldrh	r3, [r7, #4]
 8000b24:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000b28:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8000b2a:	f7ff fd31 	bl	8000590 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b2e:	88fa      	ldrh	r2, [r7, #6]
 8000b30:	887b      	ldrh	r3, [r7, #2]
 8000b32:	4413      	add	r3, r2
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	3b01      	subs	r3, #1
 8000b38:	b29c      	uxth	r4, r3
 8000b3a:	88ba      	ldrh	r2, [r7, #4]
 8000b3c:	883b      	ldrh	r3, [r7, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	3b01      	subs	r3, #1
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	88b9      	ldrh	r1, [r7, #4]
 8000b48:	88f8      	ldrh	r0, [r7, #6]
 8000b4a:	4622      	mov	r2, r4
 8000b4c:	f7ff fd90 	bl	8000670 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000b50:	8c3b      	ldrh	r3, [r7, #32]
 8000b52:	0a1b      	lsrs	r3, r3, #8
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	733b      	strb	r3, [r7, #12]
 8000b5a:	8c3b      	ldrh	r3, [r7, #32]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2102      	movs	r1, #2
 8000b64:	4811      	ldr	r0, [pc, #68]	@ (8000bac <ILI9341_FillRectangle+0xd4>)
 8000b66:	f001 fb69 	bl	800223c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000b6a:	883b      	ldrh	r3, [r7, #0]
 8000b6c:	80bb      	strh	r3, [r7, #4]
 8000b6e:	e013      	b.n	8000b98 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 8000b70:	887b      	ldrh	r3, [r7, #2]
 8000b72:	80fb      	strh	r3, [r7, #6]
 8000b74:	e00a      	b.n	8000b8c <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000b76:	f107 010c 	add.w	r1, r7, #12
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	2202      	movs	r2, #2
 8000b80:	480b      	ldr	r0, [pc, #44]	@ (8000bb0 <ILI9341_FillRectangle+0xd8>)
 8000b82:	f003 f8da 	bl	8003d3a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	80fb      	strh	r3, [r7, #6]
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1f1      	bne.n	8000b76 <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 8000b92:	88bb      	ldrh	r3, [r7, #4]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	80bb      	strh	r3, [r7, #4]
 8000b98:	88bb      	ldrh	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1e8      	bne.n	8000b70 <ILI9341_FillRectangle+0x98>

        }
    }

    ILI9341_Unselect();
 8000b9e:	f7ff fd01 	bl	80005a4 <ILI9341_Unselect>
 8000ba2:	e000      	b.n	8000ba6 <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000ba4:	bf00      	nop
}
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd90      	pop	{r4, r7, pc}
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	20000088 	.word	0x20000088

08000bb4 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000bc6:	22f0      	movs	r2, #240	@ 0xf0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f7ff ff84 	bl	8000ad8 <ILI9341_FillRectangle>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000be2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be6:	f001 fb29 	bl	800223c <HAL_GPIO_WritePin>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}

08000bee <init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init() {
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
	ILI9341_Unselect();
 8000bf2:	f7ff fcd7 	bl	80005a4 <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 8000bf6:	f7ff ffef 	bl	8000bd8 <ILI9341_TouchUnselect>
	ILI9341_Init();
 8000bfa:	f7ff fd81 	bl	8000700 <ILI9341_Init>
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	@ 0x28
 8000c08:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0a:	f000 fdfc 	bl	8001806 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0e:	f000 f897 	bl	8000d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c12:	f000 f965 	bl	8000ee0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c16:	f000 f8d9 	bl	8000dcc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c1a:	f000 f915 	bl	8000e48 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  init();
 8000c1e:	f7ff ffe6 	bl	8000bee <init>
  ILI9341_FillScreen(ILI9341_BLACK);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff ffc6 	bl	8000bb4 <ILI9341_FillScreen>

  char temp_str[3];

  ILI9341_WriteString(10, 0, "Detected String:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000c28:	4b3c      	ldr	r3, [pc, #240]	@ (8000d1c <main+0x118>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	9202      	str	r2, [sp, #8]
 8000c2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c32:	9201      	str	r2, [sp, #4]
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	9200      	str	r2, [sp, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a39      	ldr	r2, [pc, #228]	@ (8000d20 <main+0x11c>)
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	200a      	movs	r0, #10
 8000c40:	f7ff fefe 	bl	8000a40 <ILI9341_WriteString>
  ILI9341_WriteString(100, 30, "C", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8000c44:	4b37      	ldr	r3, [pc, #220]	@ (8000d24 <main+0x120>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	9202      	str	r2, [sp, #8]
 8000c4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c4e:	9201      	str	r2, [sp, #4]
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	9200      	str	r2, [sp, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a34      	ldr	r2, [pc, #208]	@ (8000d28 <main+0x124>)
 8000c58:	211e      	movs	r1, #30
 8000c5a:	2064      	movs	r0, #100	@ 0x64
 8000c5c:	f7ff fef0 	bl	8000a40 <ILI9341_WriteString>

	sprintf(temp_str, "%u", 102);
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	2266      	movs	r2, #102	@ 0x66
 8000c66:	4931      	ldr	r1, [pc, #196]	@ (8000d2c <main+0x128>)
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f005 fce7 	bl	800663c <siprintf>
	ILI9341_WriteString(10, 60, "Actual Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d1c <main+0x118>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	9202      	str	r2, [sp, #8]
 8000c74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c78:	9201      	str	r2, [sp, #4]
 8000c7a:	685a      	ldr	r2, [r3, #4]
 8000c7c:	9200      	str	r2, [sp, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a2b      	ldr	r2, [pc, #172]	@ (8000d30 <main+0x12c>)
 8000c82:	213c      	movs	r1, #60	@ 0x3c
 8000c84:	200a      	movs	r0, #10
 8000c86:	f7ff fedb 	bl	8000a40 <ILI9341_WriteString>
	ILI9341_WriteString(100, 90, temp_str, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8000c8a:	4b26      	ldr	r3, [pc, #152]	@ (8000d24 <main+0x120>)
 8000c8c:	f107 0110 	add.w	r1, r7, #16
 8000c90:	2200      	movs	r2, #0
 8000c92:	9202      	str	r2, [sp, #8]
 8000c94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c98:	9201      	str	r2, [sp, #4]
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	9200      	str	r2, [sp, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	460a      	mov	r2, r1
 8000ca2:	215a      	movs	r1, #90	@ 0x5a
 8000ca4:	2064      	movs	r0, #100	@ 0x64
 8000ca6:	f7ff fecb 	bl	8000a40 <ILI9341_WriteString>

	sprintf(temp_str, "%u", 356);
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8000cb2:	491e      	ldr	r1, [pc, #120]	@ (8000d2c <main+0x128>)
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f005 fcc1 	bl	800663c <siprintf>
	ILI9341_WriteString(10, 120, "Desired Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000cba:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <main+0x118>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	9202      	str	r2, [sp, #8]
 8000cc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cc4:	9201      	str	r2, [sp, #4]
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	9200      	str	r2, [sp, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a19      	ldr	r2, [pc, #100]	@ (8000d34 <main+0x130>)
 8000cce:	2178      	movs	r1, #120	@ 0x78
 8000cd0:	200a      	movs	r0, #10
 8000cd2:	f7ff feb5 	bl	8000a40 <ILI9341_WriteString>
	ILI9341_WriteString(100, 150, temp_str, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8000cd6:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <main+0x120>)
 8000cd8:	f107 0110 	add.w	r1, r7, #16
 8000cdc:	2200      	movs	r2, #0
 8000cde:	9202      	str	r2, [sp, #8]
 8000ce0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ce4:	9201      	str	r2, [sp, #4]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	9200      	str	r2, [sp, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	460a      	mov	r2, r1
 8000cee:	2196      	movs	r1, #150	@ 0x96
 8000cf0:	2064      	movs	r0, #100	@ 0x64
 8000cf2:	f7ff fea5 	bl	8000a40 <ILI9341_WriteString>


	  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8000cf6:	2210      	movs	r2, #16
 8000cf8:	490f      	ldr	r1, [pc, #60]	@ (8000d38 <main+0x134>)
 8000cfa:	4810      	ldr	r0, [pc, #64]	@ (8000d3c <main+0x138>)
 8000cfc:	f003 fc4e 	bl	800459c <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_UART_Receive(&huart1, rx_buffer, 16, HAL_MAX_DELAY) == HAL_OK)
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	2210      	movs	r2, #16
 8000d06:	490c      	ldr	r1, [pc, #48]	@ (8000d38 <main+0x134>)
 8000d08:	480c      	ldr	r0, [pc, #48]	@ (8000d3c <main+0x138>)
 8000d0a:	f003 fb7e 	bl	800440a <HAL_UART_Receive>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1f5      	bne.n	8000d00 <main+0xfc>
	      {
	          // If data received successfully, process your data here
	          // ProcessReceivedByte(rx_buffer[0]); // This is a placeholder function

	          // If using a larger buffer, process data accordingly
		  	  int hello_wotld = 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
  {
 8000d18:	e7f2      	b.n	8000d00 <main+0xfc>
 8000d1a:	bf00      	nop
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	08006fcc 	.word	0x08006fcc
 8000d24:	20000008 	.word	0x20000008
 8000d28:	08006fe0 	.word	0x08006fe0
 8000d2c:	08006fe4 	.word	0x08006fe4
 8000d30:	08006fe8 	.word	0x08006fe8
 8000d34:	08006ffc 	.word	0x08006ffc
 8000d38:	20000180 	.word	0x20000180
 8000d3c:	200000ec 	.word	0x200000ec

08000d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b096      	sub	sp, #88	@ 0x58
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	2244      	movs	r2, #68	@ 0x44
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f005 fc94 	bl	800667c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	463b      	mov	r3, r7
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d62:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d66:	f001 faa1 	bl	80022ac <HAL_PWREx_ControlVoltageScaling>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d70:	f000 fba8 	bl	80014c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d74:	2310      	movs	r3, #16
 8000d76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8000d80:	2370      	movs	r3, #112	@ 0x70
 8000d82:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 fb41 	bl	8002414 <HAL_RCC_OscConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000d98:	f000 fb94 	bl	80014c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000db0:	463b      	mov	r3, r7
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f001 ff47 	bl	8002c48 <HAL_RCC_ClockConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000dc0:	f000 fb80 	bl	80014c4 <Error_Handler>
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	3758      	adds	r7, #88	@ 0x58
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e40 <MX_SPI1_Init+0x74>)
 8000dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e44 <MX_SPI1_Init+0x78>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <MX_SPI1_Init+0x74>)
 8000dd8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ddc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dde:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <MX_SPI1_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de4:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <MX_SPI1_Init+0x74>)
 8000de6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000dea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dec:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <MX_SPI1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df2:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <MX_SPI1_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000df8:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <MX_SPI1_Init+0x74>)
 8000dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dfe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <MX_SPI1_Init+0x74>)
 8000e02:	2228      	movs	r2, #40	@ 0x28
 8000e04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <MX_SPI1_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <MX_SPI1_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <MX_SPI1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e18:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <MX_SPI1_Init+0x74>)
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <MX_SPI1_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <MX_SPI1_Init+0x74>)
 8000e26:	2208      	movs	r2, #8
 8000e28:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <MX_SPI1_Init+0x74>)
 8000e2c:	f002 fee2 	bl	8003bf4 <HAL_SPI_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e36:	f000 fb45 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000088 	.word	0x20000088
 8000e44:	40013000 	.word	0x40013000

08000e48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e4c:	4b22      	ldr	r3, [pc, #136]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e4e:	4a23      	ldr	r2, [pc, #140]	@ (8000edc <MX_USART1_UART_Init+0x94>)
 8000e50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e54:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000e58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b17      	ldr	r3, [pc, #92]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e84:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e90:	4811      	ldr	r0, [pc, #68]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e92:	f003 fa2b 	bl	80042ec <HAL_UART_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e9c:	f000 fb12 	bl	80014c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000ea4:	f005 faff 	bl	80064a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000eae:	f000 fb09 	bl	80014c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4808      	ldr	r0, [pc, #32]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000eb6:	f005 fb34 	bl	8006522 <HAL_UARTEx_SetRxFifoThreshold>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ec0:	f000 fb00 	bl	80014c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000ec6:	f005 fab5 	bl	8006434 <HAL_UARTEx_DisableFifoMode>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ed0:	f000 faf8 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200000ec 	.word	0x200000ec
 8000edc:	40013800 	.word	0x40013800

08000ee0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08e      	sub	sp, #56	@ 0x38
 8000ee4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	4bb2      	ldr	r3, [pc, #712]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	4ab1      	ldr	r2, [pc, #708]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000efc:	f043 0310 	orr.w	r3, r3, #16
 8000f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f02:	4baf      	ldr	r3, [pc, #700]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	623b      	str	r3, [r7, #32]
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	4bac      	ldr	r3, [pc, #688]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	4aab      	ldr	r2, [pc, #684]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1a:	4ba9      	ldr	r3, [pc, #676]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f26:	4ba6      	ldr	r3, [pc, #664]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2a:	4aa5      	ldr	r2, [pc, #660]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f2c:	f043 0320 	orr.w	r3, r3, #32
 8000f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f32:	4ba3      	ldr	r3, [pc, #652]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f36:	f003 0320 	and.w	r3, r3, #32
 8000f3a:	61bb      	str	r3, [r7, #24]
 8000f3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3e:	4ba0      	ldr	r3, [pc, #640]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f42:	4a9f      	ldr	r2, [pc, #636]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4a:	4b9d      	ldr	r3, [pc, #628]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b9a      	ldr	r3, [pc, #616]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5a:	4a99      	ldr	r2, [pc, #612]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f62:	4b97      	ldr	r3, [pc, #604]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b94      	ldr	r3, [pc, #592]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f72:	4a93      	ldr	r2, [pc, #588]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7a:	4b91      	ldr	r3, [pc, #580]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f86:	4b8e      	ldr	r3, [pc, #568]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8a:	4a8d      	ldr	r2, [pc, #564]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f92:	4b8b      	ldr	r3, [pc, #556]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f9e:	4b88      	ldr	r3, [pc, #544]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa2:	4a87      	ldr	r2, [pc, #540]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000fa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000faa:	4b85      	ldr	r3, [pc, #532]	@ (80011c0 <MX_GPIO_Init+0x2e0>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000fb6:	f001 fa1d 	bl	80023f4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2110      	movs	r1, #16
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc2:	f001 f93b 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2103      	movs	r1, #3
 8000fca:	487e      	ldr	r0, [pc, #504]	@ (80011c4 <MX_GPIO_Init+0x2e4>)
 8000fcc:	f001 f936 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fd0:	230c      	movs	r3, #12
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000fe0:	230d      	movs	r3, #13
 8000fe2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4877      	ldr	r0, [pc, #476]	@ (80011c8 <MX_GPIO_Init+0x2e8>)
 8000fec:	f000 fea2 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff4:	2312      	movs	r3, #18
 8000ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001000:	2304      	movs	r3, #4
 8001002:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001008:	4619      	mov	r1, r3
 800100a:	4870      	ldr	r0, [pc, #448]	@ (80011cc <MX_GPIO_Init+0x2ec>)
 800100c:	f000 fe92 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001010:	2380      	movs	r3, #128	@ 0x80
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001020:	230d      	movs	r3, #13
 8001022:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001024:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001028:	4619      	mov	r1, r3
 800102a:	4868      	ldr	r0, [pc, #416]	@ (80011cc <MX_GPIO_Init+0x2ec>)
 800102c:	f000 fe82 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001030:	233f      	movs	r3, #63	@ 0x3f
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001034:	230b      	movs	r3, #11
 8001036:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001040:	4619      	mov	r1, r3
 8001042:	4863      	ldr	r0, [pc, #396]	@ (80011d0 <MX_GPIO_Init+0x2f0>)
 8001044:	f000 fe76 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001048:	2301      	movs	r3, #1
 800104a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001058:	2301      	movs	r3, #1
 800105a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001066:	f000 fe65 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800106a:	230a      	movs	r3, #10
 800106c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800106e:	230b      	movs	r3, #11
 8001070:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107a:	4619      	mov	r1, r3
 800107c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001080:	f000 fe58 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001084:	2310      	movs	r3, #16
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109e:	f000 fe49 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010a2:	2303      	movs	r3, #3
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b6:	4619      	mov	r1, r3
 80010b8:	4842      	ldr	r0, [pc, #264]	@ (80011c4 <MX_GPIO_Init+0x2e4>)
 80010ba:	f000 fe3b 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80010be:	2344      	movs	r3, #68	@ 0x44
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c2:	2303      	movs	r3, #3
 80010c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ce:	4619      	mov	r1, r3
 80010d0:	483c      	ldr	r0, [pc, #240]	@ (80011c4 <MX_GPIO_Init+0x2e4>)
 80010d2:	f000 fe2f 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80010d6:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f0:	4619      	mov	r1, r3
 80010f2:	4835      	ldr	r0, [pc, #212]	@ (80011c8 <MX_GPIO_Init+0x2e8>)
 80010f4:	f000 fe1e 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80010f8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800110a:	2303      	movs	r3, #3
 800110c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800110e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001112:	4619      	mov	r1, r3
 8001114:	482c      	ldr	r0, [pc, #176]	@ (80011c8 <MX_GPIO_Init+0x2e8>)
 8001116:	f000 fe0d 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800111a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800112c:	2301      	movs	r3, #1
 800112e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001134:	4619      	mov	r1, r3
 8001136:	4823      	ldr	r0, [pc, #140]	@ (80011c4 <MX_GPIO_Init+0x2e4>)
 8001138:	f000 fdfc 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800113c:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800114e:	230d      	movs	r3, #13
 8001150:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	481a      	ldr	r0, [pc, #104]	@ (80011c4 <MX_GPIO_Init+0x2e4>)
 800115a:	f000 fdeb 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800115e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001162:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001170:	230e      	movs	r3, #14
 8001172:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001174:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001178:	4619      	mov	r1, r3
 800117a:	4812      	ldr	r0, [pc, #72]	@ (80011c4 <MX_GPIO_Init+0x2e4>)
 800117c:	f000 fdda 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001180:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001192:	2307      	movs	r3, #7
 8001194:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119a:	4619      	mov	r1, r3
 800119c:	480d      	ldr	r0, [pc, #52]	@ (80011d4 <MX_GPIO_Init+0x2f4>)
 800119e:	f000 fdc9 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80011a2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80011a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011b4:	2302      	movs	r3, #2
 80011b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	e00b      	b.n	80011d8 <MX_GPIO_Init+0x2f8>
 80011c0:	40021000 	.word	0x40021000
 80011c4:	48000400 	.word	0x48000400
 80011c8:	48001000 	.word	0x48001000
 80011cc:	48001400 	.word	0x48001400
 80011d0:	48000800 	.word	0x48000800
 80011d4:	48000c00 	.word	0x48000c00
 80011d8:	4864      	ldr	r0, [pc, #400]	@ (800136c <MX_GPIO_Init+0x48c>)
 80011da:	f000 fdab 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80011de:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80011f0:	2308      	movs	r3, #8
 80011f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f8:	4619      	mov	r1, r3
 80011fa:	485d      	ldr	r0, [pc, #372]	@ (8001370 <MX_GPIO_Init+0x490>)
 80011fc:	f000 fd9a 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001200:	2340      	movs	r3, #64	@ 0x40
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001210:	230d      	movs	r3, #13
 8001212:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001214:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001218:	4619      	mov	r1, r3
 800121a:	4856      	ldr	r0, [pc, #344]	@ (8001374 <MX_GPIO_Init+0x494>)
 800121c:	f000 fd8a 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001220:	2380      	movs	r3, #128	@ 0x80
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001230:	2302      	movs	r3, #2
 8001232:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001238:	4619      	mov	r1, r3
 800123a:	484e      	ldr	r0, [pc, #312]	@ (8001374 <MX_GPIO_Init+0x494>)
 800123c:	f000 fd7a 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001240:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001252:	230c      	movs	r3, #12
 8001254:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800125a:	4619      	mov	r1, r3
 800125c:	4845      	ldr	r0, [pc, #276]	@ (8001374 <MX_GPIO_Init+0x494>)
 800125e:	f000 fd69 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001262:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001274:	230a      	movs	r3, #10
 8001276:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800127c:	4619      	mov	r1, r3
 800127e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001282:	f000 fd57 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001286:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800129e:	f000 fd49 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a2:	2301      	movs	r3, #1
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80012b2:	2309      	movs	r3, #9
 80012b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ba:	4619      	mov	r1, r3
 80012bc:	482b      	ldr	r0, [pc, #172]	@ (800136c <MX_GPIO_Init+0x48c>)
 80012be:	f000 fd39 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012c2:	2304      	movs	r3, #4
 80012c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012d2:	230c      	movs	r3, #12
 80012d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012da:	4619      	mov	r1, r3
 80012dc:	4823      	ldr	r0, [pc, #140]	@ (800136c <MX_GPIO_Init+0x48c>)
 80012de:	f000 fd29 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80012e2:	2378      	movs	r3, #120	@ 0x78
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f2:	2307      	movs	r3, #7
 80012f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012fa:	4619      	mov	r1, r3
 80012fc:	481b      	ldr	r0, [pc, #108]	@ (800136c <MX_GPIO_Init+0x48c>)
 80012fe:	f000 fd19 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001302:	2338      	movs	r3, #56	@ 0x38
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001312:	2306      	movs	r3, #6
 8001314:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800131a:	4619      	mov	r1, r3
 800131c:	4816      	ldr	r0, [pc, #88]	@ (8001378 <MX_GPIO_Init+0x498>)
 800131e:	f000 fd09 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001322:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001328:	2312      	movs	r3, #18
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001334:	2304      	movs	r3, #4
 8001336:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800133c:	4619      	mov	r1, r3
 800133e:	480e      	ldr	r0, [pc, #56]	@ (8001378 <MX_GPIO_Init+0x498>)
 8001340:	f000 fcf8 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001344:	2301      	movs	r3, #1
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001354:	2302      	movs	r3, #2
 8001356:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800135c:	4619      	mov	r1, r3
 800135e:	4807      	ldr	r0, [pc, #28]	@ (800137c <MX_GPIO_Init+0x49c>)
 8001360:	f000 fce8 	bl	8001d34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001364:	bf00      	nop
 8001366:	3738      	adds	r7, #56	@ 0x38
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	48000c00 	.word	0x48000c00
 8001370:	48001800 	.word	0x48001800
 8001374:	48000800 	.word	0x48000800
 8001378:	48000400 	.word	0x48000400
 800137c:	48001000 	.word	0x48001000

08001380 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	@ 0x28
 8001384:	af04      	add	r7, sp, #16
 8001386:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) // Make sure the callback is for the correct UART
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a49      	ldr	r2, [pc, #292]	@ (80014b4 <HAL_UART_RxCpltCallback+0x134>)
 800138e:	4293      	cmp	r3, r2
 8001390:	f040 808d 	bne.w	80014ae <HAL_UART_RxCpltCallback+0x12e>
    {
    	uint8_t first_key_idx = 16;
 8001394:	2310      	movs	r3, #16
 8001396:	75fb      	strb	r3, [r7, #23]

    	for (uint8_t i = 0; i < 8; ++i) {
 8001398:	2300      	movs	r3, #0
 800139a:	75bb      	strb	r3, [r7, #22]
 800139c:	e011      	b.n	80013c2 <HAL_UART_RxCpltCallback+0x42>
    		if (rx_buffer[i] == 0xFF && rx_buffer[i+1] == 0xFF) {
 800139e:	7dbb      	ldrb	r3, [r7, #22]
 80013a0:	4a45      	ldr	r2, [pc, #276]	@ (80014b8 <HAL_UART_RxCpltCallback+0x138>)
 80013a2:	5cd3      	ldrb	r3, [r2, r3]
 80013a4:	2bff      	cmp	r3, #255	@ 0xff
 80013a6:	d109      	bne.n	80013bc <HAL_UART_RxCpltCallback+0x3c>
 80013a8:	7dbb      	ldrb	r3, [r7, #22]
 80013aa:	3301      	adds	r3, #1
 80013ac:	4a42      	ldr	r2, [pc, #264]	@ (80014b8 <HAL_UART_RxCpltCallback+0x138>)
 80013ae:	5cd3      	ldrb	r3, [r2, r3]
 80013b0:	2bff      	cmp	r3, #255	@ 0xff
 80013b2:	d103      	bne.n	80013bc <HAL_UART_RxCpltCallback+0x3c>
    			first_key_idx = i+2;
 80013b4:	7dbb      	ldrb	r3, [r7, #22]
 80013b6:	3302      	adds	r3, #2
 80013b8:	75fb      	strb	r3, [r7, #23]
    			break;
 80013ba:	e005      	b.n	80013c8 <HAL_UART_RxCpltCallback+0x48>
    	for (uint8_t i = 0; i < 8; ++i) {
 80013bc:	7dbb      	ldrb	r3, [r7, #22]
 80013be:	3301      	adds	r3, #1
 80013c0:	75bb      	strb	r3, [r7, #22]
 80013c2:	7dbb      	ldrb	r3, [r7, #22]
 80013c4:	2b07      	cmp	r3, #7
 80013c6:	d9ea      	bls.n	800139e <HAL_UART_RxCpltCallback+0x1e>
    		}
    	}

    	if (first_key_idx == 16) {
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	2b10      	cmp	r3, #16
 80013cc:	d105      	bne.n	80013da <HAL_UART_RxCpltCallback+0x5a>
    		HAL_UART_Receive_IT(huart, rx_buffer, sizeof(rx_buffer));
 80013ce:	2210      	movs	r2, #16
 80013d0:	4939      	ldr	r1, [pc, #228]	@ (80014b8 <HAL_UART_RxCpltCallback+0x138>)
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f003 f8e2 	bl	800459c <HAL_UART_Receive_IT>
 80013d8:	e069      	b.n	80014ae <HAL_UART_RxCpltCallback+0x12e>
    		return;
    	}

        //uint8_t start2 = rx_buffer[first_key_idx];
        char detected_string2[2];
        detected_string2[0] = rx_buffer[first_key_idx+1];
 80013da:	7dfb      	ldrb	r3, [r7, #23]
 80013dc:	3301      	adds	r3, #1
 80013de:	4a36      	ldr	r2, [pc, #216]	@ (80014b8 <HAL_UART_RxCpltCallback+0x138>)
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
 80013e2:	743b      	strb	r3, [r7, #16]

        uint16_t charFreq2 = (rx_buffer[first_key_idx+3] << 8) | rx_buffer[first_key_idx+2];
 80013e4:	7dfb      	ldrb	r3, [r7, #23]
 80013e6:	3303      	adds	r3, #3
 80013e8:	4a33      	ldr	r2, [pc, #204]	@ (80014b8 <HAL_UART_RxCpltCallback+0x138>)
 80013ea:	5cd3      	ldrb	r3, [r2, r3]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	b21a      	sxth	r2, r3
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	3302      	adds	r3, #2
 80013f4:	4930      	ldr	r1, [pc, #192]	@ (80014b8 <HAL_UART_RxCpltCallback+0x138>)
 80013f6:	5ccb      	ldrb	r3, [r1, r3]
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	82bb      	strh	r3, [r7, #20]
        uint16_t desiredFreq2 = (rx_buffer[first_key_idx+5] << 8) | rx_buffer[first_key_idx+4];
 8001400:	7dfb      	ldrb	r3, [r7, #23]
 8001402:	3305      	adds	r3, #5
 8001404:	4a2c      	ldr	r2, [pc, #176]	@ (80014b8 <HAL_UART_RxCpltCallback+0x138>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21a      	sxth	r2, r3
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	3304      	adds	r3, #4
 8001410:	4929      	ldr	r1, [pc, #164]	@ (80014b8 <HAL_UART_RxCpltCallback+0x138>)
 8001412:	5ccb      	ldrb	r3, [r1, r3]
 8001414:	b21b      	sxth	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	b21b      	sxth	r3, r3
 800141a:	827b      	strh	r3, [r7, #18]

        char temp_str[4];
        //ILI9341_WriteString(10, 0, "Detected String:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
		ILI9341_WriteString(100, 30, &detected_string2, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 800141c:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <HAL_UART_RxCpltCallback+0x13c>)
 800141e:	f107 0110 	add.w	r1, r7, #16
 8001422:	2200      	movs	r2, #0
 8001424:	9202      	str	r2, [sp, #8]
 8001426:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800142a:	9201      	str	r2, [sp, #4]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	9200      	str	r2, [sp, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	460a      	mov	r2, r1
 8001434:	211e      	movs	r1, #30
 8001436:	2064      	movs	r0, #100	@ 0x64
 8001438:	f7ff fb02 	bl	8000a40 <ILI9341_WriteString>

		sprintf(temp_str, "%u", charFreq2);
 800143c:	8aba      	ldrh	r2, [r7, #20]
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	491f      	ldr	r1, [pc, #124]	@ (80014c0 <HAL_UART_RxCpltCallback+0x140>)
 8001444:	4618      	mov	r0, r3
 8001446:	f005 f8f9 	bl	800663c <siprintf>
		//ILI9341_WriteString(10, 60, "Actual Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
		ILI9341_WriteString(100, 90, &temp_str, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 800144a:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <HAL_UART_RxCpltCallback+0x13c>)
 800144c:	f107 010c 	add.w	r1, r7, #12
 8001450:	2200      	movs	r2, #0
 8001452:	9202      	str	r2, [sp, #8]
 8001454:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001458:	9201      	str	r2, [sp, #4]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	9200      	str	r2, [sp, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	460a      	mov	r2, r1
 8001462:	215a      	movs	r1, #90	@ 0x5a
 8001464:	2064      	movs	r0, #100	@ 0x64
 8001466:	f7ff faeb 	bl	8000a40 <ILI9341_WriteString>

		sprintf(temp_str, "%u", desiredFreq2);
 800146a:	8a7a      	ldrh	r2, [r7, #18]
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4913      	ldr	r1, [pc, #76]	@ (80014c0 <HAL_UART_RxCpltCallback+0x140>)
 8001472:	4618      	mov	r0, r3
 8001474:	f005 f8e2 	bl	800663c <siprintf>
		//ILI9341_WriteString(10, 120, "Desired Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
		ILI9341_WriteString(100, 150, &temp_str, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001478:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <HAL_UART_RxCpltCallback+0x13c>)
 800147a:	f107 010c 	add.w	r1, r7, #12
 800147e:	2200      	movs	r2, #0
 8001480:	9202      	str	r2, [sp, #8]
 8001482:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001486:	9201      	str	r2, [sp, #4]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	9200      	str	r2, [sp, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	460a      	mov	r2, r1
 8001490:	2196      	movs	r1, #150	@ 0x96
 8001492:	2064      	movs	r0, #100	@ 0x64
 8001494:	f7ff fad4 	bl	8000a40 <ILI9341_WriteString>

        // Process data: Use the variables as needed
		HAL_UART_DeInit(huart);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f002 ff77 	bl	800438c <HAL_UART_DeInit>

		    // Re-Initialize the UART peripheral
		    HAL_UART_Init(huart);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f002 ff24 	bl	80042ec <HAL_UART_Init>

        // Ready to receive the next piece of data
		HAL_UART_Receive_IT(huart, rx_buffer, sizeof(rx_buffer)); // Use correct size as per your protocol
 80014a4:	2210      	movs	r2, #16
 80014a6:	4904      	ldr	r1, [pc, #16]	@ (80014b8 <HAL_UART_RxCpltCallback+0x138>)
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f003 f877 	bl	800459c <HAL_UART_Receive_IT>
    }
}
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40013800 	.word	0x40013800
 80014b8:	20000180 	.word	0x20000180
 80014bc:	20000008 	.word	0x20000008
 80014c0:	08006fe4 	.word	0x08006fe4

080014c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <Error_Handler+0x8>

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <HAL_MspInit+0x44>)
 80014d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014da:	4a0e      	ldr	r2, [pc, #56]	@ (8001514 <HAL_MspInit+0x44>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80014e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <HAL_MspInit+0x44>)
 80014e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <HAL_MspInit+0x44>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f2:	4a08      	ldr	r2, [pc, #32]	@ (8001514 <HAL_MspInit+0x44>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_MspInit+0x44>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000

08001518 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	@ 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a17      	ldr	r2, [pc, #92]	@ (8001594 <HAL_SPI_MspInit+0x7c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d128      	bne.n	800158c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800153a:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <HAL_SPI_MspInit+0x80>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800153e:	4a16      	ldr	r2, [pc, #88]	@ (8001598 <HAL_SPI_MspInit+0x80>)
 8001540:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001544:	6613      	str	r3, [r2, #96]	@ 0x60
 8001546:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <HAL_SPI_MspInit+0x80>)
 8001548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800154a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <HAL_SPI_MspInit+0x80>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	4a10      	ldr	r2, [pc, #64]	@ (8001598 <HAL_SPI_MspInit+0x80>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <HAL_SPI_MspInit+0x80>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800156a:	23e0      	movs	r3, #224	@ 0xe0
 800156c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800157a:	2305      	movs	r3, #5
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001588:	f000 fbd4 	bl	8001d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800158c:	bf00      	nop
 800158e:	3728      	adds	r7, #40	@ 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40013000 	.word	0x40013000
 8001598:	40021000 	.word	0x40021000

0800159c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b0ae      	sub	sp, #184	@ 0xb8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	2294      	movs	r2, #148	@ 0x94
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f005 f85d 	bl	800667c <memset>
  if(huart->Instance==USART1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a26      	ldr	r2, [pc, #152]	@ (8001660 <HAL_UART_MspInit+0xc4>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d145      	bne.n	8001658 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015d0:	2300      	movs	r3, #0
 80015d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	4618      	mov	r0, r3
 80015da:	f001 fdf3 	bl	80031c4 <HAL_RCCEx_PeriphCLKConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015e4:	f7ff ff6e 	bl	80014c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001664 <HAL_UART_MspInit+0xc8>)
 80015ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001664 <HAL_UART_MspInit+0xc8>)
 80015ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80015f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <HAL_UART_MspInit+0xc8>)
 80015f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001600:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <HAL_UART_MspInit+0xc8>)
 8001602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001604:	4a17      	ldr	r2, [pc, #92]	@ (8001664 <HAL_UART_MspInit+0xc8>)
 8001606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800160a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800160c:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <HAL_UART_MspInit+0xc8>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001618:	f000 feec 	bl	80023f4 <HAL_PWREx_EnableVddIO2>
    /**USART1 GPIO Configuration
    PG9     ------> USART1_TX
    PG10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800161c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001620:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001636:	2307      	movs	r3, #7
 8001638:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800163c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001640:	4619      	mov	r1, r3
 8001642:	4809      	ldr	r0, [pc, #36]	@ (8001668 <HAL_UART_MspInit+0xcc>)
 8001644:	f000 fb76 	bl	8001d34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	2025      	movs	r0, #37	@ 0x25
 800164e:	f000 fa72 	bl	8001b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001652:	2025      	movs	r0, #37	@ 0x25
 8001654:	f000 fa8b 	bl	8001b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001658:	bf00      	nop
 800165a:	37b8      	adds	r7, #184	@ 0xb8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40013800 	.word	0x40013800
 8001664:	40021000 	.word	0x40021000
 8001668:	48001800 	.word	0x48001800

0800166c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0a      	ldr	r2, [pc, #40]	@ (80016a4 <HAL_UART_MspDeInit+0x38>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d10d      	bne.n	800169a <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <HAL_UART_MspDeInit+0x3c>)
 8001680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001682:	4a09      	ldr	r2, [pc, #36]	@ (80016a8 <HAL_UART_MspDeInit+0x3c>)
 8001684:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001688:	6613      	str	r3, [r2, #96]	@ 0x60

    /**USART1 GPIO Configuration
    PG9     ------> USART1_TX
    PG10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_10);
 800168a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800168e:	4807      	ldr	r0, [pc, #28]	@ (80016ac <HAL_UART_MspDeInit+0x40>)
 8001690:	f000 fce2 	bl	8002058 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001694:	2025      	movs	r0, #37	@ 0x25
 8001696:	f000 fa78 	bl	8001b8a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40021000 	.word	0x40021000
 80016ac:	48001800 	.word	0x48001800

080016b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <NMI_Handler+0x4>

080016b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <HardFault_Handler+0x4>

080016c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <MemManage_Handler+0x4>

080016c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <BusFault_Handler+0x4>

080016d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <UsageFault_Handler+0x4>

080016d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001706:	f000 f8d3 	bl	80018b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <USART1_IRQHandler+0x10>)
 8001716:	f002 ff8d 	bl	8004634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000ec 	.word	0x200000ec

08001724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800172c:	4a14      	ldr	r2, [pc, #80]	@ (8001780 <_sbrk+0x5c>)
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <_sbrk+0x60>)
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001738:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <_sbrk+0x64>)
 8001742:	4a12      	ldr	r2, [pc, #72]	@ (800178c <_sbrk+0x68>)
 8001744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001746:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	429a      	cmp	r2, r3
 8001752:	d207      	bcs.n	8001764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001754:	f004 ff9a 	bl	800668c <__errno>
 8001758:	4603      	mov	r3, r0
 800175a:	220c      	movs	r2, #12
 800175c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	e009      	b.n	8001778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001764:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176a:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	4a05      	ldr	r2, [pc, #20]	@ (8001788 <_sbrk+0x64>)
 8001774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200a0000 	.word	0x200a0000
 8001784:	00000400 	.word	0x00000400
 8001788:	20000190 	.word	0x20000190
 800178c:	200002e0 	.word	0x200002e0

08001790 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <SystemInit+0x20>)
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800179a:	4a05      	ldr	r2, [pc, #20]	@ (80017b0 <SystemInit+0x20>)
 800179c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b8:	f7ff ffea 	bl	8001790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017bc:	480c      	ldr	r0, [pc, #48]	@ (80017f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80017be:	490d      	ldr	r1, [pc, #52]	@ (80017f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017c0:	4a0d      	ldr	r2, [pc, #52]	@ (80017f8 <LoopForever+0xe>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c4:	e002      	b.n	80017cc <LoopCopyDataInit>

080017c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ca:	3304      	adds	r3, #4

080017cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d0:	d3f9      	bcc.n	80017c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d2:	4a0a      	ldr	r2, [pc, #40]	@ (80017fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80017d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001800 <LoopForever+0x16>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d8:	e001      	b.n	80017de <LoopFillZerobss>

080017da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017dc:	3204      	adds	r2, #4

080017de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e0:	d3fb      	bcc.n	80017da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e2:	f004 ff59 	bl	8006698 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017e6:	f7ff fa0d 	bl	8000c04 <main>

080017ea <LoopForever>:

LoopForever:
    b LoopForever
 80017ea:	e7fe      	b.n	80017ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017ec:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80017f8:	0800916c 	.word	0x0800916c
  ldr r2, =_sbss
 80017fc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001800:	200002e0 	.word	0x200002e0

08001804 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC1_IRQHandler>

08001806 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001810:	2003      	movs	r0, #3
 8001812:	f000 f985 	bl	8001b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001816:	2000      	movs	r0, #0
 8001818:	f000 f80e 	bl	8001838 <HAL_InitTick>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	71fb      	strb	r3, [r7, #7]
 8001826:	e001      	b.n	800182c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001828:	f7ff fe52 	bl	80014d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800182c:	79fb      	ldrb	r3, [r7, #7]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001844:	4b17      	ldr	r3, [pc, #92]	@ (80018a4 <HAL_InitTick+0x6c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d023      	beq.n	8001894 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800184c:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <HAL_InitTick+0x70>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <HAL_InitTick+0x6c>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4619      	mov	r1, r3
 8001856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800185a:	fbb3 f3f1 	udiv	r3, r3, r1
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f99f 	bl	8001ba6 <HAL_SYSTICK_Config>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10f      	bne.n	800188e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b0f      	cmp	r3, #15
 8001872:	d809      	bhi.n	8001888 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001874:	2200      	movs	r2, #0
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f000 f95b 	bl	8001b36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001880:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <HAL_InitTick+0x74>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e007      	b.n	8001898 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	e004      	b.n	8001898 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	e001      	b.n	8001898 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000018 	.word	0x20000018
 80018a8:	20000010 	.word	0x20000010
 80018ac:	20000014 	.word	0x20000014

080018b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <HAL_IncTick+0x20>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_IncTick+0x24>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	4a04      	ldr	r2, [pc, #16]	@ (80018d4 <HAL_IncTick+0x24>)
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000018 	.word	0x20000018
 80018d4:	20000194 	.word	0x20000194

080018d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return uwTick;
 80018dc:	4b03      	ldr	r3, [pc, #12]	@ (80018ec <HAL_GetTick+0x14>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000194 	.word	0x20000194

080018f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f8:	f7ff ffee 	bl	80018d8 <HAL_GetTick>
 80018fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001908:	d005      	beq.n	8001916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800190a:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <HAL_Delay+0x44>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001916:	bf00      	nop
 8001918:	f7ff ffde 	bl	80018d8 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	429a      	cmp	r2, r3
 8001926:	d8f7      	bhi.n	8001918 <HAL_Delay+0x28>
  {
  }
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000018 	.word	0x20000018

08001938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001954:	4013      	ands	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001960:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196a:	4a04      	ldr	r2, [pc, #16]	@ (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60d3      	str	r3, [r2, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001984:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <__NVIC_GetPriorityGrouping+0x18>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	f003 0307 	and.w	r3, r3, #7
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	db0b      	blt.n	80019c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	f003 021f 	and.w	r2, r3, #31
 80019b4:	4907      	ldr	r1, [pc, #28]	@ (80019d4 <__NVIC_EnableIRQ+0x38>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	2001      	movs	r0, #1
 80019be:	fa00 f202 	lsl.w	r2, r0, r2
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000e100 	.word	0xe000e100

080019d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db12      	blt.n	8001a10 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	f003 021f 	and.w	r2, r3, #31
 80019f0:	490a      	ldr	r1, [pc, #40]	@ (8001a1c <__NVIC_DisableIRQ+0x44>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	2001      	movs	r0, #1
 80019fa:	fa00 f202 	lsl.w	r2, r0, r2
 80019fe:	3320      	adds	r3, #32
 8001a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a04:	f3bf 8f4f 	dsb	sy
}
 8001a08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a0a:	f3bf 8f6f 	isb	sy
}
 8001a0e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db0a      	blt.n	8001a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	490c      	ldr	r1, [pc, #48]	@ (8001a6c <__NVIC_SetPriority+0x4c>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	440b      	add	r3, r1
 8001a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a48:	e00a      	b.n	8001a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4908      	ldr	r1, [pc, #32]	@ (8001a70 <__NVIC_SetPriority+0x50>)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	3b04      	subs	r3, #4
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	761a      	strb	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	@ 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f1c3 0307 	rsb	r3, r3, #7
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	bf28      	it	cs
 8001a92:	2304      	movcs	r3, #4
 8001a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d902      	bls.n	8001aa4 <NVIC_EncodePriority+0x30>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3b03      	subs	r3, #3
 8001aa2:	e000      	b.n	8001aa6 <NVIC_EncodePriority+0x32>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43d9      	mvns	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	4313      	orrs	r3, r2
         );
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	@ 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aec:	d301      	bcc.n	8001af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00f      	b.n	8001b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b1c <SysTick_Config+0x40>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afa:	210f      	movs	r1, #15
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f7ff ff8e 	bl	8001a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <SysTick_Config+0x40>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0a:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <SysTick_Config+0x40>)
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	e000e010 	.word	0xe000e010

08001b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff05 	bl	8001938 <__NVIC_SetPriorityGrouping>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b48:	f7ff ff1a 	bl	8001980 <__NVIC_GetPriorityGrouping>
 8001b4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	6978      	ldr	r0, [r7, #20]
 8001b54:	f7ff ff8e 	bl	8001a74 <NVIC_EncodePriority>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff5d 	bl	8001a20 <__NVIC_SetPriority>
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff0d 	bl	800199c <__NVIC_EnableIRQ>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff1d 	bl	80019d8 <__NVIC_DisableIRQ>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ff94 	bl	8001adc <SysTick_Config>
 8001bb4:	4603      	mov	r3, r0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b085      	sub	sp, #20
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d008      	beq.n	8001be8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2204      	movs	r2, #4
 8001bda:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e040      	b.n	8001c6a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 020e 	bic.w	r2, r2, #14
 8001bf6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c06:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1c:	f003 021c 	and.w	r2, r3, #28
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	2101      	movs	r1, #1
 8001c26:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c34:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00c      	beq.n	8001c58 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c4c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c56:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b084      	sub	sp, #16
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d005      	beq.n	8001c9a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2204      	movs	r2, #4
 8001c92:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	e047      	b.n	8001d2a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 020e 	bic.w	r2, r2, #14
 8001ca8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0201 	bic.w	r2, r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	f003 021c 	and.w	r2, r3, #28
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cdc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ce6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00c      	beq.n	8001d0a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cfa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cfe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d08:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	4798      	blx	r3
    }
  }
  return status;
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d42:	e166      	b.n	8002012 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2101      	movs	r1, #1
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	4013      	ands	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 8158 	beq.w	800200c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d005      	beq.n	8001d74 <HAL_GPIO_Init+0x40>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d130      	bne.n	8001dd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001daa:	2201      	movs	r2, #1
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	f003 0201 	and.w	r2, r3, #1
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d017      	beq.n	8001e12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	2203      	movs	r2, #3
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d123      	bne.n	8001e66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	08da      	lsrs	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3208      	adds	r2, #8
 8001e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	6939      	ldr	r1, [r7, #16]
 8001e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0203 	and.w	r2, r3, #3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80b2 	beq.w	800200c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea8:	4b61      	ldr	r3, [pc, #388]	@ (8002030 <HAL_GPIO_Init+0x2fc>)
 8001eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eac:	4a60      	ldr	r2, [pc, #384]	@ (8002030 <HAL_GPIO_Init+0x2fc>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eb4:	4b5e      	ldr	r3, [pc, #376]	@ (8002030 <HAL_GPIO_Init+0x2fc>)
 8001eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ec0:	4a5c      	ldr	r2, [pc, #368]	@ (8002034 <HAL_GPIO_Init+0x300>)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001eea:	d02b      	beq.n	8001f44 <HAL_GPIO_Init+0x210>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a52      	ldr	r2, [pc, #328]	@ (8002038 <HAL_GPIO_Init+0x304>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d025      	beq.n	8001f40 <HAL_GPIO_Init+0x20c>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a51      	ldr	r2, [pc, #324]	@ (800203c <HAL_GPIO_Init+0x308>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d01f      	beq.n	8001f3c <HAL_GPIO_Init+0x208>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a50      	ldr	r2, [pc, #320]	@ (8002040 <HAL_GPIO_Init+0x30c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d019      	beq.n	8001f38 <HAL_GPIO_Init+0x204>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a4f      	ldr	r2, [pc, #316]	@ (8002044 <HAL_GPIO_Init+0x310>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d013      	beq.n	8001f34 <HAL_GPIO_Init+0x200>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a4e      	ldr	r2, [pc, #312]	@ (8002048 <HAL_GPIO_Init+0x314>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d00d      	beq.n	8001f30 <HAL_GPIO_Init+0x1fc>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a4d      	ldr	r2, [pc, #308]	@ (800204c <HAL_GPIO_Init+0x318>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d007      	beq.n	8001f2c <HAL_GPIO_Init+0x1f8>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a4c      	ldr	r2, [pc, #304]	@ (8002050 <HAL_GPIO_Init+0x31c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d101      	bne.n	8001f28 <HAL_GPIO_Init+0x1f4>
 8001f24:	2307      	movs	r3, #7
 8001f26:	e00e      	b.n	8001f46 <HAL_GPIO_Init+0x212>
 8001f28:	2308      	movs	r3, #8
 8001f2a:	e00c      	b.n	8001f46 <HAL_GPIO_Init+0x212>
 8001f2c:	2306      	movs	r3, #6
 8001f2e:	e00a      	b.n	8001f46 <HAL_GPIO_Init+0x212>
 8001f30:	2305      	movs	r3, #5
 8001f32:	e008      	b.n	8001f46 <HAL_GPIO_Init+0x212>
 8001f34:	2304      	movs	r3, #4
 8001f36:	e006      	b.n	8001f46 <HAL_GPIO_Init+0x212>
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e004      	b.n	8001f46 <HAL_GPIO_Init+0x212>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e002      	b.n	8001f46 <HAL_GPIO_Init+0x212>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <HAL_GPIO_Init+0x212>
 8001f44:	2300      	movs	r3, #0
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	f002 0203 	and.w	r2, r2, #3
 8001f4c:	0092      	lsls	r2, r2, #2
 8001f4e:	4093      	lsls	r3, r2
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f56:	4937      	ldr	r1, [pc, #220]	@ (8002034 <HAL_GPIO_Init+0x300>)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f64:	4b3b      	ldr	r3, [pc, #236]	@ (8002054 <HAL_GPIO_Init+0x320>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f88:	4a32      	ldr	r2, [pc, #200]	@ (8002054 <HAL_GPIO_Init+0x320>)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f8e:	4b31      	ldr	r3, [pc, #196]	@ (8002054 <HAL_GPIO_Init+0x320>)
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fb2:	4a28      	ldr	r2, [pc, #160]	@ (8002054 <HAL_GPIO_Init+0x320>)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fb8:	4b26      	ldr	r3, [pc, #152]	@ (8002054 <HAL_GPIO_Init+0x320>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002054 <HAL_GPIO_Init+0x320>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8002054 <HAL_GPIO_Init+0x320>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002006:	4a13      	ldr	r2, [pc, #76]	@ (8002054 <HAL_GPIO_Init+0x320>)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	3301      	adds	r3, #1
 8002010:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	f47f ae91 	bne.w	8001d44 <HAL_GPIO_Init+0x10>
  }
}
 8002022:	bf00      	nop
 8002024:	bf00      	nop
 8002026:	371c      	adds	r7, #28
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	40021000 	.word	0x40021000
 8002034:	40010000 	.word	0x40010000
 8002038:	48000400 	.word	0x48000400
 800203c:	48000800 	.word	0x48000800
 8002040:	48000c00 	.word	0x48000c00
 8002044:	48001000 	.word	0x48001000
 8002048:	48001400 	.word	0x48001400
 800204c:	48001800 	.word	0x48001800
 8002050:	48001c00 	.word	0x48001c00
 8002054:	40010400 	.word	0x40010400

08002058 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002066:	e0c9      	b.n	80021fc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002068:	2201      	movs	r2, #1
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80bc 	beq.w	80021f6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800207e:	4a66      	ldr	r2, [pc, #408]	@ (8002218 <HAL_GPIO_DeInit+0x1c0>)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	3302      	adds	r3, #2
 8002086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	220f      	movs	r2, #15
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4013      	ands	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020a6:	d02b      	beq.n	8002100 <HAL_GPIO_DeInit+0xa8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a5c      	ldr	r2, [pc, #368]	@ (800221c <HAL_GPIO_DeInit+0x1c4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d025      	beq.n	80020fc <HAL_GPIO_DeInit+0xa4>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002220 <HAL_GPIO_DeInit+0x1c8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d01f      	beq.n	80020f8 <HAL_GPIO_DeInit+0xa0>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a5a      	ldr	r2, [pc, #360]	@ (8002224 <HAL_GPIO_DeInit+0x1cc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d019      	beq.n	80020f4 <HAL_GPIO_DeInit+0x9c>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a59      	ldr	r2, [pc, #356]	@ (8002228 <HAL_GPIO_DeInit+0x1d0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d013      	beq.n	80020f0 <HAL_GPIO_DeInit+0x98>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a58      	ldr	r2, [pc, #352]	@ (800222c <HAL_GPIO_DeInit+0x1d4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00d      	beq.n	80020ec <HAL_GPIO_DeInit+0x94>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a57      	ldr	r2, [pc, #348]	@ (8002230 <HAL_GPIO_DeInit+0x1d8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d007      	beq.n	80020e8 <HAL_GPIO_DeInit+0x90>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a56      	ldr	r2, [pc, #344]	@ (8002234 <HAL_GPIO_DeInit+0x1dc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_GPIO_DeInit+0x8c>
 80020e0:	2307      	movs	r3, #7
 80020e2:	e00e      	b.n	8002102 <HAL_GPIO_DeInit+0xaa>
 80020e4:	2308      	movs	r3, #8
 80020e6:	e00c      	b.n	8002102 <HAL_GPIO_DeInit+0xaa>
 80020e8:	2306      	movs	r3, #6
 80020ea:	e00a      	b.n	8002102 <HAL_GPIO_DeInit+0xaa>
 80020ec:	2305      	movs	r3, #5
 80020ee:	e008      	b.n	8002102 <HAL_GPIO_DeInit+0xaa>
 80020f0:	2304      	movs	r3, #4
 80020f2:	e006      	b.n	8002102 <HAL_GPIO_DeInit+0xaa>
 80020f4:	2303      	movs	r3, #3
 80020f6:	e004      	b.n	8002102 <HAL_GPIO_DeInit+0xaa>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e002      	b.n	8002102 <HAL_GPIO_DeInit+0xaa>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_GPIO_DeInit+0xaa>
 8002100:	2300      	movs	r3, #0
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	f002 0203 	and.w	r2, r2, #3
 8002108:	0092      	lsls	r2, r2, #2
 800210a:	4093      	lsls	r3, r2
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	429a      	cmp	r2, r3
 8002110:	d132      	bne.n	8002178 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002112:	4b49      	ldr	r3, [pc, #292]	@ (8002238 <HAL_GPIO_DeInit+0x1e0>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	43db      	mvns	r3, r3
 800211a:	4947      	ldr	r1, [pc, #284]	@ (8002238 <HAL_GPIO_DeInit+0x1e0>)
 800211c:	4013      	ands	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002120:	4b45      	ldr	r3, [pc, #276]	@ (8002238 <HAL_GPIO_DeInit+0x1e0>)
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	4943      	ldr	r1, [pc, #268]	@ (8002238 <HAL_GPIO_DeInit+0x1e0>)
 800212a:	4013      	ands	r3, r2
 800212c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800212e:	4b42      	ldr	r3, [pc, #264]	@ (8002238 <HAL_GPIO_DeInit+0x1e0>)
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	43db      	mvns	r3, r3
 8002136:	4940      	ldr	r1, [pc, #256]	@ (8002238 <HAL_GPIO_DeInit+0x1e0>)
 8002138:	4013      	ands	r3, r2
 800213a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800213c:	4b3e      	ldr	r3, [pc, #248]	@ (8002238 <HAL_GPIO_DeInit+0x1e0>)
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	43db      	mvns	r3, r3
 8002144:	493c      	ldr	r1, [pc, #240]	@ (8002238 <HAL_GPIO_DeInit+0x1e0>)
 8002146:	4013      	ands	r3, r2
 8002148:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800215a:	4a2f      	ldr	r2, [pc, #188]	@ (8002218 <HAL_GPIO_DeInit+0x1c0>)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	3302      	adds	r3, #2
 8002162:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	43da      	mvns	r2, r3
 800216a:	482b      	ldr	r0, [pc, #172]	@ (8002218 <HAL_GPIO_DeInit+0x1c0>)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	400a      	ands	r2, r1
 8002172:	3302      	adds	r3, #2
 8002174:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	2103      	movs	r1, #3
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	08da      	lsrs	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3208      	adds	r2, #8
 8002194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	220f      	movs	r2, #15
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	08d2      	lsrs	r2, r2, #3
 80021ac:	4019      	ands	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2103      	movs	r1, #3
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	401a      	ands	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	2101      	movs	r1, #1
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	fa01 f303 	lsl.w	r3, r1, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	401a      	ands	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2103      	movs	r1, #3
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	401a      	ands	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3301      	adds	r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	f47f af2f 	bne.w	8002068 <HAL_GPIO_DeInit+0x10>
  }
}
 800220a:	bf00      	nop
 800220c:	bf00      	nop
 800220e:	371c      	adds	r7, #28
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	40010000 	.word	0x40010000
 800221c:	48000400 	.word	0x48000400
 8002220:	48000800 	.word	0x48000800
 8002224:	48000c00 	.word	0x48000c00
 8002228:	48001000 	.word	0x48001000
 800222c:	48001400 	.word	0x48001400
 8002230:	48001800 	.word	0x48001800
 8002234:	48001c00 	.word	0x48001c00
 8002238:	40010400 	.word	0x40010400

0800223c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
 8002248:	4613      	mov	r3, r2
 800224a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800224c:	787b      	ldrb	r3, [r7, #1]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002258:	e002      	b.n	8002260 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800225a:	887a      	ldrh	r2, [r7, #2]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002270:	4b0d      	ldr	r3, [pc, #52]	@ (80022a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800227c:	d102      	bne.n	8002284 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800227e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002282:	e00b      	b.n	800229c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002284:	4b08      	ldr	r3, [pc, #32]	@ (80022a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800228a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002292:	d102      	bne.n	800229a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002294:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002298:	e000      	b.n	800229c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800229a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40007000 	.word	0x40007000

080022ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d141      	bne.n	800233e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ba:	4b4b      	ldr	r3, [pc, #300]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022c6:	d131      	bne.n	800232c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022c8:	4b47      	ldr	r3, [pc, #284]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022ce:	4a46      	ldr	r2, [pc, #280]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022d8:	4b43      	ldr	r3, [pc, #268]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022e0:	4a41      	ldr	r2, [pc, #260]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80022e8:	4b40      	ldr	r3, [pc, #256]	@ (80023ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2232      	movs	r2, #50	@ 0x32
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	4a3f      	ldr	r2, [pc, #252]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022f4:	fba2 2303 	umull	r2, r3, r2, r3
 80022f8:	0c9b      	lsrs	r3, r3, #18
 80022fa:	3301      	adds	r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022fe:	e002      	b.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	3b01      	subs	r3, #1
 8002304:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002306:	4b38      	ldr	r3, [pc, #224]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800230e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002312:	d102      	bne.n	800231a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f2      	bne.n	8002300 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800231a:	4b33      	ldr	r3, [pc, #204]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002326:	d158      	bne.n	80023da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e057      	b.n	80023dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800232c:	4b2e      	ldr	r3, [pc, #184]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002332:	4a2d      	ldr	r2, [pc, #180]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002338:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800233c:	e04d      	b.n	80023da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002344:	d141      	bne.n	80023ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002346:	4b28      	ldr	r3, [pc, #160]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800234e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002352:	d131      	bne.n	80023b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002354:	4b24      	ldr	r3, [pc, #144]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800235a:	4a23      	ldr	r2, [pc, #140]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002360:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002364:	4b20      	ldr	r3, [pc, #128]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800236c:	4a1e      	ldr	r2, [pc, #120]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002372:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002374:	4b1d      	ldr	r3, [pc, #116]	@ (80023ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2232      	movs	r2, #50	@ 0x32
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	4a1c      	ldr	r2, [pc, #112]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002380:	fba2 2303 	umull	r2, r3, r2, r3
 8002384:	0c9b      	lsrs	r3, r3, #18
 8002386:	3301      	adds	r3, #1
 8002388:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800238a:	e002      	b.n	8002392 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3b01      	subs	r3, #1
 8002390:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002392:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800239e:	d102      	bne.n	80023a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f2      	bne.n	800238c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023a6:	4b10      	ldr	r3, [pc, #64]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023b2:	d112      	bne.n	80023da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e011      	b.n	80023dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023b8:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023be:	4a0a      	ldr	r2, [pc, #40]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80023c8:	e007      	b.n	80023da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023ca:	4b07      	ldr	r3, [pc, #28]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023d2:	4a05      	ldr	r2, [pc, #20]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023d8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40007000 	.word	0x40007000
 80023ec:	20000010 	.word	0x20000010
 80023f0:	431bde83 	.word	0x431bde83

080023f4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <HAL_PWREx_EnableVddIO2+0x1c>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4a04      	ldr	r2, [pc, #16]	@ (8002410 <HAL_PWREx_EnableVddIO2+0x1c>)
 80023fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002402:	6053      	str	r3, [r2, #4]
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40007000 	.word	0x40007000

08002414 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d102      	bne.n	8002428 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	f000 bc08 	b.w	8002c38 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002428:	4b96      	ldr	r3, [pc, #600]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002432:	4b94      	ldr	r3, [pc, #592]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80e4 	beq.w	8002612 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <HAL_RCC_OscConfig+0x4c>
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b0c      	cmp	r3, #12
 8002454:	f040 808b 	bne.w	800256e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2b01      	cmp	r3, #1
 800245c:	f040 8087 	bne.w	800256e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002460:	4b88      	ldr	r3, [pc, #544]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_OscConfig+0x64>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e3df      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1a      	ldr	r2, [r3, #32]
 800247c:	4b81      	ldr	r3, [pc, #516]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d004      	beq.n	8002492 <HAL_RCC_OscConfig+0x7e>
 8002488:	4b7e      	ldr	r3, [pc, #504]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002490:	e005      	b.n	800249e <HAL_RCC_OscConfig+0x8a>
 8002492:	4b7c      	ldr	r3, [pc, #496]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002494:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800249e:	4293      	cmp	r3, r2
 80024a0:	d223      	bcs.n	80024ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fdcc 	bl	8003044 <RCC_SetFlashLatencyFromMSIRange>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e3c0      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024b6:	4b73      	ldr	r3, [pc, #460]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a72      	ldr	r2, [pc, #456]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80024bc:	f043 0308 	orr.w	r3, r3, #8
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	4b70      	ldr	r3, [pc, #448]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	496d      	ldr	r1, [pc, #436]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024d4:	4b6b      	ldr	r3, [pc, #428]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	4968      	ldr	r1, [pc, #416]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
 80024e8:	e025      	b.n	8002536 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ea:	4b66      	ldr	r3, [pc, #408]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a65      	ldr	r2, [pc, #404]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80024f0:	f043 0308 	orr.w	r3, r3, #8
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b63      	ldr	r3, [pc, #396]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4960      	ldr	r1, [pc, #384]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002508:	4b5e      	ldr	r3, [pc, #376]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	495b      	ldr	r1, [pc, #364]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fd8c 	bl	8003044 <RCC_SetFlashLatencyFromMSIRange>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e380      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002536:	f000 fcc1 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 800253a:	4602      	mov	r2, r0
 800253c:	4b51      	ldr	r3, [pc, #324]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	4950      	ldr	r1, [pc, #320]	@ (8002688 <HAL_RCC_OscConfig+0x274>)
 8002548:	5ccb      	ldrb	r3, [r1, r3]
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	fa22 f303 	lsr.w	r3, r2, r3
 8002552:	4a4e      	ldr	r2, [pc, #312]	@ (800268c <HAL_RCC_OscConfig+0x278>)
 8002554:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002556:	4b4e      	ldr	r3, [pc, #312]	@ (8002690 <HAL_RCC_OscConfig+0x27c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff f96c 	bl	8001838 <HAL_InitTick>
 8002560:	4603      	mov	r3, r0
 8002562:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d052      	beq.n	8002610 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	e364      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d032      	beq.n	80025dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002576:	4b43      	ldr	r3, [pc, #268]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a42      	ldr	r2, [pc, #264]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002582:	f7ff f9a9 	bl	80018d8 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800258a:	f7ff f9a5 	bl	80018d8 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e34d      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800259c:	4b39      	ldr	r3, [pc, #228]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025a8:	4b36      	ldr	r3, [pc, #216]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a35      	ldr	r2, [pc, #212]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80025ae:	f043 0308 	orr.w	r3, r3, #8
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b33      	ldr	r3, [pc, #204]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4930      	ldr	r1, [pc, #192]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	492b      	ldr	r1, [pc, #172]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]
 80025da:	e01a      	b.n	8002612 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025dc:	4b29      	ldr	r3, [pc, #164]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a28      	ldr	r2, [pc, #160]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80025e2:	f023 0301 	bic.w	r3, r3, #1
 80025e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025e8:	f7ff f976 	bl	80018d8 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025f0:	f7ff f972 	bl	80018d8 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e31a      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002602:	4b20      	ldr	r3, [pc, #128]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x1dc>
 800260e:	e000      	b.n	8002612 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002610:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d073      	beq.n	8002706 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b08      	cmp	r3, #8
 8002622:	d005      	beq.n	8002630 <HAL_RCC_OscConfig+0x21c>
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b0c      	cmp	r3, #12
 8002628:	d10e      	bne.n	8002648 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d10b      	bne.n	8002648 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d063      	beq.n	8002704 <HAL_RCC_OscConfig+0x2f0>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d15f      	bne.n	8002704 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e2f7      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002650:	d106      	bne.n	8002660 <HAL_RCC_OscConfig+0x24c>
 8002652:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a0b      	ldr	r2, [pc, #44]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e025      	b.n	80026ac <HAL_RCC_OscConfig+0x298>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002668:	d114      	bne.n	8002694 <HAL_RCC_OscConfig+0x280>
 800266a:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a05      	ldr	r2, [pc, #20]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b03      	ldr	r3, [pc, #12]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a02      	ldr	r2, [pc, #8]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e013      	b.n	80026ac <HAL_RCC_OscConfig+0x298>
 8002684:	40021000 	.word	0x40021000
 8002688:	080090b8 	.word	0x080090b8
 800268c:	20000010 	.word	0x20000010
 8002690:	20000014 	.word	0x20000014
 8002694:	4ba0      	ldr	r3, [pc, #640]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a9f      	ldr	r2, [pc, #636]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800269a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b9d      	ldr	r3, [pc, #628]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a9c      	ldr	r2, [pc, #624]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80026a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d013      	beq.n	80026dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7ff f910 	bl	80018d8 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026bc:	f7ff f90c 	bl	80018d8 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	@ 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e2b4      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ce:	4b92      	ldr	r3, [pc, #584]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x2a8>
 80026da:	e014      	b.n	8002706 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7ff f8fc 	bl	80018d8 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e4:	f7ff f8f8 	bl	80018d8 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	@ 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e2a0      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026f6:	4b88      	ldr	r3, [pc, #544]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x2d0>
 8002702:	e000      	b.n	8002706 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d060      	beq.n	80027d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d005      	beq.n	8002724 <HAL_RCC_OscConfig+0x310>
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b0c      	cmp	r3, #12
 800271c:	d119      	bne.n	8002752 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d116      	bne.n	8002752 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002724:	4b7c      	ldr	r3, [pc, #496]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_OscConfig+0x328>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e27d      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273c:	4b76      	ldr	r3, [pc, #472]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	061b      	lsls	r3, r3, #24
 800274a:	4973      	ldr	r1, [pc, #460]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002750:	e040      	b.n	80027d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d023      	beq.n	80027a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800275a:	4b6f      	ldr	r3, [pc, #444]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a6e      	ldr	r2, [pc, #440]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7ff f8b7 	bl	80018d8 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276e:	f7ff f8b3 	bl	80018d8 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e25b      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002780:	4b65      	ldr	r3, [pc, #404]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278c:	4b62      	ldr	r3, [pc, #392]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	061b      	lsls	r3, r3, #24
 800279a:	495f      	ldr	r1, [pc, #380]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
 80027a0:	e018      	b.n	80027d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80027a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ae:	f7ff f893 	bl	80018d8 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b6:	f7ff f88f 	bl	80018d8 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e237      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c8:	4b53      	ldr	r3, [pc, #332]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d03c      	beq.n	800285a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d01c      	beq.n	8002822 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80027ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7ff f86e 	bl	80018d8 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002800:	f7ff f86a 	bl	80018d8 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e212      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002812:	4b41      	ldr	r3, [pc, #260]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 8002814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ef      	beq.n	8002800 <HAL_RCC_OscConfig+0x3ec>
 8002820:	e01b      	b.n	800285a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002822:	4b3d      	ldr	r3, [pc, #244]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 8002824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002828:	4a3b      	ldr	r2, [pc, #236]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7ff f851 	bl	80018d8 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283a:	f7ff f84d 	bl	80018d8 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e1f5      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800284c:	4b32      	ldr	r3, [pc, #200]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800284e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1ef      	bne.n	800283a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80a6 	beq.w	80029b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002868:	2300      	movs	r3, #0
 800286a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800286c:	4b2a      	ldr	r3, [pc, #168]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800286e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10d      	bne.n	8002894 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002878:	4b27      	ldr	r3, [pc, #156]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800287a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287c:	4a26      	ldr	r2, [pc, #152]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800287e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002882:	6593      	str	r3, [r2, #88]	@ 0x58
 8002884:	4b24      	ldr	r3, [pc, #144]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 8002886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002890:	2301      	movs	r3, #1
 8002892:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002894:	4b21      	ldr	r3, [pc, #132]	@ (800291c <HAL_RCC_OscConfig+0x508>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d118      	bne.n	80028d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028a0:	4b1e      	ldr	r3, [pc, #120]	@ (800291c <HAL_RCC_OscConfig+0x508>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1d      	ldr	r2, [pc, #116]	@ (800291c <HAL_RCC_OscConfig+0x508>)
 80028a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ac:	f7ff f814 	bl	80018d8 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b4:	f7ff f810 	bl	80018d8 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e1b8      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <HAL_RCC_OscConfig+0x508>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d108      	bne.n	80028ec <HAL_RCC_OscConfig+0x4d8>
 80028da:	4b0f      	ldr	r3, [pc, #60]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028ea:	e029      	b.n	8002940 <HAL_RCC_OscConfig+0x52c>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d115      	bne.n	8002920 <HAL_RCC_OscConfig+0x50c>
 80028f4:	4b08      	ldr	r3, [pc, #32]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80028f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028fa:	4a07      	ldr	r2, [pc, #28]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002904:	4b04      	ldr	r3, [pc, #16]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290a:	4a03      	ldr	r2, [pc, #12]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002914:	e014      	b.n	8002940 <HAL_RCC_OscConfig+0x52c>
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000
 800291c:	40007000 	.word	0x40007000
 8002920:	4b9d      	ldr	r3, [pc, #628]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002926:	4a9c      	ldr	r2, [pc, #624]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002930:	4b99      	ldr	r3, [pc, #612]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002936:	4a98      	ldr	r2, [pc, #608]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002938:	f023 0304 	bic.w	r3, r3, #4
 800293c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d016      	beq.n	8002976 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7fe ffc6 	bl	80018d8 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294e:	e00a      	b.n	8002966 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7fe ffc2 	bl	80018d8 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e168      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002966:	4b8c      	ldr	r3, [pc, #560]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ed      	beq.n	8002950 <HAL_RCC_OscConfig+0x53c>
 8002974:	e015      	b.n	80029a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002976:	f7fe ffaf 	bl	80018d8 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800297c:	e00a      	b.n	8002994 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297e:	f7fe ffab 	bl	80018d8 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298c:	4293      	cmp	r3, r2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e151      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002994:	4b80      	ldr	r3, [pc, #512]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1ed      	bne.n	800297e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029a2:	7ffb      	ldrb	r3, [r7, #31]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d105      	bne.n	80029b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 80029aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ac:	4a7a      	ldr	r2, [pc, #488]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 80029ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d03c      	beq.n	8002a3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01c      	beq.n	8002a02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029c8:	4b73      	ldr	r3, [pc, #460]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 80029ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029ce:	4a72      	ldr	r2, [pc, #456]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d8:	f7fe ff7e 	bl	80018d8 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029e0:	f7fe ff7a 	bl	80018d8 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e122      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029f2:	4b69      	ldr	r3, [pc, #420]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 80029f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0ef      	beq.n	80029e0 <HAL_RCC_OscConfig+0x5cc>
 8002a00:	e01b      	b.n	8002a3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a02:	4b65      	ldr	r3, [pc, #404]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002a04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a08:	4a63      	ldr	r2, [pc, #396]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002a0a:	f023 0301 	bic.w	r3, r3, #1
 8002a0e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a12:	f7fe ff61 	bl	80018d8 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a1a:	f7fe ff5d 	bl	80018d8 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e105      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002a2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1ef      	bne.n	8002a1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80f9 	beq.w	8002c36 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	f040 80cf 	bne.w	8002bec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a4e:	4b52      	ldr	r3, [pc, #328]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f003 0203 	and.w	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d12c      	bne.n	8002abc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d123      	bne.n	8002abc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d11b      	bne.n	8002abc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d113      	bne.n	8002abc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d109      	bne.n	8002abc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	085b      	lsrs	r3, r3, #1
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d071      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d068      	beq.n	8002b94 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ac2:	4b35      	ldr	r3, [pc, #212]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d105      	bne.n	8002ada <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ace:	4b32      	ldr	r3, [pc, #200]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e0ac      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ade:	4b2e      	ldr	r3, [pc, #184]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a2d      	ldr	r2, [pc, #180]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002ae4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ae8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aea:	f7fe fef5 	bl	80018d8 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af2:	f7fe fef1 	bl	80018d8 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e099      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b04:	4b24      	ldr	r3, [pc, #144]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f0      	bne.n	8002af2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b10:	4b21      	ldr	r3, [pc, #132]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	4b21      	ldr	r3, [pc, #132]	@ (8002b9c <HAL_RCC_OscConfig+0x788>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b20:	3a01      	subs	r2, #1
 8002b22:	0112      	lsls	r2, r2, #4
 8002b24:	4311      	orrs	r1, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b2a:	0212      	lsls	r2, r2, #8
 8002b2c:	4311      	orrs	r1, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b32:	0852      	lsrs	r2, r2, #1
 8002b34:	3a01      	subs	r2, #1
 8002b36:	0552      	lsls	r2, r2, #21
 8002b38:	4311      	orrs	r1, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b3e:	0852      	lsrs	r2, r2, #1
 8002b40:	3a01      	subs	r2, #1
 8002b42:	0652      	lsls	r2, r2, #25
 8002b44:	4311      	orrs	r1, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b4a:	06d2      	lsls	r2, r2, #27
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	4912      	ldr	r1, [pc, #72]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b54:	4b10      	ldr	r3, [pc, #64]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0f      	ldr	r2, [pc, #60]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002b5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b60:	4b0d      	ldr	r3, [pc, #52]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4a0c      	ldr	r2, [pc, #48]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002b66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b6c:	f7fe feb4 	bl	80018d8 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b74:	f7fe feb0 	bl	80018d8 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e058      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b86:	4b04      	ldr	r3, [pc, #16]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b92:	e050      	b.n	8002c36 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e04f      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba0:	4b27      	ldr	r3, [pc, #156]	@ (8002c40 <HAL_RCC_OscConfig+0x82c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d144      	bne.n	8002c36 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bac:	4b24      	ldr	r3, [pc, #144]	@ (8002c40 <HAL_RCC_OscConfig+0x82c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a23      	ldr	r2, [pc, #140]	@ (8002c40 <HAL_RCC_OscConfig+0x82c>)
 8002bb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bb8:	4b21      	ldr	r3, [pc, #132]	@ (8002c40 <HAL_RCC_OscConfig+0x82c>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4a20      	ldr	r2, [pc, #128]	@ (8002c40 <HAL_RCC_OscConfig+0x82c>)
 8002bbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bc4:	f7fe fe88 	bl	80018d8 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe fe84 	bl	80018d8 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e02c      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bde:	4b18      	ldr	r3, [pc, #96]	@ (8002c40 <HAL_RCC_OscConfig+0x82c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x7b8>
 8002bea:	e024      	b.n	8002c36 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b0c      	cmp	r3, #12
 8002bf0:	d01f      	beq.n	8002c32 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	4b13      	ldr	r3, [pc, #76]	@ (8002c40 <HAL_RCC_OscConfig+0x82c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a12      	ldr	r2, [pc, #72]	@ (8002c40 <HAL_RCC_OscConfig+0x82c>)
 8002bf8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfe:	f7fe fe6b 	bl	80018d8 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c06:	f7fe fe67 	bl	80018d8 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e00f      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c18:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <HAL_RCC_OscConfig+0x82c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1f0      	bne.n	8002c06 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c24:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <HAL_RCC_OscConfig+0x82c>)
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	4905      	ldr	r1, [pc, #20]	@ (8002c40 <HAL_RCC_OscConfig+0x82c>)
 8002c2a:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <HAL_RCC_OscConfig+0x830>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60cb      	str	r3, [r1, #12]
 8002c30:	e001      	b.n	8002c36 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	feeefffc 	.word	0xfeeefffc

08002c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e11d      	b.n	8002e9c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c60:	4b90      	ldr	r3, [pc, #576]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d910      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 020f 	bic.w	r2, r3, #15
 8002c76:	498b      	ldr	r1, [pc, #556]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b89      	ldr	r3, [pc, #548]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e105      	b.n	8002e9c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d010      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	4b81      	ldr	r3, [pc, #516]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d908      	bls.n	8002cbe <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cac:	4b7e      	ldr	r3, [pc, #504]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	497b      	ldr	r1, [pc, #492]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d079      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d11e      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd2:	4b75      	ldr	r3, [pc, #468]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e0dc      	b.n	8002e9c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002ce2:	f000 fa09 	bl	80030f8 <RCC_GetSysClockFreqFromPLLSource>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4a70      	ldr	r2, [pc, #448]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d946      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002cee:	4b6e      	ldr	r3, [pc, #440]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d140      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cfa:	4b6b      	ldr	r3, [pc, #428]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d02:	4a69      	ldr	r2, [pc, #420]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d0a:	2380      	movs	r3, #128	@ 0x80
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	e035      	b.n	8002d7c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d107      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d18:	4b63      	ldr	r3, [pc, #396]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d115      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0b9      	b.n	8002e9c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d30:	4b5d      	ldr	r3, [pc, #372]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0ad      	b.n	8002e9c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d40:	4b59      	ldr	r3, [pc, #356]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0a5      	b.n	8002e9c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002d50:	f000 f8b4 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4a55      	ldr	r2, [pc, #340]	@ (8002eac <HAL_RCC_ClockConfig+0x264>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d90f      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d5c:	4b52      	ldr	r3, [pc, #328]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d68:	4b4f      	ldr	r3, [pc, #316]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d70:	4a4d      	ldr	r2, [pc, #308]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d76:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d78:	2380      	movs	r3, #128	@ 0x80
 8002d7a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d7c:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f023 0203 	bic.w	r2, r3, #3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4947      	ldr	r1, [pc, #284]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d8e:	f7fe fda3 	bl	80018d8 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d94:	e00a      	b.n	8002dac <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d96:	f7fe fd9f 	bl	80018d8 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e077      	b.n	8002e9c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dac:	4b3e      	ldr	r3, [pc, #248]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 020c 	and.w	r2, r3, #12
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d1eb      	bne.n	8002d96 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2b80      	cmp	r3, #128	@ 0x80
 8002dc2:	d105      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002dc4:	4b38      	ldr	r3, [pc, #224]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4a37      	ldr	r2, [pc, #220]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002dca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dce:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d010      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	4b31      	ldr	r3, [pc, #196]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d208      	bcs.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dec:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	492b      	ldr	r1, [pc, #172]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfe:	4b29      	ldr	r3, [pc, #164]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d210      	bcs.n	8002e2e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0c:	4b25      	ldr	r3, [pc, #148]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 020f 	bic.w	r2, r3, #15
 8002e14:	4923      	ldr	r1, [pc, #140]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ea4 <HAL_RCC_ClockConfig+0x25c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d001      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e036      	b.n	8002e9c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	4918      	ldr	r1, [pc, #96]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d009      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e58:	4b13      	ldr	r3, [pc, #76]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4910      	ldr	r1, [pc, #64]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e6c:	f000 f826 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea8 <HAL_RCC_ClockConfig+0x260>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	490c      	ldr	r1, [pc, #48]	@ (8002eb0 <HAL_RCC_ClockConfig+0x268>)
 8002e7e:	5ccb      	ldrb	r3, [r1, r3]
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	fa22 f303 	lsr.w	r3, r2, r3
 8002e88:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb4 <HAL_RCC_ClockConfig+0x26c>)
 8002e8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <HAL_RCC_ClockConfig+0x270>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fe fcd1 	bl	8001838 <HAL_InitTick>
 8002e96:	4603      	mov	r3, r0
 8002e98:	73fb      	strb	r3, [r7, #15]

  return status;
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40022000 	.word	0x40022000
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	04c4b400 	.word	0x04c4b400
 8002eb0:	080090b8 	.word	0x080090b8
 8002eb4:	20000010 	.word	0x20000010
 8002eb8:	20000014 	.word	0x20000014

08002ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b089      	sub	sp, #36	@ 0x24
 8002ec0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eca:	4b3e      	ldr	r3, [pc, #248]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	2b0c      	cmp	r3, #12
 8002ee8:	d121      	bne.n	8002f2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d11e      	bne.n	8002f2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ef0:	4b34      	ldr	r3, [pc, #208]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d107      	bne.n	8002f0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002efc:	4b31      	ldr	r3, [pc, #196]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	e005      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f18:	4a2b      	ldr	r2, [pc, #172]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10d      	bne.n	8002f44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d102      	bne.n	8002f3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f34:	4b25      	ldr	r3, [pc, #148]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	e004      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f40:	4b23      	ldr	r3, [pc, #140]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	2b0c      	cmp	r3, #12
 8002f48:	d134      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d003      	beq.n	8002f62 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d003      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0xac>
 8002f60:	e005      	b.n	8002f6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f62:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f64:	617b      	str	r3, [r7, #20]
      break;
 8002f66:	e005      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f68:	4b19      	ldr	r3, [pc, #100]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f6a:	617b      	str	r3, [r7, #20]
      break;
 8002f6c:	e002      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	617b      	str	r3, [r7, #20]
      break;
 8002f72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f74:	4b13      	ldr	r3, [pc, #76]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	3301      	adds	r3, #1
 8002f80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f82:	4b10      	ldr	r3, [pc, #64]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	fb03 f202 	mul.w	r2, r3, r2
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	0e5b      	lsrs	r3, r3, #25
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fb4:	69bb      	ldr	r3, [r7, #24]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3724      	adds	r7, #36	@ 0x24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	080090d0 	.word	0x080090d0
 8002fcc:	00f42400 	.word	0x00f42400
 8002fd0:	007a1200 	.word	0x007a1200

08002fd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	@ (8002fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000010 	.word	0x20000010

08002fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ff0:	f7ff fff0 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	4904      	ldr	r1, [pc, #16]	@ (8003014 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003002:	5ccb      	ldrb	r3, [r1, r3]
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000
 8003014:	080090c8 	.word	0x080090c8

08003018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800301c:	f7ff ffda 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b06      	ldr	r3, [pc, #24]	@ (800303c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	0adb      	lsrs	r3, r3, #11
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4904      	ldr	r1, [pc, #16]	@ (8003040 <HAL_RCC_GetPCLK2Freq+0x28>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003038:	4618      	mov	r0, r3
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	080090c8 	.word	0x080090c8

08003044 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003050:	4b27      	ldr	r3, [pc, #156]	@ (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800305c:	f7ff f906 	bl	800226c <HAL_PWREx_GetVoltageRange>
 8003060:	6178      	str	r0, [r7, #20]
 8003062:	e014      	b.n	800308e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003064:	4b22      	ldr	r3, [pc, #136]	@ (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003068:	4a21      	ldr	r2, [pc, #132]	@ (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800306a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800306e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003070:	4b1f      	ldr	r3, [pc, #124]	@ (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800307c:	f7ff f8f6 	bl	800226c <HAL_PWREx_GetVoltageRange>
 8003080:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003082:	4b1b      	ldr	r3, [pc, #108]	@ (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003086:	4a1a      	ldr	r2, [pc, #104]	@ (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800308c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003094:	d10b      	bne.n	80030ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b80      	cmp	r3, #128	@ 0x80
 800309a:	d913      	bls.n	80030c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2ba0      	cmp	r3, #160	@ 0xa0
 80030a0:	d902      	bls.n	80030a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030a2:	2302      	movs	r3, #2
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	e00d      	b.n	80030c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030a8:	2301      	movs	r3, #1
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	e00a      	b.n	80030c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80030b2:	d902      	bls.n	80030ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80030b4:	2302      	movs	r3, #2
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	e004      	b.n	80030c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b70      	cmp	r3, #112	@ 0x70
 80030be:	d101      	bne.n	80030c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030c0:	2301      	movs	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030c4:	4b0b      	ldr	r3, [pc, #44]	@ (80030f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f023 020f 	bic.w	r2, r3, #15
 80030cc:	4909      	ldr	r1, [pc, #36]	@ (80030f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030d4:	4b07      	ldr	r3, [pc, #28]	@ (80030f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d001      	beq.n	80030e6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40022000 	.word	0x40022000

080030f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030fe:	4b2d      	ldr	r3, [pc, #180]	@ (80031b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b03      	cmp	r3, #3
 800310c:	d00b      	beq.n	8003126 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2b03      	cmp	r3, #3
 8003112:	d825      	bhi.n	8003160 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d008      	beq.n	800312c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d11f      	bne.n	8003160 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003120:	4b25      	ldr	r3, [pc, #148]	@ (80031b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003122:	613b      	str	r3, [r7, #16]
    break;
 8003124:	e01f      	b.n	8003166 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003126:	4b25      	ldr	r3, [pc, #148]	@ (80031bc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003128:	613b      	str	r3, [r7, #16]
    break;
 800312a:	e01c      	b.n	8003166 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800312c:	4b21      	ldr	r3, [pc, #132]	@ (80031b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d107      	bne.n	8003148 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003138:	4b1e      	ldr	r3, [pc, #120]	@ (80031b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800313a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	e005      	b.n	8003154 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003148:	4b1a      	ldr	r3, [pc, #104]	@ (80031b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003154:	4a1a      	ldr	r2, [pc, #104]	@ (80031c0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315c:	613b      	str	r3, [r7, #16]
    break;
 800315e:	e002      	b.n	8003166 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]
    break;
 8003164:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003166:	4b13      	ldr	r3, [pc, #76]	@ (80031b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	091b      	lsrs	r3, r3, #4
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	3301      	adds	r3, #1
 8003172:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003174:	4b0f      	ldr	r3, [pc, #60]	@ (80031b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	0a1b      	lsrs	r3, r3, #8
 800317a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	fb03 f202 	mul.w	r2, r3, r2
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	fbb2 f3f3 	udiv	r3, r2, r3
 800318a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800318c:	4b09      	ldr	r3, [pc, #36]	@ (80031b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	0e5b      	lsrs	r3, r3, #25
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	3301      	adds	r3, #1
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80031a6:	683b      	ldr	r3, [r7, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	40021000 	.word	0x40021000
 80031b8:	00f42400 	.word	0x00f42400
 80031bc:	007a1200 	.word	0x007a1200
 80031c0:	080090d0 	.word	0x080090d0

080031c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031cc:	2300      	movs	r3, #0
 80031ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031d0:	2300      	movs	r3, #0
 80031d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d040      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031e4:	2b80      	cmp	r3, #128	@ 0x80
 80031e6:	d02a      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031e8:	2b80      	cmp	r3, #128	@ 0x80
 80031ea:	d825      	bhi.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031ec:	2b60      	cmp	r3, #96	@ 0x60
 80031ee:	d026      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031f0:	2b60      	cmp	r3, #96	@ 0x60
 80031f2:	d821      	bhi.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031f4:	2b40      	cmp	r3, #64	@ 0x40
 80031f6:	d006      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80031f8:	2b40      	cmp	r3, #64	@ 0x40
 80031fa:	d81d      	bhi.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d009      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003200:	2b20      	cmp	r3, #32
 8003202:	d010      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003204:	e018      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003206:	4b89      	ldr	r3, [pc, #548]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	4a88      	ldr	r2, [pc, #544]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800320c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003210:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003212:	e015      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	2100      	movs	r1, #0
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fb02 	bl	8003824 <RCCEx_PLLSAI1_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003224:	e00c      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3320      	adds	r3, #32
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fbed 	bl	8003a0c <RCCEx_PLLSAI2_Config>
 8003232:	4603      	mov	r3, r0
 8003234:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003236:	e003      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	74fb      	strb	r3, [r7, #19]
      break;
 800323c:	e000      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800323e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10b      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003246:	4b79      	ldr	r3, [pc, #484]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003248:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800324c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003254:	4975      	ldr	r1, [pc, #468]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800325c:	e001      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325e:	7cfb      	ldrb	r3, [r7, #19]
 8003260:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d047      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003276:	d030      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800327c:	d82a      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800327e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003282:	d02a      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003284:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003288:	d824      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800328a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800328e:	d008      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003294:	d81e      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800329a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800329e:	d010      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80032a0:	e018      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032a2:	4b62      	ldr	r3, [pc, #392]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	4a61      	ldr	r2, [pc, #388]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ac:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ae:	e015      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3304      	adds	r3, #4
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fab4 	bl	8003824 <RCCEx_PLLSAI1_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032c0:	e00c      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3320      	adds	r3, #32
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fb9f 	bl	8003a0c <RCCEx_PLLSAI2_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032d2:	e003      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	74fb      	strb	r3, [r7, #19]
      break;
 80032d8:	e000      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80032da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032dc:	7cfb      	ldrb	r3, [r7, #19]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032e2:	4b52      	ldr	r3, [pc, #328]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f0:	494e      	ldr	r1, [pc, #312]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80032f8:	e001      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 809f 	beq.w	800344a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330c:	2300      	movs	r3, #0
 800330e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003310:	4b46      	ldr	r3, [pc, #280]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003320:	2300      	movs	r3, #0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00d      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	4b41      	ldr	r3, [pc, #260]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332a:	4a40      	ldr	r2, [pc, #256]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003330:	6593      	str	r3, [r2, #88]	@ 0x58
 8003332:	4b3e      	ldr	r3, [pc, #248]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333e:	2301      	movs	r3, #1
 8003340:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003342:	4b3b      	ldr	r3, [pc, #236]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a3a      	ldr	r2, [pc, #232]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800334c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800334e:	f7fe fac3 	bl	80018d8 <HAL_GetTick>
 8003352:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003354:	e009      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003356:	f7fe fabf 	bl	80018d8 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d902      	bls.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	74fb      	strb	r3, [r7, #19]
        break;
 8003368:	e005      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800336a:	4b31      	ldr	r3, [pc, #196]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0ef      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003376:	7cfb      	ldrb	r3, [r7, #19]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d15b      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800337c:	4b2b      	ldr	r3, [pc, #172]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003386:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01f      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	429a      	cmp	r2, r3
 8003398:	d019      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800339a:	4b24      	ldr	r3, [pc, #144]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033a6:	4b21      	ldr	r3, [pc, #132]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ac:	4a1f      	ldr	r2, [pc, #124]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033b6:	4b1d      	ldr	r3, [pc, #116]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033bc:	4a1b      	ldr	r2, [pc, #108]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033c6:	4a19      	ldr	r2, [pc, #100]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d016      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fe fa7e 	bl	80018d8 <HAL_GetTick>
 80033dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033de:	e00b      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e0:	f7fe fa7a 	bl	80018d8 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d902      	bls.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	74fb      	strb	r3, [r7, #19]
            break;
 80033f6:	e006      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f8:	4b0c      	ldr	r3, [pc, #48]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0ec      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003406:	7cfb      	ldrb	r3, [r7, #19]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10c      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800340c:	4b07      	ldr	r3, [pc, #28]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003412:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341c:	4903      	ldr	r1, [pc, #12]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003424:	e008      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003426:	7cfb      	ldrb	r3, [r7, #19]
 8003428:	74bb      	strb	r3, [r7, #18]
 800342a:	e005      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800342c:	40021000 	.word	0x40021000
 8003430:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003438:	7c7b      	ldrb	r3, [r7, #17]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d105      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343e:	4ba0      	ldr	r3, [pc, #640]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003442:	4a9f      	ldr	r2, [pc, #636]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003444:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003448:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003456:	4b9a      	ldr	r3, [pc, #616]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345c:	f023 0203 	bic.w	r2, r3, #3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003464:	4996      	ldr	r1, [pc, #600]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003478:	4b91      	ldr	r3, [pc, #580]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347e:	f023 020c 	bic.w	r2, r3, #12
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	498e      	ldr	r1, [pc, #568]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800349a:	4b89      	ldr	r3, [pc, #548]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a8:	4985      	ldr	r1, [pc, #532]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034bc:	4b80      	ldr	r3, [pc, #512]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ca:	497d      	ldr	r1, [pc, #500]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034de:	4b78      	ldr	r3, [pc, #480]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ec:	4974      	ldr	r1, [pc, #464]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003500:	4b6f      	ldr	r3, [pc, #444]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003506:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350e:	496c      	ldr	r1, [pc, #432]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003522:	4b67      	ldr	r3, [pc, #412]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003528:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003530:	4963      	ldr	r1, [pc, #396]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003544:	4b5e      	ldr	r3, [pc, #376]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003552:	495b      	ldr	r1, [pc, #364]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003566:	4b56      	ldr	r3, [pc, #344]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003574:	4952      	ldr	r1, [pc, #328]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003588:	4b4d      	ldr	r3, [pc, #308]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003596:	494a      	ldr	r1, [pc, #296]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035aa:	4b45      	ldr	r3, [pc, #276]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b8:	4941      	ldr	r1, [pc, #260]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035cc:	4b3c      	ldr	r3, [pc, #240]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035d2:	f023 0203 	bic.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035da:	4939      	ldr	r1, [pc, #228]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d028      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ee:	4b34      	ldr	r3, [pc, #208]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035fc:	4930      	ldr	r1, [pc, #192]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003608:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800360c:	d106      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800360e:	4b2c      	ldr	r3, [pc, #176]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	4a2b      	ldr	r2, [pc, #172]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003614:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003618:	60d3      	str	r3, [r2, #12]
 800361a:	e011      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003620:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003624:	d10c      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3304      	adds	r3, #4
 800362a:	2101      	movs	r1, #1
 800362c:	4618      	mov	r0, r3
 800362e:	f000 f8f9 	bl	8003824 <RCCEx_PLLSAI1_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800363c:	7cfb      	ldrb	r3, [r7, #19]
 800363e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d04d      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003650:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003654:	d108      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003656:	4b1a      	ldr	r3, [pc, #104]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003658:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800365c:	4a18      	ldr	r2, [pc, #96]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800365e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003662:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003666:	e012      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003668:	4b15      	ldr	r3, [pc, #84]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800366a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800366e:	4a14      	ldr	r2, [pc, #80]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003670:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003674:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003678:	4b11      	ldr	r3, [pc, #68]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003686:	490e      	ldr	r1, [pc, #56]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003692:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003696:	d106      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003698:	4b09      	ldr	r3, [pc, #36]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4a08      	ldr	r2, [pc, #32]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036a2:	60d3      	str	r3, [r2, #12]
 80036a4:	e020      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036ae:	d109      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036b0:	4b03      	ldr	r3, [pc, #12]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4a02      	ldr	r2, [pc, #8]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ba:	60d3      	str	r3, [r2, #12]
 80036bc:	e014      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80036be:	bf00      	nop
 80036c0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3304      	adds	r3, #4
 80036d2:	2101      	movs	r1, #1
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f8a5 	bl	8003824 <RCCEx_PLLSAI1_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036de:	7cfb      	ldrb	r3, [r7, #19]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d028      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003702:	4947      	ldr	r1, [pc, #284]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800370e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003712:	d106      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003714:	4b42      	ldr	r3, [pc, #264]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4a41      	ldr	r2, [pc, #260]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800371a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800371e:	60d3      	str	r3, [r2, #12]
 8003720:	e011      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003726:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800372a:	d10c      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3304      	adds	r3, #4
 8003730:	2101      	movs	r1, #1
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f876 	bl	8003824 <RCCEx_PLLSAI1_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800373c:	7cfb      	ldrb	r3, [r7, #19]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003742:	7cfb      	ldrb	r3, [r7, #19]
 8003744:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d01e      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003752:	4b33      	ldr	r3, [pc, #204]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003758:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003762:	492f      	ldr	r1, [pc, #188]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003770:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003774:	d10c      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3304      	adds	r3, #4
 800377a:	2102      	movs	r1, #2
 800377c:	4618      	mov	r0, r3
 800377e:	f000 f851 	bl	8003824 <RCCEx_PLLSAI1_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003786:	7cfb      	ldrb	r3, [r7, #19]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00b      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800379c:	4b20      	ldr	r3, [pc, #128]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800379e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037a2:	f023 0204 	bic.w	r2, r3, #4
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037ac:	491c      	ldr	r1, [pc, #112]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00b      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037c0:	4b17      	ldr	r3, [pc, #92]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037c6:	f023 0218 	bic.w	r2, r3, #24
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d0:	4913      	ldr	r1, [pc, #76]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d017      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80037e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037f4:	490a      	ldr	r1, [pc, #40]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003802:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003806:	d105      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003808:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4a04      	ldr	r2, [pc, #16]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800380e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003812:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003814:	7cbb      	ldrb	r3, [r7, #18]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000

08003824 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003832:	4b72      	ldr	r3, [pc, #456]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00e      	beq.n	800385c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800383e:	4b6f      	ldr	r3, [pc, #444]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0203 	and.w	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d103      	bne.n	8003856 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
       ||
 8003852:	2b00      	cmp	r3, #0
 8003854:	d142      	bne.n	80038dc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
 800385a:	e03f      	b.n	80038dc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b03      	cmp	r3, #3
 8003862:	d018      	beq.n	8003896 <RCCEx_PLLSAI1_Config+0x72>
 8003864:	2b03      	cmp	r3, #3
 8003866:	d825      	bhi.n	80038b4 <RCCEx_PLLSAI1_Config+0x90>
 8003868:	2b01      	cmp	r3, #1
 800386a:	d002      	beq.n	8003872 <RCCEx_PLLSAI1_Config+0x4e>
 800386c:	2b02      	cmp	r3, #2
 800386e:	d009      	beq.n	8003884 <RCCEx_PLLSAI1_Config+0x60>
 8003870:	e020      	b.n	80038b4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003872:	4b62      	ldr	r3, [pc, #392]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d11d      	bne.n	80038ba <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003882:	e01a      	b.n	80038ba <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003884:	4b5d      	ldr	r3, [pc, #372]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800388c:	2b00      	cmp	r3, #0
 800388e:	d116      	bne.n	80038be <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003894:	e013      	b.n	80038be <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003896:	4b59      	ldr	r3, [pc, #356]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10f      	bne.n	80038c2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038a2:	4b56      	ldr	r3, [pc, #344]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038b2:	e006      	b.n	80038c2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
      break;
 80038b8:	e004      	b.n	80038c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038ba:	bf00      	nop
 80038bc:	e002      	b.n	80038c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038be:	bf00      	nop
 80038c0:	e000      	b.n	80038c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d108      	bne.n	80038dc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80038ca:	4b4c      	ldr	r3, [pc, #304]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f023 0203 	bic.w	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4949      	ldr	r1, [pc, #292]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f040 8086 	bne.w	80039f0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038e4:	4b45      	ldr	r3, [pc, #276]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a44      	ldr	r2, [pc, #272]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80038ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f0:	f7fd fff2 	bl	80018d8 <HAL_GetTick>
 80038f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038f6:	e009      	b.n	800390c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038f8:	f7fd ffee 	bl	80018d8 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d902      	bls.n	800390c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	73fb      	strb	r3, [r7, #15]
        break;
 800390a:	e005      	b.n	8003918 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800390c:	4b3b      	ldr	r3, [pc, #236]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1ef      	bne.n	80038f8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d168      	bne.n	80039f0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d113      	bne.n	800394c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003924:	4b35      	ldr	r3, [pc, #212]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	4b35      	ldr	r3, [pc, #212]	@ (8003a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 800392a:	4013      	ands	r3, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6892      	ldr	r2, [r2, #8]
 8003930:	0211      	lsls	r1, r2, #8
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68d2      	ldr	r2, [r2, #12]
 8003936:	06d2      	lsls	r2, r2, #27
 8003938:	4311      	orrs	r1, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6852      	ldr	r2, [r2, #4]
 800393e:	3a01      	subs	r2, #1
 8003940:	0112      	lsls	r2, r2, #4
 8003942:	430a      	orrs	r2, r1
 8003944:	492d      	ldr	r1, [pc, #180]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003946:	4313      	orrs	r3, r2
 8003948:	610b      	str	r3, [r1, #16]
 800394a:	e02d      	b.n	80039a8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d115      	bne.n	800397e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003952:	4b2a      	ldr	r3, [pc, #168]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	4b2b      	ldr	r3, [pc, #172]	@ (8003a04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003958:	4013      	ands	r3, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6892      	ldr	r2, [r2, #8]
 800395e:	0211      	lsls	r1, r2, #8
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6912      	ldr	r2, [r2, #16]
 8003964:	0852      	lsrs	r2, r2, #1
 8003966:	3a01      	subs	r2, #1
 8003968:	0552      	lsls	r2, r2, #21
 800396a:	4311      	orrs	r1, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6852      	ldr	r2, [r2, #4]
 8003970:	3a01      	subs	r2, #1
 8003972:	0112      	lsls	r2, r2, #4
 8003974:	430a      	orrs	r2, r1
 8003976:	4921      	ldr	r1, [pc, #132]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003978:	4313      	orrs	r3, r2
 800397a:	610b      	str	r3, [r1, #16]
 800397c:	e014      	b.n	80039a8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800397e:	4b1f      	ldr	r3, [pc, #124]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	4b21      	ldr	r3, [pc, #132]	@ (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003984:	4013      	ands	r3, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6892      	ldr	r2, [r2, #8]
 800398a:	0211      	lsls	r1, r2, #8
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6952      	ldr	r2, [r2, #20]
 8003990:	0852      	lsrs	r2, r2, #1
 8003992:	3a01      	subs	r2, #1
 8003994:	0652      	lsls	r2, r2, #25
 8003996:	4311      	orrs	r1, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6852      	ldr	r2, [r2, #4]
 800399c:	3a01      	subs	r2, #1
 800399e:	0112      	lsls	r2, r2, #4
 80039a0:	430a      	orrs	r2, r1
 80039a2:	4916      	ldr	r1, [pc, #88]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039a8:	4b14      	ldr	r3, [pc, #80]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a13      	ldr	r2, [pc, #76]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7fd ff90 	bl	80018d8 <HAL_GetTick>
 80039b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039ba:	e009      	b.n	80039d0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039bc:	f7fd ff8c 	bl	80018d8 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d902      	bls.n	80039d0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	73fb      	strb	r3, [r7, #15]
          break;
 80039ce:	e005      	b.n	80039dc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039d0:	4b0a      	ldr	r3, [pc, #40]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0ef      	beq.n	80039bc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039e2:	4b06      	ldr	r3, [pc, #24]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	4904      	ldr	r1, [pc, #16]	@ (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	07ff800f 	.word	0x07ff800f
 8003a04:	ff9f800f 	.word	0xff9f800f
 8003a08:	f9ff800f 	.word	0xf9ff800f

08003a0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a1a:	4b72      	ldr	r3, [pc, #456]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00e      	beq.n	8003a44 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a26:	4b6f      	ldr	r3, [pc, #444]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0203 	and.w	r2, r3, #3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d103      	bne.n	8003a3e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
       ||
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d142      	bne.n	8003ac4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
 8003a42:	e03f      	b.n	8003ac4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d018      	beq.n	8003a7e <RCCEx_PLLSAI2_Config+0x72>
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d825      	bhi.n	8003a9c <RCCEx_PLLSAI2_Config+0x90>
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d002      	beq.n	8003a5a <RCCEx_PLLSAI2_Config+0x4e>
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d009      	beq.n	8003a6c <RCCEx_PLLSAI2_Config+0x60>
 8003a58:	e020      	b.n	8003a9c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a5a:	4b62      	ldr	r3, [pc, #392]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d11d      	bne.n	8003aa2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a6a:	e01a      	b.n	8003aa2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a6c:	4b5d      	ldr	r3, [pc, #372]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d116      	bne.n	8003aa6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a7c:	e013      	b.n	8003aa6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a7e:	4b59      	ldr	r3, [pc, #356]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10f      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a8a:	4b56      	ldr	r3, [pc, #344]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a9a:	e006      	b.n	8003aaa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa0:	e004      	b.n	8003aac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e002      	b.n	8003aac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e000      	b.n	8003aac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003aaa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d108      	bne.n	8003ac4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003ab2:	4b4c      	ldr	r3, [pc, #304]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f023 0203 	bic.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4949      	ldr	r1, [pc, #292]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 8086 	bne.w	8003bd8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003acc:	4b45      	ldr	r3, [pc, #276]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a44      	ldr	r2, [pc, #272]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ad2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad8:	f7fd fefe 	bl	80018d8 <HAL_GetTick>
 8003adc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ade:	e009      	b.n	8003af4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ae0:	f7fd fefa 	bl	80018d8 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d902      	bls.n	8003af4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	73fb      	strb	r3, [r7, #15]
        break;
 8003af2:	e005      	b.n	8003b00 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003af4:	4b3b      	ldr	r3, [pc, #236]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1ef      	bne.n	8003ae0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d168      	bne.n	8003bd8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d113      	bne.n	8003b34 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b0c:	4b35      	ldr	r3, [pc, #212]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	4b35      	ldr	r3, [pc, #212]	@ (8003be8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6892      	ldr	r2, [r2, #8]
 8003b18:	0211      	lsls	r1, r2, #8
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68d2      	ldr	r2, [r2, #12]
 8003b1e:	06d2      	lsls	r2, r2, #27
 8003b20:	4311      	orrs	r1, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6852      	ldr	r2, [r2, #4]
 8003b26:	3a01      	subs	r2, #1
 8003b28:	0112      	lsls	r2, r2, #4
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	492d      	ldr	r1, [pc, #180]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	614b      	str	r3, [r1, #20]
 8003b32:	e02d      	b.n	8003b90 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d115      	bne.n	8003b66 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8003bec <RCCEx_PLLSAI2_Config+0x1e0>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6892      	ldr	r2, [r2, #8]
 8003b46:	0211      	lsls	r1, r2, #8
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6912      	ldr	r2, [r2, #16]
 8003b4c:	0852      	lsrs	r2, r2, #1
 8003b4e:	3a01      	subs	r2, #1
 8003b50:	0552      	lsls	r2, r2, #21
 8003b52:	4311      	orrs	r1, r2
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6852      	ldr	r2, [r2, #4]
 8003b58:	3a01      	subs	r2, #1
 8003b5a:	0112      	lsls	r2, r2, #4
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	4921      	ldr	r1, [pc, #132]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	614b      	str	r3, [r1, #20]
 8003b64:	e014      	b.n	8003b90 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b66:	4b1f      	ldr	r3, [pc, #124]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	4b21      	ldr	r3, [pc, #132]	@ (8003bf0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6892      	ldr	r2, [r2, #8]
 8003b72:	0211      	lsls	r1, r2, #8
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6952      	ldr	r2, [r2, #20]
 8003b78:	0852      	lsrs	r2, r2, #1
 8003b7a:	3a01      	subs	r2, #1
 8003b7c:	0652      	lsls	r2, r2, #25
 8003b7e:	4311      	orrs	r1, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6852      	ldr	r2, [r2, #4]
 8003b84:	3a01      	subs	r2, #1
 8003b86:	0112      	lsls	r2, r2, #4
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	4916      	ldr	r1, [pc, #88]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b90:	4b14      	ldr	r3, [pc, #80]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a13      	ldr	r2, [pc, #76]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9c:	f7fd fe9c 	bl	80018d8 <HAL_GetTick>
 8003ba0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ba2:	e009      	b.n	8003bb8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ba4:	f7fd fe98 	bl	80018d8 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d902      	bls.n	8003bb8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	73fb      	strb	r3, [r7, #15]
          break;
 8003bb6:	e005      	b.n	8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0ef      	beq.n	8003ba4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bca:	4b06      	ldr	r3, [pc, #24]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	4904      	ldr	r1, [pc, #16]	@ (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
 8003be8:	07ff800f 	.word	0x07ff800f
 8003bec:	ff9f800f 	.word	0xff9f800f
 8003bf0:	f9ff800f 	.word	0xf9ff800f

08003bf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e095      	b.n	8003d32 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d108      	bne.n	8003c20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c16:	d009      	beq.n	8003c2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	61da      	str	r2, [r3, #28]
 8003c1e:	e005      	b.n	8003c2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fd fc66 	bl	8001518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c6c:	d902      	bls.n	8003c74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	e002      	b.n	8003c7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003c82:	d007      	beq.n	8003c94 <HAL_SPI_Init+0xa0>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c8c:	d002      	beq.n	8003c94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd6:	ea42 0103 	orr.w	r1, r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cde:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	0c1b      	lsrs	r3, r3, #16
 8003cf0:	f003 0204 	and.w	r2, r3, #4
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003d10:	ea42 0103 	orr.w	r1, r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b088      	sub	sp, #32
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_SPI_Transmit+0x22>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e15f      	b.n	800401c <HAL_SPI_Transmit+0x2e2>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d64:	f7fd fdb8 	bl	80018d8 <HAL_GetTick>
 8003d68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d002      	beq.n	8003d80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d7e:	e148      	b.n	8004012 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <HAL_SPI_Transmit+0x52>
 8003d86:	88fb      	ldrh	r3, [r7, #6]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d102      	bne.n	8003d92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d90:	e13f      	b.n	8004012 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2203      	movs	r2, #3
 8003d96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	88fa      	ldrh	r2, [r7, #6]
 8003daa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	88fa      	ldrh	r2, [r7, #6]
 8003db0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ddc:	d10f      	bne.n	8003dfe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e08:	2b40      	cmp	r3, #64	@ 0x40
 8003e0a:	d007      	beq.n	8003e1c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e24:	d94f      	bls.n	8003ec6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_SPI_Transmit+0xfa>
 8003e2e:	8afb      	ldrh	r3, [r7, #22]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d142      	bne.n	8003eba <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e38:	881a      	ldrh	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e44:	1c9a      	adds	r2, r3, #2
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e58:	e02f      	b.n	8003eba <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d112      	bne.n	8003e8e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6c:	881a      	ldrh	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e78:	1c9a      	adds	r2, r3, #2
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e8c:	e015      	b.n	8003eba <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e8e:	f7fd fd23 	bl	80018d8 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d803      	bhi.n	8003ea6 <HAL_SPI_Transmit+0x16c>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea4:	d102      	bne.n	8003eac <HAL_SPI_Transmit+0x172>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d106      	bne.n	8003eba <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003eb8:	e0ab      	b.n	8004012 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1ca      	bne.n	8003e5a <HAL_SPI_Transmit+0x120>
 8003ec4:	e080      	b.n	8003fc8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_SPI_Transmit+0x19a>
 8003ece:	8afb      	ldrh	r3, [r7, #22]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d174      	bne.n	8003fbe <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d912      	bls.n	8003f04 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee2:	881a      	ldrh	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eee:	1c9a      	adds	r2, r3, #2
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b02      	subs	r3, #2
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f02:	e05c      	b.n	8003fbe <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	7812      	ldrb	r2, [r2, #0]
 8003f10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f2a:	e048      	b.n	8003fbe <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d12b      	bne.n	8003f92 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d912      	bls.n	8003f6a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f48:	881a      	ldrh	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f54:	1c9a      	adds	r2, r3, #2
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b02      	subs	r3, #2
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f68:	e029      	b.n	8003fbe <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	330c      	adds	r3, #12
 8003f74:	7812      	ldrb	r2, [r2, #0]
 8003f76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f90:	e015      	b.n	8003fbe <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f92:	f7fd fca1 	bl	80018d8 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d803      	bhi.n	8003faa <HAL_SPI_Transmit+0x270>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa8:	d102      	bne.n	8003fb0 <HAL_SPI_Transmit+0x276>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d106      	bne.n	8003fbe <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003fbc:	e029      	b.n	8004012 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1b1      	bne.n	8003f2c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	6839      	ldr	r1, [r7, #0]
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f947 	bl	8004260 <SPI_EndRxTxTransaction>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10a      	bne.n	8003ffc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e003      	b.n	8004012 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800401a:	7ffb      	ldrb	r3, [r7, #31]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3720      	adds	r7, #32
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	4613      	mov	r3, r2
 8004032:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004034:	f7fd fc50 	bl	80018d8 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	4413      	add	r3, r2
 8004042:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004044:	f7fd fc48 	bl	80018d8 <HAL_GetTick>
 8004048:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800404a:	4b39      	ldr	r3, [pc, #228]	@ (8004130 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	015b      	lsls	r3, r3, #5
 8004050:	0d1b      	lsrs	r3, r3, #20
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	fb02 f303 	mul.w	r3, r2, r3
 8004058:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800405a:	e054      	b.n	8004106 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004062:	d050      	beq.n	8004106 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004064:	f7fd fc38 	bl	80018d8 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	429a      	cmp	r2, r3
 8004072:	d902      	bls.n	800407a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d13d      	bne.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004088:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004092:	d111      	bne.n	80040b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800409c:	d004      	beq.n	80040a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a6:	d107      	bne.n	80040b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040c0:	d10f      	bne.n	80040e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e017      	b.n	8004126 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	3b01      	subs	r3, #1
 8004104:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4013      	ands	r3, r2
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	429a      	cmp	r2, r3
 8004114:	bf0c      	ite	eq
 8004116:	2301      	moveq	r3, #1
 8004118:	2300      	movne	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	429a      	cmp	r2, r3
 8004122:	d19b      	bne.n	800405c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3720      	adds	r7, #32
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000010 	.word	0x20000010

08004134 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08a      	sub	sp, #40	@ 0x28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004146:	f7fd fbc7 	bl	80018d8 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	4413      	add	r3, r2
 8004154:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004156:	f7fd fbbf 	bl	80018d8 <HAL_GetTick>
 800415a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004164:	4b3d      	ldr	r3, [pc, #244]	@ (800425c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	00da      	lsls	r2, r3, #3
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	0d1b      	lsrs	r3, r3, #20
 8004174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004176:	fb02 f303 	mul.w	r3, r2, r3
 800417a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800417c:	e060      	b.n	8004240 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004184:	d107      	bne.n	8004196 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d104      	bne.n	8004196 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004194:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d050      	beq.n	8004240 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800419e:	f7fd fb9b 	bl	80018d8 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d902      	bls.n	80041b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d13d      	bne.n	8004230 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80041c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041cc:	d111      	bne.n	80041f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041d6:	d004      	beq.n	80041e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041e0:	d107      	bne.n	80041f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041fa:	d10f      	bne.n	800421c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800421a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e010      	b.n	8004252 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	3b01      	subs	r3, #1
 800423e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	4013      	ands	r3, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	429a      	cmp	r2, r3
 800424e:	d196      	bne.n	800417e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3728      	adds	r7, #40	@ 0x28
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20000010 	.word	0x20000010

08004260 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2200      	movs	r2, #0
 8004274:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f7ff ff5b 	bl	8004134 <SPI_WaitFifoStateUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004288:	f043 0220 	orr.w	r2, r3, #32
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e027      	b.n	80042e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2200      	movs	r2, #0
 800429c:	2180      	movs	r1, #128	@ 0x80
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f7ff fec0 	bl	8004024 <SPI_WaitFlagStateUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ae:	f043 0220 	orr.w	r2, r3, #32
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e014      	b.n	80042e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f7ff ff34 	bl	8004134 <SPI_WaitFifoStateUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d007      	beq.n	80042e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042d6:	f043 0220 	orr.w	r2, r3, #32
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e000      	b.n	80042e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e042      	b.n	8004384 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004304:	2b00      	cmp	r3, #0
 8004306:	d106      	bne.n	8004316 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7fd f943 	bl	800159c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2224      	movs	r2, #36	@ 0x24
 800431a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0201 	bic.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 ffbc 	bl	80052b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fcbd 	bl	8004cbc <UART_SetConfig>
 8004342:	4603      	mov	r3, r0
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e01b      	b.n	8004384 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800435a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800436a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f001 f83b 	bl	80053f8 <UART_CheckIdleState>
 8004382:	4603      	mov	r3, r0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e031      	b.n	8004402 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2224      	movs	r2, #36	@ 0x24
 80043a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0201 	bic.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2200      	movs	r2, #0
 80043c4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2200      	movs	r2, #0
 80043cc:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fd f94c 	bl	800166c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b08a      	sub	sp, #40	@ 0x28
 800440e:	af02      	add	r7, sp, #8
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	4613      	mov	r3, r2
 8004418:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004420:	2b20      	cmp	r3, #32
 8004422:	f040 80b6 	bne.w	8004592 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_UART_Receive+0x28>
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e0ae      	b.n	8004594 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2222      	movs	r2, #34	@ 0x22
 8004442:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800444c:	f7fd fa44 	bl	80018d8 <HAL_GetTick>
 8004450:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	88fa      	ldrh	r2, [r7, #6]
 8004456:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	88fa      	ldrh	r2, [r7, #6]
 800445e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800446a:	d10e      	bne.n	800448a <HAL_UART_Receive+0x80>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d105      	bne.n	8004480 <HAL_UART_Receive+0x76>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800447a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800447e:	e02d      	b.n	80044dc <HAL_UART_Receive+0xd2>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	22ff      	movs	r2, #255	@ 0xff
 8004484:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004488:	e028      	b.n	80044dc <HAL_UART_Receive+0xd2>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10d      	bne.n	80044ae <HAL_UART_Receive+0xa4>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d104      	bne.n	80044a4 <HAL_UART_Receive+0x9a>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	22ff      	movs	r2, #255	@ 0xff
 800449e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80044a2:	e01b      	b.n	80044dc <HAL_UART_Receive+0xd2>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	227f      	movs	r2, #127	@ 0x7f
 80044a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80044ac:	e016      	b.n	80044dc <HAL_UART_Receive+0xd2>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044b6:	d10d      	bne.n	80044d4 <HAL_UART_Receive+0xca>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d104      	bne.n	80044ca <HAL_UART_Receive+0xc0>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	227f      	movs	r2, #127	@ 0x7f
 80044c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80044c8:	e008      	b.n	80044dc <HAL_UART_Receive+0xd2>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	223f      	movs	r2, #63	@ 0x3f
 80044ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80044d2:	e003      	b.n	80044dc <HAL_UART_Receive+0xd2>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80044e2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ec:	d108      	bne.n	8004500 <HAL_UART_Receive+0xf6>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d104      	bne.n	8004500 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	e003      	b.n	8004508 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004504:	2300      	movs	r3, #0
 8004506:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004508:	e037      	b.n	800457a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2200      	movs	r2, #0
 8004512:	2120      	movs	r1, #32
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f001 f819 	bl	800554c <UART_WaitOnFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e033      	b.n	8004594 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10c      	bne.n	800454c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004538:	b29a      	uxth	r2, r3
 800453a:	8a7b      	ldrh	r3, [r7, #18]
 800453c:	4013      	ands	r3, r2
 800453e:	b29a      	uxth	r2, r3
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	3302      	adds	r3, #2
 8004548:	61bb      	str	r3, [r7, #24]
 800454a:	e00d      	b.n	8004568 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004552:	b29b      	uxth	r3, r3
 8004554:	b2da      	uxtb	r2, r3
 8004556:	8a7b      	ldrh	r3, [r7, #18]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	4013      	ands	r3, r2
 800455c:	b2da      	uxtb	r2, r3
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	3301      	adds	r3, #1
 8004566:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1c1      	bne.n	800450a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e000      	b.n	8004594 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004592:	2302      	movs	r3, #2
  }
}
 8004594:	4618      	mov	r0, r3
 8004596:	3720      	adds	r7, #32
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	@ 0x28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	4613      	mov	r3, r2
 80045a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d137      	bne.n	8004624 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_UART_Receive_IT+0x24>
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e030      	b.n	8004626 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a18      	ldr	r2, [pc, #96]	@ (8004630 <HAL_UART_Receive_IT+0x94>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d01f      	beq.n	8004614 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d018      	beq.n	8004614 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	613b      	str	r3, [r7, #16]
   return(result);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	623b      	str	r3, [r7, #32]
 8004602:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	69f9      	ldr	r1, [r7, #28]
 8004606:	6a3a      	ldr	r2, [r7, #32]
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	61bb      	str	r3, [r7, #24]
   return(result);
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e6      	bne.n	80045e2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	461a      	mov	r2, r3
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 fffe 	bl	800561c <UART_Start_Receive_IT>
 8004620:	4603      	mov	r3, r0
 8004622:	e000      	b.n	8004626 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004624:	2302      	movs	r3, #2
  }
}
 8004626:	4618      	mov	r0, r3
 8004628:	3728      	adds	r7, #40	@ 0x28
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40008000 	.word	0x40008000

08004634 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b0ba      	sub	sp, #232	@ 0xe8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800465a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800465e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004662:	4013      	ands	r3, r2
 8004664:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004668:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800466c:	2b00      	cmp	r3, #0
 800466e:	d11b      	bne.n	80046a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b00      	cmp	r3, #0
 800467a:	d015      	beq.n	80046a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800467c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	d105      	bne.n	8004694 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800468c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d009      	beq.n	80046a8 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 82e3 	beq.w	8004c64 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	4798      	blx	r3
      }
      return;
 80046a6:	e2dd      	b.n	8004c64 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80046a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8123 	beq.w	80048f8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80046b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80046b6:	4b8d      	ldr	r3, [pc, #564]	@ (80048ec <HAL_UART_IRQHandler+0x2b8>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80046be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80046c2:	4b8b      	ldr	r3, [pc, #556]	@ (80048f0 <HAL_UART_IRQHandler+0x2bc>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 8116 	beq.w	80048f8 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d011      	beq.n	80046fc <HAL_UART_IRQHandler+0xc8>
 80046d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00b      	beq.n	80046fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2201      	movs	r2, #1
 80046ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f2:	f043 0201 	orr.w	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d011      	beq.n	800472c <HAL_UART_IRQHandler+0xf8>
 8004708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00b      	beq.n	800472c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2202      	movs	r2, #2
 800471a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004722:	f043 0204 	orr.w	r2, r3, #4
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800472c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d011      	beq.n	800475c <HAL_UART_IRQHandler+0x128>
 8004738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00b      	beq.n	800475c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2204      	movs	r2, #4
 800474a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004752:	f043 0202 	orr.w	r2, r3, #2
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800475c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d017      	beq.n	8004798 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800476c:	f003 0320 	and.w	r3, r3, #32
 8004770:	2b00      	cmp	r3, #0
 8004772:	d105      	bne.n	8004780 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004774:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004778:	4b5c      	ldr	r3, [pc, #368]	@ (80048ec <HAL_UART_IRQHandler+0x2b8>)
 800477a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2208      	movs	r2, #8
 8004786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478e:	f043 0208 	orr.w	r2, r3, #8
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800479c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d012      	beq.n	80047ca <HAL_UART_IRQHandler+0x196>
 80047a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00c      	beq.n	80047ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c0:	f043 0220 	orr.w	r2, r3, #32
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8249 	beq.w	8004c68 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80047d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d013      	beq.n	800480a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80047e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d105      	bne.n	80047fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80047ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004810:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800481e:	2b40      	cmp	r3, #64	@ 0x40
 8004820:	d005      	beq.n	800482e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004826:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800482a:	2b00      	cmp	r3, #0
 800482c:	d054      	beq.n	80048d8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f001 f816 	bl	8005860 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483e:	2b40      	cmp	r3, #64	@ 0x40
 8004840:	d146      	bne.n	80048d0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3308      	adds	r3, #8
 8004848:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004858:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800485c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004860:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3308      	adds	r3, #8
 800486a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800486e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004872:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004876:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800487a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1d9      	bne.n	8004842 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004894:	2b00      	cmp	r3, #0
 8004896:	d017      	beq.n	80048c8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800489e:	4a15      	ldr	r2, [pc, #84]	@ (80048f4 <HAL_UART_IRQHandler+0x2c0>)
 80048a0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fd f9e4 	bl	8001c76 <HAL_DMA_Abort_IT>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d019      	beq.n	80048e8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80048c2:	4610      	mov	r0, r2
 80048c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c6:	e00f      	b.n	80048e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f9e1 	bl	8004c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ce:	e00b      	b.n	80048e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f9dd 	bl	8004c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d6:	e007      	b.n	80048e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f9d9 	bl	8004c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80048e6:	e1bf      	b.n	8004c68 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e8:	bf00      	nop
    return;
 80048ea:	e1bd      	b.n	8004c68 <HAL_UART_IRQHandler+0x634>
 80048ec:	10000001 	.word	0x10000001
 80048f0:	04000120 	.word	0x04000120
 80048f4:	0800592d 	.word	0x0800592d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	f040 8153 	bne.w	8004ba8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 814c 	beq.w	8004ba8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8145 	beq.w	8004ba8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2210      	movs	r2, #16
 8004924:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004930:	2b40      	cmp	r3, #64	@ 0x40
 8004932:	f040 80bb 	bne.w	8004aac <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004944:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 818f 	beq.w	8004c6c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004954:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004958:	429a      	cmp	r2, r3
 800495a:	f080 8187 	bcs.w	8004c6c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004964:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b00      	cmp	r3, #0
 8004978:	f040 8087 	bne.w	8004a8a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004990:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004998:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80049a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80049b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80049be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1da      	bne.n	800497c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3308      	adds	r3, #8
 80049cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80049d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3308      	adds	r3, #8
 80049e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e1      	bne.n	80049c6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3308      	adds	r3, #8
 8004a08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3308      	adds	r3, #8
 8004a22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a2e:	e841 2300 	strex	r3, r2, [r1]
 8004a32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1e3      	bne.n	8004a02 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a58:	f023 0310 	bic.w	r3, r3, #16
 8004a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e4      	bne.n	8004a48 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fd f89a 	bl	8001bbe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f8fd 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004aaa:	e0df      	b.n	8004c6c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80d1 	beq.w	8004c70 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004ace:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 80cc 	beq.w	8004c70 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	461a      	mov	r2, r3
 8004af6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004afa:	647b      	str	r3, [r7, #68]	@ 0x44
 8004afc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e4      	bne.n	8004ad8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3308      	adds	r3, #8
 8004b14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	623b      	str	r3, [r7, #32]
   return(result);
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b24:	f023 0301 	bic.w	r3, r3, #1
 8004b28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3308      	adds	r3, #8
 8004b32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b36:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e1      	bne.n	8004b0e <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0310 	bic.w	r3, r3, #16
 8004b72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b84:	69b9      	ldr	r1, [r7, #24]
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	e841 2300 	strex	r3, r2, [r1]
 8004b8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e4      	bne.n	8004b5e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f87f 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ba6:	e063      	b.n	8004c70 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00e      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x59e>
 8004bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004bc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f001 fc14 	bl	80063f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bd0:	e051      	b.n	8004c76 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d014      	beq.n	8004c08 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d105      	bne.n	8004bf6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d008      	beq.n	8004c08 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d03a      	beq.n	8004c74 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	4798      	blx	r3
    }
    return;
 8004c06:	e035      	b.n	8004c74 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d009      	beq.n	8004c28 <HAL_UART_IRQHandler+0x5f4>
 8004c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fe99 	bl	8005958 <UART_EndTransmit_IT>
    return;
 8004c26:	e026      	b.n	8004c76 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d009      	beq.n	8004c48 <HAL_UART_IRQHandler+0x614>
 8004c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f001 fbed 	bl	8006420 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c46:	e016      	b.n	8004c76 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d010      	beq.n	8004c76 <HAL_UART_IRQHandler+0x642>
 8004c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	da0c      	bge.n	8004c76 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f001 fbd5 	bl	800640c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c62:	e008      	b.n	8004c76 <HAL_UART_IRQHandler+0x642>
      return;
 8004c64:	bf00      	nop
 8004c66:	e006      	b.n	8004c76 <HAL_UART_IRQHandler+0x642>
    return;
 8004c68:	bf00      	nop
 8004c6a:	e004      	b.n	8004c76 <HAL_UART_IRQHandler+0x642>
      return;
 8004c6c:	bf00      	nop
 8004c6e:	e002      	b.n	8004c76 <HAL_UART_IRQHandler+0x642>
      return;
 8004c70:	bf00      	nop
 8004c72:	e000      	b.n	8004c76 <HAL_UART_IRQHandler+0x642>
    return;
 8004c74:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8004c76:	37e8      	adds	r7, #232	@ 0xe8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc0:	b08c      	sub	sp, #48	@ 0x30
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4baa      	ldr	r3, [pc, #680]	@ (8004f94 <UART_SetConfig+0x2d8>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	6812      	ldr	r2, [r2, #0]
 8004cf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a9f      	ldr	r2, [pc, #636]	@ (8004f98 <UART_SetConfig+0x2dc>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d004      	beq.n	8004d28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d24:	4313      	orrs	r3, r2
 8004d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004d32:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d46:	f023 010f 	bic.w	r1, r3, #15
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a90      	ldr	r2, [pc, #576]	@ (8004f9c <UART_SetConfig+0x2e0>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d125      	bne.n	8004dac <UART_SetConfig+0xf0>
 8004d60:	4b8f      	ldr	r3, [pc, #572]	@ (8004fa0 <UART_SetConfig+0x2e4>)
 8004d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d81a      	bhi.n	8004da4 <UART_SetConfig+0xe8>
 8004d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d74 <UART_SetConfig+0xb8>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d85 	.word	0x08004d85
 8004d78:	08004d95 	.word	0x08004d95
 8004d7c:	08004d8d 	.word	0x08004d8d
 8004d80:	08004d9d 	.word	0x08004d9d
 8004d84:	2301      	movs	r3, #1
 8004d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d8a:	e116      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d92:	e112      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004d94:	2304      	movs	r3, #4
 8004d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d9a:	e10e      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004d9c:	2308      	movs	r3, #8
 8004d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004da2:	e10a      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004da4:	2310      	movs	r3, #16
 8004da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004daa:	e106      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a7c      	ldr	r2, [pc, #496]	@ (8004fa4 <UART_SetConfig+0x2e8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d138      	bne.n	8004e28 <UART_SetConfig+0x16c>
 8004db6:	4b7a      	ldr	r3, [pc, #488]	@ (8004fa0 <UART_SetConfig+0x2e4>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dbc:	f003 030c 	and.w	r3, r3, #12
 8004dc0:	2b0c      	cmp	r3, #12
 8004dc2:	d82d      	bhi.n	8004e20 <UART_SetConfig+0x164>
 8004dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dcc <UART_SetConfig+0x110>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004e01 	.word	0x08004e01
 8004dd0:	08004e21 	.word	0x08004e21
 8004dd4:	08004e21 	.word	0x08004e21
 8004dd8:	08004e21 	.word	0x08004e21
 8004ddc:	08004e11 	.word	0x08004e11
 8004de0:	08004e21 	.word	0x08004e21
 8004de4:	08004e21 	.word	0x08004e21
 8004de8:	08004e21 	.word	0x08004e21
 8004dec:	08004e09 	.word	0x08004e09
 8004df0:	08004e21 	.word	0x08004e21
 8004df4:	08004e21 	.word	0x08004e21
 8004df8:	08004e21 	.word	0x08004e21
 8004dfc:	08004e19 	.word	0x08004e19
 8004e00:	2300      	movs	r3, #0
 8004e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e06:	e0d8      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e0e:	e0d4      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004e10:	2304      	movs	r3, #4
 8004e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e16:	e0d0      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004e18:	2308      	movs	r3, #8
 8004e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e1e:	e0cc      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004e20:	2310      	movs	r3, #16
 8004e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e26:	e0c8      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a5e      	ldr	r2, [pc, #376]	@ (8004fa8 <UART_SetConfig+0x2ec>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d125      	bne.n	8004e7e <UART_SetConfig+0x1c2>
 8004e32:	4b5b      	ldr	r3, [pc, #364]	@ (8004fa0 <UART_SetConfig+0x2e4>)
 8004e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e3c:	2b30      	cmp	r3, #48	@ 0x30
 8004e3e:	d016      	beq.n	8004e6e <UART_SetConfig+0x1b2>
 8004e40:	2b30      	cmp	r3, #48	@ 0x30
 8004e42:	d818      	bhi.n	8004e76 <UART_SetConfig+0x1ba>
 8004e44:	2b20      	cmp	r3, #32
 8004e46:	d00a      	beq.n	8004e5e <UART_SetConfig+0x1a2>
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d814      	bhi.n	8004e76 <UART_SetConfig+0x1ba>
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <UART_SetConfig+0x19a>
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d008      	beq.n	8004e66 <UART_SetConfig+0x1aa>
 8004e54:	e00f      	b.n	8004e76 <UART_SetConfig+0x1ba>
 8004e56:	2300      	movs	r3, #0
 8004e58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e5c:	e0ad      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e64:	e0a9      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004e66:	2304      	movs	r3, #4
 8004e68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e6c:	e0a5      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004e6e:	2308      	movs	r3, #8
 8004e70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e74:	e0a1      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004e76:	2310      	movs	r3, #16
 8004e78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e7c:	e09d      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a4a      	ldr	r2, [pc, #296]	@ (8004fac <UART_SetConfig+0x2f0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d125      	bne.n	8004ed4 <UART_SetConfig+0x218>
 8004e88:	4b45      	ldr	r3, [pc, #276]	@ (8004fa0 <UART_SetConfig+0x2e4>)
 8004e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e92:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e94:	d016      	beq.n	8004ec4 <UART_SetConfig+0x208>
 8004e96:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e98:	d818      	bhi.n	8004ecc <UART_SetConfig+0x210>
 8004e9a:	2b80      	cmp	r3, #128	@ 0x80
 8004e9c:	d00a      	beq.n	8004eb4 <UART_SetConfig+0x1f8>
 8004e9e:	2b80      	cmp	r3, #128	@ 0x80
 8004ea0:	d814      	bhi.n	8004ecc <UART_SetConfig+0x210>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <UART_SetConfig+0x1f0>
 8004ea6:	2b40      	cmp	r3, #64	@ 0x40
 8004ea8:	d008      	beq.n	8004ebc <UART_SetConfig+0x200>
 8004eaa:	e00f      	b.n	8004ecc <UART_SetConfig+0x210>
 8004eac:	2300      	movs	r3, #0
 8004eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eb2:	e082      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eba:	e07e      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ec2:	e07a      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eca:	e076      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ed2:	e072      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a35      	ldr	r2, [pc, #212]	@ (8004fb0 <UART_SetConfig+0x2f4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d12a      	bne.n	8004f34 <UART_SetConfig+0x278>
 8004ede:	4b30      	ldr	r3, [pc, #192]	@ (8004fa0 <UART_SetConfig+0x2e4>)
 8004ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ee8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004eec:	d01a      	beq.n	8004f24 <UART_SetConfig+0x268>
 8004eee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ef2:	d81b      	bhi.n	8004f2c <UART_SetConfig+0x270>
 8004ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ef8:	d00c      	beq.n	8004f14 <UART_SetConfig+0x258>
 8004efa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004efe:	d815      	bhi.n	8004f2c <UART_SetConfig+0x270>
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <UART_SetConfig+0x250>
 8004f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f08:	d008      	beq.n	8004f1c <UART_SetConfig+0x260>
 8004f0a:	e00f      	b.n	8004f2c <UART_SetConfig+0x270>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f12:	e052      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004f14:	2302      	movs	r3, #2
 8004f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f1a:	e04e      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f22:	e04a      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004f24:	2308      	movs	r3, #8
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f2a:	e046      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f32:	e042      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a17      	ldr	r2, [pc, #92]	@ (8004f98 <UART_SetConfig+0x2dc>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d13a      	bne.n	8004fb4 <UART_SetConfig+0x2f8>
 8004f3e:	4b18      	ldr	r3, [pc, #96]	@ (8004fa0 <UART_SetConfig+0x2e4>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f44:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f4c:	d01a      	beq.n	8004f84 <UART_SetConfig+0x2c8>
 8004f4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f52:	d81b      	bhi.n	8004f8c <UART_SetConfig+0x2d0>
 8004f54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f58:	d00c      	beq.n	8004f74 <UART_SetConfig+0x2b8>
 8004f5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f5e:	d815      	bhi.n	8004f8c <UART_SetConfig+0x2d0>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <UART_SetConfig+0x2b0>
 8004f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f68:	d008      	beq.n	8004f7c <UART_SetConfig+0x2c0>
 8004f6a:	e00f      	b.n	8004f8c <UART_SetConfig+0x2d0>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f72:	e022      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004f74:	2302      	movs	r3, #2
 8004f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f7a:	e01e      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f82:	e01a      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004f84:	2308      	movs	r3, #8
 8004f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f8a:	e016      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f92:	e012      	b.n	8004fba <UART_SetConfig+0x2fe>
 8004f94:	cfff69f3 	.word	0xcfff69f3
 8004f98:	40008000 	.word	0x40008000
 8004f9c:	40013800 	.word	0x40013800
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40004400 	.word	0x40004400
 8004fa8:	40004800 	.word	0x40004800
 8004fac:	40004c00 	.word	0x40004c00
 8004fb0:	40005000 	.word	0x40005000
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4aae      	ldr	r2, [pc, #696]	@ (8005278 <UART_SetConfig+0x5bc>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	f040 8097 	bne.w	80050f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fc6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d823      	bhi.n	8005016 <UART_SetConfig+0x35a>
 8004fce:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd4 <UART_SetConfig+0x318>)
 8004fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd4:	08004ff9 	.word	0x08004ff9
 8004fd8:	08005017 	.word	0x08005017
 8004fdc:	08005001 	.word	0x08005001
 8004fe0:	08005017 	.word	0x08005017
 8004fe4:	08005007 	.word	0x08005007
 8004fe8:	08005017 	.word	0x08005017
 8004fec:	08005017 	.word	0x08005017
 8004ff0:	08005017 	.word	0x08005017
 8004ff4:	0800500f 	.word	0x0800500f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ff8:	f7fd fff8 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8004ffc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ffe:	e010      	b.n	8005022 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005000:	4b9e      	ldr	r3, [pc, #632]	@ (800527c <UART_SetConfig+0x5c0>)
 8005002:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005004:	e00d      	b.n	8005022 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005006:	f7fd ff59 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 800500a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800500c:	e009      	b.n	8005022 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800500e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005012:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005014:	e005      	b.n	8005022 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005020:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8130 	beq.w	800528a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	4a94      	ldr	r2, [pc, #592]	@ (8005280 <UART_SetConfig+0x5c4>)
 8005030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005034:	461a      	mov	r2, r3
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	fbb3 f3f2 	udiv	r3, r3, r2
 800503c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	4613      	mov	r3, r2
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	4413      	add	r3, r2
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	429a      	cmp	r2, r3
 800504c:	d305      	bcc.n	800505a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	429a      	cmp	r2, r3
 8005058:	d903      	bls.n	8005062 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005060:	e113      	b.n	800528a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	2200      	movs	r2, #0
 8005066:	60bb      	str	r3, [r7, #8]
 8005068:	60fa      	str	r2, [r7, #12]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506e:	4a84      	ldr	r2, [pc, #528]	@ (8005280 <UART_SetConfig+0x5c4>)
 8005070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005074:	b29b      	uxth	r3, r3
 8005076:	2200      	movs	r2, #0
 8005078:	603b      	str	r3, [r7, #0]
 800507a:	607a      	str	r2, [r7, #4]
 800507c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005080:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005084:	f7fb f90c 	bl	80002a0 <__aeabi_uldivmod>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4610      	mov	r0, r2
 800508e:	4619      	mov	r1, r3
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	020b      	lsls	r3, r1, #8
 800509a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800509e:	0202      	lsls	r2, r0, #8
 80050a0:	6979      	ldr	r1, [r7, #20]
 80050a2:	6849      	ldr	r1, [r1, #4]
 80050a4:	0849      	lsrs	r1, r1, #1
 80050a6:	2000      	movs	r0, #0
 80050a8:	460c      	mov	r4, r1
 80050aa:	4605      	mov	r5, r0
 80050ac:	eb12 0804 	adds.w	r8, r2, r4
 80050b0:	eb43 0905 	adc.w	r9, r3, r5
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	469a      	mov	sl, r3
 80050bc:	4693      	mov	fp, r2
 80050be:	4652      	mov	r2, sl
 80050c0:	465b      	mov	r3, fp
 80050c2:	4640      	mov	r0, r8
 80050c4:	4649      	mov	r1, r9
 80050c6:	f7fb f8eb 	bl	80002a0 <__aeabi_uldivmod>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4613      	mov	r3, r2
 80050d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050d8:	d308      	bcc.n	80050ec <UART_SetConfig+0x430>
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050e0:	d204      	bcs.n	80050ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6a3a      	ldr	r2, [r7, #32]
 80050e8:	60da      	str	r2, [r3, #12]
 80050ea:	e0ce      	b.n	800528a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80050f2:	e0ca      	b.n	800528a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050fc:	d166      	bne.n	80051cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80050fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005102:	2b08      	cmp	r3, #8
 8005104:	d827      	bhi.n	8005156 <UART_SetConfig+0x49a>
 8005106:	a201      	add	r2, pc, #4	@ (adr r2, 800510c <UART_SetConfig+0x450>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	08005131 	.word	0x08005131
 8005110:	08005139 	.word	0x08005139
 8005114:	08005141 	.word	0x08005141
 8005118:	08005157 	.word	0x08005157
 800511c:	08005147 	.word	0x08005147
 8005120:	08005157 	.word	0x08005157
 8005124:	08005157 	.word	0x08005157
 8005128:	08005157 	.word	0x08005157
 800512c:	0800514f 	.word	0x0800514f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005130:	f7fd ff5c 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8005134:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005136:	e014      	b.n	8005162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005138:	f7fd ff6e 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 800513c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800513e:	e010      	b.n	8005162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005140:	4b4e      	ldr	r3, [pc, #312]	@ (800527c <UART_SetConfig+0x5c0>)
 8005142:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005144:	e00d      	b.n	8005162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005146:	f7fd feb9 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 800514a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800514c:	e009      	b.n	8005162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005152:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005154:	e005      	b.n	8005162 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005160:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 8090 	beq.w	800528a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516e:	4a44      	ldr	r2, [pc, #272]	@ (8005280 <UART_SetConfig+0x5c4>)
 8005170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005174:	461a      	mov	r2, r3
 8005176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005178:	fbb3 f3f2 	udiv	r3, r3, r2
 800517c:	005a      	lsls	r2, r3, #1
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	085b      	lsrs	r3, r3, #1
 8005184:	441a      	add	r2, r3
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	fbb2 f3f3 	udiv	r3, r2, r3
 800518e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	2b0f      	cmp	r3, #15
 8005194:	d916      	bls.n	80051c4 <UART_SetConfig+0x508>
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800519c:	d212      	bcs.n	80051c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f023 030f 	bic.w	r3, r3, #15
 80051a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	8bfb      	ldrh	r3, [r7, #30]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	8bfa      	ldrh	r2, [r7, #30]
 80051c0:	60da      	str	r2, [r3, #12]
 80051c2:	e062      	b.n	800528a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80051ca:	e05e      	b.n	800528a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d828      	bhi.n	8005226 <UART_SetConfig+0x56a>
 80051d4:	a201      	add	r2, pc, #4	@ (adr r2, 80051dc <UART_SetConfig+0x520>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	08005201 	.word	0x08005201
 80051e0:	08005209 	.word	0x08005209
 80051e4:	08005211 	.word	0x08005211
 80051e8:	08005227 	.word	0x08005227
 80051ec:	08005217 	.word	0x08005217
 80051f0:	08005227 	.word	0x08005227
 80051f4:	08005227 	.word	0x08005227
 80051f8:	08005227 	.word	0x08005227
 80051fc:	0800521f 	.word	0x0800521f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005200:	f7fd fef4 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8005204:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005206:	e014      	b.n	8005232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005208:	f7fd ff06 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 800520c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800520e:	e010      	b.n	8005232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005210:	4b1a      	ldr	r3, [pc, #104]	@ (800527c <UART_SetConfig+0x5c0>)
 8005212:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005214:	e00d      	b.n	8005232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005216:	f7fd fe51 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 800521a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800521c:	e009      	b.n	8005232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005224:	e005      	b.n	8005232 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005230:	bf00      	nop
    }

    if (pclk != 0U)
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	2b00      	cmp	r3, #0
 8005236:	d028      	beq.n	800528a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523c:	4a10      	ldr	r2, [pc, #64]	@ (8005280 <UART_SetConfig+0x5c4>)
 800523e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005242:	461a      	mov	r2, r3
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005246:	fbb3 f2f2 	udiv	r2, r3, r2
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	085b      	lsrs	r3, r3, #1
 8005250:	441a      	add	r2, r3
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	fbb2 f3f3 	udiv	r3, r2, r3
 800525a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	2b0f      	cmp	r3, #15
 8005260:	d910      	bls.n	8005284 <UART_SetConfig+0x5c8>
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005268:	d20c      	bcs.n	8005284 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	b29a      	uxth	r2, r3
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60da      	str	r2, [r3, #12]
 8005274:	e009      	b.n	800528a <UART_SetConfig+0x5ce>
 8005276:	bf00      	nop
 8005278:	40008000 	.word	0x40008000
 800527c:	00f42400 	.word	0x00f42400
 8005280:	08009100 	.word	0x08009100
      }
      else
      {
        ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2201      	movs	r2, #1
 800528e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2201      	movs	r2, #1
 8005296:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2200      	movs	r2, #0
 800529e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2200      	movs	r2, #0
 80052a4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80052a6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3730      	adds	r7, #48	@ 0x30
 80052ae:	46bd      	mov	sp, r7
 80052b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080052b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00a      	beq.n	8005322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01a      	beq.n	80053ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053b2:	d10a      	bne.n	80053ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	605a      	str	r2, [r3, #4]
  }
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b098      	sub	sp, #96	@ 0x60
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005408:	f7fc fa66 	bl	80018d8 <HAL_GetTick>
 800540c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b08      	cmp	r3, #8
 800541a:	d12f      	bne.n	800547c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800541c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005424:	2200      	movs	r2, #0
 8005426:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f88e 	bl	800554c <UART_WaitOnFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d022      	beq.n	800547c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800544a:	653b      	str	r3, [r7, #80]	@ 0x50
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005454:	647b      	str	r3, [r7, #68]	@ 0x44
 8005456:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800545a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e6      	bne.n	8005436 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e063      	b.n	8005544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b04      	cmp	r3, #4
 8005488:	d149      	bne.n	800551e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800548a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005492:	2200      	movs	r2, #0
 8005494:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f857 	bl	800554c <UART_WaitOnFlagUntilTimeout>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d03c      	beq.n	800551e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	e853 3f00 	ldrex	r3, [r3]
 80054b0:	623b      	str	r3, [r7, #32]
   return(result);
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80054c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e6      	bne.n	80054a4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3308      	adds	r3, #8
 80054dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f023 0301 	bic.w	r3, r3, #1
 80054ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3308      	adds	r3, #8
 80054f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054f6:	61fa      	str	r2, [r7, #28]
 80054f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	69b9      	ldr	r1, [r7, #24]
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	617b      	str	r3, [r7, #20]
   return(result);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e5      	bne.n	80054d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e012      	b.n	8005544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3758      	adds	r7, #88	@ 0x58
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	4613      	mov	r3, r2
 800555a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800555c:	e049      	b.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005564:	d045      	beq.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005566:	f7fc f9b7 	bl	80018d8 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	429a      	cmp	r2, r3
 8005574:	d302      	bcc.n	800557c <UART_WaitOnFlagUntilTimeout+0x30>
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e048      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	d031      	beq.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b08      	cmp	r3, #8
 800559a:	d110      	bne.n	80055be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2208      	movs	r2, #8
 80055a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 f95b 	bl	8005860 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2208      	movs	r2, #8
 80055ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e029      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055cc:	d111      	bne.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f941 	bl	8005860 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e00f      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4013      	ands	r3, r2
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	429a      	cmp	r2, r3
 8005600:	bf0c      	ite	eq
 8005602:	2301      	moveq	r3, #1
 8005604:	2300      	movne	r3, #0
 8005606:	b2db      	uxtb	r3, r3
 8005608:	461a      	mov	r2, r3
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	429a      	cmp	r2, r3
 800560e:	d0a6      	beq.n	800555e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
	...

0800561c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800561c:	b480      	push	{r7}
 800561e:	b0a3      	sub	sp, #140	@ 0x8c
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	4613      	mov	r3, r2
 8005628:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	88fa      	ldrh	r2, [r7, #6]
 8005634:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	88fa      	ldrh	r2, [r7, #6]
 800563c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800564e:	d10e      	bne.n	800566e <UART_Start_Receive_IT+0x52>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d105      	bne.n	8005664 <UART_Start_Receive_IT+0x48>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800565e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005662:	e02d      	b.n	80056c0 <UART_Start_Receive_IT+0xa4>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	22ff      	movs	r2, #255	@ 0xff
 8005668:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800566c:	e028      	b.n	80056c0 <UART_Start_Receive_IT+0xa4>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10d      	bne.n	8005692 <UART_Start_Receive_IT+0x76>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d104      	bne.n	8005688 <UART_Start_Receive_IT+0x6c>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	22ff      	movs	r2, #255	@ 0xff
 8005682:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005686:	e01b      	b.n	80056c0 <UART_Start_Receive_IT+0xa4>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	227f      	movs	r2, #127	@ 0x7f
 800568c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005690:	e016      	b.n	80056c0 <UART_Start_Receive_IT+0xa4>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800569a:	d10d      	bne.n	80056b8 <UART_Start_Receive_IT+0x9c>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d104      	bne.n	80056ae <UART_Start_Receive_IT+0x92>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	227f      	movs	r2, #127	@ 0x7f
 80056a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80056ac:	e008      	b.n	80056c0 <UART_Start_Receive_IT+0xa4>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	223f      	movs	r2, #63	@ 0x3f
 80056b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80056b6:	e003      	b.n	80056c0 <UART_Start_Receive_IT+0xa4>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2222      	movs	r2, #34	@ 0x22
 80056cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3308      	adds	r3, #8
 80056d6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80056e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056e2:	f043 0301 	orr.w	r3, r3, #1
 80056e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3308      	adds	r3, #8
 80056f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80056f4:	673a      	str	r2, [r7, #112]	@ 0x70
 80056f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80056fa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005702:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e3      	bne.n	80056d0 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800570c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005710:	d14f      	bne.n	80057b2 <UART_Start_Receive_IT+0x196>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005718:	88fa      	ldrh	r2, [r7, #6]
 800571a:	429a      	cmp	r2, r3
 800571c:	d349      	bcc.n	80057b2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005726:	d107      	bne.n	8005738 <UART_Start_Receive_IT+0x11c>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d103      	bne.n	8005738 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4a47      	ldr	r2, [pc, #284]	@ (8005850 <UART_Start_Receive_IT+0x234>)
 8005734:	675a      	str	r2, [r3, #116]	@ 0x74
 8005736:	e002      	b.n	800573e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4a46      	ldr	r2, [pc, #280]	@ (8005854 <UART_Start_Receive_IT+0x238>)
 800573c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d01a      	beq.n	800577c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005756:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800575a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005768:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800576a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800576e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005770:	e841 2300 	strex	r3, r2, [r1]
 8005774:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1e4      	bne.n	8005746 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3308      	adds	r3, #8
 8005782:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800578c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005792:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3308      	adds	r3, #8
 800579a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800579c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800579e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80057aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e5      	bne.n	800577c <UART_Start_Receive_IT+0x160>
 80057b0:	e046      	b.n	8005840 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ba:	d107      	bne.n	80057cc <UART_Start_Receive_IT+0x1b0>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d103      	bne.n	80057cc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4a24      	ldr	r2, [pc, #144]	@ (8005858 <UART_Start_Receive_IT+0x23c>)
 80057c8:	675a      	str	r2, [r3, #116]	@ 0x74
 80057ca:	e002      	b.n	80057d2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4a23      	ldr	r2, [pc, #140]	@ (800585c <UART_Start_Receive_IT+0x240>)
 80057d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d019      	beq.n	800580e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e2:	e853 3f00 	ldrex	r3, [r3]
 80057e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ea:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80057ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	461a      	mov	r2, r3
 80057f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80057fa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80057fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005800:	e841 2300 	strex	r3, r2, [r1]
 8005804:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e6      	bne.n	80057da <UART_Start_Receive_IT+0x1be>
 800580c:	e018      	b.n	8005840 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	e853 3f00 	ldrex	r3, [r3]
 800581a:	613b      	str	r3, [r7, #16]
   return(result);
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f043 0320 	orr.w	r3, r3, #32
 8005822:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800582c:	623b      	str	r3, [r7, #32]
 800582e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005830:	69f9      	ldr	r1, [r7, #28]
 8005832:	6a3a      	ldr	r2, [r7, #32]
 8005834:	e841 2300 	strex	r3, r2, [r1]
 8005838:	61bb      	str	r3, [r7, #24]
   return(result);
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1e6      	bne.n	800580e <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	378c      	adds	r7, #140	@ 0x8c
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	0800608d 	.word	0x0800608d
 8005854:	08005d29 	.word	0x08005d29
 8005858:	08005b6d 	.word	0x08005b6d
 800585c:	080059b1 	.word	0x080059b1

08005860 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005860:	b480      	push	{r7}
 8005862:	b095      	sub	sp, #84	@ 0x54
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005878:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800587c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005886:	643b      	str	r3, [r7, #64]	@ 0x40
 8005888:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800588c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e6      	bne.n	8005868 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3308      	adds	r3, #8
 80058a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058b0:	f023 0301 	bic.w	r3, r3, #1
 80058b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3308      	adds	r3, #8
 80058bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e3      	bne.n	800589a <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d118      	bne.n	800590c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f023 0310 	bic.w	r3, r3, #16
 80058ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	461a      	mov	r2, r3
 80058f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	6979      	ldr	r1, [r7, #20]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	613b      	str	r3, [r7, #16]
   return(result);
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e6      	bne.n	80058da <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2220      	movs	r2, #32
 8005910:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005920:	bf00      	nop
 8005922:	3754      	adds	r7, #84	@ 0x54
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005938:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f7ff f9a0 	bl	8004c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005950:	bf00      	nop
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	60bb      	str	r3, [r7, #8]
   return(result);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005974:	61fb      	str	r3, [r7, #28]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	461a      	mov	r2, r3
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	61bb      	str	r3, [r7, #24]
 8005980:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005982:	6979      	ldr	r1, [r7, #20]
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	e841 2300 	strex	r3, r2, [r1]
 800598a:	613b      	str	r3, [r7, #16]
   return(result);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1e6      	bne.n	8005960 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2220      	movs	r2, #32
 8005996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff f96b 	bl	8004c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059a6:	bf00      	nop
 80059a8:	3720      	adds	r7, #32
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b09c      	sub	sp, #112	@ 0x70
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80059be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059c8:	2b22      	cmp	r3, #34	@ 0x22
 80059ca:	f040 80be 	bne.w	8005b4a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80059d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80059d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80059dc:	b2d9      	uxtb	r1, r3
 80059de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e8:	400a      	ands	r2, r1
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f040 80a3 	bne.w	8005b5e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a20:	e853 3f00 	ldrex	r3, [r3]
 8005a24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a3e:	e841 2300 	strex	r3, r2, [r1]
 8005a42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1e6      	bne.n	8005a18 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3308      	adds	r3, #8
 8005a50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a54:	e853 3f00 	ldrex	r3, [r3]
 8005a58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a5c:	f023 0301 	bic.w	r3, r3, #1
 8005a60:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3308      	adds	r3, #8
 8005a68:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005a6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a72:	e841 2300 	strex	r3, r2, [r1]
 8005a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1e5      	bne.n	8005a4a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a34      	ldr	r2, [pc, #208]	@ (8005b68 <UART_RxISR_8BIT+0x1b8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d01f      	beq.n	8005adc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d018      	beq.n	8005adc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	623b      	str	r3, [r7, #32]
   return(result);
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005abe:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ac8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e6      	bne.n	8005aaa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d12e      	bne.n	8005b42 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0310 	bic.w	r3, r3, #16
 8005afe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b08:	61fb      	str	r3, [r7, #28]
 8005b0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	69b9      	ldr	r1, [r7, #24]
 8005b0e:	69fa      	ldr	r2, [r7, #28]
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	617b      	str	r3, [r7, #20]
   return(result);
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e6      	bne.n	8005aea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f003 0310 	and.w	r3, r3, #16
 8005b26:	2b10      	cmp	r3, #16
 8005b28:	d103      	bne.n	8005b32 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2210      	movs	r2, #16
 8005b30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff f8b2 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b40:	e00d      	b.n	8005b5e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7fb fc1c 	bl	8001380 <HAL_UART_RxCpltCallback>
}
 8005b48:	e009      	b.n	8005b5e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	8b1b      	ldrh	r3, [r3, #24]
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0208 	orr.w	r2, r2, #8
 8005b5a:	b292      	uxth	r2, r2
 8005b5c:	831a      	strh	r2, [r3, #24]
}
 8005b5e:	bf00      	nop
 8005b60:	3770      	adds	r7, #112	@ 0x70
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	40008000 	.word	0x40008000

08005b6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b09c      	sub	sp, #112	@ 0x70
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005b7a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b84:	2b22      	cmp	r3, #34	@ 0x22
 8005b86:	f040 80be 	bne.w	8005d06 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005b90:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b98:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b9a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005b9e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ba8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bae:	1c9a      	adds	r2, r3, #2
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f040 80a3 	bne.w	8005d1a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005be2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005be4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005be8:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bf4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005bf8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e6      	bne.n	8005bd4 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c18:	f023 0301 	bic.w	r3, r3, #1
 8005c1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3308      	adds	r3, #8
 8005c24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c26:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e5      	bne.n	8005c06 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a34      	ldr	r2, [pc, #208]	@ (8005d24 <UART_RxISR_16BIT+0x1b8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d01f      	beq.n	8005c98 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d018      	beq.n	8005c98 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	e853 3f00 	ldrex	r3, [r3]
 8005c72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	461a      	mov	r2, r3
 8005c82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c86:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c8c:	e841 2300 	strex	r3, r2, [r1]
 8005c90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1e6      	bne.n	8005c66 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d12e      	bne.n	8005cfe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f023 0310 	bic.w	r3, r3, #16
 8005cba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cc4:	61bb      	str	r3, [r7, #24]
 8005cc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	6979      	ldr	r1, [r7, #20]
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	e841 2300 	strex	r3, r2, [r1]
 8005cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e6      	bne.n	8005ca6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	f003 0310 	and.w	r3, r3, #16
 8005ce2:	2b10      	cmp	r3, #16
 8005ce4:	d103      	bne.n	8005cee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2210      	movs	r2, #16
 8005cec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fe ffd4 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cfc:	e00d      	b.n	8005d1a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fb fb3e 	bl	8001380 <HAL_UART_RxCpltCallback>
}
 8005d04:	e009      	b.n	8005d1a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	8b1b      	ldrh	r3, [r3, #24]
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0208 	orr.w	r2, r2, #8
 8005d16:	b292      	uxth	r2, r2
 8005d18:	831a      	strh	r2, [r3, #24]
}
 8005d1a:	bf00      	nop
 8005d1c:	3770      	adds	r7, #112	@ 0x70
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	40008000 	.word	0x40008000

08005d28 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b0ac      	sub	sp, #176	@ 0xb0
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005d36:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d5e:	2b22      	cmp	r3, #34	@ 0x22
 8005d60:	f040 8182 	bne.w	8006068 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005d6a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d6e:	e125      	b.n	8005fbc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005d76:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d7a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8005d7e:	b2d9      	uxtb	r1, r3
 8005d80:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d8a:	400a      	ands	r2, r1
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d053      	beq.n	8005e6a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d011      	beq.n	8005df2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005dce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00b      	beq.n	8005df2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2201      	movs	r2, #1
 8005de0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005de8:	f043 0201 	orr.w	r2, r3, #1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d011      	beq.n	8005e22 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005dfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e18:	f043 0204 	orr.w	r2, r3, #4
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d011      	beq.n	8005e52 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00b      	beq.n	8005e52 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2204      	movs	r2, #4
 8005e40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e48:	f043 0202 	orr.w	r2, r3, #2
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d006      	beq.n	8005e6a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7fe ff17 	bl	8004c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f040 80a2 	bne.w	8005fbc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8005e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e9c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005ea0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8005ea8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e4      	bne.n	8005e78 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8005ebe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ec0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ec4:	f023 0301 	bic.w	r3, r3, #1
 8005ec8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ed6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005ed8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eda:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005edc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005ede:	e841 2300 	strex	r3, r2, [r1]
 8005ee2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005ee4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1e1      	bne.n	8005eae <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a60      	ldr	r2, [pc, #384]	@ (8006084 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d021      	beq.n	8005f4c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d01a      	beq.n	8005f4c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f1e:	e853 3f00 	ldrex	r3, [r3]
 8005f22:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f38:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f3a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005f3e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e4      	bne.n	8005f16 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d130      	bne.n	8005fb6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f62:	e853 3f00 	ldrex	r3, [r3]
 8005f66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	f023 0310 	bic.w	r3, r3, #16
 8005f6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f84:	e841 2300 	strex	r3, r2, [r1]
 8005f88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e4      	bne.n	8005f5a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	f003 0310 	and.w	r3, r3, #16
 8005f9a:	2b10      	cmp	r3, #16
 8005f9c:	d103      	bne.n	8005fa6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2210      	movs	r2, #16
 8005fa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fe fe78 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
 8005fb4:	e002      	b.n	8005fbc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7fb f9e2 	bl	8001380 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005fbc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d006      	beq.n	8005fd2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fc8:	f003 0320 	and.w	r3, r3, #32
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f47f aecf 	bne.w	8005d70 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005fd8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005fdc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d04b      	beq.n	800607c <UART_RxISR_8BIT_FIFOEN+0x354>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005fea:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d244      	bcs.n	800607c <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	61fb      	str	r3, [r7, #28]
   return(result);
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006008:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3308      	adds	r3, #8
 8006012:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006016:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006018:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800601c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800601e:	e841 2300 	strex	r3, r2, [r1]
 8006022:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1e3      	bne.n	8005ff2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a16      	ldr	r2, [pc, #88]	@ (8006088 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800602e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	60bb      	str	r3, [r7, #8]
   return(result);
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f043 0320 	orr.w	r3, r3, #32
 8006044:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006056:	6979      	ldr	r1, [r7, #20]
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	e841 2300 	strex	r3, r2, [r1]
 800605e:	613b      	str	r3, [r7, #16]
   return(result);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1e4      	bne.n	8006030 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006066:	e009      	b.n	800607c <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	8b1b      	ldrh	r3, [r3, #24]
 800606e:	b29a      	uxth	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f042 0208 	orr.w	r2, r2, #8
 8006078:	b292      	uxth	r2, r2
 800607a:	831a      	strh	r2, [r3, #24]
}
 800607c:	bf00      	nop
 800607e:	37b0      	adds	r7, #176	@ 0xb0
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	40008000 	.word	0x40008000
 8006088:	080059b1 	.word	0x080059b1

0800608c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b0ae      	sub	sp, #184	@ 0xb8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800609a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060c2:	2b22      	cmp	r3, #34	@ 0x22
 80060c4:	f040 8186 	bne.w	80063d4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80060ce:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060d2:	e129      	b.n	8006328 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80060da:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80060e6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80060ea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80060ee:	4013      	ands	r3, r2
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060fc:	1c9a      	adds	r2, r3, #2
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29a      	uxth	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800611e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	2b00      	cmp	r3, #0
 8006128:	d053      	beq.n	80061d2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800612a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d011      	beq.n	800615a <UART_RxISR_16BIT_FIFOEN+0xce>
 8006136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800613a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00b      	beq.n	800615a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2201      	movs	r2, #1
 8006148:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006150:	f043 0201 	orr.w	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800615a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d011      	beq.n	800618a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006166:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00b      	beq.n	800618a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2202      	movs	r2, #2
 8006178:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006180:	f043 0204 	orr.w	r2, r3, #4
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800618a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b00      	cmp	r3, #0
 8006194:	d011      	beq.n	80061ba <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00b      	beq.n	80061ba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2204      	movs	r2, #4
 80061a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b0:	f043 0202 	orr.w	r2, r3, #2
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d006      	beq.n	80061d2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7fe fd63 	bl	8004c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80061d8:	b29b      	uxth	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f040 80a4 	bne.w	8006328 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80061ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	461a      	mov	r2, r3
 80061fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006202:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006206:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006208:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800620a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006214:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1e2      	bne.n	80061e0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3308      	adds	r3, #8
 8006220:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006222:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006224:	e853 3f00 	ldrex	r3, [r3]
 8006228:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800622a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800622c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006230:	f023 0301 	bic.w	r3, r3, #1
 8006234:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3308      	adds	r3, #8
 800623e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006242:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006244:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006248:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006250:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e1      	bne.n	800621a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2220      	movs	r2, #32
 800625a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a60      	ldr	r2, [pc, #384]	@ (80063f0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d021      	beq.n	80062b8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d01a      	beq.n	80062b8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006290:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006292:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006296:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80062a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062a6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80062b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e4      	bne.n	8006282 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d130      	bne.n	8006322 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ce:	e853 3f00 	ldrex	r3, [r3]
 80062d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d6:	f023 0310 	bic.w	r3, r3, #16
 80062da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80062e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e4      	bne.n	80062c6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	f003 0310 	and.w	r3, r3, #16
 8006306:	2b10      	cmp	r3, #16
 8006308:	d103      	bne.n	8006312 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2210      	movs	r2, #16
 8006310:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006318:	4619      	mov	r1, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fe fcc2 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
 8006320:	e002      	b.n	8006328 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7fb f82c 	bl	8001380 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006328:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800632c:	2b00      	cmp	r3, #0
 800632e:	d006      	beq.n	800633e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006330:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006334:	f003 0320 	and.w	r3, r3, #32
 8006338:	2b00      	cmp	r3, #0
 800633a:	f47f aecb 	bne.w	80060d4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006344:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006348:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800634c:	2b00      	cmp	r3, #0
 800634e:	d04b      	beq.n	80063e8 <UART_RxISR_16BIT_FIFOEN+0x35c>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006356:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800635a:	429a      	cmp	r2, r3
 800635c:	d244      	bcs.n	80063e8 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3308      	adds	r3, #8
 8006364:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	623b      	str	r3, [r7, #32]
   return(result);
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006374:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3308      	adds	r3, #8
 800637e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006382:	633a      	str	r2, [r7, #48]	@ 0x30
 8006384:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e3      	bne.n	800635e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a16      	ldr	r2, [pc, #88]	@ (80063f4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800639a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f043 0320 	orr.w	r3, r3, #32
 80063b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063be:	61fb      	str	r3, [r7, #28]
 80063c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	69b9      	ldr	r1, [r7, #24]
 80063c4:	69fa      	ldr	r2, [r7, #28]
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	617b      	str	r3, [r7, #20]
   return(result);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e4      	bne.n	800639c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063d2:	e009      	b.n	80063e8 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	8b1b      	ldrh	r3, [r3, #24]
 80063da:	b29a      	uxth	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f042 0208 	orr.w	r2, r2, #8
 80063e4:	b292      	uxth	r2, r2
 80063e6:	831a      	strh	r2, [r3, #24]
}
 80063e8:	bf00      	nop
 80063ea:	37b8      	adds	r7, #184	@ 0xb8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	40008000 	.word	0x40008000
 80063f4:	08005b6d 	.word	0x08005b6d

080063f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006442:	2b01      	cmp	r3, #1
 8006444:	d101      	bne.n	800644a <HAL_UARTEx_DisableFifoMode+0x16>
 8006446:	2302      	movs	r3, #2
 8006448:	e027      	b.n	800649a <HAL_UARTEx_DisableFifoMode+0x66>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2224      	movs	r2, #36	@ 0x24
 8006456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 0201 	bic.w	r2, r2, #1
 8006470:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006478:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2220      	movs	r2, #32
 800648c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b084      	sub	sp, #16
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e02d      	b.n	800651a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2224      	movs	r2, #36	@ 0x24
 80064ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0201 	bic.w	r2, r2, #1
 80064e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f850 	bl	80065a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2220      	movs	r2, #32
 800650c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006532:	2b01      	cmp	r3, #1
 8006534:	d101      	bne.n	800653a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006536:	2302      	movs	r3, #2
 8006538:	e02d      	b.n	8006596 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2224      	movs	r2, #36	@ 0x24
 8006546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 0201 	bic.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f812 	bl	80065a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
	...

080065a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d108      	bne.n	80065c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065c0:	e031      	b.n	8006626 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065c2:	2308      	movs	r3, #8
 80065c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065c6:	2308      	movs	r3, #8
 80065c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	0e5b      	lsrs	r3, r3, #25
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	0f5b      	lsrs	r3, r3, #29
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065ea:	7bbb      	ldrb	r3, [r7, #14]
 80065ec:	7b3a      	ldrb	r2, [r7, #12]
 80065ee:	4911      	ldr	r1, [pc, #68]	@ (8006634 <UARTEx_SetNbDataToProcess+0x94>)
 80065f0:	5c8a      	ldrb	r2, [r1, r2]
 80065f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065f6:	7b3a      	ldrb	r2, [r7, #12]
 80065f8:	490f      	ldr	r1, [pc, #60]	@ (8006638 <UARTEx_SetNbDataToProcess+0x98>)
 80065fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006600:	b29a      	uxth	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	7b7a      	ldrb	r2, [r7, #13]
 800660c:	4909      	ldr	r1, [pc, #36]	@ (8006634 <UARTEx_SetNbDataToProcess+0x94>)
 800660e:	5c8a      	ldrb	r2, [r1, r2]
 8006610:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006614:	7b7a      	ldrb	r2, [r7, #13]
 8006616:	4908      	ldr	r1, [pc, #32]	@ (8006638 <UARTEx_SetNbDataToProcess+0x98>)
 8006618:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800661a:	fb93 f3f2 	sdiv	r3, r3, r2
 800661e:	b29a      	uxth	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006626:	bf00      	nop
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	08009118 	.word	0x08009118
 8006638:	08009120 	.word	0x08009120

0800663c <siprintf>:
 800663c:	b40e      	push	{r1, r2, r3}
 800663e:	b500      	push	{lr}
 8006640:	b09c      	sub	sp, #112	@ 0x70
 8006642:	ab1d      	add	r3, sp, #116	@ 0x74
 8006644:	9002      	str	r0, [sp, #8]
 8006646:	9006      	str	r0, [sp, #24]
 8006648:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800664c:	4809      	ldr	r0, [pc, #36]	@ (8006674 <siprintf+0x38>)
 800664e:	9107      	str	r1, [sp, #28]
 8006650:	9104      	str	r1, [sp, #16]
 8006652:	4909      	ldr	r1, [pc, #36]	@ (8006678 <siprintf+0x3c>)
 8006654:	f853 2b04 	ldr.w	r2, [r3], #4
 8006658:	9105      	str	r1, [sp, #20]
 800665a:	6800      	ldr	r0, [r0, #0]
 800665c:	9301      	str	r3, [sp, #4]
 800665e:	a902      	add	r1, sp, #8
 8006660:	f000 f994 	bl	800698c <_svfiprintf_r>
 8006664:	9b02      	ldr	r3, [sp, #8]
 8006666:	2200      	movs	r2, #0
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	b01c      	add	sp, #112	@ 0x70
 800666c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006670:	b003      	add	sp, #12
 8006672:	4770      	bx	lr
 8006674:	2000001c 	.word	0x2000001c
 8006678:	ffff0208 	.word	0xffff0208

0800667c <memset>:
 800667c:	4402      	add	r2, r0
 800667e:	4603      	mov	r3, r0
 8006680:	4293      	cmp	r3, r2
 8006682:	d100      	bne.n	8006686 <memset+0xa>
 8006684:	4770      	bx	lr
 8006686:	f803 1b01 	strb.w	r1, [r3], #1
 800668a:	e7f9      	b.n	8006680 <memset+0x4>

0800668c <__errno>:
 800668c:	4b01      	ldr	r3, [pc, #4]	@ (8006694 <__errno+0x8>)
 800668e:	6818      	ldr	r0, [r3, #0]
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	2000001c 	.word	0x2000001c

08006698 <__libc_init_array>:
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	4d0d      	ldr	r5, [pc, #52]	@ (80066d0 <__libc_init_array+0x38>)
 800669c:	4c0d      	ldr	r4, [pc, #52]	@ (80066d4 <__libc_init_array+0x3c>)
 800669e:	1b64      	subs	r4, r4, r5
 80066a0:	10a4      	asrs	r4, r4, #2
 80066a2:	2600      	movs	r6, #0
 80066a4:	42a6      	cmp	r6, r4
 80066a6:	d109      	bne.n	80066bc <__libc_init_array+0x24>
 80066a8:	4d0b      	ldr	r5, [pc, #44]	@ (80066d8 <__libc_init_array+0x40>)
 80066aa:	4c0c      	ldr	r4, [pc, #48]	@ (80066dc <__libc_init_array+0x44>)
 80066ac:	f000 fc66 	bl	8006f7c <_init>
 80066b0:	1b64      	subs	r4, r4, r5
 80066b2:	10a4      	asrs	r4, r4, #2
 80066b4:	2600      	movs	r6, #0
 80066b6:	42a6      	cmp	r6, r4
 80066b8:	d105      	bne.n	80066c6 <__libc_init_array+0x2e>
 80066ba:	bd70      	pop	{r4, r5, r6, pc}
 80066bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c0:	4798      	blx	r3
 80066c2:	3601      	adds	r6, #1
 80066c4:	e7ee      	b.n	80066a4 <__libc_init_array+0xc>
 80066c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ca:	4798      	blx	r3
 80066cc:	3601      	adds	r6, #1
 80066ce:	e7f2      	b.n	80066b6 <__libc_init_array+0x1e>
 80066d0:	08009164 	.word	0x08009164
 80066d4:	08009164 	.word	0x08009164
 80066d8:	08009164 	.word	0x08009164
 80066dc:	08009168 	.word	0x08009168

080066e0 <__retarget_lock_acquire_recursive>:
 80066e0:	4770      	bx	lr

080066e2 <__retarget_lock_release_recursive>:
 80066e2:	4770      	bx	lr

080066e4 <_free_r>:
 80066e4:	b538      	push	{r3, r4, r5, lr}
 80066e6:	4605      	mov	r5, r0
 80066e8:	2900      	cmp	r1, #0
 80066ea:	d041      	beq.n	8006770 <_free_r+0x8c>
 80066ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066f0:	1f0c      	subs	r4, r1, #4
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	bfb8      	it	lt
 80066f6:	18e4      	addlt	r4, r4, r3
 80066f8:	f000 f8e0 	bl	80068bc <__malloc_lock>
 80066fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006774 <_free_r+0x90>)
 80066fe:	6813      	ldr	r3, [r2, #0]
 8006700:	b933      	cbnz	r3, 8006710 <_free_r+0x2c>
 8006702:	6063      	str	r3, [r4, #4]
 8006704:	6014      	str	r4, [r2, #0]
 8006706:	4628      	mov	r0, r5
 8006708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800670c:	f000 b8dc 	b.w	80068c8 <__malloc_unlock>
 8006710:	42a3      	cmp	r3, r4
 8006712:	d908      	bls.n	8006726 <_free_r+0x42>
 8006714:	6820      	ldr	r0, [r4, #0]
 8006716:	1821      	adds	r1, r4, r0
 8006718:	428b      	cmp	r3, r1
 800671a:	bf01      	itttt	eq
 800671c:	6819      	ldreq	r1, [r3, #0]
 800671e:	685b      	ldreq	r3, [r3, #4]
 8006720:	1809      	addeq	r1, r1, r0
 8006722:	6021      	streq	r1, [r4, #0]
 8006724:	e7ed      	b.n	8006702 <_free_r+0x1e>
 8006726:	461a      	mov	r2, r3
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	b10b      	cbz	r3, 8006730 <_free_r+0x4c>
 800672c:	42a3      	cmp	r3, r4
 800672e:	d9fa      	bls.n	8006726 <_free_r+0x42>
 8006730:	6811      	ldr	r1, [r2, #0]
 8006732:	1850      	adds	r0, r2, r1
 8006734:	42a0      	cmp	r0, r4
 8006736:	d10b      	bne.n	8006750 <_free_r+0x6c>
 8006738:	6820      	ldr	r0, [r4, #0]
 800673a:	4401      	add	r1, r0
 800673c:	1850      	adds	r0, r2, r1
 800673e:	4283      	cmp	r3, r0
 8006740:	6011      	str	r1, [r2, #0]
 8006742:	d1e0      	bne.n	8006706 <_free_r+0x22>
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	6053      	str	r3, [r2, #4]
 800674a:	4408      	add	r0, r1
 800674c:	6010      	str	r0, [r2, #0]
 800674e:	e7da      	b.n	8006706 <_free_r+0x22>
 8006750:	d902      	bls.n	8006758 <_free_r+0x74>
 8006752:	230c      	movs	r3, #12
 8006754:	602b      	str	r3, [r5, #0]
 8006756:	e7d6      	b.n	8006706 <_free_r+0x22>
 8006758:	6820      	ldr	r0, [r4, #0]
 800675a:	1821      	adds	r1, r4, r0
 800675c:	428b      	cmp	r3, r1
 800675e:	bf04      	itt	eq
 8006760:	6819      	ldreq	r1, [r3, #0]
 8006762:	685b      	ldreq	r3, [r3, #4]
 8006764:	6063      	str	r3, [r4, #4]
 8006766:	bf04      	itt	eq
 8006768:	1809      	addeq	r1, r1, r0
 800676a:	6021      	streq	r1, [r4, #0]
 800676c:	6054      	str	r4, [r2, #4]
 800676e:	e7ca      	b.n	8006706 <_free_r+0x22>
 8006770:	bd38      	pop	{r3, r4, r5, pc}
 8006772:	bf00      	nop
 8006774:	200002dc 	.word	0x200002dc

08006778 <sbrk_aligned>:
 8006778:	b570      	push	{r4, r5, r6, lr}
 800677a:	4e0f      	ldr	r6, [pc, #60]	@ (80067b8 <sbrk_aligned+0x40>)
 800677c:	460c      	mov	r4, r1
 800677e:	6831      	ldr	r1, [r6, #0]
 8006780:	4605      	mov	r5, r0
 8006782:	b911      	cbnz	r1, 800678a <sbrk_aligned+0x12>
 8006784:	f000 fba6 	bl	8006ed4 <_sbrk_r>
 8006788:	6030      	str	r0, [r6, #0]
 800678a:	4621      	mov	r1, r4
 800678c:	4628      	mov	r0, r5
 800678e:	f000 fba1 	bl	8006ed4 <_sbrk_r>
 8006792:	1c43      	adds	r3, r0, #1
 8006794:	d103      	bne.n	800679e <sbrk_aligned+0x26>
 8006796:	f04f 34ff 	mov.w	r4, #4294967295
 800679a:	4620      	mov	r0, r4
 800679c:	bd70      	pop	{r4, r5, r6, pc}
 800679e:	1cc4      	adds	r4, r0, #3
 80067a0:	f024 0403 	bic.w	r4, r4, #3
 80067a4:	42a0      	cmp	r0, r4
 80067a6:	d0f8      	beq.n	800679a <sbrk_aligned+0x22>
 80067a8:	1a21      	subs	r1, r4, r0
 80067aa:	4628      	mov	r0, r5
 80067ac:	f000 fb92 	bl	8006ed4 <_sbrk_r>
 80067b0:	3001      	adds	r0, #1
 80067b2:	d1f2      	bne.n	800679a <sbrk_aligned+0x22>
 80067b4:	e7ef      	b.n	8006796 <sbrk_aligned+0x1e>
 80067b6:	bf00      	nop
 80067b8:	200002d8 	.word	0x200002d8

080067bc <_malloc_r>:
 80067bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067c0:	1ccd      	adds	r5, r1, #3
 80067c2:	f025 0503 	bic.w	r5, r5, #3
 80067c6:	3508      	adds	r5, #8
 80067c8:	2d0c      	cmp	r5, #12
 80067ca:	bf38      	it	cc
 80067cc:	250c      	movcc	r5, #12
 80067ce:	2d00      	cmp	r5, #0
 80067d0:	4606      	mov	r6, r0
 80067d2:	db01      	blt.n	80067d8 <_malloc_r+0x1c>
 80067d4:	42a9      	cmp	r1, r5
 80067d6:	d904      	bls.n	80067e2 <_malloc_r+0x26>
 80067d8:	230c      	movs	r3, #12
 80067da:	6033      	str	r3, [r6, #0]
 80067dc:	2000      	movs	r0, #0
 80067de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80068b8 <_malloc_r+0xfc>
 80067e6:	f000 f869 	bl	80068bc <__malloc_lock>
 80067ea:	f8d8 3000 	ldr.w	r3, [r8]
 80067ee:	461c      	mov	r4, r3
 80067f0:	bb44      	cbnz	r4, 8006844 <_malloc_r+0x88>
 80067f2:	4629      	mov	r1, r5
 80067f4:	4630      	mov	r0, r6
 80067f6:	f7ff ffbf 	bl	8006778 <sbrk_aligned>
 80067fa:	1c43      	adds	r3, r0, #1
 80067fc:	4604      	mov	r4, r0
 80067fe:	d158      	bne.n	80068b2 <_malloc_r+0xf6>
 8006800:	f8d8 4000 	ldr.w	r4, [r8]
 8006804:	4627      	mov	r7, r4
 8006806:	2f00      	cmp	r7, #0
 8006808:	d143      	bne.n	8006892 <_malloc_r+0xd6>
 800680a:	2c00      	cmp	r4, #0
 800680c:	d04b      	beq.n	80068a6 <_malloc_r+0xea>
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	4639      	mov	r1, r7
 8006812:	4630      	mov	r0, r6
 8006814:	eb04 0903 	add.w	r9, r4, r3
 8006818:	f000 fb5c 	bl	8006ed4 <_sbrk_r>
 800681c:	4581      	cmp	r9, r0
 800681e:	d142      	bne.n	80068a6 <_malloc_r+0xea>
 8006820:	6821      	ldr	r1, [r4, #0]
 8006822:	1a6d      	subs	r5, r5, r1
 8006824:	4629      	mov	r1, r5
 8006826:	4630      	mov	r0, r6
 8006828:	f7ff ffa6 	bl	8006778 <sbrk_aligned>
 800682c:	3001      	adds	r0, #1
 800682e:	d03a      	beq.n	80068a6 <_malloc_r+0xea>
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	442b      	add	r3, r5
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	f8d8 3000 	ldr.w	r3, [r8]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	bb62      	cbnz	r2, 8006898 <_malloc_r+0xdc>
 800683e:	f8c8 7000 	str.w	r7, [r8]
 8006842:	e00f      	b.n	8006864 <_malloc_r+0xa8>
 8006844:	6822      	ldr	r2, [r4, #0]
 8006846:	1b52      	subs	r2, r2, r5
 8006848:	d420      	bmi.n	800688c <_malloc_r+0xd0>
 800684a:	2a0b      	cmp	r2, #11
 800684c:	d917      	bls.n	800687e <_malloc_r+0xc2>
 800684e:	1961      	adds	r1, r4, r5
 8006850:	42a3      	cmp	r3, r4
 8006852:	6025      	str	r5, [r4, #0]
 8006854:	bf18      	it	ne
 8006856:	6059      	strne	r1, [r3, #4]
 8006858:	6863      	ldr	r3, [r4, #4]
 800685a:	bf08      	it	eq
 800685c:	f8c8 1000 	streq.w	r1, [r8]
 8006860:	5162      	str	r2, [r4, r5]
 8006862:	604b      	str	r3, [r1, #4]
 8006864:	4630      	mov	r0, r6
 8006866:	f000 f82f 	bl	80068c8 <__malloc_unlock>
 800686a:	f104 000b 	add.w	r0, r4, #11
 800686e:	1d23      	adds	r3, r4, #4
 8006870:	f020 0007 	bic.w	r0, r0, #7
 8006874:	1ac2      	subs	r2, r0, r3
 8006876:	bf1c      	itt	ne
 8006878:	1a1b      	subne	r3, r3, r0
 800687a:	50a3      	strne	r3, [r4, r2]
 800687c:	e7af      	b.n	80067de <_malloc_r+0x22>
 800687e:	6862      	ldr	r2, [r4, #4]
 8006880:	42a3      	cmp	r3, r4
 8006882:	bf0c      	ite	eq
 8006884:	f8c8 2000 	streq.w	r2, [r8]
 8006888:	605a      	strne	r2, [r3, #4]
 800688a:	e7eb      	b.n	8006864 <_malloc_r+0xa8>
 800688c:	4623      	mov	r3, r4
 800688e:	6864      	ldr	r4, [r4, #4]
 8006890:	e7ae      	b.n	80067f0 <_malloc_r+0x34>
 8006892:	463c      	mov	r4, r7
 8006894:	687f      	ldr	r7, [r7, #4]
 8006896:	e7b6      	b.n	8006806 <_malloc_r+0x4a>
 8006898:	461a      	mov	r2, r3
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	42a3      	cmp	r3, r4
 800689e:	d1fb      	bne.n	8006898 <_malloc_r+0xdc>
 80068a0:	2300      	movs	r3, #0
 80068a2:	6053      	str	r3, [r2, #4]
 80068a4:	e7de      	b.n	8006864 <_malloc_r+0xa8>
 80068a6:	230c      	movs	r3, #12
 80068a8:	6033      	str	r3, [r6, #0]
 80068aa:	4630      	mov	r0, r6
 80068ac:	f000 f80c 	bl	80068c8 <__malloc_unlock>
 80068b0:	e794      	b.n	80067dc <_malloc_r+0x20>
 80068b2:	6005      	str	r5, [r0, #0]
 80068b4:	e7d6      	b.n	8006864 <_malloc_r+0xa8>
 80068b6:	bf00      	nop
 80068b8:	200002dc 	.word	0x200002dc

080068bc <__malloc_lock>:
 80068bc:	4801      	ldr	r0, [pc, #4]	@ (80068c4 <__malloc_lock+0x8>)
 80068be:	f7ff bf0f 	b.w	80066e0 <__retarget_lock_acquire_recursive>
 80068c2:	bf00      	nop
 80068c4:	200002d4 	.word	0x200002d4

080068c8 <__malloc_unlock>:
 80068c8:	4801      	ldr	r0, [pc, #4]	@ (80068d0 <__malloc_unlock+0x8>)
 80068ca:	f7ff bf0a 	b.w	80066e2 <__retarget_lock_release_recursive>
 80068ce:	bf00      	nop
 80068d0:	200002d4 	.word	0x200002d4

080068d4 <__ssputs_r>:
 80068d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068d8:	688e      	ldr	r6, [r1, #8]
 80068da:	461f      	mov	r7, r3
 80068dc:	42be      	cmp	r6, r7
 80068de:	680b      	ldr	r3, [r1, #0]
 80068e0:	4682      	mov	sl, r0
 80068e2:	460c      	mov	r4, r1
 80068e4:	4690      	mov	r8, r2
 80068e6:	d82d      	bhi.n	8006944 <__ssputs_r+0x70>
 80068e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80068f0:	d026      	beq.n	8006940 <__ssputs_r+0x6c>
 80068f2:	6965      	ldr	r5, [r4, #20]
 80068f4:	6909      	ldr	r1, [r1, #16]
 80068f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068fa:	eba3 0901 	sub.w	r9, r3, r1
 80068fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006902:	1c7b      	adds	r3, r7, #1
 8006904:	444b      	add	r3, r9
 8006906:	106d      	asrs	r5, r5, #1
 8006908:	429d      	cmp	r5, r3
 800690a:	bf38      	it	cc
 800690c:	461d      	movcc	r5, r3
 800690e:	0553      	lsls	r3, r2, #21
 8006910:	d527      	bpl.n	8006962 <__ssputs_r+0x8e>
 8006912:	4629      	mov	r1, r5
 8006914:	f7ff ff52 	bl	80067bc <_malloc_r>
 8006918:	4606      	mov	r6, r0
 800691a:	b360      	cbz	r0, 8006976 <__ssputs_r+0xa2>
 800691c:	6921      	ldr	r1, [r4, #16]
 800691e:	464a      	mov	r2, r9
 8006920:	f000 fae8 	bl	8006ef4 <memcpy>
 8006924:	89a3      	ldrh	r3, [r4, #12]
 8006926:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800692a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800692e:	81a3      	strh	r3, [r4, #12]
 8006930:	6126      	str	r6, [r4, #16]
 8006932:	6165      	str	r5, [r4, #20]
 8006934:	444e      	add	r6, r9
 8006936:	eba5 0509 	sub.w	r5, r5, r9
 800693a:	6026      	str	r6, [r4, #0]
 800693c:	60a5      	str	r5, [r4, #8]
 800693e:	463e      	mov	r6, r7
 8006940:	42be      	cmp	r6, r7
 8006942:	d900      	bls.n	8006946 <__ssputs_r+0x72>
 8006944:	463e      	mov	r6, r7
 8006946:	6820      	ldr	r0, [r4, #0]
 8006948:	4632      	mov	r2, r6
 800694a:	4641      	mov	r1, r8
 800694c:	f000 faa8 	bl	8006ea0 <memmove>
 8006950:	68a3      	ldr	r3, [r4, #8]
 8006952:	1b9b      	subs	r3, r3, r6
 8006954:	60a3      	str	r3, [r4, #8]
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	4433      	add	r3, r6
 800695a:	6023      	str	r3, [r4, #0]
 800695c:	2000      	movs	r0, #0
 800695e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006962:	462a      	mov	r2, r5
 8006964:	f000 fad4 	bl	8006f10 <_realloc_r>
 8006968:	4606      	mov	r6, r0
 800696a:	2800      	cmp	r0, #0
 800696c:	d1e0      	bne.n	8006930 <__ssputs_r+0x5c>
 800696e:	6921      	ldr	r1, [r4, #16]
 8006970:	4650      	mov	r0, sl
 8006972:	f7ff feb7 	bl	80066e4 <_free_r>
 8006976:	230c      	movs	r3, #12
 8006978:	f8ca 3000 	str.w	r3, [sl]
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006982:	81a3      	strh	r3, [r4, #12]
 8006984:	f04f 30ff 	mov.w	r0, #4294967295
 8006988:	e7e9      	b.n	800695e <__ssputs_r+0x8a>
	...

0800698c <_svfiprintf_r>:
 800698c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006990:	4698      	mov	r8, r3
 8006992:	898b      	ldrh	r3, [r1, #12]
 8006994:	061b      	lsls	r3, r3, #24
 8006996:	b09d      	sub	sp, #116	@ 0x74
 8006998:	4607      	mov	r7, r0
 800699a:	460d      	mov	r5, r1
 800699c:	4614      	mov	r4, r2
 800699e:	d510      	bpl.n	80069c2 <_svfiprintf_r+0x36>
 80069a0:	690b      	ldr	r3, [r1, #16]
 80069a2:	b973      	cbnz	r3, 80069c2 <_svfiprintf_r+0x36>
 80069a4:	2140      	movs	r1, #64	@ 0x40
 80069a6:	f7ff ff09 	bl	80067bc <_malloc_r>
 80069aa:	6028      	str	r0, [r5, #0]
 80069ac:	6128      	str	r0, [r5, #16]
 80069ae:	b930      	cbnz	r0, 80069be <_svfiprintf_r+0x32>
 80069b0:	230c      	movs	r3, #12
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	f04f 30ff 	mov.w	r0, #4294967295
 80069b8:	b01d      	add	sp, #116	@ 0x74
 80069ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069be:	2340      	movs	r3, #64	@ 0x40
 80069c0:	616b      	str	r3, [r5, #20]
 80069c2:	2300      	movs	r3, #0
 80069c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80069c6:	2320      	movs	r3, #32
 80069c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80069d0:	2330      	movs	r3, #48	@ 0x30
 80069d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006b70 <_svfiprintf_r+0x1e4>
 80069d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80069da:	f04f 0901 	mov.w	r9, #1
 80069de:	4623      	mov	r3, r4
 80069e0:	469a      	mov	sl, r3
 80069e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069e6:	b10a      	cbz	r2, 80069ec <_svfiprintf_r+0x60>
 80069e8:	2a25      	cmp	r2, #37	@ 0x25
 80069ea:	d1f9      	bne.n	80069e0 <_svfiprintf_r+0x54>
 80069ec:	ebba 0b04 	subs.w	fp, sl, r4
 80069f0:	d00b      	beq.n	8006a0a <_svfiprintf_r+0x7e>
 80069f2:	465b      	mov	r3, fp
 80069f4:	4622      	mov	r2, r4
 80069f6:	4629      	mov	r1, r5
 80069f8:	4638      	mov	r0, r7
 80069fa:	f7ff ff6b 	bl	80068d4 <__ssputs_r>
 80069fe:	3001      	adds	r0, #1
 8006a00:	f000 80a7 	beq.w	8006b52 <_svfiprintf_r+0x1c6>
 8006a04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a06:	445a      	add	r2, fp
 8006a08:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 809f 	beq.w	8006b52 <_svfiprintf_r+0x1c6>
 8006a14:	2300      	movs	r3, #0
 8006a16:	f04f 32ff 	mov.w	r2, #4294967295
 8006a1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a1e:	f10a 0a01 	add.w	sl, sl, #1
 8006a22:	9304      	str	r3, [sp, #16]
 8006a24:	9307      	str	r3, [sp, #28]
 8006a26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a2c:	4654      	mov	r4, sl
 8006a2e:	2205      	movs	r2, #5
 8006a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a34:	484e      	ldr	r0, [pc, #312]	@ (8006b70 <_svfiprintf_r+0x1e4>)
 8006a36:	f7f9 fbe3 	bl	8000200 <memchr>
 8006a3a:	9a04      	ldr	r2, [sp, #16]
 8006a3c:	b9d8      	cbnz	r0, 8006a76 <_svfiprintf_r+0xea>
 8006a3e:	06d0      	lsls	r0, r2, #27
 8006a40:	bf44      	itt	mi
 8006a42:	2320      	movmi	r3, #32
 8006a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a48:	0711      	lsls	r1, r2, #28
 8006a4a:	bf44      	itt	mi
 8006a4c:	232b      	movmi	r3, #43	@ 0x2b
 8006a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a52:	f89a 3000 	ldrb.w	r3, [sl]
 8006a56:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a58:	d015      	beq.n	8006a86 <_svfiprintf_r+0xfa>
 8006a5a:	9a07      	ldr	r2, [sp, #28]
 8006a5c:	4654      	mov	r4, sl
 8006a5e:	2000      	movs	r0, #0
 8006a60:	f04f 0c0a 	mov.w	ip, #10
 8006a64:	4621      	mov	r1, r4
 8006a66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a6a:	3b30      	subs	r3, #48	@ 0x30
 8006a6c:	2b09      	cmp	r3, #9
 8006a6e:	d94b      	bls.n	8006b08 <_svfiprintf_r+0x17c>
 8006a70:	b1b0      	cbz	r0, 8006aa0 <_svfiprintf_r+0x114>
 8006a72:	9207      	str	r2, [sp, #28]
 8006a74:	e014      	b.n	8006aa0 <_svfiprintf_r+0x114>
 8006a76:	eba0 0308 	sub.w	r3, r0, r8
 8006a7a:	fa09 f303 	lsl.w	r3, r9, r3
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	9304      	str	r3, [sp, #16]
 8006a82:	46a2      	mov	sl, r4
 8006a84:	e7d2      	b.n	8006a2c <_svfiprintf_r+0xa0>
 8006a86:	9b03      	ldr	r3, [sp, #12]
 8006a88:	1d19      	adds	r1, r3, #4
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	9103      	str	r1, [sp, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	bfbb      	ittet	lt
 8006a92:	425b      	neglt	r3, r3
 8006a94:	f042 0202 	orrlt.w	r2, r2, #2
 8006a98:	9307      	strge	r3, [sp, #28]
 8006a9a:	9307      	strlt	r3, [sp, #28]
 8006a9c:	bfb8      	it	lt
 8006a9e:	9204      	strlt	r2, [sp, #16]
 8006aa0:	7823      	ldrb	r3, [r4, #0]
 8006aa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006aa4:	d10a      	bne.n	8006abc <_svfiprintf_r+0x130>
 8006aa6:	7863      	ldrb	r3, [r4, #1]
 8006aa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006aaa:	d132      	bne.n	8006b12 <_svfiprintf_r+0x186>
 8006aac:	9b03      	ldr	r3, [sp, #12]
 8006aae:	1d1a      	adds	r2, r3, #4
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	9203      	str	r2, [sp, #12]
 8006ab4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ab8:	3402      	adds	r4, #2
 8006aba:	9305      	str	r3, [sp, #20]
 8006abc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006b80 <_svfiprintf_r+0x1f4>
 8006ac0:	7821      	ldrb	r1, [r4, #0]
 8006ac2:	2203      	movs	r2, #3
 8006ac4:	4650      	mov	r0, sl
 8006ac6:	f7f9 fb9b 	bl	8000200 <memchr>
 8006aca:	b138      	cbz	r0, 8006adc <_svfiprintf_r+0x150>
 8006acc:	9b04      	ldr	r3, [sp, #16]
 8006ace:	eba0 000a 	sub.w	r0, r0, sl
 8006ad2:	2240      	movs	r2, #64	@ 0x40
 8006ad4:	4082      	lsls	r2, r0
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	3401      	adds	r4, #1
 8006ada:	9304      	str	r3, [sp, #16]
 8006adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ae0:	4824      	ldr	r0, [pc, #144]	@ (8006b74 <_svfiprintf_r+0x1e8>)
 8006ae2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ae6:	2206      	movs	r2, #6
 8006ae8:	f7f9 fb8a 	bl	8000200 <memchr>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d036      	beq.n	8006b5e <_svfiprintf_r+0x1d2>
 8006af0:	4b21      	ldr	r3, [pc, #132]	@ (8006b78 <_svfiprintf_r+0x1ec>)
 8006af2:	bb1b      	cbnz	r3, 8006b3c <_svfiprintf_r+0x1b0>
 8006af4:	9b03      	ldr	r3, [sp, #12]
 8006af6:	3307      	adds	r3, #7
 8006af8:	f023 0307 	bic.w	r3, r3, #7
 8006afc:	3308      	adds	r3, #8
 8006afe:	9303      	str	r3, [sp, #12]
 8006b00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b02:	4433      	add	r3, r6
 8006b04:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b06:	e76a      	b.n	80069de <_svfiprintf_r+0x52>
 8006b08:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b0c:	460c      	mov	r4, r1
 8006b0e:	2001      	movs	r0, #1
 8006b10:	e7a8      	b.n	8006a64 <_svfiprintf_r+0xd8>
 8006b12:	2300      	movs	r3, #0
 8006b14:	3401      	adds	r4, #1
 8006b16:	9305      	str	r3, [sp, #20]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	f04f 0c0a 	mov.w	ip, #10
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b24:	3a30      	subs	r2, #48	@ 0x30
 8006b26:	2a09      	cmp	r2, #9
 8006b28:	d903      	bls.n	8006b32 <_svfiprintf_r+0x1a6>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0c6      	beq.n	8006abc <_svfiprintf_r+0x130>
 8006b2e:	9105      	str	r1, [sp, #20]
 8006b30:	e7c4      	b.n	8006abc <_svfiprintf_r+0x130>
 8006b32:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b36:	4604      	mov	r4, r0
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e7f0      	b.n	8006b1e <_svfiprintf_r+0x192>
 8006b3c:	ab03      	add	r3, sp, #12
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	462a      	mov	r2, r5
 8006b42:	4b0e      	ldr	r3, [pc, #56]	@ (8006b7c <_svfiprintf_r+0x1f0>)
 8006b44:	a904      	add	r1, sp, #16
 8006b46:	4638      	mov	r0, r7
 8006b48:	f3af 8000 	nop.w
 8006b4c:	1c42      	adds	r2, r0, #1
 8006b4e:	4606      	mov	r6, r0
 8006b50:	d1d6      	bne.n	8006b00 <_svfiprintf_r+0x174>
 8006b52:	89ab      	ldrh	r3, [r5, #12]
 8006b54:	065b      	lsls	r3, r3, #25
 8006b56:	f53f af2d 	bmi.w	80069b4 <_svfiprintf_r+0x28>
 8006b5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b5c:	e72c      	b.n	80069b8 <_svfiprintf_r+0x2c>
 8006b5e:	ab03      	add	r3, sp, #12
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	462a      	mov	r2, r5
 8006b64:	4b05      	ldr	r3, [pc, #20]	@ (8006b7c <_svfiprintf_r+0x1f0>)
 8006b66:	a904      	add	r1, sp, #16
 8006b68:	4638      	mov	r0, r7
 8006b6a:	f000 f879 	bl	8006c60 <_printf_i>
 8006b6e:	e7ed      	b.n	8006b4c <_svfiprintf_r+0x1c0>
 8006b70:	08009128 	.word	0x08009128
 8006b74:	08009132 	.word	0x08009132
 8006b78:	00000000 	.word	0x00000000
 8006b7c:	080068d5 	.word	0x080068d5
 8006b80:	0800912e 	.word	0x0800912e

08006b84 <_printf_common>:
 8006b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b88:	4616      	mov	r6, r2
 8006b8a:	4698      	mov	r8, r3
 8006b8c:	688a      	ldr	r2, [r1, #8]
 8006b8e:	690b      	ldr	r3, [r1, #16]
 8006b90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b94:	4293      	cmp	r3, r2
 8006b96:	bfb8      	it	lt
 8006b98:	4613      	movlt	r3, r2
 8006b9a:	6033      	str	r3, [r6, #0]
 8006b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ba0:	4607      	mov	r7, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	b10a      	cbz	r2, 8006baa <_printf_common+0x26>
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	6033      	str	r3, [r6, #0]
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	0699      	lsls	r1, r3, #26
 8006bae:	bf42      	ittt	mi
 8006bb0:	6833      	ldrmi	r3, [r6, #0]
 8006bb2:	3302      	addmi	r3, #2
 8006bb4:	6033      	strmi	r3, [r6, #0]
 8006bb6:	6825      	ldr	r5, [r4, #0]
 8006bb8:	f015 0506 	ands.w	r5, r5, #6
 8006bbc:	d106      	bne.n	8006bcc <_printf_common+0x48>
 8006bbe:	f104 0a19 	add.w	sl, r4, #25
 8006bc2:	68e3      	ldr	r3, [r4, #12]
 8006bc4:	6832      	ldr	r2, [r6, #0]
 8006bc6:	1a9b      	subs	r3, r3, r2
 8006bc8:	42ab      	cmp	r3, r5
 8006bca:	dc26      	bgt.n	8006c1a <_printf_common+0x96>
 8006bcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006bd0:	6822      	ldr	r2, [r4, #0]
 8006bd2:	3b00      	subs	r3, #0
 8006bd4:	bf18      	it	ne
 8006bd6:	2301      	movne	r3, #1
 8006bd8:	0692      	lsls	r2, r2, #26
 8006bda:	d42b      	bmi.n	8006c34 <_printf_common+0xb0>
 8006bdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006be0:	4641      	mov	r1, r8
 8006be2:	4638      	mov	r0, r7
 8006be4:	47c8      	blx	r9
 8006be6:	3001      	adds	r0, #1
 8006be8:	d01e      	beq.n	8006c28 <_printf_common+0xa4>
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	6922      	ldr	r2, [r4, #16]
 8006bee:	f003 0306 	and.w	r3, r3, #6
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	bf02      	ittt	eq
 8006bf6:	68e5      	ldreq	r5, [r4, #12]
 8006bf8:	6833      	ldreq	r3, [r6, #0]
 8006bfa:	1aed      	subeq	r5, r5, r3
 8006bfc:	68a3      	ldr	r3, [r4, #8]
 8006bfe:	bf0c      	ite	eq
 8006c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c04:	2500      	movne	r5, #0
 8006c06:	4293      	cmp	r3, r2
 8006c08:	bfc4      	itt	gt
 8006c0a:	1a9b      	subgt	r3, r3, r2
 8006c0c:	18ed      	addgt	r5, r5, r3
 8006c0e:	2600      	movs	r6, #0
 8006c10:	341a      	adds	r4, #26
 8006c12:	42b5      	cmp	r5, r6
 8006c14:	d11a      	bne.n	8006c4c <_printf_common+0xc8>
 8006c16:	2000      	movs	r0, #0
 8006c18:	e008      	b.n	8006c2c <_printf_common+0xa8>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	4652      	mov	r2, sl
 8006c1e:	4641      	mov	r1, r8
 8006c20:	4638      	mov	r0, r7
 8006c22:	47c8      	blx	r9
 8006c24:	3001      	adds	r0, #1
 8006c26:	d103      	bne.n	8006c30 <_printf_common+0xac>
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c30:	3501      	adds	r5, #1
 8006c32:	e7c6      	b.n	8006bc2 <_printf_common+0x3e>
 8006c34:	18e1      	adds	r1, r4, r3
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	2030      	movs	r0, #48	@ 0x30
 8006c3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c3e:	4422      	add	r2, r4
 8006c40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c48:	3302      	adds	r3, #2
 8006c4a:	e7c7      	b.n	8006bdc <_printf_common+0x58>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	4622      	mov	r2, r4
 8006c50:	4641      	mov	r1, r8
 8006c52:	4638      	mov	r0, r7
 8006c54:	47c8      	blx	r9
 8006c56:	3001      	adds	r0, #1
 8006c58:	d0e6      	beq.n	8006c28 <_printf_common+0xa4>
 8006c5a:	3601      	adds	r6, #1
 8006c5c:	e7d9      	b.n	8006c12 <_printf_common+0x8e>
	...

08006c60 <_printf_i>:
 8006c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c64:	7e0f      	ldrb	r7, [r1, #24]
 8006c66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c68:	2f78      	cmp	r7, #120	@ 0x78
 8006c6a:	4691      	mov	r9, r2
 8006c6c:	4680      	mov	r8, r0
 8006c6e:	460c      	mov	r4, r1
 8006c70:	469a      	mov	sl, r3
 8006c72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c76:	d807      	bhi.n	8006c88 <_printf_i+0x28>
 8006c78:	2f62      	cmp	r7, #98	@ 0x62
 8006c7a:	d80a      	bhi.n	8006c92 <_printf_i+0x32>
 8006c7c:	2f00      	cmp	r7, #0
 8006c7e:	f000 80d2 	beq.w	8006e26 <_printf_i+0x1c6>
 8006c82:	2f58      	cmp	r7, #88	@ 0x58
 8006c84:	f000 80b9 	beq.w	8006dfa <_printf_i+0x19a>
 8006c88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c90:	e03a      	b.n	8006d08 <_printf_i+0xa8>
 8006c92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c96:	2b15      	cmp	r3, #21
 8006c98:	d8f6      	bhi.n	8006c88 <_printf_i+0x28>
 8006c9a:	a101      	add	r1, pc, #4	@ (adr r1, 8006ca0 <_printf_i+0x40>)
 8006c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ca0:	08006cf9 	.word	0x08006cf9
 8006ca4:	08006d0d 	.word	0x08006d0d
 8006ca8:	08006c89 	.word	0x08006c89
 8006cac:	08006c89 	.word	0x08006c89
 8006cb0:	08006c89 	.word	0x08006c89
 8006cb4:	08006c89 	.word	0x08006c89
 8006cb8:	08006d0d 	.word	0x08006d0d
 8006cbc:	08006c89 	.word	0x08006c89
 8006cc0:	08006c89 	.word	0x08006c89
 8006cc4:	08006c89 	.word	0x08006c89
 8006cc8:	08006c89 	.word	0x08006c89
 8006ccc:	08006e0d 	.word	0x08006e0d
 8006cd0:	08006d37 	.word	0x08006d37
 8006cd4:	08006dc7 	.word	0x08006dc7
 8006cd8:	08006c89 	.word	0x08006c89
 8006cdc:	08006c89 	.word	0x08006c89
 8006ce0:	08006e2f 	.word	0x08006e2f
 8006ce4:	08006c89 	.word	0x08006c89
 8006ce8:	08006d37 	.word	0x08006d37
 8006cec:	08006c89 	.word	0x08006c89
 8006cf0:	08006c89 	.word	0x08006c89
 8006cf4:	08006dcf 	.word	0x08006dcf
 8006cf8:	6833      	ldr	r3, [r6, #0]
 8006cfa:	1d1a      	adds	r2, r3, #4
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6032      	str	r2, [r6, #0]
 8006d00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e09d      	b.n	8006e48 <_printf_i+0x1e8>
 8006d0c:	6833      	ldr	r3, [r6, #0]
 8006d0e:	6820      	ldr	r0, [r4, #0]
 8006d10:	1d19      	adds	r1, r3, #4
 8006d12:	6031      	str	r1, [r6, #0]
 8006d14:	0606      	lsls	r6, r0, #24
 8006d16:	d501      	bpl.n	8006d1c <_printf_i+0xbc>
 8006d18:	681d      	ldr	r5, [r3, #0]
 8006d1a:	e003      	b.n	8006d24 <_printf_i+0xc4>
 8006d1c:	0645      	lsls	r5, r0, #25
 8006d1e:	d5fb      	bpl.n	8006d18 <_printf_i+0xb8>
 8006d20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d24:	2d00      	cmp	r5, #0
 8006d26:	da03      	bge.n	8006d30 <_printf_i+0xd0>
 8006d28:	232d      	movs	r3, #45	@ 0x2d
 8006d2a:	426d      	negs	r5, r5
 8006d2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d30:	4859      	ldr	r0, [pc, #356]	@ (8006e98 <_printf_i+0x238>)
 8006d32:	230a      	movs	r3, #10
 8006d34:	e011      	b.n	8006d5a <_printf_i+0xfa>
 8006d36:	6821      	ldr	r1, [r4, #0]
 8006d38:	6833      	ldr	r3, [r6, #0]
 8006d3a:	0608      	lsls	r0, r1, #24
 8006d3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d40:	d402      	bmi.n	8006d48 <_printf_i+0xe8>
 8006d42:	0649      	lsls	r1, r1, #25
 8006d44:	bf48      	it	mi
 8006d46:	b2ad      	uxthmi	r5, r5
 8006d48:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d4a:	4853      	ldr	r0, [pc, #332]	@ (8006e98 <_printf_i+0x238>)
 8006d4c:	6033      	str	r3, [r6, #0]
 8006d4e:	bf14      	ite	ne
 8006d50:	230a      	movne	r3, #10
 8006d52:	2308      	moveq	r3, #8
 8006d54:	2100      	movs	r1, #0
 8006d56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d5a:	6866      	ldr	r6, [r4, #4]
 8006d5c:	60a6      	str	r6, [r4, #8]
 8006d5e:	2e00      	cmp	r6, #0
 8006d60:	bfa2      	ittt	ge
 8006d62:	6821      	ldrge	r1, [r4, #0]
 8006d64:	f021 0104 	bicge.w	r1, r1, #4
 8006d68:	6021      	strge	r1, [r4, #0]
 8006d6a:	b90d      	cbnz	r5, 8006d70 <_printf_i+0x110>
 8006d6c:	2e00      	cmp	r6, #0
 8006d6e:	d04b      	beq.n	8006e08 <_printf_i+0x1a8>
 8006d70:	4616      	mov	r6, r2
 8006d72:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d76:	fb03 5711 	mls	r7, r3, r1, r5
 8006d7a:	5dc7      	ldrb	r7, [r0, r7]
 8006d7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d80:	462f      	mov	r7, r5
 8006d82:	42bb      	cmp	r3, r7
 8006d84:	460d      	mov	r5, r1
 8006d86:	d9f4      	bls.n	8006d72 <_printf_i+0x112>
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d10b      	bne.n	8006da4 <_printf_i+0x144>
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	07df      	lsls	r7, r3, #31
 8006d90:	d508      	bpl.n	8006da4 <_printf_i+0x144>
 8006d92:	6923      	ldr	r3, [r4, #16]
 8006d94:	6861      	ldr	r1, [r4, #4]
 8006d96:	4299      	cmp	r1, r3
 8006d98:	bfde      	ittt	le
 8006d9a:	2330      	movle	r3, #48	@ 0x30
 8006d9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006da0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006da4:	1b92      	subs	r2, r2, r6
 8006da6:	6122      	str	r2, [r4, #16]
 8006da8:	f8cd a000 	str.w	sl, [sp]
 8006dac:	464b      	mov	r3, r9
 8006dae:	aa03      	add	r2, sp, #12
 8006db0:	4621      	mov	r1, r4
 8006db2:	4640      	mov	r0, r8
 8006db4:	f7ff fee6 	bl	8006b84 <_printf_common>
 8006db8:	3001      	adds	r0, #1
 8006dba:	d14a      	bne.n	8006e52 <_printf_i+0x1f2>
 8006dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc0:	b004      	add	sp, #16
 8006dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc6:	6823      	ldr	r3, [r4, #0]
 8006dc8:	f043 0320 	orr.w	r3, r3, #32
 8006dcc:	6023      	str	r3, [r4, #0]
 8006dce:	4833      	ldr	r0, [pc, #204]	@ (8006e9c <_printf_i+0x23c>)
 8006dd0:	2778      	movs	r7, #120	@ 0x78
 8006dd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	6831      	ldr	r1, [r6, #0]
 8006dda:	061f      	lsls	r7, r3, #24
 8006ddc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006de0:	d402      	bmi.n	8006de8 <_printf_i+0x188>
 8006de2:	065f      	lsls	r7, r3, #25
 8006de4:	bf48      	it	mi
 8006de6:	b2ad      	uxthmi	r5, r5
 8006de8:	6031      	str	r1, [r6, #0]
 8006dea:	07d9      	lsls	r1, r3, #31
 8006dec:	bf44      	itt	mi
 8006dee:	f043 0320 	orrmi.w	r3, r3, #32
 8006df2:	6023      	strmi	r3, [r4, #0]
 8006df4:	b11d      	cbz	r5, 8006dfe <_printf_i+0x19e>
 8006df6:	2310      	movs	r3, #16
 8006df8:	e7ac      	b.n	8006d54 <_printf_i+0xf4>
 8006dfa:	4827      	ldr	r0, [pc, #156]	@ (8006e98 <_printf_i+0x238>)
 8006dfc:	e7e9      	b.n	8006dd2 <_printf_i+0x172>
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	f023 0320 	bic.w	r3, r3, #32
 8006e04:	6023      	str	r3, [r4, #0]
 8006e06:	e7f6      	b.n	8006df6 <_printf_i+0x196>
 8006e08:	4616      	mov	r6, r2
 8006e0a:	e7bd      	b.n	8006d88 <_printf_i+0x128>
 8006e0c:	6833      	ldr	r3, [r6, #0]
 8006e0e:	6825      	ldr	r5, [r4, #0]
 8006e10:	6961      	ldr	r1, [r4, #20]
 8006e12:	1d18      	adds	r0, r3, #4
 8006e14:	6030      	str	r0, [r6, #0]
 8006e16:	062e      	lsls	r6, r5, #24
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	d501      	bpl.n	8006e20 <_printf_i+0x1c0>
 8006e1c:	6019      	str	r1, [r3, #0]
 8006e1e:	e002      	b.n	8006e26 <_printf_i+0x1c6>
 8006e20:	0668      	lsls	r0, r5, #25
 8006e22:	d5fb      	bpl.n	8006e1c <_printf_i+0x1bc>
 8006e24:	8019      	strh	r1, [r3, #0]
 8006e26:	2300      	movs	r3, #0
 8006e28:	6123      	str	r3, [r4, #16]
 8006e2a:	4616      	mov	r6, r2
 8006e2c:	e7bc      	b.n	8006da8 <_printf_i+0x148>
 8006e2e:	6833      	ldr	r3, [r6, #0]
 8006e30:	1d1a      	adds	r2, r3, #4
 8006e32:	6032      	str	r2, [r6, #0]
 8006e34:	681e      	ldr	r6, [r3, #0]
 8006e36:	6862      	ldr	r2, [r4, #4]
 8006e38:	2100      	movs	r1, #0
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	f7f9 f9e0 	bl	8000200 <memchr>
 8006e40:	b108      	cbz	r0, 8006e46 <_printf_i+0x1e6>
 8006e42:	1b80      	subs	r0, r0, r6
 8006e44:	6060      	str	r0, [r4, #4]
 8006e46:	6863      	ldr	r3, [r4, #4]
 8006e48:	6123      	str	r3, [r4, #16]
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e50:	e7aa      	b.n	8006da8 <_printf_i+0x148>
 8006e52:	6923      	ldr	r3, [r4, #16]
 8006e54:	4632      	mov	r2, r6
 8006e56:	4649      	mov	r1, r9
 8006e58:	4640      	mov	r0, r8
 8006e5a:	47d0      	blx	sl
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	d0ad      	beq.n	8006dbc <_printf_i+0x15c>
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	079b      	lsls	r3, r3, #30
 8006e64:	d413      	bmi.n	8006e8e <_printf_i+0x22e>
 8006e66:	68e0      	ldr	r0, [r4, #12]
 8006e68:	9b03      	ldr	r3, [sp, #12]
 8006e6a:	4298      	cmp	r0, r3
 8006e6c:	bfb8      	it	lt
 8006e6e:	4618      	movlt	r0, r3
 8006e70:	e7a6      	b.n	8006dc0 <_printf_i+0x160>
 8006e72:	2301      	movs	r3, #1
 8006e74:	4632      	mov	r2, r6
 8006e76:	4649      	mov	r1, r9
 8006e78:	4640      	mov	r0, r8
 8006e7a:	47d0      	blx	sl
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d09d      	beq.n	8006dbc <_printf_i+0x15c>
 8006e80:	3501      	adds	r5, #1
 8006e82:	68e3      	ldr	r3, [r4, #12]
 8006e84:	9903      	ldr	r1, [sp, #12]
 8006e86:	1a5b      	subs	r3, r3, r1
 8006e88:	42ab      	cmp	r3, r5
 8006e8a:	dcf2      	bgt.n	8006e72 <_printf_i+0x212>
 8006e8c:	e7eb      	b.n	8006e66 <_printf_i+0x206>
 8006e8e:	2500      	movs	r5, #0
 8006e90:	f104 0619 	add.w	r6, r4, #25
 8006e94:	e7f5      	b.n	8006e82 <_printf_i+0x222>
 8006e96:	bf00      	nop
 8006e98:	08009139 	.word	0x08009139
 8006e9c:	0800914a 	.word	0x0800914a

08006ea0 <memmove>:
 8006ea0:	4288      	cmp	r0, r1
 8006ea2:	b510      	push	{r4, lr}
 8006ea4:	eb01 0402 	add.w	r4, r1, r2
 8006ea8:	d902      	bls.n	8006eb0 <memmove+0x10>
 8006eaa:	4284      	cmp	r4, r0
 8006eac:	4623      	mov	r3, r4
 8006eae:	d807      	bhi.n	8006ec0 <memmove+0x20>
 8006eb0:	1e43      	subs	r3, r0, #1
 8006eb2:	42a1      	cmp	r1, r4
 8006eb4:	d008      	beq.n	8006ec8 <memmove+0x28>
 8006eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ebe:	e7f8      	b.n	8006eb2 <memmove+0x12>
 8006ec0:	4402      	add	r2, r0
 8006ec2:	4601      	mov	r1, r0
 8006ec4:	428a      	cmp	r2, r1
 8006ec6:	d100      	bne.n	8006eca <memmove+0x2a>
 8006ec8:	bd10      	pop	{r4, pc}
 8006eca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ece:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ed2:	e7f7      	b.n	8006ec4 <memmove+0x24>

08006ed4 <_sbrk_r>:
 8006ed4:	b538      	push	{r3, r4, r5, lr}
 8006ed6:	4d06      	ldr	r5, [pc, #24]	@ (8006ef0 <_sbrk_r+0x1c>)
 8006ed8:	2300      	movs	r3, #0
 8006eda:	4604      	mov	r4, r0
 8006edc:	4608      	mov	r0, r1
 8006ede:	602b      	str	r3, [r5, #0]
 8006ee0:	f7fa fc20 	bl	8001724 <_sbrk>
 8006ee4:	1c43      	adds	r3, r0, #1
 8006ee6:	d102      	bne.n	8006eee <_sbrk_r+0x1a>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	b103      	cbz	r3, 8006eee <_sbrk_r+0x1a>
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	bd38      	pop	{r3, r4, r5, pc}
 8006ef0:	200002d0 	.word	0x200002d0

08006ef4 <memcpy>:
 8006ef4:	440a      	add	r2, r1
 8006ef6:	4291      	cmp	r1, r2
 8006ef8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006efc:	d100      	bne.n	8006f00 <memcpy+0xc>
 8006efe:	4770      	bx	lr
 8006f00:	b510      	push	{r4, lr}
 8006f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f0a:	4291      	cmp	r1, r2
 8006f0c:	d1f9      	bne.n	8006f02 <memcpy+0xe>
 8006f0e:	bd10      	pop	{r4, pc}

08006f10 <_realloc_r>:
 8006f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f14:	4680      	mov	r8, r0
 8006f16:	4615      	mov	r5, r2
 8006f18:	460c      	mov	r4, r1
 8006f1a:	b921      	cbnz	r1, 8006f26 <_realloc_r+0x16>
 8006f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f20:	4611      	mov	r1, r2
 8006f22:	f7ff bc4b 	b.w	80067bc <_malloc_r>
 8006f26:	b92a      	cbnz	r2, 8006f34 <_realloc_r+0x24>
 8006f28:	f7ff fbdc 	bl	80066e4 <_free_r>
 8006f2c:	2400      	movs	r4, #0
 8006f2e:	4620      	mov	r0, r4
 8006f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f34:	f000 f81a 	bl	8006f6c <_malloc_usable_size_r>
 8006f38:	4285      	cmp	r5, r0
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	d802      	bhi.n	8006f44 <_realloc_r+0x34>
 8006f3e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006f42:	d8f4      	bhi.n	8006f2e <_realloc_r+0x1e>
 8006f44:	4629      	mov	r1, r5
 8006f46:	4640      	mov	r0, r8
 8006f48:	f7ff fc38 	bl	80067bc <_malloc_r>
 8006f4c:	4607      	mov	r7, r0
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	d0ec      	beq.n	8006f2c <_realloc_r+0x1c>
 8006f52:	42b5      	cmp	r5, r6
 8006f54:	462a      	mov	r2, r5
 8006f56:	4621      	mov	r1, r4
 8006f58:	bf28      	it	cs
 8006f5a:	4632      	movcs	r2, r6
 8006f5c:	f7ff ffca 	bl	8006ef4 <memcpy>
 8006f60:	4621      	mov	r1, r4
 8006f62:	4640      	mov	r0, r8
 8006f64:	f7ff fbbe 	bl	80066e4 <_free_r>
 8006f68:	463c      	mov	r4, r7
 8006f6a:	e7e0      	b.n	8006f2e <_realloc_r+0x1e>

08006f6c <_malloc_usable_size_r>:
 8006f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f70:	1f18      	subs	r0, r3, #4
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	bfbc      	itt	lt
 8006f76:	580b      	ldrlt	r3, [r1, r0]
 8006f78:	18c0      	addlt	r0, r0, r3
 8006f7a:	4770      	bx	lr

08006f7c <_init>:
 8006f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7e:	bf00      	nop
 8006f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f82:	bc08      	pop	{r3}
 8006f84:	469e      	mov	lr, r3
 8006f86:	4770      	bx	lr

08006f88 <_fini>:
 8006f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8a:	bf00      	nop
 8006f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f8e:	bc08      	pop	{r3}
 8006f90:	469e      	mov	lr, r3
 8006f92:	4770      	bx	lr
