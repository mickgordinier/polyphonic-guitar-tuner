
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c00  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000217c  08002dbc  08002dbc  00003dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f38  08004f38  0000602c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f38  08004f38  0000602c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f38  08004f38  0000602c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f38  08004f38  00005f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f3c  08004f3c  00005f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08004f40  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000002c  08004f6c  0000602c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08004f6c  000060b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008932  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019fb  00000000  00000000  0000e98e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  00010390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00028bd4  00000000  00000000  00010c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00009c1f  00000000  00000000  000397e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f8409  00000000  00000000  00043403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0013b80c  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000652  00000000  00000000  0013b84f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002080  00000000  00000000  0013bea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0013df24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000002c 	.word	0x2000002c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002da4 	.word	0x08002da4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000030 	.word	0x20000030
 80001f8:	08002da4 	.word	0x08002da4

080001fc <ILI9341_Select>:


#include "stm32l4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000200:	2200      	movs	r2, #0
 8000202:	2110      	movs	r1, #16
 8000204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000208:	f001 fa98 	bl	800173c <HAL_GPIO_WritePin>
}
 800020c:	bf00      	nop
 800020e:	bd80      	pop	{r7, pc}

08000210 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000214:	2201      	movs	r2, #1
 8000216:	2110      	movs	r1, #16
 8000218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800021c:	f001 fa8e 	bl	800173c <HAL_GPIO_WritePin>
}
 8000220:	bf00      	nop
 8000222:	bd80      	pop	{r7, pc}

08000224 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	2101      	movs	r1, #1
 800022c:	4806      	ldr	r0, [pc, #24]	@ (8000248 <ILI9341_Reset+0x24>)
 800022e:	f001 fa85 	bl	800173c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000232:	2005      	movs	r0, #5
 8000234:	f000 ffe6 	bl	8001204 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000238:	2201      	movs	r2, #1
 800023a:	2101      	movs	r1, #1
 800023c:	4802      	ldr	r0, [pc, #8]	@ (8000248 <ILI9341_Reset+0x24>)
 800023e:	f001 fa7d 	bl	800173c <HAL_GPIO_WritePin>
}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	48000400 	.word	0x48000400

0800024c <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	2102      	movs	r1, #2
 800025a:	4807      	ldr	r0, [pc, #28]	@ (8000278 <ILI9341_WriteCommand+0x2c>)
 800025c:	f001 fa6e 	bl	800173c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000260:	1df9      	adds	r1, r7, #7
 8000262:	f04f 33ff 	mov.w	r3, #4294967295
 8000266:	2201      	movs	r2, #1
 8000268:	4804      	ldr	r0, [pc, #16]	@ (800027c <ILI9341_WriteCommand+0x30>)
 800026a:	f002 fa96 	bl	800279a <HAL_SPI_Transmit>

}
 800026e:	bf00      	nop
 8000270:	3708      	adds	r7, #8
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	48000400 	.word	0x48000400
 800027c:	20000048 	.word	0x20000048

08000280 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800028a:	2201      	movs	r2, #1
 800028c:	2102      	movs	r1, #2
 800028e:	4811      	ldr	r0, [pc, #68]	@ (80002d4 <ILI9341_WriteData+0x54>)
 8000290:	f001 fa54 	bl	800173c <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000294:	e015      	b.n	80002c2 <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800029c:	bf28      	it	cs
 800029e:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80002a2:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80002a4:	89fa      	ldrh	r2, [r7, #14]
 80002a6:	f04f 33ff 	mov.w	r3, #4294967295
 80002aa:	6879      	ldr	r1, [r7, #4]
 80002ac:	480a      	ldr	r0, [pc, #40]	@ (80002d8 <ILI9341_WriteData+0x58>)
 80002ae:	f002 fa74 	bl	800279a <HAL_SPI_Transmit>

        buff += chunk_size;
 80002b2:	89fb      	ldrh	r3, [r7, #14]
 80002b4:	687a      	ldr	r2, [r7, #4]
 80002b6:	4413      	add	r3, r2
 80002b8:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 80002ba:	89fb      	ldrh	r3, [r7, #14]
 80002bc:	683a      	ldr	r2, [r7, #0]
 80002be:	1ad3      	subs	r3, r2, r3
 80002c0:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d1e6      	bne.n	8000296 <ILI9341_WriteData+0x16>
    }
}
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	48000400 	.word	0x48000400
 80002d8:	20000048 	.word	0x20000048

080002dc <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4604      	mov	r4, r0
 80002e4:	4608      	mov	r0, r1
 80002e6:	4611      	mov	r1, r2
 80002e8:	461a      	mov	r2, r3
 80002ea:	4623      	mov	r3, r4
 80002ec:	80fb      	strh	r3, [r7, #6]
 80002ee:	4603      	mov	r3, r0
 80002f0:	80bb      	strh	r3, [r7, #4]
 80002f2:	460b      	mov	r3, r1
 80002f4:	807b      	strh	r3, [r7, #2]
 80002f6:	4613      	mov	r3, r2
 80002f8:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 80002fa:	202a      	movs	r0, #42	@ 0x2a
 80002fc:	f7ff ffa6 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000300:	88fb      	ldrh	r3, [r7, #6]
 8000302:	0a1b      	lsrs	r3, r3, #8
 8000304:	b29b      	uxth	r3, r3
 8000306:	b2db      	uxtb	r3, r3
 8000308:	733b      	strb	r3, [r7, #12]
 800030a:	88fb      	ldrh	r3, [r7, #6]
 800030c:	b2db      	uxtb	r3, r3
 800030e:	737b      	strb	r3, [r7, #13]
 8000310:	887b      	ldrh	r3, [r7, #2]
 8000312:	0a1b      	lsrs	r3, r3, #8
 8000314:	b29b      	uxth	r3, r3
 8000316:	b2db      	uxtb	r3, r3
 8000318:	73bb      	strb	r3, [r7, #14]
 800031a:	887b      	ldrh	r3, [r7, #2]
 800031c:	b2db      	uxtb	r3, r3
 800031e:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8000320:	f107 030c 	add.w	r3, r7, #12
 8000324:	2104      	movs	r1, #4
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ffaa 	bl	8000280 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 800032c:	202b      	movs	r0, #43	@ 0x2b
 800032e:	f7ff ff8d 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000332:	88bb      	ldrh	r3, [r7, #4]
 8000334:	0a1b      	lsrs	r3, r3, #8
 8000336:	b29b      	uxth	r3, r3
 8000338:	b2db      	uxtb	r3, r3
 800033a:	723b      	strb	r3, [r7, #8]
 800033c:	88bb      	ldrh	r3, [r7, #4]
 800033e:	b2db      	uxtb	r3, r3
 8000340:	727b      	strb	r3, [r7, #9]
 8000342:	883b      	ldrh	r3, [r7, #0]
 8000344:	0a1b      	lsrs	r3, r3, #8
 8000346:	b29b      	uxth	r3, r3
 8000348:	b2db      	uxtb	r3, r3
 800034a:	72bb      	strb	r3, [r7, #10]
 800034c:	883b      	ldrh	r3, [r7, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	2104      	movs	r1, #4
 8000358:	4618      	mov	r0, r3
 800035a:	f7ff ff91 	bl	8000280 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800035e:	202c      	movs	r0, #44	@ 0x2c
 8000360:	f7ff ff74 	bl	800024c <ILI9341_WriteCommand>
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bd90      	pop	{r4, r7, pc}

0800036c <ILI9341_Init>:

void ILI9341_Init() {
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b09b      	sub	sp, #108	@ 0x6c
 8000370:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000372:	f7ff ff43 	bl	80001fc <ILI9341_Select>
    ILI9341_Reset();
 8000376:	f7ff ff55 	bl	8000224 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 800037a:	2001      	movs	r0, #1
 800037c:	f7ff ff66 	bl	800024c <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000380:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000384:	f000 ff3e 	bl	8001204 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000388:	20cb      	movs	r0, #203	@ 0xcb
 800038a:	f7ff ff5f 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800038e:	4a87      	ldr	r2, [pc, #540]	@ (80005ac <ILI9341_Init+0x240>)
 8000390:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000394:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000398:	6018      	str	r0, [r3, #0]
 800039a:	3304      	adds	r3, #4
 800039c:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800039e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80003a2:	2105      	movs	r1, #5
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff6b 	bl	8000280 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80003aa:	20cf      	movs	r0, #207	@ 0xcf
 80003ac:	f7ff ff4e 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80003b0:	4a7f      	ldr	r2, [pc, #508]	@ (80005b0 <ILI9341_Init+0x244>)
 80003b2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003b6:	6812      	ldr	r2, [r2, #0]
 80003b8:	4611      	mov	r1, r2
 80003ba:	8019      	strh	r1, [r3, #0]
 80003bc:	3302      	adds	r3, #2
 80003be:	0c12      	lsrs	r2, r2, #16
 80003c0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80003c2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003c6:	2103      	movs	r1, #3
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff ff59 	bl	8000280 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80003ce:	20e8      	movs	r0, #232	@ 0xe8
 80003d0:	f7ff ff3c 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80003d4:	4a77      	ldr	r2, [pc, #476]	@ (80005b4 <ILI9341_Init+0x248>)
 80003d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80003da:	6812      	ldr	r2, [r2, #0]
 80003dc:	4611      	mov	r1, r2
 80003de:	8019      	strh	r1, [r3, #0]
 80003e0:	3302      	adds	r3, #2
 80003e2:	0c12      	lsrs	r2, r2, #16
 80003e4:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80003e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80003ea:	2103      	movs	r1, #3
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff47 	bl	8000280 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 80003f2:	20ea      	movs	r0, #234	@ 0xea
 80003f4:	f7ff ff2a 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 80003f8:	2300      	movs	r3, #0
 80003fa:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 80003fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000402:	2102      	movs	r1, #2
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff3b 	bl	8000280 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800040a:	20ed      	movs	r0, #237	@ 0xed
 800040c:	f7ff ff1e 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000410:	4b69      	ldr	r3, [pc, #420]	@ (80005b8 <ILI9341_Init+0x24c>)
 8000412:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8000414:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000418:	2104      	movs	r1, #4
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff30 	bl	8000280 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8000420:	20f7      	movs	r0, #247	@ 0xf7
 8000422:	f7ff ff13 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8000426:	2320      	movs	r3, #32
 8000428:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 800042c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000430:	2101      	movs	r1, #1
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff ff24 	bl	8000280 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8000438:	20c0      	movs	r0, #192	@ 0xc0
 800043a:	f7ff ff07 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800043e:	2323      	movs	r3, #35	@ 0x23
 8000440:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 8000444:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000448:	2101      	movs	r1, #1
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ff18 	bl	8000280 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8000450:	20c1      	movs	r0, #193	@ 0xc1
 8000452:	f7ff fefb 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8000456:	2310      	movs	r3, #16
 8000458:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 800045c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000460:	2101      	movs	r1, #1
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff0c 	bl	8000280 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8000468:	20c5      	movs	r0, #197	@ 0xc5
 800046a:	f7ff feef 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 800046e:	f642 033e 	movw	r3, #10302	@ 0x283e
 8000472:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 8000476:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800047a:	2102      	movs	r1, #2
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff feff 	bl	8000280 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8000482:	20c7      	movs	r0, #199	@ 0xc7
 8000484:	f7ff fee2 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000488:	2386      	movs	r3, #134	@ 0x86
 800048a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 800048e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000492:	2101      	movs	r1, #1
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff fef3 	bl	8000280 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 800049a:	2036      	movs	r0, #54	@ 0x36
 800049c:	f7ff fed6 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80004a0:	2348      	movs	r3, #72	@ 0x48
 80004a2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 80004a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80004aa:	2101      	movs	r1, #1
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff fee7 	bl	8000280 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80004b2:	203a      	movs	r0, #58	@ 0x3a
 80004b4:	f7ff feca 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80004b8:	2355      	movs	r3, #85	@ 0x55
 80004ba:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 80004be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80004c2:	2101      	movs	r1, #1
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fedb 	bl	8000280 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80004ca:	20b1      	movs	r0, #177	@ 0xb1
 80004cc:	f7ff febe 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80004d0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80004d4:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 80004d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004da:	2102      	movs	r1, #2
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff fecf 	bl	8000280 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80004e2:	20b6      	movs	r0, #182	@ 0xb6
 80004e4:	f7ff feb2 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80004e8:	4a34      	ldr	r2, [pc, #208]	@ (80005bc <ILI9341_Init+0x250>)
 80004ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80004ee:	6812      	ldr	r2, [r2, #0]
 80004f0:	4611      	mov	r1, r2
 80004f2:	8019      	strh	r1, [r3, #0]
 80004f4:	3302      	adds	r3, #2
 80004f6:	0c12      	lsrs	r2, r2, #16
 80004f8:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80004fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80004fe:	2103      	movs	r1, #3
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff febd 	bl	8000280 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8000506:	20f2      	movs	r0, #242	@ 0xf2
 8000508:	f7ff fea0 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 800050c:	2300      	movs	r3, #0
 800050e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 8000512:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000516:	2101      	movs	r1, #1
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff feb1 	bl	8000280 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 800051e:	2026      	movs	r0, #38	@ 0x26
 8000520:	f7ff fe94 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8000524:	2301      	movs	r3, #1
 8000526:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 800052a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800052e:	2101      	movs	r1, #1
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff fea5 	bl	8000280 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8000536:	20e0      	movs	r0, #224	@ 0xe0
 8000538:	f7ff fe88 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 800053c:	4b20      	ldr	r3, [pc, #128]	@ (80005c0 <ILI9341_Init+0x254>)
 800053e:	f107 0414 	add.w	r4, r7, #20
 8000542:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000544:	c407      	stmia	r4!, {r0, r1, r2}
 8000546:	8023      	strh	r3, [r4, #0]
 8000548:	3402      	adds	r4, #2
 800054a:	0c1b      	lsrs	r3, r3, #16
 800054c:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	210f      	movs	r1, #15
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff fe93 	bl	8000280 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 800055a:	20e1      	movs	r0, #225	@ 0xe1
 800055c:	f7ff fe76 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000560:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <ILI9341_Init+0x258>)
 8000562:	1d3c      	adds	r4, r7, #4
 8000564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000566:	c407      	stmia	r4!, {r0, r1, r2}
 8000568:	8023      	strh	r3, [r4, #0]
 800056a:	3402      	adds	r4, #2
 800056c:	0c1b      	lsrs	r3, r3, #16
 800056e:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	210f      	movs	r1, #15
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff fe83 	bl	8000280 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800057a:	2011      	movs	r0, #17
 800057c:	f7ff fe66 	bl	800024c <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000580:	2078      	movs	r0, #120	@ 0x78
 8000582:	f000 fe3f 	bl	8001204 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8000586:	2029      	movs	r0, #41	@ 0x29
 8000588:	f7ff fe60 	bl	800024c <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 800058c:	2036      	movs	r0, #54	@ 0x36
 800058e:	f7ff fe5d 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8000592:	2348      	movs	r3, #72	@ 0x48
 8000594:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000596:	463b      	mov	r3, r7
 8000598:	2101      	movs	r1, #1
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fe70 	bl	8000280 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80005a0:	f7ff fe36 	bl	8000210 <ILI9341_Unselect>
}
 80005a4:	bf00      	nop
 80005a6:	376c      	adds	r7, #108	@ 0x6c
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd90      	pop	{r4, r7, pc}
 80005ac:	08002dbc 	.word	0x08002dbc
 80005b0:	08002dc4 	.word	0x08002dc4
 80005b4:	08002dc8 	.word	0x08002dc8
 80005b8:	81120364 	.word	0x81120364
 80005bc:	08002dcc 	.word	0x08002dcc
 80005c0:	08002dd0 	.word	0x08002dd0
 80005c4:	08002de0 	.word	0x08002de0

080005c8 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80005c8:	b082      	sub	sp, #8
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b088      	sub	sp, #32
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
 80005d6:	460b      	mov	r3, r1
 80005d8:	80bb      	strh	r3, [r7, #4]
 80005da:	4613      	mov	r3, r2
 80005dc:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80005de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80005e2:	461a      	mov	r2, r3
 80005e4:	88fb      	ldrh	r3, [r7, #6]
 80005e6:	4413      	add	r3, r2
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	3b01      	subs	r3, #1
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80005f2:	4619      	mov	r1, r3
 80005f4:	88bb      	ldrh	r3, [r7, #4]
 80005f6:	440b      	add	r3, r1
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	3b01      	subs	r3, #1
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	88b9      	ldrh	r1, [r7, #4]
 8000600:	88f8      	ldrh	r0, [r7, #6]
 8000602:	f7ff fe6b 	bl	80002dc <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
 800060a:	e041      	b.n	8000690 <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 800060c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800060e:	78fb      	ldrb	r3, [r7, #3]
 8000610:	3b20      	subs	r3, #32
 8000612:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8000616:	fb01 f303 	mul.w	r3, r1, r3
 800061a:	4619      	mov	r1, r3
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	440b      	add	r3, r1
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	4413      	add	r3, r2
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
 800062c:	e027      	b.n	800067e <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 800062e:	697a      	ldr	r2, [r7, #20]
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	fa02 f303 	lsl.w	r3, r2, r3
 8000636:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800063a:	2b00      	cmp	r3, #0
 800063c:	d00e      	beq.n	800065c <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800063e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	b29b      	uxth	r3, r3
 8000644:	b2db      	uxtb	r3, r3
 8000646:	743b      	strb	r3, [r7, #16]
 8000648:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800064a:	b2db      	uxtb	r3, r3
 800064c:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	2102      	movs	r1, #2
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fe13 	bl	8000280 <ILI9341_WriteData>
 800065a:	e00d      	b.n	8000678 <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800065c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800065e:	0a1b      	lsrs	r3, r3, #8
 8000660:	b29b      	uxth	r3, r3
 8000662:	b2db      	uxtb	r3, r3
 8000664:	733b      	strb	r3, [r7, #12]
 8000666:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000668:	b2db      	uxtb	r3, r3
 800066a:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2102      	movs	r1, #2
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff fe04 	bl	8000280 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	3301      	adds	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
 800067e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000682:	461a      	mov	r2, r3
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	4293      	cmp	r3, r2
 8000688:	d3d1      	bcc.n	800062e <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	3301      	adds	r3, #1
 800068e:	61fb      	str	r3, [r7, #28]
 8000690:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000694:	461a      	mov	r2, r3
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	4293      	cmp	r3, r2
 800069a:	d3b7      	bcc.n	800060c <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	3720      	adds	r7, #32
 80006a2:	46bd      	mov	sp, r7
 80006a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006a8:	b002      	add	sp, #8
 80006aa:	4770      	bx	lr

080006ac <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80006ac:	b082      	sub	sp, #8
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b086      	sub	sp, #24
 80006b2:	af04      	add	r7, sp, #16
 80006b4:	603a      	str	r2, [r7, #0]
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	4603      	mov	r3, r0
 80006ba:	80fb      	strh	r3, [r7, #6]
 80006bc:	460b      	mov	r3, r1
 80006be:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 80006c0:	f7ff fd9c 	bl	80001fc <ILI9341_Select>

    while(*str) {
 80006c4:	e02e      	b.n	8000724 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	7d3a      	ldrb	r2, [r7, #20]
 80006ca:	4413      	add	r3, r2
 80006cc:	2bef      	cmp	r3, #239	@ 0xef
 80006ce:	dd14      	ble.n	80006fa <ILI9341_WriteString+0x4e>
            x = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80006d4:	7d7b      	ldrb	r3, [r7, #21]
 80006d6:	461a      	mov	r2, r3
 80006d8:	88bb      	ldrh	r3, [r7, #4]
 80006da:	4413      	add	r3, r2
 80006dc:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 80006de:	88bb      	ldrh	r3, [r7, #4]
 80006e0:	7d7a      	ldrb	r2, [r7, #21]
 80006e2:	4413      	add	r3, r2
 80006e4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80006e8:	da21      	bge.n	800072e <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b20      	cmp	r3, #32
 80006f0:	d103      	bne.n	80006fa <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	3301      	adds	r3, #1
 80006f6:	603b      	str	r3, [r7, #0]
                continue;
 80006f8:	e014      	b.n	8000724 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	781a      	ldrb	r2, [r3, #0]
 80006fe:	88b9      	ldrh	r1, [r7, #4]
 8000700:	88f8      	ldrh	r0, [r7, #6]
 8000702:	8c3b      	ldrh	r3, [r7, #32]
 8000704:	9302      	str	r3, [sp, #8]
 8000706:	8bbb      	ldrh	r3, [r7, #28]
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	f7ff ff5a 	bl	80005c8 <ILI9341_WriteChar>
        x += font.width;
 8000714:	7d3b      	ldrb	r3, [r7, #20]
 8000716:	461a      	mov	r2, r3
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	4413      	add	r3, r2
 800071c:	80fb      	strh	r3, [r7, #6]
        str++;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1cc      	bne.n	80006c6 <ILI9341_WriteString+0x1a>
 800072c:	e000      	b.n	8000730 <ILI9341_WriteString+0x84>
                break;
 800072e:	bf00      	nop
    }

    ILI9341_Unselect();
 8000730:	f7ff fd6e 	bl	8000210 <ILI9341_Unselect>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800073e:	b002      	add	sp, #8
 8000740:	4770      	bx	lr
	...

08000744 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	4604      	mov	r4, r0
 800074c:	4608      	mov	r0, r1
 800074e:	4611      	mov	r1, r2
 8000750:	461a      	mov	r2, r3
 8000752:	4623      	mov	r3, r4
 8000754:	80fb      	strh	r3, [r7, #6]
 8000756:	4603      	mov	r3, r0
 8000758:	80bb      	strh	r3, [r7, #4]
 800075a:	460b      	mov	r3, r1
 800075c:	807b      	strh	r3, [r7, #2]
 800075e:	4613      	mov	r3, r2
 8000760:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	2bef      	cmp	r3, #239	@ 0xef
 8000766:	d853      	bhi.n	8000810 <ILI9341_FillRectangle+0xcc>
 8000768:	88bb      	ldrh	r3, [r7, #4]
 800076a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800076e:	d24f      	bcs.n	8000810 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000770:	88fa      	ldrh	r2, [r7, #6]
 8000772:	887b      	ldrh	r3, [r7, #2]
 8000774:	4413      	add	r3, r2
 8000776:	2bf0      	cmp	r3, #240	@ 0xf0
 8000778:	dd03      	ble.n	8000782 <ILI9341_FillRectangle+0x3e>
 800077a:	88fb      	ldrh	r3, [r7, #6]
 800077c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000780:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000782:	88ba      	ldrh	r2, [r7, #4]
 8000784:	883b      	ldrh	r3, [r7, #0]
 8000786:	4413      	add	r3, r2
 8000788:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800078c:	dd03      	ble.n	8000796 <ILI9341_FillRectangle+0x52>
 800078e:	88bb      	ldrh	r3, [r7, #4]
 8000790:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000794:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8000796:	f7ff fd31 	bl	80001fc <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 800079a:	88fa      	ldrh	r2, [r7, #6]
 800079c:	887b      	ldrh	r3, [r7, #2]
 800079e:	4413      	add	r3, r2
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	3b01      	subs	r3, #1
 80007a4:	b29c      	uxth	r4, r3
 80007a6:	88ba      	ldrh	r2, [r7, #4]
 80007a8:	883b      	ldrh	r3, [r7, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	3b01      	subs	r3, #1
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	88b9      	ldrh	r1, [r7, #4]
 80007b4:	88f8      	ldrh	r0, [r7, #6]
 80007b6:	4622      	mov	r2, r4
 80007b8:	f7ff fd90 	bl	80002dc <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80007bc:	8c3b      	ldrh	r3, [r7, #32]
 80007be:	0a1b      	lsrs	r3, r3, #8
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	733b      	strb	r3, [r7, #12]
 80007c6:	8c3b      	ldrh	r3, [r7, #32]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2102      	movs	r1, #2
 80007d0:	4811      	ldr	r0, [pc, #68]	@ (8000818 <ILI9341_FillRectangle+0xd4>)
 80007d2:	f000 ffb3 	bl	800173c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80007d6:	883b      	ldrh	r3, [r7, #0]
 80007d8:	80bb      	strh	r3, [r7, #4]
 80007da:	e013      	b.n	8000804 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 80007dc:	887b      	ldrh	r3, [r7, #2]
 80007de:	80fb      	strh	r3, [r7, #6]
 80007e0:	e00a      	b.n	80007f8 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80007e2:	f107 010c 	add.w	r1, r7, #12
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	2202      	movs	r2, #2
 80007ec:	480b      	ldr	r0, [pc, #44]	@ (800081c <ILI9341_FillRectangle+0xd8>)
 80007ee:	f001 ffd4 	bl	800279a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	80fb      	strh	r3, [r7, #6]
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1f1      	bne.n	80007e2 <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 80007fe:	88bb      	ldrh	r3, [r7, #4]
 8000800:	3b01      	subs	r3, #1
 8000802:	80bb      	strh	r3, [r7, #4]
 8000804:	88bb      	ldrh	r3, [r7, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1e8      	bne.n	80007dc <ILI9341_FillRectangle+0x98>

        }
    }

    ILI9341_Unselect();
 800080a:	f7ff fd01 	bl	8000210 <ILI9341_Unselect>
 800080e:	e000      	b.n	8000812 <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000810:	bf00      	nop
}
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	bd90      	pop	{r4, r7, pc}
 8000818:	48000400 	.word	0x48000400
 800081c:	20000048 	.word	0x20000048

08000820 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af02      	add	r7, sp, #8
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000832:	22f0      	movs	r2, #240	@ 0xf0
 8000834:	2100      	movs	r1, #0
 8000836:	2000      	movs	r0, #0
 8000838:	f7ff ff84 	bl	8000744 <ILI9341_FillRectangle>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800084e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000852:	f000 ff73 	bl	800173c <HAL_GPIO_WritePin>
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}

0800085a <init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init() {
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
	ILI9341_Unselect();
 800085e:	f7ff fcd7 	bl	8000210 <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 8000862:	f7ff ffef 	bl	8000844 <ILI9341_TouchUnselect>
	ILI9341_Init();
 8000866:	f7ff fd81 	bl	800036c <ILI9341_Init>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000876:	f000 fc50 	bl	800111a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087a:	f000 f8a3 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087e:	f000 f925 	bl	8000acc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000882:	f000 f8e5 	bl	8000a50 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  init();
 8000886:	f7ff ffe8 	bl	800085a <init>
  ILI9341_FillScreen(ILI9341_BLACK);
 800088a:	2000      	movs	r0, #0
 800088c:	f7ff ffc8 	bl	8000820 <ILI9341_FillScreen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	while (!start) {
 8000890:	e01b      	b.n	80008ca <main+0x5a>
		ILI9341_WriteString(55, 30, "PUSH BUTTON", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8000892:	4b41      	ldr	r3, [pc, #260]	@ (8000998 <main+0x128>)
 8000894:	2200      	movs	r2, #0
 8000896:	9202      	str	r2, [sp, #8]
 8000898:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800089c:	9201      	str	r2, [sp, #4]
 800089e:	685a      	ldr	r2, [r3, #4]
 80008a0:	9200      	str	r2, [sp, #0]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a3d      	ldr	r2, [pc, #244]	@ (800099c <main+0x12c>)
 80008a6:	211e      	movs	r1, #30
 80008a8:	2037      	movs	r0, #55	@ 0x37
 80008aa:	f7ff feff 	bl	80006ac <ILI9341_WriteString>
		ILI9341_WriteString(55, 60, "TO START", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80008ae:	4b3a      	ldr	r3, [pc, #232]	@ (8000998 <main+0x128>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	9202      	str	r2, [sp, #8]
 80008b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008b8:	9201      	str	r2, [sp, #4]
 80008ba:	685a      	ldr	r2, [r3, #4]
 80008bc:	9200      	str	r2, [sp, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a37      	ldr	r2, [pc, #220]	@ (80009a0 <main+0x130>)
 80008c2:	213c      	movs	r1, #60	@ 0x3c
 80008c4:	2037      	movs	r0, #55	@ 0x37
 80008c6:	f7ff fef1 	bl	80006ac <ILI9341_WriteString>
	while (!start) {
 80008ca:	4b36      	ldr	r3, [pc, #216]	@ (80009a4 <main+0x134>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d0df      	beq.n	8000892 <main+0x22>
	}
	while (start) {
 80008d2:	e05c      	b.n	800098e <main+0x11e>
		ILI9341_WriteString(10, 0, "Detected String:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80008d4:	4b34      	ldr	r3, [pc, #208]	@ (80009a8 <main+0x138>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	9202      	str	r2, [sp, #8]
 80008da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008de:	9201      	str	r2, [sp, #4]
 80008e0:	685a      	ldr	r2, [r3, #4]
 80008e2:	9200      	str	r2, [sp, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a31      	ldr	r2, [pc, #196]	@ (80009ac <main+0x13c>)
 80008e8:	2100      	movs	r1, #0
 80008ea:	200a      	movs	r0, #10
 80008ec:	f7ff fede 	bl	80006ac <ILI9341_WriteString>
		ILI9341_WriteString(100, 30, detected_string, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80008f0:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <main+0x140>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	4b28      	ldr	r3, [pc, #160]	@ (8000998 <main+0x128>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	9202      	str	r2, [sp, #8]
 80008fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000900:	9201      	str	r2, [sp, #4]
 8000902:	685a      	ldr	r2, [r3, #4]
 8000904:	9200      	str	r2, [sp, #0]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	460a      	mov	r2, r1
 800090a:	211e      	movs	r1, #30
 800090c:	2064      	movs	r0, #100	@ 0x64
 800090e:	f7ff fecd 	bl	80006ac <ILI9341_WriteString>
		ILI9341_WriteString(10, 60, "Actual Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000912:	4b25      	ldr	r3, [pc, #148]	@ (80009a8 <main+0x138>)
 8000914:	2200      	movs	r2, #0
 8000916:	9202      	str	r2, [sp, #8]
 8000918:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800091c:	9201      	str	r2, [sp, #4]
 800091e:	685a      	ldr	r2, [r3, #4]
 8000920:	9200      	str	r2, [sp, #0]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a23      	ldr	r2, [pc, #140]	@ (80009b4 <main+0x144>)
 8000926:	213c      	movs	r1, #60	@ 0x3c
 8000928:	200a      	movs	r0, #10
 800092a:	f7ff febf 	bl	80006ac <ILI9341_WriteString>
		ILI9341_WriteString(100, 90, charFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 800092e:	4b22      	ldr	r3, [pc, #136]	@ (80009b8 <main+0x148>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4619      	mov	r1, r3
 8000934:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <main+0x128>)
 8000936:	2200      	movs	r2, #0
 8000938:	9202      	str	r2, [sp, #8]
 800093a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800093e:	9201      	str	r2, [sp, #4]
 8000940:	685a      	ldr	r2, [r3, #4]
 8000942:	9200      	str	r2, [sp, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	460a      	mov	r2, r1
 8000948:	215a      	movs	r1, #90	@ 0x5a
 800094a:	2064      	movs	r0, #100	@ 0x64
 800094c:	f7ff feae 	bl	80006ac <ILI9341_WriteString>
		ILI9341_WriteString(10, 120, "Desired Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000950:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <main+0x138>)
 8000952:	2200      	movs	r2, #0
 8000954:	9202      	str	r2, [sp, #8]
 8000956:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800095a:	9201      	str	r2, [sp, #4]
 800095c:	685a      	ldr	r2, [r3, #4]
 800095e:	9200      	str	r2, [sp, #0]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a16      	ldr	r2, [pc, #88]	@ (80009bc <main+0x14c>)
 8000964:	2178      	movs	r1, #120	@ 0x78
 8000966:	200a      	movs	r0, #10
 8000968:	f7ff fea0 	bl	80006ac <ILI9341_WriteString>
		ILI9341_WriteString(100, 150, desiredFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <main+0x150>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <main+0x128>)
 8000974:	2200      	movs	r2, #0
 8000976:	9202      	str	r2, [sp, #8]
 8000978:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800097c:	9201      	str	r2, [sp, #4]
 800097e:	685a      	ldr	r2, [r3, #4]
 8000980:	9200      	str	r2, [sp, #0]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	460a      	mov	r2, r1
 8000986:	2196      	movs	r1, #150	@ 0x96
 8000988:	2064      	movs	r0, #100	@ 0x64
 800098a:	f7ff fe8f 	bl	80006ac <ILI9341_WriteString>
	while (start) {
 800098e:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <main+0x134>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d19e      	bne.n	80008d4 <main+0x64>
	while (!start) {
 8000996:	e798      	b.n	80008ca <main+0x5a>
 8000998:	20000008 	.word	0x20000008
 800099c:	08002dfc 	.word	0x08002dfc
 80009a0:	08002e08 	.word	0x08002e08
 80009a4:	20000010 	.word	0x20000010
 80009a8:	20000000 	.word	0x20000000
 80009ac:	08002e14 	.word	0x08002e14
 80009b0:	20000014 	.word	0x20000014
 80009b4:	08002e28 	.word	0x08002e28
 80009b8:	20000018 	.word	0x20000018
 80009bc:	08002e3c 	.word	0x08002e3c
 80009c0:	2000001c 	.word	0x2000001c

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b096      	sub	sp, #88	@ 0x58
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	2244      	movs	r2, #68	@ 0x44
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 f9ba 	bl	8002d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	463b      	mov	r3, r7
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009ea:	f000 fedf 	bl	80017ac <HAL_PWREx_ControlVoltageScaling>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009f4:	f000 faba 	bl	8000f6c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009f8:	2310      	movs	r3, #16
 80009fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009fc:	2301      	movs	r3, #1
 80009fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8000a04:	2370      	movs	r3, #112	@ 0x70
 8000a06:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 ff7f 	bl	8001914 <HAL_RCC_OscConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a1c:	f000 faa6 	bl	8000f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a20:	230f      	movs	r3, #15
 8000a22:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a24:	2300      	movs	r3, #0
 8000a26:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a34:	463b      	mov	r3, r7
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 fb85 	bl	8002148 <HAL_RCC_ClockConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a44:	f000 fa92 	bl	8000f6c <Error_Handler>
  }
}
 8000a48:	bf00      	nop
 8000a4a:	3758      	adds	r7, #88	@ 0x58
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a56:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac8 <MX_SPI1_Init+0x78>)
 8000a58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a68:	4b16      	ldr	r3, [pc, #88]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a6a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a70:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a76:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a86:	2228      	movs	r2, #40	@ 0x28
 8000a88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a9e:	2207      	movs	r2, #7
 8000aa0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000aaa:	2208      	movs	r2, #8
 8000aac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000ab0:	f001 fdd0 	bl	8002654 <HAL_SPI_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000aba:	f000 fa57 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000048 	.word	0x20000048
 8000ac8:	40013000 	.word	0x40013000

08000acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08e      	sub	sp, #56	@ 0x38
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae2:	4bb2      	ldr	r3, [pc, #712]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae6:	4ab1      	ldr	r2, [pc, #708]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000ae8:	f043 0310 	orr.w	r3, r3, #16
 8000aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aee:	4baf      	ldr	r3, [pc, #700]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	f003 0310 	and.w	r3, r3, #16
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	4bac      	ldr	r3, [pc, #688]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	4aab      	ldr	r2, [pc, #684]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b06:	4ba9      	ldr	r3, [pc, #676]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	61fb      	str	r3, [r7, #28]
 8000b10:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b12:	4ba6      	ldr	r3, [pc, #664]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	4aa5      	ldr	r2, [pc, #660]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b18:	f043 0320 	orr.w	r3, r3, #32
 8000b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1e:	4ba3      	ldr	r3, [pc, #652]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	f003 0320 	and.w	r3, r3, #32
 8000b26:	61bb      	str	r3, [r7, #24]
 8000b28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2a:	4ba0      	ldr	r3, [pc, #640]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	4a9f      	ldr	r2, [pc, #636]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b36:	4b9d      	ldr	r3, [pc, #628]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b9a      	ldr	r3, [pc, #616]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	4a99      	ldr	r2, [pc, #612]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4e:	4b97      	ldr	r3, [pc, #604]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b94      	ldr	r3, [pc, #592]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	4a93      	ldr	r2, [pc, #588]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b66:	4b91      	ldr	r3, [pc, #580]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	4b8e      	ldr	r3, [pc, #568]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	4a8d      	ldr	r2, [pc, #564]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7e:	4b8b      	ldr	r3, [pc, #556]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8a:	4b88      	ldr	r3, [pc, #544]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	4a87      	ldr	r2, [pc, #540]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b96:	4b85      	ldr	r3, [pc, #532]	@ (8000dac <MX_GPIO_Init+0x2e0>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000ba2:	f000 fea7 	bl	80018f4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bae:	f000 fdc5 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2103      	movs	r1, #3
 8000bb6:	487e      	ldr	r0, [pc, #504]	@ (8000db0 <MX_GPIO_Init+0x2e4>)
 8000bb8:	f000 fdc0 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bbc:	230c      	movs	r3, #12
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000bcc:	230d      	movs	r3, #13
 8000bce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4877      	ldr	r0, [pc, #476]	@ (8000db4 <MX_GPIO_Init+0x2e8>)
 8000bd8:	f000 fc1e 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000bdc:	2307      	movs	r3, #7
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be0:	2312      	movs	r3, #18
 8000be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000bec:	2304      	movs	r3, #4
 8000bee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4870      	ldr	r0, [pc, #448]	@ (8000db8 <MX_GPIO_Init+0x2ec>)
 8000bf8:	f000 fc0e 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bfc:	2380      	movs	r3, #128	@ 0x80
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000c0c:	230d      	movs	r3, #13
 8000c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	4868      	ldr	r0, [pc, #416]	@ (8000db8 <MX_GPIO_Init+0x2ec>)
 8000c18:	f000 fbfe 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c1c:	233f      	movs	r3, #63	@ 0x3f
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c20:	230b      	movs	r3, #11
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4863      	ldr	r0, [pc, #396]	@ (8000dbc <MX_GPIO_Init+0x2f0>)
 8000c30:	f000 fbf2 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c34:	2301      	movs	r3, #1
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c44:	2301      	movs	r3, #1
 8000c46:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c52:	f000 fbe1 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000c56:	230a      	movs	r3, #10
 8000c58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c5a:	230b      	movs	r3, #11
 8000c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c6c:	f000 fbd4 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c70:	2310      	movs	r3, #16
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c8a:	f000 fbc5 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4842      	ldr	r0, [pc, #264]	@ (8000db0 <MX_GPIO_Init+0x2e4>)
 8000ca6:	f000 fbb7 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000caa:	2344      	movs	r3, #68	@ 0x44
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	483c      	ldr	r0, [pc, #240]	@ (8000db0 <MX_GPIO_Init+0x2e4>)
 8000cbe:	f000 fbab 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000cc2:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4835      	ldr	r0, [pc, #212]	@ (8000db4 <MX_GPIO_Init+0x2e8>)
 8000ce0:	f000 fb9a 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000ce4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	482c      	ldr	r0, [pc, #176]	@ (8000db4 <MX_GPIO_Init+0x2e8>)
 8000d02:	f000 fb89 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	4823      	ldr	r0, [pc, #140]	@ (8000db0 <MX_GPIO_Init+0x2e4>)
 8000d24:	f000 fb78 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000d28:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000d3a:	230d      	movs	r3, #13
 8000d3c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d42:	4619      	mov	r1, r3
 8000d44:	481a      	ldr	r0, [pc, #104]	@ (8000db0 <MX_GPIO_Init+0x2e4>)
 8000d46:	f000 fb67 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000d5c:	230e      	movs	r3, #14
 8000d5e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	4812      	ldr	r0, [pc, #72]	@ (8000db0 <MX_GPIO_Init+0x2e4>)
 8000d68:	f000 fb56 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d6c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d7e:	2307      	movs	r3, #7
 8000d80:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	480d      	ldr	r0, [pc, #52]	@ (8000dc0 <MX_GPIO_Init+0x2f4>)
 8000d8a:	f000 fb45 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000d8e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000da0:	2302      	movs	r3, #2
 8000da2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	e00b      	b.n	8000dc4 <MX_GPIO_Init+0x2f8>
 8000dac:	40021000 	.word	0x40021000
 8000db0:	48000400 	.word	0x48000400
 8000db4:	48001000 	.word	0x48001000
 8000db8:	48001400 	.word	0x48001400
 8000dbc:	48000800 	.word	0x48000800
 8000dc0:	48000c00 	.word	0x48000c00
 8000dc4:	4864      	ldr	r0, [pc, #400]	@ (8000f58 <MX_GPIO_Init+0x48c>)
 8000dc6:	f000 fb27 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000dca:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	485d      	ldr	r0, [pc, #372]	@ (8000f5c <MX_GPIO_Init+0x490>)
 8000de8:	f000 fb16 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dec:	2340      	movs	r3, #64	@ 0x40
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000dfc:	230d      	movs	r3, #13
 8000dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4856      	ldr	r0, [pc, #344]	@ (8000f60 <MX_GPIO_Init+0x494>)
 8000e08:	f000 fb06 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e0c:	2380      	movs	r3, #128	@ 0x80
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	484e      	ldr	r0, [pc, #312]	@ (8000f60 <MX_GPIO_Init+0x494>)
 8000e28:	f000 faf6 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e2c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e3e:	230c      	movs	r3, #12
 8000e40:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e46:	4619      	mov	r1, r3
 8000e48:	4845      	ldr	r0, [pc, #276]	@ (8000f60 <MX_GPIO_Init+0x494>)
 8000e4a:	f000 fae5 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000e4e:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e60:	230a      	movs	r3, #10
 8000e62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e6e:	f000 fad3 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e8a:	f000 fac5 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e9e:	2309      	movs	r3, #9
 8000ea0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	482b      	ldr	r0, [pc, #172]	@ (8000f58 <MX_GPIO_Init+0x48c>)
 8000eaa:	f000 fab5 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4823      	ldr	r0, [pc, #140]	@ (8000f58 <MX_GPIO_Init+0x48c>)
 8000eca:	f000 faa5 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ece:	2378      	movs	r3, #120	@ 0x78
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ede:	2307      	movs	r3, #7
 8000ee0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	481b      	ldr	r0, [pc, #108]	@ (8000f58 <MX_GPIO_Init+0x48c>)
 8000eea:	f000 fa95 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000eee:	2338      	movs	r3, #56	@ 0x38
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000efe:	2306      	movs	r3, #6
 8000f00:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f06:	4619      	mov	r1, r3
 8000f08:	4816      	ldr	r0, [pc, #88]	@ (8000f64 <MX_GPIO_Init+0x498>)
 8000f0a:	f000 fa85 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f14:	2312      	movs	r3, #18
 8000f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f20:	2304      	movs	r3, #4
 8000f22:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480e      	ldr	r0, [pc, #56]	@ (8000f64 <MX_GPIO_Init+0x498>)
 8000f2c:	f000 fa74 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f30:	2301      	movs	r3, #1
 8000f32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f40:	2302      	movs	r3, #2
 8000f42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <MX_GPIO_Init+0x49c>)
 8000f4c:	f000 fa64 	bl	8001418 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f50:	bf00      	nop
 8000f52:	3738      	adds	r7, #56	@ 0x38
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	48000c00 	.word	0x48000c00
 8000f5c:	48001800 	.word	0x48001800
 8000f60:	48000800 	.word	0x48000800
 8000f64:	48000400 	.word	0x48000400
 8000f68:	48001000 	.word	0x48001000

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <Error_Handler+0x8>

08000f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <HAL_MspInit+0x44>)
 8000f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f82:	4a0e      	ldr	r2, [pc, #56]	@ (8000fbc <HAL_MspInit+0x44>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <HAL_MspInit+0x44>)
 8000f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <HAL_MspInit+0x44>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9a:	4a08      	ldr	r2, [pc, #32]	@ (8000fbc <HAL_MspInit+0x44>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_MspInit+0x44>)
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	@ 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a17      	ldr	r2, [pc, #92]	@ (800103c <HAL_SPI_MspInit+0x7c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d128      	bne.n	8001034 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fe2:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <HAL_SPI_MspInit+0x80>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe6:	4a16      	ldr	r2, [pc, #88]	@ (8001040 <HAL_SPI_MspInit+0x80>)
 8000fe8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fec:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fee:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <HAL_SPI_MspInit+0x80>)
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <HAL_SPI_MspInit+0x80>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	4a10      	ldr	r2, [pc, #64]	@ (8001040 <HAL_SPI_MspInit+0x80>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001006:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <HAL_SPI_MspInit+0x80>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001012:	23e0      	movs	r3, #224	@ 0xe0
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001022:	2305      	movs	r3, #5
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001030:	f000 f9f2 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	@ 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40013000 	.word	0x40013000
 8001040:	40021000 	.word	0x40021000

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <NMI_Handler+0x4>

0800104c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <MemManage_Handler+0x4>

0800105c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <UsageFault_Handler+0x4>

0800106c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109a:	f000 f893 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <SystemInit+0x20>)
 80010aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ae:	4a05      	ldr	r2, [pc, #20]	@ (80010c4 <SystemInit+0x20>)
 80010b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001100 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010cc:	f7ff ffea 	bl	80010a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d0:	480c      	ldr	r0, [pc, #48]	@ (8001104 <LoopForever+0x6>)
  ldr r1, =_edata
 80010d2:	490d      	ldr	r1, [pc, #52]	@ (8001108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d4:	4a0d      	ldr	r2, [pc, #52]	@ (800110c <LoopForever+0xe>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001114 <LoopForever+0x16>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f6:	f001 fe31 	bl	8002d5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010fa:	f7ff fbb9 	bl	8000870 <main>

080010fe <LoopForever>:

LoopForever:
    b LoopForever
 80010fe:	e7fe      	b.n	80010fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001100:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001108:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800110c:	08004f40 	.word	0x08004f40
  ldr r2, =_sbss
 8001110:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001114:	200000b0 	.word	0x200000b0

08001118 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC1_IRQHandler>

0800111a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f943 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800112a:	2000      	movs	r0, #0
 800112c:	f000 f80e 	bl	800114c <HAL_InitTick>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	e001      	b.n	8001140 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800113c:	f7ff ff1c 	bl	8000f78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001140:	79fb      	ldrb	r3, [r7, #7]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001158:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <HAL_InitTick+0x6c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d023      	beq.n	80011a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001160:	4b16      	ldr	r3, [pc, #88]	@ (80011bc <HAL_InitTick+0x70>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <HAL_InitTick+0x6c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001172:	fbb2 f3f3 	udiv	r3, r2, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f941 	bl	80013fe <HAL_SYSTICK_Config>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10f      	bne.n	80011a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0f      	cmp	r3, #15
 8001186:	d809      	bhi.n	800119c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001188:	2200      	movs	r2, #0
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f000 f919 	bl	80013c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001194:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <HAL_InitTick+0x74>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e007      	b.n	80011ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e004      	b.n	80011ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	73fb      	strb	r3, [r7, #15]
 80011a6:	e001      	b.n	80011ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000028 	.word	0x20000028
 80011bc:	20000020 	.word	0x20000020
 80011c0:	20000024 	.word	0x20000024

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	@ (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000028 	.word	0x20000028
 80011e8:	200000ac 	.word	0x200000ac

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	200000ac 	.word	0x200000ac

08001204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff ffee 	bl	80011ec <HAL_GetTick>
 8001210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	d005      	beq.n	800122a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800121e:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <HAL_Delay+0x44>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800122a:	bf00      	nop
 800122c:	f7ff ffde 	bl	80011ec <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	d8f7      	bhi.n	800122c <HAL_Delay+0x28>
  {
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000028 	.word	0x20000028

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	@ (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	@ (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	@ 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	@ 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f7ff ff8e 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff47 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff5c 	bl	8001294 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff8e 	bl	8001304 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5d 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffb0 	bl	800136c <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b087      	sub	sp, #28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001426:	e166      	b.n	80016f6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2101      	movs	r1, #1
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	4013      	ands	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 8158 	beq.w	80016f0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b01      	cmp	r3, #1
 800144a:	d005      	beq.n	8001458 <HAL_GPIO_Init+0x40>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d130      	bne.n	80014ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800148e:	2201      	movs	r2, #1
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	f003 0201 	and.w	r2, r3, #1
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d017      	beq.n	80014f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	2203      	movs	r2, #3
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d123      	bne.n	800154a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	08da      	lsrs	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3208      	adds	r2, #8
 800150a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	220f      	movs	r2, #15
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	691a      	ldr	r2, [r3, #16]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	08da      	lsrs	r2, r3, #3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3208      	adds	r2, #8
 8001544:	6939      	ldr	r1, [r7, #16]
 8001546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	2203      	movs	r2, #3
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 0203 	and.w	r2, r3, #3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 80b2 	beq.w	80016f0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158c:	4b61      	ldr	r3, [pc, #388]	@ (8001714 <HAL_GPIO_Init+0x2fc>)
 800158e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001590:	4a60      	ldr	r2, [pc, #384]	@ (8001714 <HAL_GPIO_Init+0x2fc>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6613      	str	r3, [r2, #96]	@ 0x60
 8001598:	4b5e      	ldr	r3, [pc, #376]	@ (8001714 <HAL_GPIO_Init+0x2fc>)
 800159a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015a4:	4a5c      	ldr	r2, [pc, #368]	@ (8001718 <HAL_GPIO_Init+0x300>)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	220f      	movs	r2, #15
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015ce:	d02b      	beq.n	8001628 <HAL_GPIO_Init+0x210>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a52      	ldr	r2, [pc, #328]	@ (800171c <HAL_GPIO_Init+0x304>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d025      	beq.n	8001624 <HAL_GPIO_Init+0x20c>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a51      	ldr	r2, [pc, #324]	@ (8001720 <HAL_GPIO_Init+0x308>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d01f      	beq.n	8001620 <HAL_GPIO_Init+0x208>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a50      	ldr	r2, [pc, #320]	@ (8001724 <HAL_GPIO_Init+0x30c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d019      	beq.n	800161c <HAL_GPIO_Init+0x204>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a4f      	ldr	r2, [pc, #316]	@ (8001728 <HAL_GPIO_Init+0x310>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d013      	beq.n	8001618 <HAL_GPIO_Init+0x200>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a4e      	ldr	r2, [pc, #312]	@ (800172c <HAL_GPIO_Init+0x314>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d00d      	beq.n	8001614 <HAL_GPIO_Init+0x1fc>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a4d      	ldr	r2, [pc, #308]	@ (8001730 <HAL_GPIO_Init+0x318>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d007      	beq.n	8001610 <HAL_GPIO_Init+0x1f8>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a4c      	ldr	r2, [pc, #304]	@ (8001734 <HAL_GPIO_Init+0x31c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d101      	bne.n	800160c <HAL_GPIO_Init+0x1f4>
 8001608:	2307      	movs	r3, #7
 800160a:	e00e      	b.n	800162a <HAL_GPIO_Init+0x212>
 800160c:	2308      	movs	r3, #8
 800160e:	e00c      	b.n	800162a <HAL_GPIO_Init+0x212>
 8001610:	2306      	movs	r3, #6
 8001612:	e00a      	b.n	800162a <HAL_GPIO_Init+0x212>
 8001614:	2305      	movs	r3, #5
 8001616:	e008      	b.n	800162a <HAL_GPIO_Init+0x212>
 8001618:	2304      	movs	r3, #4
 800161a:	e006      	b.n	800162a <HAL_GPIO_Init+0x212>
 800161c:	2303      	movs	r3, #3
 800161e:	e004      	b.n	800162a <HAL_GPIO_Init+0x212>
 8001620:	2302      	movs	r3, #2
 8001622:	e002      	b.n	800162a <HAL_GPIO_Init+0x212>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_GPIO_Init+0x212>
 8001628:	2300      	movs	r3, #0
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	f002 0203 	and.w	r2, r2, #3
 8001630:	0092      	lsls	r2, r2, #2
 8001632:	4093      	lsls	r3, r2
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800163a:	4937      	ldr	r1, [pc, #220]	@ (8001718 <HAL_GPIO_Init+0x300>)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001648:	4b3b      	ldr	r3, [pc, #236]	@ (8001738 <HAL_GPIO_Init+0x320>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800166c:	4a32      	ldr	r2, [pc, #200]	@ (8001738 <HAL_GPIO_Init+0x320>)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001672:	4b31      	ldr	r3, [pc, #196]	@ (8001738 <HAL_GPIO_Init+0x320>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	43db      	mvns	r3, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001696:	4a28      	ldr	r2, [pc, #160]	@ (8001738 <HAL_GPIO_Init+0x320>)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800169c:	4b26      	ldr	r3, [pc, #152]	@ (8001738 <HAL_GPIO_Init+0x320>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001738 <HAL_GPIO_Init+0x320>)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <HAL_GPIO_Init+0x320>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016ea:	4a13      	ldr	r2, [pc, #76]	@ (8001738 <HAL_GPIO_Init+0x320>)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3301      	adds	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	f47f ae91 	bne.w	8001428 <HAL_GPIO_Init+0x10>
  }
}
 8001706:	bf00      	nop
 8001708:	bf00      	nop
 800170a:	371c      	adds	r7, #28
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40021000 	.word	0x40021000
 8001718:	40010000 	.word	0x40010000
 800171c:	48000400 	.word	0x48000400
 8001720:	48000800 	.word	0x48000800
 8001724:	48000c00 	.word	0x48000c00
 8001728:	48001000 	.word	0x48001000
 800172c:	48001400 	.word	0x48001400
 8001730:	48001800 	.word	0x48001800
 8001734:	48001c00 	.word	0x48001c00
 8001738:	40010400 	.word	0x40010400

0800173c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
 8001748:	4613      	mov	r3, r2
 800174a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800174c:	787b      	ldrb	r3, [r7, #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001758:	e002      	b.n	8001760 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800175a:	887a      	ldrh	r2, [r7, #2]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001770:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800177c:	d102      	bne.n	8001784 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800177e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001782:	e00b      	b.n	800179c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001784:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800178a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800178e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001792:	d102      	bne.n	800179a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001794:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001798:	e000      	b.n	800179c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800179a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40007000 	.word	0x40007000

080017ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d141      	bne.n	800183e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ba:	4b4b      	ldr	r3, [pc, #300]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017c6:	d131      	bne.n	800182c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017c8:	4b47      	ldr	r3, [pc, #284]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017ce:	4a46      	ldr	r2, [pc, #280]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d8:	4b43      	ldr	r3, [pc, #268]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017e0:	4a41      	ldr	r2, [pc, #260]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80017e8:	4b40      	ldr	r3, [pc, #256]	@ (80018ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2232      	movs	r2, #50	@ 0x32
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	4a3f      	ldr	r2, [pc, #252]	@ (80018f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	0c9b      	lsrs	r3, r3, #18
 80017fa:	3301      	adds	r3, #1
 80017fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017fe:	e002      	b.n	8001806 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	3b01      	subs	r3, #1
 8001804:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001806:	4b38      	ldr	r3, [pc, #224]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800180e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001812:	d102      	bne.n	800181a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f2      	bne.n	8001800 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800181a:	4b33      	ldr	r3, [pc, #204]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001822:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001826:	d158      	bne.n	80018da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e057      	b.n	80018dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800182c:	4b2e      	ldr	r3, [pc, #184]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001832:	4a2d      	ldr	r2, [pc, #180]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001838:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800183c:	e04d      	b.n	80018da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001844:	d141      	bne.n	80018ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001846:	4b28      	ldr	r3, [pc, #160]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800184e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001852:	d131      	bne.n	80018b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001854:	4b24      	ldr	r3, [pc, #144]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800185a:	4a23      	ldr	r2, [pc, #140]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001860:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001864:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800186c:	4a1e      	ldr	r2, [pc, #120]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001872:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001874:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2232      	movs	r2, #50	@ 0x32
 800187a:	fb02 f303 	mul.w	r3, r2, r3
 800187e:	4a1c      	ldr	r2, [pc, #112]	@ (80018f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001880:	fba2 2303 	umull	r2, r3, r2, r3
 8001884:	0c9b      	lsrs	r3, r3, #18
 8001886:	3301      	adds	r3, #1
 8001888:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800188a:	e002      	b.n	8001892 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3b01      	subs	r3, #1
 8001890:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001892:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800189a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800189e:	d102      	bne.n	80018a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f2      	bne.n	800188c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018a6:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018b2:	d112      	bne.n	80018da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e011      	b.n	80018dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018b8:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018be:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80018c8:	e007      	b.n	80018da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018ca:	4b07      	ldr	r3, [pc, #28]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018d2:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018d8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	40007000 	.word	0x40007000
 80018ec:	20000020 	.word	0x20000020
 80018f0:	431bde83 	.word	0x431bde83

080018f4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <HAL_PWREx_EnableVddIO2+0x1c>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4a04      	ldr	r2, [pc, #16]	@ (8001910 <HAL_PWREx_EnableVddIO2+0x1c>)
 80018fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001902:	6053      	str	r3, [r2, #4]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40007000 	.word	0x40007000

08001914 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	f000 bc08 	b.w	8002138 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001928:	4b96      	ldr	r3, [pc, #600]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001932:	4b94      	ldr	r3, [pc, #592]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0310 	and.w	r3, r3, #16
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80e4 	beq.w	8001b12 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d007      	beq.n	8001960 <HAL_RCC_OscConfig+0x4c>
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b0c      	cmp	r3, #12
 8001954:	f040 808b 	bne.w	8001a6e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2b01      	cmp	r3, #1
 800195c:	f040 8087 	bne.w	8001a6e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001960:	4b88      	ldr	r3, [pc, #544]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_OscConfig+0x64>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e3df      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1a      	ldr	r2, [r3, #32]
 800197c:	4b81      	ldr	r3, [pc, #516]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d004      	beq.n	8001992 <HAL_RCC_OscConfig+0x7e>
 8001988:	4b7e      	ldr	r3, [pc, #504]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001990:	e005      	b.n	800199e <HAL_RCC_OscConfig+0x8a>
 8001992:	4b7c      	ldr	r3, [pc, #496]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800199e:	4293      	cmp	r3, r2
 80019a0:	d223      	bcs.n	80019ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fd94 	bl	80024d4 <RCC_SetFlashLatencyFromMSIRange>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e3c0      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b6:	4b73      	ldr	r3, [pc, #460]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a72      	ldr	r2, [pc, #456]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 80019bc:	f043 0308 	orr.w	r3, r3, #8
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b70      	ldr	r3, [pc, #448]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	496d      	ldr	r1, [pc, #436]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	4968      	ldr	r1, [pc, #416]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
 80019e8:	e025      	b.n	8001a36 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ea:	4b66      	ldr	r3, [pc, #408]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a65      	ldr	r2, [pc, #404]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 80019f0:	f043 0308 	orr.w	r3, r3, #8
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b63      	ldr	r3, [pc, #396]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4960      	ldr	r1, [pc, #384]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a08:	4b5e      	ldr	r3, [pc, #376]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	495b      	ldr	r1, [pc, #364]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d109      	bne.n	8001a36 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 fd54 	bl	80024d4 <RCC_SetFlashLatencyFromMSIRange>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e380      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a36:	f000 fcc1 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	4b51      	ldr	r3, [pc, #324]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	4950      	ldr	r1, [pc, #320]	@ (8001b88 <HAL_RCC_OscConfig+0x274>)
 8001a48:	5ccb      	ldrb	r3, [r1, r3]
 8001a4a:	f003 031f 	and.w	r3, r3, #31
 8001a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a52:	4a4e      	ldr	r2, [pc, #312]	@ (8001b8c <HAL_RCC_OscConfig+0x278>)
 8001a54:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a56:	4b4e      	ldr	r3, [pc, #312]	@ (8001b90 <HAL_RCC_OscConfig+0x27c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fb76 	bl	800114c <HAL_InitTick>
 8001a60:	4603      	mov	r3, r0
 8001a62:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d052      	beq.n	8001b10 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	e364      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d032      	beq.n	8001adc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a76:	4b43      	ldr	r3, [pc, #268]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a42      	ldr	r2, [pc, #264]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a82:	f7ff fbb3 	bl	80011ec <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a8a:	f7ff fbaf 	bl	80011ec <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e34d      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a9c:	4b39      	ldr	r3, [pc, #228]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aa8:	4b36      	ldr	r3, [pc, #216]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a35      	ldr	r2, [pc, #212]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001aae:	f043 0308 	orr.w	r3, r3, #8
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b33      	ldr	r3, [pc, #204]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	4930      	ldr	r1, [pc, #192]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	492b      	ldr	r1, [pc, #172]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
 8001ada:	e01a      	b.n	8001b12 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001adc:	4b29      	ldr	r3, [pc, #164]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a28      	ldr	r2, [pc, #160]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	f023 0301 	bic.w	r3, r3, #1
 8001ae6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fb80 	bl	80011ec <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001af0:	f7ff fb7c 	bl	80011ec <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e31a      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b02:	4b20      	ldr	r3, [pc, #128]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x1dc>
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d073      	beq.n	8001c06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_OscConfig+0x21c>
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2b0c      	cmp	r3, #12
 8001b28:	d10e      	bne.n	8001b48 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d10b      	bne.n	8001b48 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d063      	beq.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d15f      	bne.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e2f7      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b50:	d106      	bne.n	8001b60 <HAL_RCC_OscConfig+0x24c>
 8001b52:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a0b      	ldr	r2, [pc, #44]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e025      	b.n	8001bac <HAL_RCC_OscConfig+0x298>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b68:	d114      	bne.n	8001b94 <HAL_RCC_OscConfig+0x280>
 8001b6a:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a05      	ldr	r2, [pc, #20]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b03      	ldr	r3, [pc, #12]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a02      	ldr	r2, [pc, #8]	@ (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e013      	b.n	8001bac <HAL_RCC_OscConfig+0x298>
 8001b84:	40021000 	.word	0x40021000
 8001b88:	08004ef8 	.word	0x08004ef8
 8001b8c:	20000020 	.word	0x20000020
 8001b90:	20000024 	.word	0x20000024
 8001b94:	4ba0      	ldr	r3, [pc, #640]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a9f      	ldr	r2, [pc, #636]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001b9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b9d      	ldr	r3, [pc, #628]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a9c      	ldr	r2, [pc, #624]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d013      	beq.n	8001bdc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fb1a 	bl	80011ec <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff fb16 	bl	80011ec <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	@ 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e2b4      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bce:	4b92      	ldr	r3, [pc, #584]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x2a8>
 8001bda:	e014      	b.n	8001c06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fb06 	bl	80011ec <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff fb02 	bl	80011ec <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	@ 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e2a0      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bf6:	4b88      	ldr	r3, [pc, #544]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x2d0>
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d060      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_OscConfig+0x310>
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	d119      	bne.n	8001c52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d116      	bne.n	8001c52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c24:	4b7c      	ldr	r3, [pc, #496]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_OscConfig+0x328>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e27d      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b76      	ldr	r3, [pc, #472]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	061b      	lsls	r3, r3, #24
 8001c4a:	4973      	ldr	r1, [pc, #460]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c50:	e040      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d023      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5a:	4b6f      	ldr	r3, [pc, #444]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a6e      	ldr	r2, [pc, #440]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c66:	f7ff fac1 	bl	80011ec <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6e:	f7ff fabd 	bl	80011ec <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e25b      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c80:	4b65      	ldr	r3, [pc, #404]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8c:	4b62      	ldr	r3, [pc, #392]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	061b      	lsls	r3, r3, #24
 8001c9a:	495f      	ldr	r1, [pc, #380]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
 8001ca0:	e018      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca2:	4b5d      	ldr	r3, [pc, #372]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a5c      	ldr	r2, [pc, #368]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7ff fa9d 	bl	80011ec <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb6:	f7ff fa99 	bl	80011ec <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e237      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc8:	4b53      	ldr	r3, [pc, #332]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1f0      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d03c      	beq.n	8001d5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01c      	beq.n	8001d22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce8:	4b4b      	ldr	r3, [pc, #300]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cee:	4a4a      	ldr	r2, [pc, #296]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7ff fa78 	bl	80011ec <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d00:	f7ff fa74 	bl	80011ec <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e212      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d12:	4b41      	ldr	r3, [pc, #260]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0ef      	beq.n	8001d00 <HAL_RCC_OscConfig+0x3ec>
 8001d20:	e01b      	b.n	8001d5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d22:	4b3d      	ldr	r3, [pc, #244]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d28:	4a3b      	ldr	r2, [pc, #236]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001d2a:	f023 0301 	bic.w	r3, r3, #1
 8001d2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d32:	f7ff fa5b 	bl	80011ec <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3a:	f7ff fa57 	bl	80011ec <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e1f5      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d4c:	4b32      	ldr	r3, [pc, #200]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1ef      	bne.n	8001d3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 80a6 	beq.w	8001eb4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10d      	bne.n	8001d94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d78:	4b27      	ldr	r3, [pc, #156]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7c:	4a26      	ldr	r2, [pc, #152]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d84:	4b24      	ldr	r3, [pc, #144]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d90:	2301      	movs	r3, #1
 8001d92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d94:	4b21      	ldr	r3, [pc, #132]	@ (8001e1c <HAL_RCC_OscConfig+0x508>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d118      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001da0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e1c <HAL_RCC_OscConfig+0x508>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e1c <HAL_RCC_OscConfig+0x508>)
 8001da6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001daa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dac:	f7ff fa1e 	bl	80011ec <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db4:	f7ff fa1a 	bl	80011ec <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e1b8      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc6:	4b15      	ldr	r3, [pc, #84]	@ (8001e1c <HAL_RCC_OscConfig+0x508>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d108      	bne.n	8001dec <HAL_RCC_OscConfig+0x4d8>
 8001dda:	4b0f      	ldr	r3, [pc, #60]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001de0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dea:	e029      	b.n	8001e40 <HAL_RCC_OscConfig+0x52c>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d115      	bne.n	8001e20 <HAL_RCC_OscConfig+0x50c>
 8001df4:	4b08      	ldr	r3, [pc, #32]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dfa:	4a07      	ldr	r2, [pc, #28]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e04:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e0a:	4a03      	ldr	r2, [pc, #12]	@ (8001e18 <HAL_RCC_OscConfig+0x504>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e14:	e014      	b.n	8001e40 <HAL_RCC_OscConfig+0x52c>
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	4b9d      	ldr	r3, [pc, #628]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e26:	4a9c      	ldr	r2, [pc, #624]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e30:	4b99      	ldr	r3, [pc, #612]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e36:	4a98      	ldr	r2, [pc, #608]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d016      	beq.n	8001e76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7ff f9d0 	bl	80011ec <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e50:	f7ff f9cc 	bl	80011ec <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e168      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e66:	4b8c      	ldr	r3, [pc, #560]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0ed      	beq.n	8001e50 <HAL_RCC_OscConfig+0x53c>
 8001e74:	e015      	b.n	8001ea2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e76:	f7ff f9b9 	bl	80011ec <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7ff f9b5 	bl	80011ec <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e151      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e94:	4b80      	ldr	r3, [pc, #512]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1ed      	bne.n	8001e7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ea2:	7ffb      	ldrb	r3, [r7, #31]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea8:	4b7b      	ldr	r3, [pc, #492]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eac:	4a7a      	ldr	r2, [pc, #488]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d03c      	beq.n	8001f3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01c      	beq.n	8001f02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ec8:	4b73      	ldr	r3, [pc, #460]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001eca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ece:	4a72      	ldr	r2, [pc, #456]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed8:	f7ff f988 	bl	80011ec <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ee0:	f7ff f984 	bl	80011ec <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e122      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ef2:	4b69      	ldr	r3, [pc, #420]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001ef4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0ef      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x5cc>
 8001f00:	e01b      	b.n	8001f3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f02:	4b65      	ldr	r3, [pc, #404]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001f04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f08:	4a63      	ldr	r2, [pc, #396]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001f0a:	f023 0301 	bic.w	r3, r3, #1
 8001f0e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f12:	f7ff f96b 	bl	80011ec <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f1a:	f7ff f967 	bl	80011ec <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e105      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1ef      	bne.n	8001f1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 80f9 	beq.w	8002136 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	f040 80cf 	bne.w	80020ec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f4e:	4b52      	ldr	r3, [pc, #328]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 0203 	and.w	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d12c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d123      	bne.n	8001fbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d11b      	bne.n	8001fbc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d113      	bne.n	8001fbc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f9e:	085b      	lsrs	r3, r3, #1
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d109      	bne.n	8001fbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	085b      	lsrs	r3, r3, #1
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d071      	beq.n	80020a0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2b0c      	cmp	r3, #12
 8001fc0:	d068      	beq.n	8002094 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fc2:	4b35      	ldr	r3, [pc, #212]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d105      	bne.n	8001fda <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fce:	4b32      	ldr	r3, [pc, #200]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0ac      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fde:	4b2e      	ldr	r3, [pc, #184]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8001fe4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fe8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fea:	f7ff f8ff 	bl	80011ec <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7ff f8fb 	bl	80011ec <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e099      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002004:	4b24      	ldr	r3, [pc, #144]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002010:	4b21      	ldr	r3, [pc, #132]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	4b21      	ldr	r3, [pc, #132]	@ (800209c <HAL_RCC_OscConfig+0x788>)
 8002016:	4013      	ands	r3, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002020:	3a01      	subs	r2, #1
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	4311      	orrs	r1, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800202a:	0212      	lsls	r2, r2, #8
 800202c:	4311      	orrs	r1, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002032:	0852      	lsrs	r2, r2, #1
 8002034:	3a01      	subs	r2, #1
 8002036:	0552      	lsls	r2, r2, #21
 8002038:	4311      	orrs	r1, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800203e:	0852      	lsrs	r2, r2, #1
 8002040:	3a01      	subs	r2, #1
 8002042:	0652      	lsls	r2, r2, #25
 8002044:	4311      	orrs	r1, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800204a:	06d2      	lsls	r2, r2, #27
 800204c:	430a      	orrs	r2, r1
 800204e:	4912      	ldr	r1, [pc, #72]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8002050:	4313      	orrs	r3, r2
 8002052:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002054:	4b10      	ldr	r3, [pc, #64]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0f      	ldr	r2, [pc, #60]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 800205a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800205e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002060:	4b0d      	ldr	r3, [pc, #52]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4a0c      	ldr	r2, [pc, #48]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8002066:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800206a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800206c:	f7ff f8be 	bl	80011ec <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002074:	f7ff f8ba 	bl	80011ec <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e058      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002086:	4b04      	ldr	r3, [pc, #16]	@ (8002098 <HAL_RCC_OscConfig+0x784>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002092:	e050      	b.n	8002136 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e04f      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
 8002098:	40021000 	.word	0x40021000
 800209c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a0:	4b27      	ldr	r3, [pc, #156]	@ (8002140 <HAL_RCC_OscConfig+0x82c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d144      	bne.n	8002136 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020ac:	4b24      	ldr	r3, [pc, #144]	@ (8002140 <HAL_RCC_OscConfig+0x82c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a23      	ldr	r2, [pc, #140]	@ (8002140 <HAL_RCC_OscConfig+0x82c>)
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020b8:	4b21      	ldr	r3, [pc, #132]	@ (8002140 <HAL_RCC_OscConfig+0x82c>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a20      	ldr	r2, [pc, #128]	@ (8002140 <HAL_RCC_OscConfig+0x82c>)
 80020be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020c4:	f7ff f892 	bl	80011ec <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020cc:	f7ff f88e 	bl	80011ec <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e02c      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020de:	4b18      	ldr	r3, [pc, #96]	@ (8002140 <HAL_RCC_OscConfig+0x82c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x7b8>
 80020ea:	e024      	b.n	8002136 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d01f      	beq.n	8002132 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f2:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <HAL_RCC_OscConfig+0x82c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a12      	ldr	r2, [pc, #72]	@ (8002140 <HAL_RCC_OscConfig+0x82c>)
 80020f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7ff f875 	bl	80011ec <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002106:	f7ff f871 	bl	80011ec <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e00f      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002118:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <HAL_RCC_OscConfig+0x82c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f0      	bne.n	8002106 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <HAL_RCC_OscConfig+0x82c>)
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	4905      	ldr	r1, [pc, #20]	@ (8002140 <HAL_RCC_OscConfig+0x82c>)
 800212a:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <HAL_RCC_OscConfig+0x830>)
 800212c:	4013      	ands	r3, r2
 800212e:	60cb      	str	r3, [r1, #12]
 8002130:	e001      	b.n	8002136 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	feeefffc 	.word	0xfeeefffc

08002148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e11d      	b.n	800239c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002160:	4b90      	ldr	r3, [pc, #576]	@ (80023a4 <HAL_RCC_ClockConfig+0x25c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d910      	bls.n	8002190 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b8d      	ldr	r3, [pc, #564]	@ (80023a4 <HAL_RCC_ClockConfig+0x25c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 020f 	bic.w	r2, r3, #15
 8002176:	498b      	ldr	r1, [pc, #556]	@ (80023a4 <HAL_RCC_ClockConfig+0x25c>)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b89      	ldr	r3, [pc, #548]	@ (80023a4 <HAL_RCC_ClockConfig+0x25c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e105      	b.n	800239c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d010      	beq.n	80021be <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	4b81      	ldr	r3, [pc, #516]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d908      	bls.n	80021be <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ac:	4b7e      	ldr	r3, [pc, #504]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	497b      	ldr	r1, [pc, #492]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d079      	beq.n	80022be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d11e      	bne.n	8002210 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d2:	4b75      	ldr	r3, [pc, #468]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e0dc      	b.n	800239c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80021e2:	f000 f9d1 	bl	8002588 <RCC_GetSysClockFreqFromPLLSource>
 80021e6:	4603      	mov	r3, r0
 80021e8:	4a70      	ldr	r2, [pc, #448]	@ (80023ac <HAL_RCC_ClockConfig+0x264>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d946      	bls.n	800227c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80021ee:	4b6e      	ldr	r3, [pc, #440]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d140      	bne.n	800227c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021fa:	4b6b      	ldr	r3, [pc, #428]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002202:	4a69      	ldr	r2, [pc, #420]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 8002204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002208:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800220a:	2380      	movs	r3, #128	@ 0x80
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	e035      	b.n	800227c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d107      	bne.n	8002228 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002218:	4b63      	ldr	r3, [pc, #396]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d115      	bne.n	8002250 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b9      	b.n	800239c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d107      	bne.n	8002240 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002230:	4b5d      	ldr	r3, [pc, #372]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d109      	bne.n	8002250 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0ad      	b.n	800239c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002240:	4b59      	ldr	r3, [pc, #356]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0a5      	b.n	800239c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002250:	f000 f8b4 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8002254:	4603      	mov	r3, r0
 8002256:	4a55      	ldr	r2, [pc, #340]	@ (80023ac <HAL_RCC_ClockConfig+0x264>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d90f      	bls.n	800227c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800225c:	4b52      	ldr	r3, [pc, #328]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d109      	bne.n	800227c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002268:	4b4f      	ldr	r3, [pc, #316]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002270:	4a4d      	ldr	r2, [pc, #308]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 8002272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002276:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002278:	2380      	movs	r3, #128	@ 0x80
 800227a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800227c:	4b4a      	ldr	r3, [pc, #296]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 0203 	bic.w	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	4947      	ldr	r1, [pc, #284]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800228e:	f7fe ffad 	bl	80011ec <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002294:	e00a      	b.n	80022ac <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002296:	f7fe ffa9 	bl	80011ec <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e077      	b.n	800239c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ac:	4b3e      	ldr	r3, [pc, #248]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 020c 	and.w	r2, r3, #12
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d1eb      	bne.n	8002296 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b80      	cmp	r3, #128	@ 0x80
 80022c2:	d105      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022c4:	4b38      	ldr	r3, [pc, #224]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4a37      	ldr	r2, [pc, #220]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 80022ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022ce:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d010      	beq.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	4b31      	ldr	r3, [pc, #196]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d208      	bcs.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ec:	4b2e      	ldr	r3, [pc, #184]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	492b      	ldr	r1, [pc, #172]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022fe:	4b29      	ldr	r3, [pc, #164]	@ (80023a4 <HAL_RCC_ClockConfig+0x25c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d210      	bcs.n	800232e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230c:	4b25      	ldr	r3, [pc, #148]	@ (80023a4 <HAL_RCC_ClockConfig+0x25c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 020f 	bic.w	r2, r3, #15
 8002314:	4923      	ldr	r1, [pc, #140]	@ (80023a4 <HAL_RCC_ClockConfig+0x25c>)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231c:	4b21      	ldr	r3, [pc, #132]	@ (80023a4 <HAL_RCC_ClockConfig+0x25c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d001      	beq.n	800232e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e036      	b.n	800239c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d008      	beq.n	800234c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800233a:	4b1b      	ldr	r3, [pc, #108]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	4918      	ldr	r1, [pc, #96]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d009      	beq.n	800236c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002358:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4910      	ldr	r1, [pc, #64]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 8002368:	4313      	orrs	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800236c:	f000 f826 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8002370:	4602      	mov	r2, r0
 8002372:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <HAL_RCC_ClockConfig+0x260>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	490c      	ldr	r1, [pc, #48]	@ (80023b0 <HAL_RCC_ClockConfig+0x268>)
 800237e:	5ccb      	ldrb	r3, [r1, r3]
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
 8002388:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <HAL_RCC_ClockConfig+0x26c>)
 800238a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800238c:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <HAL_RCC_ClockConfig+0x270>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe fedb 	bl	800114c <HAL_InitTick>
 8002396:	4603      	mov	r3, r0
 8002398:	73fb      	strb	r3, [r7, #15]

  return status;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40022000 	.word	0x40022000
 80023a8:	40021000 	.word	0x40021000
 80023ac:	04c4b400 	.word	0x04c4b400
 80023b0:	08004ef8 	.word	0x08004ef8
 80023b4:	20000020 	.word	0x20000020
 80023b8:	20000024 	.word	0x20000024

080023bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	@ 0x24
 80023c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	2300      	movs	r3, #0
 80023c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ca:	4b3e      	ldr	r3, [pc, #248]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023d4:	4b3b      	ldr	r3, [pc, #236]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x34>
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	2b0c      	cmp	r3, #12
 80023e8:	d121      	bne.n	800242e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d11e      	bne.n	800242e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023f0:	4b34      	ldr	r3, [pc, #208]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d107      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023fc:	4b31      	ldr	r3, [pc, #196]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	e005      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800240c:	4b2d      	ldr	r3, [pc, #180]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002418:	4a2b      	ldr	r2, [pc, #172]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002420:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10d      	bne.n	8002444 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2b04      	cmp	r3, #4
 8002432:	d102      	bne.n	800243a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002434:	4b25      	ldr	r3, [pc, #148]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002436:	61bb      	str	r3, [r7, #24]
 8002438:	e004      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b08      	cmp	r3, #8
 800243e:	d101      	bne.n	8002444 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002440:	4b23      	ldr	r3, [pc, #140]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002442:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	2b0c      	cmp	r3, #12
 8002448:	d134      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800244a:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d003      	beq.n	8002462 <HAL_RCC_GetSysClockFreq+0xa6>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d003      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0xac>
 8002460:	e005      	b.n	800246e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002462:	4b1a      	ldr	r3, [pc, #104]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002464:	617b      	str	r3, [r7, #20]
      break;
 8002466:	e005      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002468:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800246a:	617b      	str	r3, [r7, #20]
      break;
 800246c:	e002      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	617b      	str	r3, [r7, #20]
      break;
 8002472:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002474:	4b13      	ldr	r3, [pc, #76]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	3301      	adds	r3, #1
 8002480:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002482:	4b10      	ldr	r3, [pc, #64]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	fb03 f202 	mul.w	r2, r3, r2
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	fbb2 f3f3 	udiv	r3, r2, r3
 8002498:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800249a:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	0e5b      	lsrs	r3, r3, #25
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	3301      	adds	r3, #1
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024b4:	69bb      	ldr	r3, [r7, #24]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3724      	adds	r7, #36	@ 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	08004f08 	.word	0x08004f08
 80024cc:	00f42400 	.word	0x00f42400
 80024d0:	007a1200 	.word	0x007a1200

080024d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024e0:	4b27      	ldr	r3, [pc, #156]	@ (8002580 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024ec:	f7ff f93e 	bl	800176c <HAL_PWREx_GetVoltageRange>
 80024f0:	6178      	str	r0, [r7, #20]
 80024f2:	e014      	b.n	800251e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024f4:	4b22      	ldr	r3, [pc, #136]	@ (8002580 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f8:	4a21      	ldr	r2, [pc, #132]	@ (8002580 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002500:	4b1f      	ldr	r3, [pc, #124]	@ (8002580 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800250c:	f7ff f92e 	bl	800176c <HAL_PWREx_GetVoltageRange>
 8002510:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002512:	4b1b      	ldr	r3, [pc, #108]	@ (8002580 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002516:	4a1a      	ldr	r2, [pc, #104]	@ (8002580 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002518:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800251c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002524:	d10b      	bne.n	800253e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b80      	cmp	r3, #128	@ 0x80
 800252a:	d913      	bls.n	8002554 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002530:	d902      	bls.n	8002538 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002532:	2302      	movs	r3, #2
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	e00d      	b.n	8002554 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002538:	2301      	movs	r3, #1
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	e00a      	b.n	8002554 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b7f      	cmp	r3, #127	@ 0x7f
 8002542:	d902      	bls.n	800254a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002544:	2302      	movs	r3, #2
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	e004      	b.n	8002554 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b70      	cmp	r3, #112	@ 0x70
 800254e:	d101      	bne.n	8002554 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002550:	2301      	movs	r3, #1
 8002552:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002554:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f023 020f 	bic.w	r2, r3, #15
 800255c:	4909      	ldr	r1, [pc, #36]	@ (8002584 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002564:	4b07      	ldr	r3, [pc, #28]	@ (8002584 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	429a      	cmp	r2, r3
 8002570:	d001      	beq.n	8002576 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	40022000 	.word	0x40022000

08002588 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800258e:	4b2d      	ldr	r3, [pc, #180]	@ (8002644 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d00b      	beq.n	80025b6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d825      	bhi.n	80025f0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d008      	beq.n	80025bc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d11f      	bne.n	80025f0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80025b0:	4b25      	ldr	r3, [pc, #148]	@ (8002648 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80025b2:	613b      	str	r3, [r7, #16]
    break;
 80025b4:	e01f      	b.n	80025f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80025b6:	4b25      	ldr	r3, [pc, #148]	@ (800264c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80025b8:	613b      	str	r3, [r7, #16]
    break;
 80025ba:	e01c      	b.n	80025f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025bc:	4b21      	ldr	r3, [pc, #132]	@ (8002644 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d107      	bne.n	80025d8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002644 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e005      	b.n	80025e4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002644 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80025e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002650 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ec:	613b      	str	r3, [r7, #16]
    break;
 80025ee:	e002      	b.n	80025f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
    break;
 80025f4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025f6:	4b13      	ldr	r3, [pc, #76]	@ (8002644 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	3301      	adds	r3, #1
 8002602:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002604:	4b0f      	ldr	r3, [pc, #60]	@ (8002644 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	0a1b      	lsrs	r3, r3, #8
 800260a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	fb03 f202 	mul.w	r2, r3, r2
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	fbb2 f3f3 	udiv	r3, r2, r3
 800261a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800261c:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0e5b      	lsrs	r3, r3, #25
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	3301      	adds	r3, #1
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	fbb2 f3f3 	udiv	r3, r2, r3
 8002634:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002636:	683b      	ldr	r3, [r7, #0]
}
 8002638:	4618      	mov	r0, r3
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	40021000 	.word	0x40021000
 8002648:	00f42400 	.word	0x00f42400
 800264c:	007a1200 	.word	0x007a1200
 8002650:	08004f08 	.word	0x08004f08

08002654 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e095      	b.n	8002792 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	2b00      	cmp	r3, #0
 800266c:	d108      	bne.n	8002680 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002676:	d009      	beq.n	800268c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
 800267e:	e005      	b.n	800268c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fe fc8a 	bl	8000fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80026cc:	d902      	bls.n	80026d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	e002      	b.n	80026da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80026d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80026e2:	d007      	beq.n	80026f4 <HAL_SPI_Init+0xa0>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80026ec:	d002      	beq.n	80026f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002736:	ea42 0103 	orr.w	r1, r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	0c1b      	lsrs	r3, r3, #16
 8002750:	f003 0204 	and.w	r2, r3, #4
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002770:	ea42 0103 	orr.w	r1, r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b088      	sub	sp, #32
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	4613      	mov	r3, r2
 80027a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_SPI_Transmit+0x22>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e15f      	b.n	8002a7c <HAL_SPI_Transmit+0x2e2>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027c4:	f7fe fd12 	bl	80011ec <HAL_GetTick>
 80027c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d002      	beq.n	80027e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027da:	2302      	movs	r3, #2
 80027dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027de:	e148      	b.n	8002a72 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_SPI_Transmit+0x52>
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d102      	bne.n	80027f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027f0:	e13f      	b.n	8002a72 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2203      	movs	r2, #3
 80027f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	88fa      	ldrh	r2, [r7, #6]
 800280a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	88fa      	ldrh	r2, [r7, #6]
 8002810:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800283c:	d10f      	bne.n	800285e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800284c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800285c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002868:	2b40      	cmp	r3, #64	@ 0x40
 800286a:	d007      	beq.n	800287c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800287a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002884:	d94f      	bls.n	8002926 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <HAL_SPI_Transmit+0xfa>
 800288e:	8afb      	ldrh	r3, [r7, #22]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d142      	bne.n	800291a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002898:	881a      	ldrh	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a4:	1c9a      	adds	r2, r3, #2
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028b8:	e02f      	b.n	800291a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d112      	bne.n	80028ee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028cc:	881a      	ldrh	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d8:	1c9a      	adds	r2, r3, #2
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80028ec:	e015      	b.n	800291a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028ee:	f7fe fc7d 	bl	80011ec <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d803      	bhi.n	8002906 <HAL_SPI_Transmit+0x16c>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002904:	d102      	bne.n	800290c <HAL_SPI_Transmit+0x172>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d106      	bne.n	800291a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002918:	e0ab      	b.n	8002a72 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800291e:	b29b      	uxth	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ca      	bne.n	80028ba <HAL_SPI_Transmit+0x120>
 8002924:	e080      	b.n	8002a28 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <HAL_SPI_Transmit+0x19a>
 800292e:	8afb      	ldrh	r3, [r7, #22]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d174      	bne.n	8002a1e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d912      	bls.n	8002964 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002942:	881a      	ldrh	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294e:	1c9a      	adds	r2, r3, #2
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b02      	subs	r3, #2
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002962:	e05c      	b.n	8002a1e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	330c      	adds	r3, #12
 800296e:	7812      	ldrb	r2, [r2, #0]
 8002970:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800298a:	e048      	b.n	8002a1e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b02      	cmp	r3, #2
 8002998:	d12b      	bne.n	80029f2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d912      	bls.n	80029ca <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a8:	881a      	ldrh	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b4:	1c9a      	adds	r2, r3, #2
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b02      	subs	r3, #2
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80029c8:	e029      	b.n	8002a1e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	330c      	adds	r3, #12
 80029d4:	7812      	ldrb	r2, [r2, #0]
 80029d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80029f0:	e015      	b.n	8002a1e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029f2:	f7fe fbfb 	bl	80011ec <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d803      	bhi.n	8002a0a <HAL_SPI_Transmit+0x270>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a08:	d102      	bne.n	8002a10 <HAL_SPI_Transmit+0x276>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d106      	bne.n	8002a1e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002a1c:	e029      	b.n	8002a72 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1b1      	bne.n	800298c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	6839      	ldr	r1, [r7, #0]
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f947 	bl	8002cc0 <SPI_EndRxTxTransaction>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10a      	bne.n	8002a5c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	77fb      	strb	r3, [r7, #31]
 8002a68:	e003      	b.n	8002a72 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002a7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3720      	adds	r7, #32
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a94:	f7fe fbaa 	bl	80011ec <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002aa4:	f7fe fba2 	bl	80011ec <HAL_GetTick>
 8002aa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002aaa:	4b39      	ldr	r3, [pc, #228]	@ (8002b90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	015b      	lsls	r3, r3, #5
 8002ab0:	0d1b      	lsrs	r3, r3, #20
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	fb02 f303 	mul.w	r3, r2, r3
 8002ab8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002aba:	e054      	b.n	8002b66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac2:	d050      	beq.n	8002b66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ac4:	f7fe fb92 	bl	80011ec <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d902      	bls.n	8002ada <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d13d      	bne.n	8002b56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ae8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002af2:	d111      	bne.n	8002b18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002afc:	d004      	beq.n	8002b08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b06:	d107      	bne.n	8002b18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b20:	d10f      	bne.n	8002b42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e017      	b.n	8002b86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	bf0c      	ite	eq
 8002b76:	2301      	moveq	r3, #1
 8002b78:	2300      	movne	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d19b      	bne.n	8002abc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000020 	.word	0x20000020

08002b94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08a      	sub	sp, #40	@ 0x28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ba6:	f7fe fb21 	bl	80011ec <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002bb6:	f7fe fb19 	bl	80011ec <HAL_GetTick>
 8002bba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	330c      	adds	r3, #12
 8002bc2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002bc4:	4b3d      	ldr	r3, [pc, #244]	@ (8002cbc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00da      	lsls	r2, r3, #3
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	0d1b      	lsrs	r3, r3, #20
 8002bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd6:	fb02 f303 	mul.w	r3, r2, r3
 8002bda:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002bdc:	e060      	b.n	8002ca0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002be4:	d107      	bne.n	8002bf6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d050      	beq.n	8002ca0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bfe:	f7fe faf5 	bl	80011ec <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d902      	bls.n	8002c14 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d13d      	bne.n	8002c90 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c2c:	d111      	bne.n	8002c52 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c36:	d004      	beq.n	8002c42 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c40:	d107      	bne.n	8002c52 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c5a:	d10f      	bne.n	8002c7c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e010      	b.n	8002cb2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d196      	bne.n	8002bde <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3728      	adds	r7, #40	@ 0x28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000020 	.word	0x20000020

08002cc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f7ff ff5b 	bl	8002b94 <SPI_WaitFifoStateUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d007      	beq.n	8002cf4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce8:	f043 0220 	orr.w	r2, r3, #32
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e027      	b.n	8002d44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2180      	movs	r1, #128	@ 0x80
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f7ff fec0 	bl	8002a84 <SPI_WaitFlagStateUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d0e:	f043 0220 	orr.w	r2, r3, #32
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e014      	b.n	8002d44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f7ff ff34 	bl	8002b94 <SPI_WaitFifoStateUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d36:	f043 0220 	orr.w	r2, r3, #32
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e000      	b.n	8002d44 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <memset>:
 8002d4c:	4402      	add	r2, r0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d100      	bne.n	8002d56 <memset+0xa>
 8002d54:	4770      	bx	lr
 8002d56:	f803 1b01 	strb.w	r1, [r3], #1
 8002d5a:	e7f9      	b.n	8002d50 <memset+0x4>

08002d5c <__libc_init_array>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	4d0d      	ldr	r5, [pc, #52]	@ (8002d94 <__libc_init_array+0x38>)
 8002d60:	4c0d      	ldr	r4, [pc, #52]	@ (8002d98 <__libc_init_array+0x3c>)
 8002d62:	1b64      	subs	r4, r4, r5
 8002d64:	10a4      	asrs	r4, r4, #2
 8002d66:	2600      	movs	r6, #0
 8002d68:	42a6      	cmp	r6, r4
 8002d6a:	d109      	bne.n	8002d80 <__libc_init_array+0x24>
 8002d6c:	4d0b      	ldr	r5, [pc, #44]	@ (8002d9c <__libc_init_array+0x40>)
 8002d6e:	4c0c      	ldr	r4, [pc, #48]	@ (8002da0 <__libc_init_array+0x44>)
 8002d70:	f000 f818 	bl	8002da4 <_init>
 8002d74:	1b64      	subs	r4, r4, r5
 8002d76:	10a4      	asrs	r4, r4, #2
 8002d78:	2600      	movs	r6, #0
 8002d7a:	42a6      	cmp	r6, r4
 8002d7c:	d105      	bne.n	8002d8a <__libc_init_array+0x2e>
 8002d7e:	bd70      	pop	{r4, r5, r6, pc}
 8002d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d84:	4798      	blx	r3
 8002d86:	3601      	adds	r6, #1
 8002d88:	e7ee      	b.n	8002d68 <__libc_init_array+0xc>
 8002d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d8e:	4798      	blx	r3
 8002d90:	3601      	adds	r6, #1
 8002d92:	e7f2      	b.n	8002d7a <__libc_init_array+0x1e>
 8002d94:	08004f38 	.word	0x08004f38
 8002d98:	08004f38 	.word	0x08004f38
 8002d9c:	08004f38 	.word	0x08004f38
 8002da0:	08004f3c 	.word	0x08004f3c

08002da4 <_init>:
 8002da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da6:	bf00      	nop
 8002da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002daa:	bc08      	pop	{r3}
 8002dac:	469e      	mov	lr, r3
 8002dae:	4770      	bx	lr

08002db0 <_fini>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	bf00      	nop
 8002db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db6:	bc08      	pop	{r3}
 8002db8:	469e      	mov	lr, r3
 8002dba:	4770      	bx	lr
