
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006958  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c4  08006b18  08006b18  00007b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cdc  08008cdc  0000a078  2**0
                  CONTENTS
  4 .ARM          00000008  08008cdc  08008cdc  00009cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ce4  08008ce4  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ce4  08008ce4  00009ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ce8  08008ce8  00009ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08008cec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000078  08008d64  0000a078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08008d64  0000a2e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011352  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c0  00000000  00000000  0001b3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  0001dac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002a0a0  00000000  00000000  0001e818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001177f  00000000  00000000  000488b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ffd9f  00000000  00000000  0005a037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00159dd6  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000a44  00000000  00000000  00159e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003af8  00000000  00000000  0015a860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0015e358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000078 	.word	0x20000078
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006b00 	.word	0x08006b00

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	08006b00 	.word	0x08006b00

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ILI9341_Select>:


#include "stm32l4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2110      	movs	r1, #16
 8000598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059c:	f001 fd18 	bl	8001fd0 <HAL_GPIO_WritePin>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2110      	movs	r1, #16
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b0:	f001 fd0e 	bl	8001fd0 <HAL_GPIO_WritePin>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <ILI9341_Reset>:

static void ILI9341_Reset() {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2101      	movs	r1, #1
 80005c0:	4806      	ldr	r0, [pc, #24]	@ (80005dc <ILI9341_Reset+0x24>)
 80005c2:	f001 fd05 	bl	8001fd0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80005c6:	2005      	movs	r0, #5
 80005c8:	f001 f980 	bl	80018cc <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2101      	movs	r1, #1
 80005d0:	4802      	ldr	r0, [pc, #8]	@ (80005dc <ILI9341_Reset+0x24>)
 80005d2:	f001 fcfd 	bl	8001fd0 <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	48000400 	.word	0x48000400

080005e0 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2102      	movs	r1, #2
 80005ee:	4807      	ldr	r0, [pc, #28]	@ (800060c <ILI9341_WriteCommand+0x2c>)
 80005f0:	f001 fcee 	bl	8001fd0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80005f4:	1df9      	adds	r1, r7, #7
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	2201      	movs	r2, #1
 80005fc:	4804      	ldr	r0, [pc, #16]	@ (8000610 <ILI9341_WriteCommand+0x30>)
 80005fe:	f003 fa66 	bl	8003ace <HAL_SPI_Transmit>

}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	48000400 	.word	0x48000400
 8000610:	20000094 	.word	0x20000094

08000614 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	2102      	movs	r1, #2
 8000622:	4811      	ldr	r0, [pc, #68]	@ (8000668 <ILI9341_WriteData+0x54>)
 8000624:	f001 fcd4 	bl	8001fd0 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000628:	e015      	b.n	8000656 <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000630:	bf28      	it	cs
 8000632:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000636:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000638:	89fa      	ldrh	r2, [r7, #14]
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	6879      	ldr	r1, [r7, #4]
 8000640:	480a      	ldr	r0, [pc, #40]	@ (800066c <ILI9341_WriteData+0x58>)
 8000642:	f003 fa44 	bl	8003ace <HAL_SPI_Transmit>

        buff += chunk_size;
 8000646:	89fb      	ldrh	r3, [r7, #14]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 800064e:	89fb      	ldrh	r3, [r7, #14]
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1e6      	bne.n	800062a <ILI9341_WriteData+0x16>
    }
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	48000400 	.word	0x48000400
 800066c:	20000094 	.word	0x20000094

08000670 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	4604      	mov	r4, r0
 8000678:	4608      	mov	r0, r1
 800067a:	4611      	mov	r1, r2
 800067c:	461a      	mov	r2, r3
 800067e:	4623      	mov	r3, r4
 8000680:	80fb      	strh	r3, [r7, #6]
 8000682:	4603      	mov	r3, r0
 8000684:	80bb      	strh	r3, [r7, #4]
 8000686:	460b      	mov	r3, r1
 8000688:	807b      	strh	r3, [r7, #2]
 800068a:	4613      	mov	r3, r2
 800068c:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 800068e:	202a      	movs	r0, #42	@ 0x2a
 8000690:	f7ff ffa6 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	0a1b      	lsrs	r3, r3, #8
 8000698:	b29b      	uxth	r3, r3
 800069a:	b2db      	uxtb	r3, r3
 800069c:	733b      	strb	r3, [r7, #12]
 800069e:	88fb      	ldrh	r3, [r7, #6]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	737b      	strb	r3, [r7, #13]
 80006a4:	887b      	ldrh	r3, [r7, #2]
 80006a6:	0a1b      	lsrs	r3, r3, #8
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	73bb      	strb	r3, [r7, #14]
 80006ae:	887b      	ldrh	r3, [r7, #2]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2104      	movs	r1, #4
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffaa 	bl	8000614 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80006c0:	202b      	movs	r0, #43	@ 0x2b
 80006c2:	f7ff ff8d 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80006c6:	88bb      	ldrh	r3, [r7, #4]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	723b      	strb	r3, [r7, #8]
 80006d0:	88bb      	ldrh	r3, [r7, #4]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	727b      	strb	r3, [r7, #9]
 80006d6:	883b      	ldrh	r3, [r7, #0]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	b29b      	uxth	r3, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	72bb      	strb	r3, [r7, #10]
 80006e0:	883b      	ldrh	r3, [r7, #0]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2104      	movs	r1, #4
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ff91 	bl	8000614 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80006f2:	202c      	movs	r0, #44	@ 0x2c
 80006f4:	f7ff ff74 	bl	80005e0 <ILI9341_WriteCommand>
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd90      	pop	{r4, r7, pc}

08000700 <ILI9341_Init>:

void ILI9341_Init() {
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b09b      	sub	sp, #108	@ 0x6c
 8000704:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000706:	f7ff ff43 	bl	8000590 <ILI9341_Select>
    ILI9341_Reset();
 800070a:	f7ff ff55 	bl	80005b8 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 800070e:	2001      	movs	r0, #1
 8000710:	f7ff ff66 	bl	80005e0 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000714:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000718:	f001 f8d8 	bl	80018cc <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 800071c:	20cb      	movs	r0, #203	@ 0xcb
 800071e:	f7ff ff5f 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8000722:	4a87      	ldr	r2, [pc, #540]	@ (8000940 <ILI9341_Init+0x240>)
 8000724:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000728:	e892 0003 	ldmia.w	r2, {r0, r1}
 800072c:	6018      	str	r0, [r3, #0]
 800072e:	3304      	adds	r3, #4
 8000730:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000732:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000736:	2105      	movs	r1, #5
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff6b 	bl	8000614 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 800073e:	20cf      	movs	r0, #207	@ 0xcf
 8000740:	f7ff ff4e 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000744:	4a7f      	ldr	r2, [pc, #508]	@ (8000944 <ILI9341_Init+0x244>)
 8000746:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800074a:	6812      	ldr	r2, [r2, #0]
 800074c:	4611      	mov	r1, r2
 800074e:	8019      	strh	r1, [r3, #0]
 8000750:	3302      	adds	r3, #2
 8000752:	0c12      	lsrs	r2, r2, #16
 8000754:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000756:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800075a:	2103      	movs	r1, #3
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff59 	bl	8000614 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8000762:	20e8      	movs	r0, #232	@ 0xe8
 8000764:	f7ff ff3c 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000768:	4a77      	ldr	r2, [pc, #476]	@ (8000948 <ILI9341_Init+0x248>)
 800076a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800076e:	6812      	ldr	r2, [r2, #0]
 8000770:	4611      	mov	r1, r2
 8000772:	8019      	strh	r1, [r3, #0]
 8000774:	3302      	adds	r3, #2
 8000776:	0c12      	lsrs	r2, r2, #16
 8000778:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800077a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800077e:	2103      	movs	r1, #3
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff47 	bl	8000614 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8000786:	20ea      	movs	r0, #234	@ 0xea
 8000788:	f7ff ff2a 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 800078c:	2300      	movs	r3, #0
 800078e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 8000792:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000796:	2102      	movs	r1, #2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff3b 	bl	8000614 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800079e:	20ed      	movs	r0, #237	@ 0xed
 80007a0:	f7ff ff1e 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80007a4:	4b69      	ldr	r3, [pc, #420]	@ (800094c <ILI9341_Init+0x24c>)
 80007a6:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 80007a8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80007ac:	2104      	movs	r1, #4
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ff30 	bl	8000614 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80007b4:	20f7      	movs	r0, #247	@ 0xf7
 80007b6:	f7ff ff13 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 80007ba:	2320      	movs	r3, #32
 80007bc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80007c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007c4:	2101      	movs	r1, #1
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff24 	bl	8000614 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 80007cc:	20c0      	movs	r0, #192	@ 0xc0
 80007ce:	f7ff ff07 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 80007d2:	2323      	movs	r3, #35	@ 0x23
 80007d4:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 80007d8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007dc:	2101      	movs	r1, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff18 	bl	8000614 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80007e4:	20c1      	movs	r0, #193	@ 0xc1
 80007e6:	f7ff fefb 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80007ea:	2310      	movs	r3, #16
 80007ec:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 80007f0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80007f4:	2101      	movs	r1, #1
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff0c 	bl	8000614 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80007fc:	20c5      	movs	r0, #197	@ 0xc5
 80007fe:	f7ff feef 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8000802:	f642 033e 	movw	r3, #10302	@ 0x283e
 8000806:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 800080a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800080e:	2102      	movs	r1, #2
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff feff 	bl	8000614 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8000816:	20c7      	movs	r0, #199	@ 0xc7
 8000818:	f7ff fee2 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 800081c:	2386      	movs	r3, #134	@ 0x86
 800081e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8000822:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000826:	2101      	movs	r1, #1
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fef3 	bl	8000614 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 800082e:	2036      	movs	r0, #54	@ 0x36
 8000830:	f7ff fed6 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8000834:	2348      	movs	r3, #72	@ 0x48
 8000836:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 800083a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800083e:	2101      	movs	r1, #1
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fee7 	bl	8000614 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8000846:	203a      	movs	r0, #58	@ 0x3a
 8000848:	f7ff feca 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 800084c:	2355      	movs	r3, #85	@ 0x55
 800084e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 8000852:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000856:	2101      	movs	r1, #1
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fedb 	bl	8000614 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 800085e:	20b1      	movs	r0, #177	@ 0xb1
 8000860:	f7ff febe 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000864:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000868:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 800086a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800086e:	2102      	movs	r1, #2
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fecf 	bl	8000614 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8000876:	20b6      	movs	r0, #182	@ 0xb6
 8000878:	f7ff feb2 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 800087c:	4a34      	ldr	r2, [pc, #208]	@ (8000950 <ILI9341_Init+0x250>)
 800087e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000882:	6812      	ldr	r2, [r2, #0]
 8000884:	4611      	mov	r1, r2
 8000886:	8019      	strh	r1, [r3, #0]
 8000888:	3302      	adds	r3, #2
 800088a:	0c12      	lsrs	r2, r2, #16
 800088c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800088e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000892:	2103      	movs	r1, #3
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff febd 	bl	8000614 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 800089a:	20f2      	movs	r0, #242	@ 0xf2
 800089c:	f7ff fea0 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 80008a0:	2300      	movs	r3, #0
 80008a2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 80008a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008aa:	2101      	movs	r1, #1
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff feb1 	bl	8000614 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80008b2:	2026      	movs	r0, #38	@ 0x26
 80008b4:	f7ff fe94 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80008b8:	2301      	movs	r3, #1
 80008ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 80008be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c2:	2101      	movs	r1, #1
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fea5 	bl	8000614 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 80008ca:	20e0      	movs	r0, #224	@ 0xe0
 80008cc:	f7ff fe88 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80008d0:	4b20      	ldr	r3, [pc, #128]	@ (8000954 <ILI9341_Init+0x254>)
 80008d2:	f107 0414 	add.w	r4, r7, #20
 80008d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008d8:	c407      	stmia	r4!, {r0, r1, r2}
 80008da:	8023      	strh	r3, [r4, #0]
 80008dc:	3402      	adds	r4, #2
 80008de:	0c1b      	lsrs	r3, r3, #16
 80008e0:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	210f      	movs	r1, #15
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fe93 	bl	8000614 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80008ee:	20e1      	movs	r0, #225	@ 0xe1
 80008f0:	f7ff fe76 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80008f4:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <ILI9341_Init+0x258>)
 80008f6:	1d3c      	adds	r4, r7, #4
 80008f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008fa:	c407      	stmia	r4!, {r0, r1, r2}
 80008fc:	8023      	strh	r3, [r4, #0]
 80008fe:	3402      	adds	r4, #2
 8000900:	0c1b      	lsrs	r3, r3, #16
 8000902:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	210f      	movs	r1, #15
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fe83 	bl	8000614 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800090e:	2011      	movs	r0, #17
 8000910:	f7ff fe66 	bl	80005e0 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000914:	2078      	movs	r0, #120	@ 0x78
 8000916:	f000 ffd9 	bl	80018cc <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 800091a:	2029      	movs	r0, #41	@ 0x29
 800091c:	f7ff fe60 	bl	80005e0 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8000920:	2036      	movs	r0, #54	@ 0x36
 8000922:	f7ff fe5d 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8000926:	2348      	movs	r3, #72	@ 0x48
 8000928:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 800092a:	463b      	mov	r3, r7
 800092c:	2101      	movs	r1, #1
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fe70 	bl	8000614 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8000934:	f7ff fe36 	bl	80005a4 <ILI9341_Unselect>
}
 8000938:	bf00      	nop
 800093a:	376c      	adds	r7, #108	@ 0x6c
 800093c:	46bd      	mov	sp, r7
 800093e:	bd90      	pop	{r4, r7, pc}
 8000940:	08006b18 	.word	0x08006b18
 8000944:	08006b20 	.word	0x08006b20
 8000948:	08006b24 	.word	0x08006b24
 800094c:	81120364 	.word	0x81120364
 8000950:	08006b28 	.word	0x08006b28
 8000954:	08006b2c 	.word	0x08006b2c
 8000958:	08006b3c 	.word	0x08006b3c

0800095c <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800095c:	b082      	sub	sp, #8
 800095e:	b580      	push	{r7, lr}
 8000960:	b088      	sub	sp, #32
 8000962:	af00      	add	r7, sp, #0
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000966:	4603      	mov	r3, r0
 8000968:	80fb      	strh	r3, [r7, #6]
 800096a:	460b      	mov	r3, r1
 800096c:	80bb      	strh	r3, [r7, #4]
 800096e:	4613      	mov	r3, r2
 8000970:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000972:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000976:	461a      	mov	r2, r3
 8000978:	88fb      	ldrh	r3, [r7, #6]
 800097a:	4413      	add	r3, r2
 800097c:	b29b      	uxth	r3, r3
 800097e:	3b01      	subs	r3, #1
 8000980:	b29a      	uxth	r2, r3
 8000982:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000986:	4619      	mov	r1, r3
 8000988:	88bb      	ldrh	r3, [r7, #4]
 800098a:	440b      	add	r3, r1
 800098c:	b29b      	uxth	r3, r3
 800098e:	3b01      	subs	r3, #1
 8000990:	b29b      	uxth	r3, r3
 8000992:	88b9      	ldrh	r1, [r7, #4]
 8000994:	88f8      	ldrh	r0, [r7, #6]
 8000996:	f7ff fe6b 	bl	8000670 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
 800099e:	e041      	b.n	8000a24 <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 80009a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80009a2:	78fb      	ldrb	r3, [r7, #3]
 80009a4:	3b20      	subs	r3, #32
 80009a6:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80009aa:	fb01 f303 	mul.w	r3, r1, r3
 80009ae:	4619      	mov	r1, r3
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	440b      	add	r3, r1
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	4413      	add	r3, r2
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
 80009c0:	e027      	b.n	8000a12 <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00e      	beq.n	80009f0 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80009d2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	743b      	strb	r3, [r7, #16]
 80009dc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	2102      	movs	r1, #2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fe13 	bl	8000614 <ILI9341_WriteData>
 80009ee:	e00d      	b.n	8000a0c <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80009f0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80009f2:	0a1b      	lsrs	r3, r3, #8
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	733b      	strb	r3, [r7, #12]
 80009fa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	2102      	movs	r1, #2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fe04 	bl	8000614 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	61bb      	str	r3, [r7, #24]
 8000a12:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000a16:	461a      	mov	r2, r3
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d3d1      	bcc.n	80009c2 <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3301      	adds	r3, #1
 8000a22:	61fb      	str	r3, [r7, #28]
 8000a24:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000a28:	461a      	mov	r2, r3
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d3b7      	bcc.n	80009a0 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a3c:	b002      	add	sp, #8
 8000a3e:	4770      	bx	lr

08000a40 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a40:	b082      	sub	sp, #8
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af04      	add	r7, sp, #16
 8000a48:	603a      	str	r2, [r7, #0]
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	80fb      	strh	r3, [r7, #6]
 8000a50:	460b      	mov	r3, r1
 8000a52:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8000a54:	f7ff fd9c 	bl	8000590 <ILI9341_Select>

    while(*str) {
 8000a58:	e02e      	b.n	8000ab8 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	7d3a      	ldrb	r2, [r7, #20]
 8000a5e:	4413      	add	r3, r2
 8000a60:	2bef      	cmp	r3, #239	@ 0xef
 8000a62:	dd14      	ble.n	8000a8e <ILI9341_WriteString+0x4e>
            x = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000a68:	7d7b      	ldrb	r3, [r7, #21]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	88bb      	ldrh	r3, [r7, #4]
 8000a6e:	4413      	add	r3, r2
 8000a70:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8000a72:	88bb      	ldrh	r3, [r7, #4]
 8000a74:	7d7a      	ldrb	r2, [r7, #21]
 8000a76:	4413      	add	r3, r2
 8000a78:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a7c:	da21      	bge.n	8000ac2 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b20      	cmp	r3, #32
 8000a84:	d103      	bne.n	8000a8e <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	603b      	str	r3, [r7, #0]
                continue;
 8000a8c:	e014      	b.n	8000ab8 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	781a      	ldrb	r2, [r3, #0]
 8000a92:	88b9      	ldrh	r1, [r7, #4]
 8000a94:	88f8      	ldrh	r0, [r7, #6]
 8000a96:	8c3b      	ldrh	r3, [r7, #32]
 8000a98:	9302      	str	r3, [sp, #8]
 8000a9a:	8bbb      	ldrh	r3, [r7, #28]
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	f7ff ff5a 	bl	800095c <ILI9341_WriteChar>
        x += font.width;
 8000aa8:	7d3b      	ldrb	r3, [r7, #20]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	88fb      	ldrh	r3, [r7, #6]
 8000aae:	4413      	add	r3, r2
 8000ab0:	80fb      	strh	r3, [r7, #6]
        str++;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d1cc      	bne.n	8000a5a <ILI9341_WriteString+0x1a>
 8000ac0:	e000      	b.n	8000ac4 <ILI9341_WriteString+0x84>
                break;
 8000ac2:	bf00      	nop
    }

    ILI9341_Unselect();
 8000ac4:	f7ff fd6e 	bl	80005a4 <ILI9341_Unselect>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ad2:	b002      	add	sp, #8
 8000ad4:	4770      	bx	lr
	...

08000ad8 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4604      	mov	r4, r0
 8000ae0:	4608      	mov	r0, r1
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4623      	mov	r3, r4
 8000ae8:	80fb      	strh	r3, [r7, #6]
 8000aea:	4603      	mov	r3, r0
 8000aec:	80bb      	strh	r3, [r7, #4]
 8000aee:	460b      	mov	r3, r1
 8000af0:	807b      	strh	r3, [r7, #2]
 8000af2:	4613      	mov	r3, r2
 8000af4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	2bef      	cmp	r3, #239	@ 0xef
 8000afa:	d853      	bhi.n	8000ba4 <ILI9341_FillRectangle+0xcc>
 8000afc:	88bb      	ldrh	r3, [r7, #4]
 8000afe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b02:	d24f      	bcs.n	8000ba4 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000b04:	88fa      	ldrh	r2, [r7, #6]
 8000b06:	887b      	ldrh	r3, [r7, #2]
 8000b08:	4413      	add	r3, r2
 8000b0a:	2bf0      	cmp	r3, #240	@ 0xf0
 8000b0c:	dd03      	ble.n	8000b16 <ILI9341_FillRectangle+0x3e>
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000b14:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000b16:	88ba      	ldrh	r2, [r7, #4]
 8000b18:	883b      	ldrh	r3, [r7, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b20:	dd03      	ble.n	8000b2a <ILI9341_FillRectangle+0x52>
 8000b22:	88bb      	ldrh	r3, [r7, #4]
 8000b24:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000b28:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8000b2a:	f7ff fd31 	bl	8000590 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b2e:	88fa      	ldrh	r2, [r7, #6]
 8000b30:	887b      	ldrh	r3, [r7, #2]
 8000b32:	4413      	add	r3, r2
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	3b01      	subs	r3, #1
 8000b38:	b29c      	uxth	r4, r3
 8000b3a:	88ba      	ldrh	r2, [r7, #4]
 8000b3c:	883b      	ldrh	r3, [r7, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	3b01      	subs	r3, #1
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	88b9      	ldrh	r1, [r7, #4]
 8000b48:	88f8      	ldrh	r0, [r7, #6]
 8000b4a:	4622      	mov	r2, r4
 8000b4c:	f7ff fd90 	bl	8000670 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000b50:	8c3b      	ldrh	r3, [r7, #32]
 8000b52:	0a1b      	lsrs	r3, r3, #8
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	733b      	strb	r3, [r7, #12]
 8000b5a:	8c3b      	ldrh	r3, [r7, #32]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2102      	movs	r1, #2
 8000b64:	4811      	ldr	r0, [pc, #68]	@ (8000bac <ILI9341_FillRectangle+0xd4>)
 8000b66:	f001 fa33 	bl	8001fd0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000b6a:	883b      	ldrh	r3, [r7, #0]
 8000b6c:	80bb      	strh	r3, [r7, #4]
 8000b6e:	e013      	b.n	8000b98 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 8000b70:	887b      	ldrh	r3, [r7, #2]
 8000b72:	80fb      	strh	r3, [r7, #6]
 8000b74:	e00a      	b.n	8000b8c <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000b76:	f107 010c 	add.w	r1, r7, #12
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	2202      	movs	r2, #2
 8000b80:	480b      	ldr	r0, [pc, #44]	@ (8000bb0 <ILI9341_FillRectangle+0xd8>)
 8000b82:	f002 ffa4 	bl	8003ace <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	80fb      	strh	r3, [r7, #6]
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1f1      	bne.n	8000b76 <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 8000b92:	88bb      	ldrh	r3, [r7, #4]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	80bb      	strh	r3, [r7, #4]
 8000b98:	88bb      	ldrh	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1e8      	bne.n	8000b70 <ILI9341_FillRectangle+0x98>

        }
    }

    ILI9341_Unselect();
 8000b9e:	f7ff fd01 	bl	80005a4 <ILI9341_Unselect>
 8000ba2:	e000      	b.n	8000ba6 <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000ba4:	bf00      	nop
}
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd90      	pop	{r4, r7, pc}
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	20000094 	.word	0x20000094

08000bb4 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000bc6:	22f0      	movs	r2, #240	@ 0xf0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f7ff ff84 	bl	8000ad8 <ILI9341_FillRectangle>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000be2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be6:	f001 f9f3 	bl	8001fd0 <HAL_GPIO_WritePin>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}

08000bee <init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init() {
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
	ILI9341_Unselect();
 8000bf2:	f7ff fcd7 	bl	80005a4 <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 8000bf6:	f7ff ffef 	bl	8000bd8 <ILI9341_TouchUnselect>
	ILI9341_Init();
 8000bfa:	f7ff fd81 	bl	8000700 <ILI9341_Init>
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0a:	f000 fdea 	bl	80017e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0e:	f000 f909 	bl	8000e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c12:	f000 f9d7 	bl	8000fc4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c16:	f000 f94b 	bl	8000eb0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c1a:	f000 f987 	bl	8000f2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  init();
 8000c1e:	f7ff ffe6 	bl	8000bee <init>
  ILI9341_FillScreen(ILI9341_BLACK);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff ffc6 	bl	8000bb4 <ILI9341_FillScreen>

  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8000c28:	2206      	movs	r2, #6
 8000c2a:	4972      	ldr	r1, [pc, #456]	@ (8000df4 <main+0x1f0>)
 8000c2c:	4872      	ldr	r0, [pc, #456]	@ (8000df8 <main+0x1f4>)
 8000c2e:	f003 fa77 	bl	8004120 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(!start) {
 8000c32:	4b72      	ldr	r3, [pc, #456]	@ (8000dfc <main+0x1f8>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d162      	bne.n	8000d00 <main+0xfc>
		ILI9341_WriteString(10, 0, "Detected String:", Font_11x18, ILI9341_BLACK, ILI9341_BLACK);
 8000c3a:	4b71      	ldr	r3, [pc, #452]	@ (8000e00 <main+0x1fc>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	9202      	str	r2, [sp, #8]
 8000c40:	2200      	movs	r2, #0
 8000c42:	9201      	str	r2, [sp, #4]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	9200      	str	r2, [sp, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a6e      	ldr	r2, [pc, #440]	@ (8000e04 <main+0x200>)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	200a      	movs	r0, #10
 8000c50:	f7ff fef6 	bl	8000a40 <ILI9341_WriteString>
		ILI9341_WriteString(100, 30, detected_string, Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
 8000c54:	4b6c      	ldr	r3, [pc, #432]	@ (8000e08 <main+0x204>)
 8000c56:	6819      	ldr	r1, [r3, #0]
 8000c58:	4b6c      	ldr	r3, [pc, #432]	@ (8000e0c <main+0x208>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	9202      	str	r2, [sp, #8]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	9201      	str	r2, [sp, #4]
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	9200      	str	r2, [sp, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	460a      	mov	r2, r1
 8000c6a:	211e      	movs	r1, #30
 8000c6c:	2064      	movs	r0, #100	@ 0x64
 8000c6e:	f7ff fee7 	bl	8000a40 <ILI9341_WriteString>

		sprintf(temp_str, "%u", charFreq);
 8000c72:	4b67      	ldr	r3, [pc, #412]	@ (8000e10 <main+0x20c>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	4966      	ldr	r1, [pc, #408]	@ (8000e14 <main+0x210>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f005 fa9f 	bl	80061c0 <siprintf>
		ILI9341_WriteString(10, 60, "Actual Frequency:", Font_11x18, ILI9341_BLACK, ILI9341_BLACK);
 8000c82:	4b5f      	ldr	r3, [pc, #380]	@ (8000e00 <main+0x1fc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	9202      	str	r2, [sp, #8]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	9201      	str	r2, [sp, #4]
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	9200      	str	r2, [sp, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a61      	ldr	r2, [pc, #388]	@ (8000e18 <main+0x214>)
 8000c94:	213c      	movs	r1, #60	@ 0x3c
 8000c96:	200a      	movs	r0, #10
 8000c98:	f7ff fed2 	bl	8000a40 <ILI9341_WriteString>
		ILI9341_WriteString(100, 90, temp_str, Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
 8000c9c:	4b5b      	ldr	r3, [pc, #364]	@ (8000e0c <main+0x208>)
 8000c9e:	1d39      	adds	r1, r7, #4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	9202      	str	r2, [sp, #8]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	9201      	str	r2, [sp, #4]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	9200      	str	r2, [sp, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	460a      	mov	r2, r1
 8000cb0:	215a      	movs	r1, #90	@ 0x5a
 8000cb2:	2064      	movs	r0, #100	@ 0x64
 8000cb4:	f7ff fec4 	bl	8000a40 <ILI9341_WriteString>

		sprintf(temp_str, "%u", desiredFreq);
 8000cb8:	4b58      	ldr	r3, [pc, #352]	@ (8000e1c <main+0x218>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	4954      	ldr	r1, [pc, #336]	@ (8000e14 <main+0x210>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f005 fa7c 	bl	80061c0 <siprintf>
		ILI9341_WriteString(10, 120, "Desired Frequency:", Font_11x18, ILI9341_BLACK, ILI9341_BLACK);
 8000cc8:	4b4d      	ldr	r3, [pc, #308]	@ (8000e00 <main+0x1fc>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	9202      	str	r2, [sp, #8]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	9201      	str	r2, [sp, #4]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	9200      	str	r2, [sp, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a51      	ldr	r2, [pc, #324]	@ (8000e20 <main+0x21c>)
 8000cda:	2178      	movs	r1, #120	@ 0x78
 8000cdc:	200a      	movs	r0, #10
 8000cde:	f7ff feaf 	bl	8000a40 <ILI9341_WriteString>
		ILI9341_WriteString(100, 150, temp_str, Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
 8000ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8000e0c <main+0x208>)
 8000ce4:	1d39      	adds	r1, r7, #4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	9202      	str	r2, [sp, #8]
 8000cea:	2200      	movs	r2, #0
 8000cec:	9201      	str	r2, [sp, #4]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	9200      	str	r2, [sp, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	460a      	mov	r2, r1
 8000cf6:	2196      	movs	r1, #150	@ 0x96
 8000cf8:	2064      	movs	r0, #100	@ 0x64
 8000cfa:	f7ff fea1 	bl	8000a40 <ILI9341_WriteString>
 8000cfe:	e067      	b.n	8000dd0 <main+0x1cc>
//		ILI9341_WriteString(55, 60, "TO START", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
	} else {
//		ILI9341_WriteString(55, 30, "PUSH BUTTON", Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
//		ILI9341_WriteString(55, 60, "TO START", Font_16x26, ILI9341_BLACK, ILI9341_BLACK);

		ILI9341_WriteString(10, 0, "Detected String:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000d00:	4b3f      	ldr	r3, [pc, #252]	@ (8000e00 <main+0x1fc>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	9202      	str	r2, [sp, #8]
 8000d06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d0a:	9201      	str	r2, [sp, #4]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	9200      	str	r2, [sp, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a3c      	ldr	r2, [pc, #240]	@ (8000e04 <main+0x200>)
 8000d14:	2100      	movs	r1, #0
 8000d16:	200a      	movs	r0, #10
 8000d18:	f7ff fe92 	bl	8000a40 <ILI9341_WriteString>
		ILI9341_WriteString(100, 30, detected_string, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8000d1c:	4b3a      	ldr	r3, [pc, #232]	@ (8000e08 <main+0x204>)
 8000d1e:	6819      	ldr	r1, [r3, #0]
 8000d20:	4b3a      	ldr	r3, [pc, #232]	@ (8000e0c <main+0x208>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	9202      	str	r2, [sp, #8]
 8000d26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d2a:	9201      	str	r2, [sp, #4]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	9200      	str	r2, [sp, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	460a      	mov	r2, r1
 8000d34:	211e      	movs	r1, #30
 8000d36:	2064      	movs	r0, #100	@ 0x64
 8000d38:	f7ff fe82 	bl	8000a40 <ILI9341_WriteString>

		sprintf(temp_str, "%u", charFreq);
 8000d3c:	4b34      	ldr	r3, [pc, #208]	@ (8000e10 <main+0x20c>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	4933      	ldr	r1, [pc, #204]	@ (8000e14 <main+0x210>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f005 fa3a 	bl	80061c0 <siprintf>
		ILI9341_WriteString(10, 60, "Actual Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e00 <main+0x1fc>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	9202      	str	r2, [sp, #8]
 8000d52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d56:	9201      	str	r2, [sp, #4]
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	9200      	str	r2, [sp, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a2e      	ldr	r2, [pc, #184]	@ (8000e18 <main+0x214>)
 8000d60:	213c      	movs	r1, #60	@ 0x3c
 8000d62:	200a      	movs	r0, #10
 8000d64:	f7ff fe6c 	bl	8000a40 <ILI9341_WriteString>
		ILI9341_WriteString(100, 90, temp_str, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8000d68:	4b28      	ldr	r3, [pc, #160]	@ (8000e0c <main+0x208>)
 8000d6a:	1d39      	adds	r1, r7, #4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	9202      	str	r2, [sp, #8]
 8000d70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d74:	9201      	str	r2, [sp, #4]
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	9200      	str	r2, [sp, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	460a      	mov	r2, r1
 8000d7e:	215a      	movs	r1, #90	@ 0x5a
 8000d80:	2064      	movs	r0, #100	@ 0x64
 8000d82:	f7ff fe5d 	bl	8000a40 <ILI9341_WriteString>

		sprintf(temp_str, "%u", desiredFreq);
 8000d86:	4b25      	ldr	r3, [pc, #148]	@ (8000e1c <main+0x218>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	4921      	ldr	r1, [pc, #132]	@ (8000e14 <main+0x210>)
 8000d90:	4618      	mov	r0, r3
 8000d92:	f005 fa15 	bl	80061c0 <siprintf>
		ILI9341_WriteString(10, 120, "Desired Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000d96:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <main+0x1fc>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	9202      	str	r2, [sp, #8]
 8000d9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000da0:	9201      	str	r2, [sp, #4]
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	9200      	str	r2, [sp, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e20 <main+0x21c>)
 8000daa:	2178      	movs	r1, #120	@ 0x78
 8000dac:	200a      	movs	r0, #10
 8000dae:	f7ff fe47 	bl	8000a40 <ILI9341_WriteString>
		ILI9341_WriteString(100, 150, temp_str, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8000db2:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <main+0x208>)
 8000db4:	1d39      	adds	r1, r7, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	9202      	str	r2, [sp, #8]
 8000dba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dbe:	9201      	str	r2, [sp, #4]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	9200      	str	r2, [sp, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	460a      	mov	r2, r1
 8000dc8:	2196      	movs	r1, #150	@ 0x96
 8000dca:	2064      	movs	r0, #100	@ 0x64
 8000dcc:	f7ff fe38 	bl	8000a40 <ILI9341_WriteString>
	}

	++charFreq;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <main+0x20c>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e10 <main+0x20c>)
 8000dda:	801a      	strh	r2, [r3, #0]
	++desiredFreq;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <main+0x218>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e1c <main+0x218>)
 8000de6:	801a      	strh	r2, [r3, #0]
	HAL_Delay(10000);
 8000de8:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000dec:	f000 fd6e 	bl	80018cc <HAL_Delay>
	if(!start) {
 8000df0:	e71f      	b.n	8000c32 <main+0x2e>
 8000df2:	bf00      	nop
 8000df4:	2000018c 	.word	0x2000018c
 8000df8:	200000f8 	.word	0x200000f8
 8000dfc:	20000010 	.word	0x20000010
 8000e00:	20000000 	.word	0x20000000
 8000e04:	08006b50 	.word	0x08006b50
 8000e08:	20000014 	.word	0x20000014
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000018 	.word	0x20000018
 8000e14:	08006b64 	.word	0x08006b64
 8000e18:	08006b68 	.word	0x08006b68
 8000e1c:	2000001a 	.word	0x2000001a
 8000e20:	08006b7c 	.word	0x08006b7c

08000e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b096      	sub	sp, #88	@ 0x58
 8000e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	2244      	movs	r2, #68	@ 0x44
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f005 f9e4 	bl	8006200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e46:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e4a:	f001 f8f9 	bl	8002040 <HAL_PWREx_ControlVoltageScaling>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e54:	f000 fb46 	bl	80014e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e58:	2310      	movs	r3, #16
 8000e5a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8000e64:	2370      	movs	r3, #112	@ 0x70
 8000e66:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4618      	mov	r0, r3
 8000e72:	f001 f999 	bl	80021a8 <HAL_RCC_OscConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000e7c:	f000 fb32 	bl	80014e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e80:	230f      	movs	r3, #15
 8000e82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e84:	2300      	movs	r3, #0
 8000e86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f001 fd9f 	bl	80029dc <HAL_RCC_ClockConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ea4:	f000 fb1e 	bl	80014e4 <Error_Handler>
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	3758      	adds	r7, #88	@ 0x58
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <MX_SPI1_Init+0x74>)
 8000eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f28 <MX_SPI1_Init+0x78>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_SPI1_Init+0x74>)
 8000ebc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ec0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ec2:	4b18      	ldr	r3, [pc, #96]	@ (8000f24 <MX_SPI1_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ec8:	4b16      	ldr	r3, [pc, #88]	@ (8000f24 <MX_SPI1_Init+0x74>)
 8000eca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000ece:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <MX_SPI1_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <MX_SPI1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000edc:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_SPI1_Init+0x74>)
 8000ede:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ee2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <MX_SPI1_Init+0x74>)
 8000ee6:	2228      	movs	r2, #40	@ 0x28
 8000ee8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <MX_SPI1_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <MX_SPI1_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <MX_SPI1_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000efc:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <MX_SPI1_Init+0x74>)
 8000efe:	2207      	movs	r2, #7
 8000f00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f02:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <MX_SPI1_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <MX_SPI1_Init+0x74>)
 8000f0a:	2208      	movs	r2, #8
 8000f0c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <MX_SPI1_Init+0x74>)
 8000f10:	f002 fd3a 	bl	8003988 <HAL_SPI_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f1a:	f000 fae3 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000094 	.word	0x20000094
 8000f28:	40013000 	.word	0x40013000

08000f2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f30:	4b22      	ldr	r3, [pc, #136]	@ (8000fbc <MX_USART1_UART_Init+0x90>)
 8000f32:	4a23      	ldr	r2, [pc, #140]	@ (8000fc0 <MX_USART1_UART_Init+0x94>)
 8000f34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f36:	4b21      	ldr	r3, [pc, #132]	@ (8000fbc <MX_USART1_UART_Init+0x90>)
 8000f38:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <MX_USART1_UART_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <MX_USART1_UART_Init+0x90>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fbc <MX_USART1_UART_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <MX_USART1_UART_Init+0x90>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <MX_USART1_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b17      	ldr	r3, [pc, #92]	@ (8000fbc <MX_USART1_UART_Init+0x90>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f62:	4b16      	ldr	r3, [pc, #88]	@ (8000fbc <MX_USART1_UART_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f68:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <MX_USART1_UART_Init+0x90>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <MX_USART1_UART_Init+0x90>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f74:	4811      	ldr	r0, [pc, #68]	@ (8000fbc <MX_USART1_UART_Init+0x90>)
 8000f76:	f003 f883 	bl	8004080 <HAL_UART_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f80:	f000 fab0 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f84:	2100      	movs	r1, #0
 8000f86:	480d      	ldr	r0, [pc, #52]	@ (8000fbc <MX_USART1_UART_Init+0x90>)
 8000f88:	f005 f84f 	bl	800602a <HAL_UARTEx_SetTxFifoThreshold>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f92:	f000 faa7 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f96:	2100      	movs	r1, #0
 8000f98:	4808      	ldr	r0, [pc, #32]	@ (8000fbc <MX_USART1_UART_Init+0x90>)
 8000f9a:	f005 f884 	bl	80060a6 <HAL_UARTEx_SetRxFifoThreshold>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000fa4:	f000 fa9e 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	@ (8000fbc <MX_USART1_UART_Init+0x90>)
 8000faa:	f005 f805 	bl	8005fb8 <HAL_UARTEx_DisableFifoMode>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fb4:	f000 fa96 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200000f8 	.word	0x200000f8
 8000fc0:	40013800 	.word	0x40013800

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	@ 0x38
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fda:	4bb2      	ldr	r3, [pc, #712]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fde:	4ab1      	ldr	r2, [pc, #708]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8000fe0:	f043 0310 	orr.w	r3, r3, #16
 8000fe4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe6:	4baf      	ldr	r3, [pc, #700]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	623b      	str	r3, [r7, #32]
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	4bac      	ldr	r3, [pc, #688]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff6:	4aab      	ldr	r2, [pc, #684]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ffe:	4ba9      	ldr	r3, [pc, #676]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800100a:	4ba6      	ldr	r3, [pc, #664]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100e:	4aa5      	ldr	r2, [pc, #660]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8001010:	f043 0320 	orr.w	r3, r3, #32
 8001014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001016:	4ba3      	ldr	r3, [pc, #652]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101a:	f003 0320 	and.w	r3, r3, #32
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001022:	4ba0      	ldr	r3, [pc, #640]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001026:	4a9f      	ldr	r2, [pc, #636]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8001028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800102c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102e:	4b9d      	ldr	r3, [pc, #628]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b9a      	ldr	r3, [pc, #616]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	4a99      	ldr	r2, [pc, #612]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001046:	4b97      	ldr	r3, [pc, #604]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	4b94      	ldr	r3, [pc, #592]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	4a93      	ldr	r2, [pc, #588]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105e:	4b91      	ldr	r3, [pc, #580]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106a:	4b8e      	ldr	r3, [pc, #568]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106e:	4a8d      	ldr	r2, [pc, #564]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8001070:	f043 0308 	orr.w	r3, r3, #8
 8001074:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001076:	4b8b      	ldr	r3, [pc, #556]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001082:	4b88      	ldr	r3, [pc, #544]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	4a87      	ldr	r2, [pc, #540]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8001088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800108c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108e:	4b85      	ldr	r3, [pc, #532]	@ (80012a4 <MX_GPIO_Init+0x2e0>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800109a:	f001 f875 	bl	8002188 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2110      	movs	r1, #16
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a6:	f000 ff93 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2103      	movs	r1, #3
 80010ae:	487e      	ldr	r0, [pc, #504]	@ (80012a8 <MX_GPIO_Init+0x2e4>)
 80010b0:	f000 ff8e 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010b4:	230c      	movs	r3, #12
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80010c4:	230d      	movs	r3, #13
 80010c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010cc:	4619      	mov	r1, r3
 80010ce:	4877      	ldr	r0, [pc, #476]	@ (80012ac <MX_GPIO_Init+0x2e8>)
 80010d0:	f000 fdec 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80010d4:	2307      	movs	r3, #7
 80010d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d8:	2312      	movs	r3, #18
 80010da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010e4:	2304      	movs	r3, #4
 80010e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ec:	4619      	mov	r1, r3
 80010ee:	4870      	ldr	r0, [pc, #448]	@ (80012b0 <MX_GPIO_Init+0x2ec>)
 80010f0:	f000 fddc 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010f4:	2380      	movs	r3, #128	@ 0x80
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001104:	230d      	movs	r3, #13
 8001106:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	4868      	ldr	r0, [pc, #416]	@ (80012b0 <MX_GPIO_Init+0x2ec>)
 8001110:	f000 fdcc 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001114:	233f      	movs	r3, #63	@ 0x3f
 8001116:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001118:	230b      	movs	r3, #11
 800111a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001120:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001124:	4619      	mov	r1, r3
 8001126:	4863      	ldr	r0, [pc, #396]	@ (80012b4 <MX_GPIO_Init+0x2f0>)
 8001128:	f000 fdc0 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800112c:	2301      	movs	r3, #1
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800113c:	2301      	movs	r3, #1
 800113e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001144:	4619      	mov	r1, r3
 8001146:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114a:	f000 fdaf 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800114e:	230a      	movs	r3, #10
 8001150:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001152:	230b      	movs	r3, #11
 8001154:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001164:	f000 fda2 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001168:	2310      	movs	r3, #16
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800117c:	4619      	mov	r1, r3
 800117e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001182:	f000 fd93 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001186:	2303      	movs	r3, #3
 8001188:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119a:	4619      	mov	r1, r3
 800119c:	4842      	ldr	r0, [pc, #264]	@ (80012a8 <MX_GPIO_Init+0x2e4>)
 800119e:	f000 fd85 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80011a2:	2344      	movs	r3, #68	@ 0x44
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a6:	2303      	movs	r3, #3
 80011a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b2:	4619      	mov	r1, r3
 80011b4:	483c      	ldr	r0, [pc, #240]	@ (80012a8 <MX_GPIO_Init+0x2e4>)
 80011b6:	f000 fd79 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80011ba:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011cc:	2301      	movs	r3, #1
 80011ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d4:	4619      	mov	r1, r3
 80011d6:	4835      	ldr	r0, [pc, #212]	@ (80012ac <MX_GPIO_Init+0x2e8>)
 80011d8:	f000 fd68 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80011dc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80011ee:	2303      	movs	r3, #3
 80011f0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f6:	4619      	mov	r1, r3
 80011f8:	482c      	ldr	r0, [pc, #176]	@ (80012ac <MX_GPIO_Init+0x2e8>)
 80011fa:	f000 fd57 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001210:	2301      	movs	r3, #1
 8001212:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001218:	4619      	mov	r1, r3
 800121a:	4823      	ldr	r0, [pc, #140]	@ (80012a8 <MX_GPIO_Init+0x2e4>)
 800121c:	f000 fd46 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001220:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001232:	230d      	movs	r3, #13
 8001234:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800123a:	4619      	mov	r1, r3
 800123c:	481a      	ldr	r0, [pc, #104]	@ (80012a8 <MX_GPIO_Init+0x2e4>)
 800123e:	f000 fd35 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001242:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001246:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001254:	230e      	movs	r3, #14
 8001256:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001258:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800125c:	4619      	mov	r1, r3
 800125e:	4812      	ldr	r0, [pc, #72]	@ (80012a8 <MX_GPIO_Init+0x2e4>)
 8001260:	f000 fd24 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001264:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001276:	2307      	movs	r3, #7
 8001278:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800127e:	4619      	mov	r1, r3
 8001280:	480d      	ldr	r0, [pc, #52]	@ (80012b8 <MX_GPIO_Init+0x2f4>)
 8001282:	f000 fd13 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001286:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001298:	2302      	movs	r3, #2
 800129a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a0:	4619      	mov	r1, r3
 80012a2:	e00b      	b.n	80012bc <MX_GPIO_Init+0x2f8>
 80012a4:	40021000 	.word	0x40021000
 80012a8:	48000400 	.word	0x48000400
 80012ac:	48001000 	.word	0x48001000
 80012b0:	48001400 	.word	0x48001400
 80012b4:	48000800 	.word	0x48000800
 80012b8:	48000c00 	.word	0x48000c00
 80012bc:	4864      	ldr	r0, [pc, #400]	@ (8001450 <MX_GPIO_Init+0x48c>)
 80012be:	f000 fcf5 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80012c2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80012d4:	2308      	movs	r3, #8
 80012d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012dc:	4619      	mov	r1, r3
 80012de:	485d      	ldr	r0, [pc, #372]	@ (8001454 <MX_GPIO_Init+0x490>)
 80012e0:	f000 fce4 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012e4:	2340      	movs	r3, #64	@ 0x40
 80012e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80012f4:	230d      	movs	r3, #13
 80012f6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012fc:	4619      	mov	r1, r3
 80012fe:	4856      	ldr	r0, [pc, #344]	@ (8001458 <MX_GPIO_Init+0x494>)
 8001300:	f000 fcd4 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001304:	2380      	movs	r3, #128	@ 0x80
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001314:	2302      	movs	r3, #2
 8001316:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001318:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800131c:	4619      	mov	r1, r3
 800131e:	484e      	ldr	r0, [pc, #312]	@ (8001458 <MX_GPIO_Init+0x494>)
 8001320:	f000 fcc4 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001324:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001336:	230c      	movs	r3, #12
 8001338:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	4845      	ldr	r0, [pc, #276]	@ (8001458 <MX_GPIO_Init+0x494>)
 8001342:	f000 fcb3 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001346:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001358:	230a      	movs	r3, #10
 800135a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001360:	4619      	mov	r1, r3
 8001362:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001366:	f000 fca1 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800136a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001382:	f000 fc93 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001386:	2301      	movs	r3, #1
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001396:	2309      	movs	r3, #9
 8001398:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800139e:	4619      	mov	r1, r3
 80013a0:	482b      	ldr	r0, [pc, #172]	@ (8001450 <MX_GPIO_Init+0x48c>)
 80013a2:	f000 fc83 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013a6:	2304      	movs	r3, #4
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013b6:	230c      	movs	r3, #12
 80013b8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013be:	4619      	mov	r1, r3
 80013c0:	4823      	ldr	r0, [pc, #140]	@ (8001450 <MX_GPIO_Init+0x48c>)
 80013c2:	f000 fc73 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80013c6:	2378      	movs	r3, #120	@ 0x78
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013d6:	2307      	movs	r3, #7
 80013d8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013de:	4619      	mov	r1, r3
 80013e0:	481b      	ldr	r0, [pc, #108]	@ (8001450 <MX_GPIO_Init+0x48c>)
 80013e2:	f000 fc63 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80013e6:	2338      	movs	r3, #56	@ 0x38
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013f6:	2306      	movs	r3, #6
 80013f8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013fe:	4619      	mov	r1, r3
 8001400:	4816      	ldr	r0, [pc, #88]	@ (800145c <MX_GPIO_Init+0x498>)
 8001402:	f000 fc53 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001406:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140c:	2312      	movs	r3, #18
 800140e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001418:	2304      	movs	r3, #4
 800141a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001420:	4619      	mov	r1, r3
 8001422:	480e      	ldr	r0, [pc, #56]	@ (800145c <MX_GPIO_Init+0x498>)
 8001424:	f000 fc42 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001428:	2301      	movs	r3, #1
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001438:	2302      	movs	r3, #2
 800143a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800143c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001440:	4619      	mov	r1, r3
 8001442:	4807      	ldr	r0, [pc, #28]	@ (8001460 <MX_GPIO_Init+0x49c>)
 8001444:	f000 fc32 	bl	8001cac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001448:	bf00      	nop
 800144a:	3738      	adds	r7, #56	@ 0x38
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	48000c00 	.word	0x48000c00
 8001454:	48001800 	.word	0x48001800
 8001458:	48000800 	.word	0x48000800
 800145c:	48000400 	.word	0x48000400
 8001460:	48001000 	.word	0x48001000

08001464 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) // Make sure the callback is for the correct UART
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a16      	ldr	r2, [pc, #88]	@ (80014cc <HAL_UART_RxCpltCallback+0x68>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d125      	bne.n	80014c2 <HAL_UART_RxCpltCallback+0x5e>
    {
        // Assuming rx_buffer[1] contains a character and not a pointer to a string
        start = rx_buffer[0];
 8001476:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <HAL_UART_RxCpltCallback+0x6c>)
 8001478:	781a      	ldrb	r2, [r3, #0]
 800147a:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <HAL_UART_RxCpltCallback+0x70>)
 800147c:	701a      	strb	r2, [r3, #0]
        detected_string = rx_buffer[1];
 800147e:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <HAL_UART_RxCpltCallback+0x6c>)
 8001480:	785b      	ldrb	r3, [r3, #1]
 8001482:	461a      	mov	r2, r3
 8001484:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <HAL_UART_RxCpltCallback+0x74>)
 8001486:	601a      	str	r2, [r3, #0]
        charFreq = (rx_buffer[3] << 8) | rx_buffer[2];
 8001488:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <HAL_UART_RxCpltCallback+0x6c>)
 800148a:	78db      	ldrb	r3, [r3, #3]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	b21a      	sxth	r2, r3
 8001490:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <HAL_UART_RxCpltCallback+0x6c>)
 8001492:	789b      	ldrb	r3, [r3, #2]
 8001494:	b21b      	sxth	r3, r3
 8001496:	4313      	orrs	r3, r2
 8001498:	b21b      	sxth	r3, r3
 800149a:	b29a      	uxth	r2, r3
 800149c:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <HAL_UART_RxCpltCallback+0x78>)
 800149e:	801a      	strh	r2, [r3, #0]
        desiredFreq = (rx_buffer[5] << 8) | rx_buffer[4];
 80014a0:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <HAL_UART_RxCpltCallback+0x6c>)
 80014a2:	795b      	ldrb	r3, [r3, #5]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	b21a      	sxth	r2, r3
 80014a8:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <HAL_UART_RxCpltCallback+0x6c>)
 80014aa:	791b      	ldrb	r3, [r3, #4]
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <HAL_UART_RxCpltCallback+0x7c>)
 80014b6:	801a      	strh	r2, [r3, #0]

        // Process data: Use the variables as needed

        // Ready to receive the next piece of data
        HAL_UART_Receive_IT(huart, rx_buffer, 6); // Use correct size as per your protocol
 80014b8:	2206      	movs	r2, #6
 80014ba:	4905      	ldr	r1, [pc, #20]	@ (80014d0 <HAL_UART_RxCpltCallback+0x6c>)
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f002 fe2f 	bl	8004120 <HAL_UART_Receive_IT>
    }
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40013800 	.word	0x40013800
 80014d0:	2000018c 	.word	0x2000018c
 80014d4:	20000010 	.word	0x20000010
 80014d8:	20000014 	.word	0x20000014
 80014dc:	20000018 	.word	0x20000018
 80014e0:	2000001a 	.word	0x2000001a

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
}
 80014ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <Error_Handler+0x8>

080014f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <HAL_MspInit+0x44>)
 80014f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001534 <HAL_MspInit+0x44>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6613      	str	r3, [r2, #96]	@ 0x60
 8001502:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <HAL_MspInit+0x44>)
 8001504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <HAL_MspInit+0x44>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001512:	4a08      	ldr	r2, [pc, #32]	@ (8001534 <HAL_MspInit+0x44>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001518:	6593      	str	r3, [r2, #88]	@ 0x58
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <HAL_MspInit+0x44>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000

08001538 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a17      	ldr	r2, [pc, #92]	@ (80015b4 <HAL_SPI_MspInit+0x7c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d128      	bne.n	80015ac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800155a:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <HAL_SPI_MspInit+0x80>)
 800155c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800155e:	4a16      	ldr	r2, [pc, #88]	@ (80015b8 <HAL_SPI_MspInit+0x80>)
 8001560:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001564:	6613      	str	r3, [r2, #96]	@ 0x60
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <HAL_SPI_MspInit+0x80>)
 8001568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800156a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <HAL_SPI_MspInit+0x80>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a10      	ldr	r2, [pc, #64]	@ (80015b8 <HAL_SPI_MspInit+0x80>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <HAL_SPI_MspInit+0x80>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800158a:	23e0      	movs	r3, #224	@ 0xe0
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800159a:	2305      	movs	r3, #5
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a8:	f000 fb80 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	@ 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40013000 	.word	0x40013000
 80015b8:	40021000 	.word	0x40021000

080015bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0ae      	sub	sp, #184	@ 0xb8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	2294      	movs	r2, #148	@ 0x94
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f004 fe0f 	bl	8006200 <memset>
  if(huart->Instance==USART1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a26      	ldr	r2, [pc, #152]	@ (8001680 <HAL_UART_MspInit+0xc4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d145      	bne.n	8001678 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015f0:	2300      	movs	r3, #0
 80015f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4618      	mov	r0, r3
 80015fa:	f001 fcad 	bl	8002f58 <HAL_RCCEx_PeriphCLKConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001604:	f7ff ff6e 	bl	80014e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001608:	4b1e      	ldr	r3, [pc, #120]	@ (8001684 <HAL_UART_MspInit+0xc8>)
 800160a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160c:	4a1d      	ldr	r2, [pc, #116]	@ (8001684 <HAL_UART_MspInit+0xc8>)
 800160e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001612:	6613      	str	r3, [r2, #96]	@ 0x60
 8001614:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <HAL_UART_MspInit+0xc8>)
 8001616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001620:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <HAL_UART_MspInit+0xc8>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001624:	4a17      	ldr	r2, [pc, #92]	@ (8001684 <HAL_UART_MspInit+0xc8>)
 8001626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800162a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162c:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <HAL_UART_MspInit+0xc8>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001638:	f000 fda6 	bl	8002188 <HAL_PWREx_EnableVddIO2>
    /**USART1 GPIO Configuration
    PG9     ------> USART1_TX
    PG10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800163c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001640:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001656:	2307      	movs	r3, #7
 8001658:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800165c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001660:	4619      	mov	r1, r3
 8001662:	4809      	ldr	r0, [pc, #36]	@ (8001688 <HAL_UART_MspInit+0xcc>)
 8001664:	f000 fb22 	bl	8001cac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	2025      	movs	r0, #37	@ 0x25
 800166e:	f000 fa2c 	bl	8001aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001672:	2025      	movs	r0, #37	@ 0x25
 8001674:	f000 fa45 	bl	8001b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001678:	bf00      	nop
 800167a:	37b8      	adds	r7, #184	@ 0xb8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40013800 	.word	0x40013800
 8001684:	40021000 	.word	0x40021000
 8001688:	48001800 	.word	0x48001800

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <NMI_Handler+0x4>

08001694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <HardFault_Handler+0x4>

0800169c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <MemManage_Handler+0x4>

080016a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e2:	f000 f8d3 	bl	800188c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <USART1_IRQHandler+0x10>)
 80016f2:	f002 fd61 	bl	80041b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200000f8 	.word	0x200000f8

08001700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001708:	4a14      	ldr	r2, [pc, #80]	@ (800175c <_sbrk+0x5c>)
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <_sbrk+0x60>)
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <_sbrk+0x64>)
 800171e:	4a12      	ldr	r2, [pc, #72]	@ (8001768 <_sbrk+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d207      	bcs.n	8001740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001730:	f004 fd6e 	bl	8006210 <__errno>
 8001734:	4603      	mov	r3, r0
 8001736:	220c      	movs	r2, #12
 8001738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	e009      	b.n	8001754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001740:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001746:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	4a05      	ldr	r2, [pc, #20]	@ (8001764 <_sbrk+0x64>)
 8001750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	200a0000 	.word	0x200a0000
 8001760:	00000400 	.word	0x00000400
 8001764:	20000194 	.word	0x20000194
 8001768:	200002e8 	.word	0x200002e8

0800176c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <SystemInit+0x20>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001776:	4a05      	ldr	r2, [pc, #20]	@ (800178c <SystemInit+0x20>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001790:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001794:	f7ff ffea 	bl	800176c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001798:	480c      	ldr	r0, [pc, #48]	@ (80017cc <LoopForever+0x6>)
  ldr r1, =_edata
 800179a:	490d      	ldr	r1, [pc, #52]	@ (80017d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800179c:	4a0d      	ldr	r2, [pc, #52]	@ (80017d4 <LoopForever+0xe>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ae:	4a0a      	ldr	r2, [pc, #40]	@ (80017d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017b0:	4c0a      	ldr	r4, [pc, #40]	@ (80017dc <LoopForever+0x16>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017be:	f004 fd2d 	bl	800621c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017c2:	f7ff fa1f 	bl	8000c04 <main>

080017c6 <LoopForever>:

LoopForever:
    b LoopForever
 80017c6:	e7fe      	b.n	80017c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017c8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80017d4:	08008cec 	.word	0x08008cec
  ldr r2, =_sbss
 80017d8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80017dc:	200002e4 	.word	0x200002e4

080017e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC1_IRQHandler>

080017e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ec:	2003      	movs	r0, #3
 80017ee:	f000 f961 	bl	8001ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017f2:	2000      	movs	r0, #0
 80017f4:	f000 f80e 	bl	8001814 <HAL_InitTick>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	71fb      	strb	r3, [r7, #7]
 8001802:	e001      	b.n	8001808 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001804:	f7ff fe74 	bl	80014f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001808:	79fb      	ldrb	r3, [r7, #7]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001820:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <HAL_InitTick+0x6c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d023      	beq.n	8001870 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001828:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <HAL_InitTick+0x70>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <HAL_InitTick+0x6c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001836:	fbb3 f3f1 	udiv	r3, r3, r1
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f96d 	bl	8001b1e <HAL_SYSTICK_Config>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10f      	bne.n	800186a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d809      	bhi.n	8001864 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f000 f937 	bl	8001aca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800185c:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <HAL_InitTick+0x74>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e007      	b.n	8001874 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e004      	b.n	8001874 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	e001      	b.n	8001874 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000024 	.word	0x20000024
 8001884:	2000001c 	.word	0x2000001c
 8001888:	20000020 	.word	0x20000020

0800188c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_IncTick+0x20>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_IncTick+0x24>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a04      	ldr	r2, [pc, #16]	@ (80018b0 <HAL_IncTick+0x24>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000024 	.word	0x20000024
 80018b0:	20000198 	.word	0x20000198

080018b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return uwTick;
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <HAL_GetTick+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000198 	.word	0x20000198

080018cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff ffee 	bl	80018b4 <HAL_GetTick>
 80018d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e4:	d005      	beq.n	80018f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <HAL_Delay+0x44>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f2:	bf00      	nop
 80018f4:	f7ff ffde 	bl	80018b4 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	429a      	cmp	r2, r3
 8001902:	d8f7      	bhi.n	80018f4 <HAL_Delay+0x28>
  {
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000024 	.word	0x20000024

08001914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001924:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800193c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001946:	4a04      	ldr	r2, [pc, #16]	@ (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	60d3      	str	r3, [r2, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001960:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <__NVIC_GetPriorityGrouping+0x18>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0307 	and.w	r3, r3, #7
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	2b00      	cmp	r3, #0
 8001988:	db0b      	blt.n	80019a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	f003 021f 	and.w	r2, r3, #31
 8001990:	4907      	ldr	r1, [pc, #28]	@ (80019b0 <__NVIC_EnableIRQ+0x38>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	2001      	movs	r0, #1
 800199a:	fa00 f202 	lsl.w	r2, r0, r2
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000e100 	.word	0xe000e100

080019b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	db0a      	blt.n	80019de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	490c      	ldr	r1, [pc, #48]	@ (8001a00 <__NVIC_SetPriority+0x4c>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	0112      	lsls	r2, r2, #4
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	440b      	add	r3, r1
 80019d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019dc:	e00a      	b.n	80019f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4908      	ldr	r1, [pc, #32]	@ (8001a04 <__NVIC_SetPriority+0x50>)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	3b04      	subs	r3, #4
 80019ec:	0112      	lsls	r2, r2, #4
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	761a      	strb	r2, [r3, #24]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	@ 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f1c3 0307 	rsb	r3, r3, #7
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	bf28      	it	cs
 8001a26:	2304      	movcs	r3, #4
 8001a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d902      	bls.n	8001a38 <NVIC_EncodePriority+0x30>
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3b03      	subs	r3, #3
 8001a36:	e000      	b.n	8001a3a <NVIC_EncodePriority+0x32>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	43d9      	mvns	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	4313      	orrs	r3, r2
         );
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3724      	adds	r7, #36	@ 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a80:	d301      	bcc.n	8001a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00f      	b.n	8001aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a86:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab0 <SysTick_Config+0x40>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8e:	210f      	movs	r1, #15
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	f7ff ff8e 	bl	80019b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <SysTick_Config+0x40>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9e:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <SysTick_Config+0x40>)
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	e000e010 	.word	0xe000e010

08001ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff29 	bl	8001914 <__NVIC_SetPriorityGrouping>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001adc:	f7ff ff3e 	bl	800195c <__NVIC_GetPriorityGrouping>
 8001ae0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	6978      	ldr	r0, [r7, #20]
 8001ae8:	f7ff ff8e 	bl	8001a08 <NVIC_EncodePriority>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff5d 	bl	80019b4 <__NVIC_SetPriority>
}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff31 	bl	8001978 <__NVIC_EnableIRQ>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ffa2 	bl	8001a70 <SysTick_Config>
 8001b2c:	4603      	mov	r3, r0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b085      	sub	sp, #20
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d008      	beq.n	8001b60 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2204      	movs	r2, #4
 8001b52:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e040      	b.n	8001be2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 020e 	bic.w	r2, r2, #14
 8001b6e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b7e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b94:	f003 021c 	and.w	r2, r3, #28
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba2:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001bac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00c      	beq.n	8001bd0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bc4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001bce:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d005      	beq.n	8001c12 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2204      	movs	r2, #4
 8001c0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	e047      	b.n	8001ca2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 020e 	bic.w	r2, r2, #14
 8001c20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0201 	bic.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	f003 021c 	and.w	r2, r3, #28
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	2101      	movs	r1, #1
 8001c50:	fa01 f202 	lsl.w	r2, r1, r2
 8001c54:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c5e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00c      	beq.n	8001c82 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c80:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	4798      	blx	r3
    }
  }
  return status;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cba:	e166      	b.n	8001f8a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 8158 	beq.w	8001f84 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d005      	beq.n	8001cec <HAL_GPIO_Init+0x40>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d130      	bne.n	8001d4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d22:	2201      	movs	r2, #1
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	091b      	lsrs	r3, r3, #4
 8001d38:	f003 0201 	and.w	r2, r3, #1
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d017      	beq.n	8001d8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2203      	movs	r2, #3
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d123      	bne.n	8001dde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	08da      	lsrs	r2, r3, #3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3208      	adds	r2, #8
 8001d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	220f      	movs	r2, #15
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	08da      	lsrs	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3208      	adds	r2, #8
 8001dd8:	6939      	ldr	r1, [r7, #16]
 8001dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2203      	movs	r2, #3
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0203 	and.w	r2, r3, #3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80b2 	beq.w	8001f84 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e20:	4b61      	ldr	r3, [pc, #388]	@ (8001fa8 <HAL_GPIO_Init+0x2fc>)
 8001e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e24:	4a60      	ldr	r2, [pc, #384]	@ (8001fa8 <HAL_GPIO_Init+0x2fc>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8001fa8 <HAL_GPIO_Init+0x2fc>)
 8001e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e38:	4a5c      	ldr	r2, [pc, #368]	@ (8001fac <HAL_GPIO_Init+0x300>)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	220f      	movs	r2, #15
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e62:	d02b      	beq.n	8001ebc <HAL_GPIO_Init+0x210>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a52      	ldr	r2, [pc, #328]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d025      	beq.n	8001eb8 <HAL_GPIO_Init+0x20c>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a51      	ldr	r2, [pc, #324]	@ (8001fb4 <HAL_GPIO_Init+0x308>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d01f      	beq.n	8001eb4 <HAL_GPIO_Init+0x208>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a50      	ldr	r2, [pc, #320]	@ (8001fb8 <HAL_GPIO_Init+0x30c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d019      	beq.n	8001eb0 <HAL_GPIO_Init+0x204>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a4f      	ldr	r2, [pc, #316]	@ (8001fbc <HAL_GPIO_Init+0x310>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d013      	beq.n	8001eac <HAL_GPIO_Init+0x200>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a4e      	ldr	r2, [pc, #312]	@ (8001fc0 <HAL_GPIO_Init+0x314>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00d      	beq.n	8001ea8 <HAL_GPIO_Init+0x1fc>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a4d      	ldr	r2, [pc, #308]	@ (8001fc4 <HAL_GPIO_Init+0x318>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d007      	beq.n	8001ea4 <HAL_GPIO_Init+0x1f8>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a4c      	ldr	r2, [pc, #304]	@ (8001fc8 <HAL_GPIO_Init+0x31c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d101      	bne.n	8001ea0 <HAL_GPIO_Init+0x1f4>
 8001e9c:	2307      	movs	r3, #7
 8001e9e:	e00e      	b.n	8001ebe <HAL_GPIO_Init+0x212>
 8001ea0:	2308      	movs	r3, #8
 8001ea2:	e00c      	b.n	8001ebe <HAL_GPIO_Init+0x212>
 8001ea4:	2306      	movs	r3, #6
 8001ea6:	e00a      	b.n	8001ebe <HAL_GPIO_Init+0x212>
 8001ea8:	2305      	movs	r3, #5
 8001eaa:	e008      	b.n	8001ebe <HAL_GPIO_Init+0x212>
 8001eac:	2304      	movs	r3, #4
 8001eae:	e006      	b.n	8001ebe <HAL_GPIO_Init+0x212>
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e004      	b.n	8001ebe <HAL_GPIO_Init+0x212>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e002      	b.n	8001ebe <HAL_GPIO_Init+0x212>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_GPIO_Init+0x212>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	f002 0203 	and.w	r2, r2, #3
 8001ec4:	0092      	lsls	r2, r2, #2
 8001ec6:	4093      	lsls	r3, r2
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ece:	4937      	ldr	r1, [pc, #220]	@ (8001fac <HAL_GPIO_Init+0x300>)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	089b      	lsrs	r3, r3, #2
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001edc:	4b3b      	ldr	r3, [pc, #236]	@ (8001fcc <HAL_GPIO_Init+0x320>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f00:	4a32      	ldr	r2, [pc, #200]	@ (8001fcc <HAL_GPIO_Init+0x320>)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f06:	4b31      	ldr	r3, [pc, #196]	@ (8001fcc <HAL_GPIO_Init+0x320>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f2a:	4a28      	ldr	r2, [pc, #160]	@ (8001fcc <HAL_GPIO_Init+0x320>)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f30:	4b26      	ldr	r3, [pc, #152]	@ (8001fcc <HAL_GPIO_Init+0x320>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f54:	4a1d      	ldr	r2, [pc, #116]	@ (8001fcc <HAL_GPIO_Init+0x320>)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fcc <HAL_GPIO_Init+0x320>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f7e:	4a13      	ldr	r2, [pc, #76]	@ (8001fcc <HAL_GPIO_Init+0x320>)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3301      	adds	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f47f ae91 	bne.w	8001cbc <HAL_GPIO_Init+0x10>
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	bf00      	nop
 8001f9e:	371c      	adds	r7, #28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	48000400 	.word	0x48000400
 8001fb4:	48000800 	.word	0x48000800
 8001fb8:	48000c00 	.word	0x48000c00
 8001fbc:	48001000 	.word	0x48001000
 8001fc0:	48001400 	.word	0x48001400
 8001fc4:	48001800 	.word	0x48001800
 8001fc8:	48001c00 	.word	0x48001c00
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe0:	787b      	ldrb	r3, [r7, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fec:	e002      	b.n	8001ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002004:	4b0d      	ldr	r3, [pc, #52]	@ (800203c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800200c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002010:	d102      	bne.n	8002018 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002016:	e00b      	b.n	8002030 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002018:	4b08      	ldr	r3, [pc, #32]	@ (800203c <HAL_PWREx_GetVoltageRange+0x3c>)
 800201a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800201e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002026:	d102      	bne.n	800202e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002028:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800202c:	e000      	b.n	8002030 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800202e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40007000 	.word	0x40007000

08002040 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d141      	bne.n	80020d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800204e:	4b4b      	ldr	r3, [pc, #300]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800205a:	d131      	bne.n	80020c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800205c:	4b47      	ldr	r3, [pc, #284]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002062:	4a46      	ldr	r2, [pc, #280]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002068:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800206c:	4b43      	ldr	r3, [pc, #268]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002074:	4a41      	ldr	r2, [pc, #260]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002076:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800207a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800207c:	4b40      	ldr	r3, [pc, #256]	@ (8002180 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2232      	movs	r2, #50	@ 0x32
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	4a3f      	ldr	r2, [pc, #252]	@ (8002184 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	0c9b      	lsrs	r3, r3, #18
 800208e:	3301      	adds	r3, #1
 8002090:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002092:	e002      	b.n	800209a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3b01      	subs	r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800209a:	4b38      	ldr	r3, [pc, #224]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020a6:	d102      	bne.n	80020ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f2      	bne.n	8002094 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020ae:	4b33      	ldr	r3, [pc, #204]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ba:	d158      	bne.n	800216e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e057      	b.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020c0:	4b2e      	ldr	r3, [pc, #184]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020c6:	4a2d      	ldr	r2, [pc, #180]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020d0:	e04d      	b.n	800216e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020d8:	d141      	bne.n	800215e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020da:	4b28      	ldr	r3, [pc, #160]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020e6:	d131      	bne.n	800214c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020e8:	4b24      	ldr	r3, [pc, #144]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020ee:	4a23      	ldr	r2, [pc, #140]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020f8:	4b20      	ldr	r3, [pc, #128]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002100:	4a1e      	ldr	r2, [pc, #120]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002102:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002106:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002108:	4b1d      	ldr	r3, [pc, #116]	@ (8002180 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2232      	movs	r2, #50	@ 0x32
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	4a1c      	ldr	r2, [pc, #112]	@ (8002184 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	0c9b      	lsrs	r3, r3, #18
 800211a:	3301      	adds	r3, #1
 800211c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800211e:	e002      	b.n	8002126 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3b01      	subs	r3, #1
 8002124:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002126:	4b15      	ldr	r3, [pc, #84]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800212e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002132:	d102      	bne.n	800213a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f2      	bne.n	8002120 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800213a:	4b10      	ldr	r3, [pc, #64]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002146:	d112      	bne.n	800216e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e011      	b.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800214c:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002152:	4a0a      	ldr	r2, [pc, #40]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002158:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800215c:	e007      	b.n	800216e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800215e:	4b07      	ldr	r3, [pc, #28]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002166:	4a05      	ldr	r2, [pc, #20]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002168:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800216c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	40007000 	.word	0x40007000
 8002180:	2000001c 	.word	0x2000001c
 8002184:	431bde83 	.word	0x431bde83

08002188 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800218c:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a04      	ldr	r2, [pc, #16]	@ (80021a4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002192:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002196:	6053      	str	r3, [r2, #4]
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40007000 	.word	0x40007000

080021a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d102      	bne.n	80021bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	f000 bc08 	b.w	80029cc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021bc:	4b96      	ldr	r3, [pc, #600]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021c6:	4b94      	ldr	r3, [pc, #592]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80e4 	beq.w	80023a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_RCC_OscConfig+0x4c>
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	f040 808b 	bne.w	8002302 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	f040 8087 	bne.w	8002302 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021f4:	4b88      	ldr	r3, [pc, #544]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_OscConfig+0x64>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e3df      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1a      	ldr	r2, [r3, #32]
 8002210:	4b81      	ldr	r3, [pc, #516]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d004      	beq.n	8002226 <HAL_RCC_OscConfig+0x7e>
 800221c:	4b7e      	ldr	r3, [pc, #504]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002224:	e005      	b.n	8002232 <HAL_RCC_OscConfig+0x8a>
 8002226:	4b7c      	ldr	r3, [pc, #496]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002228:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002232:	4293      	cmp	r3, r2
 8002234:	d223      	bcs.n	800227e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fdcc 	bl	8002dd8 <RCC_SetFlashLatencyFromMSIRange>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e3c0      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800224a:	4b73      	ldr	r3, [pc, #460]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a72      	ldr	r2, [pc, #456]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002250:	f043 0308 	orr.w	r3, r3, #8
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b70      	ldr	r3, [pc, #448]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	496d      	ldr	r1, [pc, #436]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002268:	4b6b      	ldr	r3, [pc, #428]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	4968      	ldr	r1, [pc, #416]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
 800227c:	e025      	b.n	80022ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800227e:	4b66      	ldr	r3, [pc, #408]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a65      	ldr	r2, [pc, #404]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002284:	f043 0308 	orr.w	r3, r3, #8
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b63      	ldr	r3, [pc, #396]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4960      	ldr	r1, [pc, #384]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002298:	4313      	orrs	r3, r2
 800229a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800229c:	4b5e      	ldr	r3, [pc, #376]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	495b      	ldr	r1, [pc, #364]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fd8c 	bl	8002dd8 <RCC_SetFlashLatencyFromMSIRange>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e380      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ca:	f000 fcc1 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4b51      	ldr	r3, [pc, #324]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	4950      	ldr	r1, [pc, #320]	@ (800241c <HAL_RCC_OscConfig+0x274>)
 80022dc:	5ccb      	ldrb	r3, [r1, r3]
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	fa22 f303 	lsr.w	r3, r2, r3
 80022e6:	4a4e      	ldr	r2, [pc, #312]	@ (8002420 <HAL_RCC_OscConfig+0x278>)
 80022e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002424 <HAL_RCC_OscConfig+0x27c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fa90 	bl	8001814 <HAL_InitTick>
 80022f4:	4603      	mov	r3, r0
 80022f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d052      	beq.n	80023a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	e364      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d032      	beq.n	8002370 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800230a:	4b43      	ldr	r3, [pc, #268]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a42      	ldr	r2, [pc, #264]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002316:	f7ff facd 	bl	80018b4 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800231e:	f7ff fac9 	bl	80018b4 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e34d      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002330:	4b39      	ldr	r3, [pc, #228]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800233c:	4b36      	ldr	r3, [pc, #216]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a35      	ldr	r2, [pc, #212]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002342:	f043 0308 	orr.w	r3, r3, #8
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b33      	ldr	r3, [pc, #204]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4930      	ldr	r1, [pc, #192]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800235a:	4b2f      	ldr	r3, [pc, #188]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	492b      	ldr	r1, [pc, #172]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
 800236e:	e01a      	b.n	80023a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002370:	4b29      	ldr	r3, [pc, #164]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a28      	ldr	r2, [pc, #160]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002376:	f023 0301 	bic.w	r3, r3, #1
 800237a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800237c:	f7ff fa9a 	bl	80018b4 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002384:	f7ff fa96 	bl	80018b4 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e31a      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002396:	4b20      	ldr	r3, [pc, #128]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x1dc>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d073      	beq.n	800249a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_OscConfig+0x21c>
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d10e      	bne.n	80023dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d10b      	bne.n	80023dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	4b14      	ldr	r3, [pc, #80]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d063      	beq.n	8002498 <HAL_RCC_OscConfig+0x2f0>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d15f      	bne.n	8002498 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e2f7      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023e4:	d106      	bne.n	80023f4 <HAL_RCC_OscConfig+0x24c>
 80023e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e025      	b.n	8002440 <HAL_RCC_OscConfig+0x298>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023fc:	d114      	bne.n	8002428 <HAL_RCC_OscConfig+0x280>
 80023fe:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a05      	ldr	r2, [pc, #20]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b03      	ldr	r3, [pc, #12]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a02      	ldr	r2, [pc, #8]	@ (8002418 <HAL_RCC_OscConfig+0x270>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e013      	b.n	8002440 <HAL_RCC_OscConfig+0x298>
 8002418:	40021000 	.word	0x40021000
 800241c:	08008c38 	.word	0x08008c38
 8002420:	2000001c 	.word	0x2000001c
 8002424:	20000020 	.word	0x20000020
 8002428:	4ba0      	ldr	r3, [pc, #640]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a9f      	ldr	r2, [pc, #636]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 800242e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	4b9d      	ldr	r3, [pc, #628]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a9c      	ldr	r2, [pc, #624]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 800243a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800243e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d013      	beq.n	8002470 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7ff fa34 	bl	80018b4 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002450:	f7ff fa30 	bl	80018b4 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	@ 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e2b4      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002462:	4b92      	ldr	r3, [pc, #584]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x2a8>
 800246e:	e014      	b.n	800249a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7ff fa20 	bl	80018b4 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002478:	f7ff fa1c 	bl	80018b4 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	@ 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e2a0      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800248a:	4b88      	ldr	r3, [pc, #544]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x2d0>
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d060      	beq.n	8002568 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_OscConfig+0x310>
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2b0c      	cmp	r3, #12
 80024b0:	d119      	bne.n	80024e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d116      	bne.n	80024e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b8:	4b7c      	ldr	r3, [pc, #496]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_OscConfig+0x328>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e27d      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d0:	4b76      	ldr	r3, [pc, #472]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	4973      	ldr	r1, [pc, #460]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e4:	e040      	b.n	8002568 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d023      	beq.n	8002536 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ee:	4b6f      	ldr	r3, [pc, #444]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6e      	ldr	r2, [pc, #440]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 80024f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fa:	f7ff f9db 	bl	80018b4 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002502:	f7ff f9d7 	bl	80018b4 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e25b      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002514:	4b65      	ldr	r3, [pc, #404]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b62      	ldr	r3, [pc, #392]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	495f      	ldr	r1, [pc, #380]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
 8002534:	e018      	b.n	8002568 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002536:	4b5d      	ldr	r3, [pc, #372]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a5c      	ldr	r2, [pc, #368]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 800253c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002542:	f7ff f9b7 	bl	80018b4 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254a:	f7ff f9b3 	bl	80018b4 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e237      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800255c:	4b53      	ldr	r3, [pc, #332]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f0      	bne.n	800254a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d03c      	beq.n	80025ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01c      	beq.n	80025b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257c:	4b4b      	ldr	r3, [pc, #300]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 800257e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002582:	4a4a      	ldr	r2, [pc, #296]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258c:	f7ff f992 	bl	80018b4 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002594:	f7ff f98e 	bl	80018b4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e212      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025a6:	4b41      	ldr	r3, [pc, #260]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 80025a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ef      	beq.n	8002594 <HAL_RCC_OscConfig+0x3ec>
 80025b4:	e01b      	b.n	80025ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b6:	4b3d      	ldr	r3, [pc, #244]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 80025b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025bc:	4a3b      	ldr	r2, [pc, #236]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c6:	f7ff f975 	bl	80018b4 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ce:	f7ff f971 	bl	80018b4 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e1f5      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025e0:	4b32      	ldr	r3, [pc, #200]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 80025e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1ef      	bne.n	80025ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80a6 	beq.w	8002748 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fc:	2300      	movs	r3, #0
 80025fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002600:	4b2a      	ldr	r3, [pc, #168]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 8002602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10d      	bne.n	8002628 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260c:	4b27      	ldr	r3, [pc, #156]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002610:	4a26      	ldr	r2, [pc, #152]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 8002612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002616:	6593      	str	r3, [r2, #88]	@ 0x58
 8002618:	4b24      	ldr	r3, [pc, #144]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002624:	2301      	movs	r3, #1
 8002626:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002628:	4b21      	ldr	r3, [pc, #132]	@ (80026b0 <HAL_RCC_OscConfig+0x508>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d118      	bne.n	8002666 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002634:	4b1e      	ldr	r3, [pc, #120]	@ (80026b0 <HAL_RCC_OscConfig+0x508>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a1d      	ldr	r2, [pc, #116]	@ (80026b0 <HAL_RCC_OscConfig+0x508>)
 800263a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002640:	f7ff f938 	bl	80018b4 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002648:	f7ff f934 	bl	80018b4 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e1b8      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800265a:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <HAL_RCC_OscConfig+0x508>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d108      	bne.n	8002680 <HAL_RCC_OscConfig+0x4d8>
 800266e:	4b0f      	ldr	r3, [pc, #60]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002674:	4a0d      	ldr	r2, [pc, #52]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800267e:	e029      	b.n	80026d4 <HAL_RCC_OscConfig+0x52c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b05      	cmp	r3, #5
 8002686:	d115      	bne.n	80026b4 <HAL_RCC_OscConfig+0x50c>
 8002688:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800268e:	4a07      	ldr	r2, [pc, #28]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002698:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269e:	4a03      	ldr	r2, [pc, #12]	@ (80026ac <HAL_RCC_OscConfig+0x504>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026a8:	e014      	b.n	80026d4 <HAL_RCC_OscConfig+0x52c>
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40007000 	.word	0x40007000
 80026b4:	4b9d      	ldr	r3, [pc, #628]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ba:	4a9c      	ldr	r2, [pc, #624]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026c4:	4b99      	ldr	r3, [pc, #612]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ca:	4a98      	ldr	r2, [pc, #608]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 80026cc:	f023 0304 	bic.w	r3, r3, #4
 80026d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d016      	beq.n	800270a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026dc:	f7ff f8ea 	bl	80018b4 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e4:	f7ff f8e6 	bl	80018b4 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e168      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fa:	4b8c      	ldr	r3, [pc, #560]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 80026fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0ed      	beq.n	80026e4 <HAL_RCC_OscConfig+0x53c>
 8002708:	e015      	b.n	8002736 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270a:	f7ff f8d3 	bl	80018b4 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002710:	e00a      	b.n	8002728 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002712:	f7ff f8cf 	bl	80018b4 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002720:	4293      	cmp	r3, r2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e151      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002728:	4b80      	ldr	r3, [pc, #512]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1ed      	bne.n	8002712 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002736:	7ffb      	ldrb	r3, [r7, #31]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d105      	bne.n	8002748 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800273c:	4b7b      	ldr	r3, [pc, #492]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002740:	4a7a      	ldr	r2, [pc, #488]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 8002742:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002746:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b00      	cmp	r3, #0
 8002752:	d03c      	beq.n	80027ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01c      	beq.n	8002796 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800275c:	4b73      	ldr	r3, [pc, #460]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 800275e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002762:	4a72      	ldr	r2, [pc, #456]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7ff f8a2 	bl	80018b4 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002774:	f7ff f89e 	bl	80018b4 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e122      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002786:	4b69      	ldr	r3, [pc, #420]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 8002788:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ef      	beq.n	8002774 <HAL_RCC_OscConfig+0x5cc>
 8002794:	e01b      	b.n	80027ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002796:	4b65      	ldr	r3, [pc, #404]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 8002798:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800279c:	4a63      	ldr	r2, [pc, #396]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a6:	f7ff f885 	bl	80018b4 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ae:	f7ff f881 	bl	80018b4 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e105      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027c0:	4b5a      	ldr	r3, [pc, #360]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 80027c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1ef      	bne.n	80027ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 80f9 	beq.w	80029ca <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027dc:	2b02      	cmp	r3, #2
 80027de:	f040 80cf 	bne.w	8002980 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027e2:	4b52      	ldr	r3, [pc, #328]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f003 0203 	and.w	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d12c      	bne.n	8002850 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002800:	3b01      	subs	r3, #1
 8002802:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d123      	bne.n	8002850 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002812:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d11b      	bne.n	8002850 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002822:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002824:	429a      	cmp	r2, r3
 8002826:	d113      	bne.n	8002850 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	3b01      	subs	r3, #1
 8002836:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002838:	429a      	cmp	r2, r3
 800283a:	d109      	bne.n	8002850 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	085b      	lsrs	r3, r3, #1
 8002848:	3b01      	subs	r3, #1
 800284a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800284c:	429a      	cmp	r2, r3
 800284e:	d071      	beq.n	8002934 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b0c      	cmp	r3, #12
 8002854:	d068      	beq.n	8002928 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002856:	4b35      	ldr	r3, [pc, #212]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002862:	4b32      	ldr	r3, [pc, #200]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0ac      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002872:	4b2e      	ldr	r3, [pc, #184]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a2d      	ldr	r2, [pc, #180]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 8002878:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800287c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800287e:	f7ff f819 	bl	80018b4 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7ff f815 	bl	80018b4 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e099      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002898:	4b24      	ldr	r3, [pc, #144]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f0      	bne.n	8002886 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a4:	4b21      	ldr	r3, [pc, #132]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	4b21      	ldr	r3, [pc, #132]	@ (8002930 <HAL_RCC_OscConfig+0x788>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028b4:	3a01      	subs	r2, #1
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	4311      	orrs	r1, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028be:	0212      	lsls	r2, r2, #8
 80028c0:	4311      	orrs	r1, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028c6:	0852      	lsrs	r2, r2, #1
 80028c8:	3a01      	subs	r2, #1
 80028ca:	0552      	lsls	r2, r2, #21
 80028cc:	4311      	orrs	r1, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028d2:	0852      	lsrs	r2, r2, #1
 80028d4:	3a01      	subs	r2, #1
 80028d6:	0652      	lsls	r2, r2, #25
 80028d8:	4311      	orrs	r1, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028de:	06d2      	lsls	r2, r2, #27
 80028e0:	430a      	orrs	r2, r1
 80028e2:	4912      	ldr	r1, [pc, #72]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028e8:	4b10      	ldr	r3, [pc, #64]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0f      	ldr	r2, [pc, #60]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 80028ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028f4:	4b0d      	ldr	r3, [pc, #52]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a0c      	ldr	r2, [pc, #48]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 80028fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002900:	f7fe ffd8 	bl	80018b4 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002908:	f7fe ffd4 	bl	80018b4 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e058      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291a:	4b04      	ldr	r3, [pc, #16]	@ (800292c <HAL_RCC_OscConfig+0x784>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002926:	e050      	b.n	80029ca <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e04f      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
 800292c:	40021000 	.word	0x40021000
 8002930:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002934:	4b27      	ldr	r3, [pc, #156]	@ (80029d4 <HAL_RCC_OscConfig+0x82c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d144      	bne.n	80029ca <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002940:	4b24      	ldr	r3, [pc, #144]	@ (80029d4 <HAL_RCC_OscConfig+0x82c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a23      	ldr	r2, [pc, #140]	@ (80029d4 <HAL_RCC_OscConfig+0x82c>)
 8002946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800294a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800294c:	4b21      	ldr	r3, [pc, #132]	@ (80029d4 <HAL_RCC_OscConfig+0x82c>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a20      	ldr	r2, [pc, #128]	@ (80029d4 <HAL_RCC_OscConfig+0x82c>)
 8002952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002956:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002958:	f7fe ffac 	bl	80018b4 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe ffa8 	bl	80018b4 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e02c      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002972:	4b18      	ldr	r3, [pc, #96]	@ (80029d4 <HAL_RCC_OscConfig+0x82c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x7b8>
 800297e:	e024      	b.n	80029ca <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2b0c      	cmp	r3, #12
 8002984:	d01f      	beq.n	80029c6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002986:	4b13      	ldr	r3, [pc, #76]	@ (80029d4 <HAL_RCC_OscConfig+0x82c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a12      	ldr	r2, [pc, #72]	@ (80029d4 <HAL_RCC_OscConfig+0x82c>)
 800298c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002992:	f7fe ff8f 	bl	80018b4 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299a:	f7fe ff8b 	bl	80018b4 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e00f      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ac:	4b09      	ldr	r3, [pc, #36]	@ (80029d4 <HAL_RCC_OscConfig+0x82c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f0      	bne.n	800299a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029b8:	4b06      	ldr	r3, [pc, #24]	@ (80029d4 <HAL_RCC_OscConfig+0x82c>)
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	4905      	ldr	r1, [pc, #20]	@ (80029d4 <HAL_RCC_OscConfig+0x82c>)
 80029be:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <HAL_RCC_OscConfig+0x830>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	60cb      	str	r3, [r1, #12]
 80029c4:	e001      	b.n	80029ca <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3720      	adds	r7, #32
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000
 80029d8:	feeefffc 	.word	0xfeeefffc

080029dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e11d      	b.n	8002c30 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029f4:	4b90      	ldr	r3, [pc, #576]	@ (8002c38 <HAL_RCC_ClockConfig+0x25c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d910      	bls.n	8002a24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b8d      	ldr	r3, [pc, #564]	@ (8002c38 <HAL_RCC_ClockConfig+0x25c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 020f 	bic.w	r2, r3, #15
 8002a0a:	498b      	ldr	r1, [pc, #556]	@ (8002c38 <HAL_RCC_ClockConfig+0x25c>)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b89      	ldr	r3, [pc, #548]	@ (8002c38 <HAL_RCC_ClockConfig+0x25c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e105      	b.n	8002c30 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d010      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	4b81      	ldr	r3, [pc, #516]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d908      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a40:	4b7e      	ldr	r3, [pc, #504]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	497b      	ldr	r1, [pc, #492]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d079      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d11e      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a66:	4b75      	ldr	r3, [pc, #468]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0dc      	b.n	8002c30 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002a76:	f000 fa09 	bl	8002e8c <RCC_GetSysClockFreqFromPLLSource>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4a70      	ldr	r2, [pc, #448]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d946      	bls.n	8002b10 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a82:	4b6e      	ldr	r3, [pc, #440]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d140      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a8e:	4b6b      	ldr	r3, [pc, #428]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a96:	4a69      	ldr	r2, [pc, #420]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a9e:	2380      	movs	r3, #128	@ 0x80
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	e035      	b.n	8002b10 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d107      	bne.n	8002abc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aac:	4b63      	ldr	r3, [pc, #396]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d115      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0b9      	b.n	8002c30 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ac4:	4b5d      	ldr	r3, [pc, #372]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d109      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0ad      	b.n	8002c30 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad4:	4b59      	ldr	r3, [pc, #356]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0a5      	b.n	8002c30 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002ae4:	f000 f8b4 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4a55      	ldr	r2, [pc, #340]	@ (8002c40 <HAL_RCC_ClockConfig+0x264>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d90f      	bls.n	8002b10 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002af0:	4b52      	ldr	r3, [pc, #328]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d109      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002afc:	4b4f      	ldr	r3, [pc, #316]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b04:	4a4d      	ldr	r2, [pc, #308]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b0a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b0c:	2380      	movs	r3, #128	@ 0x80
 8002b0e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b10:	4b4a      	ldr	r3, [pc, #296]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f023 0203 	bic.w	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4947      	ldr	r1, [pc, #284]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b22:	f7fe fec7 	bl	80018b4 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b28:	e00a      	b.n	8002b40 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b2a:	f7fe fec3 	bl	80018b4 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e077      	b.n	8002c30 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b40:	4b3e      	ldr	r3, [pc, #248]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 020c 	and.w	r2, r3, #12
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d1eb      	bne.n	8002b2a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2b80      	cmp	r3, #128	@ 0x80
 8002b56:	d105      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b58:	4b38      	ldr	r3, [pc, #224]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4a37      	ldr	r2, [pc, #220]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002b5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b62:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d010      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	4b31      	ldr	r3, [pc, #196]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d208      	bcs.n	8002b92 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b80:	4b2e      	ldr	r3, [pc, #184]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	492b      	ldr	r1, [pc, #172]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b92:	4b29      	ldr	r3, [pc, #164]	@ (8002c38 <HAL_RCC_ClockConfig+0x25c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d210      	bcs.n	8002bc2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba0:	4b25      	ldr	r3, [pc, #148]	@ (8002c38 <HAL_RCC_ClockConfig+0x25c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 020f 	bic.w	r2, r3, #15
 8002ba8:	4923      	ldr	r1, [pc, #140]	@ (8002c38 <HAL_RCC_ClockConfig+0x25c>)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb0:	4b21      	ldr	r3, [pc, #132]	@ (8002c38 <HAL_RCC_ClockConfig+0x25c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e036      	b.n	8002c30 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d008      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bce:	4b1b      	ldr	r3, [pc, #108]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	4918      	ldr	r1, [pc, #96]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d009      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bec:	4b13      	ldr	r3, [pc, #76]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4910      	ldr	r1, [pc, #64]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c00:	f000 f826 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b0d      	ldr	r3, [pc, #52]	@ (8002c3c <HAL_RCC_ClockConfig+0x260>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	091b      	lsrs	r3, r3, #4
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	490c      	ldr	r1, [pc, #48]	@ (8002c44 <HAL_RCC_ClockConfig+0x268>)
 8002c12:	5ccb      	ldrb	r3, [r1, r3]
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c48 <HAL_RCC_ClockConfig+0x26c>)
 8002c1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c20:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <HAL_RCC_ClockConfig+0x270>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe fdf5 	bl	8001814 <HAL_InitTick>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40022000 	.word	0x40022000
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	04c4b400 	.word	0x04c4b400
 8002c44:	08008c38 	.word	0x08008c38
 8002c48:	2000001c 	.word	0x2000001c
 8002c4c:	20000020 	.word	0x20000020

08002c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b089      	sub	sp, #36	@ 0x24
 8002c54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c68:	4b3b      	ldr	r3, [pc, #236]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0x34>
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	2b0c      	cmp	r3, #12
 8002c7c:	d121      	bne.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d11e      	bne.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c84:	4b34      	ldr	r3, [pc, #208]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d107      	bne.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c90:	4b31      	ldr	r3, [pc, #196]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	e005      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cac:	4a2b      	ldr	r2, [pc, #172]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10d      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d102      	bne.n	8002cce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cc8:	4b25      	ldr	r3, [pc, #148]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	e004      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cd4:	4b23      	ldr	r3, [pc, #140]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d134      	bne.n	8002d48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cde:	4b1e      	ldr	r3, [pc, #120]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d003      	beq.n	8002cf6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d003      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0xac>
 8002cf4:	e005      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cf8:	617b      	str	r3, [r7, #20]
      break;
 8002cfa:	e005      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cfe:	617b      	str	r3, [r7, #20]
      break;
 8002d00:	e002      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	617b      	str	r3, [r7, #20]
      break;
 8002d06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d08:	4b13      	ldr	r3, [pc, #76]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	3301      	adds	r3, #1
 8002d14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d16:	4b10      	ldr	r3, [pc, #64]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	fb03 f202 	mul.w	r2, r3, r2
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	0e5b      	lsrs	r3, r3, #25
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	3301      	adds	r3, #1
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d48:	69bb      	ldr	r3, [r7, #24]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3724      	adds	r7, #36	@ 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	08008c50 	.word	0x08008c50
 8002d60:	00f42400 	.word	0x00f42400
 8002d64:	007a1200 	.word	0x007a1200

08002d68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	@ (8002d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	2000001c 	.word	0x2000001c

08002d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d84:	f7ff fff0 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	4904      	ldr	r1, [pc, #16]	@ (8002da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d96:	5ccb      	ldrb	r3, [r1, r3]
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40021000 	.word	0x40021000
 8002da8:	08008c48 	.word	0x08008c48

08002dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002db0:	f7ff ffda 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002db4:	4602      	mov	r2, r0
 8002db6:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	0adb      	lsrs	r3, r3, #11
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	4904      	ldr	r1, [pc, #16]	@ (8002dd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dc2:	5ccb      	ldrb	r3, [r1, r3]
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	08008c48 	.word	0x08008c48

08002dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002de0:	2300      	movs	r3, #0
 8002de2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002de4:	4b27      	ldr	r3, [pc, #156]	@ (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002df0:	f7ff f906 	bl	8002000 <HAL_PWREx_GetVoltageRange>
 8002df4:	6178      	str	r0, [r7, #20]
 8002df6:	e014      	b.n	8002e22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df8:	4b22      	ldr	r3, [pc, #136]	@ (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	4a21      	ldr	r2, [pc, #132]	@ (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e04:	4b1f      	ldr	r3, [pc, #124]	@ (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e10:	f7ff f8f6 	bl	8002000 <HAL_PWREx_GetVoltageRange>
 8002e14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e16:	4b1b      	ldr	r3, [pc, #108]	@ (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e28:	d10b      	bne.n	8002e42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b80      	cmp	r3, #128	@ 0x80
 8002e2e:	d913      	bls.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e34:	d902      	bls.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e36:	2302      	movs	r3, #2
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	e00d      	b.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	e00a      	b.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e46:	d902      	bls.n	8002e4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002e48:	2302      	movs	r3, #2
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	e004      	b.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b70      	cmp	r3, #112	@ 0x70
 8002e52:	d101      	bne.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e54:	2301      	movs	r3, #1
 8002e56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e58:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 020f 	bic.w	r2, r3, #15
 8002e60:	4909      	ldr	r1, [pc, #36]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e68:	4b07      	ldr	r3, [pc, #28]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d001      	beq.n	8002e7a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40022000 	.word	0x40022000

08002e8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e92:	4b2d      	ldr	r3, [pc, #180]	@ (8002f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d00b      	beq.n	8002eba <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d825      	bhi.n	8002ef4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d008      	beq.n	8002ec0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d11f      	bne.n	8002ef4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002eb4:	4b25      	ldr	r3, [pc, #148]	@ (8002f4c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002eb6:	613b      	str	r3, [r7, #16]
    break;
 8002eb8:	e01f      	b.n	8002efa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002eba:	4b25      	ldr	r3, [pc, #148]	@ (8002f50 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002ebc:	613b      	str	r3, [r7, #16]
    break;
 8002ebe:	e01c      	b.n	8002efa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ec0:	4b21      	ldr	r3, [pc, #132]	@ (8002f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d107      	bne.n	8002edc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8002f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	e005      	b.n	8002ee8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002edc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002ee8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f54 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef0:	613b      	str	r3, [r7, #16]
    break;
 8002ef2:	e002      	b.n	8002efa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	613b      	str	r3, [r7, #16]
    break;
 8002ef8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002efa:	4b13      	ldr	r3, [pc, #76]	@ (8002f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	091b      	lsrs	r3, r3, #4
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	3301      	adds	r3, #1
 8002f06:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f08:	4b0f      	ldr	r3, [pc, #60]	@ (8002f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	0a1b      	lsrs	r3, r3, #8
 8002f0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	fb03 f202 	mul.w	r2, r3, r2
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f20:	4b09      	ldr	r3, [pc, #36]	@ (8002f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	0e5b      	lsrs	r3, r3, #25
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f38:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002f3a:	683b      	ldr	r3, [r7, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	371c      	adds	r7, #28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	00f42400 	.word	0x00f42400
 8002f50:	007a1200 	.word	0x007a1200
 8002f54:	08008c50 	.word	0x08008c50

08002f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f60:	2300      	movs	r3, #0
 8002f62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f64:	2300      	movs	r3, #0
 8002f66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d040      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f78:	2b80      	cmp	r3, #128	@ 0x80
 8002f7a:	d02a      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f7c:	2b80      	cmp	r3, #128	@ 0x80
 8002f7e:	d825      	bhi.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f80:	2b60      	cmp	r3, #96	@ 0x60
 8002f82:	d026      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f84:	2b60      	cmp	r3, #96	@ 0x60
 8002f86:	d821      	bhi.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f88:	2b40      	cmp	r3, #64	@ 0x40
 8002f8a:	d006      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002f8c:	2b40      	cmp	r3, #64	@ 0x40
 8002f8e:	d81d      	bhi.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d009      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d010      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002f98:	e018      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f9a:	4b89      	ldr	r3, [pc, #548]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	4a88      	ldr	r2, [pc, #544]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fa4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa6:	e015      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fb02 	bl	80035b8 <RCCEx_PLLSAI1_Config>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fb8:	e00c      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3320      	adds	r3, #32
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fbed 	bl	80037a0 <RCCEx_PLLSAI2_Config>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fca:	e003      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	74fb      	strb	r3, [r7, #19]
      break;
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd4:	7cfb      	ldrb	r3, [r7, #19]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fda:	4b79      	ldr	r3, [pc, #484]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fe0:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fe8:	4975      	ldr	r1, [pc, #468]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002ff0:	e001      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff2:	7cfb      	ldrb	r3, [r7, #19]
 8002ff4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d047      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800300a:	d030      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800300c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003010:	d82a      	bhi.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003012:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003016:	d02a      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003018:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800301c:	d824      	bhi.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800301e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003022:	d008      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003028:	d81e      	bhi.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800302e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003032:	d010      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003034:	e018      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003036:	4b62      	ldr	r3, [pc, #392]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	4a61      	ldr	r2, [pc, #388]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003040:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003042:	e015      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3304      	adds	r3, #4
 8003048:	2100      	movs	r1, #0
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fab4 	bl	80035b8 <RCCEx_PLLSAI1_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003054:	e00c      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3320      	adds	r3, #32
 800305a:	2100      	movs	r1, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fb9f 	bl	80037a0 <RCCEx_PLLSAI2_Config>
 8003062:	4603      	mov	r3, r0
 8003064:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003066:	e003      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	74fb      	strb	r3, [r7, #19]
      break;
 800306c:	e000      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800306e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003070:	7cfb      	ldrb	r3, [r7, #19]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10b      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003076:	4b52      	ldr	r3, [pc, #328]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003078:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800307c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003084:	494e      	ldr	r1, [pc, #312]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800308c:	e001      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308e:	7cfb      	ldrb	r3, [r7, #19]
 8003090:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 809f 	beq.w	80031de <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a0:	2300      	movs	r3, #0
 80030a2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030a4:	4b46      	ldr	r3, [pc, #280]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80030b4:	2300      	movs	r3, #0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00d      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	4b41      	ldr	r3, [pc, #260]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030be:	4a40      	ldr	r2, [pc, #256]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80030c6:	4b3e      	ldr	r3, [pc, #248]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d2:	2301      	movs	r3, #1
 80030d4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030d6:	4b3b      	ldr	r3, [pc, #236]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a3a      	ldr	r2, [pc, #232]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030e2:	f7fe fbe7 	bl	80018b4 <HAL_GetTick>
 80030e6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030e8:	e009      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ea:	f7fe fbe3 	bl	80018b4 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d902      	bls.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	74fb      	strb	r3, [r7, #19]
        break;
 80030fc:	e005      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030fe:	4b31      	ldr	r3, [pc, #196]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0ef      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800310a:	7cfb      	ldrb	r3, [r7, #19]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d15b      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003110:	4b2b      	ldr	r3, [pc, #172]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800311a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d01f      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	429a      	cmp	r2, r3
 800312c:	d019      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800312e:	4b24      	ldr	r3, [pc, #144]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003134:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003138:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800313a:	4b21      	ldr	r3, [pc, #132]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003140:	4a1f      	ldr	r2, [pc, #124]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003142:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003146:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800314a:	4b1d      	ldr	r3, [pc, #116]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003150:	4a1b      	ldr	r2, [pc, #108]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003156:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800315a:	4a19      	ldr	r2, [pc, #100]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d016      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fe fba2 	bl	80018b4 <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003172:	e00b      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003174:	f7fe fb9e 	bl	80018b4 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d902      	bls.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	74fb      	strb	r3, [r7, #19]
            break;
 800318a:	e006      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800318c:	4b0c      	ldr	r3, [pc, #48]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0ec      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800319a:	7cfb      	ldrb	r3, [r7, #19]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10c      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031a0:	4b07      	ldr	r3, [pc, #28]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b0:	4903      	ldr	r1, [pc, #12]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031b8:	e008      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031ba:	7cfb      	ldrb	r3, [r7, #19]
 80031bc:	74bb      	strb	r3, [r7, #18]
 80031be:	e005      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
 80031ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031cc:	7c7b      	ldrb	r3, [r7, #17]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d105      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d2:	4ba0      	ldr	r3, [pc, #640]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d6:	4a9f      	ldr	r2, [pc, #636]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031ea:	4b9a      	ldr	r3, [pc, #616]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f0:	f023 0203 	bic.w	r2, r3, #3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f8:	4996      	ldr	r1, [pc, #600]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800320c:	4b91      	ldr	r3, [pc, #580]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003212:	f023 020c 	bic.w	r2, r3, #12
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321a:	498e      	ldr	r1, [pc, #568]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800322e:	4b89      	ldr	r3, [pc, #548]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003234:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323c:	4985      	ldr	r1, [pc, #532]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003250:	4b80      	ldr	r3, [pc, #512]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003256:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800325e:	497d      	ldr	r1, [pc, #500]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003272:	4b78      	ldr	r3, [pc, #480]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003278:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003280:	4974      	ldr	r1, [pc, #464]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003294:	4b6f      	ldr	r3, [pc, #444]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a2:	496c      	ldr	r1, [pc, #432]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032b6:	4b67      	ldr	r3, [pc, #412]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032c4:	4963      	ldr	r1, [pc, #396]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032e6:	495b      	ldr	r1, [pc, #364]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032fa:	4b56      	ldr	r3, [pc, #344]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003300:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003308:	4952      	ldr	r1, [pc, #328]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800331c:	4b4d      	ldr	r3, [pc, #308]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003322:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332a:	494a      	ldr	r1, [pc, #296]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800333e:	4b45      	ldr	r3, [pc, #276]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003344:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334c:	4941      	ldr	r1, [pc, #260]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003360:	4b3c      	ldr	r3, [pc, #240]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003362:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003366:	f023 0203 	bic.w	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336e:	4939      	ldr	r1, [pc, #228]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d028      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003382:	4b34      	ldr	r3, [pc, #208]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003388:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003390:	4930      	ldr	r1, [pc, #192]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800339c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033a0:	d106      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033ac:	60d3      	str	r3, [r2, #12]
 80033ae:	e011      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3304      	adds	r3, #4
 80033be:	2101      	movs	r1, #1
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 f8f9 	bl	80035b8 <RCCEx_PLLSAI1_Config>
 80033c6:	4603      	mov	r3, r0
 80033c8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80033d0:	7cfb      	ldrb	r3, [r7, #19]
 80033d2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d04d      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033e8:	d108      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80033ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033f0:	4a18      	ldr	r2, [pc, #96]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033f6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80033fa:	e012      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80033fc:	4b15      	ldr	r3, [pc, #84]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003402:	4a14      	ldr	r2, [pc, #80]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003404:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003408:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800340c:	4b11      	ldr	r3, [pc, #68]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003412:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800341a:	490e      	ldr	r1, [pc, #56]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003426:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800342a:	d106      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800342c:	4b09      	ldr	r3, [pc, #36]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4a08      	ldr	r2, [pc, #32]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003432:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003436:	60d3      	str	r3, [r2, #12]
 8003438:	e020      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800343e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003442:	d109      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003444:	4b03      	ldr	r3, [pc, #12]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4a02      	ldr	r2, [pc, #8]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800344a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800344e:	60d3      	str	r3, [r2, #12]
 8003450:	e014      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800345c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003460:	d10c      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	2101      	movs	r1, #1
 8003468:	4618      	mov	r0, r3
 800346a:	f000 f8a5 	bl	80035b8 <RCCEx_PLLSAI1_Config>
 800346e:	4603      	mov	r3, r0
 8003470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003472:	7cfb      	ldrb	r3, [r7, #19]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003478:	7cfb      	ldrb	r3, [r7, #19]
 800347a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d028      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003488:	4b4a      	ldr	r3, [pc, #296]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003496:	4947      	ldr	r1, [pc, #284]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034a6:	d106      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a8:	4b42      	ldr	r3, [pc, #264]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4a41      	ldr	r2, [pc, #260]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034b2:	60d3      	str	r3, [r2, #12]
 80034b4:	e011      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034be:	d10c      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3304      	adds	r3, #4
 80034c4:	2101      	movs	r1, #1
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f876 	bl	80035b8 <RCCEx_PLLSAI1_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80034d6:	7cfb      	ldrb	r3, [r7, #19]
 80034d8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d01e      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034e6:	4b33      	ldr	r3, [pc, #204]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ec:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034f6:	492f      	ldr	r1, [pc, #188]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003504:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003508:	d10c      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	2102      	movs	r1, #2
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f851 	bl	80035b8 <RCCEx_PLLSAI1_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00b      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003530:	4b20      	ldr	r3, [pc, #128]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003532:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003536:	f023 0204 	bic.w	r2, r3, #4
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003540:	491c      	ldr	r1, [pc, #112]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00b      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003554:	4b17      	ldr	r3, [pc, #92]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003556:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800355a:	f023 0218 	bic.w	r2, r3, #24
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003564:	4913      	ldr	r1, [pc, #76]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d017      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003578:	4b0e      	ldr	r3, [pc, #56]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800357a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800357e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003588:	490a      	ldr	r1, [pc, #40]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003596:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800359a:	d105      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800359c:	4b05      	ldr	r3, [pc, #20]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a04      	ldr	r2, [pc, #16]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40021000 	.word	0x40021000

080035b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035c6:	4b72      	ldr	r3, [pc, #456]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00e      	beq.n	80035f0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f003 0203 	and.w	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d103      	bne.n	80035ea <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
       ||
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d142      	bne.n	8003670 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	73fb      	strb	r3, [r7, #15]
 80035ee:	e03f      	b.n	8003670 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d018      	beq.n	800362a <RCCEx_PLLSAI1_Config+0x72>
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d825      	bhi.n	8003648 <RCCEx_PLLSAI1_Config+0x90>
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d002      	beq.n	8003606 <RCCEx_PLLSAI1_Config+0x4e>
 8003600:	2b02      	cmp	r3, #2
 8003602:	d009      	beq.n	8003618 <RCCEx_PLLSAI1_Config+0x60>
 8003604:	e020      	b.n	8003648 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003606:	4b62      	ldr	r3, [pc, #392]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d11d      	bne.n	800364e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003616:	e01a      	b.n	800364e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003618:	4b5d      	ldr	r3, [pc, #372]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003620:	2b00      	cmp	r3, #0
 8003622:	d116      	bne.n	8003652 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003628:	e013      	b.n	8003652 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800362a:	4b59      	ldr	r3, [pc, #356]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10f      	bne.n	8003656 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003636:	4b56      	ldr	r3, [pc, #344]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003646:	e006      	b.n	8003656 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
      break;
 800364c:	e004      	b.n	8003658 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800364e:	bf00      	nop
 8003650:	e002      	b.n	8003658 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003652:	bf00      	nop
 8003654:	e000      	b.n	8003658 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003656:	bf00      	nop
    }

    if(status == HAL_OK)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d108      	bne.n	8003670 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800365e:	4b4c      	ldr	r3, [pc, #304]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f023 0203 	bic.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4949      	ldr	r1, [pc, #292]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800366c:	4313      	orrs	r3, r2
 800366e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f040 8086 	bne.w	8003784 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003678:	4b45      	ldr	r3, [pc, #276]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a44      	ldr	r2, [pc, #272]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800367e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003684:	f7fe f916 	bl	80018b4 <HAL_GetTick>
 8003688:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800368a:	e009      	b.n	80036a0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800368c:	f7fe f912 	bl	80018b4 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d902      	bls.n	80036a0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	73fb      	strb	r3, [r7, #15]
        break;
 800369e:	e005      	b.n	80036ac <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1ef      	bne.n	800368c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d168      	bne.n	8003784 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d113      	bne.n	80036e0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036b8:	4b35      	ldr	r3, [pc, #212]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	4b35      	ldr	r3, [pc, #212]	@ (8003794 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036be:	4013      	ands	r3, r2
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6892      	ldr	r2, [r2, #8]
 80036c4:	0211      	lsls	r1, r2, #8
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68d2      	ldr	r2, [r2, #12]
 80036ca:	06d2      	lsls	r2, r2, #27
 80036cc:	4311      	orrs	r1, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6852      	ldr	r2, [r2, #4]
 80036d2:	3a01      	subs	r2, #1
 80036d4:	0112      	lsls	r2, r2, #4
 80036d6:	430a      	orrs	r2, r1
 80036d8:	492d      	ldr	r1, [pc, #180]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	610b      	str	r3, [r1, #16]
 80036de:	e02d      	b.n	800373c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d115      	bne.n	8003712 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003798 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6892      	ldr	r2, [r2, #8]
 80036f2:	0211      	lsls	r1, r2, #8
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6912      	ldr	r2, [r2, #16]
 80036f8:	0852      	lsrs	r2, r2, #1
 80036fa:	3a01      	subs	r2, #1
 80036fc:	0552      	lsls	r2, r2, #21
 80036fe:	4311      	orrs	r1, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6852      	ldr	r2, [r2, #4]
 8003704:	3a01      	subs	r2, #1
 8003706:	0112      	lsls	r2, r2, #4
 8003708:	430a      	orrs	r2, r1
 800370a:	4921      	ldr	r1, [pc, #132]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800370c:	4313      	orrs	r3, r2
 800370e:	610b      	str	r3, [r1, #16]
 8003710:	e014      	b.n	800373c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003712:	4b1f      	ldr	r3, [pc, #124]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	4b21      	ldr	r3, [pc, #132]	@ (800379c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003718:	4013      	ands	r3, r2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6892      	ldr	r2, [r2, #8]
 800371e:	0211      	lsls	r1, r2, #8
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6952      	ldr	r2, [r2, #20]
 8003724:	0852      	lsrs	r2, r2, #1
 8003726:	3a01      	subs	r2, #1
 8003728:	0652      	lsls	r2, r2, #25
 800372a:	4311      	orrs	r1, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6852      	ldr	r2, [r2, #4]
 8003730:	3a01      	subs	r2, #1
 8003732:	0112      	lsls	r2, r2, #4
 8003734:	430a      	orrs	r2, r1
 8003736:	4916      	ldr	r1, [pc, #88]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003738:	4313      	orrs	r3, r2
 800373a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800373c:	4b14      	ldr	r3, [pc, #80]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a13      	ldr	r2, [pc, #76]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003742:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003746:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7fe f8b4 	bl	80018b4 <HAL_GetTick>
 800374c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800374e:	e009      	b.n	8003764 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003750:	f7fe f8b0 	bl	80018b4 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d902      	bls.n	8003764 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	73fb      	strb	r3, [r7, #15]
          break;
 8003762:	e005      	b.n	8003770 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003764:	4b0a      	ldr	r3, [pc, #40]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0ef      	beq.n	8003750 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003776:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	4904      	ldr	r1, [pc, #16]	@ (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003780:	4313      	orrs	r3, r2
 8003782:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
 8003794:	07ff800f 	.word	0x07ff800f
 8003798:	ff9f800f 	.word	0xff9f800f
 800379c:	f9ff800f 	.word	0xf9ff800f

080037a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ae:	4b72      	ldr	r3, [pc, #456]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00e      	beq.n	80037d8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 0203 	and.w	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d103      	bne.n	80037d2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
       ||
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d142      	bne.n	8003858 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
 80037d6:	e03f      	b.n	8003858 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d018      	beq.n	8003812 <RCCEx_PLLSAI2_Config+0x72>
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d825      	bhi.n	8003830 <RCCEx_PLLSAI2_Config+0x90>
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d002      	beq.n	80037ee <RCCEx_PLLSAI2_Config+0x4e>
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d009      	beq.n	8003800 <RCCEx_PLLSAI2_Config+0x60>
 80037ec:	e020      	b.n	8003830 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037ee:	4b62      	ldr	r3, [pc, #392]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d11d      	bne.n	8003836 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037fe:	e01a      	b.n	8003836 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003800:	4b5d      	ldr	r3, [pc, #372]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d116      	bne.n	800383a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003810:	e013      	b.n	800383a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003812:	4b59      	ldr	r3, [pc, #356]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10f      	bne.n	800383e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800381e:	4b56      	ldr	r3, [pc, #344]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800382e:	e006      	b.n	800383e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
      break;
 8003834:	e004      	b.n	8003840 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003836:	bf00      	nop
 8003838:	e002      	b.n	8003840 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800383a:	bf00      	nop
 800383c:	e000      	b.n	8003840 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800383e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d108      	bne.n	8003858 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003846:	4b4c      	ldr	r3, [pc, #304]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f023 0203 	bic.w	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4949      	ldr	r1, [pc, #292]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003854:	4313      	orrs	r3, r2
 8003856:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	f040 8086 	bne.w	800396c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003860:	4b45      	ldr	r3, [pc, #276]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a44      	ldr	r2, [pc, #272]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800386a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800386c:	f7fe f822 	bl	80018b4 <HAL_GetTick>
 8003870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003872:	e009      	b.n	8003888 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003874:	f7fe f81e 	bl	80018b4 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d902      	bls.n	8003888 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	73fb      	strb	r3, [r7, #15]
        break;
 8003886:	e005      	b.n	8003894 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003888:	4b3b      	ldr	r3, [pc, #236]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1ef      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d168      	bne.n	800396c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d113      	bne.n	80038c8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038a0:	4b35      	ldr	r3, [pc, #212]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	4b35      	ldr	r3, [pc, #212]	@ (800397c <RCCEx_PLLSAI2_Config+0x1dc>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6892      	ldr	r2, [r2, #8]
 80038ac:	0211      	lsls	r1, r2, #8
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68d2      	ldr	r2, [r2, #12]
 80038b2:	06d2      	lsls	r2, r2, #27
 80038b4:	4311      	orrs	r1, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6852      	ldr	r2, [r2, #4]
 80038ba:	3a01      	subs	r2, #1
 80038bc:	0112      	lsls	r2, r2, #4
 80038be:	430a      	orrs	r2, r1
 80038c0:	492d      	ldr	r1, [pc, #180]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	614b      	str	r3, [r1, #20]
 80038c6:	e02d      	b.n	8003924 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d115      	bne.n	80038fa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003980 <RCCEx_PLLSAI2_Config+0x1e0>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6892      	ldr	r2, [r2, #8]
 80038da:	0211      	lsls	r1, r2, #8
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6912      	ldr	r2, [r2, #16]
 80038e0:	0852      	lsrs	r2, r2, #1
 80038e2:	3a01      	subs	r2, #1
 80038e4:	0552      	lsls	r2, r2, #21
 80038e6:	4311      	orrs	r1, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6852      	ldr	r2, [r2, #4]
 80038ec:	3a01      	subs	r2, #1
 80038ee:	0112      	lsls	r2, r2, #4
 80038f0:	430a      	orrs	r2, r1
 80038f2:	4921      	ldr	r1, [pc, #132]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	614b      	str	r3, [r1, #20]
 80038f8:	e014      	b.n	8003924 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	4b21      	ldr	r3, [pc, #132]	@ (8003984 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003900:	4013      	ands	r3, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6892      	ldr	r2, [r2, #8]
 8003906:	0211      	lsls	r1, r2, #8
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6952      	ldr	r2, [r2, #20]
 800390c:	0852      	lsrs	r2, r2, #1
 800390e:	3a01      	subs	r2, #1
 8003910:	0652      	lsls	r2, r2, #25
 8003912:	4311      	orrs	r1, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6852      	ldr	r2, [r2, #4]
 8003918:	3a01      	subs	r2, #1
 800391a:	0112      	lsls	r2, r2, #4
 800391c:	430a      	orrs	r2, r1
 800391e:	4916      	ldr	r1, [pc, #88]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003920:	4313      	orrs	r3, r2
 8003922:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003924:	4b14      	ldr	r3, [pc, #80]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a13      	ldr	r2, [pc, #76]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 800392a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800392e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fd ffc0 	bl	80018b4 <HAL_GetTick>
 8003934:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003936:	e009      	b.n	800394c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003938:	f7fd ffbc 	bl	80018b4 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d902      	bls.n	800394c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	73fb      	strb	r3, [r7, #15]
          break;
 800394a:	e005      	b.n	8003958 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800394c:	4b0a      	ldr	r3, [pc, #40]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0ef      	beq.n	8003938 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800395e:	4b06      	ldr	r3, [pc, #24]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	4904      	ldr	r1, [pc, #16]	@ (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003968:	4313      	orrs	r3, r2
 800396a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800396c:	7bfb      	ldrb	r3, [r7, #15]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000
 800397c:	07ff800f 	.word	0x07ff800f
 8003980:	ff9f800f 	.word	0xff9f800f
 8003984:	f9ff800f 	.word	0xf9ff800f

08003988 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e095      	b.n	8003ac6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d108      	bne.n	80039b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039aa:	d009      	beq.n	80039c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	61da      	str	r2, [r3, #28]
 80039b2:	e005      	b.n	80039c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fd fdac 	bl	8001538 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a00:	d902      	bls.n	8003a08 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	e002      	b.n	8003a0e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a0c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003a16:	d007      	beq.n	8003a28 <HAL_SPI_Init+0xa0>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a20:	d002      	beq.n	8003a28 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6a:	ea42 0103 	orr.w	r1, r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a72:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	0c1b      	lsrs	r3, r3, #16
 8003a84:	f003 0204 	and.w	r2, r3, #4
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003aa4:	ea42 0103 	orr.w	r1, r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b088      	sub	sp, #32
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	603b      	str	r3, [r7, #0]
 8003ada:	4613      	mov	r3, r2
 8003adc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_SPI_Transmit+0x22>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e15f      	b.n	8003db0 <HAL_SPI_Transmit+0x2e2>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003af8:	f7fd fedc 	bl	80018b4 <HAL_GetTick>
 8003afc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d002      	beq.n	8003b14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b12:	e148      	b.n	8003da6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_SPI_Transmit+0x52>
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d102      	bne.n	8003b26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b24:	e13f      	b.n	8003da6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2203      	movs	r2, #3
 8003b2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	88fa      	ldrh	r2, [r7, #6]
 8003b3e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b70:	d10f      	bne.n	8003b92 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9c:	2b40      	cmp	r3, #64	@ 0x40
 8003b9e:	d007      	beq.n	8003bb0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bb8:	d94f      	bls.n	8003c5a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <HAL_SPI_Transmit+0xfa>
 8003bc2:	8afb      	ldrh	r3, [r7, #22]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d142      	bne.n	8003c4e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bcc:	881a      	ldrh	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd8:	1c9a      	adds	r2, r3, #2
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bec:	e02f      	b.n	8003c4e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d112      	bne.n	8003c22 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	881a      	ldrh	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0c:	1c9a      	adds	r2, r3, #2
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c20:	e015      	b.n	8003c4e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c22:	f7fd fe47 	bl	80018b4 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d803      	bhi.n	8003c3a <HAL_SPI_Transmit+0x16c>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c38:	d102      	bne.n	8003c40 <HAL_SPI_Transmit+0x172>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d106      	bne.n	8003c4e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003c4c:	e0ab      	b.n	8003da6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ca      	bne.n	8003bee <HAL_SPI_Transmit+0x120>
 8003c58:	e080      	b.n	8003d5c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_SPI_Transmit+0x19a>
 8003c62:	8afb      	ldrh	r3, [r7, #22]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d174      	bne.n	8003d52 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d912      	bls.n	8003c98 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c76:	881a      	ldrh	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c82:	1c9a      	adds	r2, r3, #2
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b02      	subs	r3, #2
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c96:	e05c      	b.n	8003d52 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	330c      	adds	r3, #12
 8003ca2:	7812      	ldrb	r2, [r2, #0]
 8003ca4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003cbe:	e048      	b.n	8003d52 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d12b      	bne.n	8003d26 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d912      	bls.n	8003cfe <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cdc:	881a      	ldrh	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce8:	1c9a      	adds	r2, r3, #2
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b02      	subs	r3, #2
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003cfc:	e029      	b.n	8003d52 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	7812      	ldrb	r2, [r2, #0]
 8003d0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d24:	e015      	b.n	8003d52 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d26:	f7fd fdc5 	bl	80018b4 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d803      	bhi.n	8003d3e <HAL_SPI_Transmit+0x270>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d102      	bne.n	8003d44 <HAL_SPI_Transmit+0x276>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003d50:	e029      	b.n	8003da6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1b1      	bne.n	8003cc0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	6839      	ldr	r1, [r7, #0]
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 f947 	bl	8003ff4 <SPI_EndRxTxTransaction>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e003      	b.n	8003da6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003dae:	7ffb      	ldrb	r3, [r7, #31]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3720      	adds	r7, #32
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dc8:	f7fd fd74 	bl	80018b4 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dd8:	f7fd fd6c 	bl	80018b4 <HAL_GetTick>
 8003ddc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dde:	4b39      	ldr	r3, [pc, #228]	@ (8003ec4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	015b      	lsls	r3, r3, #5
 8003de4:	0d1b      	lsrs	r3, r3, #20
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	fb02 f303 	mul.w	r3, r2, r3
 8003dec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dee:	e054      	b.n	8003e9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df6:	d050      	beq.n	8003e9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003df8:	f7fd fd5c 	bl	80018b4 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	69fa      	ldr	r2, [r7, #28]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d902      	bls.n	8003e0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d13d      	bne.n	8003e8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e26:	d111      	bne.n	8003e4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e30:	d004      	beq.n	8003e3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e3a:	d107      	bne.n	8003e4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e54:	d10f      	bne.n	8003e76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e017      	b.n	8003eba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	bf0c      	ite	eq
 8003eaa:	2301      	moveq	r3, #1
 8003eac:	2300      	movne	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d19b      	bne.n	8003df0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3720      	adds	r7, #32
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	2000001c 	.word	0x2000001c

08003ec8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08a      	sub	sp, #40	@ 0x28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003eda:	f7fd fceb 	bl	80018b4 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003eea:	f7fd fce3 	bl	80018b4 <HAL_GetTick>
 8003eee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	330c      	adds	r3, #12
 8003ef6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ef8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ff0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	00da      	lsls	r2, r3, #3
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	0d1b      	lsrs	r3, r3, #20
 8003f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f10:	e060      	b.n	8003fd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f18:	d107      	bne.n	8003f2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d104      	bne.n	8003f2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f30:	d050      	beq.n	8003fd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f32:	f7fd fcbf 	bl	80018b4 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d902      	bls.n	8003f48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d13d      	bne.n	8003fc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f60:	d111      	bne.n	8003f86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f6a:	d004      	beq.n	8003f76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f74:	d107      	bne.n	8003f86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f8e:	d10f      	bne.n	8003fb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e010      	b.n	8003fe6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d196      	bne.n	8003f12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3728      	adds	r7, #40	@ 0x28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	2000001c 	.word	0x2000001c

08003ff4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af02      	add	r7, sp, #8
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2200      	movs	r2, #0
 8004008:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f7ff ff5b 	bl	8003ec8 <SPI_WaitFifoStateUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d007      	beq.n	8004028 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800401c:	f043 0220 	orr.w	r2, r3, #32
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e027      	b.n	8004078 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2200      	movs	r2, #0
 8004030:	2180      	movs	r1, #128	@ 0x80
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f7ff fec0 	bl	8003db8 <SPI_WaitFlagStateUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e014      	b.n	8004078 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2200      	movs	r2, #0
 8004056:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f7ff ff34 	bl	8003ec8 <SPI_WaitFifoStateUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d007      	beq.n	8004076 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800406a:	f043 0220 	orr.w	r2, r3, #32
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e000      	b.n	8004078 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e042      	b.n	8004118 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004098:	2b00      	cmp	r3, #0
 800409a:	d106      	bne.n	80040aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7fd fa89 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2224      	movs	r2, #36	@ 0x24
 80040ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0201 	bic.w	r2, r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 feb4 	bl	8004e38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fbb5 	bl	8004840 <UART_SetConfig>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e01b      	b.n	8004118 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 ff33 	bl	8004f7c <UART_CheckIdleState>
 8004116:	4603      	mov	r3, r0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	@ 0x28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	4613      	mov	r3, r2
 800412c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004134:	2b20      	cmp	r3, #32
 8004136:	d137      	bne.n	80041a8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_UART_Receive_IT+0x24>
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e030      	b.n	80041aa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a18      	ldr	r2, [pc, #96]	@ (80041b4 <HAL_UART_Receive_IT+0x94>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d01f      	beq.n	8004198 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d018      	beq.n	8004198 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	613b      	str	r3, [r7, #16]
   return(result);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800417a:	627b      	str	r3, [r7, #36]	@ 0x24
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004184:	623b      	str	r3, [r7, #32]
 8004186:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	69f9      	ldr	r1, [r7, #28]
 800418a:	6a3a      	ldr	r2, [r7, #32]
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	61bb      	str	r3, [r7, #24]
   return(result);
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e6      	bne.n	8004166 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	461a      	mov	r2, r3
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 fffe 	bl	80051a0 <UART_Start_Receive_IT>
 80041a4:	4603      	mov	r3, r0
 80041a6:	e000      	b.n	80041aa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041a8:	2302      	movs	r3, #2
  }
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3728      	adds	r7, #40	@ 0x28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40008000 	.word	0x40008000

080041b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b0ba      	sub	sp, #232	@ 0xe8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80041e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80041e6:	4013      	ands	r3, r2
 80041e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80041ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d11b      	bne.n	800422c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80041f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d015      	beq.n	800422c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d105      	bne.n	8004218 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800420c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d009      	beq.n	800422c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 82e3 	beq.w	80047e8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	4798      	blx	r3
      }
      return;
 800422a:	e2dd      	b.n	80047e8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800422c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8123 	beq.w	800447c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004236:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800423a:	4b8d      	ldr	r3, [pc, #564]	@ (8004470 <HAL_UART_IRQHandler+0x2b8>)
 800423c:	4013      	ands	r3, r2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004242:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004246:	4b8b      	ldr	r3, [pc, #556]	@ (8004474 <HAL_UART_IRQHandler+0x2bc>)
 8004248:	4013      	ands	r3, r2
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 8116 	beq.w	800447c <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d011      	beq.n	8004280 <HAL_UART_IRQHandler+0xc8>
 800425c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00b      	beq.n	8004280 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2201      	movs	r2, #1
 800426e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004276:	f043 0201 	orr.w	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d011      	beq.n	80042b0 <HAL_UART_IRQHandler+0xf8>
 800428c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00b      	beq.n	80042b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2202      	movs	r2, #2
 800429e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a6:	f043 0204 	orr.w	r2, r3, #4
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d011      	beq.n	80042e0 <HAL_UART_IRQHandler+0x128>
 80042bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00b      	beq.n	80042e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2204      	movs	r2, #4
 80042ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d6:	f043 0202 	orr.w	r2, r3, #2
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d017      	beq.n	800431c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80042ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d105      	bne.n	8004304 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80042f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80042fc:	4b5c      	ldr	r3, [pc, #368]	@ (8004470 <HAL_UART_IRQHandler+0x2b8>)
 80042fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00b      	beq.n	800431c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2208      	movs	r2, #8
 800430a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004312:	f043 0208 	orr.w	r2, r3, #8
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800431c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004324:	2b00      	cmp	r3, #0
 8004326:	d012      	beq.n	800434e <HAL_UART_IRQHandler+0x196>
 8004328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800432c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00c      	beq.n	800434e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800433c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004344:	f043 0220 	orr.w	r2, r3, #32
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 8249 	beq.w	80047ec <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800435a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435e:	f003 0320 	and.w	r3, r3, #32
 8004362:	2b00      	cmp	r3, #0
 8004364:	d013      	beq.n	800438e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	d105      	bne.n	800437e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004394:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a2:	2b40      	cmp	r3, #64	@ 0x40
 80043a4:	d005      	beq.n	80043b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d054      	beq.n	800445c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f001 f816 	bl	80053e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c2:	2b40      	cmp	r3, #64	@ 0x40
 80043c4:	d146      	bne.n	8004454 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3308      	adds	r3, #8
 80043cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3308      	adds	r3, #8
 80043ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800440a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1d9      	bne.n	80043c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004418:	2b00      	cmp	r3, #0
 800441a:	d017      	beq.n	800444c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004422:	4a15      	ldr	r2, [pc, #84]	@ (8004478 <HAL_UART_IRQHandler+0x2c0>)
 8004424:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800442c:	4618      	mov	r0, r3
 800442e:	f7fd fbde 	bl	8001bee <HAL_DMA_Abort_IT>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d019      	beq.n	800446c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800443e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004446:	4610      	mov	r0, r2
 8004448:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800444a:	e00f      	b.n	800446c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f9e1 	bl	8004814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004452:	e00b      	b.n	800446c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f9dd 	bl	8004814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445a:	e007      	b.n	800446c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f9d9 	bl	8004814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800446a:	e1bf      	b.n	80047ec <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800446c:	bf00      	nop
    return;
 800446e:	e1bd      	b.n	80047ec <HAL_UART_IRQHandler+0x634>
 8004470:	10000001 	.word	0x10000001
 8004474:	04000120 	.word	0x04000120
 8004478:	080054b1 	.word	0x080054b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004480:	2b01      	cmp	r3, #1
 8004482:	f040 8153 	bne.w	800472c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 814c 	beq.w	800472c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8145 	beq.w	800472c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2210      	movs	r2, #16
 80044a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b4:	2b40      	cmp	r3, #64	@ 0x40
 80044b6:	f040 80bb 	bne.w	8004630 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 818f 	beq.w	80047f0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80044d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044dc:	429a      	cmp	r2, r3
 80044de:	f080 8187 	bcs.w	80047f0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f040 8087 	bne.w	800460e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800450c:	e853 3f00 	ldrex	r3, [r3]
 8004510:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004514:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800451c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800452a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800452e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004536:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004542:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1da      	bne.n	8004500 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3308      	adds	r3, #8
 8004550:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004552:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004554:	e853 3f00 	ldrex	r3, [r3]
 8004558:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800455a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800455c:	f023 0301 	bic.w	r3, r3, #1
 8004560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3308      	adds	r3, #8
 800456a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800456e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004572:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004576:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e1      	bne.n	800454a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3308      	adds	r3, #8
 800458c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800459c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3308      	adds	r3, #8
 80045a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e3      	bne.n	8004586 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045dc:	f023 0310 	bic.w	r3, r3, #16
 80045e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e4      	bne.n	80045cc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004608:	4618      	mov	r0, r3
 800460a:	f7fd fa94 	bl	8001b36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004620:	b29b      	uxth	r3, r3
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	b29b      	uxth	r3, r3
 8004626:	4619      	mov	r1, r3
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f8fd 	bl	8004828 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800462e:	e0df      	b.n	80047f0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800463c:	b29b      	uxth	r3, r3
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80d1 	beq.w	80047f4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004652:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 80cc 	beq.w	80047f4 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800466a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800466c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004670:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800467e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004680:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004684:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800468c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e4      	bne.n	800465c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3308      	adds	r3, #8
 8004698:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	623b      	str	r3, [r7, #32]
   return(result);
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046a8:	f023 0301 	bic.w	r3, r3, #1
 80046ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3308      	adds	r3, #8
 80046b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80046bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e1      	bne.n	8004692 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0310 	bic.w	r3, r3, #16
 80046f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	69b9      	ldr	r1, [r7, #24]
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	e841 2300 	strex	r3, r2, [r1]
 8004710:	617b      	str	r3, [r7, #20]
   return(result);
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e4      	bne.n	80046e2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800471e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004722:	4619      	mov	r1, r3
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f87f 	bl	8004828 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800472a:	e063      	b.n	80047f4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800472c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004730:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00e      	beq.n	8004756 <HAL_UART_IRQHandler+0x59e>
 8004738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800473c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800474c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f001 fc14 	bl	8005f7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004754:	e051      	b.n	80047fa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800475a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d014      	beq.n	800478c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800476a:	2b00      	cmp	r3, #0
 800476c:	d105      	bne.n	800477a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800476e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004772:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800477e:	2b00      	cmp	r3, #0
 8004780:	d03a      	beq.n	80047f8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	4798      	blx	r3
    }
    return;
 800478a:	e035      	b.n	80047f8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800478c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d009      	beq.n	80047ac <HAL_UART_IRQHandler+0x5f4>
 8004798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800479c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 fe99 	bl	80054dc <UART_EndTransmit_IT>
    return;
 80047aa:	e026      	b.n	80047fa <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80047ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d009      	beq.n	80047cc <HAL_UART_IRQHandler+0x614>
 80047b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f001 fbed 	bl	8005fa4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047ca:	e016      	b.n	80047fa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80047cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d010      	beq.n	80047fa <HAL_UART_IRQHandler+0x642>
 80047d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	da0c      	bge.n	80047fa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f001 fbd5 	bl	8005f90 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047e6:	e008      	b.n	80047fa <HAL_UART_IRQHandler+0x642>
      return;
 80047e8:	bf00      	nop
 80047ea:	e006      	b.n	80047fa <HAL_UART_IRQHandler+0x642>
    return;
 80047ec:	bf00      	nop
 80047ee:	e004      	b.n	80047fa <HAL_UART_IRQHandler+0x642>
      return;
 80047f0:	bf00      	nop
 80047f2:	e002      	b.n	80047fa <HAL_UART_IRQHandler+0x642>
      return;
 80047f4:	bf00      	nop
 80047f6:	e000      	b.n	80047fa <HAL_UART_IRQHandler+0x642>
    return;
 80047f8:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80047fa:	37e8      	adds	r7, #232	@ 0xe8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004844:	b08c      	sub	sp, #48	@ 0x30
 8004846:	af00      	add	r7, sp, #0
 8004848:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	431a      	orrs	r2, r3
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	431a      	orrs	r2, r3
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	4313      	orrs	r3, r2
 8004866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4baa      	ldr	r3, [pc, #680]	@ (8004b18 <UART_SetConfig+0x2d8>)
 8004870:	4013      	ands	r3, r2
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004878:	430b      	orrs	r3, r1
 800487a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a9f      	ldr	r2, [pc, #636]	@ (8004b1c <UART_SetConfig+0x2dc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d004      	beq.n	80048ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048a8:	4313      	orrs	r3, r2
 80048aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80048b6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048c0:	430b      	orrs	r3, r1
 80048c2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ca:	f023 010f 	bic.w	r1, r3, #15
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a90      	ldr	r2, [pc, #576]	@ (8004b20 <UART_SetConfig+0x2e0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d125      	bne.n	8004930 <UART_SetConfig+0xf0>
 80048e4:	4b8f      	ldr	r3, [pc, #572]	@ (8004b24 <UART_SetConfig+0x2e4>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d81a      	bhi.n	8004928 <UART_SetConfig+0xe8>
 80048f2:	a201      	add	r2, pc, #4	@ (adr r2, 80048f8 <UART_SetConfig+0xb8>)
 80048f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f8:	08004909 	.word	0x08004909
 80048fc:	08004919 	.word	0x08004919
 8004900:	08004911 	.word	0x08004911
 8004904:	08004921 	.word	0x08004921
 8004908:	2301      	movs	r3, #1
 800490a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800490e:	e116      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004910:	2302      	movs	r3, #2
 8004912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004916:	e112      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004918:	2304      	movs	r3, #4
 800491a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800491e:	e10e      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004920:	2308      	movs	r3, #8
 8004922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004926:	e10a      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004928:	2310      	movs	r3, #16
 800492a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800492e:	e106      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a7c      	ldr	r2, [pc, #496]	@ (8004b28 <UART_SetConfig+0x2e8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d138      	bne.n	80049ac <UART_SetConfig+0x16c>
 800493a:	4b7a      	ldr	r3, [pc, #488]	@ (8004b24 <UART_SetConfig+0x2e4>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004940:	f003 030c 	and.w	r3, r3, #12
 8004944:	2b0c      	cmp	r3, #12
 8004946:	d82d      	bhi.n	80049a4 <UART_SetConfig+0x164>
 8004948:	a201      	add	r2, pc, #4	@ (adr r2, 8004950 <UART_SetConfig+0x110>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004985 	.word	0x08004985
 8004954:	080049a5 	.word	0x080049a5
 8004958:	080049a5 	.word	0x080049a5
 800495c:	080049a5 	.word	0x080049a5
 8004960:	08004995 	.word	0x08004995
 8004964:	080049a5 	.word	0x080049a5
 8004968:	080049a5 	.word	0x080049a5
 800496c:	080049a5 	.word	0x080049a5
 8004970:	0800498d 	.word	0x0800498d
 8004974:	080049a5 	.word	0x080049a5
 8004978:	080049a5 	.word	0x080049a5
 800497c:	080049a5 	.word	0x080049a5
 8004980:	0800499d 	.word	0x0800499d
 8004984:	2300      	movs	r3, #0
 8004986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800498a:	e0d8      	b.n	8004b3e <UART_SetConfig+0x2fe>
 800498c:	2302      	movs	r3, #2
 800498e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004992:	e0d4      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004994:	2304      	movs	r3, #4
 8004996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800499a:	e0d0      	b.n	8004b3e <UART_SetConfig+0x2fe>
 800499c:	2308      	movs	r3, #8
 800499e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049a2:	e0cc      	b.n	8004b3e <UART_SetConfig+0x2fe>
 80049a4:	2310      	movs	r3, #16
 80049a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049aa:	e0c8      	b.n	8004b3e <UART_SetConfig+0x2fe>
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a5e      	ldr	r2, [pc, #376]	@ (8004b2c <UART_SetConfig+0x2ec>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d125      	bne.n	8004a02 <UART_SetConfig+0x1c2>
 80049b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004b24 <UART_SetConfig+0x2e4>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80049c0:	2b30      	cmp	r3, #48	@ 0x30
 80049c2:	d016      	beq.n	80049f2 <UART_SetConfig+0x1b2>
 80049c4:	2b30      	cmp	r3, #48	@ 0x30
 80049c6:	d818      	bhi.n	80049fa <UART_SetConfig+0x1ba>
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d00a      	beq.n	80049e2 <UART_SetConfig+0x1a2>
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	d814      	bhi.n	80049fa <UART_SetConfig+0x1ba>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <UART_SetConfig+0x19a>
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d008      	beq.n	80049ea <UART_SetConfig+0x1aa>
 80049d8:	e00f      	b.n	80049fa <UART_SetConfig+0x1ba>
 80049da:	2300      	movs	r3, #0
 80049dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049e0:	e0ad      	b.n	8004b3e <UART_SetConfig+0x2fe>
 80049e2:	2302      	movs	r3, #2
 80049e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049e8:	e0a9      	b.n	8004b3e <UART_SetConfig+0x2fe>
 80049ea:	2304      	movs	r3, #4
 80049ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049f0:	e0a5      	b.n	8004b3e <UART_SetConfig+0x2fe>
 80049f2:	2308      	movs	r3, #8
 80049f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049f8:	e0a1      	b.n	8004b3e <UART_SetConfig+0x2fe>
 80049fa:	2310      	movs	r3, #16
 80049fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a00:	e09d      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a4a      	ldr	r2, [pc, #296]	@ (8004b30 <UART_SetConfig+0x2f0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d125      	bne.n	8004a58 <UART_SetConfig+0x218>
 8004a0c:	4b45      	ldr	r3, [pc, #276]	@ (8004b24 <UART_SetConfig+0x2e4>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a16:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a18:	d016      	beq.n	8004a48 <UART_SetConfig+0x208>
 8004a1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a1c:	d818      	bhi.n	8004a50 <UART_SetConfig+0x210>
 8004a1e:	2b80      	cmp	r3, #128	@ 0x80
 8004a20:	d00a      	beq.n	8004a38 <UART_SetConfig+0x1f8>
 8004a22:	2b80      	cmp	r3, #128	@ 0x80
 8004a24:	d814      	bhi.n	8004a50 <UART_SetConfig+0x210>
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <UART_SetConfig+0x1f0>
 8004a2a:	2b40      	cmp	r3, #64	@ 0x40
 8004a2c:	d008      	beq.n	8004a40 <UART_SetConfig+0x200>
 8004a2e:	e00f      	b.n	8004a50 <UART_SetConfig+0x210>
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a36:	e082      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a3e:	e07e      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004a40:	2304      	movs	r3, #4
 8004a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a46:	e07a      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004a48:	2308      	movs	r3, #8
 8004a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a4e:	e076      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004a50:	2310      	movs	r3, #16
 8004a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a56:	e072      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a35      	ldr	r2, [pc, #212]	@ (8004b34 <UART_SetConfig+0x2f4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d12a      	bne.n	8004ab8 <UART_SetConfig+0x278>
 8004a62:	4b30      	ldr	r3, [pc, #192]	@ (8004b24 <UART_SetConfig+0x2e4>)
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a70:	d01a      	beq.n	8004aa8 <UART_SetConfig+0x268>
 8004a72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a76:	d81b      	bhi.n	8004ab0 <UART_SetConfig+0x270>
 8004a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a7c:	d00c      	beq.n	8004a98 <UART_SetConfig+0x258>
 8004a7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a82:	d815      	bhi.n	8004ab0 <UART_SetConfig+0x270>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <UART_SetConfig+0x250>
 8004a88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a8c:	d008      	beq.n	8004aa0 <UART_SetConfig+0x260>
 8004a8e:	e00f      	b.n	8004ab0 <UART_SetConfig+0x270>
 8004a90:	2300      	movs	r3, #0
 8004a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a96:	e052      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a9e:	e04e      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aa6:	e04a      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004aa8:	2308      	movs	r3, #8
 8004aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aae:	e046      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ab6:	e042      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a17      	ldr	r2, [pc, #92]	@ (8004b1c <UART_SetConfig+0x2dc>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d13a      	bne.n	8004b38 <UART_SetConfig+0x2f8>
 8004ac2:	4b18      	ldr	r3, [pc, #96]	@ (8004b24 <UART_SetConfig+0x2e4>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004acc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ad0:	d01a      	beq.n	8004b08 <UART_SetConfig+0x2c8>
 8004ad2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ad6:	d81b      	bhi.n	8004b10 <UART_SetConfig+0x2d0>
 8004ad8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004adc:	d00c      	beq.n	8004af8 <UART_SetConfig+0x2b8>
 8004ade:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ae2:	d815      	bhi.n	8004b10 <UART_SetConfig+0x2d0>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <UART_SetConfig+0x2b0>
 8004ae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aec:	d008      	beq.n	8004b00 <UART_SetConfig+0x2c0>
 8004aee:	e00f      	b.n	8004b10 <UART_SetConfig+0x2d0>
 8004af0:	2300      	movs	r3, #0
 8004af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004af6:	e022      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004af8:	2302      	movs	r3, #2
 8004afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004afe:	e01e      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004b00:	2304      	movs	r3, #4
 8004b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b06:	e01a      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b0e:	e016      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004b10:	2310      	movs	r3, #16
 8004b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b16:	e012      	b.n	8004b3e <UART_SetConfig+0x2fe>
 8004b18:	cfff69f3 	.word	0xcfff69f3
 8004b1c:	40008000 	.word	0x40008000
 8004b20:	40013800 	.word	0x40013800
 8004b24:	40021000 	.word	0x40021000
 8004b28:	40004400 	.word	0x40004400
 8004b2c:	40004800 	.word	0x40004800
 8004b30:	40004c00 	.word	0x40004c00
 8004b34:	40005000 	.word	0x40005000
 8004b38:	2310      	movs	r3, #16
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4aae      	ldr	r2, [pc, #696]	@ (8004dfc <UART_SetConfig+0x5bc>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	f040 8097 	bne.w	8004c78 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d823      	bhi.n	8004b9a <UART_SetConfig+0x35a>
 8004b52:	a201      	add	r2, pc, #4	@ (adr r2, 8004b58 <UART_SetConfig+0x318>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004b7d 	.word	0x08004b7d
 8004b5c:	08004b9b 	.word	0x08004b9b
 8004b60:	08004b85 	.word	0x08004b85
 8004b64:	08004b9b 	.word	0x08004b9b
 8004b68:	08004b8b 	.word	0x08004b8b
 8004b6c:	08004b9b 	.word	0x08004b9b
 8004b70:	08004b9b 	.word	0x08004b9b
 8004b74:	08004b9b 	.word	0x08004b9b
 8004b78:	08004b93 	.word	0x08004b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b7c:	f7fe f900 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8004b80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b82:	e010      	b.n	8004ba6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b84:	4b9e      	ldr	r3, [pc, #632]	@ (8004e00 <UART_SetConfig+0x5c0>)
 8004b86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b88:	e00d      	b.n	8004ba6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b8a:	f7fe f861 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8004b8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b90:	e009      	b.n	8004ba6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b98:	e005      	b.n	8004ba6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ba4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8130 	beq.w	8004e0e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	4a94      	ldr	r2, [pc, #592]	@ (8004e04 <UART_SetConfig+0x5c4>)
 8004bb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	4413      	add	r3, r2
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d305      	bcc.n	8004bde <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d903      	bls.n	8004be6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004be4:	e113      	b.n	8004e0e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be8:	2200      	movs	r2, #0
 8004bea:	60bb      	str	r3, [r7, #8]
 8004bec:	60fa      	str	r2, [r7, #12]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf2:	4a84      	ldr	r2, [pc, #528]	@ (8004e04 <UART_SetConfig+0x5c4>)
 8004bf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	603b      	str	r3, [r7, #0]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c08:	f7fb fb4a 	bl	80002a0 <__aeabi_uldivmod>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4610      	mov	r0, r2
 8004c12:	4619      	mov	r1, r3
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	020b      	lsls	r3, r1, #8
 8004c1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c22:	0202      	lsls	r2, r0, #8
 8004c24:	6979      	ldr	r1, [r7, #20]
 8004c26:	6849      	ldr	r1, [r1, #4]
 8004c28:	0849      	lsrs	r1, r1, #1
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	4605      	mov	r5, r0
 8004c30:	eb12 0804 	adds.w	r8, r2, r4
 8004c34:	eb43 0905 	adc.w	r9, r3, r5
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	469a      	mov	sl, r3
 8004c40:	4693      	mov	fp, r2
 8004c42:	4652      	mov	r2, sl
 8004c44:	465b      	mov	r3, fp
 8004c46:	4640      	mov	r0, r8
 8004c48:	4649      	mov	r1, r9
 8004c4a:	f7fb fb29 	bl	80002a0 <__aeabi_uldivmod>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4613      	mov	r3, r2
 8004c54:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c5c:	d308      	bcc.n	8004c70 <UART_SetConfig+0x430>
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c64:	d204      	bcs.n	8004c70 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6a3a      	ldr	r2, [r7, #32]
 8004c6c:	60da      	str	r2, [r3, #12]
 8004c6e:	e0ce      	b.n	8004e0e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c76:	e0ca      	b.n	8004e0e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c80:	d166      	bne.n	8004d50 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004c82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d827      	bhi.n	8004cda <UART_SetConfig+0x49a>
 8004c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c90 <UART_SetConfig+0x450>)
 8004c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c90:	08004cb5 	.word	0x08004cb5
 8004c94:	08004cbd 	.word	0x08004cbd
 8004c98:	08004cc5 	.word	0x08004cc5
 8004c9c:	08004cdb 	.word	0x08004cdb
 8004ca0:	08004ccb 	.word	0x08004ccb
 8004ca4:	08004cdb 	.word	0x08004cdb
 8004ca8:	08004cdb 	.word	0x08004cdb
 8004cac:	08004cdb 	.word	0x08004cdb
 8004cb0:	08004cd3 	.word	0x08004cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb4:	f7fe f864 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8004cb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cba:	e014      	b.n	8004ce6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cbc:	f7fe f876 	bl	8002dac <HAL_RCC_GetPCLK2Freq>
 8004cc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cc2:	e010      	b.n	8004ce6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cc4:	4b4e      	ldr	r3, [pc, #312]	@ (8004e00 <UART_SetConfig+0x5c0>)
 8004cc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004cc8:	e00d      	b.n	8004ce6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cca:	f7fd ffc1 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8004cce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cd0:	e009      	b.n	8004ce6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004cd8:	e005      	b.n	8004ce6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ce4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 8090 	beq.w	8004e0e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf2:	4a44      	ldr	r2, [pc, #272]	@ (8004e04 <UART_SetConfig+0x5c4>)
 8004cf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d00:	005a      	lsls	r2, r3, #1
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	085b      	lsrs	r3, r3, #1
 8004d08:	441a      	add	r2, r3
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d12:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	2b0f      	cmp	r3, #15
 8004d18:	d916      	bls.n	8004d48 <UART_SetConfig+0x508>
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d20:	d212      	bcs.n	8004d48 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	f023 030f 	bic.w	r3, r3, #15
 8004d2a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	085b      	lsrs	r3, r3, #1
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	8bfb      	ldrh	r3, [r7, #30]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	8bfa      	ldrh	r2, [r7, #30]
 8004d44:	60da      	str	r2, [r3, #12]
 8004d46:	e062      	b.n	8004e0e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d4e:	e05e      	b.n	8004e0e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d828      	bhi.n	8004daa <UART_SetConfig+0x56a>
 8004d58:	a201      	add	r2, pc, #4	@ (adr r2, 8004d60 <UART_SetConfig+0x520>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004d85 	.word	0x08004d85
 8004d64:	08004d8d 	.word	0x08004d8d
 8004d68:	08004d95 	.word	0x08004d95
 8004d6c:	08004dab 	.word	0x08004dab
 8004d70:	08004d9b 	.word	0x08004d9b
 8004d74:	08004dab 	.word	0x08004dab
 8004d78:	08004dab 	.word	0x08004dab
 8004d7c:	08004dab 	.word	0x08004dab
 8004d80:	08004da3 	.word	0x08004da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d84:	f7fd fffc 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8004d88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d8a:	e014      	b.n	8004db6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d8c:	f7fe f80e 	bl	8002dac <HAL_RCC_GetPCLK2Freq>
 8004d90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d92:	e010      	b.n	8004db6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d94:	4b1a      	ldr	r3, [pc, #104]	@ (8004e00 <UART_SetConfig+0x5c0>)
 8004d96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d98:	e00d      	b.n	8004db6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d9a:	f7fd ff59 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8004d9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004da0:	e009      	b.n	8004db6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004da2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004da6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004da8:	e005      	b.n	8004db6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004db4:	bf00      	nop
    }

    if (pclk != 0U)
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d028      	beq.n	8004e0e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc0:	4a10      	ldr	r2, [pc, #64]	@ (8004e04 <UART_SetConfig+0x5c4>)
 8004dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dca:	fbb3 f2f2 	udiv	r2, r3, r2
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	085b      	lsrs	r3, r3, #1
 8004dd4:	441a      	add	r2, r3
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dde:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	2b0f      	cmp	r3, #15
 8004de4:	d910      	bls.n	8004e08 <UART_SetConfig+0x5c8>
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dec:	d20c      	bcs.n	8004e08 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60da      	str	r2, [r3, #12]
 8004df8:	e009      	b.n	8004e0e <UART_SetConfig+0x5ce>
 8004dfa:	bf00      	nop
 8004dfc:	40008000 	.word	0x40008000
 8004e00:	00f42400 	.word	0x00f42400
 8004e04:	08008c80 	.word	0x08008c80
      }
      else
      {
        ret = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2200      	movs	r2, #0
 8004e22:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2200      	movs	r2, #0
 8004e28:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004e2a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3730      	adds	r7, #48	@ 0x30
 8004e32:	46bd      	mov	sp, r7
 8004e34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d01a      	beq.n	8004f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f36:	d10a      	bne.n	8004f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	605a      	str	r2, [r3, #4]
  }
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b098      	sub	sp, #96	@ 0x60
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f8c:	f7fc fc92 	bl	80018b4 <HAL_GetTick>
 8004f90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d12f      	bne.n	8005000 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fa0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f88e 	bl	80050d0 <UART_WaitOnFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d022      	beq.n	8005000 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc2:	e853 3f00 	ldrex	r3, [r3]
 8004fc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fce:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fda:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fe0:	e841 2300 	strex	r3, r2, [r1]
 8004fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e6      	bne.n	8004fba <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e063      	b.n	80050c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b04      	cmp	r3, #4
 800500c:	d149      	bne.n	80050a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800500e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005016:	2200      	movs	r2, #0
 8005018:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f857 	bl	80050d0 <UART_WaitOnFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d03c      	beq.n	80050a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	623b      	str	r3, [r7, #32]
   return(result);
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800503c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005046:	633b      	str	r3, [r7, #48]	@ 0x30
 8005048:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800504c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e6      	bne.n	8005028 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3308      	adds	r3, #8
 8005060:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	60fb      	str	r3, [r7, #12]
   return(result);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f023 0301 	bic.w	r3, r3, #1
 8005070:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3308      	adds	r3, #8
 8005078:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800507a:	61fa      	str	r2, [r7, #28]
 800507c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507e:	69b9      	ldr	r1, [r7, #24]
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	e841 2300 	strex	r3, r2, [r1]
 8005086:	617b      	str	r3, [r7, #20]
   return(result);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1e5      	bne.n	800505a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2220      	movs	r2, #32
 8005092:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e012      	b.n	80050c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3758      	adds	r7, #88	@ 0x58
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	4613      	mov	r3, r2
 80050de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e0:	e049      	b.n	8005176 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d045      	beq.n	8005176 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ea:	f7fc fbe3 	bl	80018b4 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d302      	bcc.n	8005100 <UART_WaitOnFlagUntilTimeout+0x30>
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e048      	b.n	8005196 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	2b00      	cmp	r3, #0
 8005110:	d031      	beq.n	8005176 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b08      	cmp	r3, #8
 800511e:	d110      	bne.n	8005142 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2208      	movs	r2, #8
 8005126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f95b 	bl	80053e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2208      	movs	r2, #8
 8005132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e029      	b.n	8005196 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800514c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005150:	d111      	bne.n	8005176 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800515a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f941 	bl	80053e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e00f      	b.n	8005196 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4013      	ands	r3, r2
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	429a      	cmp	r2, r3
 8005184:	bf0c      	ite	eq
 8005186:	2301      	moveq	r3, #1
 8005188:	2300      	movne	r3, #0
 800518a:	b2db      	uxtb	r3, r3
 800518c:	461a      	mov	r2, r3
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	429a      	cmp	r2, r3
 8005192:	d0a6      	beq.n	80050e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b0a3      	sub	sp, #140	@ 0x8c
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	4613      	mov	r3, r2
 80051ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	88fa      	ldrh	r2, [r7, #6]
 80051b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	88fa      	ldrh	r2, [r7, #6]
 80051c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051d2:	d10e      	bne.n	80051f2 <UART_Start_Receive_IT+0x52>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d105      	bne.n	80051e8 <UART_Start_Receive_IT+0x48>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80051e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80051e6:	e02d      	b.n	8005244 <UART_Start_Receive_IT+0xa4>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	22ff      	movs	r2, #255	@ 0xff
 80051ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80051f0:	e028      	b.n	8005244 <UART_Start_Receive_IT+0xa4>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10d      	bne.n	8005216 <UART_Start_Receive_IT+0x76>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d104      	bne.n	800520c <UART_Start_Receive_IT+0x6c>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	22ff      	movs	r2, #255	@ 0xff
 8005206:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800520a:	e01b      	b.n	8005244 <UART_Start_Receive_IT+0xa4>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	227f      	movs	r2, #127	@ 0x7f
 8005210:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005214:	e016      	b.n	8005244 <UART_Start_Receive_IT+0xa4>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800521e:	d10d      	bne.n	800523c <UART_Start_Receive_IT+0x9c>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d104      	bne.n	8005232 <UART_Start_Receive_IT+0x92>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	227f      	movs	r2, #127	@ 0x7f
 800522c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005230:	e008      	b.n	8005244 <UART_Start_Receive_IT+0xa4>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	223f      	movs	r2, #63	@ 0x3f
 8005236:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800523a:	e003      	b.n	8005244 <UART_Start_Receive_IT+0xa4>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2222      	movs	r2, #34	@ 0x22
 8005250:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3308      	adds	r3, #8
 800525a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800525e:	e853 3f00 	ldrex	r3, [r3]
 8005262:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005264:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3308      	adds	r3, #8
 8005274:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005278:	673a      	str	r2, [r7, #112]	@ 0x70
 800527a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800527e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005286:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e3      	bne.n	8005254 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005294:	d14f      	bne.n	8005336 <UART_Start_Receive_IT+0x196>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800529c:	88fa      	ldrh	r2, [r7, #6]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d349      	bcc.n	8005336 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052aa:	d107      	bne.n	80052bc <UART_Start_Receive_IT+0x11c>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d103      	bne.n	80052bc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4a47      	ldr	r2, [pc, #284]	@ (80053d4 <UART_Start_Receive_IT+0x234>)
 80052b8:	675a      	str	r2, [r3, #116]	@ 0x74
 80052ba:	e002      	b.n	80052c2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4a46      	ldr	r2, [pc, #280]	@ (80053d8 <UART_Start_Receive_IT+0x238>)
 80052c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01a      	beq.n	8005300 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80052d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052ee:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80052f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80052fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e4      	bne.n	80052ca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3308      	adds	r3, #8
 8005306:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005312:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005316:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3308      	adds	r3, #8
 800531e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005320:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005322:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005326:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800532e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e5      	bne.n	8005300 <UART_Start_Receive_IT+0x160>
 8005334:	e046      	b.n	80053c4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800533e:	d107      	bne.n	8005350 <UART_Start_Receive_IT+0x1b0>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d103      	bne.n	8005350 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4a24      	ldr	r2, [pc, #144]	@ (80053dc <UART_Start_Receive_IT+0x23c>)
 800534c:	675a      	str	r2, [r3, #116]	@ 0x74
 800534e:	e002      	b.n	8005356 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4a23      	ldr	r2, [pc, #140]	@ (80053e0 <UART_Start_Receive_IT+0x240>)
 8005354:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d019      	beq.n	8005392 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800536c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005372:	677b      	str	r3, [r7, #116]	@ 0x74
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800537c:	637b      	str	r3, [r7, #52]	@ 0x34
 800537e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005382:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800538a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e6      	bne.n	800535e <UART_Start_Receive_IT+0x1be>
 8005390:	e018      	b.n	80053c4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	613b      	str	r3, [r7, #16]
   return(result);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f043 0320 	orr.w	r3, r3, #32
 80053a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053b0:	623b      	str	r3, [r7, #32]
 80053b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	69f9      	ldr	r1, [r7, #28]
 80053b6:	6a3a      	ldr	r2, [r7, #32]
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e6      	bne.n	8005392 <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	378c      	adds	r7, #140	@ 0x8c
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	08005c11 	.word	0x08005c11
 80053d8:	080058ad 	.word	0x080058ad
 80053dc:	080056f1 	.word	0x080056f1
 80053e0:	08005535 	.word	0x08005535

080053e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b095      	sub	sp, #84	@ 0x54
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005400:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800540a:	643b      	str	r3, [r7, #64]	@ 0x40
 800540c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005410:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e6      	bne.n	80053ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3308      	adds	r3, #8
 8005424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	61fb      	str	r3, [r7, #28]
   return(result);
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005434:	f023 0301 	bic.w	r3, r3, #1
 8005438:	64bb      	str	r3, [r7, #72]	@ 0x48
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3308      	adds	r3, #8
 8005440:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005442:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005444:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005446:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005448:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800544a:	e841 2300 	strex	r3, r2, [r1]
 800544e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1e3      	bne.n	800541e <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800545a:	2b01      	cmp	r3, #1
 800545c:	d118      	bne.n	8005490 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	60bb      	str	r3, [r7, #8]
   return(result);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f023 0310 	bic.w	r3, r3, #16
 8005472:	647b      	str	r3, [r7, #68]	@ 0x44
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6979      	ldr	r1, [r7, #20]
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	613b      	str	r3, [r7, #16]
   return(result);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e6      	bne.n	800545e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80054a4:	bf00      	nop
 80054a6:	3754      	adds	r7, #84	@ 0x54
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f7ff f9a0 	bl	8004814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054d4:	bf00      	nop
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	61bb      	str	r3, [r7, #24]
 8005504:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	6979      	ldr	r1, [r7, #20]
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	e841 2300 	strex	r3, r2, [r1]
 800550e:	613b      	str	r3, [r7, #16]
   return(result);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e6      	bne.n	80054e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2220      	movs	r2, #32
 800551a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff f96b 	bl	8004800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800552a:	bf00      	nop
 800552c:	3720      	adds	r7, #32
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b09c      	sub	sp, #112	@ 0x70
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005542:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800554c:	2b22      	cmp	r3, #34	@ 0x22
 800554e:	f040 80be 	bne.w	80056ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005558:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800555c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005560:	b2d9      	uxtb	r1, r3
 8005562:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005566:	b2da      	uxtb	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556c:	400a      	ands	r2, r1
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005582:	b29b      	uxth	r3, r3
 8005584:	3b01      	subs	r3, #1
 8005586:	b29a      	uxth	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	f040 80a3 	bne.w	80056e2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	461a      	mov	r2, r3
 80055b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e6      	bne.n	800559c <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3308      	adds	r3, #8
 80055d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e0:	f023 0301 	bic.w	r3, r3, #1
 80055e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3308      	adds	r3, #8
 80055ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80055ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80055f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e5      	bne.n	80055ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2220      	movs	r2, #32
 8005606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a34      	ldr	r2, [pc, #208]	@ (80056ec <UART_RxISR_8BIT+0x1b8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d01f      	beq.n	8005660 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d018      	beq.n	8005660 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	623b      	str	r3, [r7, #32]
   return(result);
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005642:	663b      	str	r3, [r7, #96]	@ 0x60
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800564c:	633b      	str	r3, [r7, #48]	@ 0x30
 800564e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800565a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e6      	bne.n	800562e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d12e      	bne.n	80056c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	e853 3f00 	ldrex	r3, [r3]
 800567a:	60fb      	str	r3, [r7, #12]
   return(result);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0310 	bic.w	r3, r3, #16
 8005682:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800568c:	61fb      	str	r3, [r7, #28]
 800568e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	69b9      	ldr	r1, [r7, #24]
 8005692:	69fa      	ldr	r2, [r7, #28]
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	617b      	str	r3, [r7, #20]
   return(result);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e6      	bne.n	800566e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f003 0310 	and.w	r3, r3, #16
 80056aa:	2b10      	cmp	r3, #16
 80056ac:	d103      	bne.n	80056b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2210      	movs	r2, #16
 80056b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff f8b2 	bl	8004828 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056c4:	e00d      	b.n	80056e2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fb fecc 	bl	8001464 <HAL_UART_RxCpltCallback>
}
 80056cc:	e009      	b.n	80056e2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	8b1b      	ldrh	r3, [r3, #24]
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0208 	orr.w	r2, r2, #8
 80056de:	b292      	uxth	r2, r2
 80056e0:	831a      	strh	r2, [r3, #24]
}
 80056e2:	bf00      	nop
 80056e4:	3770      	adds	r7, #112	@ 0x70
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40008000 	.word	0x40008000

080056f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b09c      	sub	sp, #112	@ 0x70
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80056fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005708:	2b22      	cmp	r3, #34	@ 0x22
 800570a:	f040 80be 	bne.w	800588a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005714:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800571e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005722:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005726:	4013      	ands	r3, r2
 8005728:	b29a      	uxth	r2, r3
 800572a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800572c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005732:	1c9a      	adds	r2, r3, #2
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800573e:	b29b      	uxth	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	f040 80a3 	bne.w	800589e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005760:	e853 3f00 	ldrex	r3, [r3]
 8005764:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005768:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800576c:	667b      	str	r3, [r7, #100]	@ 0x64
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005776:	657b      	str	r3, [r7, #84]	@ 0x54
 8005778:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800577c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e6      	bne.n	8005758 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3308      	adds	r3, #8
 8005790:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005794:	e853 3f00 	ldrex	r3, [r3]
 8005798:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800579a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579c:	f023 0301 	bic.w	r3, r3, #1
 80057a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3308      	adds	r3, #8
 80057a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80057aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80057ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e5      	bne.n	800578a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a34      	ldr	r2, [pc, #208]	@ (80058a8 <UART_RxISR_16BIT+0x1b8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d01f      	beq.n	800581c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d018      	beq.n	800581c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80057fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	461a      	mov	r2, r3
 8005806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800580a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800580e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e6      	bne.n	80057ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005820:	2b01      	cmp	r3, #1
 8005822:	d12e      	bne.n	8005882 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	60bb      	str	r3, [r7, #8]
   return(result);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f023 0310 	bic.w	r3, r3, #16
 800583e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6979      	ldr	r1, [r7, #20]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	613b      	str	r3, [r7, #16]
   return(result);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e6      	bne.n	800582a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	f003 0310 	and.w	r3, r3, #16
 8005866:	2b10      	cmp	r3, #16
 8005868:	d103      	bne.n	8005872 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2210      	movs	r2, #16
 8005870:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fe ffd4 	bl	8004828 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005880:	e00d      	b.n	800589e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fb fdee 	bl	8001464 <HAL_UART_RxCpltCallback>
}
 8005888:	e009      	b.n	800589e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	8b1b      	ldrh	r3, [r3, #24]
 8005890:	b29a      	uxth	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0208 	orr.w	r2, r2, #8
 800589a:	b292      	uxth	r2, r2
 800589c:	831a      	strh	r2, [r3, #24]
}
 800589e:	bf00      	nop
 80058a0:	3770      	adds	r7, #112	@ 0x70
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40008000 	.word	0x40008000

080058ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b0ac      	sub	sp, #176	@ 0xb0
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80058ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058e2:	2b22      	cmp	r3, #34	@ 0x22
 80058e4:	f040 8182 	bne.w	8005bec <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80058ee:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80058f2:	e125      	b.n	8005b40 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80058fa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80058fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8005902:	b2d9      	uxtb	r1, r3
 8005904:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8005908:	b2da      	uxtb	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800590e:	400a      	ands	r2, r1
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800593a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800593e:	f003 0307 	and.w	r3, r3, #7
 8005942:	2b00      	cmp	r3, #0
 8005944:	d053      	beq.n	80059ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d011      	beq.n	8005976 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005952:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00b      	beq.n	8005976 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2201      	movs	r2, #1
 8005964:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800596c:	f043 0201 	orr.w	r2, r3, #1
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d011      	beq.n	80059a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00b      	beq.n	80059a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2202      	movs	r2, #2
 8005994:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800599c:	f043 0204 	orr.w	r2, r3, #4
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d011      	beq.n	80059d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80059b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00b      	beq.n	80059d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2204      	movs	r2, #4
 80059c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059cc:	f043 0202 	orr.w	r2, r3, #2
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d006      	beq.n	80059ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7fe ff17 	bl	8004814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f040 80a2 	bne.w	8005b40 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8005a0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a20:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a22:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005a24:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005a26:	e841 2300 	strex	r3, r2, [r1]
 8005a2a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8005a2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1e4      	bne.n	80059fc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3308      	adds	r3, #8
 8005a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8005a42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a48:	f023 0301 	bic.w	r3, r3, #1
 8005a4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3308      	adds	r3, #8
 8005a56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a5a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005a5c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005a60:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005a68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e1      	bne.n	8005a32 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a60      	ldr	r2, [pc, #384]	@ (8005c08 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d021      	beq.n	8005ad0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d01a      	beq.n	8005ad0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aa2:	e853 3f00 	ldrex	r3, [r3]
 8005aa6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aaa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005aae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005abc:	657b      	str	r3, [r7, #84]	@ 0x54
 8005abe:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ac2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e4      	bne.n	8005a9a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d130      	bne.n	8005b3a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aee:	f023 0310 	bic.w	r3, r3, #16
 8005af2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b00:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e4      	bne.n	8005ade <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	2b10      	cmp	r3, #16
 8005b20:	d103      	bne.n	8005b2a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2210      	movs	r2, #16
 8005b28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fe fe78 	bl	8004828 <HAL_UARTEx_RxEventCallback>
 8005b38:	e002      	b.n	8005b40 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fb fc92 	bl	8001464 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b40:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d006      	beq.n	8005b56 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f47f aecf 	bne.w	80058f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b5c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005b60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d04b      	beq.n	8005c00 <UART_RxISR_8BIT_FIFOEN+0x354>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005b6e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d244      	bcs.n	8005c00 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	e853 3f00 	ldrex	r3, [r3]
 8005b84:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3308      	adds	r3, #8
 8005b96:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005b9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ba0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1e3      	bne.n	8005b76 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a16      	ldr	r2, [pc, #88]	@ (8005c0c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8005bb2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	e853 3f00 	ldrex	r3, [r3]
 8005bc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f043 0320 	orr.w	r3, r3, #32
 8005bc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	6979      	ldr	r1, [r7, #20]
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	613b      	str	r3, [r7, #16]
   return(result);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e4      	bne.n	8005bb4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bea:	e009      	b.n	8005c00 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	8b1b      	ldrh	r3, [r3, #24]
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0208 	orr.w	r2, r2, #8
 8005bfc:	b292      	uxth	r2, r2
 8005bfe:	831a      	strh	r2, [r3, #24]
}
 8005c00:	bf00      	nop
 8005c02:	37b0      	adds	r7, #176	@ 0xb0
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	40008000 	.word	0x40008000
 8005c0c:	08005535 	.word	0x08005535

08005c10 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b0ae      	sub	sp, #184	@ 0xb8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005c1e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c46:	2b22      	cmp	r3, #34	@ 0x22
 8005c48:	f040 8186 	bne.w	8005f58 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005c52:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c56:	e129      	b.n	8005eac <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005c5e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005c6a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8005c6e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8005c72:	4013      	ands	r3, r2
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c80:	1c9a      	adds	r2, r3, #2
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005ca2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d053      	beq.n	8005d56 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005cae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d011      	beq.n	8005cde <UART_RxISR_16BIT_FIFOEN+0xce>
 8005cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00b      	beq.n	8005cde <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cd4:	f043 0201 	orr.w	r2, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d011      	beq.n	8005d0e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005cea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00b      	beq.n	8005d0e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d04:	f043 0204 	orr.w	r2, r3, #4
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005d12:	f003 0304 	and.w	r3, r3, #4
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d011      	beq.n	8005d3e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005d1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00b      	beq.n	8005d3e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2204      	movs	r2, #4
 8005d2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d34:	f043 0202 	orr.w	r2, r3, #2
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d006      	beq.n	8005d56 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7fe fd63 	bl	8004814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f040 80a4 	bne.w	8005eac <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e2      	bne.n	8005d64 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3308      	adds	r3, #8
 8005da4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005da8:	e853 3f00 	ldrex	r3, [r3]
 8005dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005db0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005db4:	f023 0301 	bic.w	r3, r3, #1
 8005db8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005dc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005dcc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005dce:	e841 2300 	strex	r3, r2, [r1]
 8005dd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005dd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1e1      	bne.n	8005d9e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a60      	ldr	r2, [pc, #384]	@ (8005f74 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d021      	beq.n	8005e3c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d01a      	beq.n	8005e3c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e0e:	e853 3f00 	ldrex	r3, [r3]
 8005e12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005e28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e2a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e4      	bne.n	8005e06 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d130      	bne.n	8005ea6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5a:	f023 0310 	bic.w	r3, r3, #16
 8005e5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e4      	bne.n	8005e4a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	f003 0310 	and.w	r3, r3, #16
 8005e8a:	2b10      	cmp	r3, #16
 8005e8c:	d103      	bne.n	8005e96 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2210      	movs	r2, #16
 8005e94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fe fcc2 	bl	8004828 <HAL_UARTEx_RxEventCallback>
 8005ea4:	e002      	b.n	8005eac <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fb fadc 	bl	8001464 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005eac:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d006      	beq.n	8005ec2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005eb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f47f aecb 	bne.w	8005c58 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ec8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005ecc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d04b      	beq.n	8005f6c <UART_RxISR_16BIT_FIFOEN+0x35c>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005eda:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d244      	bcs.n	8005f6c <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ef8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3308      	adds	r3, #8
 8005f02:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005f06:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e3      	bne.n	8005ee2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a16      	ldr	r2, [pc, #88]	@ (8005f78 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8005f1e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f043 0320 	orr.w	r3, r3, #32
 8005f34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f42:	61fb      	str	r3, [r7, #28]
 8005f44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	69b9      	ldr	r1, [r7, #24]
 8005f48:	69fa      	ldr	r2, [r7, #28]
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	617b      	str	r3, [r7, #20]
   return(result);
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e4      	bne.n	8005f20 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f56:	e009      	b.n	8005f6c <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	8b1b      	ldrh	r3, [r3, #24]
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0208 	orr.w	r2, r2, #8
 8005f68:	b292      	uxth	r2, r2
 8005f6a:	831a      	strh	r2, [r3, #24]
}
 8005f6c:	bf00      	nop
 8005f6e:	37b8      	adds	r7, #184	@ 0xb8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40008000 	.word	0x40008000
 8005f78:	080056f1 	.word	0x080056f1

08005f7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <HAL_UARTEx_DisableFifoMode+0x16>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e027      	b.n	800601e <HAL_UARTEx_DisableFifoMode+0x66>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2224      	movs	r2, #36	@ 0x24
 8005fda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0201 	bic.w	r2, r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005ffc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800603a:	2b01      	cmp	r3, #1
 800603c:	d101      	bne.n	8006042 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800603e:	2302      	movs	r3, #2
 8006040:	e02d      	b.n	800609e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2224      	movs	r2, #36	@ 0x24
 800604e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0201 	bic.w	r2, r2, #1
 8006068:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f850 	bl	8006124 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060ba:	2302      	movs	r3, #2
 80060bc:	e02d      	b.n	800611a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2224      	movs	r2, #36	@ 0x24
 80060ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0201 	bic.w	r2, r2, #1
 80060e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f812 	bl	8006124 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2220      	movs	r2, #32
 800610c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006130:	2b00      	cmp	r3, #0
 8006132:	d108      	bne.n	8006146 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006144:	e031      	b.n	80061aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006146:	2308      	movs	r3, #8
 8006148:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800614a:	2308      	movs	r3, #8
 800614c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	0e5b      	lsrs	r3, r3, #25
 8006156:	b2db      	uxtb	r3, r3
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	0f5b      	lsrs	r3, r3, #29
 8006166:	b2db      	uxtb	r3, r3
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800616e:	7bbb      	ldrb	r3, [r7, #14]
 8006170:	7b3a      	ldrb	r2, [r7, #12]
 8006172:	4911      	ldr	r1, [pc, #68]	@ (80061b8 <UARTEx_SetNbDataToProcess+0x94>)
 8006174:	5c8a      	ldrb	r2, [r1, r2]
 8006176:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800617a:	7b3a      	ldrb	r2, [r7, #12]
 800617c:	490f      	ldr	r1, [pc, #60]	@ (80061bc <UARTEx_SetNbDataToProcess+0x98>)
 800617e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006180:	fb93 f3f2 	sdiv	r3, r3, r2
 8006184:	b29a      	uxth	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	7b7a      	ldrb	r2, [r7, #13]
 8006190:	4909      	ldr	r1, [pc, #36]	@ (80061b8 <UARTEx_SetNbDataToProcess+0x94>)
 8006192:	5c8a      	ldrb	r2, [r1, r2]
 8006194:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006198:	7b7a      	ldrb	r2, [r7, #13]
 800619a:	4908      	ldr	r1, [pc, #32]	@ (80061bc <UARTEx_SetNbDataToProcess+0x98>)
 800619c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800619e:	fb93 f3f2 	sdiv	r3, r3, r2
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80061aa:	bf00      	nop
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	08008c98 	.word	0x08008c98
 80061bc:	08008ca0 	.word	0x08008ca0

080061c0 <siprintf>:
 80061c0:	b40e      	push	{r1, r2, r3}
 80061c2:	b500      	push	{lr}
 80061c4:	b09c      	sub	sp, #112	@ 0x70
 80061c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80061c8:	9002      	str	r0, [sp, #8]
 80061ca:	9006      	str	r0, [sp, #24]
 80061cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061d0:	4809      	ldr	r0, [pc, #36]	@ (80061f8 <siprintf+0x38>)
 80061d2:	9107      	str	r1, [sp, #28]
 80061d4:	9104      	str	r1, [sp, #16]
 80061d6:	4909      	ldr	r1, [pc, #36]	@ (80061fc <siprintf+0x3c>)
 80061d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80061dc:	9105      	str	r1, [sp, #20]
 80061de:	6800      	ldr	r0, [r0, #0]
 80061e0:	9301      	str	r3, [sp, #4]
 80061e2:	a902      	add	r1, sp, #8
 80061e4:	f000 f994 	bl	8006510 <_svfiprintf_r>
 80061e8:	9b02      	ldr	r3, [sp, #8]
 80061ea:	2200      	movs	r2, #0
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	b01c      	add	sp, #112	@ 0x70
 80061f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061f4:	b003      	add	sp, #12
 80061f6:	4770      	bx	lr
 80061f8:	20000028 	.word	0x20000028
 80061fc:	ffff0208 	.word	0xffff0208

08006200 <memset>:
 8006200:	4402      	add	r2, r0
 8006202:	4603      	mov	r3, r0
 8006204:	4293      	cmp	r3, r2
 8006206:	d100      	bne.n	800620a <memset+0xa>
 8006208:	4770      	bx	lr
 800620a:	f803 1b01 	strb.w	r1, [r3], #1
 800620e:	e7f9      	b.n	8006204 <memset+0x4>

08006210 <__errno>:
 8006210:	4b01      	ldr	r3, [pc, #4]	@ (8006218 <__errno+0x8>)
 8006212:	6818      	ldr	r0, [r3, #0]
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	20000028 	.word	0x20000028

0800621c <__libc_init_array>:
 800621c:	b570      	push	{r4, r5, r6, lr}
 800621e:	4d0d      	ldr	r5, [pc, #52]	@ (8006254 <__libc_init_array+0x38>)
 8006220:	4c0d      	ldr	r4, [pc, #52]	@ (8006258 <__libc_init_array+0x3c>)
 8006222:	1b64      	subs	r4, r4, r5
 8006224:	10a4      	asrs	r4, r4, #2
 8006226:	2600      	movs	r6, #0
 8006228:	42a6      	cmp	r6, r4
 800622a:	d109      	bne.n	8006240 <__libc_init_array+0x24>
 800622c:	4d0b      	ldr	r5, [pc, #44]	@ (800625c <__libc_init_array+0x40>)
 800622e:	4c0c      	ldr	r4, [pc, #48]	@ (8006260 <__libc_init_array+0x44>)
 8006230:	f000 fc66 	bl	8006b00 <_init>
 8006234:	1b64      	subs	r4, r4, r5
 8006236:	10a4      	asrs	r4, r4, #2
 8006238:	2600      	movs	r6, #0
 800623a:	42a6      	cmp	r6, r4
 800623c:	d105      	bne.n	800624a <__libc_init_array+0x2e>
 800623e:	bd70      	pop	{r4, r5, r6, pc}
 8006240:	f855 3b04 	ldr.w	r3, [r5], #4
 8006244:	4798      	blx	r3
 8006246:	3601      	adds	r6, #1
 8006248:	e7ee      	b.n	8006228 <__libc_init_array+0xc>
 800624a:	f855 3b04 	ldr.w	r3, [r5], #4
 800624e:	4798      	blx	r3
 8006250:	3601      	adds	r6, #1
 8006252:	e7f2      	b.n	800623a <__libc_init_array+0x1e>
 8006254:	08008ce4 	.word	0x08008ce4
 8006258:	08008ce4 	.word	0x08008ce4
 800625c:	08008ce4 	.word	0x08008ce4
 8006260:	08008ce8 	.word	0x08008ce8

08006264 <__retarget_lock_acquire_recursive>:
 8006264:	4770      	bx	lr

08006266 <__retarget_lock_release_recursive>:
 8006266:	4770      	bx	lr

08006268 <_free_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4605      	mov	r5, r0
 800626c:	2900      	cmp	r1, #0
 800626e:	d041      	beq.n	80062f4 <_free_r+0x8c>
 8006270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006274:	1f0c      	subs	r4, r1, #4
 8006276:	2b00      	cmp	r3, #0
 8006278:	bfb8      	it	lt
 800627a:	18e4      	addlt	r4, r4, r3
 800627c:	f000 f8e0 	bl	8006440 <__malloc_lock>
 8006280:	4a1d      	ldr	r2, [pc, #116]	@ (80062f8 <_free_r+0x90>)
 8006282:	6813      	ldr	r3, [r2, #0]
 8006284:	b933      	cbnz	r3, 8006294 <_free_r+0x2c>
 8006286:	6063      	str	r3, [r4, #4]
 8006288:	6014      	str	r4, [r2, #0]
 800628a:	4628      	mov	r0, r5
 800628c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006290:	f000 b8dc 	b.w	800644c <__malloc_unlock>
 8006294:	42a3      	cmp	r3, r4
 8006296:	d908      	bls.n	80062aa <_free_r+0x42>
 8006298:	6820      	ldr	r0, [r4, #0]
 800629a:	1821      	adds	r1, r4, r0
 800629c:	428b      	cmp	r3, r1
 800629e:	bf01      	itttt	eq
 80062a0:	6819      	ldreq	r1, [r3, #0]
 80062a2:	685b      	ldreq	r3, [r3, #4]
 80062a4:	1809      	addeq	r1, r1, r0
 80062a6:	6021      	streq	r1, [r4, #0]
 80062a8:	e7ed      	b.n	8006286 <_free_r+0x1e>
 80062aa:	461a      	mov	r2, r3
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	b10b      	cbz	r3, 80062b4 <_free_r+0x4c>
 80062b0:	42a3      	cmp	r3, r4
 80062b2:	d9fa      	bls.n	80062aa <_free_r+0x42>
 80062b4:	6811      	ldr	r1, [r2, #0]
 80062b6:	1850      	adds	r0, r2, r1
 80062b8:	42a0      	cmp	r0, r4
 80062ba:	d10b      	bne.n	80062d4 <_free_r+0x6c>
 80062bc:	6820      	ldr	r0, [r4, #0]
 80062be:	4401      	add	r1, r0
 80062c0:	1850      	adds	r0, r2, r1
 80062c2:	4283      	cmp	r3, r0
 80062c4:	6011      	str	r1, [r2, #0]
 80062c6:	d1e0      	bne.n	800628a <_free_r+0x22>
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	6053      	str	r3, [r2, #4]
 80062ce:	4408      	add	r0, r1
 80062d0:	6010      	str	r0, [r2, #0]
 80062d2:	e7da      	b.n	800628a <_free_r+0x22>
 80062d4:	d902      	bls.n	80062dc <_free_r+0x74>
 80062d6:	230c      	movs	r3, #12
 80062d8:	602b      	str	r3, [r5, #0]
 80062da:	e7d6      	b.n	800628a <_free_r+0x22>
 80062dc:	6820      	ldr	r0, [r4, #0]
 80062de:	1821      	adds	r1, r4, r0
 80062e0:	428b      	cmp	r3, r1
 80062e2:	bf04      	itt	eq
 80062e4:	6819      	ldreq	r1, [r3, #0]
 80062e6:	685b      	ldreq	r3, [r3, #4]
 80062e8:	6063      	str	r3, [r4, #4]
 80062ea:	bf04      	itt	eq
 80062ec:	1809      	addeq	r1, r1, r0
 80062ee:	6021      	streq	r1, [r4, #0]
 80062f0:	6054      	str	r4, [r2, #4]
 80062f2:	e7ca      	b.n	800628a <_free_r+0x22>
 80062f4:	bd38      	pop	{r3, r4, r5, pc}
 80062f6:	bf00      	nop
 80062f8:	200002e0 	.word	0x200002e0

080062fc <sbrk_aligned>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	4e0f      	ldr	r6, [pc, #60]	@ (800633c <sbrk_aligned+0x40>)
 8006300:	460c      	mov	r4, r1
 8006302:	6831      	ldr	r1, [r6, #0]
 8006304:	4605      	mov	r5, r0
 8006306:	b911      	cbnz	r1, 800630e <sbrk_aligned+0x12>
 8006308:	f000 fba6 	bl	8006a58 <_sbrk_r>
 800630c:	6030      	str	r0, [r6, #0]
 800630e:	4621      	mov	r1, r4
 8006310:	4628      	mov	r0, r5
 8006312:	f000 fba1 	bl	8006a58 <_sbrk_r>
 8006316:	1c43      	adds	r3, r0, #1
 8006318:	d103      	bne.n	8006322 <sbrk_aligned+0x26>
 800631a:	f04f 34ff 	mov.w	r4, #4294967295
 800631e:	4620      	mov	r0, r4
 8006320:	bd70      	pop	{r4, r5, r6, pc}
 8006322:	1cc4      	adds	r4, r0, #3
 8006324:	f024 0403 	bic.w	r4, r4, #3
 8006328:	42a0      	cmp	r0, r4
 800632a:	d0f8      	beq.n	800631e <sbrk_aligned+0x22>
 800632c:	1a21      	subs	r1, r4, r0
 800632e:	4628      	mov	r0, r5
 8006330:	f000 fb92 	bl	8006a58 <_sbrk_r>
 8006334:	3001      	adds	r0, #1
 8006336:	d1f2      	bne.n	800631e <sbrk_aligned+0x22>
 8006338:	e7ef      	b.n	800631a <sbrk_aligned+0x1e>
 800633a:	bf00      	nop
 800633c:	200002dc 	.word	0x200002dc

08006340 <_malloc_r>:
 8006340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006344:	1ccd      	adds	r5, r1, #3
 8006346:	f025 0503 	bic.w	r5, r5, #3
 800634a:	3508      	adds	r5, #8
 800634c:	2d0c      	cmp	r5, #12
 800634e:	bf38      	it	cc
 8006350:	250c      	movcc	r5, #12
 8006352:	2d00      	cmp	r5, #0
 8006354:	4606      	mov	r6, r0
 8006356:	db01      	blt.n	800635c <_malloc_r+0x1c>
 8006358:	42a9      	cmp	r1, r5
 800635a:	d904      	bls.n	8006366 <_malloc_r+0x26>
 800635c:	230c      	movs	r3, #12
 800635e:	6033      	str	r3, [r6, #0]
 8006360:	2000      	movs	r0, #0
 8006362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006366:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800643c <_malloc_r+0xfc>
 800636a:	f000 f869 	bl	8006440 <__malloc_lock>
 800636e:	f8d8 3000 	ldr.w	r3, [r8]
 8006372:	461c      	mov	r4, r3
 8006374:	bb44      	cbnz	r4, 80063c8 <_malloc_r+0x88>
 8006376:	4629      	mov	r1, r5
 8006378:	4630      	mov	r0, r6
 800637a:	f7ff ffbf 	bl	80062fc <sbrk_aligned>
 800637e:	1c43      	adds	r3, r0, #1
 8006380:	4604      	mov	r4, r0
 8006382:	d158      	bne.n	8006436 <_malloc_r+0xf6>
 8006384:	f8d8 4000 	ldr.w	r4, [r8]
 8006388:	4627      	mov	r7, r4
 800638a:	2f00      	cmp	r7, #0
 800638c:	d143      	bne.n	8006416 <_malloc_r+0xd6>
 800638e:	2c00      	cmp	r4, #0
 8006390:	d04b      	beq.n	800642a <_malloc_r+0xea>
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	4639      	mov	r1, r7
 8006396:	4630      	mov	r0, r6
 8006398:	eb04 0903 	add.w	r9, r4, r3
 800639c:	f000 fb5c 	bl	8006a58 <_sbrk_r>
 80063a0:	4581      	cmp	r9, r0
 80063a2:	d142      	bne.n	800642a <_malloc_r+0xea>
 80063a4:	6821      	ldr	r1, [r4, #0]
 80063a6:	1a6d      	subs	r5, r5, r1
 80063a8:	4629      	mov	r1, r5
 80063aa:	4630      	mov	r0, r6
 80063ac:	f7ff ffa6 	bl	80062fc <sbrk_aligned>
 80063b0:	3001      	adds	r0, #1
 80063b2:	d03a      	beq.n	800642a <_malloc_r+0xea>
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	442b      	add	r3, r5
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	f8d8 3000 	ldr.w	r3, [r8]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	bb62      	cbnz	r2, 800641c <_malloc_r+0xdc>
 80063c2:	f8c8 7000 	str.w	r7, [r8]
 80063c6:	e00f      	b.n	80063e8 <_malloc_r+0xa8>
 80063c8:	6822      	ldr	r2, [r4, #0]
 80063ca:	1b52      	subs	r2, r2, r5
 80063cc:	d420      	bmi.n	8006410 <_malloc_r+0xd0>
 80063ce:	2a0b      	cmp	r2, #11
 80063d0:	d917      	bls.n	8006402 <_malloc_r+0xc2>
 80063d2:	1961      	adds	r1, r4, r5
 80063d4:	42a3      	cmp	r3, r4
 80063d6:	6025      	str	r5, [r4, #0]
 80063d8:	bf18      	it	ne
 80063da:	6059      	strne	r1, [r3, #4]
 80063dc:	6863      	ldr	r3, [r4, #4]
 80063de:	bf08      	it	eq
 80063e0:	f8c8 1000 	streq.w	r1, [r8]
 80063e4:	5162      	str	r2, [r4, r5]
 80063e6:	604b      	str	r3, [r1, #4]
 80063e8:	4630      	mov	r0, r6
 80063ea:	f000 f82f 	bl	800644c <__malloc_unlock>
 80063ee:	f104 000b 	add.w	r0, r4, #11
 80063f2:	1d23      	adds	r3, r4, #4
 80063f4:	f020 0007 	bic.w	r0, r0, #7
 80063f8:	1ac2      	subs	r2, r0, r3
 80063fa:	bf1c      	itt	ne
 80063fc:	1a1b      	subne	r3, r3, r0
 80063fe:	50a3      	strne	r3, [r4, r2]
 8006400:	e7af      	b.n	8006362 <_malloc_r+0x22>
 8006402:	6862      	ldr	r2, [r4, #4]
 8006404:	42a3      	cmp	r3, r4
 8006406:	bf0c      	ite	eq
 8006408:	f8c8 2000 	streq.w	r2, [r8]
 800640c:	605a      	strne	r2, [r3, #4]
 800640e:	e7eb      	b.n	80063e8 <_malloc_r+0xa8>
 8006410:	4623      	mov	r3, r4
 8006412:	6864      	ldr	r4, [r4, #4]
 8006414:	e7ae      	b.n	8006374 <_malloc_r+0x34>
 8006416:	463c      	mov	r4, r7
 8006418:	687f      	ldr	r7, [r7, #4]
 800641a:	e7b6      	b.n	800638a <_malloc_r+0x4a>
 800641c:	461a      	mov	r2, r3
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	42a3      	cmp	r3, r4
 8006422:	d1fb      	bne.n	800641c <_malloc_r+0xdc>
 8006424:	2300      	movs	r3, #0
 8006426:	6053      	str	r3, [r2, #4]
 8006428:	e7de      	b.n	80063e8 <_malloc_r+0xa8>
 800642a:	230c      	movs	r3, #12
 800642c:	6033      	str	r3, [r6, #0]
 800642e:	4630      	mov	r0, r6
 8006430:	f000 f80c 	bl	800644c <__malloc_unlock>
 8006434:	e794      	b.n	8006360 <_malloc_r+0x20>
 8006436:	6005      	str	r5, [r0, #0]
 8006438:	e7d6      	b.n	80063e8 <_malloc_r+0xa8>
 800643a:	bf00      	nop
 800643c:	200002e0 	.word	0x200002e0

08006440 <__malloc_lock>:
 8006440:	4801      	ldr	r0, [pc, #4]	@ (8006448 <__malloc_lock+0x8>)
 8006442:	f7ff bf0f 	b.w	8006264 <__retarget_lock_acquire_recursive>
 8006446:	bf00      	nop
 8006448:	200002d8 	.word	0x200002d8

0800644c <__malloc_unlock>:
 800644c:	4801      	ldr	r0, [pc, #4]	@ (8006454 <__malloc_unlock+0x8>)
 800644e:	f7ff bf0a 	b.w	8006266 <__retarget_lock_release_recursive>
 8006452:	bf00      	nop
 8006454:	200002d8 	.word	0x200002d8

08006458 <__ssputs_r>:
 8006458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800645c:	688e      	ldr	r6, [r1, #8]
 800645e:	461f      	mov	r7, r3
 8006460:	42be      	cmp	r6, r7
 8006462:	680b      	ldr	r3, [r1, #0]
 8006464:	4682      	mov	sl, r0
 8006466:	460c      	mov	r4, r1
 8006468:	4690      	mov	r8, r2
 800646a:	d82d      	bhi.n	80064c8 <__ssputs_r+0x70>
 800646c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006470:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006474:	d026      	beq.n	80064c4 <__ssputs_r+0x6c>
 8006476:	6965      	ldr	r5, [r4, #20]
 8006478:	6909      	ldr	r1, [r1, #16]
 800647a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800647e:	eba3 0901 	sub.w	r9, r3, r1
 8006482:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006486:	1c7b      	adds	r3, r7, #1
 8006488:	444b      	add	r3, r9
 800648a:	106d      	asrs	r5, r5, #1
 800648c:	429d      	cmp	r5, r3
 800648e:	bf38      	it	cc
 8006490:	461d      	movcc	r5, r3
 8006492:	0553      	lsls	r3, r2, #21
 8006494:	d527      	bpl.n	80064e6 <__ssputs_r+0x8e>
 8006496:	4629      	mov	r1, r5
 8006498:	f7ff ff52 	bl	8006340 <_malloc_r>
 800649c:	4606      	mov	r6, r0
 800649e:	b360      	cbz	r0, 80064fa <__ssputs_r+0xa2>
 80064a0:	6921      	ldr	r1, [r4, #16]
 80064a2:	464a      	mov	r2, r9
 80064a4:	f000 fae8 	bl	8006a78 <memcpy>
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80064ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b2:	81a3      	strh	r3, [r4, #12]
 80064b4:	6126      	str	r6, [r4, #16]
 80064b6:	6165      	str	r5, [r4, #20]
 80064b8:	444e      	add	r6, r9
 80064ba:	eba5 0509 	sub.w	r5, r5, r9
 80064be:	6026      	str	r6, [r4, #0]
 80064c0:	60a5      	str	r5, [r4, #8]
 80064c2:	463e      	mov	r6, r7
 80064c4:	42be      	cmp	r6, r7
 80064c6:	d900      	bls.n	80064ca <__ssputs_r+0x72>
 80064c8:	463e      	mov	r6, r7
 80064ca:	6820      	ldr	r0, [r4, #0]
 80064cc:	4632      	mov	r2, r6
 80064ce:	4641      	mov	r1, r8
 80064d0:	f000 faa8 	bl	8006a24 <memmove>
 80064d4:	68a3      	ldr	r3, [r4, #8]
 80064d6:	1b9b      	subs	r3, r3, r6
 80064d8:	60a3      	str	r3, [r4, #8]
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	4433      	add	r3, r6
 80064de:	6023      	str	r3, [r4, #0]
 80064e0:	2000      	movs	r0, #0
 80064e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e6:	462a      	mov	r2, r5
 80064e8:	f000 fad4 	bl	8006a94 <_realloc_r>
 80064ec:	4606      	mov	r6, r0
 80064ee:	2800      	cmp	r0, #0
 80064f0:	d1e0      	bne.n	80064b4 <__ssputs_r+0x5c>
 80064f2:	6921      	ldr	r1, [r4, #16]
 80064f4:	4650      	mov	r0, sl
 80064f6:	f7ff feb7 	bl	8006268 <_free_r>
 80064fa:	230c      	movs	r3, #12
 80064fc:	f8ca 3000 	str.w	r3, [sl]
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006506:	81a3      	strh	r3, [r4, #12]
 8006508:	f04f 30ff 	mov.w	r0, #4294967295
 800650c:	e7e9      	b.n	80064e2 <__ssputs_r+0x8a>
	...

08006510 <_svfiprintf_r>:
 8006510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006514:	4698      	mov	r8, r3
 8006516:	898b      	ldrh	r3, [r1, #12]
 8006518:	061b      	lsls	r3, r3, #24
 800651a:	b09d      	sub	sp, #116	@ 0x74
 800651c:	4607      	mov	r7, r0
 800651e:	460d      	mov	r5, r1
 8006520:	4614      	mov	r4, r2
 8006522:	d510      	bpl.n	8006546 <_svfiprintf_r+0x36>
 8006524:	690b      	ldr	r3, [r1, #16]
 8006526:	b973      	cbnz	r3, 8006546 <_svfiprintf_r+0x36>
 8006528:	2140      	movs	r1, #64	@ 0x40
 800652a:	f7ff ff09 	bl	8006340 <_malloc_r>
 800652e:	6028      	str	r0, [r5, #0]
 8006530:	6128      	str	r0, [r5, #16]
 8006532:	b930      	cbnz	r0, 8006542 <_svfiprintf_r+0x32>
 8006534:	230c      	movs	r3, #12
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	f04f 30ff 	mov.w	r0, #4294967295
 800653c:	b01d      	add	sp, #116	@ 0x74
 800653e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006542:	2340      	movs	r3, #64	@ 0x40
 8006544:	616b      	str	r3, [r5, #20]
 8006546:	2300      	movs	r3, #0
 8006548:	9309      	str	r3, [sp, #36]	@ 0x24
 800654a:	2320      	movs	r3, #32
 800654c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006550:	f8cd 800c 	str.w	r8, [sp, #12]
 8006554:	2330      	movs	r3, #48	@ 0x30
 8006556:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80066f4 <_svfiprintf_r+0x1e4>
 800655a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800655e:	f04f 0901 	mov.w	r9, #1
 8006562:	4623      	mov	r3, r4
 8006564:	469a      	mov	sl, r3
 8006566:	f813 2b01 	ldrb.w	r2, [r3], #1
 800656a:	b10a      	cbz	r2, 8006570 <_svfiprintf_r+0x60>
 800656c:	2a25      	cmp	r2, #37	@ 0x25
 800656e:	d1f9      	bne.n	8006564 <_svfiprintf_r+0x54>
 8006570:	ebba 0b04 	subs.w	fp, sl, r4
 8006574:	d00b      	beq.n	800658e <_svfiprintf_r+0x7e>
 8006576:	465b      	mov	r3, fp
 8006578:	4622      	mov	r2, r4
 800657a:	4629      	mov	r1, r5
 800657c:	4638      	mov	r0, r7
 800657e:	f7ff ff6b 	bl	8006458 <__ssputs_r>
 8006582:	3001      	adds	r0, #1
 8006584:	f000 80a7 	beq.w	80066d6 <_svfiprintf_r+0x1c6>
 8006588:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800658a:	445a      	add	r2, fp
 800658c:	9209      	str	r2, [sp, #36]	@ 0x24
 800658e:	f89a 3000 	ldrb.w	r3, [sl]
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 809f 	beq.w	80066d6 <_svfiprintf_r+0x1c6>
 8006598:	2300      	movs	r3, #0
 800659a:	f04f 32ff 	mov.w	r2, #4294967295
 800659e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065a2:	f10a 0a01 	add.w	sl, sl, #1
 80065a6:	9304      	str	r3, [sp, #16]
 80065a8:	9307      	str	r3, [sp, #28]
 80065aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80065b0:	4654      	mov	r4, sl
 80065b2:	2205      	movs	r2, #5
 80065b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b8:	484e      	ldr	r0, [pc, #312]	@ (80066f4 <_svfiprintf_r+0x1e4>)
 80065ba:	f7f9 fe21 	bl	8000200 <memchr>
 80065be:	9a04      	ldr	r2, [sp, #16]
 80065c0:	b9d8      	cbnz	r0, 80065fa <_svfiprintf_r+0xea>
 80065c2:	06d0      	lsls	r0, r2, #27
 80065c4:	bf44      	itt	mi
 80065c6:	2320      	movmi	r3, #32
 80065c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065cc:	0711      	lsls	r1, r2, #28
 80065ce:	bf44      	itt	mi
 80065d0:	232b      	movmi	r3, #43	@ 0x2b
 80065d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065d6:	f89a 3000 	ldrb.w	r3, [sl]
 80065da:	2b2a      	cmp	r3, #42	@ 0x2a
 80065dc:	d015      	beq.n	800660a <_svfiprintf_r+0xfa>
 80065de:	9a07      	ldr	r2, [sp, #28]
 80065e0:	4654      	mov	r4, sl
 80065e2:	2000      	movs	r0, #0
 80065e4:	f04f 0c0a 	mov.w	ip, #10
 80065e8:	4621      	mov	r1, r4
 80065ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065ee:	3b30      	subs	r3, #48	@ 0x30
 80065f0:	2b09      	cmp	r3, #9
 80065f2:	d94b      	bls.n	800668c <_svfiprintf_r+0x17c>
 80065f4:	b1b0      	cbz	r0, 8006624 <_svfiprintf_r+0x114>
 80065f6:	9207      	str	r2, [sp, #28]
 80065f8:	e014      	b.n	8006624 <_svfiprintf_r+0x114>
 80065fa:	eba0 0308 	sub.w	r3, r0, r8
 80065fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006602:	4313      	orrs	r3, r2
 8006604:	9304      	str	r3, [sp, #16]
 8006606:	46a2      	mov	sl, r4
 8006608:	e7d2      	b.n	80065b0 <_svfiprintf_r+0xa0>
 800660a:	9b03      	ldr	r3, [sp, #12]
 800660c:	1d19      	adds	r1, r3, #4
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	9103      	str	r1, [sp, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	bfbb      	ittet	lt
 8006616:	425b      	neglt	r3, r3
 8006618:	f042 0202 	orrlt.w	r2, r2, #2
 800661c:	9307      	strge	r3, [sp, #28]
 800661e:	9307      	strlt	r3, [sp, #28]
 8006620:	bfb8      	it	lt
 8006622:	9204      	strlt	r2, [sp, #16]
 8006624:	7823      	ldrb	r3, [r4, #0]
 8006626:	2b2e      	cmp	r3, #46	@ 0x2e
 8006628:	d10a      	bne.n	8006640 <_svfiprintf_r+0x130>
 800662a:	7863      	ldrb	r3, [r4, #1]
 800662c:	2b2a      	cmp	r3, #42	@ 0x2a
 800662e:	d132      	bne.n	8006696 <_svfiprintf_r+0x186>
 8006630:	9b03      	ldr	r3, [sp, #12]
 8006632:	1d1a      	adds	r2, r3, #4
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	9203      	str	r2, [sp, #12]
 8006638:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800663c:	3402      	adds	r4, #2
 800663e:	9305      	str	r3, [sp, #20]
 8006640:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006704 <_svfiprintf_r+0x1f4>
 8006644:	7821      	ldrb	r1, [r4, #0]
 8006646:	2203      	movs	r2, #3
 8006648:	4650      	mov	r0, sl
 800664a:	f7f9 fdd9 	bl	8000200 <memchr>
 800664e:	b138      	cbz	r0, 8006660 <_svfiprintf_r+0x150>
 8006650:	9b04      	ldr	r3, [sp, #16]
 8006652:	eba0 000a 	sub.w	r0, r0, sl
 8006656:	2240      	movs	r2, #64	@ 0x40
 8006658:	4082      	lsls	r2, r0
 800665a:	4313      	orrs	r3, r2
 800665c:	3401      	adds	r4, #1
 800665e:	9304      	str	r3, [sp, #16]
 8006660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006664:	4824      	ldr	r0, [pc, #144]	@ (80066f8 <_svfiprintf_r+0x1e8>)
 8006666:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800666a:	2206      	movs	r2, #6
 800666c:	f7f9 fdc8 	bl	8000200 <memchr>
 8006670:	2800      	cmp	r0, #0
 8006672:	d036      	beq.n	80066e2 <_svfiprintf_r+0x1d2>
 8006674:	4b21      	ldr	r3, [pc, #132]	@ (80066fc <_svfiprintf_r+0x1ec>)
 8006676:	bb1b      	cbnz	r3, 80066c0 <_svfiprintf_r+0x1b0>
 8006678:	9b03      	ldr	r3, [sp, #12]
 800667a:	3307      	adds	r3, #7
 800667c:	f023 0307 	bic.w	r3, r3, #7
 8006680:	3308      	adds	r3, #8
 8006682:	9303      	str	r3, [sp, #12]
 8006684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006686:	4433      	add	r3, r6
 8006688:	9309      	str	r3, [sp, #36]	@ 0x24
 800668a:	e76a      	b.n	8006562 <_svfiprintf_r+0x52>
 800668c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006690:	460c      	mov	r4, r1
 8006692:	2001      	movs	r0, #1
 8006694:	e7a8      	b.n	80065e8 <_svfiprintf_r+0xd8>
 8006696:	2300      	movs	r3, #0
 8006698:	3401      	adds	r4, #1
 800669a:	9305      	str	r3, [sp, #20]
 800669c:	4619      	mov	r1, r3
 800669e:	f04f 0c0a 	mov.w	ip, #10
 80066a2:	4620      	mov	r0, r4
 80066a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066a8:	3a30      	subs	r2, #48	@ 0x30
 80066aa:	2a09      	cmp	r2, #9
 80066ac:	d903      	bls.n	80066b6 <_svfiprintf_r+0x1a6>
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0c6      	beq.n	8006640 <_svfiprintf_r+0x130>
 80066b2:	9105      	str	r1, [sp, #20]
 80066b4:	e7c4      	b.n	8006640 <_svfiprintf_r+0x130>
 80066b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80066ba:	4604      	mov	r4, r0
 80066bc:	2301      	movs	r3, #1
 80066be:	e7f0      	b.n	80066a2 <_svfiprintf_r+0x192>
 80066c0:	ab03      	add	r3, sp, #12
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	462a      	mov	r2, r5
 80066c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006700 <_svfiprintf_r+0x1f0>)
 80066c8:	a904      	add	r1, sp, #16
 80066ca:	4638      	mov	r0, r7
 80066cc:	f3af 8000 	nop.w
 80066d0:	1c42      	adds	r2, r0, #1
 80066d2:	4606      	mov	r6, r0
 80066d4:	d1d6      	bne.n	8006684 <_svfiprintf_r+0x174>
 80066d6:	89ab      	ldrh	r3, [r5, #12]
 80066d8:	065b      	lsls	r3, r3, #25
 80066da:	f53f af2d 	bmi.w	8006538 <_svfiprintf_r+0x28>
 80066de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066e0:	e72c      	b.n	800653c <_svfiprintf_r+0x2c>
 80066e2:	ab03      	add	r3, sp, #12
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	462a      	mov	r2, r5
 80066e8:	4b05      	ldr	r3, [pc, #20]	@ (8006700 <_svfiprintf_r+0x1f0>)
 80066ea:	a904      	add	r1, sp, #16
 80066ec:	4638      	mov	r0, r7
 80066ee:	f000 f879 	bl	80067e4 <_printf_i>
 80066f2:	e7ed      	b.n	80066d0 <_svfiprintf_r+0x1c0>
 80066f4:	08008ca8 	.word	0x08008ca8
 80066f8:	08008cb2 	.word	0x08008cb2
 80066fc:	00000000 	.word	0x00000000
 8006700:	08006459 	.word	0x08006459
 8006704:	08008cae 	.word	0x08008cae

08006708 <_printf_common>:
 8006708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800670c:	4616      	mov	r6, r2
 800670e:	4698      	mov	r8, r3
 8006710:	688a      	ldr	r2, [r1, #8]
 8006712:	690b      	ldr	r3, [r1, #16]
 8006714:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006718:	4293      	cmp	r3, r2
 800671a:	bfb8      	it	lt
 800671c:	4613      	movlt	r3, r2
 800671e:	6033      	str	r3, [r6, #0]
 8006720:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006724:	4607      	mov	r7, r0
 8006726:	460c      	mov	r4, r1
 8006728:	b10a      	cbz	r2, 800672e <_printf_common+0x26>
 800672a:	3301      	adds	r3, #1
 800672c:	6033      	str	r3, [r6, #0]
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	0699      	lsls	r1, r3, #26
 8006732:	bf42      	ittt	mi
 8006734:	6833      	ldrmi	r3, [r6, #0]
 8006736:	3302      	addmi	r3, #2
 8006738:	6033      	strmi	r3, [r6, #0]
 800673a:	6825      	ldr	r5, [r4, #0]
 800673c:	f015 0506 	ands.w	r5, r5, #6
 8006740:	d106      	bne.n	8006750 <_printf_common+0x48>
 8006742:	f104 0a19 	add.w	sl, r4, #25
 8006746:	68e3      	ldr	r3, [r4, #12]
 8006748:	6832      	ldr	r2, [r6, #0]
 800674a:	1a9b      	subs	r3, r3, r2
 800674c:	42ab      	cmp	r3, r5
 800674e:	dc26      	bgt.n	800679e <_printf_common+0x96>
 8006750:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006754:	6822      	ldr	r2, [r4, #0]
 8006756:	3b00      	subs	r3, #0
 8006758:	bf18      	it	ne
 800675a:	2301      	movne	r3, #1
 800675c:	0692      	lsls	r2, r2, #26
 800675e:	d42b      	bmi.n	80067b8 <_printf_common+0xb0>
 8006760:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006764:	4641      	mov	r1, r8
 8006766:	4638      	mov	r0, r7
 8006768:	47c8      	blx	r9
 800676a:	3001      	adds	r0, #1
 800676c:	d01e      	beq.n	80067ac <_printf_common+0xa4>
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	6922      	ldr	r2, [r4, #16]
 8006772:	f003 0306 	and.w	r3, r3, #6
 8006776:	2b04      	cmp	r3, #4
 8006778:	bf02      	ittt	eq
 800677a:	68e5      	ldreq	r5, [r4, #12]
 800677c:	6833      	ldreq	r3, [r6, #0]
 800677e:	1aed      	subeq	r5, r5, r3
 8006780:	68a3      	ldr	r3, [r4, #8]
 8006782:	bf0c      	ite	eq
 8006784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006788:	2500      	movne	r5, #0
 800678a:	4293      	cmp	r3, r2
 800678c:	bfc4      	itt	gt
 800678e:	1a9b      	subgt	r3, r3, r2
 8006790:	18ed      	addgt	r5, r5, r3
 8006792:	2600      	movs	r6, #0
 8006794:	341a      	adds	r4, #26
 8006796:	42b5      	cmp	r5, r6
 8006798:	d11a      	bne.n	80067d0 <_printf_common+0xc8>
 800679a:	2000      	movs	r0, #0
 800679c:	e008      	b.n	80067b0 <_printf_common+0xa8>
 800679e:	2301      	movs	r3, #1
 80067a0:	4652      	mov	r2, sl
 80067a2:	4641      	mov	r1, r8
 80067a4:	4638      	mov	r0, r7
 80067a6:	47c8      	blx	r9
 80067a8:	3001      	adds	r0, #1
 80067aa:	d103      	bne.n	80067b4 <_printf_common+0xac>
 80067ac:	f04f 30ff 	mov.w	r0, #4294967295
 80067b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b4:	3501      	adds	r5, #1
 80067b6:	e7c6      	b.n	8006746 <_printf_common+0x3e>
 80067b8:	18e1      	adds	r1, r4, r3
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	2030      	movs	r0, #48	@ 0x30
 80067be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067c2:	4422      	add	r2, r4
 80067c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067cc:	3302      	adds	r3, #2
 80067ce:	e7c7      	b.n	8006760 <_printf_common+0x58>
 80067d0:	2301      	movs	r3, #1
 80067d2:	4622      	mov	r2, r4
 80067d4:	4641      	mov	r1, r8
 80067d6:	4638      	mov	r0, r7
 80067d8:	47c8      	blx	r9
 80067da:	3001      	adds	r0, #1
 80067dc:	d0e6      	beq.n	80067ac <_printf_common+0xa4>
 80067de:	3601      	adds	r6, #1
 80067e0:	e7d9      	b.n	8006796 <_printf_common+0x8e>
	...

080067e4 <_printf_i>:
 80067e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067e8:	7e0f      	ldrb	r7, [r1, #24]
 80067ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067ec:	2f78      	cmp	r7, #120	@ 0x78
 80067ee:	4691      	mov	r9, r2
 80067f0:	4680      	mov	r8, r0
 80067f2:	460c      	mov	r4, r1
 80067f4:	469a      	mov	sl, r3
 80067f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067fa:	d807      	bhi.n	800680c <_printf_i+0x28>
 80067fc:	2f62      	cmp	r7, #98	@ 0x62
 80067fe:	d80a      	bhi.n	8006816 <_printf_i+0x32>
 8006800:	2f00      	cmp	r7, #0
 8006802:	f000 80d2 	beq.w	80069aa <_printf_i+0x1c6>
 8006806:	2f58      	cmp	r7, #88	@ 0x58
 8006808:	f000 80b9 	beq.w	800697e <_printf_i+0x19a>
 800680c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006810:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006814:	e03a      	b.n	800688c <_printf_i+0xa8>
 8006816:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800681a:	2b15      	cmp	r3, #21
 800681c:	d8f6      	bhi.n	800680c <_printf_i+0x28>
 800681e:	a101      	add	r1, pc, #4	@ (adr r1, 8006824 <_printf_i+0x40>)
 8006820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006824:	0800687d 	.word	0x0800687d
 8006828:	08006891 	.word	0x08006891
 800682c:	0800680d 	.word	0x0800680d
 8006830:	0800680d 	.word	0x0800680d
 8006834:	0800680d 	.word	0x0800680d
 8006838:	0800680d 	.word	0x0800680d
 800683c:	08006891 	.word	0x08006891
 8006840:	0800680d 	.word	0x0800680d
 8006844:	0800680d 	.word	0x0800680d
 8006848:	0800680d 	.word	0x0800680d
 800684c:	0800680d 	.word	0x0800680d
 8006850:	08006991 	.word	0x08006991
 8006854:	080068bb 	.word	0x080068bb
 8006858:	0800694b 	.word	0x0800694b
 800685c:	0800680d 	.word	0x0800680d
 8006860:	0800680d 	.word	0x0800680d
 8006864:	080069b3 	.word	0x080069b3
 8006868:	0800680d 	.word	0x0800680d
 800686c:	080068bb 	.word	0x080068bb
 8006870:	0800680d 	.word	0x0800680d
 8006874:	0800680d 	.word	0x0800680d
 8006878:	08006953 	.word	0x08006953
 800687c:	6833      	ldr	r3, [r6, #0]
 800687e:	1d1a      	adds	r2, r3, #4
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6032      	str	r2, [r6, #0]
 8006884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006888:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800688c:	2301      	movs	r3, #1
 800688e:	e09d      	b.n	80069cc <_printf_i+0x1e8>
 8006890:	6833      	ldr	r3, [r6, #0]
 8006892:	6820      	ldr	r0, [r4, #0]
 8006894:	1d19      	adds	r1, r3, #4
 8006896:	6031      	str	r1, [r6, #0]
 8006898:	0606      	lsls	r6, r0, #24
 800689a:	d501      	bpl.n	80068a0 <_printf_i+0xbc>
 800689c:	681d      	ldr	r5, [r3, #0]
 800689e:	e003      	b.n	80068a8 <_printf_i+0xc4>
 80068a0:	0645      	lsls	r5, r0, #25
 80068a2:	d5fb      	bpl.n	800689c <_printf_i+0xb8>
 80068a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068a8:	2d00      	cmp	r5, #0
 80068aa:	da03      	bge.n	80068b4 <_printf_i+0xd0>
 80068ac:	232d      	movs	r3, #45	@ 0x2d
 80068ae:	426d      	negs	r5, r5
 80068b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068b4:	4859      	ldr	r0, [pc, #356]	@ (8006a1c <_printf_i+0x238>)
 80068b6:	230a      	movs	r3, #10
 80068b8:	e011      	b.n	80068de <_printf_i+0xfa>
 80068ba:	6821      	ldr	r1, [r4, #0]
 80068bc:	6833      	ldr	r3, [r6, #0]
 80068be:	0608      	lsls	r0, r1, #24
 80068c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80068c4:	d402      	bmi.n	80068cc <_printf_i+0xe8>
 80068c6:	0649      	lsls	r1, r1, #25
 80068c8:	bf48      	it	mi
 80068ca:	b2ad      	uxthmi	r5, r5
 80068cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80068ce:	4853      	ldr	r0, [pc, #332]	@ (8006a1c <_printf_i+0x238>)
 80068d0:	6033      	str	r3, [r6, #0]
 80068d2:	bf14      	ite	ne
 80068d4:	230a      	movne	r3, #10
 80068d6:	2308      	moveq	r3, #8
 80068d8:	2100      	movs	r1, #0
 80068da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068de:	6866      	ldr	r6, [r4, #4]
 80068e0:	60a6      	str	r6, [r4, #8]
 80068e2:	2e00      	cmp	r6, #0
 80068e4:	bfa2      	ittt	ge
 80068e6:	6821      	ldrge	r1, [r4, #0]
 80068e8:	f021 0104 	bicge.w	r1, r1, #4
 80068ec:	6021      	strge	r1, [r4, #0]
 80068ee:	b90d      	cbnz	r5, 80068f4 <_printf_i+0x110>
 80068f0:	2e00      	cmp	r6, #0
 80068f2:	d04b      	beq.n	800698c <_printf_i+0x1a8>
 80068f4:	4616      	mov	r6, r2
 80068f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80068fa:	fb03 5711 	mls	r7, r3, r1, r5
 80068fe:	5dc7      	ldrb	r7, [r0, r7]
 8006900:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006904:	462f      	mov	r7, r5
 8006906:	42bb      	cmp	r3, r7
 8006908:	460d      	mov	r5, r1
 800690a:	d9f4      	bls.n	80068f6 <_printf_i+0x112>
 800690c:	2b08      	cmp	r3, #8
 800690e:	d10b      	bne.n	8006928 <_printf_i+0x144>
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	07df      	lsls	r7, r3, #31
 8006914:	d508      	bpl.n	8006928 <_printf_i+0x144>
 8006916:	6923      	ldr	r3, [r4, #16]
 8006918:	6861      	ldr	r1, [r4, #4]
 800691a:	4299      	cmp	r1, r3
 800691c:	bfde      	ittt	le
 800691e:	2330      	movle	r3, #48	@ 0x30
 8006920:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006924:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006928:	1b92      	subs	r2, r2, r6
 800692a:	6122      	str	r2, [r4, #16]
 800692c:	f8cd a000 	str.w	sl, [sp]
 8006930:	464b      	mov	r3, r9
 8006932:	aa03      	add	r2, sp, #12
 8006934:	4621      	mov	r1, r4
 8006936:	4640      	mov	r0, r8
 8006938:	f7ff fee6 	bl	8006708 <_printf_common>
 800693c:	3001      	adds	r0, #1
 800693e:	d14a      	bne.n	80069d6 <_printf_i+0x1f2>
 8006940:	f04f 30ff 	mov.w	r0, #4294967295
 8006944:	b004      	add	sp, #16
 8006946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	f043 0320 	orr.w	r3, r3, #32
 8006950:	6023      	str	r3, [r4, #0]
 8006952:	4833      	ldr	r0, [pc, #204]	@ (8006a20 <_printf_i+0x23c>)
 8006954:	2778      	movs	r7, #120	@ 0x78
 8006956:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	6831      	ldr	r1, [r6, #0]
 800695e:	061f      	lsls	r7, r3, #24
 8006960:	f851 5b04 	ldr.w	r5, [r1], #4
 8006964:	d402      	bmi.n	800696c <_printf_i+0x188>
 8006966:	065f      	lsls	r7, r3, #25
 8006968:	bf48      	it	mi
 800696a:	b2ad      	uxthmi	r5, r5
 800696c:	6031      	str	r1, [r6, #0]
 800696e:	07d9      	lsls	r1, r3, #31
 8006970:	bf44      	itt	mi
 8006972:	f043 0320 	orrmi.w	r3, r3, #32
 8006976:	6023      	strmi	r3, [r4, #0]
 8006978:	b11d      	cbz	r5, 8006982 <_printf_i+0x19e>
 800697a:	2310      	movs	r3, #16
 800697c:	e7ac      	b.n	80068d8 <_printf_i+0xf4>
 800697e:	4827      	ldr	r0, [pc, #156]	@ (8006a1c <_printf_i+0x238>)
 8006980:	e7e9      	b.n	8006956 <_printf_i+0x172>
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	f023 0320 	bic.w	r3, r3, #32
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	e7f6      	b.n	800697a <_printf_i+0x196>
 800698c:	4616      	mov	r6, r2
 800698e:	e7bd      	b.n	800690c <_printf_i+0x128>
 8006990:	6833      	ldr	r3, [r6, #0]
 8006992:	6825      	ldr	r5, [r4, #0]
 8006994:	6961      	ldr	r1, [r4, #20]
 8006996:	1d18      	adds	r0, r3, #4
 8006998:	6030      	str	r0, [r6, #0]
 800699a:	062e      	lsls	r6, r5, #24
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	d501      	bpl.n	80069a4 <_printf_i+0x1c0>
 80069a0:	6019      	str	r1, [r3, #0]
 80069a2:	e002      	b.n	80069aa <_printf_i+0x1c6>
 80069a4:	0668      	lsls	r0, r5, #25
 80069a6:	d5fb      	bpl.n	80069a0 <_printf_i+0x1bc>
 80069a8:	8019      	strh	r1, [r3, #0]
 80069aa:	2300      	movs	r3, #0
 80069ac:	6123      	str	r3, [r4, #16]
 80069ae:	4616      	mov	r6, r2
 80069b0:	e7bc      	b.n	800692c <_printf_i+0x148>
 80069b2:	6833      	ldr	r3, [r6, #0]
 80069b4:	1d1a      	adds	r2, r3, #4
 80069b6:	6032      	str	r2, [r6, #0]
 80069b8:	681e      	ldr	r6, [r3, #0]
 80069ba:	6862      	ldr	r2, [r4, #4]
 80069bc:	2100      	movs	r1, #0
 80069be:	4630      	mov	r0, r6
 80069c0:	f7f9 fc1e 	bl	8000200 <memchr>
 80069c4:	b108      	cbz	r0, 80069ca <_printf_i+0x1e6>
 80069c6:	1b80      	subs	r0, r0, r6
 80069c8:	6060      	str	r0, [r4, #4]
 80069ca:	6863      	ldr	r3, [r4, #4]
 80069cc:	6123      	str	r3, [r4, #16]
 80069ce:	2300      	movs	r3, #0
 80069d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069d4:	e7aa      	b.n	800692c <_printf_i+0x148>
 80069d6:	6923      	ldr	r3, [r4, #16]
 80069d8:	4632      	mov	r2, r6
 80069da:	4649      	mov	r1, r9
 80069dc:	4640      	mov	r0, r8
 80069de:	47d0      	blx	sl
 80069e0:	3001      	adds	r0, #1
 80069e2:	d0ad      	beq.n	8006940 <_printf_i+0x15c>
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	079b      	lsls	r3, r3, #30
 80069e8:	d413      	bmi.n	8006a12 <_printf_i+0x22e>
 80069ea:	68e0      	ldr	r0, [r4, #12]
 80069ec:	9b03      	ldr	r3, [sp, #12]
 80069ee:	4298      	cmp	r0, r3
 80069f0:	bfb8      	it	lt
 80069f2:	4618      	movlt	r0, r3
 80069f4:	e7a6      	b.n	8006944 <_printf_i+0x160>
 80069f6:	2301      	movs	r3, #1
 80069f8:	4632      	mov	r2, r6
 80069fa:	4649      	mov	r1, r9
 80069fc:	4640      	mov	r0, r8
 80069fe:	47d0      	blx	sl
 8006a00:	3001      	adds	r0, #1
 8006a02:	d09d      	beq.n	8006940 <_printf_i+0x15c>
 8006a04:	3501      	adds	r5, #1
 8006a06:	68e3      	ldr	r3, [r4, #12]
 8006a08:	9903      	ldr	r1, [sp, #12]
 8006a0a:	1a5b      	subs	r3, r3, r1
 8006a0c:	42ab      	cmp	r3, r5
 8006a0e:	dcf2      	bgt.n	80069f6 <_printf_i+0x212>
 8006a10:	e7eb      	b.n	80069ea <_printf_i+0x206>
 8006a12:	2500      	movs	r5, #0
 8006a14:	f104 0619 	add.w	r6, r4, #25
 8006a18:	e7f5      	b.n	8006a06 <_printf_i+0x222>
 8006a1a:	bf00      	nop
 8006a1c:	08008cb9 	.word	0x08008cb9
 8006a20:	08008cca 	.word	0x08008cca

08006a24 <memmove>:
 8006a24:	4288      	cmp	r0, r1
 8006a26:	b510      	push	{r4, lr}
 8006a28:	eb01 0402 	add.w	r4, r1, r2
 8006a2c:	d902      	bls.n	8006a34 <memmove+0x10>
 8006a2e:	4284      	cmp	r4, r0
 8006a30:	4623      	mov	r3, r4
 8006a32:	d807      	bhi.n	8006a44 <memmove+0x20>
 8006a34:	1e43      	subs	r3, r0, #1
 8006a36:	42a1      	cmp	r1, r4
 8006a38:	d008      	beq.n	8006a4c <memmove+0x28>
 8006a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a42:	e7f8      	b.n	8006a36 <memmove+0x12>
 8006a44:	4402      	add	r2, r0
 8006a46:	4601      	mov	r1, r0
 8006a48:	428a      	cmp	r2, r1
 8006a4a:	d100      	bne.n	8006a4e <memmove+0x2a>
 8006a4c:	bd10      	pop	{r4, pc}
 8006a4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a56:	e7f7      	b.n	8006a48 <memmove+0x24>

08006a58 <_sbrk_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4d06      	ldr	r5, [pc, #24]	@ (8006a74 <_sbrk_r+0x1c>)
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	4604      	mov	r4, r0
 8006a60:	4608      	mov	r0, r1
 8006a62:	602b      	str	r3, [r5, #0]
 8006a64:	f7fa fe4c 	bl	8001700 <_sbrk>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d102      	bne.n	8006a72 <_sbrk_r+0x1a>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	b103      	cbz	r3, 8006a72 <_sbrk_r+0x1a>
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	200002d4 	.word	0x200002d4

08006a78 <memcpy>:
 8006a78:	440a      	add	r2, r1
 8006a7a:	4291      	cmp	r1, r2
 8006a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a80:	d100      	bne.n	8006a84 <memcpy+0xc>
 8006a82:	4770      	bx	lr
 8006a84:	b510      	push	{r4, lr}
 8006a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a8e:	4291      	cmp	r1, r2
 8006a90:	d1f9      	bne.n	8006a86 <memcpy+0xe>
 8006a92:	bd10      	pop	{r4, pc}

08006a94 <_realloc_r>:
 8006a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a98:	4680      	mov	r8, r0
 8006a9a:	4615      	mov	r5, r2
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	b921      	cbnz	r1, 8006aaa <_realloc_r+0x16>
 8006aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	f7ff bc4b 	b.w	8006340 <_malloc_r>
 8006aaa:	b92a      	cbnz	r2, 8006ab8 <_realloc_r+0x24>
 8006aac:	f7ff fbdc 	bl	8006268 <_free_r>
 8006ab0:	2400      	movs	r4, #0
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab8:	f000 f81a 	bl	8006af0 <_malloc_usable_size_r>
 8006abc:	4285      	cmp	r5, r0
 8006abe:	4606      	mov	r6, r0
 8006ac0:	d802      	bhi.n	8006ac8 <_realloc_r+0x34>
 8006ac2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006ac6:	d8f4      	bhi.n	8006ab2 <_realloc_r+0x1e>
 8006ac8:	4629      	mov	r1, r5
 8006aca:	4640      	mov	r0, r8
 8006acc:	f7ff fc38 	bl	8006340 <_malloc_r>
 8006ad0:	4607      	mov	r7, r0
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d0ec      	beq.n	8006ab0 <_realloc_r+0x1c>
 8006ad6:	42b5      	cmp	r5, r6
 8006ad8:	462a      	mov	r2, r5
 8006ada:	4621      	mov	r1, r4
 8006adc:	bf28      	it	cs
 8006ade:	4632      	movcs	r2, r6
 8006ae0:	f7ff ffca 	bl	8006a78 <memcpy>
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	4640      	mov	r0, r8
 8006ae8:	f7ff fbbe 	bl	8006268 <_free_r>
 8006aec:	463c      	mov	r4, r7
 8006aee:	e7e0      	b.n	8006ab2 <_realloc_r+0x1e>

08006af0 <_malloc_usable_size_r>:
 8006af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006af4:	1f18      	subs	r0, r3, #4
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	bfbc      	itt	lt
 8006afa:	580b      	ldrlt	r3, [r1, r0]
 8006afc:	18c0      	addlt	r0, r0, r3
 8006afe:	4770      	bx	lr

08006b00 <_init>:
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b02:	bf00      	nop
 8006b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b06:	bc08      	pop	{r3}
 8006b08:	469e      	mov	lr, r3
 8006b0a:	4770      	bx	lr

08006b0c <_fini>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	bf00      	nop
 8006b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b12:	bc08      	pop	{r3}
 8006b14:	469e      	mov	lr, r3
 8006b16:	4770      	bx	lr
