
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ecc  080001c0  080001c0  000011c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002220  08008090  08008090  00009090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2b0  0800a2b0  0000c0b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2b0  0800a2b0  0000b2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2b8  0800a2b8  0000c0b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2b8  0800a2b8  0000b2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2bc  0800a2bc  0000b2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  0800a2c0  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  200000b0  0800a370  0000c0b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  0800a370  0000c31c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f79  00000000  00000000  0000c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002859  00000000  00000000  0001e059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  000208b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002a030  00000000  00000000  00021628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001169b  00000000  00000000  0004b658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00100c61  00000000  00000000  0005ccf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000b8  00000000  00000000  0015d954  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000a45  00000000  00000000  0015da0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c5c  00000000  00000000  0015e454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001620b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001d3  00000000  00000000  00162122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  001622f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008074 	.word	0x08008074

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000b4 	.word	0x200000b4
 80001fc:	08008074 	.word	0x08008074

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	@ 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b96a 	b.w	8000e64 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9d08      	ldr	r5, [sp, #32]
 8000bae:	460c      	mov	r4, r1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d14e      	bne.n	8000c52 <__udivmoddi4+0xaa>
 8000bb4:	4694      	mov	ip, r2
 8000bb6:	458c      	cmp	ip, r1
 8000bb8:	4686      	mov	lr, r0
 8000bba:	fab2 f282 	clz	r2, r2
 8000bbe:	d962      	bls.n	8000c86 <__udivmoddi4+0xde>
 8000bc0:	b14a      	cbz	r2, 8000bd6 <__udivmoddi4+0x2e>
 8000bc2:	f1c2 0320 	rsb	r3, r2, #32
 8000bc6:	4091      	lsls	r1, r2
 8000bc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd0:	4319      	orrs	r1, r3
 8000bd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f f68c 	uxth.w	r6, ip
 8000bde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bee:	fb04 f106 	mul.w	r1, r4, r6
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	d90a      	bls.n	8000c0c <__udivmoddi4+0x64>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bfe:	f080 8112 	bcs.w	8000e26 <__udivmoddi4+0x27e>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 810f 	bls.w	8000e26 <__udivmoddi4+0x27e>
 8000c08:	3c02      	subs	r4, #2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	1a59      	subs	r1, r3, r1
 8000c0e:	fa1f f38e 	uxth.w	r3, lr
 8000c12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c16:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb00 f606 	mul.w	r6, r0, r6
 8000c22:	429e      	cmp	r6, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x94>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c2e:	f080 80fc 	bcs.w	8000e2a <__udivmoddi4+0x282>
 8000c32:	429e      	cmp	r6, r3
 8000c34:	f240 80f9 	bls.w	8000e2a <__udivmoddi4+0x282>
 8000c38:	4463      	add	r3, ip
 8000c3a:	3802      	subs	r0, #2
 8000c3c:	1b9b      	subs	r3, r3, r6
 8000c3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c42:	2100      	movs	r1, #0
 8000c44:	b11d      	cbz	r5, 8000c4e <__udivmoddi4+0xa6>
 8000c46:	40d3      	lsrs	r3, r2
 8000c48:	2200      	movs	r2, #0
 8000c4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d905      	bls.n	8000c62 <__udivmoddi4+0xba>
 8000c56:	b10d      	cbz	r5, 8000c5c <__udivmoddi4+0xb4>
 8000c58:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4608      	mov	r0, r1
 8000c60:	e7f5      	b.n	8000c4e <__udivmoddi4+0xa6>
 8000c62:	fab3 f183 	clz	r1, r3
 8000c66:	2900      	cmp	r1, #0
 8000c68:	d146      	bne.n	8000cf8 <__udivmoddi4+0x150>
 8000c6a:	42a3      	cmp	r3, r4
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0xcc>
 8000c6e:	4290      	cmp	r0, r2
 8000c70:	f0c0 80f0 	bcc.w	8000e54 <__udivmoddi4+0x2ac>
 8000c74:	1a86      	subs	r6, r0, r2
 8000c76:	eb64 0303 	sbc.w	r3, r4, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	2d00      	cmp	r5, #0
 8000c7e:	d0e6      	beq.n	8000c4e <__udivmoddi4+0xa6>
 8000c80:	e9c5 6300 	strd	r6, r3, [r5]
 8000c84:	e7e3      	b.n	8000c4e <__udivmoddi4+0xa6>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	f040 8090 	bne.w	8000dac <__udivmoddi4+0x204>
 8000c8c:	eba1 040c 	sub.w	r4, r1, ip
 8000c90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c94:	fa1f f78c 	uxth.w	r7, ip
 8000c98:	2101      	movs	r1, #1
 8000c9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ca6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000caa:	fb07 f006 	mul.w	r0, r7, r6
 8000cae:	4298      	cmp	r0, r3
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0x11c>
 8000cb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x11a>
 8000cbc:	4298      	cmp	r0, r3
 8000cbe:	f200 80cd 	bhi.w	8000e5c <__udivmoddi4+0x2b4>
 8000cc2:	4626      	mov	r6, r4
 8000cc4:	1a1c      	subs	r4, r3, r0
 8000cc6:	fa1f f38e 	uxth.w	r3, lr
 8000cca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cce:	fb08 4410 	mls	r4, r8, r0, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb00 f707 	mul.w	r7, r0, r7
 8000cda:	429f      	cmp	r7, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x148>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x146>
 8000ce8:	429f      	cmp	r7, r3
 8000cea:	f200 80b0 	bhi.w	8000e4e <__udivmoddi4+0x2a6>
 8000cee:	4620      	mov	r0, r4
 8000cf0:	1bdb      	subs	r3, r3, r7
 8000cf2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf6:	e7a5      	b.n	8000c44 <__udivmoddi4+0x9c>
 8000cf8:	f1c1 0620 	rsb	r6, r1, #32
 8000cfc:	408b      	lsls	r3, r1
 8000cfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000d02:	431f      	orrs	r7, r3
 8000d04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d08:	fa04 f301 	lsl.w	r3, r4, r1
 8000d0c:	ea43 030c 	orr.w	r3, r3, ip
 8000d10:	40f4      	lsrs	r4, r6
 8000d12:	fa00 f801 	lsl.w	r8, r0, r1
 8000d16:	0c38      	lsrs	r0, r7, #16
 8000d18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d20:	fa1f fc87 	uxth.w	ip, r7
 8000d24:	fb00 441e 	mls	r4, r0, lr, r4
 8000d28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d30:	45a1      	cmp	r9, r4
 8000d32:	fa02 f201 	lsl.w	r2, r2, r1
 8000d36:	d90a      	bls.n	8000d4e <__udivmoddi4+0x1a6>
 8000d38:	193c      	adds	r4, r7, r4
 8000d3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d3e:	f080 8084 	bcs.w	8000e4a <__udivmoddi4+0x2a2>
 8000d42:	45a1      	cmp	r9, r4
 8000d44:	f240 8081 	bls.w	8000e4a <__udivmoddi4+0x2a2>
 8000d48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d4c:	443c      	add	r4, r7
 8000d4e:	eba4 0409 	sub.w	r4, r4, r9
 8000d52:	fa1f f983 	uxth.w	r9, r3
 8000d56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d66:	45a4      	cmp	ip, r4
 8000d68:	d907      	bls.n	8000d7a <__udivmoddi4+0x1d2>
 8000d6a:	193c      	adds	r4, r7, r4
 8000d6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d70:	d267      	bcs.n	8000e42 <__udivmoddi4+0x29a>
 8000d72:	45a4      	cmp	ip, r4
 8000d74:	d965      	bls.n	8000e42 <__udivmoddi4+0x29a>
 8000d76:	3b02      	subs	r3, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d82:	eba4 040c 	sub.w	r4, r4, ip
 8000d86:	429c      	cmp	r4, r3
 8000d88:	46ce      	mov	lr, r9
 8000d8a:	469c      	mov	ip, r3
 8000d8c:	d351      	bcc.n	8000e32 <__udivmoddi4+0x28a>
 8000d8e:	d04e      	beq.n	8000e2e <__udivmoddi4+0x286>
 8000d90:	b155      	cbz	r5, 8000da8 <__udivmoddi4+0x200>
 8000d92:	ebb8 030e 	subs.w	r3, r8, lr
 8000d96:	eb64 040c 	sbc.w	r4, r4, ip
 8000d9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d9e:	40cb      	lsrs	r3, r1
 8000da0:	431e      	orrs	r6, r3
 8000da2:	40cc      	lsrs	r4, r1
 8000da4:	e9c5 6400 	strd	r6, r4, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	e750      	b.n	8000c4e <__udivmoddi4+0xa6>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f103 	lsr.w	r1, r0, r3
 8000db4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dbc:	4094      	lsls	r4, r2
 8000dbe:	430c      	orrs	r4, r1
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc8:	fa1f f78c 	uxth.w	r7, ip
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3110 	mls	r1, r8, r0, r3
 8000dd4:	0c23      	lsrs	r3, r4, #16
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f107 	mul.w	r1, r0, r7
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x24c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dea:	d22c      	bcs.n	8000e46 <__udivmoddi4+0x29e>
 8000dec:	4299      	cmp	r1, r3
 8000dee:	d92a      	bls.n	8000e46 <__udivmoddi4+0x29e>
 8000df0:	3802      	subs	r0, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dfc:	fb08 3311 	mls	r3, r8, r1, r3
 8000e00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e04:	fb01 f307 	mul.w	r3, r1, r7
 8000e08:	42a3      	cmp	r3, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x276>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e14:	d213      	bcs.n	8000e3e <__udivmoddi4+0x296>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d911      	bls.n	8000e3e <__udivmoddi4+0x296>
 8000e1a:	3902      	subs	r1, #2
 8000e1c:	4464      	add	r4, ip
 8000e1e:	1ae4      	subs	r4, r4, r3
 8000e20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e24:	e739      	b.n	8000c9a <__udivmoddi4+0xf2>
 8000e26:	4604      	mov	r4, r0
 8000e28:	e6f0      	b.n	8000c0c <__udivmoddi4+0x64>
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e706      	b.n	8000c3c <__udivmoddi4+0x94>
 8000e2e:	45c8      	cmp	r8, r9
 8000e30:	d2ae      	bcs.n	8000d90 <__udivmoddi4+0x1e8>
 8000e32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e3a:	3801      	subs	r0, #1
 8000e3c:	e7a8      	b.n	8000d90 <__udivmoddi4+0x1e8>
 8000e3e:	4631      	mov	r1, r6
 8000e40:	e7ed      	b.n	8000e1e <__udivmoddi4+0x276>
 8000e42:	4603      	mov	r3, r0
 8000e44:	e799      	b.n	8000d7a <__udivmoddi4+0x1d2>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e7d4      	b.n	8000df4 <__udivmoddi4+0x24c>
 8000e4a:	46d6      	mov	lr, sl
 8000e4c:	e77f      	b.n	8000d4e <__udivmoddi4+0x1a6>
 8000e4e:	4463      	add	r3, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	e74d      	b.n	8000cf0 <__udivmoddi4+0x148>
 8000e54:	4606      	mov	r6, r0
 8000e56:	4623      	mov	r3, r4
 8000e58:	4608      	mov	r0, r1
 8000e5a:	e70f      	b.n	8000c7c <__udivmoddi4+0xd4>
 8000e5c:	3e02      	subs	r6, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	e730      	b.n	8000cc4 <__udivmoddi4+0x11c>
 8000e62:	bf00      	nop

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <ILI9341_Select>:


#include "stm32l4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2110      	movs	r1, #16
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e74:	f001 fff2 	bl	8002e5c <HAL_GPIO_WritePin>
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2110      	movs	r1, #16
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e88:	f001 ffe8 	bl	8002e5c <HAL_GPIO_WritePin>
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2101      	movs	r1, #1
 8000e98:	4806      	ldr	r0, [pc, #24]	@ (8000eb4 <ILI9341_Reset+0x24>)
 8000e9a:	f001 ffdf 	bl	8002e5c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000e9e:	2005      	movs	r0, #5
 8000ea0:	f001 fb36 	bl	8002510 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <ILI9341_Reset+0x24>)
 8000eaa:	f001 ffd7 	bl	8002e5c <HAL_GPIO_WritePin>
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	48000400 	.word	0x48000400

08000eb8 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <ILI9341_WriteCommand+0x2c>)
 8000ec8:	f001 ffc8 	bl	8002e5c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000ecc:	1df9      	adds	r1, r7, #7
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4804      	ldr	r0, [pc, #16]	@ (8000ee8 <ILI9341_WriteCommand+0x30>)
 8000ed6:	f003 fd40 	bl	800495a <HAL_SPI_Transmit>

}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	48000400 	.word	0x48000400
 8000ee8:	200000cc 	.word	0x200000cc

08000eec <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2102      	movs	r1, #2
 8000efa:	4811      	ldr	r0, [pc, #68]	@ (8000f40 <ILI9341_WriteData+0x54>)
 8000efc:	f001 ffae 	bl	8002e5c <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000f00:	e015      	b.n	8000f2e <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000f08:	bf28      	it	cs
 8000f0a:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000f0e:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000f10:	89fa      	ldrh	r2, [r7, #14]
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	480a      	ldr	r0, [pc, #40]	@ (8000f44 <ILI9341_WriteData+0x58>)
 8000f1a:	f003 fd1e 	bl	800495a <HAL_SPI_Transmit>

        buff += chunk_size;
 8000f1e:	89fb      	ldrh	r3, [r7, #14]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1e6      	bne.n	8000f02 <ILI9341_WriteData+0x16>
    }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	48000400 	.word	0x48000400
 8000f44:	200000cc 	.word	0x200000cc

08000f48 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4604      	mov	r4, r0
 8000f50:	4608      	mov	r0, r1
 8000f52:	4611      	mov	r1, r2
 8000f54:	461a      	mov	r2, r3
 8000f56:	4623      	mov	r3, r4
 8000f58:	80fb      	strh	r3, [r7, #6]
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80bb      	strh	r3, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	807b      	strh	r3, [r7, #2]
 8000f62:	4613      	mov	r3, r2
 8000f64:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8000f66:	202a      	movs	r0, #42	@ 0x2a
 8000f68:	f7ff ffa6 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	733b      	strb	r3, [r7, #12]
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	737b      	strb	r3, [r7, #13]
 8000f7c:	887b      	ldrh	r3, [r7, #2]
 8000f7e:	0a1b      	lsrs	r3, r3, #8
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	73bb      	strb	r3, [r7, #14]
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2104      	movs	r1, #4
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ffaa 	bl	8000eec <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8000f98:	202b      	movs	r0, #43	@ 0x2b
 8000f9a:	f7ff ff8d 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000f9e:	88bb      	ldrh	r3, [r7, #4]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	723b      	strb	r3, [r7, #8]
 8000fa8:	88bb      	ldrh	r3, [r7, #4]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	727b      	strb	r3, [r7, #9]
 8000fae:	883b      	ldrh	r3, [r7, #0]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	72bb      	strb	r3, [r7, #10]
 8000fb8:	883b      	ldrh	r3, [r7, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff91 	bl	8000eec <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8000fca:	202c      	movs	r0, #44	@ 0x2c
 8000fcc:	f7ff ff74 	bl	8000eb8 <ILI9341_WriteCommand>
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd90      	pop	{r4, r7, pc}

08000fd8 <ILI9341_Init>:

void ILI9341_Init() {
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b09b      	sub	sp, #108	@ 0x6c
 8000fdc:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000fde:	f7ff ff43 	bl	8000e68 <ILI9341_Select>
    ILI9341_Reset();
 8000fe2:	f7ff ff55 	bl	8000e90 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f7ff ff66 	bl	8000eb8 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000fec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ff0:	f001 fa8e 	bl	8002510 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000ff4:	20cb      	movs	r0, #203	@ 0xcb
 8000ff6:	f7ff ff5f 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8000ffa:	4a87      	ldr	r2, [pc, #540]	@ (8001218 <ILI9341_Init+0x240>)
 8000ffc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001000:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001004:	6018      	str	r0, [r3, #0]
 8001006:	3304      	adds	r3, #4
 8001008:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800100a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800100e:	2105      	movs	r1, #5
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff6b 	bl	8000eec <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8001016:	20cf      	movs	r0, #207	@ 0xcf
 8001018:	f7ff ff4e 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 800101c:	4a7f      	ldr	r2, [pc, #508]	@ (800121c <ILI9341_Init+0x244>)
 800101e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	4611      	mov	r1, r2
 8001026:	8019      	strh	r1, [r3, #0]
 8001028:	3302      	adds	r3, #2
 800102a:	0c12      	lsrs	r2, r2, #16
 800102c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800102e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001032:	2103      	movs	r1, #3
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff59 	bl	8000eec <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 800103a:	20e8      	movs	r0, #232	@ 0xe8
 800103c:	f7ff ff3c 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8001040:	4a77      	ldr	r2, [pc, #476]	@ (8001220 <ILI9341_Init+0x248>)
 8001042:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001046:	6812      	ldr	r2, [r2, #0]
 8001048:	4611      	mov	r1, r2
 800104a:	8019      	strh	r1, [r3, #0]
 800104c:	3302      	adds	r3, #2
 800104e:	0c12      	lsrs	r2, r2, #16
 8001050:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001052:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001056:	2103      	movs	r1, #3
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff47 	bl	8000eec <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 800105e:	20ea      	movs	r0, #234	@ 0xea
 8001060:	f7ff ff2a 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8001064:	2300      	movs	r3, #0
 8001066:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 800106a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800106e:	2102      	movs	r1, #2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff3b 	bl	8000eec <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8001076:	20ed      	movs	r0, #237	@ 0xed
 8001078:	f7ff ff1e 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 800107c:	4b69      	ldr	r3, [pc, #420]	@ (8001224 <ILI9341_Init+0x24c>)
 800107e:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8001080:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001084:	2104      	movs	r1, #4
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff30 	bl	8000eec <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 800108c:	20f7      	movs	r0, #247	@ 0xf7
 800108e:	f7ff ff13 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8001092:	2320      	movs	r3, #32
 8001094:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8001098:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800109c:	2101      	movs	r1, #1
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff24 	bl	8000eec <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 80010a4:	20c0      	movs	r0, #192	@ 0xc0
 80010a6:	f7ff ff07 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 80010aa:	2323      	movs	r3, #35	@ 0x23
 80010ac:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 80010b0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010b4:	2101      	movs	r1, #1
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff18 	bl	8000eec <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80010bc:	20c1      	movs	r0, #193	@ 0xc1
 80010be:	f7ff fefb 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80010c2:	2310      	movs	r3, #16
 80010c4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 80010c8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80010cc:	2101      	movs	r1, #1
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff0c 	bl	8000eec <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80010d4:	20c5      	movs	r0, #197	@ 0xc5
 80010d6:	f7ff feef 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80010da:	f642 033e 	movw	r3, #10302	@ 0x283e
 80010de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 80010e2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010e6:	2102      	movs	r1, #2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff feff 	bl	8000eec <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80010ee:	20c7      	movs	r0, #199	@ 0xc7
 80010f0:	f7ff fee2 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80010f4:	2386      	movs	r3, #134	@ 0x86
 80010f6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 80010fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010fe:	2101      	movs	r1, #1
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fef3 	bl	8000eec <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8001106:	2036      	movs	r0, #54	@ 0x36
 8001108:	f7ff fed6 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 800110c:	2348      	movs	r3, #72	@ 0x48
 800110e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 8001112:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001116:	2101      	movs	r1, #1
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fee7 	bl	8000eec <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 800111e:	203a      	movs	r0, #58	@ 0x3a
 8001120:	f7ff feca 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8001124:	2355      	movs	r3, #85	@ 0x55
 8001126:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 800112a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800112e:	2101      	movs	r1, #1
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fedb 	bl	8000eec <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8001136:	20b1      	movs	r0, #177	@ 0xb1
 8001138:	f7ff febe 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 800113c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001140:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 8001142:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001146:	2102      	movs	r1, #2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fecf 	bl	8000eec <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 800114e:	20b6      	movs	r0, #182	@ 0xb6
 8001150:	f7ff feb2 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8001154:	4a34      	ldr	r2, [pc, #208]	@ (8001228 <ILI9341_Init+0x250>)
 8001156:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	4611      	mov	r1, r2
 800115e:	8019      	strh	r1, [r3, #0]
 8001160:	3302      	adds	r3, #2
 8001162:	0c12      	lsrs	r2, r2, #16
 8001164:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001166:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800116a:	2103      	movs	r1, #3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff febd 	bl	8000eec <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8001172:	20f2      	movs	r0, #242	@ 0xf2
 8001174:	f7ff fea0 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8001178:	2300      	movs	r3, #0
 800117a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 800117e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001182:	2101      	movs	r1, #1
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff feb1 	bl	8000eec <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 800118a:	2026      	movs	r0, #38	@ 0x26
 800118c:	f7ff fe94 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8001190:	2301      	movs	r3, #1
 8001192:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 8001196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119a:	2101      	movs	r1, #1
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fea5 	bl	8000eec <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 80011a2:	20e0      	movs	r0, #224	@ 0xe0
 80011a4:	f7ff fe88 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80011a8:	4b20      	ldr	r3, [pc, #128]	@ (800122c <ILI9341_Init+0x254>)
 80011aa:	f107 0414 	add.w	r4, r7, #20
 80011ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011b0:	c407      	stmia	r4!, {r0, r1, r2}
 80011b2:	8023      	strh	r3, [r4, #0]
 80011b4:	3402      	adds	r4, #2
 80011b6:	0c1b      	lsrs	r3, r3, #16
 80011b8:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	210f      	movs	r1, #15
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fe93 	bl	8000eec <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80011c6:	20e1      	movs	r0, #225	@ 0xe1
 80011c8:	f7ff fe76 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80011cc:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <ILI9341_Init+0x258>)
 80011ce:	1d3c      	adds	r4, r7, #4
 80011d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d2:	c407      	stmia	r4!, {r0, r1, r2}
 80011d4:	8023      	strh	r3, [r4, #0]
 80011d6:	3402      	adds	r4, #2
 80011d8:	0c1b      	lsrs	r3, r3, #16
 80011da:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	210f      	movs	r1, #15
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fe83 	bl	8000eec <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80011e6:	2011      	movs	r0, #17
 80011e8:	f7ff fe66 	bl	8000eb8 <ILI9341_WriteCommand>
    HAL_Delay(120);
 80011ec:	2078      	movs	r0, #120	@ 0x78
 80011ee:	f001 f98f 	bl	8002510 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80011f2:	2029      	movs	r0, #41	@ 0x29
 80011f4:	f7ff fe60 	bl	8000eb8 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80011f8:	2036      	movs	r0, #54	@ 0x36
 80011fa:	f7ff fe5d 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80011fe:	2348      	movs	r3, #72	@ 0x48
 8001200:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001202:	463b      	mov	r3, r7
 8001204:	2101      	movs	r1, #1
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fe70 	bl	8000eec <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 800120c:	f7ff fe36 	bl	8000e7c <ILI9341_Unselect>
}
 8001210:	bf00      	nop
 8001212:	376c      	adds	r7, #108	@ 0x6c
 8001214:	46bd      	mov	sp, r7
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	08008090 	.word	0x08008090
 800121c:	08008098 	.word	0x08008098
 8001220:	0800809c 	.word	0x0800809c
 8001224:	81120364 	.word	0x81120364
 8001228:	080080a0 	.word	0x080080a0
 800122c:	080080a4 	.word	0x080080a4
 8001230:	080080b4 	.word	0x080080b4

08001234 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001234:	b082      	sub	sp, #8
 8001236:	b580      	push	{r7, lr}
 8001238:	b088      	sub	sp, #32
 800123a:	af00      	add	r7, sp, #0
 800123c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
 8001242:	460b      	mov	r3, r1
 8001244:	80bb      	strh	r3, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800124a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800124e:	461a      	mov	r2, r3
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	4413      	add	r3, r2
 8001254:	b29b      	uxth	r3, r3
 8001256:	3b01      	subs	r3, #1
 8001258:	b29a      	uxth	r2, r3
 800125a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800125e:	4619      	mov	r1, r3
 8001260:	88bb      	ldrh	r3, [r7, #4]
 8001262:	440b      	add	r3, r1
 8001264:	b29b      	uxth	r3, r3
 8001266:	3b01      	subs	r3, #1
 8001268:	b29b      	uxth	r3, r3
 800126a:	88b9      	ldrh	r1, [r7, #4]
 800126c:	88f8      	ldrh	r0, [r7, #6]
 800126e:	f7ff fe6b 	bl	8000f48 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	e041      	b.n	80012fc <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 8001278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	3b20      	subs	r3, #32
 800127e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001282:	fb01 f303 	mul.w	r3, r1, r3
 8001286:	4619      	mov	r1, r3
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	440b      	add	r3, r1
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	e027      	b.n	80012ea <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00e      	beq.n	80012c8 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80012aa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	743b      	strb	r3, [r7, #16]
 80012b4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	2102      	movs	r1, #2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fe13 	bl	8000eec <ILI9341_WriteData>
 80012c6:	e00d      	b.n	80012e4 <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80012c8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80012ca:	0a1b      	lsrs	r3, r3, #8
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	733b      	strb	r3, [r7, #12]
 80012d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2102      	movs	r1, #2
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fe04 	bl	8000eec <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	3301      	adds	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
 80012ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012ee:	461a      	mov	r2, r3
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d3d1      	bcc.n	800129a <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001300:	461a      	mov	r2, r3
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	4293      	cmp	r3, r2
 8001306:	d3b7      	bcc.n	8001278 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3720      	adds	r7, #32
 800130e:	46bd      	mov	sp, r7
 8001310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001314:	b002      	add	sp, #8
 8001316:	4770      	bx	lr

08001318 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001318:	b082      	sub	sp, #8
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af04      	add	r7, sp, #16
 8001320:	603a      	str	r2, [r7, #0]
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	4603      	mov	r3, r0
 8001326:	80fb      	strh	r3, [r7, #6]
 8001328:	460b      	mov	r3, r1
 800132a:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 800132c:	f7ff fd9c 	bl	8000e68 <ILI9341_Select>

    while(*str) {
 8001330:	e02e      	b.n	8001390 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	7d3a      	ldrb	r2, [r7, #20]
 8001336:	4413      	add	r3, r2
 8001338:	2bef      	cmp	r3, #239	@ 0xef
 800133a:	dd14      	ble.n	8001366 <ILI9341_WriteString+0x4e>
            x = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001340:	7d7b      	ldrb	r3, [r7, #21]
 8001342:	461a      	mov	r2, r3
 8001344:	88bb      	ldrh	r3, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 800134a:	88bb      	ldrh	r3, [r7, #4]
 800134c:	7d7a      	ldrb	r2, [r7, #21]
 800134e:	4413      	add	r3, r2
 8001350:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001354:	da21      	bge.n	800139a <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b20      	cmp	r3, #32
 800135c:	d103      	bne.n	8001366 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	603b      	str	r3, [r7, #0]
                continue;
 8001364:	e014      	b.n	8001390 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	88b9      	ldrh	r1, [r7, #4]
 800136c:	88f8      	ldrh	r0, [r7, #6]
 800136e:	8c3b      	ldrh	r3, [r7, #32]
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	8bbb      	ldrh	r3, [r7, #28]
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f7ff ff5a 	bl	8001234 <ILI9341_WriteChar>
        x += font.width;
 8001380:	7d3b      	ldrb	r3, [r7, #20]
 8001382:	461a      	mov	r2, r3
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	4413      	add	r3, r2
 8001388:	80fb      	strh	r3, [r7, #6]
        str++;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1cc      	bne.n	8001332 <ILI9341_WriteString+0x1a>
 8001398:	e000      	b.n	800139c <ILI9341_WriteString+0x84>
                break;
 800139a:	bf00      	nop
    }

    ILI9341_Unselect();
 800139c:	f7ff fd6e 	bl	8000e7c <ILI9341_Unselect>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013aa:	b002      	add	sp, #8
 80013ac:	4770      	bx	lr
	...

080013b0 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4604      	mov	r4, r0
 80013b8:	4608      	mov	r0, r1
 80013ba:	4611      	mov	r1, r2
 80013bc:	461a      	mov	r2, r3
 80013be:	4623      	mov	r3, r4
 80013c0:	80fb      	strh	r3, [r7, #6]
 80013c2:	4603      	mov	r3, r0
 80013c4:	80bb      	strh	r3, [r7, #4]
 80013c6:	460b      	mov	r3, r1
 80013c8:	807b      	strh	r3, [r7, #2]
 80013ca:	4613      	mov	r3, r2
 80013cc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	2bef      	cmp	r3, #239	@ 0xef
 80013d2:	d853      	bhi.n	800147c <ILI9341_FillRectangle+0xcc>
 80013d4:	88bb      	ldrh	r3, [r7, #4]
 80013d6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80013da:	d24f      	bcs.n	800147c <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80013dc:	88fa      	ldrh	r2, [r7, #6]
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	4413      	add	r3, r2
 80013e2:	2bf0      	cmp	r3, #240	@ 0xf0
 80013e4:	dd03      	ble.n	80013ee <ILI9341_FillRectangle+0x3e>
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80013ec:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 80013ee:	88ba      	ldrh	r2, [r7, #4]
 80013f0:	883b      	ldrh	r3, [r7, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80013f8:	dd03      	ble.n	8001402 <ILI9341_FillRectangle+0x52>
 80013fa:	88bb      	ldrh	r3, [r7, #4]
 80013fc:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001400:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8001402:	f7ff fd31 	bl	8000e68 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001406:	88fa      	ldrh	r2, [r7, #6]
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	4413      	add	r3, r2
 800140c:	b29b      	uxth	r3, r3
 800140e:	3b01      	subs	r3, #1
 8001410:	b29c      	uxth	r4, r3
 8001412:	88ba      	ldrh	r2, [r7, #4]
 8001414:	883b      	ldrh	r3, [r7, #0]
 8001416:	4413      	add	r3, r2
 8001418:	b29b      	uxth	r3, r3
 800141a:	3b01      	subs	r3, #1
 800141c:	b29b      	uxth	r3, r3
 800141e:	88b9      	ldrh	r1, [r7, #4]
 8001420:	88f8      	ldrh	r0, [r7, #6]
 8001422:	4622      	mov	r2, r4
 8001424:	f7ff fd90 	bl	8000f48 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001428:	8c3b      	ldrh	r3, [r7, #32]
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	b29b      	uxth	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	733b      	strb	r3, [r7, #12]
 8001432:	8c3b      	ldrh	r3, [r7, #32]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2102      	movs	r1, #2
 800143c:	4811      	ldr	r0, [pc, #68]	@ (8001484 <ILI9341_FillRectangle+0xd4>)
 800143e:	f001 fd0d 	bl	8002e5c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001442:	883b      	ldrh	r3, [r7, #0]
 8001444:	80bb      	strh	r3, [r7, #4]
 8001446:	e013      	b.n	8001470 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 8001448:	887b      	ldrh	r3, [r7, #2]
 800144a:	80fb      	strh	r3, [r7, #6]
 800144c:	e00a      	b.n	8001464 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800144e:	f107 010c 	add.w	r1, r7, #12
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	2202      	movs	r2, #2
 8001458:	480b      	ldr	r0, [pc, #44]	@ (8001488 <ILI9341_FillRectangle+0xd8>)
 800145a:	f003 fa7e 	bl	800495a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	3b01      	subs	r3, #1
 8001462:	80fb      	strh	r3, [r7, #6]
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f1      	bne.n	800144e <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 800146a:	88bb      	ldrh	r3, [r7, #4]
 800146c:	3b01      	subs	r3, #1
 800146e:	80bb      	strh	r3, [r7, #4]
 8001470:	88bb      	ldrh	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1e8      	bne.n	8001448 <ILI9341_FillRectangle+0x98>

        }
    }

    ILI9341_Unselect();
 8001476:	f7ff fd01 	bl	8000e7c <ILI9341_Unselect>
 800147a:	e000      	b.n	800147e <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800147c:	bf00      	nop
}
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}
 8001484:	48000400 	.word	0x48000400
 8001488:	200000cc 	.word	0x200000cc

0800148c <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800149e:	22f0      	movs	r2, #240	@ 0xf0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff ff84 	bl	80013b0 <ILI9341_FillRectangle>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014be:	f001 fccd 	bl	8002e5c <HAL_GPIO_WritePin>
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init() {
 80014c6:	b580      	push	{r7, lr}
 80014c8:	af00      	add	r7, sp, #0
	ILI9341_Unselect();
 80014ca:	f7ff fcd7 	bl	8000e7c <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 80014ce:	f7ff ffef 	bl	80014b0 <ILI9341_TouchUnselect>
	ILI9341_Init();
 80014d2:	f7ff fd81 	bl	8000fd8 <ILI9341_Init>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e2:	f000 ffa0 	bl	8002426 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e6:	f000 f839 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ea:	f000 f907 	bl	80016fc <MX_GPIO_Init>
  MX_SPI1_Init();
 80014ee:	f000 f87b 	bl	80015e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  init();
 80014f2:	f7ff ffe8 	bl	80014c6 <init>
  ILI9341_FillScreen(ILI9341_BLACK);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff ffc8 	bl	800148c <ILI9341_FillScreen>
  ILI9341_WriteString(35, 30, "PUSH BUTTON", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <main+0x6c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	9202      	str	r2, [sp, #8]
 8001502:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001506:	9201      	str	r2, [sp, #4]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	9200      	str	r2, [sp, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a0f      	ldr	r2, [pc, #60]	@ (800154c <main+0x70>)
 8001510:	211e      	movs	r1, #30
 8001512:	2023      	movs	r0, #35	@ 0x23
 8001514:	f7ff ff00 	bl	8001318 <ILI9341_WriteString>
  ILI9341_WriteString(45, 60, "TO START", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001518:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <main+0x6c>)
 800151a:	2200      	movs	r2, #0
 800151c:	9202      	str	r2, [sp, #8]
 800151e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001522:	9201      	str	r2, [sp, #4]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	9200      	str	r2, [sp, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a09      	ldr	r2, [pc, #36]	@ (8001550 <main+0x74>)
 800152c:	213c      	movs	r1, #60	@ 0x3c
 800152e:	202d      	movs	r0, #45	@ 0x2d
 8001530:	f7ff fef2 	bl	8001318 <ILI9341_WriteString>

  MX_USART1_UART_Init();
 8001534:	f000 f896 	bl	8001664 <MX_USART1_UART_Init>
  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8001538:	220e      	movs	r2, #14
 800153a:	4906      	ldr	r1, [pc, #24]	@ (8001554 <main+0x78>)
 800153c:	4806      	ldr	r0, [pc, #24]	@ (8001558 <main+0x7c>)
 800153e:	f003 fd75 	bl	800502c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001542:	bf00      	nop
 8001544:	e7fd      	b.n	8001542 <main+0x66>
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008
 800154c:	08008108 	.word	0x08008108
 8001550:	08008114 	.word	0x08008114
 8001554:	200001d0 	.word	0x200001d0
 8001558:	20000130 	.word	0x20000130

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b096      	sub	sp, #88	@ 0x58
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	2244      	movs	r2, #68	@ 0x44
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f005 fdf2 	bl	8007154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	463b      	mov	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800157e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001582:	f001 fca3 	bl	8002ecc <HAL_PWREx_ControlVoltageScaling>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800158c:	f000 fde0 	bl	8002150 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001590:	2310      	movs	r3, #16
 8001592:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001594:	2301      	movs	r3, #1
 8001596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 800159c:	2370      	movs	r3, #112	@ 0x70
 800159e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fd43 	bl	8003034 <HAL_RCC_OscConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80015b4:	f000 fdcc 	bl	8002150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b8:	230f      	movs	r3, #15
 80015ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 f949 	bl	8003868 <HAL_RCC_ClockConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80015dc:	f000 fdb8 	bl	8002150 <Error_Handler>
  }
}
 80015e0:	bf00      	nop
 80015e2:	3758      	adds	r7, #88	@ 0x58
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <MX_SPI1_Init+0x74>)
 80015ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001660 <MX_SPI1_Init+0x78>)
 80015f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <MX_SPI1_Init+0x74>)
 80015f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015fa:	4b18      	ldr	r3, [pc, #96]	@ (800165c <MX_SPI1_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001600:	4b16      	ldr	r3, [pc, #88]	@ (800165c <MX_SPI1_Init+0x74>)
 8001602:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001606:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001608:	4b14      	ldr	r3, [pc, #80]	@ (800165c <MX_SPI1_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800160e:	4b13      	ldr	r3, [pc, #76]	@ (800165c <MX_SPI1_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001614:	4b11      	ldr	r3, [pc, #68]	@ (800165c <MX_SPI1_Init+0x74>)
 8001616:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800161a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800161c:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <MX_SPI1_Init+0x74>)
 800161e:	2228      	movs	r2, #40	@ 0x28
 8001620:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001622:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <MX_SPI1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <MX_SPI1_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800162e:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <MX_SPI1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001634:	4b09      	ldr	r3, [pc, #36]	@ (800165c <MX_SPI1_Init+0x74>)
 8001636:	2207      	movs	r2, #7
 8001638:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800163a:	4b08      	ldr	r3, [pc, #32]	@ (800165c <MX_SPI1_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <MX_SPI1_Init+0x74>)
 8001642:	2208      	movs	r2, #8
 8001644:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001646:	4805      	ldr	r0, [pc, #20]	@ (800165c <MX_SPI1_Init+0x74>)
 8001648:	f003 f8e4 	bl	8004814 <HAL_SPI_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001652:	f000 fd7d 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200000cc 	.word	0x200000cc
 8001660:	40013000 	.word	0x40013000

08001664 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001668:	4b22      	ldr	r3, [pc, #136]	@ (80016f4 <MX_USART1_UART_Init+0x90>)
 800166a:	4a23      	ldr	r2, [pc, #140]	@ (80016f8 <MX_USART1_UART_Init+0x94>)
 800166c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800166e:	4b21      	ldr	r3, [pc, #132]	@ (80016f4 <MX_USART1_UART_Init+0x90>)
 8001670:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001674:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001676:	4b1f      	ldr	r3, [pc, #124]	@ (80016f4 <MX_USART1_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800167c:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <MX_USART1_UART_Init+0x90>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001682:	4b1c      	ldr	r3, [pc, #112]	@ (80016f4 <MX_USART1_UART_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001688:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <MX_USART1_UART_Init+0x90>)
 800168a:	220c      	movs	r2, #12
 800168c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168e:	4b19      	ldr	r3, [pc, #100]	@ (80016f4 <MX_USART1_UART_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001694:	4b17      	ldr	r3, [pc, #92]	@ (80016f4 <MX_USART1_UART_Init+0x90>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800169a:	4b16      	ldr	r3, [pc, #88]	@ (80016f4 <MX_USART1_UART_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016a0:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <MX_USART1_UART_Init+0x90>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a6:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <MX_USART1_UART_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ac:	4811      	ldr	r0, [pc, #68]	@ (80016f4 <MX_USART1_UART_Init+0x90>)
 80016ae:	f003 fc2d 	bl	8004f0c <HAL_UART_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016b8:	f000 fd4a 	bl	8002150 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016bc:	2100      	movs	r1, #0
 80016be:	480d      	ldr	r0, [pc, #52]	@ (80016f4 <MX_USART1_UART_Init+0x90>)
 80016c0:	f005 fc39 	bl	8006f36 <HAL_UARTEx_SetTxFifoThreshold>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016ca:	f000 fd41 	bl	8002150 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ce:	2100      	movs	r1, #0
 80016d0:	4808      	ldr	r0, [pc, #32]	@ (80016f4 <MX_USART1_UART_Init+0x90>)
 80016d2:	f005 fc6e 	bl	8006fb2 <HAL_UARTEx_SetRxFifoThreshold>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016dc:	f000 fd38 	bl	8002150 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016e0:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <MX_USART1_UART_Init+0x90>)
 80016e2:	f005 fbef 	bl	8006ec4 <HAL_UARTEx_DisableFifoMode>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016ec:	f000 fd30 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000130 	.word	0x20000130
 80016f8:	40013800 	.word	0x40013800

080016fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08e      	sub	sp, #56	@ 0x38
 8001700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001712:	4bb2      	ldr	r3, [pc, #712]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001716:	4ab1      	ldr	r2, [pc, #708]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 8001718:	f043 0310 	orr.w	r3, r3, #16
 800171c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171e:	4baf      	ldr	r3, [pc, #700]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	623b      	str	r3, [r7, #32]
 8001728:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	4bac      	ldr	r3, [pc, #688]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172e:	4aab      	ldr	r2, [pc, #684]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001736:	4ba9      	ldr	r3, [pc, #676]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	61fb      	str	r3, [r7, #28]
 8001740:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001742:	4ba6      	ldr	r3, [pc, #664]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	4aa5      	ldr	r2, [pc, #660]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 8001748:	f043 0320 	orr.w	r3, r3, #32
 800174c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174e:	4ba3      	ldr	r3, [pc, #652]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	f003 0320 	and.w	r3, r3, #32
 8001756:	61bb      	str	r3, [r7, #24]
 8001758:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800175a:	4ba0      	ldr	r3, [pc, #640]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	4a9f      	ldr	r2, [pc, #636]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 8001760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001766:	4b9d      	ldr	r3, [pc, #628]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b9a      	ldr	r3, [pc, #616]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	4a99      	ldr	r2, [pc, #612]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800177e:	4b97      	ldr	r3, [pc, #604]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	4b94      	ldr	r3, [pc, #592]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	4a93      	ldr	r2, [pc, #588]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001796:	4b91      	ldr	r3, [pc, #580]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a2:	4b8e      	ldr	r3, [pc, #568]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a6:	4a8d      	ldr	r2, [pc, #564]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 80017a8:	f043 0308 	orr.w	r3, r3, #8
 80017ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ae:	4b8b      	ldr	r3, [pc, #556]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017ba:	4b88      	ldr	r3, [pc, #544]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017be:	4a87      	ldr	r2, [pc, #540]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 80017c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c6:	4b85      	ldr	r3, [pc, #532]	@ (80019dc <MX_GPIO_Init+0x2e0>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80017d2:	f001 fc1f 	bl	8003014 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2110      	movs	r1, #16
 80017da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017de:	f001 fb3d 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2103      	movs	r1, #3
 80017e6:	487e      	ldr	r0, [pc, #504]	@ (80019e0 <MX_GPIO_Init+0x2e4>)
 80017e8:	f001 fb38 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017ec:	230c      	movs	r3, #12
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80017fc:	230d      	movs	r3, #13
 80017fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001800:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001804:	4619      	mov	r1, r3
 8001806:	4877      	ldr	r0, [pc, #476]	@ (80019e4 <MX_GPIO_Init+0x2e8>)
 8001808:	f001 f8a4 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800180c:	2307      	movs	r3, #7
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001810:	2312      	movs	r3, #18
 8001812:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800181c:	2304      	movs	r3, #4
 800181e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001820:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001824:	4619      	mov	r1, r3
 8001826:	4870      	ldr	r0, [pc, #448]	@ (80019e8 <MX_GPIO_Init+0x2ec>)
 8001828:	f001 f894 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800182c:	2380      	movs	r3, #128	@ 0x80
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800183c:	230d      	movs	r3, #13
 800183e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001844:	4619      	mov	r1, r3
 8001846:	4868      	ldr	r0, [pc, #416]	@ (80019e8 <MX_GPIO_Init+0x2ec>)
 8001848:	f001 f884 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800184c:	233f      	movs	r3, #63	@ 0x3f
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001850:	230b      	movs	r3, #11
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800185c:	4619      	mov	r1, r3
 800185e:	4863      	ldr	r0, [pc, #396]	@ (80019ec <MX_GPIO_Init+0x2f0>)
 8001860:	f001 f878 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001864:	2301      	movs	r3, #1
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001874:	2301      	movs	r3, #1
 8001876:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800187c:	4619      	mov	r1, r3
 800187e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001882:	f001 f867 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001886:	230a      	movs	r3, #10
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800188a:	230b      	movs	r3, #11
 800188c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800189c:	f001 f85a 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018a0:	2310      	movs	r3, #16
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b4:	4619      	mov	r1, r3
 80018b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ba:	f001 f84b 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018be:	2303      	movs	r3, #3
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d2:	4619      	mov	r1, r3
 80018d4:	4842      	ldr	r0, [pc, #264]	@ (80019e0 <MX_GPIO_Init+0x2e4>)
 80018d6:	f001 f83d 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80018da:	2344      	movs	r3, #68	@ 0x44
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018de:	2303      	movs	r3, #3
 80018e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ea:	4619      	mov	r1, r3
 80018ec:	483c      	ldr	r0, [pc, #240]	@ (80019e0 <MX_GPIO_Init+0x2e4>)
 80018ee:	f001 f831 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80018f2:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001904:	2301      	movs	r3, #1
 8001906:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800190c:	4619      	mov	r1, r3
 800190e:	4835      	ldr	r0, [pc, #212]	@ (80019e4 <MX_GPIO_Init+0x2e8>)
 8001910:	f001 f820 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001914:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001926:	2303      	movs	r3, #3
 8001928:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800192a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800192e:	4619      	mov	r1, r3
 8001930:	482c      	ldr	r0, [pc, #176]	@ (80019e4 <MX_GPIO_Init+0x2e8>)
 8001932:	f001 f80f 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001936:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001948:	2301      	movs	r3, #1
 800194a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001950:	4619      	mov	r1, r3
 8001952:	4823      	ldr	r0, [pc, #140]	@ (80019e0 <MX_GPIO_Init+0x2e4>)
 8001954:	f000 fffe 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001958:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800196a:	230d      	movs	r3, #13
 800196c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001972:	4619      	mov	r1, r3
 8001974:	481a      	ldr	r0, [pc, #104]	@ (80019e0 <MX_GPIO_Init+0x2e4>)
 8001976:	f000 ffed 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800197a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800198c:	230e      	movs	r3, #14
 800198e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001994:	4619      	mov	r1, r3
 8001996:	4812      	ldr	r0, [pc, #72]	@ (80019e0 <MX_GPIO_Init+0x2e4>)
 8001998:	f000 ffdc 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800199c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019ae:	2307      	movs	r3, #7
 80019b0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019b6:	4619      	mov	r1, r3
 80019b8:	480d      	ldr	r0, [pc, #52]	@ (80019f0 <MX_GPIO_Init+0x2f4>)
 80019ba:	f000 ffcb 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019be:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019d0:	2302      	movs	r3, #2
 80019d2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d8:	4619      	mov	r1, r3
 80019da:	e00b      	b.n	80019f4 <MX_GPIO_Init+0x2f8>
 80019dc:	40021000 	.word	0x40021000
 80019e0:	48000400 	.word	0x48000400
 80019e4:	48001000 	.word	0x48001000
 80019e8:	48001400 	.word	0x48001400
 80019ec:	48000800 	.word	0x48000800
 80019f0:	48000c00 	.word	0x48000c00
 80019f4:	4864      	ldr	r0, [pc, #400]	@ (8001b88 <MX_GPIO_Init+0x48c>)
 80019f6:	f000 ffad 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80019fa:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a14:	4619      	mov	r1, r3
 8001a16:	485d      	ldr	r0, [pc, #372]	@ (8001b8c <MX_GPIO_Init+0x490>)
 8001a18:	f000 ff9c 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a1c:	2340      	movs	r3, #64	@ 0x40
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001a2c:	230d      	movs	r3, #13
 8001a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a34:	4619      	mov	r1, r3
 8001a36:	4856      	ldr	r0, [pc, #344]	@ (8001b90 <MX_GPIO_Init+0x494>)
 8001a38:	f000 ff8c 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a3c:	2380      	movs	r3, #128	@ 0x80
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a54:	4619      	mov	r1, r3
 8001a56:	484e      	ldr	r0, [pc, #312]	@ (8001b90 <MX_GPIO_Init+0x494>)
 8001a58:	f000 ff7c 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a5c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a6e:	230c      	movs	r3, #12
 8001a70:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a76:	4619      	mov	r1, r3
 8001a78:	4845      	ldr	r0, [pc, #276]	@ (8001b90 <MX_GPIO_Init+0x494>)
 8001a7a:	f000 ff6b 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001a7e:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a90:	230a      	movs	r3, #10
 8001a92:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a9e:	f000 ff59 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001aa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aba:	f000 ff4b 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ace:	2309      	movs	r3, #9
 8001ad0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	482b      	ldr	r0, [pc, #172]	@ (8001b88 <MX_GPIO_Init+0x48c>)
 8001ada:	f000 ff3b 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ade:	2304      	movs	r3, #4
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001aee:	230c      	movs	r3, #12
 8001af0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af6:	4619      	mov	r1, r3
 8001af8:	4823      	ldr	r0, [pc, #140]	@ (8001b88 <MX_GPIO_Init+0x48c>)
 8001afa:	f000 ff2b 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001afe:	2378      	movs	r3, #120	@ 0x78
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b0e:	2307      	movs	r3, #7
 8001b10:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b16:	4619      	mov	r1, r3
 8001b18:	481b      	ldr	r0, [pc, #108]	@ (8001b88 <MX_GPIO_Init+0x48c>)
 8001b1a:	f000 ff1b 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001b1e:	2338      	movs	r3, #56	@ 0x38
 8001b20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b2e:	2306      	movs	r3, #6
 8001b30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b36:	4619      	mov	r1, r3
 8001b38:	4816      	ldr	r0, [pc, #88]	@ (8001b94 <MX_GPIO_Init+0x498>)
 8001b3a:	f000 ff0b 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b44:	2312      	movs	r3, #18
 8001b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b50:	2304      	movs	r3, #4
 8001b52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480e      	ldr	r0, [pc, #56]	@ (8001b94 <MX_GPIO_Init+0x498>)
 8001b5c:	f000 fefa 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b60:	2301      	movs	r3, #1
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b70:	2302      	movs	r3, #2
 8001b72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4807      	ldr	r0, [pc, #28]	@ (8001b98 <MX_GPIO_Init+0x49c>)
 8001b7c:	f000 feea 	bl	8002954 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b80:	bf00      	nop
 8001b82:	3738      	adds	r7, #56	@ 0x38
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	48000c00 	.word	0x48000c00
 8001b8c:	48001800 	.word	0x48001800
 8001b90:	48000800 	.word	0x48000800
 8001b94:	48000400 	.word	0x48000400
 8001b98:	48001000 	.word	0x48001000

08001b9c <reverse>:

/* USER CODE BEGIN 4 */

void reverse(char* str, int len)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001bb0:	e018      	b.n	8001be4 <reverse+0x48>
        temp = str[i];
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	441a      	add	r2, r3
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	440b      	add	r3, r1
 8001bc8:	7812      	ldrb	r2, [r2, #0]
 8001bca:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	701a      	strb	r2, [r3, #0]
        i++;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]
        j--;
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dbe2      	blt.n	8001bb2 <reverse+0x16>
    }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	371c      	adds	r7, #28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <intToStr>:

int intToStr(int x, char str[], int d)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
    while (x) {
 8001c0c:	e01d      	b.n	8001c4a <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	4b1d      	ldr	r3, [pc, #116]	@ (8001c88 <intToStr+0x8c>)
 8001c12:	fb83 1302 	smull	r1, r3, r3, r2
 8001c16:	1099      	asrs	r1, r3, #2
 8001c18:	17d3      	asrs	r3, r2, #31
 8001c1a:	1ac9      	subs	r1, r1, r3
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	1ad1      	subs	r1, r2, r3
 8001c26:	b2ca      	uxtb	r2, r1
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	1c59      	adds	r1, r3, #1
 8001c2c:	6179      	str	r1, [r7, #20]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	440b      	add	r3, r1
 8001c34:	3230      	adds	r2, #48	@ 0x30
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4a12      	ldr	r2, [pc, #72]	@ (8001c88 <intToStr+0x8c>)
 8001c3e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c42:	1092      	asrs	r2, r2, #2
 8001c44:	17db      	asrs	r3, r3, #31
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	60fb      	str	r3, [r7, #12]
    while (x) {
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1de      	bne.n	8001c0e <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8001c50:	e007      	b.n	8001c62 <intToStr+0x66>
        str[i++] = '0';
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	617a      	str	r2, [r7, #20]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	2230      	movs	r2, #48	@ 0x30
 8001c60:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	dbf3      	blt.n	8001c52 <intToStr+0x56>

    reverse(str, i);
 8001c6a:	6979      	ldr	r1, [r7, #20]
 8001c6c:	68b8      	ldr	r0, [r7, #8]
 8001c6e:	f7ff ff95 	bl	8001b9c <reverse>
    str[i] = '\0';
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	4413      	add	r3, r2
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
    return i;
 8001c7c:	697b      	ldr	r3, [r7, #20]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	66666667 	.word	0x66666667
 8001c8c:	00000000 	.word	0x00000000

08001c90 <ftoa>:

void ftoa(float n, char* res, int afterpoint)
{
 8001c90:	b5b0      	push	{r4, r5, r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c9a:	60b8      	str	r0, [r7, #8]
 8001c9c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8001c9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ca2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ca6:	ee17 3a90 	vmov	r3, s15
 8001caa:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	ee07 3a90 	vmov	s15, r3
 8001cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cbe:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	69f8      	ldr	r0, [r7, #28]
 8001cc8:	f7ff ff98 	bl	8001bfc <intToStr>
 8001ccc:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d030      	beq.n	8001d36 <ftoa+0xa6>
        res[i] = '.'; // add dot
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	4413      	add	r3, r2
 8001cda:	222e      	movs	r2, #46	@ 0x2e
 8001cdc:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8001cde:	69b8      	ldr	r0, [r7, #24]
 8001ce0:	f7fe fbf2 	bl	80004c8 <__aeabi_f2d>
 8001ce4:	4604      	mov	r4, r0
 8001ce6:	460d      	mov	r5, r1
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7fe fbdb 	bl	80004a4 <__aeabi_i2d>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	ec43 2b11 	vmov	d1, r2, r3
 8001cf6:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8001d40 <ftoa+0xb0>
 8001cfa:	f005 fa5d 	bl	80071b8 <pow>
 8001cfe:	ec53 2b10 	vmov	r2, r3, d0
 8001d02:	4620      	mov	r0, r4
 8001d04:	4629      	mov	r1, r5
 8001d06:	f7fe fc37 	bl	8000578 <__aeabi_dmul>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	f7fe fee1 	bl	8000ad8 <__aeabi_d2f>
 8001d16:	4603      	mov	r3, r0
 8001d18:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8001d1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	3301      	adds	r3, #1
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	4413      	add	r3, r2
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	ee17 0a90 	vmov	r0, s15
 8001d32:	f7ff ff63 	bl	8001bfc <intToStr>
    }
}
 8001d36:	bf00      	nop
 8001d38:	3720      	adds	r7, #32
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	00000000 	.word	0x00000000
 8001d44:	40240000 	.word	0x40240000

08001d48 <HAL_UART_RxCpltCallback>:
	  float f;
	  uint8_t buf[4];
 };

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b098      	sub	sp, #96	@ 0x60
 8001d4c:	af04      	add	r7, sp, #16
 8001d4e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) // Make sure the callback is for the correct UART
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4aac      	ldr	r2, [pc, #688]	@ (8002008 <HAL_UART_RxCpltCallback+0x2c0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	f040 81eb 	bne.w	8002132 <HAL_UART_RxCpltCallback+0x3ea>
    {
    	uint8_t first_key_idx = 7;
 8001d5c:	2307      	movs	r3, #7
 8001d5e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    	for (uint8_t i = 0; i < 7; ++i) {
 8001d62:	2300      	movs	r3, #0
 8001d64:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8001d68:	e017      	b.n	8001d9a <HAL_UART_RxCpltCallback+0x52>
    		if (rx_buffer[i] == 0xFF && rx_buffer[i+1] == 0xFF) {
 8001d6a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001d6e:	4aa7      	ldr	r2, [pc, #668]	@ (800200c <HAL_UART_RxCpltCallback+0x2c4>)
 8001d70:	5cd3      	ldrb	r3, [r2, r3]
 8001d72:	2bff      	cmp	r3, #255	@ 0xff
 8001d74:	d10c      	bne.n	8001d90 <HAL_UART_RxCpltCallback+0x48>
 8001d76:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	4aa3      	ldr	r2, [pc, #652]	@ (800200c <HAL_UART_RxCpltCallback+0x2c4>)
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	2bff      	cmp	r3, #255	@ 0xff
 8001d82:	d105      	bne.n	8001d90 <HAL_UART_RxCpltCallback+0x48>
    			first_key_idx = i+2;
 8001d84:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001d88:	3302      	adds	r3, #2
 8001d8a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    			break;
 8001d8e:	e008      	b.n	8001da2 <HAL_UART_RxCpltCallback+0x5a>
    	for (uint8_t i = 0; i < 7; ++i) {
 8001d90:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001d94:	3301      	adds	r3, #1
 8001d96:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8001d9a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d9e3      	bls.n	8001d6a <HAL_UART_RxCpltCallback+0x22>
    		}
    	}

    	if (first_key_idx == 7) {
 8001da2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001da6:	2b07      	cmp	r3, #7
 8001da8:	d10b      	bne.n	8001dc2 <HAL_UART_RxCpltCallback+0x7a>
    		// Process data: Use the variables as needed
			HAL_UART_DeInit(huart);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f003 f8fe 	bl	8004fac <HAL_UART_DeInit>

			// Re-Initialize the UART peripheral
			HAL_UART_Init(huart);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f003 f8ab 	bl	8004f0c <HAL_UART_Init>

    		HAL_UART_Receive_IT(huart, rx_buffer, sizeof(rx_buffer));
 8001db6:	220e      	movs	r2, #14
 8001db8:	4994      	ldr	r1, [pc, #592]	@ (800200c <HAL_UART_RxCpltCallback+0x2c4>)
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f003 f936 	bl	800502c <HAL_UART_Receive_IT>
    		return;
 8001dc0:	e1b7      	b.n	8002132 <HAL_UART_RxCpltCallback+0x3ea>
    	}


        uint8_t start = rx_buffer[first_key_idx];
 8001dc2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001dc6:	4a91      	ldr	r2, [pc, #580]	@ (800200c <HAL_UART_RxCpltCallback+0x2c4>)
 8001dc8:	5cd3      	ldrb	r3, [r2, r3]
 8001dca:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

        if(!previous && start) {
 8001dce:	4b90      	ldr	r3, [pc, #576]	@ (8002010 <HAL_UART_RxCpltCallback+0x2c8>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d147      	bne.n	8001e66 <HAL_UART_RxCpltCallback+0x11e>
 8001dd6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d043      	beq.n	8001e66 <HAL_UART_RxCpltCallback+0x11e>
          	ILI9341_WriteString(35, 30, "PUSH BUTTON", Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
 8001dde:	4b8d      	ldr	r3, [pc, #564]	@ (8002014 <HAL_UART_RxCpltCallback+0x2cc>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	9202      	str	r2, [sp, #8]
 8001de4:	2200      	movs	r2, #0
 8001de6:	9201      	str	r2, [sp, #4]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	9200      	str	r2, [sp, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a8a      	ldr	r2, [pc, #552]	@ (8002018 <HAL_UART_RxCpltCallback+0x2d0>)
 8001df0:	211e      	movs	r1, #30
 8001df2:	2023      	movs	r0, #35	@ 0x23
 8001df4:	f7ff fa90 	bl	8001318 <ILI9341_WriteString>
		        ILI9341_WriteString(45, 60, "TO START", Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
 8001df8:	4b86      	ldr	r3, [pc, #536]	@ (8002014 <HAL_UART_RxCpltCallback+0x2cc>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	9202      	str	r2, [sp, #8]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	9201      	str	r2, [sp, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	9200      	str	r2, [sp, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a84      	ldr	r2, [pc, #528]	@ (800201c <HAL_UART_RxCpltCallback+0x2d4>)
 8001e0a:	213c      	movs	r1, #60	@ 0x3c
 8001e0c:	202d      	movs	r0, #45	@ 0x2d
 8001e0e:	f7ff fa83 	bl	8001318 <ILI9341_WriteString>
		        ILI9341_WriteString(10, 0, "String Detected:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001e12:	4b83      	ldr	r3, [pc, #524]	@ (8002020 <HAL_UART_RxCpltCallback+0x2d8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	9202      	str	r2, [sp, #8]
 8001e18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e1c:	9201      	str	r2, [sp, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	9200      	str	r2, [sp, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a7f      	ldr	r2, [pc, #508]	@ (8002024 <HAL_UART_RxCpltCallback+0x2dc>)
 8001e26:	2100      	movs	r1, #0
 8001e28:	200a      	movs	r0, #10
 8001e2a:	f7ff fa75 	bl	8001318 <ILI9341_WriteString>
		        //ILI9341_WriteString(100, 30, detected_string, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
		        ILI9341_WriteString(10, 60, "Actual Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001e2e:	4b7c      	ldr	r3, [pc, #496]	@ (8002020 <HAL_UART_RxCpltCallback+0x2d8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	9202      	str	r2, [sp, #8]
 8001e34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e38:	9201      	str	r2, [sp, #4]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	9200      	str	r2, [sp, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a79      	ldr	r2, [pc, #484]	@ (8002028 <HAL_UART_RxCpltCallback+0x2e0>)
 8001e42:	213c      	movs	r1, #60	@ 0x3c
 8001e44:	200a      	movs	r0, #10
 8001e46:	f7ff fa67 	bl	8001318 <ILI9341_WriteString>
		        //ILI9341_WriteString(100, 90, charFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
		        ILI9341_WriteString(10, 120, "Desired Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001e4a:	4b75      	ldr	r3, [pc, #468]	@ (8002020 <HAL_UART_RxCpltCallback+0x2d8>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	9202      	str	r2, [sp, #8]
 8001e50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e54:	9201      	str	r2, [sp, #4]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	9200      	str	r2, [sp, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a73      	ldr	r2, [pc, #460]	@ (800202c <HAL_UART_RxCpltCallback+0x2e4>)
 8001e5e:	2178      	movs	r1, #120	@ 0x78
 8001e60:	200a      	movs	r0, #10
 8001e62:	f7ff fa59 	bl	8001318 <ILI9341_WriteString>
		        //ILI9341_WriteString(100, 150, desiredFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
        }

        if(previous && !start) {
 8001e66:	4b6a      	ldr	r3, [pc, #424]	@ (8002010 <HAL_UART_RxCpltCallback+0x2c8>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d051      	beq.n	8001f12 <HAL_UART_RxCpltCallback+0x1ca>
 8001e6e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d14d      	bne.n	8001f12 <HAL_UART_RxCpltCallback+0x1ca>
        		ILI9341_WriteString(10, 0, "String Detected:", Font_11x18, ILI9341_BLACK, ILI9341_BLACK);
 8001e76:	4b6a      	ldr	r3, [pc, #424]	@ (8002020 <HAL_UART_RxCpltCallback+0x2d8>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	9202      	str	r2, [sp, #8]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	9201      	str	r2, [sp, #4]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	9200      	str	r2, [sp, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a67      	ldr	r2, [pc, #412]	@ (8002024 <HAL_UART_RxCpltCallback+0x2dc>)
 8001e88:	2100      	movs	r1, #0
 8001e8a:	200a      	movs	r0, #10
 8001e8c:	f7ff fa44 	bl	8001318 <ILI9341_WriteString>
		        ILI9341_WriteString(100, 30, "        ", Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
 8001e90:	4b60      	ldr	r3, [pc, #384]	@ (8002014 <HAL_UART_RxCpltCallback+0x2cc>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	9202      	str	r2, [sp, #8]
 8001e96:	2200      	movs	r2, #0
 8001e98:	9201      	str	r2, [sp, #4]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	9200      	str	r2, [sp, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a63      	ldr	r2, [pc, #396]	@ (8002030 <HAL_UART_RxCpltCallback+0x2e8>)
 8001ea2:	211e      	movs	r1, #30
 8001ea4:	2064      	movs	r0, #100	@ 0x64
 8001ea6:	f7ff fa37 	bl	8001318 <ILI9341_WriteString>
		        ILI9341_WriteString(10, 60, "Actual Frequency:", Font_11x18, ILI9341_BLACK, ILI9341_BLACK);
 8001eaa:	4b5d      	ldr	r3, [pc, #372]	@ (8002020 <HAL_UART_RxCpltCallback+0x2d8>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	9202      	str	r2, [sp, #8]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	9201      	str	r2, [sp, #4]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	9200      	str	r2, [sp, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a5b      	ldr	r2, [pc, #364]	@ (8002028 <HAL_UART_RxCpltCallback+0x2e0>)
 8001ebc:	213c      	movs	r1, #60	@ 0x3c
 8001ebe:	200a      	movs	r0, #10
 8001ec0:	f7ff fa2a 	bl	8001318 <ILI9341_WriteString>
		        ILI9341_WriteString(100, 90, "        ", Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
 8001ec4:	4b53      	ldr	r3, [pc, #332]	@ (8002014 <HAL_UART_RxCpltCallback+0x2cc>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	9202      	str	r2, [sp, #8]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	9201      	str	r2, [sp, #4]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	9200      	str	r2, [sp, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a56      	ldr	r2, [pc, #344]	@ (8002030 <HAL_UART_RxCpltCallback+0x2e8>)
 8001ed6:	215a      	movs	r1, #90	@ 0x5a
 8001ed8:	2064      	movs	r0, #100	@ 0x64
 8001eda:	f7ff fa1d 	bl	8001318 <ILI9341_WriteString>
		        ILI9341_WriteString(10, 120, "Desired Frequency:", Font_11x18, ILI9341_BLACK, ILI9341_BLACK);
 8001ede:	4b50      	ldr	r3, [pc, #320]	@ (8002020 <HAL_UART_RxCpltCallback+0x2d8>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	9202      	str	r2, [sp, #8]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	9201      	str	r2, [sp, #4]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	9200      	str	r2, [sp, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a4f      	ldr	r2, [pc, #316]	@ (800202c <HAL_UART_RxCpltCallback+0x2e4>)
 8001ef0:	2178      	movs	r1, #120	@ 0x78
 8001ef2:	200a      	movs	r0, #10
 8001ef4:	f7ff fa10 	bl	8001318 <ILI9341_WriteString>
		        ILI9341_WriteString(100, 150, "        ", Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
 8001ef8:	4b46      	ldr	r3, [pc, #280]	@ (8002014 <HAL_UART_RxCpltCallback+0x2cc>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	9202      	str	r2, [sp, #8]
 8001efe:	2200      	movs	r2, #0
 8001f00:	9201      	str	r2, [sp, #4]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	9200      	str	r2, [sp, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a49      	ldr	r2, [pc, #292]	@ (8002030 <HAL_UART_RxCpltCallback+0x2e8>)
 8001f0a:	2196      	movs	r1, #150	@ 0x96
 8001f0c:	2064      	movs	r0, #100	@ 0x64
 8001f0e:	f7ff fa03 	bl	8001318 <ILI9341_WriteString>
        }

        if (!start) {
 8001f12:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d11b      	bne.n	8001f52 <HAL_UART_RxCpltCallback+0x20a>
        	ILI9341_WriteString(35, 30, "PUSH BUTTON", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8002014 <HAL_UART_RxCpltCallback+0x2cc>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	9202      	str	r2, [sp, #8]
 8001f20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f24:	9201      	str	r2, [sp, #4]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	9200      	str	r2, [sp, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a3a      	ldr	r2, [pc, #232]	@ (8002018 <HAL_UART_RxCpltCallback+0x2d0>)
 8001f2e:	211e      	movs	r1, #30
 8001f30:	2023      	movs	r0, #35	@ 0x23
 8001f32:	f7ff f9f1 	bl	8001318 <ILI9341_WriteString>
        	ILI9341_WriteString(45, 60, "TO START", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001f36:	4b37      	ldr	r3, [pc, #220]	@ (8002014 <HAL_UART_RxCpltCallback+0x2cc>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	9202      	str	r2, [sp, #8]
 8001f3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f40:	9201      	str	r2, [sp, #4]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	9200      	str	r2, [sp, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a34      	ldr	r2, [pc, #208]	@ (800201c <HAL_UART_RxCpltCallback+0x2d4>)
 8001f4a:	213c      	movs	r1, #60	@ 0x3c
 8001f4c:	202d      	movs	r0, #45	@ 0x2d
 8001f4e:	f7ff f9e3 	bl	8001318 <ILI9341_WriteString>
        }

        previous = start;
 8001f52:	4a2f      	ldr	r2, [pc, #188]	@ (8002010 <HAL_UART_RxCpltCallback+0x2c8>)
 8001f54:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001f58:	7013      	strb	r3, [r2, #0]

        if(start) {
 8001f5a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80dc 	beq.w	800211c <HAL_UART_RxCpltCallback+0x3d4>
          union Float_as_buffer detected_freq_FAB;

          detected_freq_FAB.buf[0]   = rx_buffer[first_key_idx+1];
 8001f64:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001f68:	3301      	adds	r3, #1
 8001f6a:	4a28      	ldr	r2, [pc, #160]	@ (800200c <HAL_UART_RxCpltCallback+0x2c4>)
 8001f6c:	5cd3      	ldrb	r3, [r2, r3]
 8001f6e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
          detected_freq_FAB.buf[1] = rx_buffer[first_key_idx+2];
 8001f72:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001f76:	3302      	adds	r3, #2
 8001f78:	4a24      	ldr	r2, [pc, #144]	@ (800200c <HAL_UART_RxCpltCallback+0x2c4>)
 8001f7a:	5cd3      	ldrb	r3, [r2, r3]
 8001f7c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
          detected_freq_FAB.buf[2] = rx_buffer[first_key_idx+3];
 8001f80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001f84:	3303      	adds	r3, #3
 8001f86:	4a21      	ldr	r2, [pc, #132]	@ (800200c <HAL_UART_RxCpltCallback+0x2c4>)
 8001f88:	5cd3      	ldrb	r3, [r2, r3]
 8001f8a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
          detected_freq_FAB.buf[3] = rx_buffer[first_key_idx+4];
 8001f8e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001f92:	3304      	adds	r3, #4
 8001f94:	4a1d      	ldr	r2, [pc, #116]	@ (800200c <HAL_UART_RxCpltCallback+0x2c4>)
 8001f96:	5cd3      	ldrb	r3, [r2, r3]
 8001f98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

          // CALCULATE //
          float test = detected_freq_FAB.f;
 8001f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f9e:	637b      	str	r3, [r7, #52]	@ 0x34

          char char_detected_freq[7];
          char desiredFreq[7];
          ftoa(detected_freq_FAB.f, char_detected_freq, 2);
 8001fa0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001fa4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fa8:	2102      	movs	r1, #2
 8001faa:	4618      	mov	r0, r3
 8001fac:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb0:	f7ff fe6e 	bl	8001c90 <ftoa>

          //Match frequency to string

          //find smallest magnitude of distance
          float32_t min_freqs[6];
            for(int i = 0; i < 6; ++i){
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001fb8:	e013      	b.n	8001fe2 <HAL_UART_RxCpltCallback+0x29a>
            min_freqs[i] = string_freqs[i] - detected_freq_FAB.f;
 8001fba:	4a1e      	ldr	r2, [pc, #120]	@ (8002034 <HAL_UART_RxCpltCallback+0x2ec>)
 8001fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	ed93 7a00 	vldr	s14, [r3]
 8001fc6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	3350      	adds	r3, #80	@ 0x50
 8001fd4:	443b      	add	r3, r7
 8001fd6:	3b48      	subs	r3, #72	@ 0x48
 8001fd8:	edc3 7a00 	vstr	s15, [r3]
            for(int i = 0; i < 6; ++i){
 8001fdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fde:	3301      	adds	r3, #1
 8001fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fe4:	2b05      	cmp	r3, #5
 8001fe6:	dde8      	ble.n	8001fba <HAL_UART_RxCpltCallback+0x272>
          }

          arm_abs_f32(min_freqs, min_freqs, 6);
 8001fe8:	f107 0108 	add.w	r1, r7, #8
 8001fec:	f107 0308 	add.w	r3, r7, #8
 8001ff0:	2206      	movs	r2, #6
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f005 f86a 	bl	80070cc <arm_abs_f32>

          //find the argmin
          float32_t current_min = min_freqs[0];
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	647b      	str	r3, [r7, #68]	@ 0x44
          uint8_t index = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
          for(int i = 0; i < 6; ++i){
 8002002:	2300      	movs	r3, #0
 8002004:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002006:	e032      	b.n	800206e <HAL_UART_RxCpltCallback+0x326>
 8002008:	40013800 	.word	0x40013800
 800200c:	200001d0 	.word	0x200001d0
 8002010:	200001cc 	.word	0x200001cc
 8002014:	20000008 	.word	0x20000008
 8002018:	08008108 	.word	0x08008108
 800201c:	08008114 	.word	0x08008114
 8002020:	20000000 	.word	0x20000000
 8002024:	08008120 	.word	0x08008120
 8002028:	08008134 	.word	0x08008134
 800202c:	08008148 	.word	0x08008148
 8002030:	0800815c 	.word	0x0800815c
 8002034:	20000010 	.word	0x20000010
            if (min_freqs[i] < current_min){
 8002038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	3350      	adds	r3, #80	@ 0x50
 800203e:	443b      	add	r3, r7
 8002040:	3b48      	subs	r3, #72	@ 0x48
 8002042:	edd3 7a00 	vldr	s15, [r3]
 8002046:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800204a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002052:	dd09      	ble.n	8002068 <HAL_UART_RxCpltCallback+0x320>
              current_min = min_freqs[i];
 8002054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	3350      	adds	r3, #80	@ 0x50
 800205a:	443b      	add	r3, r7
 800205c:	3b48      	subs	r3, #72	@ 0x48
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	647b      	str	r3, [r7, #68]	@ 0x44
              index = i;
 8002062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002064:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
          for(int i = 0; i < 6; ++i){
 8002068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800206a:	3301      	adds	r3, #1
 800206c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800206e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002070:	2b05      	cmp	r3, #5
 8002072:	dde1      	ble.n	8002038 <HAL_UART_RxCpltCallback+0x2f0>
            }
          }

          //assign detected string
          detected_string = strings[index];
 8002074:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002078:	4a2f      	ldr	r2, [pc, #188]	@ (8002138 <HAL_UART_RxCpltCallback+0x3f0>)
 800207a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207e:	4a2f      	ldr	r2, [pc, #188]	@ (800213c <HAL_UART_RxCpltCallback+0x3f4>)
 8002080:	6013      	str	r3, [r2, #0]
          string_offset = detected_freq_FAB.f - string_freqs[index];
 8002082:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002086:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800208a:	4a2d      	ldr	r2, [pc, #180]	@ (8002140 <HAL_UART_RxCpltCallback+0x3f8>)
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	edd3 7a00 	vldr	s15, [r3]
 8002094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002098:	4b2a      	ldr	r3, [pc, #168]	@ (8002144 <HAL_UART_RxCpltCallback+0x3fc>)
 800209a:	edc3 7a00 	vstr	s15, [r3]
          ftoa(string_freqs[index], desiredFreq, 2);
 800209e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80020a2:	4a27      	ldr	r2, [pc, #156]	@ (8002140 <HAL_UART_RxCpltCallback+0x3f8>)
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	f107 0320 	add.w	r3, r7, #32
 80020b0:	2102      	movs	r1, #2
 80020b2:	4618      	mov	r0, r3
 80020b4:	eeb0 0a67 	vmov.f32	s0, s15
 80020b8:	f7ff fdea 	bl	8001c90 <ftoa>

          // CALCULATE //

          ILI9341_WriteString(100, 30, detected_string, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80020bc:	4b1f      	ldr	r3, [pc, #124]	@ (800213c <HAL_UART_RxCpltCallback+0x3f4>)
 80020be:	6819      	ldr	r1, [r3, #0]
 80020c0:	4b21      	ldr	r3, [pc, #132]	@ (8002148 <HAL_UART_RxCpltCallback+0x400>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	9202      	str	r2, [sp, #8]
 80020c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020ca:	9201      	str	r2, [sp, #4]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	9200      	str	r2, [sp, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	460a      	mov	r2, r1
 80020d4:	211e      	movs	r1, #30
 80020d6:	2064      	movs	r0, #100	@ 0x64
 80020d8:	f7ff f91e 	bl	8001318 <ILI9341_WriteString>
          ILI9341_WriteString(100, 90, char_detected_freq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80020dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002148 <HAL_UART_RxCpltCallback+0x400>)
 80020de:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80020e2:	2200      	movs	r2, #0
 80020e4:	9202      	str	r2, [sp, #8]
 80020e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020ea:	9201      	str	r2, [sp, #4]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	460a      	mov	r2, r1
 80020f4:	215a      	movs	r1, #90	@ 0x5a
 80020f6:	2064      	movs	r0, #100	@ 0x64
 80020f8:	f7ff f90e 	bl	8001318 <ILI9341_WriteString>
          ILI9341_WriteString(100, 150, desiredFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80020fc:	4b12      	ldr	r3, [pc, #72]	@ (8002148 <HAL_UART_RxCpltCallback+0x400>)
 80020fe:	f107 0120 	add.w	r1, r7, #32
 8002102:	2200      	movs	r2, #0
 8002104:	9202      	str	r2, [sp, #8]
 8002106:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800210a:	9201      	str	r2, [sp, #4]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	9200      	str	r2, [sp, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	460a      	mov	r2, r1
 8002114:	2196      	movs	r1, #150	@ 0x96
 8002116:	2064      	movs	r0, #100	@ 0x64
 8002118:	f7ff f8fe 	bl	8001318 <ILI9341_WriteString>
        }


		HAL_UART_DeInit(huart);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f002 ff45 	bl	8004fac <HAL_UART_DeInit>

		// Re-Initialize the UART peripheral
		HAL_UART_Init(huart);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f002 fef2 	bl	8004f0c <HAL_UART_Init>

        // Ready to receive the next piece of data
		HAL_UART_Receive_IT(huart, rx_buffer, sizeof(rx_buffer)); // Use correct size as per your protocol
 8002128:	220e      	movs	r2, #14
 800212a:	4908      	ldr	r1, [pc, #32]	@ (800214c <HAL_UART_RxCpltCallback+0x404>)
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f002 ff7d 	bl	800502c <HAL_UART_Receive_IT>
    }
}
 8002132:	3750      	adds	r7, #80	@ 0x50
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000028 	.word	0x20000028
 800213c:	200001c4 	.word	0x200001c4
 8002140:	20000010 	.word	0x20000010
 8002144:	200001c8 	.word	0x200001c8
 8002148:	20000008 	.word	0x20000008
 800214c:	200001d0 	.word	0x200001d0

08002150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002154:	b672      	cpsid	i
}
 8002156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <Error_Handler+0x8>

0800215c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	4b0f      	ldr	r3, [pc, #60]	@ (80021a0 <HAL_MspInit+0x44>)
 8002164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002166:	4a0e      	ldr	r2, [pc, #56]	@ (80021a0 <HAL_MspInit+0x44>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6613      	str	r3, [r2, #96]	@ 0x60
 800216e:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <HAL_MspInit+0x44>)
 8002170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	4b09      	ldr	r3, [pc, #36]	@ (80021a0 <HAL_MspInit+0x44>)
 800217c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217e:	4a08      	ldr	r2, [pc, #32]	@ (80021a0 <HAL_MspInit+0x44>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002184:	6593      	str	r3, [r2, #88]	@ 0x58
 8002186:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HAL_MspInit+0x44>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000

080021a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	@ 0x28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a17      	ldr	r2, [pc, #92]	@ (8002220 <HAL_SPI_MspInit+0x7c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d128      	bne.n	8002218 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021c6:	4b17      	ldr	r3, [pc, #92]	@ (8002224 <HAL_SPI_MspInit+0x80>)
 80021c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ca:	4a16      	ldr	r2, [pc, #88]	@ (8002224 <HAL_SPI_MspInit+0x80>)
 80021cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80021d2:	4b14      	ldr	r3, [pc, #80]	@ (8002224 <HAL_SPI_MspInit+0x80>)
 80021d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <HAL_SPI_MspInit+0x80>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e2:	4a10      	ldr	r2, [pc, #64]	@ (8002224 <HAL_SPI_MspInit+0x80>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <HAL_SPI_MspInit+0x80>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021f6:	23e0      	movs	r3, #224	@ 0xe0
 80021f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002202:	2303      	movs	r3, #3
 8002204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002206:	2305      	movs	r3, #5
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4619      	mov	r1, r3
 8002210:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002214:	f000 fb9e 	bl	8002954 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002218:	bf00      	nop
 800221a:	3728      	adds	r7, #40	@ 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40013000 	.word	0x40013000
 8002224:	40021000 	.word	0x40021000

08002228 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b0ae      	sub	sp, #184	@ 0xb8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	2294      	movs	r2, #148	@ 0x94
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f004 ff83 	bl	8007154 <memset>
  if(huart->Instance==USART1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a26      	ldr	r2, [pc, #152]	@ (80022ec <HAL_UART_MspInit+0xc4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d145      	bne.n	80022e4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002258:	2301      	movs	r3, #1
 800225a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800225c:	2300      	movs	r3, #0
 800225e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002260:	f107 0310 	add.w	r3, r7, #16
 8002264:	4618      	mov	r0, r3
 8002266:	f001 fdbd 	bl	8003de4 <HAL_RCCEx_PeriphCLKConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002270:	f7ff ff6e 	bl	8002150 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002274:	4b1e      	ldr	r3, [pc, #120]	@ (80022f0 <HAL_UART_MspInit+0xc8>)
 8002276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002278:	4a1d      	ldr	r2, [pc, #116]	@ (80022f0 <HAL_UART_MspInit+0xc8>)
 800227a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800227e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002280:	4b1b      	ldr	r3, [pc, #108]	@ (80022f0 <HAL_UART_MspInit+0xc8>)
 8002282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800228c:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <HAL_UART_MspInit+0xc8>)
 800228e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002290:	4a17      	ldr	r2, [pc, #92]	@ (80022f0 <HAL_UART_MspInit+0xc8>)
 8002292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002296:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002298:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <HAL_UART_MspInit+0xc8>)
 800229a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80022a4:	f000 feb6 	bl	8003014 <HAL_PWREx_EnableVddIO2>
    /**USART1 GPIO Configuration
    PG9     ------> USART1_TX
    PG10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022a8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022bc:	2303      	movs	r3, #3
 80022be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022c2:	2307      	movs	r3, #7
 80022c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80022cc:	4619      	mov	r1, r3
 80022ce:	4809      	ldr	r0, [pc, #36]	@ (80022f4 <HAL_UART_MspInit+0xcc>)
 80022d0:	f000 fb40 	bl	8002954 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2100      	movs	r1, #0
 80022d8:	2025      	movs	r0, #37	@ 0x25
 80022da:	f000 fa3c 	bl	8002756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022de:	2025      	movs	r0, #37	@ 0x25
 80022e0:	f000 fa55 	bl	800278e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022e4:	bf00      	nop
 80022e6:	37b8      	adds	r7, #184	@ 0xb8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40013800 	.word	0x40013800
 80022f0:	40021000 	.word	0x40021000
 80022f4:	48001800 	.word	0x48001800

080022f8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <HAL_UART_MspDeInit+0x38>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d10d      	bne.n	8002326 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800230a:	4b0a      	ldr	r3, [pc, #40]	@ (8002334 <HAL_UART_MspDeInit+0x3c>)
 800230c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800230e:	4a09      	ldr	r2, [pc, #36]	@ (8002334 <HAL_UART_MspDeInit+0x3c>)
 8002310:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002314:	6613      	str	r3, [r2, #96]	@ 0x60

    /**USART1 GPIO Configuration
    PG9     ------> USART1_TX
    PG10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_10);
 8002316:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800231a:	4807      	ldr	r0, [pc, #28]	@ (8002338 <HAL_UART_MspDeInit+0x40>)
 800231c:	f000 fcac 	bl	8002c78 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002320:	2025      	movs	r0, #37	@ 0x25
 8002322:	f000 fa42 	bl	80027aa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40013800 	.word	0x40013800
 8002334:	40021000 	.word	0x40021000
 8002338:	48001800 	.word	0x48001800

0800233c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002340:	bf00      	nop
 8002342:	e7fd      	b.n	8002340 <NMI_Handler+0x4>

08002344 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <HardFault_Handler+0x4>

0800234c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002350:	bf00      	nop
 8002352:	e7fd      	b.n	8002350 <MemManage_Handler+0x4>

08002354 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <BusFault_Handler+0x4>

0800235c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002360:	bf00      	nop
 8002362:	e7fd      	b.n	8002360 <UsageFault_Handler+0x4>

08002364 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002392:	f000 f89d 	bl	80024d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023a0:	4802      	ldr	r0, [pc, #8]	@ (80023ac <USART1_IRQHandler+0x10>)
 80023a2:	f002 fe8f 	bl	80050c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000130 	.word	0x20000130

080023b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023b4:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <SystemInit+0x20>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ba:	4a05      	ldr	r2, [pc, #20]	@ (80023d0 <SystemInit+0x20>)
 80023bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800240c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023d8:	f7ff ffea 	bl	80023b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023dc:	480c      	ldr	r0, [pc, #48]	@ (8002410 <LoopForever+0x6>)
  ldr r1, =_edata
 80023de:	490d      	ldr	r1, [pc, #52]	@ (8002414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002418 <LoopForever+0xe>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e4:	e002      	b.n	80023ec <LoopCopyDataInit>

080023e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ea:	3304      	adds	r3, #4

080023ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f0:	d3f9      	bcc.n	80023e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f2:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <LoopForever+0x12>)
  ldr r4, =_ebss
 80023f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002420 <LoopForever+0x16>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f8:	e001      	b.n	80023fe <LoopFillZerobss>

080023fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023fc:	3204      	adds	r2, #4

080023fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002400:	d3fb      	bcc.n	80023fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002402:	f004 feb5 	bl	8007170 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002406:	f7ff f869 	bl	80014dc <main>

0800240a <LoopForever>:

LoopForever:
    b LoopForever
 800240a:	e7fe      	b.n	800240a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800240c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002414:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002418:	0800a2c0 	.word	0x0800a2c0
  ldr r2, =_sbss
 800241c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002420:	2000031c 	.word	0x2000031c

08002424 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC1_IRQHandler>

08002426 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002430:	2003      	movs	r0, #3
 8002432:	f000 f985 	bl	8002740 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002436:	2000      	movs	r0, #0
 8002438:	f000 f80e 	bl	8002458 <HAL_InitTick>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	71fb      	strb	r3, [r7, #7]
 8002446:	e001      	b.n	800244c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002448:	f7ff fe88 	bl	800215c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800244c:	79fb      	ldrb	r3, [r7, #7]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002464:	4b17      	ldr	r3, [pc, #92]	@ (80024c4 <HAL_InitTick+0x6c>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d023      	beq.n	80024b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800246c:	4b16      	ldr	r3, [pc, #88]	@ (80024c8 <HAL_InitTick+0x70>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b14      	ldr	r3, [pc, #80]	@ (80024c4 <HAL_InitTick+0x6c>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4619      	mov	r1, r3
 8002476:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800247a:	fbb3 f3f1 	udiv	r3, r3, r1
 800247e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f99f 	bl	80027c6 <HAL_SYSTICK_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10f      	bne.n	80024ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b0f      	cmp	r3, #15
 8002492:	d809      	bhi.n	80024a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002494:	2200      	movs	r2, #0
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	f000 f95b 	bl	8002756 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024a0:	4a0a      	ldr	r2, [pc, #40]	@ (80024cc <HAL_InitTick+0x74>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e007      	b.n	80024b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
 80024ac:	e004      	b.n	80024b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	e001      	b.n	80024b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000048 	.word	0x20000048
 80024c8:	20000040 	.word	0x20000040
 80024cc:	20000044 	.word	0x20000044

080024d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024d4:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_IncTick+0x20>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_IncTick+0x24>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	4a04      	ldr	r2, [pc, #16]	@ (80024f4 <HAL_IncTick+0x24>)
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000048 	.word	0x20000048
 80024f4:	200001e0 	.word	0x200001e0

080024f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return uwTick;
 80024fc:	4b03      	ldr	r3, [pc, #12]	@ (800250c <HAL_GetTick+0x14>)
 80024fe:	681b      	ldr	r3, [r3, #0]
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	200001e0 	.word	0x200001e0

08002510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002518:	f7ff ffee 	bl	80024f8 <HAL_GetTick>
 800251c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002528:	d005      	beq.n	8002536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800252a:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <HAL_Delay+0x44>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4413      	add	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002536:	bf00      	nop
 8002538:	f7ff ffde 	bl	80024f8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	429a      	cmp	r2, r3
 8002546:	d8f7      	bhi.n	8002538 <HAL_Delay+0x28>
  {
  }
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000048 	.word	0x20000048

08002558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002568:	4b0c      	ldr	r3, [pc, #48]	@ (800259c <__NVIC_SetPriorityGrouping+0x44>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002574:	4013      	ands	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002580:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258a:	4a04      	ldr	r2, [pc, #16]	@ (800259c <__NVIC_SetPriorityGrouping+0x44>)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	60d3      	str	r3, [r2, #12]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a4:	4b04      	ldr	r3, [pc, #16]	@ (80025b8 <__NVIC_GetPriorityGrouping+0x18>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	f003 0307 	and.w	r3, r3, #7
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	db0b      	blt.n	80025e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	f003 021f 	and.w	r2, r3, #31
 80025d4:	4907      	ldr	r1, [pc, #28]	@ (80025f4 <__NVIC_EnableIRQ+0x38>)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	2001      	movs	r0, #1
 80025de:	fa00 f202 	lsl.w	r2, r0, r2
 80025e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000e100 	.word	0xe000e100

080025f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	2b00      	cmp	r3, #0
 8002608:	db12      	blt.n	8002630 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	490a      	ldr	r1, [pc, #40]	@ (800263c <__NVIC_DisableIRQ+0x44>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2001      	movs	r0, #1
 800261a:	fa00 f202 	lsl.w	r2, r0, r2
 800261e:	3320      	adds	r3, #32
 8002620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002624:	f3bf 8f4f 	dsb	sy
}
 8002628:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800262a:	f3bf 8f6f 	isb	sy
}
 800262e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000e100 	.word	0xe000e100

08002640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	6039      	str	r1, [r7, #0]
 800264a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	2b00      	cmp	r3, #0
 8002652:	db0a      	blt.n	800266a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	490c      	ldr	r1, [pc, #48]	@ (800268c <__NVIC_SetPriority+0x4c>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	440b      	add	r3, r1
 8002664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002668:	e00a      	b.n	8002680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4908      	ldr	r1, [pc, #32]	@ (8002690 <__NVIC_SetPriority+0x50>)
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	3b04      	subs	r3, #4
 8002678:	0112      	lsls	r2, r2, #4
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	440b      	add	r3, r1
 800267e:	761a      	strb	r2, [r3, #24]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000e100 	.word	0xe000e100
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	@ 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f1c3 0307 	rsb	r3, r3, #7
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	bf28      	it	cs
 80026b2:	2304      	movcs	r3, #4
 80026b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3304      	adds	r3, #4
 80026ba:	2b06      	cmp	r3, #6
 80026bc:	d902      	bls.n	80026c4 <NVIC_EncodePriority+0x30>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3b03      	subs	r3, #3
 80026c2:	e000      	b.n	80026c6 <NVIC_EncodePriority+0x32>
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	f04f 32ff 	mov.w	r2, #4294967295
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43da      	mvns	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	401a      	ands	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026dc:	f04f 31ff 	mov.w	r1, #4294967295
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	43d9      	mvns	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	4313      	orrs	r3, r2
         );
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3724      	adds	r7, #36	@ 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3b01      	subs	r3, #1
 8002708:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800270c:	d301      	bcc.n	8002712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800270e:	2301      	movs	r3, #1
 8002710:	e00f      	b.n	8002732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002712:	4a0a      	ldr	r2, [pc, #40]	@ (800273c <SysTick_Config+0x40>)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3b01      	subs	r3, #1
 8002718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800271a:	210f      	movs	r1, #15
 800271c:	f04f 30ff 	mov.w	r0, #4294967295
 8002720:	f7ff ff8e 	bl	8002640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002724:	4b05      	ldr	r3, [pc, #20]	@ (800273c <SysTick_Config+0x40>)
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272a:	4b04      	ldr	r3, [pc, #16]	@ (800273c <SysTick_Config+0x40>)
 800272c:	2207      	movs	r2, #7
 800272e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	e000e010 	.word	0xe000e010

08002740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff ff05 	bl	8002558 <__NVIC_SetPriorityGrouping>
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b086      	sub	sp, #24
 800275a:	af00      	add	r7, sp, #0
 800275c:	4603      	mov	r3, r0
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
 8002762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002768:	f7ff ff1a 	bl	80025a0 <__NVIC_GetPriorityGrouping>
 800276c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	6978      	ldr	r0, [r7, #20]
 8002774:	f7ff ff8e 	bl	8002694 <NVIC_EncodePriority>
 8002778:	4602      	mov	r2, r0
 800277a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff5d 	bl	8002640 <__NVIC_SetPriority>
}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff0d 	bl	80025bc <__NVIC_EnableIRQ>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff1d 	bl	80025f8 <__NVIC_DisableIRQ>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ff94 	bl	80026fc <SysTick_Config>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d008      	beq.n	8002808 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2204      	movs	r2, #4
 80027fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e040      	b.n	800288a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 020e 	bic.w	r2, r2, #14
 8002816:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002822:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002826:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283c:	f003 021c 	and.w	r2, r3, #28
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002844:	2101      	movs	r1, #1
 8002846:	fa01 f202 	lsl.w	r2, r1, r2
 800284a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002854:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00c      	beq.n	8002878 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002868:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800286c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002876:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002888:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d005      	beq.n	80028ba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2204      	movs	r2, #4
 80028b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
 80028b8:	e047      	b.n	800294a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 020e 	bic.w	r2, r2, #14
 80028c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	f003 021c 	and.w	r2, r3, #28
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	2101      	movs	r1, #1
 80028f8:	fa01 f202 	lsl.w	r2, r1, r2
 80028fc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002906:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00c      	beq.n	800292a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800291e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002928:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	4798      	blx	r3
    }
  }
  return status;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002962:	e166      	b.n	8002c32 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	2101      	movs	r1, #1
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	4013      	ands	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8158 	beq.w	8002c2c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d005      	beq.n	8002994 <HAL_GPIO_Init+0x40>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d130      	bne.n	80029f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	2203      	movs	r2, #3
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029ca:	2201      	movs	r2, #1
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	091b      	lsrs	r3, r3, #4
 80029e0:	f003 0201 	and.w	r2, r3, #1
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d017      	beq.n	8002a32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d123      	bne.n	8002a86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	08da      	lsrs	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3208      	adds	r2, #8
 8002a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	220f      	movs	r2, #15
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	08da      	lsrs	r2, r3, #3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3208      	adds	r2, #8
 8002a80:	6939      	ldr	r1, [r7, #16]
 8002a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	2203      	movs	r2, #3
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0203 	and.w	r2, r3, #3
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 80b2 	beq.w	8002c2c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac8:	4b61      	ldr	r3, [pc, #388]	@ (8002c50 <HAL_GPIO_Init+0x2fc>)
 8002aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002acc:	4a60      	ldr	r2, [pc, #384]	@ (8002c50 <HAL_GPIO_Init+0x2fc>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ad4:	4b5e      	ldr	r3, [pc, #376]	@ (8002c50 <HAL_GPIO_Init+0x2fc>)
 8002ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ae0:	4a5c      	ldr	r2, [pc, #368]	@ (8002c54 <HAL_GPIO_Init+0x300>)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	220f      	movs	r2, #15
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4013      	ands	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b0a:	d02b      	beq.n	8002b64 <HAL_GPIO_Init+0x210>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a52      	ldr	r2, [pc, #328]	@ (8002c58 <HAL_GPIO_Init+0x304>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d025      	beq.n	8002b60 <HAL_GPIO_Init+0x20c>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a51      	ldr	r2, [pc, #324]	@ (8002c5c <HAL_GPIO_Init+0x308>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d01f      	beq.n	8002b5c <HAL_GPIO_Init+0x208>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a50      	ldr	r2, [pc, #320]	@ (8002c60 <HAL_GPIO_Init+0x30c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d019      	beq.n	8002b58 <HAL_GPIO_Init+0x204>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a4f      	ldr	r2, [pc, #316]	@ (8002c64 <HAL_GPIO_Init+0x310>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d013      	beq.n	8002b54 <HAL_GPIO_Init+0x200>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a4e      	ldr	r2, [pc, #312]	@ (8002c68 <HAL_GPIO_Init+0x314>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00d      	beq.n	8002b50 <HAL_GPIO_Init+0x1fc>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a4d      	ldr	r2, [pc, #308]	@ (8002c6c <HAL_GPIO_Init+0x318>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d007      	beq.n	8002b4c <HAL_GPIO_Init+0x1f8>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a4c      	ldr	r2, [pc, #304]	@ (8002c70 <HAL_GPIO_Init+0x31c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d101      	bne.n	8002b48 <HAL_GPIO_Init+0x1f4>
 8002b44:	2307      	movs	r3, #7
 8002b46:	e00e      	b.n	8002b66 <HAL_GPIO_Init+0x212>
 8002b48:	2308      	movs	r3, #8
 8002b4a:	e00c      	b.n	8002b66 <HAL_GPIO_Init+0x212>
 8002b4c:	2306      	movs	r3, #6
 8002b4e:	e00a      	b.n	8002b66 <HAL_GPIO_Init+0x212>
 8002b50:	2305      	movs	r3, #5
 8002b52:	e008      	b.n	8002b66 <HAL_GPIO_Init+0x212>
 8002b54:	2304      	movs	r3, #4
 8002b56:	e006      	b.n	8002b66 <HAL_GPIO_Init+0x212>
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e004      	b.n	8002b66 <HAL_GPIO_Init+0x212>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e002      	b.n	8002b66 <HAL_GPIO_Init+0x212>
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <HAL_GPIO_Init+0x212>
 8002b64:	2300      	movs	r3, #0
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	f002 0203 	and.w	r2, r2, #3
 8002b6c:	0092      	lsls	r2, r2, #2
 8002b6e:	4093      	lsls	r3, r2
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b76:	4937      	ldr	r1, [pc, #220]	@ (8002c54 <HAL_GPIO_Init+0x300>)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b84:	4b3b      	ldr	r3, [pc, #236]	@ (8002c74 <HAL_GPIO_Init+0x320>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ba8:	4a32      	ldr	r2, [pc, #200]	@ (8002c74 <HAL_GPIO_Init+0x320>)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bae:	4b31      	ldr	r3, [pc, #196]	@ (8002c74 <HAL_GPIO_Init+0x320>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bd2:	4a28      	ldr	r2, [pc, #160]	@ (8002c74 <HAL_GPIO_Init+0x320>)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bd8:	4b26      	ldr	r3, [pc, #152]	@ (8002c74 <HAL_GPIO_Init+0x320>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4013      	ands	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c74 <HAL_GPIO_Init+0x320>)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c02:	4b1c      	ldr	r3, [pc, #112]	@ (8002c74 <HAL_GPIO_Init+0x320>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c26:	4a13      	ldr	r2, [pc, #76]	@ (8002c74 <HAL_GPIO_Init+0x320>)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f47f ae91 	bne.w	8002964 <HAL_GPIO_Init+0x10>
  }
}
 8002c42:	bf00      	nop
 8002c44:	bf00      	nop
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40010000 	.word	0x40010000
 8002c58:	48000400 	.word	0x48000400
 8002c5c:	48000800 	.word	0x48000800
 8002c60:	48000c00 	.word	0x48000c00
 8002c64:	48001000 	.word	0x48001000
 8002c68:	48001400 	.word	0x48001400
 8002c6c:	48001800 	.word	0x48001800
 8002c70:	48001c00 	.word	0x48001c00
 8002c74:	40010400 	.word	0x40010400

08002c78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002c86:	e0c9      	b.n	8002e1c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002c88:	2201      	movs	r2, #1
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	4013      	ands	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80bc 	beq.w	8002e16 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002c9e:	4a66      	ldr	r2, [pc, #408]	@ (8002e38 <HAL_GPIO_DeInit+0x1c0>)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	089b      	lsrs	r3, r3, #2
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002caa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	220f      	movs	r2, #15
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cc6:	d02b      	beq.n	8002d20 <HAL_GPIO_DeInit+0xa8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a5c      	ldr	r2, [pc, #368]	@ (8002e3c <HAL_GPIO_DeInit+0x1c4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d025      	beq.n	8002d1c <HAL_GPIO_DeInit+0xa4>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a5b      	ldr	r2, [pc, #364]	@ (8002e40 <HAL_GPIO_DeInit+0x1c8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d01f      	beq.n	8002d18 <HAL_GPIO_DeInit+0xa0>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a5a      	ldr	r2, [pc, #360]	@ (8002e44 <HAL_GPIO_DeInit+0x1cc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d019      	beq.n	8002d14 <HAL_GPIO_DeInit+0x9c>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a59      	ldr	r2, [pc, #356]	@ (8002e48 <HAL_GPIO_DeInit+0x1d0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d013      	beq.n	8002d10 <HAL_GPIO_DeInit+0x98>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a58      	ldr	r2, [pc, #352]	@ (8002e4c <HAL_GPIO_DeInit+0x1d4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00d      	beq.n	8002d0c <HAL_GPIO_DeInit+0x94>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a57      	ldr	r2, [pc, #348]	@ (8002e50 <HAL_GPIO_DeInit+0x1d8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d007      	beq.n	8002d08 <HAL_GPIO_DeInit+0x90>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a56      	ldr	r2, [pc, #344]	@ (8002e54 <HAL_GPIO_DeInit+0x1dc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d101      	bne.n	8002d04 <HAL_GPIO_DeInit+0x8c>
 8002d00:	2307      	movs	r3, #7
 8002d02:	e00e      	b.n	8002d22 <HAL_GPIO_DeInit+0xaa>
 8002d04:	2308      	movs	r3, #8
 8002d06:	e00c      	b.n	8002d22 <HAL_GPIO_DeInit+0xaa>
 8002d08:	2306      	movs	r3, #6
 8002d0a:	e00a      	b.n	8002d22 <HAL_GPIO_DeInit+0xaa>
 8002d0c:	2305      	movs	r3, #5
 8002d0e:	e008      	b.n	8002d22 <HAL_GPIO_DeInit+0xaa>
 8002d10:	2304      	movs	r3, #4
 8002d12:	e006      	b.n	8002d22 <HAL_GPIO_DeInit+0xaa>
 8002d14:	2303      	movs	r3, #3
 8002d16:	e004      	b.n	8002d22 <HAL_GPIO_DeInit+0xaa>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e002      	b.n	8002d22 <HAL_GPIO_DeInit+0xaa>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_GPIO_DeInit+0xaa>
 8002d20:	2300      	movs	r3, #0
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	f002 0203 	and.w	r2, r2, #3
 8002d28:	0092      	lsls	r2, r2, #2
 8002d2a:	4093      	lsls	r3, r2
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d132      	bne.n	8002d98 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002d32:	4b49      	ldr	r3, [pc, #292]	@ (8002e58 <HAL_GPIO_DeInit+0x1e0>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	4947      	ldr	r1, [pc, #284]	@ (8002e58 <HAL_GPIO_DeInit+0x1e0>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002d40:	4b45      	ldr	r3, [pc, #276]	@ (8002e58 <HAL_GPIO_DeInit+0x1e0>)
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	4943      	ldr	r1, [pc, #268]	@ (8002e58 <HAL_GPIO_DeInit+0x1e0>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002d4e:	4b42      	ldr	r3, [pc, #264]	@ (8002e58 <HAL_GPIO_DeInit+0x1e0>)
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	4940      	ldr	r1, [pc, #256]	@ (8002e58 <HAL_GPIO_DeInit+0x1e0>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002d5c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e58 <HAL_GPIO_DeInit+0x1e0>)
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	493c      	ldr	r1, [pc, #240]	@ (8002e58 <HAL_GPIO_DeInit+0x1e0>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	220f      	movs	r2, #15
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002d7a:	4a2f      	ldr	r2, [pc, #188]	@ (8002e38 <HAL_GPIO_DeInit+0x1c0>)
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	089b      	lsrs	r3, r3, #2
 8002d80:	3302      	adds	r3, #2
 8002d82:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	43da      	mvns	r2, r3
 8002d8a:	482b      	ldr	r0, [pc, #172]	@ (8002e38 <HAL_GPIO_DeInit+0x1c0>)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	089b      	lsrs	r3, r3, #2
 8002d90:	400a      	ands	r2, r1
 8002d92:	3302      	adds	r3, #2
 8002d94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	2103      	movs	r1, #3
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	08da      	lsrs	r2, r3, #3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3208      	adds	r2, #8
 8002db4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	220f      	movs	r2, #15
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	08d2      	lsrs	r2, r2, #3
 8002dcc:	4019      	ands	r1, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3208      	adds	r2, #8
 8002dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	2103      	movs	r1, #3
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	401a      	ands	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	2101      	movs	r1, #1
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	fa01 f303 	lsl.w	r3, r1, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	2103      	movs	r1, #3
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	401a      	ands	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f47f af2f 	bne.w	8002c88 <HAL_GPIO_DeInit+0x10>
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	bf00      	nop
 8002e2e:	371c      	adds	r7, #28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	40010000 	.word	0x40010000
 8002e3c:	48000400 	.word	0x48000400
 8002e40:	48000800 	.word	0x48000800
 8002e44:	48000c00 	.word	0x48000c00
 8002e48:	48001000 	.word	0x48001000
 8002e4c:	48001400 	.word	0x48001400
 8002e50:	48001800 	.word	0x48001800
 8002e54:	48001c00 	.word	0x48001c00
 8002e58:	40010400 	.word	0x40010400

08002e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e6c:	787b      	ldrb	r3, [r7, #1]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e78:	e002      	b.n	8002e80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e90:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e9c:	d102      	bne.n	8002ea4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002e9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ea2:	e00b      	b.n	8002ebc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002ea4:	4b08      	ldr	r3, [pc, #32]	@ (8002ec8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eb2:	d102      	bne.n	8002eba <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002eb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002eb8:	e000      	b.n	8002ebc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002eba:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40007000 	.word	0x40007000

08002ecc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d141      	bne.n	8002f5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eda:	4b4b      	ldr	r3, [pc, #300]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee6:	d131      	bne.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ee8:	4b47      	ldr	r3, [pc, #284]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eee:	4a46      	ldr	r2, [pc, #280]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ef4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ef8:	4b43      	ldr	r3, [pc, #268]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f00:	4a41      	ldr	r2, [pc, #260]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f08:	4b40      	ldr	r3, [pc, #256]	@ (800300c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2232      	movs	r2, #50	@ 0x32
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	4a3f      	ldr	r2, [pc, #252]	@ (8003010 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	0c9b      	lsrs	r3, r3, #18
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f1e:	e002      	b.n	8002f26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f26:	4b38      	ldr	r3, [pc, #224]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f32:	d102      	bne.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f2      	bne.n	8002f20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f3a:	4b33      	ldr	r3, [pc, #204]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f46:	d158      	bne.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e057      	b.n	8002ffc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f4c:	4b2e      	ldr	r3, [pc, #184]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f52:	4a2d      	ldr	r2, [pc, #180]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f5c:	e04d      	b.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f64:	d141      	bne.n	8002fea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f66:	4b28      	ldr	r3, [pc, #160]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f72:	d131      	bne.n	8002fd8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f74:	4b24      	ldr	r3, [pc, #144]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f7a:	4a23      	ldr	r2, [pc, #140]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f84:	4b20      	ldr	r3, [pc, #128]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f94:	4b1d      	ldr	r3, [pc, #116]	@ (800300c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2232      	movs	r2, #50	@ 0x32
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003010 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	0c9b      	lsrs	r3, r3, #18
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002faa:	e002      	b.n	8002fb2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fb2:	4b15      	ldr	r3, [pc, #84]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fbe:	d102      	bne.n	8002fc6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f2      	bne.n	8002fac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fc6:	4b10      	ldr	r3, [pc, #64]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd2:	d112      	bne.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e011      	b.n	8002ffc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fde:	4a0a      	ldr	r2, [pc, #40]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fe8:	e007      	b.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fea:	4b07      	ldr	r3, [pc, #28]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ff2:	4a05      	ldr	r2, [pc, #20]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ff8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	40007000 	.word	0x40007000
 800300c:	20000040 	.word	0x20000040
 8003010:	431bde83 	.word	0x431bde83

08003014 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003018:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_PWREx_EnableVddIO2+0x1c>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	4a04      	ldr	r2, [pc, #16]	@ (8003030 <HAL_PWREx_EnableVddIO2+0x1c>)
 800301e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003022:	6053      	str	r3, [r2, #4]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40007000 	.word	0x40007000

08003034 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d102      	bne.n	8003048 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	f000 bc08 	b.w	8003858 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003048:	4b96      	ldr	r3, [pc, #600]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003052:	4b94      	ldr	r3, [pc, #592]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80e4 	beq.w	8003232 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d007      	beq.n	8003080 <HAL_RCC_OscConfig+0x4c>
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2b0c      	cmp	r3, #12
 8003074:	f040 808b 	bne.w	800318e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2b01      	cmp	r3, #1
 800307c:	f040 8087 	bne.w	800318e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003080:	4b88      	ldr	r3, [pc, #544]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_RCC_OscConfig+0x64>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e3df      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1a      	ldr	r2, [r3, #32]
 800309c:	4b81      	ldr	r3, [pc, #516]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d004      	beq.n	80030b2 <HAL_RCC_OscConfig+0x7e>
 80030a8:	4b7e      	ldr	r3, [pc, #504]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030b0:	e005      	b.n	80030be <HAL_RCC_OscConfig+0x8a>
 80030b2:	4b7c      	ldr	r3, [pc, #496]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80030b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030be:	4293      	cmp	r3, r2
 80030c0:	d223      	bcs.n	800310a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fdcc 	bl	8003c64 <RCC_SetFlashLatencyFromMSIRange>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e3c0      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d6:	4b73      	ldr	r3, [pc, #460]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a72      	ldr	r2, [pc, #456]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80030dc:	f043 0308 	orr.w	r3, r3, #8
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b70      	ldr	r3, [pc, #448]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	496d      	ldr	r1, [pc, #436]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f4:	4b6b      	ldr	r3, [pc, #428]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	4968      	ldr	r1, [pc, #416]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
 8003108:	e025      	b.n	8003156 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800310a:	4b66      	ldr	r3, [pc, #408]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a65      	ldr	r2, [pc, #404]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003110:	f043 0308 	orr.w	r3, r3, #8
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	4b63      	ldr	r3, [pc, #396]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	4960      	ldr	r1, [pc, #384]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003124:	4313      	orrs	r3, r2
 8003126:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003128:	4b5e      	ldr	r3, [pc, #376]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	495b      	ldr	r1, [pc, #364]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fd8c 	bl	8003c64 <RCC_SetFlashLatencyFromMSIRange>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e380      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003156:	f000 fcc1 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 800315a:	4602      	mov	r2, r0
 800315c:	4b51      	ldr	r3, [pc, #324]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	4950      	ldr	r1, [pc, #320]	@ (80032a8 <HAL_RCC_OscConfig+0x274>)
 8003168:	5ccb      	ldrb	r3, [r1, r3]
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	fa22 f303 	lsr.w	r3, r2, r3
 8003172:	4a4e      	ldr	r2, [pc, #312]	@ (80032ac <HAL_RCC_OscConfig+0x278>)
 8003174:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003176:	4b4e      	ldr	r3, [pc, #312]	@ (80032b0 <HAL_RCC_OscConfig+0x27c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff f96c 	bl	8002458 <HAL_InitTick>
 8003180:	4603      	mov	r3, r0
 8003182:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d052      	beq.n	8003230 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	e364      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d032      	beq.n	80031fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003196:	4b43      	ldr	r3, [pc, #268]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a42      	ldr	r2, [pc, #264]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031a2:	f7ff f9a9 	bl	80024f8 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031aa:	f7ff f9a5 	bl	80024f8 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e34d      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031bc:	4b39      	ldr	r3, [pc, #228]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031c8:	4b36      	ldr	r3, [pc, #216]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a35      	ldr	r2, [pc, #212]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031ce:	f043 0308 	orr.w	r3, r3, #8
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	4b33      	ldr	r3, [pc, #204]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	4930      	ldr	r1, [pc, #192]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031e6:	4b2f      	ldr	r3, [pc, #188]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	492b      	ldr	r1, [pc, #172]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	604b      	str	r3, [r1, #4]
 80031fa:	e01a      	b.n	8003232 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031fc:	4b29      	ldr	r3, [pc, #164]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a28      	ldr	r2, [pc, #160]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003202:	f023 0301 	bic.w	r3, r3, #1
 8003206:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003208:	f7ff f976 	bl	80024f8 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003210:	f7ff f972 	bl	80024f8 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e31a      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003222:	4b20      	ldr	r3, [pc, #128]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x1dc>
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003230:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d073      	beq.n	8003326 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	2b08      	cmp	r3, #8
 8003242:	d005      	beq.n	8003250 <HAL_RCC_OscConfig+0x21c>
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	2b0c      	cmp	r3, #12
 8003248:	d10e      	bne.n	8003268 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b03      	cmp	r3, #3
 800324e:	d10b      	bne.n	8003268 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003250:	4b14      	ldr	r3, [pc, #80]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d063      	beq.n	8003324 <HAL_RCC_OscConfig+0x2f0>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d15f      	bne.n	8003324 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e2f7      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003270:	d106      	bne.n	8003280 <HAL_RCC_OscConfig+0x24c>
 8003272:	4b0c      	ldr	r3, [pc, #48]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a0b      	ldr	r2, [pc, #44]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e025      	b.n	80032cc <HAL_RCC_OscConfig+0x298>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003288:	d114      	bne.n	80032b4 <HAL_RCC_OscConfig+0x280>
 800328a:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a05      	ldr	r2, [pc, #20]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	4b03      	ldr	r3, [pc, #12]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a02      	ldr	r2, [pc, #8]	@ (80032a4 <HAL_RCC_OscConfig+0x270>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e013      	b.n	80032cc <HAL_RCC_OscConfig+0x298>
 80032a4:	40021000 	.word	0x40021000
 80032a8:	0800a210 	.word	0x0800a210
 80032ac:	20000040 	.word	0x20000040
 80032b0:	20000044 	.word	0x20000044
 80032b4:	4ba0      	ldr	r3, [pc, #640]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a9f      	ldr	r2, [pc, #636]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80032ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	4b9d      	ldr	r3, [pc, #628]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a9c      	ldr	r2, [pc, #624]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80032c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d013      	beq.n	80032fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7ff f910 	bl	80024f8 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032dc:	f7ff f90c 	bl	80024f8 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b64      	cmp	r3, #100	@ 0x64
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e2b4      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ee:	4b92      	ldr	r3, [pc, #584]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x2a8>
 80032fa:	e014      	b.n	8003326 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7ff f8fc 	bl	80024f8 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003304:	f7ff f8f8 	bl	80024f8 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	@ 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e2a0      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003316:	4b88      	ldr	r3, [pc, #544]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x2d0>
 8003322:	e000      	b.n	8003326 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d060      	beq.n	80033f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	2b04      	cmp	r3, #4
 8003336:	d005      	beq.n	8003344 <HAL_RCC_OscConfig+0x310>
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b0c      	cmp	r3, #12
 800333c:	d119      	bne.n	8003372 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b02      	cmp	r3, #2
 8003342:	d116      	bne.n	8003372 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003344:	4b7c      	ldr	r3, [pc, #496]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_RCC_OscConfig+0x328>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e27d      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335c:	4b76      	ldr	r3, [pc, #472]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	061b      	lsls	r3, r3, #24
 800336a:	4973      	ldr	r1, [pc, #460]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800336c:	4313      	orrs	r3, r2
 800336e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003370:	e040      	b.n	80033f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d023      	beq.n	80033c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800337a:	4b6f      	ldr	r3, [pc, #444]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a6e      	ldr	r2, [pc, #440]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003386:	f7ff f8b7 	bl	80024f8 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338e:	f7ff f8b3 	bl	80024f8 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e25b      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033a0:	4b65      	ldr	r3, [pc, #404]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ac:	4b62      	ldr	r3, [pc, #392]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	061b      	lsls	r3, r3, #24
 80033ba:	495f      	ldr	r1, [pc, #380]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]
 80033c0:	e018      	b.n	80033f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a5c      	ldr	r2, [pc, #368]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80033c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7ff f893 	bl	80024f8 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d6:	f7ff f88f 	bl	80024f8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e237      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033e8:	4b53      	ldr	r3, [pc, #332]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d03c      	beq.n	800347a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01c      	beq.n	8003442 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003408:	4b4b      	ldr	r3, [pc, #300]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800340a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800340e:	4a4a      	ldr	r2, [pc, #296]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003418:	f7ff f86e 	bl	80024f8 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003420:	f7ff f86a 	bl	80024f8 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e212      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003432:	4b41      	ldr	r3, [pc, #260]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 8003434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0ef      	beq.n	8003420 <HAL_RCC_OscConfig+0x3ec>
 8003440:	e01b      	b.n	800347a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003442:	4b3d      	ldr	r3, [pc, #244]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 8003444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003448:	4a3b      	ldr	r2, [pc, #236]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800344a:	f023 0301 	bic.w	r3, r3, #1
 800344e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003452:	f7ff f851 	bl	80024f8 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800345a:	f7ff f84d 	bl	80024f8 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e1f5      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800346c:	4b32      	ldr	r3, [pc, #200]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800346e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1ef      	bne.n	800345a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80a6 	beq.w	80035d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003488:	2300      	movs	r3, #0
 800348a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800348c:	4b2a      	ldr	r3, [pc, #168]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10d      	bne.n	80034b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003498:	4b27      	ldr	r3, [pc, #156]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800349a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349c:	4a26      	ldr	r2, [pc, #152]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800349e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80034a4:	4b24      	ldr	r3, [pc, #144]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80034a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034b0:	2301      	movs	r3, #1
 80034b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b4:	4b21      	ldr	r3, [pc, #132]	@ (800353c <HAL_RCC_OscConfig+0x508>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d118      	bne.n	80034f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034c0:	4b1e      	ldr	r3, [pc, #120]	@ (800353c <HAL_RCC_OscConfig+0x508>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1d      	ldr	r2, [pc, #116]	@ (800353c <HAL_RCC_OscConfig+0x508>)
 80034c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034cc:	f7ff f814 	bl	80024f8 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d4:	f7ff f810 	bl	80024f8 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e1b8      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034e6:	4b15      	ldr	r3, [pc, #84]	@ (800353c <HAL_RCC_OscConfig+0x508>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d108      	bne.n	800350c <HAL_RCC_OscConfig+0x4d8>
 80034fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 80034fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003500:	4a0d      	ldr	r2, [pc, #52]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800350a:	e029      	b.n	8003560 <HAL_RCC_OscConfig+0x52c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b05      	cmp	r3, #5
 8003512:	d115      	bne.n	8003540 <HAL_RCC_OscConfig+0x50c>
 8003514:	4b08      	ldr	r3, [pc, #32]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351a:	4a07      	ldr	r2, [pc, #28]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800351c:	f043 0304 	orr.w	r3, r3, #4
 8003520:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003524:	4b04      	ldr	r3, [pc, #16]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352a:	4a03      	ldr	r2, [pc, #12]	@ (8003538 <HAL_RCC_OscConfig+0x504>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003534:	e014      	b.n	8003560 <HAL_RCC_OscConfig+0x52c>
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	40007000 	.word	0x40007000
 8003540:	4b9d      	ldr	r3, [pc, #628]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003546:	4a9c      	ldr	r2, [pc, #624]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003550:	4b99      	ldr	r3, [pc, #612]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003556:	4a98      	ldr	r2, [pc, #608]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 8003558:	f023 0304 	bic.w	r3, r3, #4
 800355c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d016      	beq.n	8003596 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fe ffc6 	bl	80024f8 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356e:	e00a      	b.n	8003586 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003570:	f7fe ffc2 	bl	80024f8 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357e:	4293      	cmp	r3, r2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e168      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003586:	4b8c      	ldr	r3, [pc, #560]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0ed      	beq.n	8003570 <HAL_RCC_OscConfig+0x53c>
 8003594:	e015      	b.n	80035c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003596:	f7fe ffaf 	bl	80024f8 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800359c:	e00a      	b.n	80035b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7fe ffab 	bl	80024f8 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e151      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035b4:	4b80      	ldr	r3, [pc, #512]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1ed      	bne.n	800359e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035c2:	7ffb      	ldrb	r3, [r7, #31]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d105      	bne.n	80035d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c8:	4b7b      	ldr	r3, [pc, #492]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 80035ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035cc:	4a7a      	ldr	r2, [pc, #488]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 80035ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d03c      	beq.n	800365a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d01c      	beq.n	8003622 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035e8:	4b73      	ldr	r3, [pc, #460]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 80035ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035ee:	4a72      	ldr	r2, [pc, #456]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f8:	f7fe ff7e 	bl	80024f8 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003600:	f7fe ff7a 	bl	80024f8 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e122      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003612:	4b69      	ldr	r3, [pc, #420]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 8003614:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0ef      	beq.n	8003600 <HAL_RCC_OscConfig+0x5cc>
 8003620:	e01b      	b.n	800365a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003622:	4b65      	ldr	r3, [pc, #404]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 8003624:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003628:	4a63      	ldr	r2, [pc, #396]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 800362a:	f023 0301 	bic.w	r3, r3, #1
 800362e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003632:	f7fe ff61 	bl	80024f8 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800363a:	f7fe ff5d 	bl	80024f8 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e105      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800364c:	4b5a      	ldr	r3, [pc, #360]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 800364e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1ef      	bne.n	800363a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80f9 	beq.w	8003856 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003668:	2b02      	cmp	r3, #2
 800366a:	f040 80cf 	bne.w	800380c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800366e:	4b52      	ldr	r3, [pc, #328]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f003 0203 	and.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367e:	429a      	cmp	r2, r3
 8003680:	d12c      	bne.n	80036dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368c:	3b01      	subs	r3, #1
 800368e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d123      	bne.n	80036dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800369e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d11b      	bne.n	80036dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d113      	bne.n	80036dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036be:	085b      	lsrs	r3, r3, #1
 80036c0:	3b01      	subs	r3, #1
 80036c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d109      	bne.n	80036dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	3b01      	subs	r3, #1
 80036d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d8:	429a      	cmp	r2, r3
 80036da:	d071      	beq.n	80037c0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b0c      	cmp	r3, #12
 80036e0:	d068      	beq.n	80037b4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036e2:	4b35      	ldr	r3, [pc, #212]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d105      	bne.n	80036fa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036ee:	4b32      	ldr	r3, [pc, #200]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e0ac      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036fe:	4b2e      	ldr	r3, [pc, #184]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a2d      	ldr	r2, [pc, #180]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 8003704:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003708:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800370a:	f7fe fef5 	bl	80024f8 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003712:	f7fe fef1 	bl	80024f8 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e099      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003724:	4b24      	ldr	r3, [pc, #144]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f0      	bne.n	8003712 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003730:	4b21      	ldr	r3, [pc, #132]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	4b21      	ldr	r3, [pc, #132]	@ (80037bc <HAL_RCC_OscConfig+0x788>)
 8003736:	4013      	ands	r3, r2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003740:	3a01      	subs	r2, #1
 8003742:	0112      	lsls	r2, r2, #4
 8003744:	4311      	orrs	r1, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800374a:	0212      	lsls	r2, r2, #8
 800374c:	4311      	orrs	r1, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003752:	0852      	lsrs	r2, r2, #1
 8003754:	3a01      	subs	r2, #1
 8003756:	0552      	lsls	r2, r2, #21
 8003758:	4311      	orrs	r1, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800375e:	0852      	lsrs	r2, r2, #1
 8003760:	3a01      	subs	r2, #1
 8003762:	0652      	lsls	r2, r2, #25
 8003764:	4311      	orrs	r1, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800376a:	06d2      	lsls	r2, r2, #27
 800376c:	430a      	orrs	r2, r1
 800376e:	4912      	ldr	r1, [pc, #72]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 8003770:	4313      	orrs	r3, r2
 8003772:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003774:	4b10      	ldr	r3, [pc, #64]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a0f      	ldr	r2, [pc, #60]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 800377a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800377e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003780:	4b0d      	ldr	r3, [pc, #52]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a0c      	ldr	r2, [pc, #48]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 8003786:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800378a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800378c:	f7fe feb4 	bl	80024f8 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe feb0 	bl	80024f8 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e058      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a6:	4b04      	ldr	r3, [pc, #16]	@ (80037b8 <HAL_RCC_OscConfig+0x784>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037b2:	e050      	b.n	8003856 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e04f      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
 80037b8:	40021000 	.word	0x40021000
 80037bc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c0:	4b27      	ldr	r3, [pc, #156]	@ (8003860 <HAL_RCC_OscConfig+0x82c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d144      	bne.n	8003856 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037cc:	4b24      	ldr	r3, [pc, #144]	@ (8003860 <HAL_RCC_OscConfig+0x82c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a23      	ldr	r2, [pc, #140]	@ (8003860 <HAL_RCC_OscConfig+0x82c>)
 80037d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037d8:	4b21      	ldr	r3, [pc, #132]	@ (8003860 <HAL_RCC_OscConfig+0x82c>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a20      	ldr	r2, [pc, #128]	@ (8003860 <HAL_RCC_OscConfig+0x82c>)
 80037de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037e4:	f7fe fe88 	bl	80024f8 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fe fe84 	bl	80024f8 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e02c      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fe:	4b18      	ldr	r3, [pc, #96]	@ (8003860 <HAL_RCC_OscConfig+0x82c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0x7b8>
 800380a:	e024      	b.n	8003856 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2b0c      	cmp	r3, #12
 8003810:	d01f      	beq.n	8003852 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003812:	4b13      	ldr	r3, [pc, #76]	@ (8003860 <HAL_RCC_OscConfig+0x82c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a12      	ldr	r2, [pc, #72]	@ (8003860 <HAL_RCC_OscConfig+0x82c>)
 8003818:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800381c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fe fe6b 	bl	80024f8 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003826:	f7fe fe67 	bl	80024f8 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e00f      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003838:	4b09      	ldr	r3, [pc, #36]	@ (8003860 <HAL_RCC_OscConfig+0x82c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f0      	bne.n	8003826 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003844:	4b06      	ldr	r3, [pc, #24]	@ (8003860 <HAL_RCC_OscConfig+0x82c>)
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	4905      	ldr	r1, [pc, #20]	@ (8003860 <HAL_RCC_OscConfig+0x82c>)
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_RCC_OscConfig+0x830>)
 800384c:	4013      	ands	r3, r2
 800384e:	60cb      	str	r3, [r1, #12]
 8003850:	e001      	b.n	8003856 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3720      	adds	r7, #32
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40021000 	.word	0x40021000
 8003864:	feeefffc 	.word	0xfeeefffc

08003868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e11d      	b.n	8003abc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003880:	4b90      	ldr	r3, [pc, #576]	@ (8003ac4 <HAL_RCC_ClockConfig+0x25c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d910      	bls.n	80038b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388e:	4b8d      	ldr	r3, [pc, #564]	@ (8003ac4 <HAL_RCC_ClockConfig+0x25c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 020f 	bic.w	r2, r3, #15
 8003896:	498b      	ldr	r1, [pc, #556]	@ (8003ac4 <HAL_RCC_ClockConfig+0x25c>)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b89      	ldr	r3, [pc, #548]	@ (8003ac4 <HAL_RCC_ClockConfig+0x25c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e105      	b.n	8003abc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d010      	beq.n	80038de <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	4b81      	ldr	r3, [pc, #516]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d908      	bls.n	80038de <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4b7e      	ldr	r3, [pc, #504]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	497b      	ldr	r1, [pc, #492]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d079      	beq.n	80039de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d11e      	bne.n	8003930 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038f2:	4b75      	ldr	r3, [pc, #468]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e0dc      	b.n	8003abc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003902:	f000 fa09 	bl	8003d18 <RCC_GetSysClockFreqFromPLLSource>
 8003906:	4603      	mov	r3, r0
 8003908:	4a70      	ldr	r2, [pc, #448]	@ (8003acc <HAL_RCC_ClockConfig+0x264>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d946      	bls.n	800399c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800390e:	4b6e      	ldr	r3, [pc, #440]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d140      	bne.n	800399c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800391a:	4b6b      	ldr	r3, [pc, #428]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003922:	4a69      	ldr	r2, [pc, #420]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003928:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800392a:	2380      	movs	r3, #128	@ 0x80
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	e035      	b.n	800399c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d107      	bne.n	8003948 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003938:	4b63      	ldr	r3, [pc, #396]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d115      	bne.n	8003970 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0b9      	b.n	8003abc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d107      	bne.n	8003960 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003950:	4b5d      	ldr	r3, [pc, #372]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d109      	bne.n	8003970 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0ad      	b.n	8003abc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003960:	4b59      	ldr	r3, [pc, #356]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0a5      	b.n	8003abc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003970:	f000 f8b4 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8003974:	4603      	mov	r3, r0
 8003976:	4a55      	ldr	r2, [pc, #340]	@ (8003acc <HAL_RCC_ClockConfig+0x264>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d90f      	bls.n	800399c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800397c:	4b52      	ldr	r3, [pc, #328]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d109      	bne.n	800399c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003988:	4b4f      	ldr	r3, [pc, #316]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003990:	4a4d      	ldr	r2, [pc, #308]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003996:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003998:	2380      	movs	r3, #128	@ 0x80
 800399a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800399c:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f023 0203 	bic.w	r2, r3, #3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4947      	ldr	r1, [pc, #284]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ae:	f7fe fda3 	bl	80024f8 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b4:	e00a      	b.n	80039cc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b6:	f7fe fd9f 	bl	80024f8 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e077      	b.n	8003abc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039cc:	4b3e      	ldr	r3, [pc, #248]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 020c 	and.w	r2, r3, #12
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	429a      	cmp	r2, r3
 80039dc:	d1eb      	bne.n	80039b6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b80      	cmp	r3, #128	@ 0x80
 80039e2:	d105      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80039e4:	4b38      	ldr	r3, [pc, #224]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4a37      	ldr	r2, [pc, #220]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 80039ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039ee:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d010      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	4b31      	ldr	r3, [pc, #196]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d208      	bcs.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	492b      	ldr	r1, [pc, #172]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a1e:	4b29      	ldr	r3, [pc, #164]	@ (8003ac4 <HAL_RCC_ClockConfig+0x25c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d210      	bcs.n	8003a4e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2c:	4b25      	ldr	r3, [pc, #148]	@ (8003ac4 <HAL_RCC_ClockConfig+0x25c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f023 020f 	bic.w	r2, r3, #15
 8003a34:	4923      	ldr	r1, [pc, #140]	@ (8003ac4 <HAL_RCC_ClockConfig+0x25c>)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3c:	4b21      	ldr	r3, [pc, #132]	@ (8003ac4 <HAL_RCC_ClockConfig+0x25c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d001      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e036      	b.n	8003abc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	4918      	ldr	r1, [pc, #96]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d009      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a78:	4b13      	ldr	r3, [pc, #76]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4910      	ldr	r1, [pc, #64]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a8c:	f000 f826 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8003a90:	4602      	mov	r2, r0
 8003a92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac8 <HAL_RCC_ClockConfig+0x260>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	091b      	lsrs	r3, r3, #4
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	490c      	ldr	r1, [pc, #48]	@ (8003ad0 <HAL_RCC_ClockConfig+0x268>)
 8003a9e:	5ccb      	ldrb	r3, [r1, r3]
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad4 <HAL_RCC_ClockConfig+0x26c>)
 8003aaa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <HAL_RCC_ClockConfig+0x270>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe fcd1 	bl	8002458 <HAL_InitTick>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	73fb      	strb	r3, [r7, #15]

  return status;
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40022000 	.word	0x40022000
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	04c4b400 	.word	0x04c4b400
 8003ad0:	0800a210 	.word	0x0800a210
 8003ad4:	20000040 	.word	0x20000040
 8003ad8:	20000044 	.word	0x20000044

08003adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b089      	sub	sp, #36	@ 0x24
 8003ae0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aea:	4b3e      	ldr	r3, [pc, #248]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003af4:	4b3b      	ldr	r3, [pc, #236]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0x34>
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	d121      	bne.n	8003b4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d11e      	bne.n	8003b4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b10:	4b34      	ldr	r3, [pc, #208]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d107      	bne.n	8003b2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b1c:	4b31      	ldr	r3, [pc, #196]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	61fb      	str	r3, [r7, #28]
 8003b2a:	e005      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b38:	4a2b      	ldr	r2, [pc, #172]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10d      	bne.n	8003b64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b4c:	e00a      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d102      	bne.n	8003b5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b54:	4b25      	ldr	r3, [pc, #148]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x110>)
 8003b56:	61bb      	str	r3, [r7, #24]
 8003b58:	e004      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b60:	4b23      	ldr	r3, [pc, #140]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	2b0c      	cmp	r3, #12
 8003b68:	d134      	bne.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d003      	beq.n	8003b82 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d003      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0xac>
 8003b80:	e005      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b82:	4b1a      	ldr	r3, [pc, #104]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x110>)
 8003b84:	617b      	str	r3, [r7, #20]
      break;
 8003b86:	e005      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b88:	4b19      	ldr	r3, [pc, #100]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b8a:	617b      	str	r3, [r7, #20]
      break;
 8003b8c:	e002      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	617b      	str	r3, [r7, #20]
      break;
 8003b92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b94:	4b13      	ldr	r3, [pc, #76]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ba2:	4b10      	ldr	r3, [pc, #64]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	fb03 f202 	mul.w	r2, r3, r2
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bba:	4b0a      	ldr	r3, [pc, #40]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	0e5b      	lsrs	r3, r3, #25
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bd4:	69bb      	ldr	r3, [r7, #24]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3724      	adds	r7, #36	@ 0x24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
 8003be8:	0800a228 	.word	0x0800a228
 8003bec:	00f42400 	.word	0x00f42400
 8003bf0:	007a1200 	.word	0x007a1200

08003bf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf8:	4b03      	ldr	r3, [pc, #12]	@ (8003c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000040 	.word	0x20000040

08003c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c10:	f7ff fff0 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	4904      	ldr	r1, [pc, #16]	@ (8003c34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c22:	5ccb      	ldrb	r3, [r1, r3]
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40021000 	.word	0x40021000
 8003c34:	0800a220 	.word	0x0800a220

08003c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c3c:	f7ff ffda 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c40:	4602      	mov	r2, r0
 8003c42:	4b06      	ldr	r3, [pc, #24]	@ (8003c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	0adb      	lsrs	r3, r3, #11
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	4904      	ldr	r1, [pc, #16]	@ (8003c60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c4e:	5ccb      	ldrb	r3, [r1, r3]
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	0800a220 	.word	0x0800a220

08003c64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c70:	4b27      	ldr	r3, [pc, #156]	@ (8003d10 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c7c:	f7ff f906 	bl	8002e8c <HAL_PWREx_GetVoltageRange>
 8003c80:	6178      	str	r0, [r7, #20]
 8003c82:	e014      	b.n	8003cae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c84:	4b22      	ldr	r3, [pc, #136]	@ (8003d10 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c88:	4a21      	ldr	r2, [pc, #132]	@ (8003d10 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c90:	4b1f      	ldr	r3, [pc, #124]	@ (8003d10 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c9c:	f7ff f8f6 	bl	8002e8c <HAL_PWREx_GetVoltageRange>
 8003ca0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d10 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca6:	4a1a      	ldr	r2, [pc, #104]	@ (8003d10 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ca8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cb4:	d10b      	bne.n	8003cce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b80      	cmp	r3, #128	@ 0x80
 8003cba:	d913      	bls.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2ba0      	cmp	r3, #160	@ 0xa0
 8003cc0:	d902      	bls.n	8003cc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	e00d      	b.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cc8:	2301      	movs	r3, #1
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	e00a      	b.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8003cd2:	d902      	bls.n	8003cda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	e004      	b.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b70      	cmp	r3, #112	@ 0x70
 8003cde:	d101      	bne.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f023 020f 	bic.w	r2, r3, #15
 8003cec:	4909      	ldr	r1, [pc, #36]	@ (8003d14 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cf4:	4b07      	ldr	r3, [pc, #28]	@ (8003d14 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d001      	beq.n	8003d06 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000
 8003d14:	40022000 	.word	0x40022000

08003d18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d00b      	beq.n	8003d46 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d825      	bhi.n	8003d80 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d008      	beq.n	8003d4c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d11f      	bne.n	8003d80 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003d40:	4b25      	ldr	r3, [pc, #148]	@ (8003dd8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d42:	613b      	str	r3, [r7, #16]
    break;
 8003d44:	e01f      	b.n	8003d86 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003d46:	4b25      	ldr	r3, [pc, #148]	@ (8003ddc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003d48:	613b      	str	r3, [r7, #16]
    break;
 8003d4a:	e01c      	b.n	8003d86 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d4c:	4b21      	ldr	r3, [pc, #132]	@ (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d107      	bne.n	8003d68 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d58:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d5e:	0a1b      	lsrs	r3, r3, #8
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	e005      	b.n	8003d74 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d68:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	091b      	lsrs	r3, r3, #4
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003d74:	4a1a      	ldr	r2, [pc, #104]	@ (8003de0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7c:	613b      	str	r3, [r7, #16]
    break;
 8003d7e:	e002      	b.n	8003d86 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	613b      	str	r3, [r7, #16]
    break;
 8003d84:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d86:	4b13      	ldr	r3, [pc, #76]	@ (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	3301      	adds	r3, #1
 8003d92:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d94:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	0a1b      	lsrs	r3, r3, #8
 8003d9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	fb03 f202 	mul.w	r2, r3, r2
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003daa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dac:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	0e5b      	lsrs	r3, r3, #25
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	3301      	adds	r3, #1
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003dc6:	683b      	ldr	r3, [r7, #0]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	371c      	adds	r7, #28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	00f42400 	.word	0x00f42400
 8003ddc:	007a1200 	.word	0x007a1200
 8003de0:	0800a228 	.word	0x0800a228

08003de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dec:	2300      	movs	r3, #0
 8003dee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003df0:	2300      	movs	r3, #0
 8003df2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d040      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e04:	2b80      	cmp	r3, #128	@ 0x80
 8003e06:	d02a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e08:	2b80      	cmp	r3, #128	@ 0x80
 8003e0a:	d825      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e0c:	2b60      	cmp	r3, #96	@ 0x60
 8003e0e:	d026      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e10:	2b60      	cmp	r3, #96	@ 0x60
 8003e12:	d821      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e14:	2b40      	cmp	r3, #64	@ 0x40
 8003e16:	d006      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003e18:	2b40      	cmp	r3, #64	@ 0x40
 8003e1a:	d81d      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d009      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d010      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003e24:	e018      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e26:	4b89      	ldr	r3, [pc, #548]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	4a88      	ldr	r2, [pc, #544]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e30:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e32:	e015      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fb02 	bl	8004444 <RCCEx_PLLSAI1_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e44:	e00c      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3320      	adds	r3, #32
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fbed 	bl	800462c <RCCEx_PLLSAI2_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e56:	e003      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	74fb      	strb	r3, [r7, #19]
      break;
 8003e5c:	e000      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e60:	7cfb      	ldrb	r3, [r7, #19]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10b      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e66:	4b79      	ldr	r3, [pc, #484]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e6c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e74:	4975      	ldr	r1, [pc, #468]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003e7c:	e001      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7e:	7cfb      	ldrb	r3, [r7, #19]
 8003e80:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d047      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e96:	d030      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e9c:	d82a      	bhi.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ea2:	d02a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ea4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ea8:	d824      	bhi.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003eaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eae:	d008      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eb4:	d81e      	bhi.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ebe:	d010      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003ec0:	e018      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ec2:	4b62      	ldr	r3, [pc, #392]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	4a61      	ldr	r2, [pc, #388]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ecc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ece:	e015      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fab4 	bl	8004444 <RCCEx_PLLSAI1_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ee0:	e00c      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3320      	adds	r3, #32
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fb9f 	bl	800462c <RCCEx_PLLSAI2_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ef2:	e003      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	74fb      	strb	r3, [r7, #19]
      break;
 8003ef8:	e000      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10b      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f02:	4b52      	ldr	r3, [pc, #328]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f10:	494e      	ldr	r1, [pc, #312]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003f18:	e001      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1a:	7cfb      	ldrb	r3, [r7, #19]
 8003f1c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 809f 	beq.w	800406a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f30:	4b46      	ldr	r3, [pc, #280]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f40:	2300      	movs	r3, #0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00d      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f46:	4b41      	ldr	r3, [pc, #260]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4a:	4a40      	ldr	r2, [pc, #256]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f50:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f52:	4b3e      	ldr	r3, [pc, #248]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f5a:	60bb      	str	r3, [r7, #8]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f62:	4b3b      	ldr	r3, [pc, #236]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a3a      	ldr	r2, [pc, #232]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f6e:	f7fe fac3 	bl	80024f8 <HAL_GetTick>
 8003f72:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f74:	e009      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f76:	f7fe fabf 	bl	80024f8 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d902      	bls.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	74fb      	strb	r3, [r7, #19]
        break;
 8003f88:	e005      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f8a:	4b31      	ldr	r3, [pc, #196]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0ef      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003f96:	7cfb      	ldrb	r3, [r7, #19]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d15b      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d01f      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d019      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fba:	4b24      	ldr	r3, [pc, #144]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fc4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fc6:	4b21      	ldr	r3, [pc, #132]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fe2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fe6:	4a19      	ldr	r2, [pc, #100]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d016      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fe fa7e 	bl	80024f8 <HAL_GetTick>
 8003ffc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ffe:	e00b      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004000:	f7fe fa7a 	bl	80024f8 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800400e:	4293      	cmp	r3, r2
 8004010:	d902      	bls.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	74fb      	strb	r3, [r7, #19]
            break;
 8004016:	e006      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004018:	4b0c      	ldr	r3, [pc, #48]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0ec      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004026:	7cfb      	ldrb	r3, [r7, #19]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10c      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800402c:	4b07      	ldr	r3, [pc, #28]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004032:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800403c:	4903      	ldr	r1, [pc, #12]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004044:	e008      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004046:	7cfb      	ldrb	r3, [r7, #19]
 8004048:	74bb      	strb	r3, [r7, #18]
 800404a:	e005      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800404c:	40021000 	.word	0x40021000
 8004050:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	7cfb      	ldrb	r3, [r7, #19]
 8004056:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004058:	7c7b      	ldrb	r3, [r7, #17]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d105      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800405e:	4ba0      	ldr	r3, [pc, #640]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004062:	4a9f      	ldr	r2, [pc, #636]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004064:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004068:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004076:	4b9a      	ldr	r3, [pc, #616]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407c:	f023 0203 	bic.w	r2, r3, #3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004084:	4996      	ldr	r1, [pc, #600]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004098:	4b91      	ldr	r3, [pc, #580]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409e:	f023 020c 	bic.w	r2, r3, #12
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	498e      	ldr	r1, [pc, #568]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040ba:	4b89      	ldr	r3, [pc, #548]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c8:	4985      	ldr	r1, [pc, #532]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040dc:	4b80      	ldr	r3, [pc, #512]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ea:	497d      	ldr	r1, [pc, #500]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040fe:	4b78      	ldr	r3, [pc, #480]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004104:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800410c:	4974      	ldr	r1, [pc, #464]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004120:	4b6f      	ldr	r3, [pc, #444]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004126:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800412e:	496c      	ldr	r1, [pc, #432]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004142:	4b67      	ldr	r3, [pc, #412]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004148:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004150:	4963      	ldr	r1, [pc, #396]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004164:	4b5e      	ldr	r3, [pc, #376]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004172:	495b      	ldr	r1, [pc, #364]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004186:	4b56      	ldr	r3, [pc, #344]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004194:	4952      	ldr	r1, [pc, #328]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041a8:	4b4d      	ldr	r3, [pc, #308]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b6:	494a      	ldr	r1, [pc, #296]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041ca:	4b45      	ldr	r3, [pc, #276]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d8:	4941      	ldr	r1, [pc, #260]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041ec:	4b3c      	ldr	r3, [pc, #240]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041f2:	f023 0203 	bic.w	r2, r3, #3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041fa:	4939      	ldr	r1, [pc, #228]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d028      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800420e:	4b34      	ldr	r3, [pc, #208]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004214:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800421c:	4930      	ldr	r1, [pc, #192]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004228:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800422c:	d106      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800422e:	4b2c      	ldr	r3, [pc, #176]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	4a2b      	ldr	r2, [pc, #172]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004234:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004238:	60d3      	str	r3, [r2, #12]
 800423a:	e011      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004240:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004244:	d10c      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3304      	adds	r3, #4
 800424a:	2101      	movs	r1, #1
 800424c:	4618      	mov	r0, r3
 800424e:	f000 f8f9 	bl	8004444 <RCCEx_PLLSAI1_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004256:	7cfb      	ldrb	r3, [r7, #19]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800425c:	7cfb      	ldrb	r3, [r7, #19]
 800425e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d04d      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004270:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004274:	d108      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004276:	4b1a      	ldr	r3, [pc, #104]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004278:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800427c:	4a18      	ldr	r2, [pc, #96]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800427e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004282:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004286:	e012      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004288:	4b15      	ldr	r3, [pc, #84]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800428a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800428e:	4a14      	ldr	r2, [pc, #80]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004290:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004294:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004298:	4b11      	ldr	r3, [pc, #68]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042a6:	490e      	ldr	r1, [pc, #56]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042b6:	d106      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b8:	4b09      	ldr	r3, [pc, #36]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4a08      	ldr	r2, [pc, #32]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042c2:	60d3      	str	r3, [r2, #12]
 80042c4:	e020      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042ce:	d109      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042d0:	4b03      	ldr	r3, [pc, #12]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4a02      	ldr	r2, [pc, #8]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042da:	60d3      	str	r3, [r2, #12]
 80042dc:	e014      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80042de:	bf00      	nop
 80042e0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042ec:	d10c      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3304      	adds	r3, #4
 80042f2:	2101      	movs	r1, #1
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 f8a5 	bl	8004444 <RCCEx_PLLSAI1_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042fe:	7cfb      	ldrb	r3, [r7, #19]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d028      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004314:	4b4a      	ldr	r3, [pc, #296]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004322:	4947      	ldr	r1, [pc, #284]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800432e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004332:	d106      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004334:	4b42      	ldr	r3, [pc, #264]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a41      	ldr	r2, [pc, #260]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800433a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800433e:	60d3      	str	r3, [r2, #12]
 8004340:	e011      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004346:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800434a:	d10c      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3304      	adds	r3, #4
 8004350:	2101      	movs	r1, #1
 8004352:	4618      	mov	r0, r3
 8004354:	f000 f876 	bl	8004444 <RCCEx_PLLSAI1_Config>
 8004358:	4603      	mov	r3, r0
 800435a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800435c:	7cfb      	ldrb	r3, [r7, #19]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004362:	7cfb      	ldrb	r3, [r7, #19]
 8004364:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d01e      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004372:	4b33      	ldr	r3, [pc, #204]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004378:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004382:	492f      	ldr	r1, [pc, #188]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004390:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004394:	d10c      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3304      	adds	r3, #4
 800439a:	2102      	movs	r1, #2
 800439c:	4618      	mov	r0, r3
 800439e:	f000 f851 	bl	8004444 <RCCEx_PLLSAI1_Config>
 80043a2:	4603      	mov	r3, r0
 80043a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043a6:	7cfb      	ldrb	r3, [r7, #19]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80043ac:	7cfb      	ldrb	r3, [r7, #19]
 80043ae:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00b      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043bc:	4b20      	ldr	r3, [pc, #128]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043c2:	f023 0204 	bic.w	r2, r3, #4
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043cc:	491c      	ldr	r1, [pc, #112]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00b      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80043e0:	4b17      	ldr	r3, [pc, #92]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043e6:	f023 0218 	bic.w	r2, r3, #24
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f0:	4913      	ldr	r1, [pc, #76]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d017      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004404:	4b0e      	ldr	r3, [pc, #56]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004406:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800440a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004414:	490a      	ldr	r1, [pc, #40]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004422:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004426:	d105      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004428:	4b05      	ldr	r3, [pc, #20]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	4a04      	ldr	r2, [pc, #16]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800442e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004432:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004434:	7cbb      	ldrb	r3, [r7, #18]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40021000 	.word	0x40021000

08004444 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004452:	4b72      	ldr	r3, [pc, #456]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00e      	beq.n	800447c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800445e:	4b6f      	ldr	r3, [pc, #444]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 0203 	and.w	r2, r3, #3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d103      	bne.n	8004476 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
       ||
 8004472:	2b00      	cmp	r3, #0
 8004474:	d142      	bne.n	80044fc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
 800447a:	e03f      	b.n	80044fc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d018      	beq.n	80044b6 <RCCEx_PLLSAI1_Config+0x72>
 8004484:	2b03      	cmp	r3, #3
 8004486:	d825      	bhi.n	80044d4 <RCCEx_PLLSAI1_Config+0x90>
 8004488:	2b01      	cmp	r3, #1
 800448a:	d002      	beq.n	8004492 <RCCEx_PLLSAI1_Config+0x4e>
 800448c:	2b02      	cmp	r3, #2
 800448e:	d009      	beq.n	80044a4 <RCCEx_PLLSAI1_Config+0x60>
 8004490:	e020      	b.n	80044d4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004492:	4b62      	ldr	r3, [pc, #392]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d11d      	bne.n	80044da <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a2:	e01a      	b.n	80044da <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044a4:	4b5d      	ldr	r3, [pc, #372]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d116      	bne.n	80044de <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b4:	e013      	b.n	80044de <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044b6:	4b59      	ldr	r3, [pc, #356]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10f      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044c2:	4b56      	ldr	r3, [pc, #344]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044d2:	e006      	b.n	80044e2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]
      break;
 80044d8:	e004      	b.n	80044e4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044da:	bf00      	nop
 80044dc:	e002      	b.n	80044e4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044de:	bf00      	nop
 80044e0:	e000      	b.n	80044e4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d108      	bne.n	80044fc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80044ea:	4b4c      	ldr	r3, [pc, #304]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f023 0203 	bic.w	r2, r3, #3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4949      	ldr	r1, [pc, #292]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f040 8086 	bne.w	8004610 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004504:	4b45      	ldr	r3, [pc, #276]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a44      	ldr	r2, [pc, #272]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 800450a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800450e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004510:	f7fd fff2 	bl	80024f8 <HAL_GetTick>
 8004514:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004516:	e009      	b.n	800452c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004518:	f7fd ffee 	bl	80024f8 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d902      	bls.n	800452c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	73fb      	strb	r3, [r7, #15]
        break;
 800452a:	e005      	b.n	8004538 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800452c:	4b3b      	ldr	r3, [pc, #236]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1ef      	bne.n	8004518 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d168      	bne.n	8004610 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d113      	bne.n	800456c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004544:	4b35      	ldr	r3, [pc, #212]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	4b35      	ldr	r3, [pc, #212]	@ (8004620 <RCCEx_PLLSAI1_Config+0x1dc>)
 800454a:	4013      	ands	r3, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6892      	ldr	r2, [r2, #8]
 8004550:	0211      	lsls	r1, r2, #8
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	68d2      	ldr	r2, [r2, #12]
 8004556:	06d2      	lsls	r2, r2, #27
 8004558:	4311      	orrs	r1, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6852      	ldr	r2, [r2, #4]
 800455e:	3a01      	subs	r2, #1
 8004560:	0112      	lsls	r2, r2, #4
 8004562:	430a      	orrs	r2, r1
 8004564:	492d      	ldr	r1, [pc, #180]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004566:	4313      	orrs	r3, r2
 8004568:	610b      	str	r3, [r1, #16]
 800456a:	e02d      	b.n	80045c8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d115      	bne.n	800459e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004572:	4b2a      	ldr	r3, [pc, #168]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	4b2b      	ldr	r3, [pc, #172]	@ (8004624 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004578:	4013      	ands	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6892      	ldr	r2, [r2, #8]
 800457e:	0211      	lsls	r1, r2, #8
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6912      	ldr	r2, [r2, #16]
 8004584:	0852      	lsrs	r2, r2, #1
 8004586:	3a01      	subs	r2, #1
 8004588:	0552      	lsls	r2, r2, #21
 800458a:	4311      	orrs	r1, r2
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6852      	ldr	r2, [r2, #4]
 8004590:	3a01      	subs	r2, #1
 8004592:	0112      	lsls	r2, r2, #4
 8004594:	430a      	orrs	r2, r1
 8004596:	4921      	ldr	r1, [pc, #132]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004598:	4313      	orrs	r3, r2
 800459a:	610b      	str	r3, [r1, #16]
 800459c:	e014      	b.n	80045c8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800459e:	4b1f      	ldr	r3, [pc, #124]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	4b21      	ldr	r3, [pc, #132]	@ (8004628 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6892      	ldr	r2, [r2, #8]
 80045aa:	0211      	lsls	r1, r2, #8
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6952      	ldr	r2, [r2, #20]
 80045b0:	0852      	lsrs	r2, r2, #1
 80045b2:	3a01      	subs	r2, #1
 80045b4:	0652      	lsls	r2, r2, #25
 80045b6:	4311      	orrs	r1, r2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6852      	ldr	r2, [r2, #4]
 80045bc:	3a01      	subs	r2, #1
 80045be:	0112      	lsls	r2, r2, #4
 80045c0:	430a      	orrs	r2, r1
 80045c2:	4916      	ldr	r1, [pc, #88]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045c8:	4b14      	ldr	r3, [pc, #80]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a13      	ldr	r2, [pc, #76]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d4:	f7fd ff90 	bl	80024f8 <HAL_GetTick>
 80045d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045da:	e009      	b.n	80045f0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045dc:	f7fd ff8c 	bl	80024f8 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d902      	bls.n	80045f0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	73fb      	strb	r3, [r7, #15]
          break;
 80045ee:	e005      	b.n	80045fc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045f0:	4b0a      	ldr	r3, [pc, #40]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0ef      	beq.n	80045dc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004602:	4b06      	ldr	r3, [pc, #24]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	4904      	ldr	r1, [pc, #16]	@ (800461c <RCCEx_PLLSAI1_Config+0x1d8>)
 800460c:	4313      	orrs	r3, r2
 800460e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004610:	7bfb      	ldrb	r3, [r7, #15]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40021000 	.word	0x40021000
 8004620:	07ff800f 	.word	0x07ff800f
 8004624:	ff9f800f 	.word	0xff9f800f
 8004628:	f9ff800f 	.word	0xf9ff800f

0800462c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800463a:	4b72      	ldr	r3, [pc, #456]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00e      	beq.n	8004664 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004646:	4b6f      	ldr	r3, [pc, #444]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f003 0203 	and.w	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d103      	bne.n	800465e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
       ||
 800465a:	2b00      	cmp	r3, #0
 800465c:	d142      	bne.n	80046e4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	73fb      	strb	r3, [r7, #15]
 8004662:	e03f      	b.n	80046e4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b03      	cmp	r3, #3
 800466a:	d018      	beq.n	800469e <RCCEx_PLLSAI2_Config+0x72>
 800466c:	2b03      	cmp	r3, #3
 800466e:	d825      	bhi.n	80046bc <RCCEx_PLLSAI2_Config+0x90>
 8004670:	2b01      	cmp	r3, #1
 8004672:	d002      	beq.n	800467a <RCCEx_PLLSAI2_Config+0x4e>
 8004674:	2b02      	cmp	r3, #2
 8004676:	d009      	beq.n	800468c <RCCEx_PLLSAI2_Config+0x60>
 8004678:	e020      	b.n	80046bc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800467a:	4b62      	ldr	r3, [pc, #392]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d11d      	bne.n	80046c2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800468a:	e01a      	b.n	80046c2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800468c:	4b5d      	ldr	r3, [pc, #372]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004694:	2b00      	cmp	r3, #0
 8004696:	d116      	bne.n	80046c6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800469c:	e013      	b.n	80046c6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800469e:	4b59      	ldr	r3, [pc, #356]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10f      	bne.n	80046ca <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046aa:	4b56      	ldr	r3, [pc, #344]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d109      	bne.n	80046ca <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046ba:	e006      	b.n	80046ca <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
      break;
 80046c0:	e004      	b.n	80046cc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80046c2:	bf00      	nop
 80046c4:	e002      	b.n	80046cc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80046c6:	bf00      	nop
 80046c8:	e000      	b.n	80046cc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80046ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d108      	bne.n	80046e4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80046d2:	4b4c      	ldr	r3, [pc, #304]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f023 0203 	bic.w	r2, r3, #3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4949      	ldr	r1, [pc, #292]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f040 8086 	bne.w	80047f8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046ec:	4b45      	ldr	r3, [pc, #276]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a44      	ldr	r2, [pc, #272]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f8:	f7fd fefe 	bl	80024f8 <HAL_GetTick>
 80046fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046fe:	e009      	b.n	8004714 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004700:	f7fd fefa 	bl	80024f8 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d902      	bls.n	8004714 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	73fb      	strb	r3, [r7, #15]
        break;
 8004712:	e005      	b.n	8004720 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004714:	4b3b      	ldr	r3, [pc, #236]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1ef      	bne.n	8004700 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d168      	bne.n	80047f8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d113      	bne.n	8004754 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800472c:	4b35      	ldr	r3, [pc, #212]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 800472e:	695a      	ldr	r2, [r3, #20]
 8004730:	4b35      	ldr	r3, [pc, #212]	@ (8004808 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004732:	4013      	ands	r3, r2
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6892      	ldr	r2, [r2, #8]
 8004738:	0211      	lsls	r1, r2, #8
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68d2      	ldr	r2, [r2, #12]
 800473e:	06d2      	lsls	r2, r2, #27
 8004740:	4311      	orrs	r1, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6852      	ldr	r2, [r2, #4]
 8004746:	3a01      	subs	r2, #1
 8004748:	0112      	lsls	r2, r2, #4
 800474a:	430a      	orrs	r2, r1
 800474c:	492d      	ldr	r1, [pc, #180]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 800474e:	4313      	orrs	r3, r2
 8004750:	614b      	str	r3, [r1, #20]
 8004752:	e02d      	b.n	80047b0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d115      	bne.n	8004786 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800475a:	4b2a      	ldr	r3, [pc, #168]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 800475c:	695a      	ldr	r2, [r3, #20]
 800475e:	4b2b      	ldr	r3, [pc, #172]	@ (800480c <RCCEx_PLLSAI2_Config+0x1e0>)
 8004760:	4013      	ands	r3, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6892      	ldr	r2, [r2, #8]
 8004766:	0211      	lsls	r1, r2, #8
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6912      	ldr	r2, [r2, #16]
 800476c:	0852      	lsrs	r2, r2, #1
 800476e:	3a01      	subs	r2, #1
 8004770:	0552      	lsls	r2, r2, #21
 8004772:	4311      	orrs	r1, r2
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6852      	ldr	r2, [r2, #4]
 8004778:	3a01      	subs	r2, #1
 800477a:	0112      	lsls	r2, r2, #4
 800477c:	430a      	orrs	r2, r1
 800477e:	4921      	ldr	r1, [pc, #132]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004780:	4313      	orrs	r3, r2
 8004782:	614b      	str	r3, [r1, #20]
 8004784:	e014      	b.n	80047b0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004786:	4b1f      	ldr	r3, [pc, #124]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004788:	695a      	ldr	r2, [r3, #20]
 800478a:	4b21      	ldr	r3, [pc, #132]	@ (8004810 <RCCEx_PLLSAI2_Config+0x1e4>)
 800478c:	4013      	ands	r3, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6892      	ldr	r2, [r2, #8]
 8004792:	0211      	lsls	r1, r2, #8
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6952      	ldr	r2, [r2, #20]
 8004798:	0852      	lsrs	r2, r2, #1
 800479a:	3a01      	subs	r2, #1
 800479c:	0652      	lsls	r2, r2, #25
 800479e:	4311      	orrs	r1, r2
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6852      	ldr	r2, [r2, #4]
 80047a4:	3a01      	subs	r2, #1
 80047a6:	0112      	lsls	r2, r2, #4
 80047a8:	430a      	orrs	r2, r1
 80047aa:	4916      	ldr	r1, [pc, #88]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047b0:	4b14      	ldr	r3, [pc, #80]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a13      	ldr	r2, [pc, #76]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047bc:	f7fd fe9c 	bl	80024f8 <HAL_GetTick>
 80047c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047c2:	e009      	b.n	80047d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047c4:	f7fd fe98 	bl	80024f8 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d902      	bls.n	80047d8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	73fb      	strb	r3, [r7, #15]
          break;
 80047d6:	e005      	b.n	80047e4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0ef      	beq.n	80047c4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047ea:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	4904      	ldr	r1, [pc, #16]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40021000 	.word	0x40021000
 8004808:	07ff800f 	.word	0x07ff800f
 800480c:	ff9f800f 	.word	0xff9f800f
 8004810:	f9ff800f 	.word	0xf9ff800f

08004814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e095      	b.n	8004952 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482a:	2b00      	cmp	r3, #0
 800482c:	d108      	bne.n	8004840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004836:	d009      	beq.n	800484c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	61da      	str	r2, [r3, #28]
 800483e:	e005      	b.n	800484c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fd fc9c 	bl	80021a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004882:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800488c:	d902      	bls.n	8004894 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800488e:	2300      	movs	r3, #0
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	e002      	b.n	800489a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004898:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80048a2:	d007      	beq.n	80048b4 <HAL_SPI_Init+0xa0>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048ac:	d002      	beq.n	80048b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f6:	ea42 0103 	orr.w	r1, r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	0c1b      	lsrs	r3, r3, #16
 8004910:	f003 0204 	and.w	r2, r3, #4
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004930:	ea42 0103 	orr.w	r1, r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b088      	sub	sp, #32
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	4613      	mov	r3, r2
 8004968:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_SPI_Transmit+0x22>
 8004978:	2302      	movs	r3, #2
 800497a:	e15f      	b.n	8004c3c <HAL_SPI_Transmit+0x2e2>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004984:	f7fd fdb8 	bl	80024f8 <HAL_GetTick>
 8004988:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b01      	cmp	r3, #1
 8004998:	d002      	beq.n	80049a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800499a:	2302      	movs	r3, #2
 800499c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800499e:	e148      	b.n	8004c32 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_SPI_Transmit+0x52>
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d102      	bne.n	80049b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049b0:	e13f      	b.n	8004c32 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2203      	movs	r2, #3
 80049b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	88fa      	ldrh	r2, [r7, #6]
 80049ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	88fa      	ldrh	r2, [r7, #6]
 80049d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049fc:	d10f      	bne.n	8004a1e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a28:	2b40      	cmp	r3, #64	@ 0x40
 8004a2a:	d007      	beq.n	8004a3c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a44:	d94f      	bls.n	8004ae6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_SPI_Transmit+0xfa>
 8004a4e:	8afb      	ldrh	r3, [r7, #22]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d142      	bne.n	8004ada <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a58:	881a      	ldrh	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a64:	1c9a      	adds	r2, r3, #2
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a78:	e02f      	b.n	8004ada <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d112      	bne.n	8004aae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8c:	881a      	ldrh	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a98:	1c9a      	adds	r2, r3, #2
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004aac:	e015      	b.n	8004ada <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aae:	f7fd fd23 	bl	80024f8 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d803      	bhi.n	8004ac6 <HAL_SPI_Transmit+0x16c>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac4:	d102      	bne.n	8004acc <HAL_SPI_Transmit+0x172>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d106      	bne.n	8004ada <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004ad8:	e0ab      	b.n	8004c32 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1ca      	bne.n	8004a7a <HAL_SPI_Transmit+0x120>
 8004ae4:	e080      	b.n	8004be8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_SPI_Transmit+0x19a>
 8004aee:	8afb      	ldrh	r3, [r7, #22]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d174      	bne.n	8004bde <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d912      	bls.n	8004b24 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b02:	881a      	ldrh	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0e:	1c9a      	adds	r2, r3, #2
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3b02      	subs	r3, #2
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b22:	e05c      	b.n	8004bde <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	7812      	ldrb	r2, [r2, #0]
 8004b30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b4a:	e048      	b.n	8004bde <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d12b      	bne.n	8004bb2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d912      	bls.n	8004b8a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b68:	881a      	ldrh	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b74:	1c9a      	adds	r2, r3, #2
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b02      	subs	r3, #2
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b88:	e029      	b.n	8004bde <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	330c      	adds	r3, #12
 8004b94:	7812      	ldrb	r2, [r2, #0]
 8004b96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bb0:	e015      	b.n	8004bde <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bb2:	f7fd fca1 	bl	80024f8 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d803      	bhi.n	8004bca <HAL_SPI_Transmit+0x270>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc8:	d102      	bne.n	8004bd0 <HAL_SPI_Transmit+0x276>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d106      	bne.n	8004bde <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004bdc:	e029      	b.n	8004c32 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1b1      	bne.n	8004b4c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	6839      	ldr	r1, [r7, #0]
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 f947 	bl	8004e80 <SPI_EndRxTxTransaction>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10a      	bne.n	8004c1c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c06:	2300      	movs	r3, #0
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	77fb      	strb	r3, [r7, #31]
 8004c28:	e003      	b.n	8004c32 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004c3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3720      	adds	r7, #32
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	4613      	mov	r3, r2
 8004c52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c54:	f7fd fc50 	bl	80024f8 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5c:	1a9b      	subs	r3, r3, r2
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	4413      	add	r3, r2
 8004c62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c64:	f7fd fc48 	bl	80024f8 <HAL_GetTick>
 8004c68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c6a:	4b39      	ldr	r3, [pc, #228]	@ (8004d50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	015b      	lsls	r3, r3, #5
 8004c70:	0d1b      	lsrs	r3, r3, #20
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	fb02 f303 	mul.w	r3, r2, r3
 8004c78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c7a:	e054      	b.n	8004d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d050      	beq.n	8004d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c84:	f7fd fc38 	bl	80024f8 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d902      	bls.n	8004c9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d13d      	bne.n	8004d16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ca8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cb2:	d111      	bne.n	8004cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cbc:	d004      	beq.n	8004cc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc6:	d107      	bne.n	8004cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce0:	d10f      	bne.n	8004d02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e017      	b.n	8004d46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	bf0c      	ite	eq
 8004d36:	2301      	moveq	r3, #1
 8004d38:	2300      	movne	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d19b      	bne.n	8004c7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3720      	adds	r7, #32
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000040 	.word	0x20000040

08004d54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08a      	sub	sp, #40	@ 0x28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004d66:	f7fd fbc7 	bl	80024f8 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	4413      	add	r3, r2
 8004d74:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004d76:	f7fd fbbf 	bl	80024f8 <HAL_GetTick>
 8004d7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	330c      	adds	r3, #12
 8004d82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d84:	4b3d      	ldr	r3, [pc, #244]	@ (8004e7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	00da      	lsls	r2, r3, #3
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	0d1b      	lsrs	r3, r3, #20
 8004d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d96:	fb02 f303 	mul.w	r3, r2, r3
 8004d9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d9c:	e060      	b.n	8004e60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004da4:	d107      	bne.n	8004db6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d104      	bne.n	8004db6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004db4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d050      	beq.n	8004e60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dbe:	f7fd fb9b 	bl	80024f8 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d902      	bls.n	8004dd4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d13d      	bne.n	8004e50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004de2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dec:	d111      	bne.n	8004e12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004df6:	d004      	beq.n	8004e02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e00:	d107      	bne.n	8004e12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e1a:	d10f      	bne.n	8004e3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e010      	b.n	8004e72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d196      	bne.n	8004d9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3728      	adds	r7, #40	@ 0x28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000040 	.word	0x20000040

08004e80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f7ff ff5b 	bl	8004d54 <SPI_WaitFifoStateUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d007      	beq.n	8004eb4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e027      	b.n	8004f04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2180      	movs	r1, #128	@ 0x80
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f7ff fec0 	bl	8004c44 <SPI_WaitFlagStateUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d007      	beq.n	8004eda <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ece:	f043 0220 	orr.w	r2, r3, #32
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e014      	b.n	8004f04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f7ff ff34 	bl	8004d54 <SPI_WaitFifoStateUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d007      	beq.n	8004f02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ef6:	f043 0220 	orr.w	r2, r3, #32
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e000      	b.n	8004f04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e042      	b.n	8004fa4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d106      	bne.n	8004f36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7fd f979 	bl	8002228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2224      	movs	r2, #36	@ 0x24
 8004f3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0201 	bic.w	r2, r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fef4 	bl	8005d44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fbf5 	bl	800574c <UART_SetConfig>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e01b      	b.n	8004fa4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0201 	orr.w	r2, r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 ff73 	bl	8005e88 <UART_CheckIdleState>
 8004fa2:	4603      	mov	r3, r0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e031      	b.n	8005022 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2224      	movs	r2, #36	@ 0x24
 8004fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0201 	bic.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2200      	movs	r2, #0
 8004fec:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fd f982 	bl	80022f8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08a      	sub	sp, #40	@ 0x28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	4613      	mov	r3, r2
 8005038:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005040:	2b20      	cmp	r3, #32
 8005042:	d137      	bne.n	80050b4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <HAL_UART_Receive_IT+0x24>
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e030      	b.n	80050b6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a18      	ldr	r2, [pc, #96]	@ (80050c0 <HAL_UART_Receive_IT+0x94>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d01f      	beq.n	80050a4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d018      	beq.n	80050a4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	613b      	str	r3, [r7, #16]
   return(result);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005086:	627b      	str	r3, [r7, #36]	@ 0x24
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	623b      	str	r3, [r7, #32]
 8005092:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	69f9      	ldr	r1, [r7, #28]
 8005096:	6a3a      	ldr	r2, [r7, #32]
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	61bb      	str	r3, [r7, #24]
   return(result);
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e6      	bne.n	8005072 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80050a4:	88fb      	ldrh	r3, [r7, #6]
 80050a6:	461a      	mov	r2, r3
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 fffe 	bl	80060ac <UART_Start_Receive_IT>
 80050b0:	4603      	mov	r3, r0
 80050b2:	e000      	b.n	80050b6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050b4:	2302      	movs	r3, #2
  }
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3728      	adds	r7, #40	@ 0x28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	40008000 	.word	0x40008000

080050c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b0ba      	sub	sp, #232	@ 0xe8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80050ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80050ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80050f2:	4013      	ands	r3, r2
 80050f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80050f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d11b      	bne.n	8005138 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	2b00      	cmp	r3, #0
 800510a:	d015      	beq.n	8005138 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800510c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005110:	f003 0320 	and.w	r3, r3, #32
 8005114:	2b00      	cmp	r3, #0
 8005116:	d105      	bne.n	8005124 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800511c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d009      	beq.n	8005138 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 82e3 	beq.w	80056f4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	4798      	blx	r3
      }
      return;
 8005136:	e2dd      	b.n	80056f4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005138:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8123 	beq.w	8005388 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005142:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005146:	4b8d      	ldr	r3, [pc, #564]	@ (800537c <HAL_UART_IRQHandler+0x2b8>)
 8005148:	4013      	ands	r3, r2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800514e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005152:	4b8b      	ldr	r3, [pc, #556]	@ (8005380 <HAL_UART_IRQHandler+0x2bc>)
 8005154:	4013      	ands	r3, r2
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 8116 	beq.w	8005388 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800515c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d011      	beq.n	800518c <HAL_UART_IRQHandler+0xc8>
 8005168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800516c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00b      	beq.n	800518c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2201      	movs	r2, #1
 800517a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005182:	f043 0201 	orr.w	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800518c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d011      	beq.n	80051bc <HAL_UART_IRQHandler+0xf8>
 8005198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00b      	beq.n	80051bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2202      	movs	r2, #2
 80051aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b2:	f043 0204 	orr.w	r2, r3, #4
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d011      	beq.n	80051ec <HAL_UART_IRQHandler+0x128>
 80051c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00b      	beq.n	80051ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2204      	movs	r2, #4
 80051da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e2:	f043 0202 	orr.w	r2, r3, #2
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80051ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d017      	beq.n	8005228 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80051f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b00      	cmp	r3, #0
 8005202:	d105      	bne.n	8005210 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005204:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005208:	4b5c      	ldr	r3, [pc, #368]	@ (800537c <HAL_UART_IRQHandler+0x2b8>)
 800520a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00b      	beq.n	8005228 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2208      	movs	r2, #8
 8005216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800521e:	f043 0208 	orr.w	r2, r3, #8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800522c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005230:	2b00      	cmp	r3, #0
 8005232:	d012      	beq.n	800525a <HAL_UART_IRQHandler+0x196>
 8005234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005238:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00c      	beq.n	800525a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005248:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005250:	f043 0220 	orr.w	r2, r3, #32
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 8249 	beq.w	80056f8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b00      	cmp	r3, #0
 8005270:	d013      	beq.n	800529a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d105      	bne.n	800528a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800527e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d007      	beq.n	800529a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ae:	2b40      	cmp	r3, #64	@ 0x40
 80052b0:	d005      	beq.n	80052be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d054      	beq.n	8005368 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f001 f816 	bl	80062f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ce:	2b40      	cmp	r3, #64	@ 0x40
 80052d0:	d146      	bne.n	8005360 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3308      	adds	r3, #8
 80052d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80052e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3308      	adds	r3, #8
 80052fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80052fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005302:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800530a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1d9      	bne.n	80052d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005324:	2b00      	cmp	r3, #0
 8005326:	d017      	beq.n	8005358 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800532e:	4a15      	ldr	r2, [pc, #84]	@ (8005384 <HAL_UART_IRQHandler+0x2c0>)
 8005330:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005338:	4618      	mov	r0, r3
 800533a:	f7fd faac 	bl	8002896 <HAL_DMA_Abort_IT>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d019      	beq.n	8005378 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800534a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005352:	4610      	mov	r0, r2
 8005354:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005356:	e00f      	b.n	8005378 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f9e1 	bl	8005720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535e:	e00b      	b.n	8005378 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f9dd 	bl	8005720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005366:	e007      	b.n	8005378 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f9d9 	bl	8005720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005376:	e1bf      	b.n	80056f8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005378:	bf00      	nop
    return;
 800537a:	e1bd      	b.n	80056f8 <HAL_UART_IRQHandler+0x634>
 800537c:	10000001 	.word	0x10000001
 8005380:	04000120 	.word	0x04000120
 8005384:	080063bd 	.word	0x080063bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800538c:	2b01      	cmp	r3, #1
 800538e:	f040 8153 	bne.w	8005638 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005396:	f003 0310 	and.w	r3, r3, #16
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 814c 	beq.w	8005638 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a4:	f003 0310 	and.w	r3, r3, #16
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 8145 	beq.w	8005638 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2210      	movs	r2, #16
 80053b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c0:	2b40      	cmp	r3, #64	@ 0x40
 80053c2:	f040 80bb 	bne.w	800553c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 818f 	beq.w	80056fc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80053e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053e8:	429a      	cmp	r2, r3
 80053ea:	f080 8187 	bcs.w	80056fc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b00      	cmp	r3, #0
 8005408:	f040 8087 	bne.w	800551a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005414:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005420:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005428:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005436:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800543a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005442:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800544e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1da      	bne.n	800540c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3308      	adds	r3, #8
 800545c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005466:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005468:	f023 0301 	bic.w	r3, r3, #1
 800546c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3308      	adds	r3, #8
 8005476:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800547a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800547e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005482:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800548c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e1      	bne.n	8005456 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3308      	adds	r3, #8
 8005498:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80054a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3308      	adds	r3, #8
 80054b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80054b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80054bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80054c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e3      	bne.n	8005492 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054e8:	f023 0310 	bic.w	r3, r3, #16
 80054ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005500:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005508:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e4      	bne.n	80054d8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005514:	4618      	mov	r0, r3
 8005516:	f7fd f962 	bl	80027de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2202      	movs	r2, #2
 800551e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800552c:	b29b      	uxth	r3, r3
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	b29b      	uxth	r3, r3
 8005532:	4619      	mov	r1, r3
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f8fd 	bl	8005734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800553a:	e0df      	b.n	80056fc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005548:	b29b      	uxth	r3, r3
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005556:	b29b      	uxth	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 80d1 	beq.w	8005700 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800555e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 80cc 	beq.w	8005700 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005578:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800557c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800558a:	647b      	str	r3, [r7, #68]	@ 0x44
 800558c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005590:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e4      	bne.n	8005568 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3308      	adds	r3, #8
 80055a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a8:	e853 3f00 	ldrex	r3, [r3]
 80055ac:	623b      	str	r3, [r7, #32]
   return(result);
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055b4:	f023 0301 	bic.w	r3, r3, #1
 80055b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3308      	adds	r3, #8
 80055c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80055c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80055c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e1      	bne.n	800559e <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2220      	movs	r2, #32
 80055de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0310 	bic.w	r3, r3, #16
 8005602:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005610:	61fb      	str	r3, [r7, #28]
 8005612:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	69b9      	ldr	r1, [r7, #24]
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	617b      	str	r3, [r7, #20]
   return(result);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e4      	bne.n	80055ee <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800562a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800562e:	4619      	mov	r1, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f87f 	bl	8005734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005636:	e063      	b.n	8005700 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800563c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00e      	beq.n	8005662 <HAL_UART_IRQHandler+0x59e>
 8005644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005658:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f001 fc14 	bl	8006e88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005660:	e051      	b.n	8005706 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800566a:	2b00      	cmp	r3, #0
 800566c:	d014      	beq.n	8005698 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800566e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005676:	2b00      	cmp	r3, #0
 8005678:	d105      	bne.n	8005686 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800567a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800567e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d008      	beq.n	8005698 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800568a:	2b00      	cmp	r3, #0
 800568c:	d03a      	beq.n	8005704 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
    }
    return;
 8005696:	e035      	b.n	8005704 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800569c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d009      	beq.n	80056b8 <HAL_UART_IRQHandler+0x5f4>
 80056a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fe99 	bl	80063e8 <UART_EndTransmit_IT>
    return;
 80056b6:	e026      	b.n	8005706 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80056b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d009      	beq.n	80056d8 <HAL_UART_IRQHandler+0x614>
 80056c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f001 fbed 	bl	8006eb0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056d6:	e016      	b.n	8005706 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80056d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d010      	beq.n	8005706 <HAL_UART_IRQHandler+0x642>
 80056e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	da0c      	bge.n	8005706 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f001 fbd5 	bl	8006e9c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056f2:	e008      	b.n	8005706 <HAL_UART_IRQHandler+0x642>
      return;
 80056f4:	bf00      	nop
 80056f6:	e006      	b.n	8005706 <HAL_UART_IRQHandler+0x642>
    return;
 80056f8:	bf00      	nop
 80056fa:	e004      	b.n	8005706 <HAL_UART_IRQHandler+0x642>
      return;
 80056fc:	bf00      	nop
 80056fe:	e002      	b.n	8005706 <HAL_UART_IRQHandler+0x642>
      return;
 8005700:	bf00      	nop
 8005702:	e000      	b.n	8005706 <HAL_UART_IRQHandler+0x642>
    return;
 8005704:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8005706:	37e8      	adds	r7, #232	@ 0xe8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800574c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005750:	b08c      	sub	sp, #48	@ 0x30
 8005752:	af00      	add	r7, sp, #0
 8005754:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	431a      	orrs	r2, r3
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	431a      	orrs	r2, r3
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	4313      	orrs	r3, r2
 8005772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	4baa      	ldr	r3, [pc, #680]	@ (8005a24 <UART_SetConfig+0x2d8>)
 800577c:	4013      	ands	r3, r2
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005784:	430b      	orrs	r3, r1
 8005786:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a9f      	ldr	r2, [pc, #636]	@ (8005a28 <UART_SetConfig+0x2dc>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d004      	beq.n	80057b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057b4:	4313      	orrs	r3, r2
 80057b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80057c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	6812      	ldr	r2, [r2, #0]
 80057ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057cc:	430b      	orrs	r3, r1
 80057ce:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d6:	f023 010f 	bic.w	r1, r3, #15
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a90      	ldr	r2, [pc, #576]	@ (8005a2c <UART_SetConfig+0x2e0>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d125      	bne.n	800583c <UART_SetConfig+0xf0>
 80057f0:	4b8f      	ldr	r3, [pc, #572]	@ (8005a30 <UART_SetConfig+0x2e4>)
 80057f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d81a      	bhi.n	8005834 <UART_SetConfig+0xe8>
 80057fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005804 <UART_SetConfig+0xb8>)
 8005800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005804:	08005815 	.word	0x08005815
 8005808:	08005825 	.word	0x08005825
 800580c:	0800581d 	.word	0x0800581d
 8005810:	0800582d 	.word	0x0800582d
 8005814:	2301      	movs	r3, #1
 8005816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800581a:	e116      	b.n	8005a4a <UART_SetConfig+0x2fe>
 800581c:	2302      	movs	r3, #2
 800581e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005822:	e112      	b.n	8005a4a <UART_SetConfig+0x2fe>
 8005824:	2304      	movs	r3, #4
 8005826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800582a:	e10e      	b.n	8005a4a <UART_SetConfig+0x2fe>
 800582c:	2308      	movs	r3, #8
 800582e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005832:	e10a      	b.n	8005a4a <UART_SetConfig+0x2fe>
 8005834:	2310      	movs	r3, #16
 8005836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800583a:	e106      	b.n	8005a4a <UART_SetConfig+0x2fe>
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a7c      	ldr	r2, [pc, #496]	@ (8005a34 <UART_SetConfig+0x2e8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d138      	bne.n	80058b8 <UART_SetConfig+0x16c>
 8005846:	4b7a      	ldr	r3, [pc, #488]	@ (8005a30 <UART_SetConfig+0x2e4>)
 8005848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584c:	f003 030c 	and.w	r3, r3, #12
 8005850:	2b0c      	cmp	r3, #12
 8005852:	d82d      	bhi.n	80058b0 <UART_SetConfig+0x164>
 8005854:	a201      	add	r2, pc, #4	@ (adr r2, 800585c <UART_SetConfig+0x110>)
 8005856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585a:	bf00      	nop
 800585c:	08005891 	.word	0x08005891
 8005860:	080058b1 	.word	0x080058b1
 8005864:	080058b1 	.word	0x080058b1
 8005868:	080058b1 	.word	0x080058b1
 800586c:	080058a1 	.word	0x080058a1
 8005870:	080058b1 	.word	0x080058b1
 8005874:	080058b1 	.word	0x080058b1
 8005878:	080058b1 	.word	0x080058b1
 800587c:	08005899 	.word	0x08005899
 8005880:	080058b1 	.word	0x080058b1
 8005884:	080058b1 	.word	0x080058b1
 8005888:	080058b1 	.word	0x080058b1
 800588c:	080058a9 	.word	0x080058a9
 8005890:	2300      	movs	r3, #0
 8005892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005896:	e0d8      	b.n	8005a4a <UART_SetConfig+0x2fe>
 8005898:	2302      	movs	r3, #2
 800589a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800589e:	e0d4      	b.n	8005a4a <UART_SetConfig+0x2fe>
 80058a0:	2304      	movs	r3, #4
 80058a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058a6:	e0d0      	b.n	8005a4a <UART_SetConfig+0x2fe>
 80058a8:	2308      	movs	r3, #8
 80058aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ae:	e0cc      	b.n	8005a4a <UART_SetConfig+0x2fe>
 80058b0:	2310      	movs	r3, #16
 80058b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058b6:	e0c8      	b.n	8005a4a <UART_SetConfig+0x2fe>
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a5e      	ldr	r2, [pc, #376]	@ (8005a38 <UART_SetConfig+0x2ec>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d125      	bne.n	800590e <UART_SetConfig+0x1c2>
 80058c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005a30 <UART_SetConfig+0x2e4>)
 80058c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80058cc:	2b30      	cmp	r3, #48	@ 0x30
 80058ce:	d016      	beq.n	80058fe <UART_SetConfig+0x1b2>
 80058d0:	2b30      	cmp	r3, #48	@ 0x30
 80058d2:	d818      	bhi.n	8005906 <UART_SetConfig+0x1ba>
 80058d4:	2b20      	cmp	r3, #32
 80058d6:	d00a      	beq.n	80058ee <UART_SetConfig+0x1a2>
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d814      	bhi.n	8005906 <UART_SetConfig+0x1ba>
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <UART_SetConfig+0x19a>
 80058e0:	2b10      	cmp	r3, #16
 80058e2:	d008      	beq.n	80058f6 <UART_SetConfig+0x1aa>
 80058e4:	e00f      	b.n	8005906 <UART_SetConfig+0x1ba>
 80058e6:	2300      	movs	r3, #0
 80058e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ec:	e0ad      	b.n	8005a4a <UART_SetConfig+0x2fe>
 80058ee:	2302      	movs	r3, #2
 80058f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058f4:	e0a9      	b.n	8005a4a <UART_SetConfig+0x2fe>
 80058f6:	2304      	movs	r3, #4
 80058f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058fc:	e0a5      	b.n	8005a4a <UART_SetConfig+0x2fe>
 80058fe:	2308      	movs	r3, #8
 8005900:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005904:	e0a1      	b.n	8005a4a <UART_SetConfig+0x2fe>
 8005906:	2310      	movs	r3, #16
 8005908:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800590c:	e09d      	b.n	8005a4a <UART_SetConfig+0x2fe>
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a4a      	ldr	r2, [pc, #296]	@ (8005a3c <UART_SetConfig+0x2f0>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d125      	bne.n	8005964 <UART_SetConfig+0x218>
 8005918:	4b45      	ldr	r3, [pc, #276]	@ (8005a30 <UART_SetConfig+0x2e4>)
 800591a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005922:	2bc0      	cmp	r3, #192	@ 0xc0
 8005924:	d016      	beq.n	8005954 <UART_SetConfig+0x208>
 8005926:	2bc0      	cmp	r3, #192	@ 0xc0
 8005928:	d818      	bhi.n	800595c <UART_SetConfig+0x210>
 800592a:	2b80      	cmp	r3, #128	@ 0x80
 800592c:	d00a      	beq.n	8005944 <UART_SetConfig+0x1f8>
 800592e:	2b80      	cmp	r3, #128	@ 0x80
 8005930:	d814      	bhi.n	800595c <UART_SetConfig+0x210>
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <UART_SetConfig+0x1f0>
 8005936:	2b40      	cmp	r3, #64	@ 0x40
 8005938:	d008      	beq.n	800594c <UART_SetConfig+0x200>
 800593a:	e00f      	b.n	800595c <UART_SetConfig+0x210>
 800593c:	2300      	movs	r3, #0
 800593e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005942:	e082      	b.n	8005a4a <UART_SetConfig+0x2fe>
 8005944:	2302      	movs	r3, #2
 8005946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800594a:	e07e      	b.n	8005a4a <UART_SetConfig+0x2fe>
 800594c:	2304      	movs	r3, #4
 800594e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005952:	e07a      	b.n	8005a4a <UART_SetConfig+0x2fe>
 8005954:	2308      	movs	r3, #8
 8005956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800595a:	e076      	b.n	8005a4a <UART_SetConfig+0x2fe>
 800595c:	2310      	movs	r3, #16
 800595e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005962:	e072      	b.n	8005a4a <UART_SetConfig+0x2fe>
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a35      	ldr	r2, [pc, #212]	@ (8005a40 <UART_SetConfig+0x2f4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d12a      	bne.n	80059c4 <UART_SetConfig+0x278>
 800596e:	4b30      	ldr	r3, [pc, #192]	@ (8005a30 <UART_SetConfig+0x2e4>)
 8005970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005974:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005978:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800597c:	d01a      	beq.n	80059b4 <UART_SetConfig+0x268>
 800597e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005982:	d81b      	bhi.n	80059bc <UART_SetConfig+0x270>
 8005984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005988:	d00c      	beq.n	80059a4 <UART_SetConfig+0x258>
 800598a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800598e:	d815      	bhi.n	80059bc <UART_SetConfig+0x270>
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <UART_SetConfig+0x250>
 8005994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005998:	d008      	beq.n	80059ac <UART_SetConfig+0x260>
 800599a:	e00f      	b.n	80059bc <UART_SetConfig+0x270>
 800599c:	2300      	movs	r3, #0
 800599e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059a2:	e052      	b.n	8005a4a <UART_SetConfig+0x2fe>
 80059a4:	2302      	movs	r3, #2
 80059a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059aa:	e04e      	b.n	8005a4a <UART_SetConfig+0x2fe>
 80059ac:	2304      	movs	r3, #4
 80059ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059b2:	e04a      	b.n	8005a4a <UART_SetConfig+0x2fe>
 80059b4:	2308      	movs	r3, #8
 80059b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ba:	e046      	b.n	8005a4a <UART_SetConfig+0x2fe>
 80059bc:	2310      	movs	r3, #16
 80059be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059c2:	e042      	b.n	8005a4a <UART_SetConfig+0x2fe>
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a17      	ldr	r2, [pc, #92]	@ (8005a28 <UART_SetConfig+0x2dc>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d13a      	bne.n	8005a44 <UART_SetConfig+0x2f8>
 80059ce:	4b18      	ldr	r3, [pc, #96]	@ (8005a30 <UART_SetConfig+0x2e4>)
 80059d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80059d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059dc:	d01a      	beq.n	8005a14 <UART_SetConfig+0x2c8>
 80059de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059e2:	d81b      	bhi.n	8005a1c <UART_SetConfig+0x2d0>
 80059e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059e8:	d00c      	beq.n	8005a04 <UART_SetConfig+0x2b8>
 80059ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ee:	d815      	bhi.n	8005a1c <UART_SetConfig+0x2d0>
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <UART_SetConfig+0x2b0>
 80059f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059f8:	d008      	beq.n	8005a0c <UART_SetConfig+0x2c0>
 80059fa:	e00f      	b.n	8005a1c <UART_SetConfig+0x2d0>
 80059fc:	2300      	movs	r3, #0
 80059fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a02:	e022      	b.n	8005a4a <UART_SetConfig+0x2fe>
 8005a04:	2302      	movs	r3, #2
 8005a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a0a:	e01e      	b.n	8005a4a <UART_SetConfig+0x2fe>
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a12:	e01a      	b.n	8005a4a <UART_SetConfig+0x2fe>
 8005a14:	2308      	movs	r3, #8
 8005a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a1a:	e016      	b.n	8005a4a <UART_SetConfig+0x2fe>
 8005a1c:	2310      	movs	r3, #16
 8005a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a22:	e012      	b.n	8005a4a <UART_SetConfig+0x2fe>
 8005a24:	cfff69f3 	.word	0xcfff69f3
 8005a28:	40008000 	.word	0x40008000
 8005a2c:	40013800 	.word	0x40013800
 8005a30:	40021000 	.word	0x40021000
 8005a34:	40004400 	.word	0x40004400
 8005a38:	40004800 	.word	0x40004800
 8005a3c:	40004c00 	.word	0x40004c00
 8005a40:	40005000 	.word	0x40005000
 8005a44:	2310      	movs	r3, #16
 8005a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4aae      	ldr	r2, [pc, #696]	@ (8005d08 <UART_SetConfig+0x5bc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	f040 8097 	bne.w	8005b84 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d823      	bhi.n	8005aa6 <UART_SetConfig+0x35a>
 8005a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a64 <UART_SetConfig+0x318>)
 8005a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a64:	08005a89 	.word	0x08005a89
 8005a68:	08005aa7 	.word	0x08005aa7
 8005a6c:	08005a91 	.word	0x08005a91
 8005a70:	08005aa7 	.word	0x08005aa7
 8005a74:	08005a97 	.word	0x08005a97
 8005a78:	08005aa7 	.word	0x08005aa7
 8005a7c:	08005aa7 	.word	0x08005aa7
 8005a80:	08005aa7 	.word	0x08005aa7
 8005a84:	08005a9f 	.word	0x08005a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a88:	f7fe f8c0 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 8005a8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a8e:	e010      	b.n	8005ab2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a90:	4b9e      	ldr	r3, [pc, #632]	@ (8005d0c <UART_SetConfig+0x5c0>)
 8005a92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a94:	e00d      	b.n	8005ab2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a96:	f7fe f821 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8005a9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a9c:	e009      	b.n	8005ab2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aa2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005aa4:	e005      	b.n	8005ab2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ab0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 8130 	beq.w	8005d1a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abe:	4a94      	ldr	r2, [pc, #592]	@ (8005d10 <UART_SetConfig+0x5c4>)
 8005ac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	4413      	add	r3, r2
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d305      	bcc.n	8005aea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d903      	bls.n	8005af2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005af0:	e113      	b.n	8005d1a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	2200      	movs	r2, #0
 8005af6:	60bb      	str	r3, [r7, #8]
 8005af8:	60fa      	str	r2, [r7, #12]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afe:	4a84      	ldr	r2, [pc, #528]	@ (8005d10 <UART_SetConfig+0x5c4>)
 8005b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2200      	movs	r2, #0
 8005b08:	603b      	str	r3, [r7, #0]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b14:	f7fb f830 	bl	8000b78 <__aeabi_uldivmod>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	4619      	mov	r1, r3
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	f04f 0300 	mov.w	r3, #0
 8005b28:	020b      	lsls	r3, r1, #8
 8005b2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b2e:	0202      	lsls	r2, r0, #8
 8005b30:	6979      	ldr	r1, [r7, #20]
 8005b32:	6849      	ldr	r1, [r1, #4]
 8005b34:	0849      	lsrs	r1, r1, #1
 8005b36:	2000      	movs	r0, #0
 8005b38:	460c      	mov	r4, r1
 8005b3a:	4605      	mov	r5, r0
 8005b3c:	eb12 0804 	adds.w	r8, r2, r4
 8005b40:	eb43 0905 	adc.w	r9, r3, r5
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	469a      	mov	sl, r3
 8005b4c:	4693      	mov	fp, r2
 8005b4e:	4652      	mov	r2, sl
 8005b50:	465b      	mov	r3, fp
 8005b52:	4640      	mov	r0, r8
 8005b54:	4649      	mov	r1, r9
 8005b56:	f7fb f80f 	bl	8000b78 <__aeabi_uldivmod>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4613      	mov	r3, r2
 8005b60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b68:	d308      	bcc.n	8005b7c <UART_SetConfig+0x430>
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b70:	d204      	bcs.n	8005b7c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6a3a      	ldr	r2, [r7, #32]
 8005b78:	60da      	str	r2, [r3, #12]
 8005b7a:	e0ce      	b.n	8005d1a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b82:	e0ca      	b.n	8005d1a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b8c:	d166      	bne.n	8005c5c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005b8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	d827      	bhi.n	8005be6 <UART_SetConfig+0x49a>
 8005b96:	a201      	add	r2, pc, #4	@ (adr r2, 8005b9c <UART_SetConfig+0x450>)
 8005b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9c:	08005bc1 	.word	0x08005bc1
 8005ba0:	08005bc9 	.word	0x08005bc9
 8005ba4:	08005bd1 	.word	0x08005bd1
 8005ba8:	08005be7 	.word	0x08005be7
 8005bac:	08005bd7 	.word	0x08005bd7
 8005bb0:	08005be7 	.word	0x08005be7
 8005bb4:	08005be7 	.word	0x08005be7
 8005bb8:	08005be7 	.word	0x08005be7
 8005bbc:	08005bdf 	.word	0x08005bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bc0:	f7fe f824 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 8005bc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bc6:	e014      	b.n	8005bf2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bc8:	f7fe f836 	bl	8003c38 <HAL_RCC_GetPCLK2Freq>
 8005bcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bce:	e010      	b.n	8005bf2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bd0:	4b4e      	ldr	r3, [pc, #312]	@ (8005d0c <UART_SetConfig+0x5c0>)
 8005bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bd4:	e00d      	b.n	8005bf2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bd6:	f7fd ff81 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8005bda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bdc:	e009      	b.n	8005bf2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005be4:	e005      	b.n	8005bf2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005bf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8090 	beq.w	8005d1a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfe:	4a44      	ldr	r2, [pc, #272]	@ (8005d10 <UART_SetConfig+0x5c4>)
 8005c00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c04:	461a      	mov	r2, r3
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c0c:	005a      	lsls	r2, r3, #1
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	085b      	lsrs	r3, r3, #1
 8005c14:	441a      	add	r2, r3
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	2b0f      	cmp	r3, #15
 8005c24:	d916      	bls.n	8005c54 <UART_SetConfig+0x508>
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c2c:	d212      	bcs.n	8005c54 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	f023 030f 	bic.w	r3, r3, #15
 8005c36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	085b      	lsrs	r3, r3, #1
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	8bfb      	ldrh	r3, [r7, #30]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	8bfa      	ldrh	r2, [r7, #30]
 8005c50:	60da      	str	r2, [r3, #12]
 8005c52:	e062      	b.n	8005d1a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c5a:	e05e      	b.n	8005d1a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d828      	bhi.n	8005cb6 <UART_SetConfig+0x56a>
 8005c64:	a201      	add	r2, pc, #4	@ (adr r2, 8005c6c <UART_SetConfig+0x520>)
 8005c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6a:	bf00      	nop
 8005c6c:	08005c91 	.word	0x08005c91
 8005c70:	08005c99 	.word	0x08005c99
 8005c74:	08005ca1 	.word	0x08005ca1
 8005c78:	08005cb7 	.word	0x08005cb7
 8005c7c:	08005ca7 	.word	0x08005ca7
 8005c80:	08005cb7 	.word	0x08005cb7
 8005c84:	08005cb7 	.word	0x08005cb7
 8005c88:	08005cb7 	.word	0x08005cb7
 8005c8c:	08005caf 	.word	0x08005caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c90:	f7fd ffbc 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 8005c94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c96:	e014      	b.n	8005cc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c98:	f7fd ffce 	bl	8003c38 <HAL_RCC_GetPCLK2Freq>
 8005c9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c9e:	e010      	b.n	8005cc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d0c <UART_SetConfig+0x5c0>)
 8005ca2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ca4:	e00d      	b.n	8005cc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ca6:	f7fd ff19 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8005caa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cac:	e009      	b.n	8005cc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cb4:	e005      	b.n	8005cc2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005cc0:	bf00      	nop
    }

    if (pclk != 0U)
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d028      	beq.n	8005d1a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ccc:	4a10      	ldr	r2, [pc, #64]	@ (8005d10 <UART_SetConfig+0x5c4>)
 8005cce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	085b      	lsrs	r3, r3, #1
 8005ce0:	441a      	add	r2, r3
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	2b0f      	cmp	r3, #15
 8005cf0:	d910      	bls.n	8005d14 <UART_SetConfig+0x5c8>
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf8:	d20c      	bcs.n	8005d14 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60da      	str	r2, [r3, #12]
 8005d04:	e009      	b.n	8005d1a <UART_SetConfig+0x5ce>
 8005d06:	bf00      	nop
 8005d08:	40008000 	.word	0x40008000
 8005d0c:	00f42400 	.word	0x00f42400
 8005d10:	0800a258 	.word	0x0800a258
      }
      else
      {
        ret = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2200      	movs	r2, #0
 8005d34:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005d36:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3730      	adds	r7, #48	@ 0x30
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005d44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d50:	f003 0308 	and.w	r3, r3, #8
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00a      	beq.n	8005d6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db6:	f003 0304 	and.w	r3, r3, #4
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd8:	f003 0310 	and.w	r3, r3, #16
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d01a      	beq.n	8005e5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e42:	d10a      	bne.n	8005e5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	605a      	str	r2, [r3, #4]
  }
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b098      	sub	sp, #96	@ 0x60
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e98:	f7fc fb2e 	bl	80024f8 <HAL_GetTick>
 8005e9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d12f      	bne.n	8005f0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f88e 	bl	8005fdc <UART_WaitOnFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d022      	beq.n	8005f0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ece:	e853 3f00 	ldrex	r3, [r3]
 8005ed2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ed6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eda:	653b      	str	r3, [r7, #80]	@ 0x50
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ee4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ee6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005eea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005eec:	e841 2300 	strex	r3, r2, [r1]
 8005ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e6      	bne.n	8005ec6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e063      	b.n	8005fd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d149      	bne.n	8005fae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f22:	2200      	movs	r2, #0
 8005f24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f857 	bl	8005fdc <UART_WaitOnFlagUntilTimeout>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d03c      	beq.n	8005fae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	623b      	str	r3, [r7, #32]
   return(result);
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f52:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f5a:	e841 2300 	strex	r3, r2, [r1]
 8005f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1e6      	bne.n	8005f34 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3308      	adds	r3, #8
 8005f6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f023 0301 	bic.w	r3, r3, #1
 8005f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3308      	adds	r3, #8
 8005f84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f86:	61fa      	str	r2, [r7, #28]
 8005f88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	69b9      	ldr	r1, [r7, #24]
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	617b      	str	r3, [r7, #20]
   return(result);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e5      	bne.n	8005f66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e012      	b.n	8005fd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3758      	adds	r7, #88	@ 0x58
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	603b      	str	r3, [r7, #0]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fec:	e049      	b.n	8006082 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff4:	d045      	beq.n	8006082 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff6:	f7fc fa7f 	bl	80024f8 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	429a      	cmp	r2, r3
 8006004:	d302      	bcc.n	800600c <UART_WaitOnFlagUntilTimeout+0x30>
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e048      	b.n	80060a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	d031      	beq.n	8006082 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b08      	cmp	r3, #8
 800602a:	d110      	bne.n	800604e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2208      	movs	r2, #8
 8006032:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 f95b 	bl	80062f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2208      	movs	r2, #8
 800603e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e029      	b.n	80060a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800605c:	d111      	bne.n	8006082 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f941 	bl	80062f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2220      	movs	r2, #32
 8006072:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e00f      	b.n	80060a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69da      	ldr	r2, [r3, #28]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4013      	ands	r3, r2
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	429a      	cmp	r2, r3
 8006090:	bf0c      	ite	eq
 8006092:	2301      	moveq	r3, #1
 8006094:	2300      	movne	r3, #0
 8006096:	b2db      	uxtb	r3, r3
 8006098:	461a      	mov	r2, r3
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	429a      	cmp	r2, r3
 800609e:	d0a6      	beq.n	8005fee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b0a3      	sub	sp, #140	@ 0x8c
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	4613      	mov	r3, r2
 80060b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	88fa      	ldrh	r2, [r7, #6]
 80060c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	88fa      	ldrh	r2, [r7, #6]
 80060cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060de:	d10e      	bne.n	80060fe <UART_Start_Receive_IT+0x52>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d105      	bne.n	80060f4 <UART_Start_Receive_IT+0x48>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80060ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80060f2:	e02d      	b.n	8006150 <UART_Start_Receive_IT+0xa4>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	22ff      	movs	r2, #255	@ 0xff
 80060f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80060fc:	e028      	b.n	8006150 <UART_Start_Receive_IT+0xa4>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10d      	bne.n	8006122 <UART_Start_Receive_IT+0x76>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d104      	bne.n	8006118 <UART_Start_Receive_IT+0x6c>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	22ff      	movs	r2, #255	@ 0xff
 8006112:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006116:	e01b      	b.n	8006150 <UART_Start_Receive_IT+0xa4>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	227f      	movs	r2, #127	@ 0x7f
 800611c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006120:	e016      	b.n	8006150 <UART_Start_Receive_IT+0xa4>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800612a:	d10d      	bne.n	8006148 <UART_Start_Receive_IT+0x9c>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d104      	bne.n	800613e <UART_Start_Receive_IT+0x92>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	227f      	movs	r2, #127	@ 0x7f
 8006138:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800613c:	e008      	b.n	8006150 <UART_Start_Receive_IT+0xa4>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	223f      	movs	r2, #63	@ 0x3f
 8006142:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006146:	e003      	b.n	8006150 <UART_Start_Receive_IT+0xa4>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2222      	movs	r2, #34	@ 0x22
 800615c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3308      	adds	r3, #8
 8006166:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006170:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006172:	f043 0301 	orr.w	r3, r3, #1
 8006176:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3308      	adds	r3, #8
 8006180:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006184:	673a      	str	r2, [r7, #112]	@ 0x70
 8006186:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800618a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800618c:	e841 2300 	strex	r3, r2, [r1]
 8006190:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006192:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e3      	bne.n	8006160 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800619c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061a0:	d14f      	bne.n	8006242 <UART_Start_Receive_IT+0x196>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80061a8:	88fa      	ldrh	r2, [r7, #6]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d349      	bcc.n	8006242 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061b6:	d107      	bne.n	80061c8 <UART_Start_Receive_IT+0x11c>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d103      	bne.n	80061c8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4a47      	ldr	r2, [pc, #284]	@ (80062e0 <UART_Start_Receive_IT+0x234>)
 80061c4:	675a      	str	r2, [r3, #116]	@ 0x74
 80061c6:	e002      	b.n	80061ce <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4a46      	ldr	r2, [pc, #280]	@ (80062e4 <UART_Start_Receive_IT+0x238>)
 80061cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d01a      	beq.n	800620c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061de:	e853 3f00 	ldrex	r3, [r3]
 80061e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80061e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80061f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061fa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80061fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006200:	e841 2300 	strex	r3, r2, [r1]
 8006204:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e4      	bne.n	80061d6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3308      	adds	r3, #8
 8006212:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006216:	e853 3f00 	ldrex	r3, [r3]
 800621a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800621c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006222:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3308      	adds	r3, #8
 800622a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800622c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800622e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006232:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006234:	e841 2300 	strex	r3, r2, [r1]
 8006238:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800623a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e5      	bne.n	800620c <UART_Start_Receive_IT+0x160>
 8006240:	e046      	b.n	80062d0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800624a:	d107      	bne.n	800625c <UART_Start_Receive_IT+0x1b0>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d103      	bne.n	800625c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4a24      	ldr	r2, [pc, #144]	@ (80062e8 <UART_Start_Receive_IT+0x23c>)
 8006258:	675a      	str	r2, [r3, #116]	@ 0x74
 800625a:	e002      	b.n	8006262 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4a23      	ldr	r2, [pc, #140]	@ (80062ec <UART_Start_Receive_IT+0x240>)
 8006260:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d019      	beq.n	800629e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006272:	e853 3f00 	ldrex	r3, [r3]
 8006276:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800627e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006288:	637b      	str	r3, [r7, #52]	@ 0x34
 800628a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800628e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006290:	e841 2300 	strex	r3, r2, [r1]
 8006294:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1e6      	bne.n	800626a <UART_Start_Receive_IT+0x1be>
 800629c:	e018      	b.n	80062d0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	613b      	str	r3, [r7, #16]
   return(result);
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f043 0320 	orr.w	r3, r3, #32
 80062b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	461a      	mov	r2, r3
 80062ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062bc:	623b      	str	r3, [r7, #32]
 80062be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	69f9      	ldr	r1, [r7, #28]
 80062c2:	6a3a      	ldr	r2, [r7, #32]
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e6      	bne.n	800629e <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	378c      	adds	r7, #140	@ 0x8c
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	08006b1d 	.word	0x08006b1d
 80062e4:	080067b9 	.word	0x080067b9
 80062e8:	080065fd 	.word	0x080065fd
 80062ec:	08006441 	.word	0x08006441

080062f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b095      	sub	sp, #84	@ 0x54
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006300:	e853 3f00 	ldrex	r3, [r3]
 8006304:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006308:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800630c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006316:	643b      	str	r3, [r7, #64]	@ 0x40
 8006318:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800631c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e6      	bne.n	80062f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3308      	adds	r3, #8
 8006330:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	61fb      	str	r3, [r7, #28]
   return(result);
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006340:	f023 0301 	bic.w	r3, r3, #1
 8006344:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3308      	adds	r3, #8
 800634c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800634e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006350:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800635c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e3      	bne.n	800632a <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006366:	2b01      	cmp	r3, #1
 8006368:	d118      	bne.n	800639c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	e853 3f00 	ldrex	r3, [r3]
 8006376:	60bb      	str	r3, [r7, #8]
   return(result);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f023 0310 	bic.w	r3, r3, #16
 800637e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	461a      	mov	r2, r3
 8006386:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638c:	6979      	ldr	r1, [r7, #20]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	e841 2300 	strex	r3, r2, [r1]
 8006394:	613b      	str	r3, [r7, #16]
   return(result);
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1e6      	bne.n	800636a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2220      	movs	r2, #32
 80063a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80063b0:	bf00      	nop
 80063b2:	3754      	adds	r7, #84	@ 0x54
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f7ff f9a0 	bl	8005720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006404:	61fb      	str	r3, [r7, #28]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	61bb      	str	r3, [r7, #24]
 8006410:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	6979      	ldr	r1, [r7, #20]
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	613b      	str	r3, [r7, #16]
   return(result);
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1e6      	bne.n	80063f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2220      	movs	r2, #32
 8006426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff f96b 	bl	800570c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006436:	bf00      	nop
 8006438:	3720      	adds	r7, #32
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b09c      	sub	sp, #112	@ 0x70
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800644e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006458:	2b22      	cmp	r3, #34	@ 0x22
 800645a:	f040 80be 	bne.w	80065da <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006464:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006468:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800646c:	b2d9      	uxtb	r1, r3
 800646e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006472:	b2da      	uxtb	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006478:	400a      	ands	r2, r1
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800648e:	b29b      	uxth	r3, r3
 8006490:	3b01      	subs	r3, #1
 8006492:	b29a      	uxth	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f040 80a3 	bne.w	80065ee <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e6      	bne.n	80064a8 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3308      	adds	r3, #8
 80064e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3308      	adds	r3, #8
 80064f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80064fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80064fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006500:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e5      	bne.n	80064da <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a34      	ldr	r2, [pc, #208]	@ (80065f8 <UART_RxISR_8BIT+0x1b8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d01f      	beq.n	800656c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d018      	beq.n	800656c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	623b      	str	r3, [r7, #32]
   return(result);
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800654e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	461a      	mov	r2, r3
 8006556:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006558:	633b      	str	r3, [r7, #48]	@ 0x30
 800655a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800655e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e6      	bne.n	800653a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006570:	2b01      	cmp	r3, #1
 8006572:	d12e      	bne.n	80065d2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	60fb      	str	r3, [r7, #12]
   return(result);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0310 	bic.w	r3, r3, #16
 800658e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	461a      	mov	r2, r3
 8006596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006598:	61fb      	str	r3, [r7, #28]
 800659a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	69b9      	ldr	r1, [r7, #24]
 800659e:	69fa      	ldr	r2, [r7, #28]
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	617b      	str	r3, [r7, #20]
   return(result);
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e6      	bne.n	800657a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	f003 0310 	and.w	r3, r3, #16
 80065b6:	2b10      	cmp	r3, #16
 80065b8:	d103      	bne.n	80065c2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2210      	movs	r2, #16
 80065c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff f8b2 	bl	8005734 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065d0:	e00d      	b.n	80065ee <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fb fbb8 	bl	8001d48 <HAL_UART_RxCpltCallback>
}
 80065d8:	e009      	b.n	80065ee <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	8b1b      	ldrh	r3, [r3, #24]
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0208 	orr.w	r2, r2, #8
 80065ea:	b292      	uxth	r2, r2
 80065ec:	831a      	strh	r2, [r3, #24]
}
 80065ee:	bf00      	nop
 80065f0:	3770      	adds	r7, #112	@ 0x70
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	40008000 	.word	0x40008000

080065fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b09c      	sub	sp, #112	@ 0x70
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800660a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006614:	2b22      	cmp	r3, #34	@ 0x22
 8006616:	f040 80be 	bne.w	8006796 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006620:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006628:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800662a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800662e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006632:	4013      	ands	r3, r2
 8006634:	b29a      	uxth	r2, r3
 8006636:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006638:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800663e:	1c9a      	adds	r2, r3, #2
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	f040 80a3 	bne.w	80067aa <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006674:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006678:	667b      	str	r3, [r7, #100]	@ 0x64
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006682:	657b      	str	r3, [r7, #84]	@ 0x54
 8006684:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006688:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e6      	bne.n	8006664 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3308      	adds	r3, #8
 800669c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a8:	f023 0301 	bic.w	r3, r3, #1
 80066ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3308      	adds	r3, #8
 80066b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80066b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80066b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e5      	bne.n	8006696 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a34      	ldr	r2, [pc, #208]	@ (80067b4 <UART_RxISR_16BIT+0x1b8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d01f      	beq.n	8006728 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d018      	beq.n	8006728 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	e853 3f00 	ldrex	r3, [r3]
 8006702:	61fb      	str	r3, [r7, #28]
   return(result);
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800670a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	461a      	mov	r2, r3
 8006712:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006714:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006716:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006718:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800671a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800671c:	e841 2300 	strex	r3, r2, [r1]
 8006720:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e6      	bne.n	80066f6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800672c:	2b01      	cmp	r3, #1
 800672e:	d12e      	bne.n	800678e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	e853 3f00 	ldrex	r3, [r3]
 8006742:	60bb      	str	r3, [r7, #8]
   return(result);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f023 0310 	bic.w	r3, r3, #16
 800674a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	461a      	mov	r2, r3
 8006752:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006758:	6979      	ldr	r1, [r7, #20]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	e841 2300 	strex	r3, r2, [r1]
 8006760:	613b      	str	r3, [r7, #16]
   return(result);
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1e6      	bne.n	8006736 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	f003 0310 	and.w	r3, r3, #16
 8006772:	2b10      	cmp	r3, #16
 8006774:	d103      	bne.n	800677e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2210      	movs	r2, #16
 800677c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006784:	4619      	mov	r1, r3
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7fe ffd4 	bl	8005734 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800678c:	e00d      	b.n	80067aa <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7fb fada 	bl	8001d48 <HAL_UART_RxCpltCallback>
}
 8006794:	e009      	b.n	80067aa <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	8b1b      	ldrh	r3, [r3, #24]
 800679c:	b29a      	uxth	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0208 	orr.w	r2, r2, #8
 80067a6:	b292      	uxth	r2, r2
 80067a8:	831a      	strh	r2, [r3, #24]
}
 80067aa:	bf00      	nop
 80067ac:	3770      	adds	r7, #112	@ 0x70
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	40008000 	.word	0x40008000

080067b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b0ac      	sub	sp, #176	@ 0xb0
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80067c6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067ee:	2b22      	cmp	r3, #34	@ 0x22
 80067f0:	f040 8182 	bne.w	8006af8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80067fa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80067fe:	e125      	b.n	8006a4c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006806:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800680a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800680e:	b2d9      	uxtb	r1, r3
 8006810:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006814:	b2da      	uxtb	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800681a:	400a      	ands	r2, r1
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800684a:	f003 0307 	and.w	r3, r3, #7
 800684e:	2b00      	cmp	r3, #0
 8006850:	d053      	beq.n	80068fa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d011      	beq.n	8006882 <UART_RxISR_8BIT_FIFOEN+0xca>
 800685e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00b      	beq.n	8006882 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2201      	movs	r2, #1
 8006870:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006878:	f043 0201 	orr.w	r2, r3, #1
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d011      	beq.n	80068b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800688e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00b      	beq.n	80068b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2202      	movs	r2, #2
 80068a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a8:	f043 0204 	orr.w	r2, r3, #4
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068b6:	f003 0304 	and.w	r3, r3, #4
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d011      	beq.n	80068e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80068be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00b      	beq.n	80068e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2204      	movs	r2, #4
 80068d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068d8:	f043 0202 	orr.w	r2, r3, #2
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d006      	beq.n	80068fa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7fe ff17 	bl	8005720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006900:	b29b      	uxth	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	f040 80a2 	bne.w	8006a4c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006918:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800691c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	461a      	mov	r2, r3
 8006926:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800692a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800692c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006930:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006938:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e4      	bne.n	8006908 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3308      	adds	r3, #8
 8006944:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800694e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006950:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006954:	f023 0301 	bic.w	r3, r3, #1
 8006958:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3308      	adds	r3, #8
 8006962:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006966:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006968:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800696c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e1      	bne.n	800693e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2220      	movs	r2, #32
 800697e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a60      	ldr	r2, [pc, #384]	@ (8006b14 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d021      	beq.n	80069dc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d01a      	beq.n	80069dc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069ae:	e853 3f00 	ldrex	r3, [r3]
 80069b2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80069b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80069c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80069ca:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80069d0:	e841 2300 	strex	r3, r2, [r1]
 80069d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80069d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e4      	bne.n	80069a6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d130      	bne.n	8006a46 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f2:	e853 3f00 	ldrex	r3, [r3]
 80069f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fa:	f023 0310 	bic.w	r3, r3, #16
 80069fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a14:	e841 2300 	strex	r3, r2, [r1]
 8006a18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e4      	bne.n	80069ea <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	f003 0310 	and.w	r3, r3, #16
 8006a2a:	2b10      	cmp	r3, #16
 8006a2c:	d103      	bne.n	8006a36 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2210      	movs	r2, #16
 8006a34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7fe fe78 	bl	8005734 <HAL_UARTEx_RxEventCallback>
 8006a44:	e002      	b.n	8006a4c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fb f97e 	bl	8001d48 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a4c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d006      	beq.n	8006a62 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f47f aecf 	bne.w	8006800 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a68:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d04b      	beq.n	8006b0c <UART_RxISR_8BIT_FIFOEN+0x354>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006a7a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d244      	bcs.n	8006b0c <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006aa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006aac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1e3      	bne.n	8006a82 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a16      	ldr	r2, [pc, #88]	@ (8006b18 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006abe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f043 0320 	orr.w	r3, r3, #32
 8006ad4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	461a      	mov	r2, r3
 8006ade:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006ae2:	61bb      	str	r3, [r7, #24]
 8006ae4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	6979      	ldr	r1, [r7, #20]
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	613b      	str	r3, [r7, #16]
   return(result);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e4      	bne.n	8006ac0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006af6:	e009      	b.n	8006b0c <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	8b1b      	ldrh	r3, [r3, #24]
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f042 0208 	orr.w	r2, r2, #8
 8006b08:	b292      	uxth	r2, r2
 8006b0a:	831a      	strh	r2, [r3, #24]
}
 8006b0c:	bf00      	nop
 8006b0e:	37b0      	adds	r7, #176	@ 0xb0
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	40008000 	.word	0x40008000
 8006b18:	08006441 	.word	0x08006441

08006b1c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b0ae      	sub	sp, #184	@ 0xb8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006b2a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b52:	2b22      	cmp	r3, #34	@ 0x22
 8006b54:	f040 8186 	bne.w	8006e64 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006b5e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b62:	e129      	b.n	8006db8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006b6a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006b76:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006b7a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006b7e:	4013      	ands	r3, r2
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b8c:	1c9a      	adds	r2, r3, #2
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006bae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006bb2:	f003 0307 	and.w	r3, r3, #7
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d053      	beq.n	8006c62 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d011      	beq.n	8006bea <UART_RxISR_16BIT_FIFOEN+0xce>
 8006bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00b      	beq.n	8006bea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006be0:	f043 0201 	orr.w	r2, r3, #1
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d011      	beq.n	8006c1a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006bf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00b      	beq.n	8006c1a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2202      	movs	r2, #2
 8006c08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c10:	f043 0204 	orr.w	r2, r3, #4
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c1e:	f003 0304 	and.w	r3, r3, #4
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d011      	beq.n	8006c4a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006c26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00b      	beq.n	8006c4a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2204      	movs	r2, #4
 8006c38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c40:	f043 0202 	orr.w	r2, r3, #2
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d006      	beq.n	8006c62 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7fe fd63 	bl	8005720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f040 80a4 	bne.w	8006db8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c96:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ca4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e2      	bne.n	8006c70 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3308      	adds	r3, #8
 8006cb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006cba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cc0:	f023 0301 	bic.w	r3, r3, #1
 8006cc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006cd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006cd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006cda:	e841 2300 	strex	r3, r2, [r1]
 8006cde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ce0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1e1      	bne.n	8006caa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a60      	ldr	r2, [pc, #384]	@ (8006e80 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d021      	beq.n	8006d48 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d01a      	beq.n	8006d48 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d1a:	e853 3f00 	ldrex	r3, [r3]
 8006d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006d34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d36:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d3c:	e841 2300 	strex	r3, r2, [r1]
 8006d40:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e4      	bne.n	8006d12 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d130      	bne.n	8006db2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5e:	e853 3f00 	ldrex	r3, [r3]
 8006d62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d66:	f023 0310 	bic.w	r3, r3, #16
 8006d6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d78:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e4      	bne.n	8006d56 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	f003 0310 	and.w	r3, r3, #16
 8006d96:	2b10      	cmp	r3, #16
 8006d98:	d103      	bne.n	8006da2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2210      	movs	r2, #16
 8006da0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7fe fcc2 	bl	8005734 <HAL_UARTEx_RxEventCallback>
 8006db0:	e002      	b.n	8006db8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7fa ffc8 	bl	8001d48 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006db8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d006      	beq.n	8006dce <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006dc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f47f aecb 	bne.w	8006b64 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006dd4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006dd8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d04b      	beq.n	8006e78 <UART_RxISR_16BIT_FIFOEN+0x35c>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006de6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d244      	bcs.n	8006e78 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3308      	adds	r3, #8
 8006df4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	e853 3f00 	ldrex	r3, [r3]
 8006dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006e12:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e3      	bne.n	8006dee <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a16      	ldr	r2, [pc, #88]	@ (8006e84 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8006e2a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	e853 3f00 	ldrex	r3, [r3]
 8006e38:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f043 0320 	orr.w	r3, r3, #32
 8006e40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e4e:	61fb      	str	r3, [r7, #28]
 8006e50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	69b9      	ldr	r1, [r7, #24]
 8006e54:	69fa      	ldr	r2, [r7, #28]
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	617b      	str	r3, [r7, #20]
   return(result);
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e4      	bne.n	8006e2c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e62:	e009      	b.n	8006e78 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	8b1b      	ldrh	r3, [r3, #24]
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f042 0208 	orr.w	r2, r2, #8
 8006e74:	b292      	uxth	r2, r2
 8006e76:	831a      	strh	r2, [r3, #24]
}
 8006e78:	bf00      	nop
 8006e7a:	37b8      	adds	r7, #184	@ 0xb8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	40008000 	.word	0x40008000
 8006e84:	080065fd 	.word	0x080065fd

08006e88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d101      	bne.n	8006eda <HAL_UARTEx_DisableFifoMode+0x16>
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	e027      	b.n	8006f2a <HAL_UARTEx_DisableFifoMode+0x66>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2224      	movs	r2, #36	@ 0x24
 8006ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 0201 	bic.w	r2, r2, #1
 8006f00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006f08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d101      	bne.n	8006f4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	e02d      	b.n	8006faa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2224      	movs	r2, #36	@ 0x24
 8006f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0201 	bic.w	r2, r2, #1
 8006f74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f850 	bl	8007030 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d101      	bne.n	8006fca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	e02d      	b.n	8007026 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2224      	movs	r2, #36	@ 0x24
 8006fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 0201 	bic.w	r2, r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f812 	bl	8007030 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2220      	movs	r2, #32
 8007018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800703c:	2b00      	cmp	r3, #0
 800703e:	d108      	bne.n	8007052 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007050:	e031      	b.n	80070b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007052:	2308      	movs	r3, #8
 8007054:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007056:	2308      	movs	r3, #8
 8007058:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	0e5b      	lsrs	r3, r3, #25
 8007062:	b2db      	uxtb	r3, r3
 8007064:	f003 0307 	and.w	r3, r3, #7
 8007068:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	0f5b      	lsrs	r3, r3, #29
 8007072:	b2db      	uxtb	r3, r3
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	7b3a      	ldrb	r2, [r7, #12]
 800707e:	4911      	ldr	r1, [pc, #68]	@ (80070c4 <UARTEx_SetNbDataToProcess+0x94>)
 8007080:	5c8a      	ldrb	r2, [r1, r2]
 8007082:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007086:	7b3a      	ldrb	r2, [r7, #12]
 8007088:	490f      	ldr	r1, [pc, #60]	@ (80070c8 <UARTEx_SetNbDataToProcess+0x98>)
 800708a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800708c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007090:	b29a      	uxth	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007098:	7bfb      	ldrb	r3, [r7, #15]
 800709a:	7b7a      	ldrb	r2, [r7, #13]
 800709c:	4909      	ldr	r1, [pc, #36]	@ (80070c4 <UARTEx_SetNbDataToProcess+0x94>)
 800709e:	5c8a      	ldrb	r2, [r1, r2]
 80070a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070a4:	7b7a      	ldrb	r2, [r7, #13]
 80070a6:	4908      	ldr	r1, [pc, #32]	@ (80070c8 <UARTEx_SetNbDataToProcess+0x98>)
 80070a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80070b6:	bf00      	nop
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	0800a270 	.word	0x0800a270
 80070c8:	0800a278 	.word	0x0800a278

080070cc <arm_abs_f32>:
 80070cc:	b470      	push	{r4, r5, r6}
 80070ce:	0896      	lsrs	r6, r2, #2
 80070d0:	d025      	beq.n	800711e <arm_abs_f32+0x52>
 80070d2:	f100 0410 	add.w	r4, r0, #16
 80070d6:	f101 0310 	add.w	r3, r1, #16
 80070da:	4635      	mov	r5, r6
 80070dc:	ed54 7a04 	vldr	s15, [r4, #-16]
 80070e0:	eef0 7ae7 	vabs.f32	s15, s15
 80070e4:	ed43 7a04 	vstr	s15, [r3, #-16]
 80070e8:	ed54 7a03 	vldr	s15, [r4, #-12]
 80070ec:	eef0 7ae7 	vabs.f32	s15, s15
 80070f0:	ed43 7a03 	vstr	s15, [r3, #-12]
 80070f4:	ed54 7a02 	vldr	s15, [r4, #-8]
 80070f8:	eef0 7ae7 	vabs.f32	s15, s15
 80070fc:	ed43 7a02 	vstr	s15, [r3, #-8]
 8007100:	ed54 7a01 	vldr	s15, [r4, #-4]
 8007104:	3d01      	subs	r5, #1
 8007106:	eef0 7ae7 	vabs.f32	s15, s15
 800710a:	ed43 7a01 	vstr	s15, [r3, #-4]
 800710e:	f104 0410 	add.w	r4, r4, #16
 8007112:	f103 0310 	add.w	r3, r3, #16
 8007116:	d1e1      	bne.n	80070dc <arm_abs_f32+0x10>
 8007118:	0136      	lsls	r6, r6, #4
 800711a:	4430      	add	r0, r6
 800711c:	4431      	add	r1, r6
 800711e:	f012 0203 	ands.w	r2, r2, #3
 8007122:	d015      	beq.n	8007150 <arm_abs_f32+0x84>
 8007124:	edd0 7a00 	vldr	s15, [r0]
 8007128:	3a01      	subs	r2, #1
 800712a:	eef0 7ae7 	vabs.f32	s15, s15
 800712e:	edc1 7a00 	vstr	s15, [r1]
 8007132:	d00d      	beq.n	8007150 <arm_abs_f32+0x84>
 8007134:	edd0 7a01 	vldr	s15, [r0, #4]
 8007138:	2a01      	cmp	r2, #1
 800713a:	eef0 7ae7 	vabs.f32	s15, s15
 800713e:	edc1 7a01 	vstr	s15, [r1, #4]
 8007142:	d005      	beq.n	8007150 <arm_abs_f32+0x84>
 8007144:	edd0 7a02 	vldr	s15, [r0, #8]
 8007148:	eef0 7ae7 	vabs.f32	s15, s15
 800714c:	edc1 7a02 	vstr	s15, [r1, #8]
 8007150:	bc70      	pop	{r4, r5, r6}
 8007152:	4770      	bx	lr

08007154 <memset>:
 8007154:	4402      	add	r2, r0
 8007156:	4603      	mov	r3, r0
 8007158:	4293      	cmp	r3, r2
 800715a:	d100      	bne.n	800715e <memset+0xa>
 800715c:	4770      	bx	lr
 800715e:	f803 1b01 	strb.w	r1, [r3], #1
 8007162:	e7f9      	b.n	8007158 <memset+0x4>

08007164 <__errno>:
 8007164:	4b01      	ldr	r3, [pc, #4]	@ (800716c <__errno+0x8>)
 8007166:	6818      	ldr	r0, [r3, #0]
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	2000004c 	.word	0x2000004c

08007170 <__libc_init_array>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	4d0d      	ldr	r5, [pc, #52]	@ (80071a8 <__libc_init_array+0x38>)
 8007174:	4c0d      	ldr	r4, [pc, #52]	@ (80071ac <__libc_init_array+0x3c>)
 8007176:	1b64      	subs	r4, r4, r5
 8007178:	10a4      	asrs	r4, r4, #2
 800717a:	2600      	movs	r6, #0
 800717c:	42a6      	cmp	r6, r4
 800717e:	d109      	bne.n	8007194 <__libc_init_array+0x24>
 8007180:	4d0b      	ldr	r5, [pc, #44]	@ (80071b0 <__libc_init_array+0x40>)
 8007182:	4c0c      	ldr	r4, [pc, #48]	@ (80071b4 <__libc_init_array+0x44>)
 8007184:	f000 ff76 	bl	8008074 <_init>
 8007188:	1b64      	subs	r4, r4, r5
 800718a:	10a4      	asrs	r4, r4, #2
 800718c:	2600      	movs	r6, #0
 800718e:	42a6      	cmp	r6, r4
 8007190:	d105      	bne.n	800719e <__libc_init_array+0x2e>
 8007192:	bd70      	pop	{r4, r5, r6, pc}
 8007194:	f855 3b04 	ldr.w	r3, [r5], #4
 8007198:	4798      	blx	r3
 800719a:	3601      	adds	r6, #1
 800719c:	e7ee      	b.n	800717c <__libc_init_array+0xc>
 800719e:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a2:	4798      	blx	r3
 80071a4:	3601      	adds	r6, #1
 80071a6:	e7f2      	b.n	800718e <__libc_init_array+0x1e>
 80071a8:	0800a2b8 	.word	0x0800a2b8
 80071ac:	0800a2b8 	.word	0x0800a2b8
 80071b0:	0800a2b8 	.word	0x0800a2b8
 80071b4:	0800a2bc 	.word	0x0800a2bc

080071b8 <pow>:
 80071b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ba:	ed2d 8b02 	vpush	{d8}
 80071be:	eeb0 8a40 	vmov.f32	s16, s0
 80071c2:	eef0 8a60 	vmov.f32	s17, s1
 80071c6:	ec55 4b11 	vmov	r4, r5, d1
 80071ca:	f000 f871 	bl	80072b0 <__ieee754_pow>
 80071ce:	4622      	mov	r2, r4
 80071d0:	462b      	mov	r3, r5
 80071d2:	4620      	mov	r0, r4
 80071d4:	4629      	mov	r1, r5
 80071d6:	ec57 6b10 	vmov	r6, r7, d0
 80071da:	f7f9 fc67 	bl	8000aac <__aeabi_dcmpun>
 80071de:	2800      	cmp	r0, #0
 80071e0:	d13b      	bne.n	800725a <pow+0xa2>
 80071e2:	ec51 0b18 	vmov	r0, r1, d8
 80071e6:	2200      	movs	r2, #0
 80071e8:	2300      	movs	r3, #0
 80071ea:	f7f9 fc2d 	bl	8000a48 <__aeabi_dcmpeq>
 80071ee:	b1b8      	cbz	r0, 8007220 <pow+0x68>
 80071f0:	2200      	movs	r2, #0
 80071f2:	2300      	movs	r3, #0
 80071f4:	4620      	mov	r0, r4
 80071f6:	4629      	mov	r1, r5
 80071f8:	f7f9 fc26 	bl	8000a48 <__aeabi_dcmpeq>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d146      	bne.n	800728e <pow+0xd6>
 8007200:	ec45 4b10 	vmov	d0, r4, r5
 8007204:	f000 f848 	bl	8007298 <finite>
 8007208:	b338      	cbz	r0, 800725a <pow+0xa2>
 800720a:	2200      	movs	r2, #0
 800720c:	2300      	movs	r3, #0
 800720e:	4620      	mov	r0, r4
 8007210:	4629      	mov	r1, r5
 8007212:	f7f9 fc23 	bl	8000a5c <__aeabi_dcmplt>
 8007216:	b300      	cbz	r0, 800725a <pow+0xa2>
 8007218:	f7ff ffa4 	bl	8007164 <__errno>
 800721c:	2322      	movs	r3, #34	@ 0x22
 800721e:	e01b      	b.n	8007258 <pow+0xa0>
 8007220:	ec47 6b10 	vmov	d0, r6, r7
 8007224:	f000 f838 	bl	8007298 <finite>
 8007228:	b9e0      	cbnz	r0, 8007264 <pow+0xac>
 800722a:	eeb0 0a48 	vmov.f32	s0, s16
 800722e:	eef0 0a68 	vmov.f32	s1, s17
 8007232:	f000 f831 	bl	8007298 <finite>
 8007236:	b1a8      	cbz	r0, 8007264 <pow+0xac>
 8007238:	ec45 4b10 	vmov	d0, r4, r5
 800723c:	f000 f82c 	bl	8007298 <finite>
 8007240:	b180      	cbz	r0, 8007264 <pow+0xac>
 8007242:	4632      	mov	r2, r6
 8007244:	463b      	mov	r3, r7
 8007246:	4630      	mov	r0, r6
 8007248:	4639      	mov	r1, r7
 800724a:	f7f9 fc2f 	bl	8000aac <__aeabi_dcmpun>
 800724e:	2800      	cmp	r0, #0
 8007250:	d0e2      	beq.n	8007218 <pow+0x60>
 8007252:	f7ff ff87 	bl	8007164 <__errno>
 8007256:	2321      	movs	r3, #33	@ 0x21
 8007258:	6003      	str	r3, [r0, #0]
 800725a:	ecbd 8b02 	vpop	{d8}
 800725e:	ec47 6b10 	vmov	d0, r6, r7
 8007262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007264:	2200      	movs	r2, #0
 8007266:	2300      	movs	r3, #0
 8007268:	4630      	mov	r0, r6
 800726a:	4639      	mov	r1, r7
 800726c:	f7f9 fbec 	bl	8000a48 <__aeabi_dcmpeq>
 8007270:	2800      	cmp	r0, #0
 8007272:	d0f2      	beq.n	800725a <pow+0xa2>
 8007274:	eeb0 0a48 	vmov.f32	s0, s16
 8007278:	eef0 0a68 	vmov.f32	s1, s17
 800727c:	f000 f80c 	bl	8007298 <finite>
 8007280:	2800      	cmp	r0, #0
 8007282:	d0ea      	beq.n	800725a <pow+0xa2>
 8007284:	ec45 4b10 	vmov	d0, r4, r5
 8007288:	f000 f806 	bl	8007298 <finite>
 800728c:	e7c3      	b.n	8007216 <pow+0x5e>
 800728e:	4f01      	ldr	r7, [pc, #4]	@ (8007294 <pow+0xdc>)
 8007290:	2600      	movs	r6, #0
 8007292:	e7e2      	b.n	800725a <pow+0xa2>
 8007294:	3ff00000 	.word	0x3ff00000

08007298 <finite>:
 8007298:	b082      	sub	sp, #8
 800729a:	ed8d 0b00 	vstr	d0, [sp]
 800729e:	9801      	ldr	r0, [sp, #4]
 80072a0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80072a4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80072a8:	0fc0      	lsrs	r0, r0, #31
 80072aa:	b002      	add	sp, #8
 80072ac:	4770      	bx	lr
	...

080072b0 <__ieee754_pow>:
 80072b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b4:	b091      	sub	sp, #68	@ 0x44
 80072b6:	ed8d 1b00 	vstr	d1, [sp]
 80072ba:	e9dd 1900 	ldrd	r1, r9, [sp]
 80072be:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80072c2:	ea5a 0001 	orrs.w	r0, sl, r1
 80072c6:	ec57 6b10 	vmov	r6, r7, d0
 80072ca:	d113      	bne.n	80072f4 <__ieee754_pow+0x44>
 80072cc:	19b3      	adds	r3, r6, r6
 80072ce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80072d2:	4152      	adcs	r2, r2
 80072d4:	4298      	cmp	r0, r3
 80072d6:	4b98      	ldr	r3, [pc, #608]	@ (8007538 <__ieee754_pow+0x288>)
 80072d8:	4193      	sbcs	r3, r2
 80072da:	f080 84ea 	bcs.w	8007cb2 <__ieee754_pow+0xa02>
 80072de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072e2:	4630      	mov	r0, r6
 80072e4:	4639      	mov	r1, r7
 80072e6:	f7f8 ff91 	bl	800020c <__adddf3>
 80072ea:	ec41 0b10 	vmov	d0, r0, r1
 80072ee:	b011      	add	sp, #68	@ 0x44
 80072f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f4:	4a91      	ldr	r2, [pc, #580]	@ (800753c <__ieee754_pow+0x28c>)
 80072f6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80072fa:	4590      	cmp	r8, r2
 80072fc:	463d      	mov	r5, r7
 80072fe:	4633      	mov	r3, r6
 8007300:	d806      	bhi.n	8007310 <__ieee754_pow+0x60>
 8007302:	d101      	bne.n	8007308 <__ieee754_pow+0x58>
 8007304:	2e00      	cmp	r6, #0
 8007306:	d1ea      	bne.n	80072de <__ieee754_pow+0x2e>
 8007308:	4592      	cmp	sl, r2
 800730a:	d801      	bhi.n	8007310 <__ieee754_pow+0x60>
 800730c:	d10e      	bne.n	800732c <__ieee754_pow+0x7c>
 800730e:	b169      	cbz	r1, 800732c <__ieee754_pow+0x7c>
 8007310:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007314:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007318:	431d      	orrs	r5, r3
 800731a:	d1e0      	bne.n	80072de <__ieee754_pow+0x2e>
 800731c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007320:	18db      	adds	r3, r3, r3
 8007322:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007326:	4152      	adcs	r2, r2
 8007328:	429d      	cmp	r5, r3
 800732a:	e7d4      	b.n	80072d6 <__ieee754_pow+0x26>
 800732c:	2d00      	cmp	r5, #0
 800732e:	46c3      	mov	fp, r8
 8007330:	da3a      	bge.n	80073a8 <__ieee754_pow+0xf8>
 8007332:	4a83      	ldr	r2, [pc, #524]	@ (8007540 <__ieee754_pow+0x290>)
 8007334:	4592      	cmp	sl, r2
 8007336:	d84d      	bhi.n	80073d4 <__ieee754_pow+0x124>
 8007338:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800733c:	4592      	cmp	sl, r2
 800733e:	f240 84c7 	bls.w	8007cd0 <__ieee754_pow+0xa20>
 8007342:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007346:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800734a:	2a14      	cmp	r2, #20
 800734c:	dd0f      	ble.n	800736e <__ieee754_pow+0xbe>
 800734e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007352:	fa21 f402 	lsr.w	r4, r1, r2
 8007356:	fa04 f202 	lsl.w	r2, r4, r2
 800735a:	428a      	cmp	r2, r1
 800735c:	f040 84b8 	bne.w	8007cd0 <__ieee754_pow+0xa20>
 8007360:	f004 0401 	and.w	r4, r4, #1
 8007364:	f1c4 0402 	rsb	r4, r4, #2
 8007368:	2900      	cmp	r1, #0
 800736a:	d158      	bne.n	800741e <__ieee754_pow+0x16e>
 800736c:	e00e      	b.n	800738c <__ieee754_pow+0xdc>
 800736e:	2900      	cmp	r1, #0
 8007370:	d154      	bne.n	800741c <__ieee754_pow+0x16c>
 8007372:	f1c2 0214 	rsb	r2, r2, #20
 8007376:	fa4a f402 	asr.w	r4, sl, r2
 800737a:	fa04 f202 	lsl.w	r2, r4, r2
 800737e:	4552      	cmp	r2, sl
 8007380:	f040 84a3 	bne.w	8007cca <__ieee754_pow+0xa1a>
 8007384:	f004 0401 	and.w	r4, r4, #1
 8007388:	f1c4 0402 	rsb	r4, r4, #2
 800738c:	4a6d      	ldr	r2, [pc, #436]	@ (8007544 <__ieee754_pow+0x294>)
 800738e:	4592      	cmp	sl, r2
 8007390:	d12e      	bne.n	80073f0 <__ieee754_pow+0x140>
 8007392:	f1b9 0f00 	cmp.w	r9, #0
 8007396:	f280 8494 	bge.w	8007cc2 <__ieee754_pow+0xa12>
 800739a:	496a      	ldr	r1, [pc, #424]	@ (8007544 <__ieee754_pow+0x294>)
 800739c:	4632      	mov	r2, r6
 800739e:	463b      	mov	r3, r7
 80073a0:	2000      	movs	r0, #0
 80073a2:	f7f9 fa13 	bl	80007cc <__aeabi_ddiv>
 80073a6:	e7a0      	b.n	80072ea <__ieee754_pow+0x3a>
 80073a8:	2400      	movs	r4, #0
 80073aa:	bbc1      	cbnz	r1, 800741e <__ieee754_pow+0x16e>
 80073ac:	4a63      	ldr	r2, [pc, #396]	@ (800753c <__ieee754_pow+0x28c>)
 80073ae:	4592      	cmp	sl, r2
 80073b0:	d1ec      	bne.n	800738c <__ieee754_pow+0xdc>
 80073b2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80073b6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80073ba:	431a      	orrs	r2, r3
 80073bc:	f000 8479 	beq.w	8007cb2 <__ieee754_pow+0xa02>
 80073c0:	4b61      	ldr	r3, [pc, #388]	@ (8007548 <__ieee754_pow+0x298>)
 80073c2:	4598      	cmp	r8, r3
 80073c4:	d908      	bls.n	80073d8 <__ieee754_pow+0x128>
 80073c6:	f1b9 0f00 	cmp.w	r9, #0
 80073ca:	f2c0 8476 	blt.w	8007cba <__ieee754_pow+0xa0a>
 80073ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073d2:	e78a      	b.n	80072ea <__ieee754_pow+0x3a>
 80073d4:	2402      	movs	r4, #2
 80073d6:	e7e8      	b.n	80073aa <__ieee754_pow+0xfa>
 80073d8:	f1b9 0f00 	cmp.w	r9, #0
 80073dc:	f04f 0000 	mov.w	r0, #0
 80073e0:	f04f 0100 	mov.w	r1, #0
 80073e4:	da81      	bge.n	80072ea <__ieee754_pow+0x3a>
 80073e6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80073ea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80073ee:	e77c      	b.n	80072ea <__ieee754_pow+0x3a>
 80073f0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80073f4:	d106      	bne.n	8007404 <__ieee754_pow+0x154>
 80073f6:	4632      	mov	r2, r6
 80073f8:	463b      	mov	r3, r7
 80073fa:	4630      	mov	r0, r6
 80073fc:	4639      	mov	r1, r7
 80073fe:	f7f9 f8bb 	bl	8000578 <__aeabi_dmul>
 8007402:	e772      	b.n	80072ea <__ieee754_pow+0x3a>
 8007404:	4a51      	ldr	r2, [pc, #324]	@ (800754c <__ieee754_pow+0x29c>)
 8007406:	4591      	cmp	r9, r2
 8007408:	d109      	bne.n	800741e <__ieee754_pow+0x16e>
 800740a:	2d00      	cmp	r5, #0
 800740c:	db07      	blt.n	800741e <__ieee754_pow+0x16e>
 800740e:	ec47 6b10 	vmov	d0, r6, r7
 8007412:	b011      	add	sp, #68	@ 0x44
 8007414:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	f000 bd52 	b.w	8007ec0 <__ieee754_sqrt>
 800741c:	2400      	movs	r4, #0
 800741e:	ec47 6b10 	vmov	d0, r6, r7
 8007422:	9302      	str	r3, [sp, #8]
 8007424:	f000 fc88 	bl	8007d38 <fabs>
 8007428:	9b02      	ldr	r3, [sp, #8]
 800742a:	ec51 0b10 	vmov	r0, r1, d0
 800742e:	bb53      	cbnz	r3, 8007486 <__ieee754_pow+0x1d6>
 8007430:	4b44      	ldr	r3, [pc, #272]	@ (8007544 <__ieee754_pow+0x294>)
 8007432:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8007436:	429a      	cmp	r2, r3
 8007438:	d002      	beq.n	8007440 <__ieee754_pow+0x190>
 800743a:	f1b8 0f00 	cmp.w	r8, #0
 800743e:	d122      	bne.n	8007486 <__ieee754_pow+0x1d6>
 8007440:	f1b9 0f00 	cmp.w	r9, #0
 8007444:	da05      	bge.n	8007452 <__ieee754_pow+0x1a2>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	2000      	movs	r0, #0
 800744c:	493d      	ldr	r1, [pc, #244]	@ (8007544 <__ieee754_pow+0x294>)
 800744e:	f7f9 f9bd 	bl	80007cc <__aeabi_ddiv>
 8007452:	2d00      	cmp	r5, #0
 8007454:	f6bf af49 	bge.w	80072ea <__ieee754_pow+0x3a>
 8007458:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800745c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007460:	ea58 0804 	orrs.w	r8, r8, r4
 8007464:	d108      	bne.n	8007478 <__ieee754_pow+0x1c8>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	4610      	mov	r0, r2
 800746c:	4619      	mov	r1, r3
 800746e:	f7f8 fecb 	bl	8000208 <__aeabi_dsub>
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	e794      	b.n	80073a2 <__ieee754_pow+0xf2>
 8007478:	2c01      	cmp	r4, #1
 800747a:	f47f af36 	bne.w	80072ea <__ieee754_pow+0x3a>
 800747e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007482:	4619      	mov	r1, r3
 8007484:	e731      	b.n	80072ea <__ieee754_pow+0x3a>
 8007486:	0feb      	lsrs	r3, r5, #31
 8007488:	3b01      	subs	r3, #1
 800748a:	ea53 0204 	orrs.w	r2, r3, r4
 800748e:	d102      	bne.n	8007496 <__ieee754_pow+0x1e6>
 8007490:	4632      	mov	r2, r6
 8007492:	463b      	mov	r3, r7
 8007494:	e7e9      	b.n	800746a <__ieee754_pow+0x1ba>
 8007496:	3c01      	subs	r4, #1
 8007498:	431c      	orrs	r4, r3
 800749a:	d016      	beq.n	80074ca <__ieee754_pow+0x21a>
 800749c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007528 <__ieee754_pow+0x278>
 80074a0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80074a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80074a8:	f240 8112 	bls.w	80076d0 <__ieee754_pow+0x420>
 80074ac:	4b28      	ldr	r3, [pc, #160]	@ (8007550 <__ieee754_pow+0x2a0>)
 80074ae:	459a      	cmp	sl, r3
 80074b0:	4b25      	ldr	r3, [pc, #148]	@ (8007548 <__ieee754_pow+0x298>)
 80074b2:	d916      	bls.n	80074e2 <__ieee754_pow+0x232>
 80074b4:	4598      	cmp	r8, r3
 80074b6:	d80b      	bhi.n	80074d0 <__ieee754_pow+0x220>
 80074b8:	f1b9 0f00 	cmp.w	r9, #0
 80074bc:	da0b      	bge.n	80074d6 <__ieee754_pow+0x226>
 80074be:	2000      	movs	r0, #0
 80074c0:	b011      	add	sp, #68	@ 0x44
 80074c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c6:	f000 bcf3 	b.w	8007eb0 <__math_oflow>
 80074ca:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8007530 <__ieee754_pow+0x280>
 80074ce:	e7e7      	b.n	80074a0 <__ieee754_pow+0x1f0>
 80074d0:	f1b9 0f00 	cmp.w	r9, #0
 80074d4:	dcf3      	bgt.n	80074be <__ieee754_pow+0x20e>
 80074d6:	2000      	movs	r0, #0
 80074d8:	b011      	add	sp, #68	@ 0x44
 80074da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074de:	f000 bcdf 	b.w	8007ea0 <__math_uflow>
 80074e2:	4598      	cmp	r8, r3
 80074e4:	d20c      	bcs.n	8007500 <__ieee754_pow+0x250>
 80074e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074ea:	2200      	movs	r2, #0
 80074ec:	2300      	movs	r3, #0
 80074ee:	f7f9 fab5 	bl	8000a5c <__aeabi_dcmplt>
 80074f2:	3800      	subs	r0, #0
 80074f4:	bf18      	it	ne
 80074f6:	2001      	movne	r0, #1
 80074f8:	f1b9 0f00 	cmp.w	r9, #0
 80074fc:	daec      	bge.n	80074d8 <__ieee754_pow+0x228>
 80074fe:	e7df      	b.n	80074c0 <__ieee754_pow+0x210>
 8007500:	4b10      	ldr	r3, [pc, #64]	@ (8007544 <__ieee754_pow+0x294>)
 8007502:	4598      	cmp	r8, r3
 8007504:	f04f 0200 	mov.w	r2, #0
 8007508:	d924      	bls.n	8007554 <__ieee754_pow+0x2a4>
 800750a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800750e:	2300      	movs	r3, #0
 8007510:	f7f9 faa4 	bl	8000a5c <__aeabi_dcmplt>
 8007514:	3800      	subs	r0, #0
 8007516:	bf18      	it	ne
 8007518:	2001      	movne	r0, #1
 800751a:	f1b9 0f00 	cmp.w	r9, #0
 800751e:	dccf      	bgt.n	80074c0 <__ieee754_pow+0x210>
 8007520:	e7da      	b.n	80074d8 <__ieee754_pow+0x228>
 8007522:	bf00      	nop
 8007524:	f3af 8000 	nop.w
 8007528:	00000000 	.word	0x00000000
 800752c:	3ff00000 	.word	0x3ff00000
 8007530:	00000000 	.word	0x00000000
 8007534:	bff00000 	.word	0xbff00000
 8007538:	fff00000 	.word	0xfff00000
 800753c:	7ff00000 	.word	0x7ff00000
 8007540:	433fffff 	.word	0x433fffff
 8007544:	3ff00000 	.word	0x3ff00000
 8007548:	3fefffff 	.word	0x3fefffff
 800754c:	3fe00000 	.word	0x3fe00000
 8007550:	43f00000 	.word	0x43f00000
 8007554:	4b5a      	ldr	r3, [pc, #360]	@ (80076c0 <__ieee754_pow+0x410>)
 8007556:	f7f8 fe57 	bl	8000208 <__aeabi_dsub>
 800755a:	a351      	add	r3, pc, #324	@ (adr r3, 80076a0 <__ieee754_pow+0x3f0>)
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	4604      	mov	r4, r0
 8007562:	460d      	mov	r5, r1
 8007564:	f7f9 f808 	bl	8000578 <__aeabi_dmul>
 8007568:	a34f      	add	r3, pc, #316	@ (adr r3, 80076a8 <__ieee754_pow+0x3f8>)
 800756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756e:	4606      	mov	r6, r0
 8007570:	460f      	mov	r7, r1
 8007572:	4620      	mov	r0, r4
 8007574:	4629      	mov	r1, r5
 8007576:	f7f8 ffff 	bl	8000578 <__aeabi_dmul>
 800757a:	4b52      	ldr	r3, [pc, #328]	@ (80076c4 <__ieee754_pow+0x414>)
 800757c:	4682      	mov	sl, r0
 800757e:	468b      	mov	fp, r1
 8007580:	2200      	movs	r2, #0
 8007582:	4620      	mov	r0, r4
 8007584:	4629      	mov	r1, r5
 8007586:	f7f8 fff7 	bl	8000578 <__aeabi_dmul>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	a148      	add	r1, pc, #288	@ (adr r1, 80076b0 <__ieee754_pow+0x400>)
 8007590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007594:	f7f8 fe38 	bl	8000208 <__aeabi_dsub>
 8007598:	4622      	mov	r2, r4
 800759a:	462b      	mov	r3, r5
 800759c:	f7f8 ffec 	bl	8000578 <__aeabi_dmul>
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	2000      	movs	r0, #0
 80075a6:	4948      	ldr	r1, [pc, #288]	@ (80076c8 <__ieee754_pow+0x418>)
 80075a8:	f7f8 fe2e 	bl	8000208 <__aeabi_dsub>
 80075ac:	4622      	mov	r2, r4
 80075ae:	4680      	mov	r8, r0
 80075b0:	4689      	mov	r9, r1
 80075b2:	462b      	mov	r3, r5
 80075b4:	4620      	mov	r0, r4
 80075b6:	4629      	mov	r1, r5
 80075b8:	f7f8 ffde 	bl	8000578 <__aeabi_dmul>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4640      	mov	r0, r8
 80075c2:	4649      	mov	r1, r9
 80075c4:	f7f8 ffd8 	bl	8000578 <__aeabi_dmul>
 80075c8:	a33b      	add	r3, pc, #236	@ (adr r3, 80076b8 <__ieee754_pow+0x408>)
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	f7f8 ffd3 	bl	8000578 <__aeabi_dmul>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	4650      	mov	r0, sl
 80075d8:	4659      	mov	r1, fp
 80075da:	f7f8 fe15 	bl	8000208 <__aeabi_dsub>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4680      	mov	r8, r0
 80075e4:	4689      	mov	r9, r1
 80075e6:	4630      	mov	r0, r6
 80075e8:	4639      	mov	r1, r7
 80075ea:	f7f8 fe0f 	bl	800020c <__adddf3>
 80075ee:	2400      	movs	r4, #0
 80075f0:	4632      	mov	r2, r6
 80075f2:	463b      	mov	r3, r7
 80075f4:	4620      	mov	r0, r4
 80075f6:	460d      	mov	r5, r1
 80075f8:	f7f8 fe06 	bl	8000208 <__aeabi_dsub>
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	4640      	mov	r0, r8
 8007602:	4649      	mov	r1, r9
 8007604:	f7f8 fe00 	bl	8000208 <__aeabi_dsub>
 8007608:	e9dd 2300 	ldrd	r2, r3, [sp]
 800760c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007610:	2300      	movs	r3, #0
 8007612:	9304      	str	r3, [sp, #16]
 8007614:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007618:	4606      	mov	r6, r0
 800761a:	460f      	mov	r7, r1
 800761c:	4652      	mov	r2, sl
 800761e:	465b      	mov	r3, fp
 8007620:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007624:	f7f8 fdf0 	bl	8000208 <__aeabi_dsub>
 8007628:	4622      	mov	r2, r4
 800762a:	462b      	mov	r3, r5
 800762c:	f7f8 ffa4 	bl	8000578 <__aeabi_dmul>
 8007630:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007634:	4680      	mov	r8, r0
 8007636:	4689      	mov	r9, r1
 8007638:	4630      	mov	r0, r6
 800763a:	4639      	mov	r1, r7
 800763c:	f7f8 ff9c 	bl	8000578 <__aeabi_dmul>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	4640      	mov	r0, r8
 8007646:	4649      	mov	r1, r9
 8007648:	f7f8 fde0 	bl	800020c <__adddf3>
 800764c:	4652      	mov	r2, sl
 800764e:	465b      	mov	r3, fp
 8007650:	4606      	mov	r6, r0
 8007652:	460f      	mov	r7, r1
 8007654:	4620      	mov	r0, r4
 8007656:	4629      	mov	r1, r5
 8007658:	f7f8 ff8e 	bl	8000578 <__aeabi_dmul>
 800765c:	460b      	mov	r3, r1
 800765e:	4602      	mov	r2, r0
 8007660:	4680      	mov	r8, r0
 8007662:	4689      	mov	r9, r1
 8007664:	4630      	mov	r0, r6
 8007666:	4639      	mov	r1, r7
 8007668:	f7f8 fdd0 	bl	800020c <__adddf3>
 800766c:	4b17      	ldr	r3, [pc, #92]	@ (80076cc <__ieee754_pow+0x41c>)
 800766e:	4299      	cmp	r1, r3
 8007670:	4604      	mov	r4, r0
 8007672:	460d      	mov	r5, r1
 8007674:	468a      	mov	sl, r1
 8007676:	468b      	mov	fp, r1
 8007678:	f340 82ef 	ble.w	8007c5a <__ieee754_pow+0x9aa>
 800767c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007680:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007684:	4303      	orrs	r3, r0
 8007686:	f000 81e8 	beq.w	8007a5a <__ieee754_pow+0x7aa>
 800768a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800768e:	2200      	movs	r2, #0
 8007690:	2300      	movs	r3, #0
 8007692:	f7f9 f9e3 	bl	8000a5c <__aeabi_dcmplt>
 8007696:	3800      	subs	r0, #0
 8007698:	bf18      	it	ne
 800769a:	2001      	movne	r0, #1
 800769c:	e710      	b.n	80074c0 <__ieee754_pow+0x210>
 800769e:	bf00      	nop
 80076a0:	60000000 	.word	0x60000000
 80076a4:	3ff71547 	.word	0x3ff71547
 80076a8:	f85ddf44 	.word	0xf85ddf44
 80076ac:	3e54ae0b 	.word	0x3e54ae0b
 80076b0:	55555555 	.word	0x55555555
 80076b4:	3fd55555 	.word	0x3fd55555
 80076b8:	652b82fe 	.word	0x652b82fe
 80076bc:	3ff71547 	.word	0x3ff71547
 80076c0:	3ff00000 	.word	0x3ff00000
 80076c4:	3fd00000 	.word	0x3fd00000
 80076c8:	3fe00000 	.word	0x3fe00000
 80076cc:	408fffff 	.word	0x408fffff
 80076d0:	4bd5      	ldr	r3, [pc, #852]	@ (8007a28 <__ieee754_pow+0x778>)
 80076d2:	402b      	ands	r3, r5
 80076d4:	2200      	movs	r2, #0
 80076d6:	b92b      	cbnz	r3, 80076e4 <__ieee754_pow+0x434>
 80076d8:	4bd4      	ldr	r3, [pc, #848]	@ (8007a2c <__ieee754_pow+0x77c>)
 80076da:	f7f8 ff4d 	bl	8000578 <__aeabi_dmul>
 80076de:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80076e2:	468b      	mov	fp, r1
 80076e4:	ea4f 532b 	mov.w	r3, fp, asr #20
 80076e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80076ec:	4413      	add	r3, r2
 80076ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80076f0:	4bcf      	ldr	r3, [pc, #828]	@ (8007a30 <__ieee754_pow+0x780>)
 80076f2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80076f6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80076fa:	459b      	cmp	fp, r3
 80076fc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007700:	dd08      	ble.n	8007714 <__ieee754_pow+0x464>
 8007702:	4bcc      	ldr	r3, [pc, #816]	@ (8007a34 <__ieee754_pow+0x784>)
 8007704:	459b      	cmp	fp, r3
 8007706:	f340 81a5 	ble.w	8007a54 <__ieee754_pow+0x7a4>
 800770a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800770c:	3301      	adds	r3, #1
 800770e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007710:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007714:	f04f 0a00 	mov.w	sl, #0
 8007718:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800771c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800771e:	4bc6      	ldr	r3, [pc, #792]	@ (8007a38 <__ieee754_pow+0x788>)
 8007720:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007724:	ed93 7b00 	vldr	d7, [r3]
 8007728:	4629      	mov	r1, r5
 800772a:	ec53 2b17 	vmov	r2, r3, d7
 800772e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007732:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007736:	f7f8 fd67 	bl	8000208 <__aeabi_dsub>
 800773a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800773e:	4606      	mov	r6, r0
 8007740:	460f      	mov	r7, r1
 8007742:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007746:	f7f8 fd61 	bl	800020c <__adddf3>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	2000      	movs	r0, #0
 8007750:	49ba      	ldr	r1, [pc, #744]	@ (8007a3c <__ieee754_pow+0x78c>)
 8007752:	f7f9 f83b 	bl	80007cc <__aeabi_ddiv>
 8007756:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4630      	mov	r0, r6
 8007760:	4639      	mov	r1, r7
 8007762:	f7f8 ff09 	bl	8000578 <__aeabi_dmul>
 8007766:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800776a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800776e:	106d      	asrs	r5, r5, #1
 8007770:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007774:	f04f 0b00 	mov.w	fp, #0
 8007778:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800777c:	4661      	mov	r1, ip
 800777e:	2200      	movs	r2, #0
 8007780:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007784:	4658      	mov	r0, fp
 8007786:	46e1      	mov	r9, ip
 8007788:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800778c:	4614      	mov	r4, r2
 800778e:	461d      	mov	r5, r3
 8007790:	f7f8 fef2 	bl	8000578 <__aeabi_dmul>
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	4630      	mov	r0, r6
 800779a:	4639      	mov	r1, r7
 800779c:	f7f8 fd34 	bl	8000208 <__aeabi_dsub>
 80077a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077a4:	4606      	mov	r6, r0
 80077a6:	460f      	mov	r7, r1
 80077a8:	4620      	mov	r0, r4
 80077aa:	4629      	mov	r1, r5
 80077ac:	f7f8 fd2c 	bl	8000208 <__aeabi_dsub>
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80077b8:	f7f8 fd26 	bl	8000208 <__aeabi_dsub>
 80077bc:	465a      	mov	r2, fp
 80077be:	464b      	mov	r3, r9
 80077c0:	f7f8 feda 	bl	8000578 <__aeabi_dmul>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4630      	mov	r0, r6
 80077ca:	4639      	mov	r1, r7
 80077cc:	f7f8 fd1c 	bl	8000208 <__aeabi_dsub>
 80077d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80077d4:	f7f8 fed0 	bl	8000578 <__aeabi_dmul>
 80077d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80077e0:	4610      	mov	r0, r2
 80077e2:	4619      	mov	r1, r3
 80077e4:	f7f8 fec8 	bl	8000578 <__aeabi_dmul>
 80077e8:	a37d      	add	r3, pc, #500	@ (adr r3, 80079e0 <__ieee754_pow+0x730>)
 80077ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ee:	4604      	mov	r4, r0
 80077f0:	460d      	mov	r5, r1
 80077f2:	f7f8 fec1 	bl	8000578 <__aeabi_dmul>
 80077f6:	a37c      	add	r3, pc, #496	@ (adr r3, 80079e8 <__ieee754_pow+0x738>)
 80077f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fc:	f7f8 fd06 	bl	800020c <__adddf3>
 8007800:	4622      	mov	r2, r4
 8007802:	462b      	mov	r3, r5
 8007804:	f7f8 feb8 	bl	8000578 <__aeabi_dmul>
 8007808:	a379      	add	r3, pc, #484	@ (adr r3, 80079f0 <__ieee754_pow+0x740>)
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f7f8 fcfd 	bl	800020c <__adddf3>
 8007812:	4622      	mov	r2, r4
 8007814:	462b      	mov	r3, r5
 8007816:	f7f8 feaf 	bl	8000578 <__aeabi_dmul>
 800781a:	a377      	add	r3, pc, #476	@ (adr r3, 80079f8 <__ieee754_pow+0x748>)
 800781c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007820:	f7f8 fcf4 	bl	800020c <__adddf3>
 8007824:	4622      	mov	r2, r4
 8007826:	462b      	mov	r3, r5
 8007828:	f7f8 fea6 	bl	8000578 <__aeabi_dmul>
 800782c:	a374      	add	r3, pc, #464	@ (adr r3, 8007a00 <__ieee754_pow+0x750>)
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	f7f8 fceb 	bl	800020c <__adddf3>
 8007836:	4622      	mov	r2, r4
 8007838:	462b      	mov	r3, r5
 800783a:	f7f8 fe9d 	bl	8000578 <__aeabi_dmul>
 800783e:	a372      	add	r3, pc, #456	@ (adr r3, 8007a08 <__ieee754_pow+0x758>)
 8007840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007844:	f7f8 fce2 	bl	800020c <__adddf3>
 8007848:	4622      	mov	r2, r4
 800784a:	4606      	mov	r6, r0
 800784c:	460f      	mov	r7, r1
 800784e:	462b      	mov	r3, r5
 8007850:	4620      	mov	r0, r4
 8007852:	4629      	mov	r1, r5
 8007854:	f7f8 fe90 	bl	8000578 <__aeabi_dmul>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4630      	mov	r0, r6
 800785e:	4639      	mov	r1, r7
 8007860:	f7f8 fe8a 	bl	8000578 <__aeabi_dmul>
 8007864:	465a      	mov	r2, fp
 8007866:	4604      	mov	r4, r0
 8007868:	460d      	mov	r5, r1
 800786a:	464b      	mov	r3, r9
 800786c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007870:	f7f8 fccc 	bl	800020c <__adddf3>
 8007874:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007878:	f7f8 fe7e 	bl	8000578 <__aeabi_dmul>
 800787c:	4622      	mov	r2, r4
 800787e:	462b      	mov	r3, r5
 8007880:	f7f8 fcc4 	bl	800020c <__adddf3>
 8007884:	465a      	mov	r2, fp
 8007886:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800788a:	464b      	mov	r3, r9
 800788c:	4658      	mov	r0, fp
 800788e:	4649      	mov	r1, r9
 8007890:	f7f8 fe72 	bl	8000578 <__aeabi_dmul>
 8007894:	4b6a      	ldr	r3, [pc, #424]	@ (8007a40 <__ieee754_pow+0x790>)
 8007896:	2200      	movs	r2, #0
 8007898:	4606      	mov	r6, r0
 800789a:	460f      	mov	r7, r1
 800789c:	f7f8 fcb6 	bl	800020c <__adddf3>
 80078a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80078a4:	f7f8 fcb2 	bl	800020c <__adddf3>
 80078a8:	46d8      	mov	r8, fp
 80078aa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80078ae:	460d      	mov	r5, r1
 80078b0:	465a      	mov	r2, fp
 80078b2:	460b      	mov	r3, r1
 80078b4:	4640      	mov	r0, r8
 80078b6:	4649      	mov	r1, r9
 80078b8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80078bc:	f7f8 fe5c 	bl	8000578 <__aeabi_dmul>
 80078c0:	465c      	mov	r4, fp
 80078c2:	4680      	mov	r8, r0
 80078c4:	4689      	mov	r9, r1
 80078c6:	4b5e      	ldr	r3, [pc, #376]	@ (8007a40 <__ieee754_pow+0x790>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	4620      	mov	r0, r4
 80078cc:	4629      	mov	r1, r5
 80078ce:	f7f8 fc9b 	bl	8000208 <__aeabi_dsub>
 80078d2:	4632      	mov	r2, r6
 80078d4:	463b      	mov	r3, r7
 80078d6:	f7f8 fc97 	bl	8000208 <__aeabi_dsub>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078e2:	f7f8 fc91 	bl	8000208 <__aeabi_dsub>
 80078e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078ea:	f7f8 fe45 	bl	8000578 <__aeabi_dmul>
 80078ee:	4622      	mov	r2, r4
 80078f0:	4606      	mov	r6, r0
 80078f2:	460f      	mov	r7, r1
 80078f4:	462b      	mov	r3, r5
 80078f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078fa:	f7f8 fe3d 	bl	8000578 <__aeabi_dmul>
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4630      	mov	r0, r6
 8007904:	4639      	mov	r1, r7
 8007906:	f7f8 fc81 	bl	800020c <__adddf3>
 800790a:	4606      	mov	r6, r0
 800790c:	460f      	mov	r7, r1
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4640      	mov	r0, r8
 8007914:	4649      	mov	r1, r9
 8007916:	f7f8 fc79 	bl	800020c <__adddf3>
 800791a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800791e:	a33c      	add	r3, pc, #240	@ (adr r3, 8007a10 <__ieee754_pow+0x760>)
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	4658      	mov	r0, fp
 8007926:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800792a:	460d      	mov	r5, r1
 800792c:	f7f8 fe24 	bl	8000578 <__aeabi_dmul>
 8007930:	465c      	mov	r4, fp
 8007932:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007936:	4642      	mov	r2, r8
 8007938:	464b      	mov	r3, r9
 800793a:	4620      	mov	r0, r4
 800793c:	4629      	mov	r1, r5
 800793e:	f7f8 fc63 	bl	8000208 <__aeabi_dsub>
 8007942:	4602      	mov	r2, r0
 8007944:	460b      	mov	r3, r1
 8007946:	4630      	mov	r0, r6
 8007948:	4639      	mov	r1, r7
 800794a:	f7f8 fc5d 	bl	8000208 <__aeabi_dsub>
 800794e:	a332      	add	r3, pc, #200	@ (adr r3, 8007a18 <__ieee754_pow+0x768>)
 8007950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007954:	f7f8 fe10 	bl	8000578 <__aeabi_dmul>
 8007958:	a331      	add	r3, pc, #196	@ (adr r3, 8007a20 <__ieee754_pow+0x770>)
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	4606      	mov	r6, r0
 8007960:	460f      	mov	r7, r1
 8007962:	4620      	mov	r0, r4
 8007964:	4629      	mov	r1, r5
 8007966:	f7f8 fe07 	bl	8000578 <__aeabi_dmul>
 800796a:	4602      	mov	r2, r0
 800796c:	460b      	mov	r3, r1
 800796e:	4630      	mov	r0, r6
 8007970:	4639      	mov	r1, r7
 8007972:	f7f8 fc4b 	bl	800020c <__adddf3>
 8007976:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007978:	4b32      	ldr	r3, [pc, #200]	@ (8007a44 <__ieee754_pow+0x794>)
 800797a:	4413      	add	r3, r2
 800797c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007980:	f7f8 fc44 	bl	800020c <__adddf3>
 8007984:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007988:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800798a:	f7f8 fd8b 	bl	80004a4 <__aeabi_i2d>
 800798e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007990:	4b2d      	ldr	r3, [pc, #180]	@ (8007a48 <__ieee754_pow+0x798>)
 8007992:	4413      	add	r3, r2
 8007994:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007998:	4606      	mov	r6, r0
 800799a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800799e:	460f      	mov	r7, r1
 80079a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079a4:	f7f8 fc32 	bl	800020c <__adddf3>
 80079a8:	4642      	mov	r2, r8
 80079aa:	464b      	mov	r3, r9
 80079ac:	f7f8 fc2e 	bl	800020c <__adddf3>
 80079b0:	4632      	mov	r2, r6
 80079b2:	463b      	mov	r3, r7
 80079b4:	f7f8 fc2a 	bl	800020c <__adddf3>
 80079b8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80079bc:	4632      	mov	r2, r6
 80079be:	463b      	mov	r3, r7
 80079c0:	4658      	mov	r0, fp
 80079c2:	460d      	mov	r5, r1
 80079c4:	f7f8 fc20 	bl	8000208 <__aeabi_dsub>
 80079c8:	4642      	mov	r2, r8
 80079ca:	464b      	mov	r3, r9
 80079cc:	f7f8 fc1c 	bl	8000208 <__aeabi_dsub>
 80079d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079d4:	f7f8 fc18 	bl	8000208 <__aeabi_dsub>
 80079d8:	465c      	mov	r4, fp
 80079da:	4602      	mov	r2, r0
 80079dc:	e036      	b.n	8007a4c <__ieee754_pow+0x79c>
 80079de:	bf00      	nop
 80079e0:	4a454eef 	.word	0x4a454eef
 80079e4:	3fca7e28 	.word	0x3fca7e28
 80079e8:	93c9db65 	.word	0x93c9db65
 80079ec:	3fcd864a 	.word	0x3fcd864a
 80079f0:	a91d4101 	.word	0xa91d4101
 80079f4:	3fd17460 	.word	0x3fd17460
 80079f8:	518f264d 	.word	0x518f264d
 80079fc:	3fd55555 	.word	0x3fd55555
 8007a00:	db6fabff 	.word	0xdb6fabff
 8007a04:	3fdb6db6 	.word	0x3fdb6db6
 8007a08:	33333303 	.word	0x33333303
 8007a0c:	3fe33333 	.word	0x3fe33333
 8007a10:	e0000000 	.word	0xe0000000
 8007a14:	3feec709 	.word	0x3feec709
 8007a18:	dc3a03fd 	.word	0xdc3a03fd
 8007a1c:	3feec709 	.word	0x3feec709
 8007a20:	145b01f5 	.word	0x145b01f5
 8007a24:	be3e2fe0 	.word	0xbe3e2fe0
 8007a28:	7ff00000 	.word	0x7ff00000
 8007a2c:	43400000 	.word	0x43400000
 8007a30:	0003988e 	.word	0x0003988e
 8007a34:	000bb679 	.word	0x000bb679
 8007a38:	0800a2a0 	.word	0x0800a2a0
 8007a3c:	3ff00000 	.word	0x3ff00000
 8007a40:	40080000 	.word	0x40080000
 8007a44:	0800a280 	.word	0x0800a280
 8007a48:	0800a290 	.word	0x0800a290
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a52:	e5d7      	b.n	8007604 <__ieee754_pow+0x354>
 8007a54:	f04f 0a01 	mov.w	sl, #1
 8007a58:	e65e      	b.n	8007718 <__ieee754_pow+0x468>
 8007a5a:	a3b4      	add	r3, pc, #720	@ (adr r3, 8007d2c <__ieee754_pow+0xa7c>)
 8007a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a60:	4630      	mov	r0, r6
 8007a62:	4639      	mov	r1, r7
 8007a64:	f7f8 fbd2 	bl	800020c <__adddf3>
 8007a68:	4642      	mov	r2, r8
 8007a6a:	e9cd 0100 	strd	r0, r1, [sp]
 8007a6e:	464b      	mov	r3, r9
 8007a70:	4620      	mov	r0, r4
 8007a72:	4629      	mov	r1, r5
 8007a74:	f7f8 fbc8 	bl	8000208 <__aeabi_dsub>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a80:	f7f9 f80a 	bl	8000a98 <__aeabi_dcmpgt>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	f47f ae00 	bne.w	800768a <__ieee754_pow+0x3da>
 8007a8a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8007a8e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007a92:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007a96:	fa43 fa0a 	asr.w	sl, r3, sl
 8007a9a:	44da      	add	sl, fp
 8007a9c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007aa0:	489d      	ldr	r0, [pc, #628]	@ (8007d18 <__ieee754_pow+0xa68>)
 8007aa2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007aa6:	4108      	asrs	r0, r1
 8007aa8:	ea00 030a 	and.w	r3, r0, sl
 8007aac:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007ab0:	f1c1 0114 	rsb	r1, r1, #20
 8007ab4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007ab8:	fa4a fa01 	asr.w	sl, sl, r1
 8007abc:	f1bb 0f00 	cmp.w	fp, #0
 8007ac0:	4640      	mov	r0, r8
 8007ac2:	4649      	mov	r1, r9
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	bfb8      	it	lt
 8007aca:	f1ca 0a00 	rsblt	sl, sl, #0
 8007ace:	f7f8 fb9b 	bl	8000208 <__aeabi_dsub>
 8007ad2:	4680      	mov	r8, r0
 8007ad4:	4689      	mov	r9, r1
 8007ad6:	4632      	mov	r2, r6
 8007ad8:	463b      	mov	r3, r7
 8007ada:	4640      	mov	r0, r8
 8007adc:	4649      	mov	r1, r9
 8007ade:	f7f8 fb95 	bl	800020c <__adddf3>
 8007ae2:	2400      	movs	r4, #0
 8007ae4:	a37c      	add	r3, pc, #496	@ (adr r3, 8007cd8 <__ieee754_pow+0xa28>)
 8007ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aea:	4620      	mov	r0, r4
 8007aec:	460d      	mov	r5, r1
 8007aee:	f7f8 fd43 	bl	8000578 <__aeabi_dmul>
 8007af2:	4642      	mov	r2, r8
 8007af4:	e9cd 0100 	strd	r0, r1, [sp]
 8007af8:	464b      	mov	r3, r9
 8007afa:	4620      	mov	r0, r4
 8007afc:	4629      	mov	r1, r5
 8007afe:	f7f8 fb83 	bl	8000208 <__aeabi_dsub>
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	4630      	mov	r0, r6
 8007b08:	4639      	mov	r1, r7
 8007b0a:	f7f8 fb7d 	bl	8000208 <__aeabi_dsub>
 8007b0e:	a374      	add	r3, pc, #464	@ (adr r3, 8007ce0 <__ieee754_pow+0xa30>)
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	f7f8 fd30 	bl	8000578 <__aeabi_dmul>
 8007b18:	a373      	add	r3, pc, #460	@ (adr r3, 8007ce8 <__ieee754_pow+0xa38>)
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	4680      	mov	r8, r0
 8007b20:	4689      	mov	r9, r1
 8007b22:	4620      	mov	r0, r4
 8007b24:	4629      	mov	r1, r5
 8007b26:	f7f8 fd27 	bl	8000578 <__aeabi_dmul>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4640      	mov	r0, r8
 8007b30:	4649      	mov	r1, r9
 8007b32:	f7f8 fb6b 	bl	800020c <__adddf3>
 8007b36:	4604      	mov	r4, r0
 8007b38:	460d      	mov	r5, r1
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b42:	f7f8 fb63 	bl	800020c <__adddf3>
 8007b46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b4a:	4680      	mov	r8, r0
 8007b4c:	4689      	mov	r9, r1
 8007b4e:	f7f8 fb5b 	bl	8000208 <__aeabi_dsub>
 8007b52:	4602      	mov	r2, r0
 8007b54:	460b      	mov	r3, r1
 8007b56:	4620      	mov	r0, r4
 8007b58:	4629      	mov	r1, r5
 8007b5a:	f7f8 fb55 	bl	8000208 <__aeabi_dsub>
 8007b5e:	4642      	mov	r2, r8
 8007b60:	4606      	mov	r6, r0
 8007b62:	460f      	mov	r7, r1
 8007b64:	464b      	mov	r3, r9
 8007b66:	4640      	mov	r0, r8
 8007b68:	4649      	mov	r1, r9
 8007b6a:	f7f8 fd05 	bl	8000578 <__aeabi_dmul>
 8007b6e:	a360      	add	r3, pc, #384	@ (adr r3, 8007cf0 <__ieee754_pow+0xa40>)
 8007b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b74:	4604      	mov	r4, r0
 8007b76:	460d      	mov	r5, r1
 8007b78:	f7f8 fcfe 	bl	8000578 <__aeabi_dmul>
 8007b7c:	a35e      	add	r3, pc, #376	@ (adr r3, 8007cf8 <__ieee754_pow+0xa48>)
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	f7f8 fb41 	bl	8000208 <__aeabi_dsub>
 8007b86:	4622      	mov	r2, r4
 8007b88:	462b      	mov	r3, r5
 8007b8a:	f7f8 fcf5 	bl	8000578 <__aeabi_dmul>
 8007b8e:	a35c      	add	r3, pc, #368	@ (adr r3, 8007d00 <__ieee754_pow+0xa50>)
 8007b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b94:	f7f8 fb3a 	bl	800020c <__adddf3>
 8007b98:	4622      	mov	r2, r4
 8007b9a:	462b      	mov	r3, r5
 8007b9c:	f7f8 fcec 	bl	8000578 <__aeabi_dmul>
 8007ba0:	a359      	add	r3, pc, #356	@ (adr r3, 8007d08 <__ieee754_pow+0xa58>)
 8007ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba6:	f7f8 fb2f 	bl	8000208 <__aeabi_dsub>
 8007baa:	4622      	mov	r2, r4
 8007bac:	462b      	mov	r3, r5
 8007bae:	f7f8 fce3 	bl	8000578 <__aeabi_dmul>
 8007bb2:	a357      	add	r3, pc, #348	@ (adr r3, 8007d10 <__ieee754_pow+0xa60>)
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	f7f8 fb28 	bl	800020c <__adddf3>
 8007bbc:	4622      	mov	r2, r4
 8007bbe:	462b      	mov	r3, r5
 8007bc0:	f7f8 fcda 	bl	8000578 <__aeabi_dmul>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	4640      	mov	r0, r8
 8007bca:	4649      	mov	r1, r9
 8007bcc:	f7f8 fb1c 	bl	8000208 <__aeabi_dsub>
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	460d      	mov	r5, r1
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4640      	mov	r0, r8
 8007bda:	4649      	mov	r1, r9
 8007bdc:	f7f8 fccc 	bl	8000578 <__aeabi_dmul>
 8007be0:	2200      	movs	r2, #0
 8007be2:	e9cd 0100 	strd	r0, r1, [sp]
 8007be6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007bea:	4620      	mov	r0, r4
 8007bec:	4629      	mov	r1, r5
 8007bee:	f7f8 fb0b 	bl	8000208 <__aeabi_dsub>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bfa:	f7f8 fde7 	bl	80007cc <__aeabi_ddiv>
 8007bfe:	4632      	mov	r2, r6
 8007c00:	4604      	mov	r4, r0
 8007c02:	460d      	mov	r5, r1
 8007c04:	463b      	mov	r3, r7
 8007c06:	4640      	mov	r0, r8
 8007c08:	4649      	mov	r1, r9
 8007c0a:	f7f8 fcb5 	bl	8000578 <__aeabi_dmul>
 8007c0e:	4632      	mov	r2, r6
 8007c10:	463b      	mov	r3, r7
 8007c12:	f7f8 fafb 	bl	800020c <__adddf3>
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	f7f8 faf3 	bl	8000208 <__aeabi_dsub>
 8007c22:	4642      	mov	r2, r8
 8007c24:	464b      	mov	r3, r9
 8007c26:	f7f8 faef 	bl	8000208 <__aeabi_dsub>
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	493b      	ldr	r1, [pc, #236]	@ (8007d1c <__ieee754_pow+0xa6c>)
 8007c30:	2000      	movs	r0, #0
 8007c32:	f7f8 fae9 	bl	8000208 <__aeabi_dsub>
 8007c36:	ec41 0b10 	vmov	d0, r0, r1
 8007c3a:	ee10 3a90 	vmov	r3, s1
 8007c3e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007c42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c46:	da30      	bge.n	8007caa <__ieee754_pow+0x9fa>
 8007c48:	4650      	mov	r0, sl
 8007c4a:	f000 f87d 	bl	8007d48 <scalbn>
 8007c4e:	ec51 0b10 	vmov	r0, r1, d0
 8007c52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c56:	f7ff bbd2 	b.w	80073fe <__ieee754_pow+0x14e>
 8007c5a:	4c31      	ldr	r4, [pc, #196]	@ (8007d20 <__ieee754_pow+0xa70>)
 8007c5c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007c60:	42a3      	cmp	r3, r4
 8007c62:	d91a      	bls.n	8007c9a <__ieee754_pow+0x9ea>
 8007c64:	4b2f      	ldr	r3, [pc, #188]	@ (8007d24 <__ieee754_pow+0xa74>)
 8007c66:	440b      	add	r3, r1
 8007c68:	4303      	orrs	r3, r0
 8007c6a:	d009      	beq.n	8007c80 <__ieee754_pow+0x9d0>
 8007c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c70:	2200      	movs	r2, #0
 8007c72:	2300      	movs	r3, #0
 8007c74:	f7f8 fef2 	bl	8000a5c <__aeabi_dcmplt>
 8007c78:	3800      	subs	r0, #0
 8007c7a:	bf18      	it	ne
 8007c7c:	2001      	movne	r0, #1
 8007c7e:	e42b      	b.n	80074d8 <__ieee754_pow+0x228>
 8007c80:	4642      	mov	r2, r8
 8007c82:	464b      	mov	r3, r9
 8007c84:	f7f8 fac0 	bl	8000208 <__aeabi_dsub>
 8007c88:	4632      	mov	r2, r6
 8007c8a:	463b      	mov	r3, r7
 8007c8c:	f7f8 fefa 	bl	8000a84 <__aeabi_dcmpge>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d1eb      	bne.n	8007c6c <__ieee754_pow+0x9bc>
 8007c94:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8007d34 <__ieee754_pow+0xa84>
 8007c98:	e6f7      	b.n	8007a8a <__ieee754_pow+0x7da>
 8007c9a:	469a      	mov	sl, r3
 8007c9c:	4b22      	ldr	r3, [pc, #136]	@ (8007d28 <__ieee754_pow+0xa78>)
 8007c9e:	459a      	cmp	sl, r3
 8007ca0:	f63f aef3 	bhi.w	8007a8a <__ieee754_pow+0x7da>
 8007ca4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007ca8:	e715      	b.n	8007ad6 <__ieee754_pow+0x826>
 8007caa:	ec51 0b10 	vmov	r0, r1, d0
 8007cae:	4619      	mov	r1, r3
 8007cb0:	e7cf      	b.n	8007c52 <__ieee754_pow+0x9a2>
 8007cb2:	491a      	ldr	r1, [pc, #104]	@ (8007d1c <__ieee754_pow+0xa6c>)
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	f7ff bb18 	b.w	80072ea <__ieee754_pow+0x3a>
 8007cba:	2000      	movs	r0, #0
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	f7ff bb14 	b.w	80072ea <__ieee754_pow+0x3a>
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	f7ff bb10 	b.w	80072ea <__ieee754_pow+0x3a>
 8007cca:	460c      	mov	r4, r1
 8007ccc:	f7ff bb5e 	b.w	800738c <__ieee754_pow+0xdc>
 8007cd0:	2400      	movs	r4, #0
 8007cd2:	f7ff bb49 	b.w	8007368 <__ieee754_pow+0xb8>
 8007cd6:	bf00      	nop
 8007cd8:	00000000 	.word	0x00000000
 8007cdc:	3fe62e43 	.word	0x3fe62e43
 8007ce0:	fefa39ef 	.word	0xfefa39ef
 8007ce4:	3fe62e42 	.word	0x3fe62e42
 8007ce8:	0ca86c39 	.word	0x0ca86c39
 8007cec:	be205c61 	.word	0xbe205c61
 8007cf0:	72bea4d0 	.word	0x72bea4d0
 8007cf4:	3e663769 	.word	0x3e663769
 8007cf8:	c5d26bf1 	.word	0xc5d26bf1
 8007cfc:	3ebbbd41 	.word	0x3ebbbd41
 8007d00:	af25de2c 	.word	0xaf25de2c
 8007d04:	3f11566a 	.word	0x3f11566a
 8007d08:	16bebd93 	.word	0x16bebd93
 8007d0c:	3f66c16c 	.word	0x3f66c16c
 8007d10:	5555553e 	.word	0x5555553e
 8007d14:	3fc55555 	.word	0x3fc55555
 8007d18:	fff00000 	.word	0xfff00000
 8007d1c:	3ff00000 	.word	0x3ff00000
 8007d20:	4090cbff 	.word	0x4090cbff
 8007d24:	3f6f3400 	.word	0x3f6f3400
 8007d28:	3fe00000 	.word	0x3fe00000
 8007d2c:	652b82fe 	.word	0x652b82fe
 8007d30:	3c971547 	.word	0x3c971547
 8007d34:	4090cc00 	.word	0x4090cc00

08007d38 <fabs>:
 8007d38:	ec51 0b10 	vmov	r0, r1, d0
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007d42:	ec43 2b10 	vmov	d0, r2, r3
 8007d46:	4770      	bx	lr

08007d48 <scalbn>:
 8007d48:	b570      	push	{r4, r5, r6, lr}
 8007d4a:	ec55 4b10 	vmov	r4, r5, d0
 8007d4e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007d52:	4606      	mov	r6, r0
 8007d54:	462b      	mov	r3, r5
 8007d56:	b991      	cbnz	r1, 8007d7e <scalbn+0x36>
 8007d58:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007d5c:	4323      	orrs	r3, r4
 8007d5e:	d03d      	beq.n	8007ddc <scalbn+0x94>
 8007d60:	4b35      	ldr	r3, [pc, #212]	@ (8007e38 <scalbn+0xf0>)
 8007d62:	4620      	mov	r0, r4
 8007d64:	4629      	mov	r1, r5
 8007d66:	2200      	movs	r2, #0
 8007d68:	f7f8 fc06 	bl	8000578 <__aeabi_dmul>
 8007d6c:	4b33      	ldr	r3, [pc, #204]	@ (8007e3c <scalbn+0xf4>)
 8007d6e:	429e      	cmp	r6, r3
 8007d70:	4604      	mov	r4, r0
 8007d72:	460d      	mov	r5, r1
 8007d74:	da0f      	bge.n	8007d96 <scalbn+0x4e>
 8007d76:	a328      	add	r3, pc, #160	@ (adr r3, 8007e18 <scalbn+0xd0>)
 8007d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7c:	e01e      	b.n	8007dbc <scalbn+0x74>
 8007d7e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007d82:	4291      	cmp	r1, r2
 8007d84:	d10b      	bne.n	8007d9e <scalbn+0x56>
 8007d86:	4622      	mov	r2, r4
 8007d88:	4620      	mov	r0, r4
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	f7f8 fa3e 	bl	800020c <__adddf3>
 8007d90:	4604      	mov	r4, r0
 8007d92:	460d      	mov	r5, r1
 8007d94:	e022      	b.n	8007ddc <scalbn+0x94>
 8007d96:	460b      	mov	r3, r1
 8007d98:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007d9c:	3936      	subs	r1, #54	@ 0x36
 8007d9e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007da2:	4296      	cmp	r6, r2
 8007da4:	dd0d      	ble.n	8007dc2 <scalbn+0x7a>
 8007da6:	2d00      	cmp	r5, #0
 8007da8:	a11d      	add	r1, pc, #116	@ (adr r1, 8007e20 <scalbn+0xd8>)
 8007daa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dae:	da02      	bge.n	8007db6 <scalbn+0x6e>
 8007db0:	a11d      	add	r1, pc, #116	@ (adr r1, 8007e28 <scalbn+0xe0>)
 8007db2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007db6:	a31a      	add	r3, pc, #104	@ (adr r3, 8007e20 <scalbn+0xd8>)
 8007db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbc:	f7f8 fbdc 	bl	8000578 <__aeabi_dmul>
 8007dc0:	e7e6      	b.n	8007d90 <scalbn+0x48>
 8007dc2:	1872      	adds	r2, r6, r1
 8007dc4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007dc8:	428a      	cmp	r2, r1
 8007dca:	dcec      	bgt.n	8007da6 <scalbn+0x5e>
 8007dcc:	2a00      	cmp	r2, #0
 8007dce:	dd08      	ble.n	8007de2 <scalbn+0x9a>
 8007dd0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007dd4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007dd8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007ddc:	ec45 4b10 	vmov	d0, r4, r5
 8007de0:	bd70      	pop	{r4, r5, r6, pc}
 8007de2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007de6:	da08      	bge.n	8007dfa <scalbn+0xb2>
 8007de8:	2d00      	cmp	r5, #0
 8007dea:	a10b      	add	r1, pc, #44	@ (adr r1, 8007e18 <scalbn+0xd0>)
 8007dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007df0:	dac1      	bge.n	8007d76 <scalbn+0x2e>
 8007df2:	a10f      	add	r1, pc, #60	@ (adr r1, 8007e30 <scalbn+0xe8>)
 8007df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007df8:	e7bd      	b.n	8007d76 <scalbn+0x2e>
 8007dfa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007dfe:	3236      	adds	r2, #54	@ 0x36
 8007e00:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007e04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007e08:	4620      	mov	r0, r4
 8007e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e40 <scalbn+0xf8>)
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	2200      	movs	r2, #0
 8007e10:	e7d4      	b.n	8007dbc <scalbn+0x74>
 8007e12:	bf00      	nop
 8007e14:	f3af 8000 	nop.w
 8007e18:	c2f8f359 	.word	0xc2f8f359
 8007e1c:	01a56e1f 	.word	0x01a56e1f
 8007e20:	8800759c 	.word	0x8800759c
 8007e24:	7e37e43c 	.word	0x7e37e43c
 8007e28:	8800759c 	.word	0x8800759c
 8007e2c:	fe37e43c 	.word	0xfe37e43c
 8007e30:	c2f8f359 	.word	0xc2f8f359
 8007e34:	81a56e1f 	.word	0x81a56e1f
 8007e38:	43500000 	.word	0x43500000
 8007e3c:	ffff3cb0 	.word	0xffff3cb0
 8007e40:	3c900000 	.word	0x3c900000

08007e44 <with_errno>:
 8007e44:	b510      	push	{r4, lr}
 8007e46:	ed2d 8b02 	vpush	{d8}
 8007e4a:	eeb0 8a40 	vmov.f32	s16, s0
 8007e4e:	eef0 8a60 	vmov.f32	s17, s1
 8007e52:	4604      	mov	r4, r0
 8007e54:	f7ff f986 	bl	8007164 <__errno>
 8007e58:	eeb0 0a48 	vmov.f32	s0, s16
 8007e5c:	eef0 0a68 	vmov.f32	s1, s17
 8007e60:	ecbd 8b02 	vpop	{d8}
 8007e64:	6004      	str	r4, [r0, #0]
 8007e66:	bd10      	pop	{r4, pc}

08007e68 <xflow>:
 8007e68:	4603      	mov	r3, r0
 8007e6a:	b507      	push	{r0, r1, r2, lr}
 8007e6c:	ec51 0b10 	vmov	r0, r1, d0
 8007e70:	b183      	cbz	r3, 8007e94 <xflow+0x2c>
 8007e72:	4602      	mov	r2, r0
 8007e74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e78:	e9cd 2300 	strd	r2, r3, [sp]
 8007e7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e80:	f7f8 fb7a 	bl	8000578 <__aeabi_dmul>
 8007e84:	ec41 0b10 	vmov	d0, r0, r1
 8007e88:	2022      	movs	r0, #34	@ 0x22
 8007e8a:	b003      	add	sp, #12
 8007e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e90:	f7ff bfd8 	b.w	8007e44 <with_errno>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	e7ee      	b.n	8007e78 <xflow+0x10>
 8007e9a:	0000      	movs	r0, r0
 8007e9c:	0000      	movs	r0, r0
	...

08007ea0 <__math_uflow>:
 8007ea0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007ea8 <__math_uflow+0x8>
 8007ea4:	f7ff bfe0 	b.w	8007e68 <xflow>
 8007ea8:	00000000 	.word	0x00000000
 8007eac:	10000000 	.word	0x10000000

08007eb0 <__math_oflow>:
 8007eb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007eb8 <__math_oflow+0x8>
 8007eb4:	f7ff bfd8 	b.w	8007e68 <xflow>
 8007eb8:	00000000 	.word	0x00000000
 8007ebc:	70000000 	.word	0x70000000

08007ec0 <__ieee754_sqrt>:
 8007ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec4:	4a68      	ldr	r2, [pc, #416]	@ (8008068 <__ieee754_sqrt+0x1a8>)
 8007ec6:	ec55 4b10 	vmov	r4, r5, d0
 8007eca:	43aa      	bics	r2, r5
 8007ecc:	462b      	mov	r3, r5
 8007ece:	4621      	mov	r1, r4
 8007ed0:	d110      	bne.n	8007ef4 <__ieee754_sqrt+0x34>
 8007ed2:	4622      	mov	r2, r4
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	f7f8 fb4e 	bl	8000578 <__aeabi_dmul>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	f7f8 f992 	bl	800020c <__adddf3>
 8007ee8:	4604      	mov	r4, r0
 8007eea:	460d      	mov	r5, r1
 8007eec:	ec45 4b10 	vmov	d0, r4, r5
 8007ef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef4:	2d00      	cmp	r5, #0
 8007ef6:	dc0e      	bgt.n	8007f16 <__ieee754_sqrt+0x56>
 8007ef8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007efc:	4322      	orrs	r2, r4
 8007efe:	d0f5      	beq.n	8007eec <__ieee754_sqrt+0x2c>
 8007f00:	b19d      	cbz	r5, 8007f2a <__ieee754_sqrt+0x6a>
 8007f02:	4622      	mov	r2, r4
 8007f04:	4620      	mov	r0, r4
 8007f06:	4629      	mov	r1, r5
 8007f08:	f7f8 f97e 	bl	8000208 <__aeabi_dsub>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	f7f8 fc5c 	bl	80007cc <__aeabi_ddiv>
 8007f14:	e7e8      	b.n	8007ee8 <__ieee754_sqrt+0x28>
 8007f16:	152a      	asrs	r2, r5, #20
 8007f18:	d115      	bne.n	8007f46 <__ieee754_sqrt+0x86>
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	e009      	b.n	8007f32 <__ieee754_sqrt+0x72>
 8007f1e:	0acb      	lsrs	r3, r1, #11
 8007f20:	3a15      	subs	r2, #21
 8007f22:	0549      	lsls	r1, r1, #21
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d0fa      	beq.n	8007f1e <__ieee754_sqrt+0x5e>
 8007f28:	e7f7      	b.n	8007f1a <__ieee754_sqrt+0x5a>
 8007f2a:	462a      	mov	r2, r5
 8007f2c:	e7fa      	b.n	8007f24 <__ieee754_sqrt+0x64>
 8007f2e:	005b      	lsls	r3, r3, #1
 8007f30:	3001      	adds	r0, #1
 8007f32:	02dc      	lsls	r4, r3, #11
 8007f34:	d5fb      	bpl.n	8007f2e <__ieee754_sqrt+0x6e>
 8007f36:	1e44      	subs	r4, r0, #1
 8007f38:	1b12      	subs	r2, r2, r4
 8007f3a:	f1c0 0420 	rsb	r4, r0, #32
 8007f3e:	fa21 f404 	lsr.w	r4, r1, r4
 8007f42:	4323      	orrs	r3, r4
 8007f44:	4081      	lsls	r1, r0
 8007f46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f4a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8007f4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f52:	07d2      	lsls	r2, r2, #31
 8007f54:	bf5c      	itt	pl
 8007f56:	005b      	lslpl	r3, r3, #1
 8007f58:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007f5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007f60:	bf58      	it	pl
 8007f62:	0049      	lslpl	r1, r1, #1
 8007f64:	2600      	movs	r6, #0
 8007f66:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007f6a:	106d      	asrs	r5, r5, #1
 8007f6c:	0049      	lsls	r1, r1, #1
 8007f6e:	2016      	movs	r0, #22
 8007f70:	4632      	mov	r2, r6
 8007f72:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007f76:	1917      	adds	r7, r2, r4
 8007f78:	429f      	cmp	r7, r3
 8007f7a:	bfde      	ittt	le
 8007f7c:	193a      	addle	r2, r7, r4
 8007f7e:	1bdb      	suble	r3, r3, r7
 8007f80:	1936      	addle	r6, r6, r4
 8007f82:	0fcf      	lsrs	r7, r1, #31
 8007f84:	3801      	subs	r0, #1
 8007f86:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8007f8a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007f8e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007f92:	d1f0      	bne.n	8007f76 <__ieee754_sqrt+0xb6>
 8007f94:	4604      	mov	r4, r0
 8007f96:	2720      	movs	r7, #32
 8007f98:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	eb00 0e0c 	add.w	lr, r0, ip
 8007fa2:	db02      	blt.n	8007faa <__ieee754_sqrt+0xea>
 8007fa4:	d113      	bne.n	8007fce <__ieee754_sqrt+0x10e>
 8007fa6:	458e      	cmp	lr, r1
 8007fa8:	d811      	bhi.n	8007fce <__ieee754_sqrt+0x10e>
 8007faa:	f1be 0f00 	cmp.w	lr, #0
 8007fae:	eb0e 000c 	add.w	r0, lr, ip
 8007fb2:	da42      	bge.n	800803a <__ieee754_sqrt+0x17a>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	db40      	blt.n	800803a <__ieee754_sqrt+0x17a>
 8007fb8:	f102 0801 	add.w	r8, r2, #1
 8007fbc:	1a9b      	subs	r3, r3, r2
 8007fbe:	458e      	cmp	lr, r1
 8007fc0:	bf88      	it	hi
 8007fc2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007fc6:	eba1 010e 	sub.w	r1, r1, lr
 8007fca:	4464      	add	r4, ip
 8007fcc:	4642      	mov	r2, r8
 8007fce:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007fd2:	3f01      	subs	r7, #1
 8007fd4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007fd8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007fdc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007fe0:	d1dc      	bne.n	8007f9c <__ieee754_sqrt+0xdc>
 8007fe2:	4319      	orrs	r1, r3
 8007fe4:	d01b      	beq.n	800801e <__ieee754_sqrt+0x15e>
 8007fe6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800806c <__ieee754_sqrt+0x1ac>
 8007fea:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008070 <__ieee754_sqrt+0x1b0>
 8007fee:	e9da 0100 	ldrd	r0, r1, [sl]
 8007ff2:	e9db 2300 	ldrd	r2, r3, [fp]
 8007ff6:	f7f8 f907 	bl	8000208 <__aeabi_dsub>
 8007ffa:	e9da 8900 	ldrd	r8, r9, [sl]
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	4640      	mov	r0, r8
 8008004:	4649      	mov	r1, r9
 8008006:	f7f8 fd33 	bl	8000a70 <__aeabi_dcmple>
 800800a:	b140      	cbz	r0, 800801e <__ieee754_sqrt+0x15e>
 800800c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008010:	e9da 0100 	ldrd	r0, r1, [sl]
 8008014:	e9db 2300 	ldrd	r2, r3, [fp]
 8008018:	d111      	bne.n	800803e <__ieee754_sqrt+0x17e>
 800801a:	3601      	adds	r6, #1
 800801c:	463c      	mov	r4, r7
 800801e:	1072      	asrs	r2, r6, #1
 8008020:	0863      	lsrs	r3, r4, #1
 8008022:	07f1      	lsls	r1, r6, #31
 8008024:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008028:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800802c:	bf48      	it	mi
 800802e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008032:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008036:	4618      	mov	r0, r3
 8008038:	e756      	b.n	8007ee8 <__ieee754_sqrt+0x28>
 800803a:	4690      	mov	r8, r2
 800803c:	e7be      	b.n	8007fbc <__ieee754_sqrt+0xfc>
 800803e:	f7f8 f8e5 	bl	800020c <__adddf3>
 8008042:	e9da 8900 	ldrd	r8, r9, [sl]
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4640      	mov	r0, r8
 800804c:	4649      	mov	r1, r9
 800804e:	f7f8 fd05 	bl	8000a5c <__aeabi_dcmplt>
 8008052:	b120      	cbz	r0, 800805e <__ieee754_sqrt+0x19e>
 8008054:	1ca0      	adds	r0, r4, #2
 8008056:	bf08      	it	eq
 8008058:	3601      	addeq	r6, #1
 800805a:	3402      	adds	r4, #2
 800805c:	e7df      	b.n	800801e <__ieee754_sqrt+0x15e>
 800805e:	1c63      	adds	r3, r4, #1
 8008060:	f023 0401 	bic.w	r4, r3, #1
 8008064:	e7db      	b.n	800801e <__ieee754_sqrt+0x15e>
 8008066:	bf00      	nop
 8008068:	7ff00000 	.word	0x7ff00000
 800806c:	200000a8 	.word	0x200000a8
 8008070:	200000a0 	.word	0x200000a0

08008074 <_init>:
 8008074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008076:	bf00      	nop
 8008078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800807a:	bc08      	pop	{r3}
 800807c:	469e      	mov	lr, r3
 800807e:	4770      	bx	lr

08008080 <_fini>:
 8008080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008082:	bf00      	nop
 8008084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008086:	bc08      	pop	{r3}
 8008088:	469e      	mov	lr, r3
 800808a:	4770      	bx	lr
