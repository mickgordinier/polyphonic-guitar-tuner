
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008074  080001c0  080001c0  000011c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002220  08008238  08008238  00009238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a458  0800a458  0000c0b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a458  0800a458  0000b458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a460  0800a460  0000c0b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a460  0800a460  0000b460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a464  0800a464  0000b464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  0800a468  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200000b0  0800a518  0000c0b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  0800a518  0000c320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fe8  00000000  00000000  0000c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000286f  00000000  00000000  0001e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00020938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002a030  00000000  00000000  000216a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001169d  00000000  00000000  0004b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00100c7b  00000000  00000000  0005cd75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000b8  00000000  00000000  0015d9f0  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000a45  00000000  00000000  0015daa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c5c  00000000  00000000  0015e4f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0016214c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001d3  00000000  00000000  001621c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  00162393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800821c 	.word	0x0800821c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000b4 	.word	0x200000b4
 80001fc:	0800821c 	.word	0x0800821c

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	@ 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b96a 	b.w	8000e64 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9d08      	ldr	r5, [sp, #32]
 8000bae:	460c      	mov	r4, r1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d14e      	bne.n	8000c52 <__udivmoddi4+0xaa>
 8000bb4:	4694      	mov	ip, r2
 8000bb6:	458c      	cmp	ip, r1
 8000bb8:	4686      	mov	lr, r0
 8000bba:	fab2 f282 	clz	r2, r2
 8000bbe:	d962      	bls.n	8000c86 <__udivmoddi4+0xde>
 8000bc0:	b14a      	cbz	r2, 8000bd6 <__udivmoddi4+0x2e>
 8000bc2:	f1c2 0320 	rsb	r3, r2, #32
 8000bc6:	4091      	lsls	r1, r2
 8000bc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd0:	4319      	orrs	r1, r3
 8000bd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f f68c 	uxth.w	r6, ip
 8000bde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bee:	fb04 f106 	mul.w	r1, r4, r6
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	d90a      	bls.n	8000c0c <__udivmoddi4+0x64>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bfe:	f080 8112 	bcs.w	8000e26 <__udivmoddi4+0x27e>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 810f 	bls.w	8000e26 <__udivmoddi4+0x27e>
 8000c08:	3c02      	subs	r4, #2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	1a59      	subs	r1, r3, r1
 8000c0e:	fa1f f38e 	uxth.w	r3, lr
 8000c12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c16:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb00 f606 	mul.w	r6, r0, r6
 8000c22:	429e      	cmp	r6, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x94>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c2e:	f080 80fc 	bcs.w	8000e2a <__udivmoddi4+0x282>
 8000c32:	429e      	cmp	r6, r3
 8000c34:	f240 80f9 	bls.w	8000e2a <__udivmoddi4+0x282>
 8000c38:	4463      	add	r3, ip
 8000c3a:	3802      	subs	r0, #2
 8000c3c:	1b9b      	subs	r3, r3, r6
 8000c3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c42:	2100      	movs	r1, #0
 8000c44:	b11d      	cbz	r5, 8000c4e <__udivmoddi4+0xa6>
 8000c46:	40d3      	lsrs	r3, r2
 8000c48:	2200      	movs	r2, #0
 8000c4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d905      	bls.n	8000c62 <__udivmoddi4+0xba>
 8000c56:	b10d      	cbz	r5, 8000c5c <__udivmoddi4+0xb4>
 8000c58:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4608      	mov	r0, r1
 8000c60:	e7f5      	b.n	8000c4e <__udivmoddi4+0xa6>
 8000c62:	fab3 f183 	clz	r1, r3
 8000c66:	2900      	cmp	r1, #0
 8000c68:	d146      	bne.n	8000cf8 <__udivmoddi4+0x150>
 8000c6a:	42a3      	cmp	r3, r4
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0xcc>
 8000c6e:	4290      	cmp	r0, r2
 8000c70:	f0c0 80f0 	bcc.w	8000e54 <__udivmoddi4+0x2ac>
 8000c74:	1a86      	subs	r6, r0, r2
 8000c76:	eb64 0303 	sbc.w	r3, r4, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	2d00      	cmp	r5, #0
 8000c7e:	d0e6      	beq.n	8000c4e <__udivmoddi4+0xa6>
 8000c80:	e9c5 6300 	strd	r6, r3, [r5]
 8000c84:	e7e3      	b.n	8000c4e <__udivmoddi4+0xa6>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	f040 8090 	bne.w	8000dac <__udivmoddi4+0x204>
 8000c8c:	eba1 040c 	sub.w	r4, r1, ip
 8000c90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c94:	fa1f f78c 	uxth.w	r7, ip
 8000c98:	2101      	movs	r1, #1
 8000c9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ca6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000caa:	fb07 f006 	mul.w	r0, r7, r6
 8000cae:	4298      	cmp	r0, r3
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0x11c>
 8000cb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x11a>
 8000cbc:	4298      	cmp	r0, r3
 8000cbe:	f200 80cd 	bhi.w	8000e5c <__udivmoddi4+0x2b4>
 8000cc2:	4626      	mov	r6, r4
 8000cc4:	1a1c      	subs	r4, r3, r0
 8000cc6:	fa1f f38e 	uxth.w	r3, lr
 8000cca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cce:	fb08 4410 	mls	r4, r8, r0, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb00 f707 	mul.w	r7, r0, r7
 8000cda:	429f      	cmp	r7, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x148>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x146>
 8000ce8:	429f      	cmp	r7, r3
 8000cea:	f200 80b0 	bhi.w	8000e4e <__udivmoddi4+0x2a6>
 8000cee:	4620      	mov	r0, r4
 8000cf0:	1bdb      	subs	r3, r3, r7
 8000cf2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf6:	e7a5      	b.n	8000c44 <__udivmoddi4+0x9c>
 8000cf8:	f1c1 0620 	rsb	r6, r1, #32
 8000cfc:	408b      	lsls	r3, r1
 8000cfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000d02:	431f      	orrs	r7, r3
 8000d04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d08:	fa04 f301 	lsl.w	r3, r4, r1
 8000d0c:	ea43 030c 	orr.w	r3, r3, ip
 8000d10:	40f4      	lsrs	r4, r6
 8000d12:	fa00 f801 	lsl.w	r8, r0, r1
 8000d16:	0c38      	lsrs	r0, r7, #16
 8000d18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d20:	fa1f fc87 	uxth.w	ip, r7
 8000d24:	fb00 441e 	mls	r4, r0, lr, r4
 8000d28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d30:	45a1      	cmp	r9, r4
 8000d32:	fa02 f201 	lsl.w	r2, r2, r1
 8000d36:	d90a      	bls.n	8000d4e <__udivmoddi4+0x1a6>
 8000d38:	193c      	adds	r4, r7, r4
 8000d3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d3e:	f080 8084 	bcs.w	8000e4a <__udivmoddi4+0x2a2>
 8000d42:	45a1      	cmp	r9, r4
 8000d44:	f240 8081 	bls.w	8000e4a <__udivmoddi4+0x2a2>
 8000d48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d4c:	443c      	add	r4, r7
 8000d4e:	eba4 0409 	sub.w	r4, r4, r9
 8000d52:	fa1f f983 	uxth.w	r9, r3
 8000d56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d66:	45a4      	cmp	ip, r4
 8000d68:	d907      	bls.n	8000d7a <__udivmoddi4+0x1d2>
 8000d6a:	193c      	adds	r4, r7, r4
 8000d6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d70:	d267      	bcs.n	8000e42 <__udivmoddi4+0x29a>
 8000d72:	45a4      	cmp	ip, r4
 8000d74:	d965      	bls.n	8000e42 <__udivmoddi4+0x29a>
 8000d76:	3b02      	subs	r3, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d82:	eba4 040c 	sub.w	r4, r4, ip
 8000d86:	429c      	cmp	r4, r3
 8000d88:	46ce      	mov	lr, r9
 8000d8a:	469c      	mov	ip, r3
 8000d8c:	d351      	bcc.n	8000e32 <__udivmoddi4+0x28a>
 8000d8e:	d04e      	beq.n	8000e2e <__udivmoddi4+0x286>
 8000d90:	b155      	cbz	r5, 8000da8 <__udivmoddi4+0x200>
 8000d92:	ebb8 030e 	subs.w	r3, r8, lr
 8000d96:	eb64 040c 	sbc.w	r4, r4, ip
 8000d9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d9e:	40cb      	lsrs	r3, r1
 8000da0:	431e      	orrs	r6, r3
 8000da2:	40cc      	lsrs	r4, r1
 8000da4:	e9c5 6400 	strd	r6, r4, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	e750      	b.n	8000c4e <__udivmoddi4+0xa6>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f103 	lsr.w	r1, r0, r3
 8000db4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dbc:	4094      	lsls	r4, r2
 8000dbe:	430c      	orrs	r4, r1
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc8:	fa1f f78c 	uxth.w	r7, ip
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3110 	mls	r1, r8, r0, r3
 8000dd4:	0c23      	lsrs	r3, r4, #16
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f107 	mul.w	r1, r0, r7
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x24c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dea:	d22c      	bcs.n	8000e46 <__udivmoddi4+0x29e>
 8000dec:	4299      	cmp	r1, r3
 8000dee:	d92a      	bls.n	8000e46 <__udivmoddi4+0x29e>
 8000df0:	3802      	subs	r0, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dfc:	fb08 3311 	mls	r3, r8, r1, r3
 8000e00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e04:	fb01 f307 	mul.w	r3, r1, r7
 8000e08:	42a3      	cmp	r3, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x276>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e14:	d213      	bcs.n	8000e3e <__udivmoddi4+0x296>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d911      	bls.n	8000e3e <__udivmoddi4+0x296>
 8000e1a:	3902      	subs	r1, #2
 8000e1c:	4464      	add	r4, ip
 8000e1e:	1ae4      	subs	r4, r4, r3
 8000e20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e24:	e739      	b.n	8000c9a <__udivmoddi4+0xf2>
 8000e26:	4604      	mov	r4, r0
 8000e28:	e6f0      	b.n	8000c0c <__udivmoddi4+0x64>
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e706      	b.n	8000c3c <__udivmoddi4+0x94>
 8000e2e:	45c8      	cmp	r8, r9
 8000e30:	d2ae      	bcs.n	8000d90 <__udivmoddi4+0x1e8>
 8000e32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e3a:	3801      	subs	r0, #1
 8000e3c:	e7a8      	b.n	8000d90 <__udivmoddi4+0x1e8>
 8000e3e:	4631      	mov	r1, r6
 8000e40:	e7ed      	b.n	8000e1e <__udivmoddi4+0x276>
 8000e42:	4603      	mov	r3, r0
 8000e44:	e799      	b.n	8000d7a <__udivmoddi4+0x1d2>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e7d4      	b.n	8000df4 <__udivmoddi4+0x24c>
 8000e4a:	46d6      	mov	lr, sl
 8000e4c:	e77f      	b.n	8000d4e <__udivmoddi4+0x1a6>
 8000e4e:	4463      	add	r3, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	e74d      	b.n	8000cf0 <__udivmoddi4+0x148>
 8000e54:	4606      	mov	r6, r0
 8000e56:	4623      	mov	r3, r4
 8000e58:	4608      	mov	r0, r1
 8000e5a:	e70f      	b.n	8000c7c <__udivmoddi4+0xd4>
 8000e5c:	3e02      	subs	r6, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	e730      	b.n	8000cc4 <__udivmoddi4+0x11c>
 8000e62:	bf00      	nop

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <ILI9341_Select>:


#include "stm32l4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2110      	movs	r1, #16
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e74:	f001 fffc 	bl	8002e70 <HAL_GPIO_WritePin>
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2110      	movs	r1, #16
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e88:	f001 fff2 	bl	8002e70 <HAL_GPIO_WritePin>
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2101      	movs	r1, #1
 8000e98:	4806      	ldr	r0, [pc, #24]	@ (8000eb4 <ILI9341_Reset+0x24>)
 8000e9a:	f001 ffe9 	bl	8002e70 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000e9e:	2005      	movs	r0, #5
 8000ea0:	f001 fb40 	bl	8002524 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <ILI9341_Reset+0x24>)
 8000eaa:	f001 ffe1 	bl	8002e70 <HAL_GPIO_WritePin>
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	48000400 	.word	0x48000400

08000eb8 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <ILI9341_WriteCommand+0x2c>)
 8000ec8:	f001 ffd2 	bl	8002e70 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000ecc:	1df9      	adds	r1, r7, #7
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4804      	ldr	r0, [pc, #16]	@ (8000ee8 <ILI9341_WriteCommand+0x30>)
 8000ed6:	f003 fd4a 	bl	800496e <HAL_SPI_Transmit>

}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	48000400 	.word	0x48000400
 8000ee8:	200000cc 	.word	0x200000cc

08000eec <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2102      	movs	r1, #2
 8000efa:	4811      	ldr	r0, [pc, #68]	@ (8000f40 <ILI9341_WriteData+0x54>)
 8000efc:	f001 ffb8 	bl	8002e70 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000f00:	e015      	b.n	8000f2e <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000f08:	bf28      	it	cs
 8000f0a:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000f0e:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000f10:	89fa      	ldrh	r2, [r7, #14]
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	480a      	ldr	r0, [pc, #40]	@ (8000f44 <ILI9341_WriteData+0x58>)
 8000f1a:	f003 fd28 	bl	800496e <HAL_SPI_Transmit>

        buff += chunk_size;
 8000f1e:	89fb      	ldrh	r3, [r7, #14]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1e6      	bne.n	8000f02 <ILI9341_WriteData+0x16>
    }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	48000400 	.word	0x48000400
 8000f44:	200000cc 	.word	0x200000cc

08000f48 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4604      	mov	r4, r0
 8000f50:	4608      	mov	r0, r1
 8000f52:	4611      	mov	r1, r2
 8000f54:	461a      	mov	r2, r3
 8000f56:	4623      	mov	r3, r4
 8000f58:	80fb      	strh	r3, [r7, #6]
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80bb      	strh	r3, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	807b      	strh	r3, [r7, #2]
 8000f62:	4613      	mov	r3, r2
 8000f64:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8000f66:	202a      	movs	r0, #42	@ 0x2a
 8000f68:	f7ff ffa6 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	733b      	strb	r3, [r7, #12]
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	737b      	strb	r3, [r7, #13]
 8000f7c:	887b      	ldrh	r3, [r7, #2]
 8000f7e:	0a1b      	lsrs	r3, r3, #8
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	73bb      	strb	r3, [r7, #14]
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2104      	movs	r1, #4
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ffaa 	bl	8000eec <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8000f98:	202b      	movs	r0, #43	@ 0x2b
 8000f9a:	f7ff ff8d 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000f9e:	88bb      	ldrh	r3, [r7, #4]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	723b      	strb	r3, [r7, #8]
 8000fa8:	88bb      	ldrh	r3, [r7, #4]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	727b      	strb	r3, [r7, #9]
 8000fae:	883b      	ldrh	r3, [r7, #0]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	72bb      	strb	r3, [r7, #10]
 8000fb8:	883b      	ldrh	r3, [r7, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff91 	bl	8000eec <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8000fca:	202c      	movs	r0, #44	@ 0x2c
 8000fcc:	f7ff ff74 	bl	8000eb8 <ILI9341_WriteCommand>
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd90      	pop	{r4, r7, pc}

08000fd8 <ILI9341_Init>:

void ILI9341_Init() {
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b09b      	sub	sp, #108	@ 0x6c
 8000fdc:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000fde:	f7ff ff43 	bl	8000e68 <ILI9341_Select>
    ILI9341_Reset();
 8000fe2:	f7ff ff55 	bl	8000e90 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f7ff ff66 	bl	8000eb8 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000fec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ff0:	f001 fa98 	bl	8002524 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000ff4:	20cb      	movs	r0, #203	@ 0xcb
 8000ff6:	f7ff ff5f 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8000ffa:	4a87      	ldr	r2, [pc, #540]	@ (8001218 <ILI9341_Init+0x240>)
 8000ffc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001000:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001004:	6018      	str	r0, [r3, #0]
 8001006:	3304      	adds	r3, #4
 8001008:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800100a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800100e:	2105      	movs	r1, #5
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff6b 	bl	8000eec <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8001016:	20cf      	movs	r0, #207	@ 0xcf
 8001018:	f7ff ff4e 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 800101c:	4a7f      	ldr	r2, [pc, #508]	@ (800121c <ILI9341_Init+0x244>)
 800101e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	4611      	mov	r1, r2
 8001026:	8019      	strh	r1, [r3, #0]
 8001028:	3302      	adds	r3, #2
 800102a:	0c12      	lsrs	r2, r2, #16
 800102c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800102e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001032:	2103      	movs	r1, #3
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff59 	bl	8000eec <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 800103a:	20e8      	movs	r0, #232	@ 0xe8
 800103c:	f7ff ff3c 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8001040:	4a77      	ldr	r2, [pc, #476]	@ (8001220 <ILI9341_Init+0x248>)
 8001042:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001046:	6812      	ldr	r2, [r2, #0]
 8001048:	4611      	mov	r1, r2
 800104a:	8019      	strh	r1, [r3, #0]
 800104c:	3302      	adds	r3, #2
 800104e:	0c12      	lsrs	r2, r2, #16
 8001050:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001052:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001056:	2103      	movs	r1, #3
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff47 	bl	8000eec <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 800105e:	20ea      	movs	r0, #234	@ 0xea
 8001060:	f7ff ff2a 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8001064:	2300      	movs	r3, #0
 8001066:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 800106a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800106e:	2102      	movs	r1, #2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff3b 	bl	8000eec <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8001076:	20ed      	movs	r0, #237	@ 0xed
 8001078:	f7ff ff1e 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 800107c:	4b69      	ldr	r3, [pc, #420]	@ (8001224 <ILI9341_Init+0x24c>)
 800107e:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8001080:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001084:	2104      	movs	r1, #4
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff30 	bl	8000eec <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 800108c:	20f7      	movs	r0, #247	@ 0xf7
 800108e:	f7ff ff13 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8001092:	2320      	movs	r3, #32
 8001094:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8001098:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800109c:	2101      	movs	r1, #1
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff24 	bl	8000eec <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 80010a4:	20c0      	movs	r0, #192	@ 0xc0
 80010a6:	f7ff ff07 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 80010aa:	2323      	movs	r3, #35	@ 0x23
 80010ac:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 80010b0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010b4:	2101      	movs	r1, #1
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff18 	bl	8000eec <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80010bc:	20c1      	movs	r0, #193	@ 0xc1
 80010be:	f7ff fefb 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80010c2:	2310      	movs	r3, #16
 80010c4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 80010c8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80010cc:	2101      	movs	r1, #1
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff0c 	bl	8000eec <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80010d4:	20c5      	movs	r0, #197	@ 0xc5
 80010d6:	f7ff feef 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80010da:	f642 033e 	movw	r3, #10302	@ 0x283e
 80010de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 80010e2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010e6:	2102      	movs	r1, #2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff feff 	bl	8000eec <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80010ee:	20c7      	movs	r0, #199	@ 0xc7
 80010f0:	f7ff fee2 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80010f4:	2386      	movs	r3, #134	@ 0x86
 80010f6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 80010fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010fe:	2101      	movs	r1, #1
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fef3 	bl	8000eec <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8001106:	2036      	movs	r0, #54	@ 0x36
 8001108:	f7ff fed6 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 800110c:	2348      	movs	r3, #72	@ 0x48
 800110e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 8001112:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001116:	2101      	movs	r1, #1
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fee7 	bl	8000eec <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 800111e:	203a      	movs	r0, #58	@ 0x3a
 8001120:	f7ff feca 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8001124:	2355      	movs	r3, #85	@ 0x55
 8001126:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 800112a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800112e:	2101      	movs	r1, #1
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fedb 	bl	8000eec <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8001136:	20b1      	movs	r0, #177	@ 0xb1
 8001138:	f7ff febe 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 800113c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001140:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 8001142:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001146:	2102      	movs	r1, #2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fecf 	bl	8000eec <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 800114e:	20b6      	movs	r0, #182	@ 0xb6
 8001150:	f7ff feb2 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8001154:	4a34      	ldr	r2, [pc, #208]	@ (8001228 <ILI9341_Init+0x250>)
 8001156:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	4611      	mov	r1, r2
 800115e:	8019      	strh	r1, [r3, #0]
 8001160:	3302      	adds	r3, #2
 8001162:	0c12      	lsrs	r2, r2, #16
 8001164:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001166:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800116a:	2103      	movs	r1, #3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff febd 	bl	8000eec <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8001172:	20f2      	movs	r0, #242	@ 0xf2
 8001174:	f7ff fea0 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8001178:	2300      	movs	r3, #0
 800117a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 800117e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001182:	2101      	movs	r1, #1
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff feb1 	bl	8000eec <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 800118a:	2026      	movs	r0, #38	@ 0x26
 800118c:	f7ff fe94 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8001190:	2301      	movs	r3, #1
 8001192:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 8001196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119a:	2101      	movs	r1, #1
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fea5 	bl	8000eec <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 80011a2:	20e0      	movs	r0, #224	@ 0xe0
 80011a4:	f7ff fe88 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80011a8:	4b20      	ldr	r3, [pc, #128]	@ (800122c <ILI9341_Init+0x254>)
 80011aa:	f107 0414 	add.w	r4, r7, #20
 80011ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011b0:	c407      	stmia	r4!, {r0, r1, r2}
 80011b2:	8023      	strh	r3, [r4, #0]
 80011b4:	3402      	adds	r4, #2
 80011b6:	0c1b      	lsrs	r3, r3, #16
 80011b8:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	210f      	movs	r1, #15
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fe93 	bl	8000eec <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80011c6:	20e1      	movs	r0, #225	@ 0xe1
 80011c8:	f7ff fe76 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80011cc:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <ILI9341_Init+0x258>)
 80011ce:	1d3c      	adds	r4, r7, #4
 80011d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d2:	c407      	stmia	r4!, {r0, r1, r2}
 80011d4:	8023      	strh	r3, [r4, #0]
 80011d6:	3402      	adds	r4, #2
 80011d8:	0c1b      	lsrs	r3, r3, #16
 80011da:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	210f      	movs	r1, #15
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fe83 	bl	8000eec <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80011e6:	2011      	movs	r0, #17
 80011e8:	f7ff fe66 	bl	8000eb8 <ILI9341_WriteCommand>
    HAL_Delay(120);
 80011ec:	2078      	movs	r0, #120	@ 0x78
 80011ee:	f001 f999 	bl	8002524 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80011f2:	2029      	movs	r0, #41	@ 0x29
 80011f4:	f7ff fe60 	bl	8000eb8 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80011f8:	2036      	movs	r0, #54	@ 0x36
 80011fa:	f7ff fe5d 	bl	8000eb8 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80011fe:	2348      	movs	r3, #72	@ 0x48
 8001200:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001202:	463b      	mov	r3, r7
 8001204:	2101      	movs	r1, #1
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fe70 	bl	8000eec <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 800120c:	f7ff fe36 	bl	8000e7c <ILI9341_Unselect>
}
 8001210:	bf00      	nop
 8001212:	376c      	adds	r7, #108	@ 0x6c
 8001214:	46bd      	mov	sp, r7
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	08008238 	.word	0x08008238
 800121c:	08008240 	.word	0x08008240
 8001220:	08008244 	.word	0x08008244
 8001224:	81120364 	.word	0x81120364
 8001228:	08008248 	.word	0x08008248
 800122c:	0800824c 	.word	0x0800824c
 8001230:	0800825c 	.word	0x0800825c

08001234 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001234:	b082      	sub	sp, #8
 8001236:	b580      	push	{r7, lr}
 8001238:	b088      	sub	sp, #32
 800123a:	af00      	add	r7, sp, #0
 800123c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
 8001242:	460b      	mov	r3, r1
 8001244:	80bb      	strh	r3, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800124a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800124e:	461a      	mov	r2, r3
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	4413      	add	r3, r2
 8001254:	b29b      	uxth	r3, r3
 8001256:	3b01      	subs	r3, #1
 8001258:	b29a      	uxth	r2, r3
 800125a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800125e:	4619      	mov	r1, r3
 8001260:	88bb      	ldrh	r3, [r7, #4]
 8001262:	440b      	add	r3, r1
 8001264:	b29b      	uxth	r3, r3
 8001266:	3b01      	subs	r3, #1
 8001268:	b29b      	uxth	r3, r3
 800126a:	88b9      	ldrh	r1, [r7, #4]
 800126c:	88f8      	ldrh	r0, [r7, #6]
 800126e:	f7ff fe6b 	bl	8000f48 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	e041      	b.n	80012fc <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 8001278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	3b20      	subs	r3, #32
 800127e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001282:	fb01 f303 	mul.w	r3, r1, r3
 8001286:	4619      	mov	r1, r3
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	440b      	add	r3, r1
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	e027      	b.n	80012ea <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00e      	beq.n	80012c8 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80012aa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	743b      	strb	r3, [r7, #16]
 80012b4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	2102      	movs	r1, #2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fe13 	bl	8000eec <ILI9341_WriteData>
 80012c6:	e00d      	b.n	80012e4 <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80012c8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80012ca:	0a1b      	lsrs	r3, r3, #8
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	733b      	strb	r3, [r7, #12]
 80012d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2102      	movs	r1, #2
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fe04 	bl	8000eec <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	3301      	adds	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
 80012ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012ee:	461a      	mov	r2, r3
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d3d1      	bcc.n	800129a <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001300:	461a      	mov	r2, r3
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	4293      	cmp	r3, r2
 8001306:	d3b7      	bcc.n	8001278 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3720      	adds	r7, #32
 800130e:	46bd      	mov	sp, r7
 8001310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001314:	b002      	add	sp, #8
 8001316:	4770      	bx	lr

08001318 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001318:	b082      	sub	sp, #8
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af04      	add	r7, sp, #16
 8001320:	603a      	str	r2, [r7, #0]
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	4603      	mov	r3, r0
 8001326:	80fb      	strh	r3, [r7, #6]
 8001328:	460b      	mov	r3, r1
 800132a:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 800132c:	f7ff fd9c 	bl	8000e68 <ILI9341_Select>

    while(*str) {
 8001330:	e02e      	b.n	8001390 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	7d3a      	ldrb	r2, [r7, #20]
 8001336:	4413      	add	r3, r2
 8001338:	2bef      	cmp	r3, #239	@ 0xef
 800133a:	dd14      	ble.n	8001366 <ILI9341_WriteString+0x4e>
            x = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001340:	7d7b      	ldrb	r3, [r7, #21]
 8001342:	461a      	mov	r2, r3
 8001344:	88bb      	ldrh	r3, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 800134a:	88bb      	ldrh	r3, [r7, #4]
 800134c:	7d7a      	ldrb	r2, [r7, #21]
 800134e:	4413      	add	r3, r2
 8001350:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001354:	da21      	bge.n	800139a <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b20      	cmp	r3, #32
 800135c:	d103      	bne.n	8001366 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	603b      	str	r3, [r7, #0]
                continue;
 8001364:	e014      	b.n	8001390 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	88b9      	ldrh	r1, [r7, #4]
 800136c:	88f8      	ldrh	r0, [r7, #6]
 800136e:	8c3b      	ldrh	r3, [r7, #32]
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	8bbb      	ldrh	r3, [r7, #28]
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f7ff ff5a 	bl	8001234 <ILI9341_WriteChar>
        x += font.width;
 8001380:	7d3b      	ldrb	r3, [r7, #20]
 8001382:	461a      	mov	r2, r3
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	4413      	add	r3, r2
 8001388:	80fb      	strh	r3, [r7, #6]
        str++;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1cc      	bne.n	8001332 <ILI9341_WriteString+0x1a>
 8001398:	e000      	b.n	800139c <ILI9341_WriteString+0x84>
                break;
 800139a:	bf00      	nop
    }

    ILI9341_Unselect();
 800139c:	f7ff fd6e 	bl	8000e7c <ILI9341_Unselect>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013aa:	b002      	add	sp, #8
 80013ac:	4770      	bx	lr
	...

080013b0 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4604      	mov	r4, r0
 80013b8:	4608      	mov	r0, r1
 80013ba:	4611      	mov	r1, r2
 80013bc:	461a      	mov	r2, r3
 80013be:	4623      	mov	r3, r4
 80013c0:	80fb      	strh	r3, [r7, #6]
 80013c2:	4603      	mov	r3, r0
 80013c4:	80bb      	strh	r3, [r7, #4]
 80013c6:	460b      	mov	r3, r1
 80013c8:	807b      	strh	r3, [r7, #2]
 80013ca:	4613      	mov	r3, r2
 80013cc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	2bef      	cmp	r3, #239	@ 0xef
 80013d2:	d853      	bhi.n	800147c <ILI9341_FillRectangle+0xcc>
 80013d4:	88bb      	ldrh	r3, [r7, #4]
 80013d6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80013da:	d24f      	bcs.n	800147c <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80013dc:	88fa      	ldrh	r2, [r7, #6]
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	4413      	add	r3, r2
 80013e2:	2bf0      	cmp	r3, #240	@ 0xf0
 80013e4:	dd03      	ble.n	80013ee <ILI9341_FillRectangle+0x3e>
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80013ec:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 80013ee:	88ba      	ldrh	r2, [r7, #4]
 80013f0:	883b      	ldrh	r3, [r7, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80013f8:	dd03      	ble.n	8001402 <ILI9341_FillRectangle+0x52>
 80013fa:	88bb      	ldrh	r3, [r7, #4]
 80013fc:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001400:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8001402:	f7ff fd31 	bl	8000e68 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001406:	88fa      	ldrh	r2, [r7, #6]
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	4413      	add	r3, r2
 800140c:	b29b      	uxth	r3, r3
 800140e:	3b01      	subs	r3, #1
 8001410:	b29c      	uxth	r4, r3
 8001412:	88ba      	ldrh	r2, [r7, #4]
 8001414:	883b      	ldrh	r3, [r7, #0]
 8001416:	4413      	add	r3, r2
 8001418:	b29b      	uxth	r3, r3
 800141a:	3b01      	subs	r3, #1
 800141c:	b29b      	uxth	r3, r3
 800141e:	88b9      	ldrh	r1, [r7, #4]
 8001420:	88f8      	ldrh	r0, [r7, #6]
 8001422:	4622      	mov	r2, r4
 8001424:	f7ff fd90 	bl	8000f48 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001428:	8c3b      	ldrh	r3, [r7, #32]
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	b29b      	uxth	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	733b      	strb	r3, [r7, #12]
 8001432:	8c3b      	ldrh	r3, [r7, #32]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2102      	movs	r1, #2
 800143c:	4811      	ldr	r0, [pc, #68]	@ (8001484 <ILI9341_FillRectangle+0xd4>)
 800143e:	f001 fd17 	bl	8002e70 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001442:	883b      	ldrh	r3, [r7, #0]
 8001444:	80bb      	strh	r3, [r7, #4]
 8001446:	e013      	b.n	8001470 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 8001448:	887b      	ldrh	r3, [r7, #2]
 800144a:	80fb      	strh	r3, [r7, #6]
 800144c:	e00a      	b.n	8001464 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800144e:	f107 010c 	add.w	r1, r7, #12
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	2202      	movs	r2, #2
 8001458:	480b      	ldr	r0, [pc, #44]	@ (8001488 <ILI9341_FillRectangle+0xd8>)
 800145a:	f003 fa88 	bl	800496e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	3b01      	subs	r3, #1
 8001462:	80fb      	strh	r3, [r7, #6]
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f1      	bne.n	800144e <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 800146a:	88bb      	ldrh	r3, [r7, #4]
 800146c:	3b01      	subs	r3, #1
 800146e:	80bb      	strh	r3, [r7, #4]
 8001470:	88bb      	ldrh	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1e8      	bne.n	8001448 <ILI9341_FillRectangle+0x98>

        }
    }

    ILI9341_Unselect();
 8001476:	f7ff fd01 	bl	8000e7c <ILI9341_Unselect>
 800147a:	e000      	b.n	800147e <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800147c:	bf00      	nop
}
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}
 8001484:	48000400 	.word	0x48000400
 8001488:	200000cc 	.word	0x200000cc

0800148c <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800149e:	22f0      	movs	r2, #240	@ 0xf0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff ff84 	bl	80013b0 <ILI9341_FillRectangle>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014be:	f001 fcd7 	bl	8002e70 <HAL_GPIO_WritePin>
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init() {
 80014c6:	b580      	push	{r7, lr}
 80014c8:	af00      	add	r7, sp, #0
	ILI9341_Unselect();
 80014ca:	f7ff fcd7 	bl	8000e7c <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 80014ce:	f7ff ffef 	bl	80014b0 <ILI9341_TouchUnselect>
	ILI9341_Init();
 80014d2:	f7ff fd81 	bl	8000fd8 <ILI9341_Init>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e2:	f000 ffaa 	bl	800243a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e6:	f000 f843 	bl	8001570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ea:	f000 f911 	bl	8001710 <MX_GPIO_Init>
  MX_SPI1_Init();
 80014ee:	f000 f885 	bl	80015fc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80014f2:	f000 f8c1 	bl	8001678 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  init();
 80014f6:	f7ff ffe6 	bl	80014c6 <init>
  ILI9341_FillScreen(ILI9341_BLACK);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f7ff ffc6 	bl	800148c <ILI9341_FillScreen>
  ILI9341_WriteString(35, 30, "PUSH BUTTON", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001500:	4b16      	ldr	r3, [pc, #88]	@ (800155c <main+0x80>)
 8001502:	2200      	movs	r2, #0
 8001504:	9202      	str	r2, [sp, #8]
 8001506:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800150a:	9201      	str	r2, [sp, #4]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	9200      	str	r2, [sp, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a13      	ldr	r2, [pc, #76]	@ (8001560 <main+0x84>)
 8001514:	211e      	movs	r1, #30
 8001516:	2023      	movs	r0, #35	@ 0x23
 8001518:	f7ff fefe 	bl	8001318 <ILI9341_WriteString>
  ILI9341_WriteString(45, 60, "TO START", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 800151c:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <main+0x80>)
 800151e:	2200      	movs	r2, #0
 8001520:	9202      	str	r2, [sp, #8]
 8001522:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001526:	9201      	str	r2, [sp, #4]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	9200      	str	r2, [sp, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a0d      	ldr	r2, [pc, #52]	@ (8001564 <main+0x88>)
 8001530:	213c      	movs	r1, #60	@ 0x3c
 8001532:	202d      	movs	r0, #45	@ 0x2d
 8001534:	f7ff fef0 	bl	8001318 <ILI9341_WriteString>



	  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8001538:	2210      	movs	r2, #16
 800153a:	490b      	ldr	r1, [pc, #44]	@ (8001568 <main+0x8c>)
 800153c:	480b      	ldr	r0, [pc, #44]	@ (800156c <main+0x90>)
 800153e:	f003 fe47 	bl	80051d0 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_UART_Receive(&huart1, rx_buffer, 16, HAL_MAX_DELAY) == HAL_OK)
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	2210      	movs	r2, #16
 8001548:	4907      	ldr	r1, [pc, #28]	@ (8001568 <main+0x8c>)
 800154a:	4808      	ldr	r0, [pc, #32]	@ (800156c <main+0x90>)
 800154c:	f003 fd77 	bl	800503e <HAL_UART_Receive>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f5      	bne.n	8001542 <main+0x66>
	      {
	          // If data received successfully, process your data here
	          // ProcessReceivedByte(rx_buffer[0]); // This is a placeholder function

	          // If using a larger buffer, process data accordingly
		  	  int hello_wotld = 1;
 8001556:	2301      	movs	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
  {
 800155a:	e7f2      	b.n	8001542 <main+0x66>
 800155c:	20000008 	.word	0x20000008
 8001560:	080082b0 	.word	0x080082b0
 8001564:	080082bc 	.word	0x080082bc
 8001568:	200001d4 	.word	0x200001d4
 800156c:	20000130 	.word	0x20000130

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b096      	sub	sp, #88	@ 0x58
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	2244      	movs	r2, #68	@ 0x44
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f005 feba 	bl	80072f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001584:	463b      	mov	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001592:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001596:	f001 fca3 	bl	8002ee0 <HAL_PWREx_ControlVoltageScaling>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015a0:	f000 fde0 	bl	8002164 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80015a4:	2310      	movs	r3, #16
 80015a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015a8:	2301      	movs	r3, #1
 80015aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 80015b0:	2370      	movs	r3, #112	@ 0x70
 80015b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4618      	mov	r0, r3
 80015be:	f001 fd43 	bl	8003048 <HAL_RCC_OscConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80015c8:	f000 fdcc 	bl	8002164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015cc:	230f      	movs	r3, #15
 80015ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015e0:	463b      	mov	r3, r7
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 f949 	bl	800387c <HAL_RCC_ClockConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80015f0:	f000 fdb8 	bl	8002164 <Error_Handler>
  }
}
 80015f4:	bf00      	nop
 80015f6:	3758      	adds	r7, #88	@ 0x58
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001600:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001602:	4a1c      	ldr	r2, [pc, #112]	@ (8001674 <MX_SPI1_Init+0x78>)
 8001604:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001606:	4b1a      	ldr	r3, [pc, #104]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001608:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800160c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800160e:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001614:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001616:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800161a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800161c:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <MX_SPI1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001622:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <MX_SPI1_Init+0x74>)
 800162a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800162e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001630:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001632:	2228      	movs	r2, #40	@ 0x28
 8001634:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <MX_SPI1_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001648:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <MX_SPI1_Init+0x74>)
 800164a:	2207      	movs	r2, #7
 800164c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800164e:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001656:	2208      	movs	r2, #8
 8001658:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_SPI1_Init+0x74>)
 800165c:	f003 f8e4 	bl	8004828 <HAL_SPI_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001666:	f000 fd7d 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200000cc 	.word	0x200000cc
 8001674:	40013000 	.word	0x40013000

08001678 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800167c:	4b22      	ldr	r3, [pc, #136]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 800167e:	4a23      	ldr	r2, [pc, #140]	@ (800170c <MX_USART1_UART_Init+0x94>)
 8001680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001682:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 8001684:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b1d      	ldr	r3, [pc, #116]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001696:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 800169c:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 800169e:	2204      	movs	r2, #4
 80016a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ae:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b4:	4b14      	ldr	r3, [pc, #80]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ba:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016c0:	4811      	ldr	r0, [pc, #68]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016c2:	f003 fc2d 	bl	8004f20 <HAL_UART_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016cc:	f000 fd4a 	bl	8002164 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d0:	2100      	movs	r1, #0
 80016d2:	480d      	ldr	r0, [pc, #52]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016d4:	f005 fd01 	bl	80070da <HAL_UARTEx_SetTxFifoThreshold>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016de:	f000 fd41 	bl	8002164 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e2:	2100      	movs	r1, #0
 80016e4:	4808      	ldr	r0, [pc, #32]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016e6:	f005 fd36 	bl	8007156 <HAL_UARTEx_SetRxFifoThreshold>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016f0:	f000 fd38 	bl	8002164 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016f4:	4804      	ldr	r0, [pc, #16]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016f6:	f005 fcb7 	bl	8007068 <HAL_UARTEx_DisableFifoMode>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001700:	f000 fd30 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000130 	.word	0x20000130
 800170c:	40013800 	.word	0x40013800

08001710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08e      	sub	sp, #56	@ 0x38
 8001714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001716:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001726:	4bb2      	ldr	r3, [pc, #712]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	4ab1      	ldr	r2, [pc, #708]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 800172c:	f043 0310 	orr.w	r3, r3, #16
 8001730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001732:	4baf      	ldr	r3, [pc, #700]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	623b      	str	r3, [r7, #32]
 800173c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173e:	4bac      	ldr	r3, [pc, #688]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	4aab      	ldr	r2, [pc, #684]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174a:	4ba9      	ldr	r3, [pc, #676]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	61fb      	str	r3, [r7, #28]
 8001754:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001756:	4ba6      	ldr	r3, [pc, #664]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	4aa5      	ldr	r2, [pc, #660]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 800175c:	f043 0320 	orr.w	r3, r3, #32
 8001760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001762:	4ba3      	ldr	r3, [pc, #652]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	61bb      	str	r3, [r7, #24]
 800176c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800176e:	4ba0      	ldr	r3, [pc, #640]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001772:	4a9f      	ldr	r2, [pc, #636]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 8001774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800177a:	4b9d      	ldr	r3, [pc, #628]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b9a      	ldr	r3, [pc, #616]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178a:	4a99      	ldr	r2, [pc, #612]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001792:	4b97      	ldr	r3, [pc, #604]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	4b94      	ldr	r3, [pc, #592]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a2:	4a93      	ldr	r2, [pc, #588]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017aa:	4b91      	ldr	r3, [pc, #580]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b6:	4b8e      	ldr	r3, [pc, #568]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	4a8d      	ldr	r2, [pc, #564]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 80017bc:	f043 0308 	orr.w	r3, r3, #8
 80017c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c2:	4b8b      	ldr	r3, [pc, #556]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017ce:	4b88      	ldr	r3, [pc, #544]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	4a87      	ldr	r2, [pc, #540]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 80017d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017da:	4b85      	ldr	r3, [pc, #532]	@ (80019f0 <MX_GPIO_Init+0x2e0>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80017e6:	f001 fc1f 	bl	8003028 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2110      	movs	r1, #16
 80017ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017f2:	f001 fb3d 	bl	8002e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2103      	movs	r1, #3
 80017fa:	487e      	ldr	r0, [pc, #504]	@ (80019f4 <MX_GPIO_Init+0x2e4>)
 80017fc:	f001 fb38 	bl	8002e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001800:	230c      	movs	r3, #12
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001810:	230d      	movs	r3, #13
 8001812:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001818:	4619      	mov	r1, r3
 800181a:	4877      	ldr	r0, [pc, #476]	@ (80019f8 <MX_GPIO_Init+0x2e8>)
 800181c:	f001 f8a4 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001820:	2307      	movs	r3, #7
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001824:	2312      	movs	r3, #18
 8001826:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001830:	2304      	movs	r3, #4
 8001832:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001838:	4619      	mov	r1, r3
 800183a:	4870      	ldr	r0, [pc, #448]	@ (80019fc <MX_GPIO_Init+0x2ec>)
 800183c:	f001 f894 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001840:	2380      	movs	r3, #128	@ 0x80
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001850:	230d      	movs	r3, #13
 8001852:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001858:	4619      	mov	r1, r3
 800185a:	4868      	ldr	r0, [pc, #416]	@ (80019fc <MX_GPIO_Init+0x2ec>)
 800185c:	f001 f884 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001860:	233f      	movs	r3, #63	@ 0x3f
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001864:	230b      	movs	r3, #11
 8001866:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001870:	4619      	mov	r1, r3
 8001872:	4863      	ldr	r0, [pc, #396]	@ (8001a00 <MX_GPIO_Init+0x2f0>)
 8001874:	f001 f878 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001878:	2301      	movs	r3, #1
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001888:	2301      	movs	r3, #1
 800188a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001890:	4619      	mov	r1, r3
 8001892:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001896:	f001 f867 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800189a:	230a      	movs	r3, #10
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800189e:	230b      	movs	r3, #11
 80018a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018aa:	4619      	mov	r1, r3
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b0:	f001 f85a 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018b4:	2310      	movs	r3, #16
 80018b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c8:	4619      	mov	r1, r3
 80018ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ce:	f001 f84b 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018d2:	2303      	movs	r3, #3
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e6:	4619      	mov	r1, r3
 80018e8:	4842      	ldr	r0, [pc, #264]	@ (80019f4 <MX_GPIO_Init+0x2e4>)
 80018ea:	f001 f83d 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80018ee:	2344      	movs	r3, #68	@ 0x44
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f2:	2303      	movs	r3, #3
 80018f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018fe:	4619      	mov	r1, r3
 8001900:	483c      	ldr	r0, [pc, #240]	@ (80019f4 <MX_GPIO_Init+0x2e4>)
 8001902:	f001 f831 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001906:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001918:	2301      	movs	r3, #1
 800191a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800191c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001920:	4619      	mov	r1, r3
 8001922:	4835      	ldr	r0, [pc, #212]	@ (80019f8 <MX_GPIO_Init+0x2e8>)
 8001924:	f001 f820 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001928:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800193a:	2303      	movs	r3, #3
 800193c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800193e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001942:	4619      	mov	r1, r3
 8001944:	482c      	ldr	r0, [pc, #176]	@ (80019f8 <MX_GPIO_Init+0x2e8>)
 8001946:	f001 f80f 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800194a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800194e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800195c:	2301      	movs	r3, #1
 800195e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001964:	4619      	mov	r1, r3
 8001966:	4823      	ldr	r0, [pc, #140]	@ (80019f4 <MX_GPIO_Init+0x2e4>)
 8001968:	f000 fffe 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800196c:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800197e:	230d      	movs	r3, #13
 8001980:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001986:	4619      	mov	r1, r3
 8001988:	481a      	ldr	r0, [pc, #104]	@ (80019f4 <MX_GPIO_Init+0x2e4>)
 800198a:	f000 ffed 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800198e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80019a0:	230e      	movs	r3, #14
 80019a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a8:	4619      	mov	r1, r3
 80019aa:	4812      	ldr	r0, [pc, #72]	@ (80019f4 <MX_GPIO_Init+0x2e4>)
 80019ac:	f000 ffdc 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019c2:	2307      	movs	r3, #7
 80019c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ca:	4619      	mov	r1, r3
 80019cc:	480d      	ldr	r0, [pc, #52]	@ (8001a04 <MX_GPIO_Init+0x2f4>)
 80019ce:	f000 ffcb 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019d2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019e4:	2302      	movs	r3, #2
 80019e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ec:	4619      	mov	r1, r3
 80019ee:	e00b      	b.n	8001a08 <MX_GPIO_Init+0x2f8>
 80019f0:	40021000 	.word	0x40021000
 80019f4:	48000400 	.word	0x48000400
 80019f8:	48001000 	.word	0x48001000
 80019fc:	48001400 	.word	0x48001400
 8001a00:	48000800 	.word	0x48000800
 8001a04:	48000c00 	.word	0x48000c00
 8001a08:	4864      	ldr	r0, [pc, #400]	@ (8001b9c <MX_GPIO_Init+0x48c>)
 8001a0a:	f000 ffad 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001a0e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a20:	2308      	movs	r3, #8
 8001a22:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a28:	4619      	mov	r1, r3
 8001a2a:	485d      	ldr	r0, [pc, #372]	@ (8001ba0 <MX_GPIO_Init+0x490>)
 8001a2c:	f000 ff9c 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a30:	2340      	movs	r3, #64	@ 0x40
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001a40:	230d      	movs	r3, #13
 8001a42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4856      	ldr	r0, [pc, #344]	@ (8001ba4 <MX_GPIO_Init+0x494>)
 8001a4c:	f000 ff8c 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a50:	2380      	movs	r3, #128	@ 0x80
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a60:	2302      	movs	r3, #2
 8001a62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a68:	4619      	mov	r1, r3
 8001a6a:	484e      	ldr	r0, [pc, #312]	@ (8001ba4 <MX_GPIO_Init+0x494>)
 8001a6c:	f000 ff7c 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a70:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a82:	230c      	movs	r3, #12
 8001a84:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4845      	ldr	r0, [pc, #276]	@ (8001ba4 <MX_GPIO_Init+0x494>)
 8001a8e:	f000 ff6b 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001a92:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001aa4:	230a      	movs	r3, #10
 8001aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aac:	4619      	mov	r1, r3
 8001aae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ab2:	f000 ff59 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ab6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ace:	f000 ff4b 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ae2:	2309      	movs	r3, #9
 8001ae4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aea:	4619      	mov	r1, r3
 8001aec:	482b      	ldr	r0, [pc, #172]	@ (8001b9c <MX_GPIO_Init+0x48c>)
 8001aee:	f000 ff3b 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001af2:	2304      	movs	r3, #4
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b02:	230c      	movs	r3, #12
 8001b04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4823      	ldr	r0, [pc, #140]	@ (8001b9c <MX_GPIO_Init+0x48c>)
 8001b0e:	f000 ff2b 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001b12:	2378      	movs	r3, #120	@ 0x78
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b22:	2307      	movs	r3, #7
 8001b24:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	481b      	ldr	r0, [pc, #108]	@ (8001b9c <MX_GPIO_Init+0x48c>)
 8001b2e:	f000 ff1b 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001b32:	2338      	movs	r3, #56	@ 0x38
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b42:	2306      	movs	r3, #6
 8001b44:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4816      	ldr	r0, [pc, #88]	@ (8001ba8 <MX_GPIO_Init+0x498>)
 8001b4e:	f000 ff0b 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b58:	2312      	movs	r3, #18
 8001b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b64:	2304      	movs	r3, #4
 8001b66:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480e      	ldr	r0, [pc, #56]	@ (8001ba8 <MX_GPIO_Init+0x498>)
 8001b70:	f000 fefa 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b74:	2301      	movs	r3, #1
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b84:	2302      	movs	r3, #2
 8001b86:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4807      	ldr	r0, [pc, #28]	@ (8001bac <MX_GPIO_Init+0x49c>)
 8001b90:	f000 feea 	bl	8002968 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b94:	bf00      	nop
 8001b96:	3738      	adds	r7, #56	@ 0x38
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	48000c00 	.word	0x48000c00
 8001ba0:	48001800 	.word	0x48001800
 8001ba4:	48000800 	.word	0x48000800
 8001ba8:	48000400 	.word	0x48000400
 8001bac:	48001000 	.word	0x48001000

08001bb0 <reverse>:

/* USER CODE BEGIN 4 */

void reverse(char* str, int len)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001bc4:	e018      	b.n	8001bf8 <reverse+0x48>
        temp = str[i];
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	441a      	add	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	440b      	add	r3, r1
 8001bdc:	7812      	ldrb	r2, [r2, #0]
 8001bde:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	701a      	strb	r2, [r3, #0]
        i++;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
        j--;
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbe2      	blt.n	8001bc6 <reverse+0x16>
    }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	371c      	adds	r7, #28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <intToStr>:

int intToStr(int x, char str[], int d)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
    while (x) {
 8001c20:	e01d      	b.n	8001c5e <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <intToStr+0x8c>)
 8001c26:	fb83 1302 	smull	r1, r3, r3, r2
 8001c2a:	1099      	asrs	r1, r3, #2
 8001c2c:	17d3      	asrs	r3, r2, #31
 8001c2e:	1ac9      	subs	r1, r1, r3
 8001c30:	460b      	mov	r3, r1
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	1ad1      	subs	r1, r2, r3
 8001c3a:	b2ca      	uxtb	r2, r1
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	1c59      	adds	r1, r3, #1
 8001c40:	6179      	str	r1, [r7, #20]
 8001c42:	4619      	mov	r1, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	440b      	add	r3, r1
 8001c48:	3230      	adds	r2, #48	@ 0x30
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4a12      	ldr	r2, [pc, #72]	@ (8001c9c <intToStr+0x8c>)
 8001c52:	fb82 1203 	smull	r1, r2, r2, r3
 8001c56:	1092      	asrs	r2, r2, #2
 8001c58:	17db      	asrs	r3, r3, #31
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	60fb      	str	r3, [r7, #12]
    while (x) {
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1de      	bne.n	8001c22 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8001c64:	e007      	b.n	8001c76 <intToStr+0x66>
        str[i++] = '0';
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	617a      	str	r2, [r7, #20]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	4413      	add	r3, r2
 8001c72:	2230      	movs	r2, #48	@ 0x30
 8001c74:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	dbf3      	blt.n	8001c66 <intToStr+0x56>

    reverse(str, i);
 8001c7e:	6979      	ldr	r1, [r7, #20]
 8001c80:	68b8      	ldr	r0, [r7, #8]
 8001c82:	f7ff ff95 	bl	8001bb0 <reverse>
    str[i] = '\0';
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
    return i;
 8001c90:	697b      	ldr	r3, [r7, #20]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	66666667 	.word	0x66666667

08001ca0 <ftoa>:

void ftoa(float n, char* res, int afterpoint)
{
 8001ca0:	b5b0      	push	{r4, r5, r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001caa:	60b8      	str	r0, [r7, #8]
 8001cac:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8001cae:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cb6:	ee17 3a90 	vmov	r3, s15
 8001cba:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cce:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	69f8      	ldr	r0, [r7, #28]
 8001cd8:	f7ff ff9a 	bl	8001c10 <intToStr>
 8001cdc:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d030      	beq.n	8001d46 <ftoa+0xa6>
        res[i] = '.'; // add dot
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	4413      	add	r3, r2
 8001cea:	222e      	movs	r2, #46	@ 0x2e
 8001cec:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8001cee:	69b8      	ldr	r0, [r7, #24]
 8001cf0:	f7fe fbea 	bl	80004c8 <__aeabi_f2d>
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	460d      	mov	r5, r1
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7fe fbd3 	bl	80004a4 <__aeabi_i2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	ec43 2b11 	vmov	d1, r2, r3
 8001d06:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8001d50 <ftoa+0xb0>
 8001d0a:	f005 fb27 	bl	800735c <pow>
 8001d0e:	ec53 2b10 	vmov	r2, r3, d0
 8001d12:	4620      	mov	r0, r4
 8001d14:	4629      	mov	r1, r5
 8001d16:	f7fe fc2f 	bl	8000578 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	f7fe fed9 	bl	8000ad8 <__aeabi_d2f>
 8001d26:	4603      	mov	r3, r0
 8001d28:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8001d2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	4413      	add	r3, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	ee17 0a90 	vmov	r0, s15
 8001d42:	f7ff ff65 	bl	8001c10 <intToStr>
    }
}
 8001d46:	bf00      	nop
 8001d48:	3720      	adds	r7, #32
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	00000000 	.word	0x00000000
 8001d54:	40240000 	.word	0x40240000

08001d58 <HAL_UART_RxCpltCallback>:
	  float f;
	  uint8_t buf[4];
 };

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b098      	sub	sp, #96	@ 0x60
 8001d5c:	af04      	add	r7, sp, #16
 8001d5e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) // Make sure the callback is for the correct UART
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4aa7      	ldr	r2, [pc, #668]	@ (8002004 <HAL_UART_RxCpltCallback+0x2ac>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	f040 81e8 	bne.w	800213c <HAL_UART_RxCpltCallback+0x3e4>
    {
    	uint8_t first_key_idx = 7;
 8001d6c:	2307      	movs	r3, #7
 8001d6e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    	for (uint8_t i = 0; i < 7; ++i) {
 8001d72:	2300      	movs	r3, #0
 8001d74:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8001d78:	e017      	b.n	8001daa <HAL_UART_RxCpltCallback+0x52>
    		if (rx_buffer[i] == 0xFF && rx_buffer[i+1] == 0xFF) {
 8001d7a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001d7e:	4aa2      	ldr	r2, [pc, #648]	@ (8002008 <HAL_UART_RxCpltCallback+0x2b0>)
 8001d80:	5cd3      	ldrb	r3, [r2, r3]
 8001d82:	2bff      	cmp	r3, #255	@ 0xff
 8001d84:	d10c      	bne.n	8001da0 <HAL_UART_RxCpltCallback+0x48>
 8001d86:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	4a9e      	ldr	r2, [pc, #632]	@ (8002008 <HAL_UART_RxCpltCallback+0x2b0>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	2bff      	cmp	r3, #255	@ 0xff
 8001d92:	d105      	bne.n	8001da0 <HAL_UART_RxCpltCallback+0x48>
    			first_key_idx = i+2;
 8001d94:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001d98:	3302      	adds	r3, #2
 8001d9a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    			break;
 8001d9e:	e008      	b.n	8001db2 <HAL_UART_RxCpltCallback+0x5a>
    	for (uint8_t i = 0; i < 7; ++i) {
 8001da0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001da4:	3301      	adds	r3, #1
 8001da6:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8001daa:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d9e3      	bls.n	8001d7a <HAL_UART_RxCpltCallback+0x22>
    		}
    	}

    	if (first_key_idx == 7) {
 8001db2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001db6:	2b07      	cmp	r3, #7
 8001db8:	d10b      	bne.n	8001dd2 <HAL_UART_RxCpltCallback+0x7a>
    		// Process data: Use the variables as needed
			HAL_UART_DeInit(huart);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f003 f900 	bl	8004fc0 <HAL_UART_DeInit>

			// Re-Initialize the UART peripheral
			HAL_UART_Init(huart);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f003 f8ad 	bl	8004f20 <HAL_UART_Init>

    		HAL_UART_Receive_IT(huart, rx_buffer, sizeof(rx_buffer));
 8001dc6:	2210      	movs	r2, #16
 8001dc8:	498f      	ldr	r1, [pc, #572]	@ (8002008 <HAL_UART_RxCpltCallback+0x2b0>)
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f003 fa00 	bl	80051d0 <HAL_UART_Receive_IT>
    		return;
 8001dd0:	e1b4      	b.n	800213c <HAL_UART_RxCpltCallback+0x3e4>
    	}


        uint8_t start = rx_buffer[first_key_idx];
 8001dd2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001dd6:	4a8c      	ldr	r2, [pc, #560]	@ (8002008 <HAL_UART_RxCpltCallback+0x2b0>)
 8001dd8:	5cd3      	ldrb	r3, [r2, r3]
 8001dda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if((start != previous) && (start == 1)) {
 8001dde:	4b8b      	ldr	r3, [pc, #556]	@ (800200c <HAL_UART_RxCpltCallback+0x2b4>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d047      	beq.n	8001e7a <HAL_UART_RxCpltCallback+0x122>
 8001dea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d143      	bne.n	8001e7a <HAL_UART_RxCpltCallback+0x122>
          	ILI9341_WriteString(35, 30, "PUSH BUTTON", Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
 8001df2:	4b87      	ldr	r3, [pc, #540]	@ (8002010 <HAL_UART_RxCpltCallback+0x2b8>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	9202      	str	r2, [sp, #8]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	9201      	str	r2, [sp, #4]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	9200      	str	r2, [sp, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a84      	ldr	r2, [pc, #528]	@ (8002014 <HAL_UART_RxCpltCallback+0x2bc>)
 8001e04:	211e      	movs	r1, #30
 8001e06:	2023      	movs	r0, #35	@ 0x23
 8001e08:	f7ff fa86 	bl	8001318 <ILI9341_WriteString>
		        ILI9341_WriteString(45, 60, "TO START", Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
 8001e0c:	4b80      	ldr	r3, [pc, #512]	@ (8002010 <HAL_UART_RxCpltCallback+0x2b8>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	9202      	str	r2, [sp, #8]
 8001e12:	2200      	movs	r2, #0
 8001e14:	9201      	str	r2, [sp, #4]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	9200      	str	r2, [sp, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a7e      	ldr	r2, [pc, #504]	@ (8002018 <HAL_UART_RxCpltCallback+0x2c0>)
 8001e1e:	213c      	movs	r1, #60	@ 0x3c
 8001e20:	202d      	movs	r0, #45	@ 0x2d
 8001e22:	f7ff fa79 	bl	8001318 <ILI9341_WriteString>
		        ILI9341_WriteString(10, 0, "String Detected:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001e26:	4b7d      	ldr	r3, [pc, #500]	@ (800201c <HAL_UART_RxCpltCallback+0x2c4>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	9202      	str	r2, [sp, #8]
 8001e2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e30:	9201      	str	r2, [sp, #4]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	9200      	str	r2, [sp, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a79      	ldr	r2, [pc, #484]	@ (8002020 <HAL_UART_RxCpltCallback+0x2c8>)
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	200a      	movs	r0, #10
 8001e3e:	f7ff fa6b 	bl	8001318 <ILI9341_WriteString>
		        //ILI9341_WriteString(100, 30, detected_string, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
		        ILI9341_WriteString(10, 60, "Actual Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001e42:	4b76      	ldr	r3, [pc, #472]	@ (800201c <HAL_UART_RxCpltCallback+0x2c4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	9202      	str	r2, [sp, #8]
 8001e48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e4c:	9201      	str	r2, [sp, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	9200      	str	r2, [sp, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a73      	ldr	r2, [pc, #460]	@ (8002024 <HAL_UART_RxCpltCallback+0x2cc>)
 8001e56:	213c      	movs	r1, #60	@ 0x3c
 8001e58:	200a      	movs	r0, #10
 8001e5a:	f7ff fa5d 	bl	8001318 <ILI9341_WriteString>
		        //ILI9341_WriteString(100, 90, charFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
		        ILI9341_WriteString(10, 120, "Desired Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001e5e:	4b6f      	ldr	r3, [pc, #444]	@ (800201c <HAL_UART_RxCpltCallback+0x2c4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	9202      	str	r2, [sp, #8]
 8001e64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e68:	9201      	str	r2, [sp, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	9200      	str	r2, [sp, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a6d      	ldr	r2, [pc, #436]	@ (8002028 <HAL_UART_RxCpltCallback+0x2d0>)
 8001e72:	2178      	movs	r1, #120	@ 0x78
 8001e74:	200a      	movs	r0, #10
 8001e76:	f7ff fa4f 	bl	8001318 <ILI9341_WriteString>
		        //ILI9341_WriteString(100, 150, desiredFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
        }

        if((start != previous) && (start == 0)) {
 8001e7a:	4b64      	ldr	r3, [pc, #400]	@ (800200c <HAL_UART_RxCpltCallback+0x2b4>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d06d      	beq.n	8001f62 <HAL_UART_RxCpltCallback+0x20a>
 8001e86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d169      	bne.n	8001f62 <HAL_UART_RxCpltCallback+0x20a>
        		ILI9341_WriteString(10, 0, "String Detected:", Font_11x18, ILI9341_BLACK, ILI9341_BLACK);
 8001e8e:	4b63      	ldr	r3, [pc, #396]	@ (800201c <HAL_UART_RxCpltCallback+0x2c4>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	9202      	str	r2, [sp, #8]
 8001e94:	2200      	movs	r2, #0
 8001e96:	9201      	str	r2, [sp, #4]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	9200      	str	r2, [sp, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a60      	ldr	r2, [pc, #384]	@ (8002020 <HAL_UART_RxCpltCallback+0x2c8>)
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	200a      	movs	r0, #10
 8001ea4:	f7ff fa38 	bl	8001318 <ILI9341_WriteString>
		        ILI9341_WriteString(100, 30, "        ", Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
 8001ea8:	4b59      	ldr	r3, [pc, #356]	@ (8002010 <HAL_UART_RxCpltCallback+0x2b8>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	9202      	str	r2, [sp, #8]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	9201      	str	r2, [sp, #4]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	9200      	str	r2, [sp, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a5c      	ldr	r2, [pc, #368]	@ (800202c <HAL_UART_RxCpltCallback+0x2d4>)
 8001eba:	211e      	movs	r1, #30
 8001ebc:	2064      	movs	r0, #100	@ 0x64
 8001ebe:	f7ff fa2b 	bl	8001318 <ILI9341_WriteString>
		        ILI9341_WriteString(10, 60, "Actual Frequency:", Font_11x18, ILI9341_BLACK, ILI9341_BLACK);
 8001ec2:	4b56      	ldr	r3, [pc, #344]	@ (800201c <HAL_UART_RxCpltCallback+0x2c4>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	9202      	str	r2, [sp, #8]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	9201      	str	r2, [sp, #4]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	9200      	str	r2, [sp, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a54      	ldr	r2, [pc, #336]	@ (8002024 <HAL_UART_RxCpltCallback+0x2cc>)
 8001ed4:	213c      	movs	r1, #60	@ 0x3c
 8001ed6:	200a      	movs	r0, #10
 8001ed8:	f7ff fa1e 	bl	8001318 <ILI9341_WriteString>
		        ILI9341_WriteString(100, 90, "        ", Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
 8001edc:	4b4c      	ldr	r3, [pc, #304]	@ (8002010 <HAL_UART_RxCpltCallback+0x2b8>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	9202      	str	r2, [sp, #8]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	9201      	str	r2, [sp, #4]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	9200      	str	r2, [sp, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a4f      	ldr	r2, [pc, #316]	@ (800202c <HAL_UART_RxCpltCallback+0x2d4>)
 8001eee:	215a      	movs	r1, #90	@ 0x5a
 8001ef0:	2064      	movs	r0, #100	@ 0x64
 8001ef2:	f7ff fa11 	bl	8001318 <ILI9341_WriteString>
		        ILI9341_WriteString(10, 120, "Desired Frequency:", Font_11x18, ILI9341_BLACK, ILI9341_BLACK);
 8001ef6:	4b49      	ldr	r3, [pc, #292]	@ (800201c <HAL_UART_RxCpltCallback+0x2c4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	9202      	str	r2, [sp, #8]
 8001efc:	2200      	movs	r2, #0
 8001efe:	9201      	str	r2, [sp, #4]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	9200      	str	r2, [sp, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a48      	ldr	r2, [pc, #288]	@ (8002028 <HAL_UART_RxCpltCallback+0x2d0>)
 8001f08:	2178      	movs	r1, #120	@ 0x78
 8001f0a:	200a      	movs	r0, #10
 8001f0c:	f7ff fa04 	bl	8001318 <ILI9341_WriteString>
		        ILI9341_WriteString(100, 150, "        ", Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
 8001f10:	4b3f      	ldr	r3, [pc, #252]	@ (8002010 <HAL_UART_RxCpltCallback+0x2b8>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	9202      	str	r2, [sp, #8]
 8001f16:	2200      	movs	r2, #0
 8001f18:	9201      	str	r2, [sp, #4]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	9200      	str	r2, [sp, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a42      	ldr	r2, [pc, #264]	@ (800202c <HAL_UART_RxCpltCallback+0x2d4>)
 8001f22:	2196      	movs	r1, #150	@ 0x96
 8001f24:	2064      	movs	r0, #100	@ 0x64
 8001f26:	f7ff f9f7 	bl	8001318 <ILI9341_WriteString>
		        ILI9341_WriteString(35, 30, "PUSH BUTTON", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001f2a:	4b39      	ldr	r3, [pc, #228]	@ (8002010 <HAL_UART_RxCpltCallback+0x2b8>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	9202      	str	r2, [sp, #8]
 8001f30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f34:	9201      	str	r2, [sp, #4]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	9200      	str	r2, [sp, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a35      	ldr	r2, [pc, #212]	@ (8002014 <HAL_UART_RxCpltCallback+0x2bc>)
 8001f3e:	211e      	movs	r1, #30
 8001f40:	2023      	movs	r0, #35	@ 0x23
 8001f42:	f7ff f9e9 	bl	8001318 <ILI9341_WriteString>
		        ILI9341_WriteString(45, 60, "TO START", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001f46:	4b32      	ldr	r3, [pc, #200]	@ (8002010 <HAL_UART_RxCpltCallback+0x2b8>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	9202      	str	r2, [sp, #8]
 8001f4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f50:	9201      	str	r2, [sp, #4]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	9200      	str	r2, [sp, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a2f      	ldr	r2, [pc, #188]	@ (8002018 <HAL_UART_RxCpltCallback+0x2c0>)
 8001f5a:	213c      	movs	r1, #60	@ 0x3c
 8001f5c:	202d      	movs	r0, #45	@ 0x2d
 8001f5e:	f7ff f9db 	bl	8001318 <ILI9341_WriteString>
        }

        if(start) {
 8001f62:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80d9 	beq.w	800211e <HAL_UART_RxCpltCallback+0x3c6>
          union Float_as_buffer detected_freq_FAB;

          detected_freq_FAB.f = 0;
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	633b      	str	r3, [r7, #48]	@ 0x30

          for (int rx_buf_idx = 0; rx_buf_idx < 4; ++rx_buf_idx) {
 8001f72:	2300      	movs	r3, #0
 8001f74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f76:	e00d      	b.n	8001f94 <HAL_UART_RxCpltCallback+0x23c>
            detected_freq_FAB.buf[rx_buf_idx] = rx_buffer[first_key_idx+1];
 8001f78:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	4a22      	ldr	r2, [pc, #136]	@ (8002008 <HAL_UART_RxCpltCallback+0x2b0>)
 8001f80:	5cd1      	ldrb	r1, [r2, r3]
 8001f82:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f88:	4413      	add	r3, r2
 8001f8a:	460a      	mov	r2, r1
 8001f8c:	701a      	strb	r2, [r3, #0]
          for (int rx_buf_idx = 0; rx_buf_idx < 4; ++rx_buf_idx) {
 8001f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f90:	3301      	adds	r3, #1
 8001f92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	ddee      	ble.n	8001f78 <HAL_UART_RxCpltCallback+0x220>

          // CALCULATE //

          char char_detected_freq[7];
          char desiredFreq[7];
          ftoa(detected_freq_FAB.f, char_detected_freq, 2);
 8001f9a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001f9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001faa:	f7ff fe79 	bl	8001ca0 <ftoa>

          //Match frequency to string

          //find smallest magnitude of distance
          float32_t min_freqs[6];
            for(int i = 0; i < 6; ++i){
 8001fae:	2300      	movs	r3, #0
 8001fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fb2:	e014      	b.n	8001fde <HAL_UART_RxCpltCallback+0x286>
            min_freqs[i] = string_freqs[i] - measured_freq;
 8001fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8002030 <HAL_UART_RxCpltCallback+0x2d8>)
 8001fb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	ed93 7a00 	vldr	s14, [r3]
 8001fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8002034 <HAL_UART_RxCpltCallback+0x2dc>)
 8001fc2:	edd3 7a00 	vldr	s15, [r3]
 8001fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	3350      	adds	r3, #80	@ 0x50
 8001fd0:	443b      	add	r3, r7
 8001fd2:	3b48      	subs	r3, #72	@ 0x48
 8001fd4:	edc3 7a00 	vstr	s15, [r3]
            for(int i = 0; i < 6; ++i){
 8001fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fda:	3301      	adds	r3, #1
 8001fdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	dde7      	ble.n	8001fb4 <HAL_UART_RxCpltCallback+0x25c>
          }

          arm_abs_f32(min_freqs, min_freqs, 6);
 8001fe4:	f107 0108 	add.w	r1, r7, #8
 8001fe8:	f107 0308 	add.w	r3, r7, #8
 8001fec:	2206      	movs	r2, #6
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f005 f93e 	bl	8007270 <arm_abs_f32>

          //find the argmin
          float32_t current_min = min_freqs[0];
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	643b      	str	r3, [r7, #64]	@ 0x40
          uint8_t index = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
          for(int i = 0; i < 6; ++i){
 8001ffe:	2300      	movs	r3, #0
 8002000:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002002:	e034      	b.n	800206e <HAL_UART_RxCpltCallback+0x316>
 8002004:	40013800 	.word	0x40013800
 8002008:	200001d4 	.word	0x200001d4
 800200c:	200001d0 	.word	0x200001d0
 8002010:	20000008 	.word	0x20000008
 8002014:	080082b0 	.word	0x080082b0
 8002018:	080082bc 	.word	0x080082bc
 800201c:	20000000 	.word	0x20000000
 8002020:	080082c8 	.word	0x080082c8
 8002024:	080082dc 	.word	0x080082dc
 8002028:	080082f0 	.word	0x080082f0
 800202c:	08008304 	.word	0x08008304
 8002030:	20000010 	.word	0x20000010
 8002034:	200001c4 	.word	0x200001c4
            if (min_freqs[i] < current_min){
 8002038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	3350      	adds	r3, #80	@ 0x50
 800203e:	443b      	add	r3, r7
 8002040:	3b48      	subs	r3, #72	@ 0x48
 8002042:	edd3 7a00 	vldr	s15, [r3]
 8002046:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800204a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002052:	dd09      	ble.n	8002068 <HAL_UART_RxCpltCallback+0x310>
              current_min = min_freqs[i];
 8002054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	3350      	adds	r3, #80	@ 0x50
 800205a:	443b      	add	r3, r7
 800205c:	3b48      	subs	r3, #72	@ 0x48
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	643b      	str	r3, [r7, #64]	@ 0x40
              index = i;
 8002062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002064:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
          for(int i = 0; i < 6; ++i){
 8002068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800206a:	3301      	adds	r3, #1
 800206c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800206e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002070:	2b05      	cmp	r3, #5
 8002072:	dde1      	ble.n	8002038 <HAL_UART_RxCpltCallback+0x2e0>
            }
          }

          //assign detected string
          detected_string = strings[index];
 8002074:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002078:	4a32      	ldr	r2, [pc, #200]	@ (8002144 <HAL_UART_RxCpltCallback+0x3ec>)
 800207a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207e:	4a32      	ldr	r2, [pc, #200]	@ (8002148 <HAL_UART_RxCpltCallback+0x3f0>)
 8002080:	6013      	str	r3, [r2, #0]
          string_offset = measured_freq - string_freqs[index];
 8002082:	4b32      	ldr	r3, [pc, #200]	@ (800214c <HAL_UART_RxCpltCallback+0x3f4>)
 8002084:	ed93 7a00 	vldr	s14, [r3]
 8002088:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800208c:	4a30      	ldr	r2, [pc, #192]	@ (8002150 <HAL_UART_RxCpltCallback+0x3f8>)
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	edd3 7a00 	vldr	s15, [r3]
 8002096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209a:	4b2e      	ldr	r3, [pc, #184]	@ (8002154 <HAL_UART_RxCpltCallback+0x3fc>)
 800209c:	edc3 7a00 	vstr	s15, [r3]
          ftoa(string_freqs[index], desiredFreq, 2);
 80020a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80020a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002150 <HAL_UART_RxCpltCallback+0x3f8>)
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	edd3 7a00 	vldr	s15, [r3]
 80020ae:	f107 0320 	add.w	r3, r7, #32
 80020b2:	2102      	movs	r1, #2
 80020b4:	4618      	mov	r0, r3
 80020b6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ba:	f7ff fdf1 	bl	8001ca0 <ftoa>

          // CALCULATE //

          ILI9341_WriteString(100, 30, detected_string, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80020be:	4b22      	ldr	r3, [pc, #136]	@ (8002148 <HAL_UART_RxCpltCallback+0x3f0>)
 80020c0:	6819      	ldr	r1, [r3, #0]
 80020c2:	4b25      	ldr	r3, [pc, #148]	@ (8002158 <HAL_UART_RxCpltCallback+0x400>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	9202      	str	r2, [sp, #8]
 80020c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020cc:	9201      	str	r2, [sp, #4]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	9200      	str	r2, [sp, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	460a      	mov	r2, r1
 80020d6:	211e      	movs	r1, #30
 80020d8:	2064      	movs	r0, #100	@ 0x64
 80020da:	f7ff f91d 	bl	8001318 <ILI9341_WriteString>
          ILI9341_WriteString(100, 90, char_detected_freq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80020de:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <HAL_UART_RxCpltCallback+0x400>)
 80020e0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80020e4:	2200      	movs	r2, #0
 80020e6:	9202      	str	r2, [sp, #8]
 80020e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020ec:	9201      	str	r2, [sp, #4]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	9200      	str	r2, [sp, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	460a      	mov	r2, r1
 80020f6:	215a      	movs	r1, #90	@ 0x5a
 80020f8:	2064      	movs	r0, #100	@ 0x64
 80020fa:	f7ff f90d 	bl	8001318 <ILI9341_WriteString>
          ILI9341_WriteString(100, 150, desiredFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80020fe:	4b16      	ldr	r3, [pc, #88]	@ (8002158 <HAL_UART_RxCpltCallback+0x400>)
 8002100:	f107 0120 	add.w	r1, r7, #32
 8002104:	2200      	movs	r2, #0
 8002106:	9202      	str	r2, [sp, #8]
 8002108:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800210c:	9201      	str	r2, [sp, #4]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	9200      	str	r2, [sp, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	460a      	mov	r2, r1
 8002116:	2196      	movs	r1, #150	@ 0x96
 8002118:	2064      	movs	r0, #100	@ 0x64
 800211a:	f7ff f8fd 	bl	8001318 <ILI9341_WriteString>
        }
        
        previous = start;
 800211e:	4a0f      	ldr	r2, [pc, #60]	@ (800215c <HAL_UART_RxCpltCallback+0x404>)
 8002120:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002124:	7013      	strb	r3, [r2, #0]


		HAL_UART_DeInit(huart);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f002 ff4a 	bl	8004fc0 <HAL_UART_DeInit>

		// Re-Initialize the UART peripheral
		HAL_UART_Init(huart);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f002 fef7 	bl	8004f20 <HAL_UART_Init>

        // Ready to receive the next piece of data
		HAL_UART_Receive_IT(huart, rx_buffer, sizeof(rx_buffer)); // Use correct size as per your protocol
 8002132:	2210      	movs	r2, #16
 8002134:	490a      	ldr	r1, [pc, #40]	@ (8002160 <HAL_UART_RxCpltCallback+0x408>)
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f003 f84a 	bl	80051d0 <HAL_UART_Receive_IT>
    }
}
 800213c:	3750      	adds	r7, #80	@ 0x50
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000028 	.word	0x20000028
 8002148:	200001c8 	.word	0x200001c8
 800214c:	200001c4 	.word	0x200001c4
 8002150:	20000010 	.word	0x20000010
 8002154:	200001cc 	.word	0x200001cc
 8002158:	20000008 	.word	0x20000008
 800215c:	200001d0 	.word	0x200001d0
 8002160:	200001d4 	.word	0x200001d4

08002164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002168:	b672      	cpsid	i
}
 800216a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <Error_Handler+0x8>

08002170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002176:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <HAL_MspInit+0x44>)
 8002178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217a:	4a0e      	ldr	r2, [pc, #56]	@ (80021b4 <HAL_MspInit+0x44>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6613      	str	r3, [r2, #96]	@ 0x60
 8002182:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <HAL_MspInit+0x44>)
 8002184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <HAL_MspInit+0x44>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002192:	4a08      	ldr	r2, [pc, #32]	@ (80021b4 <HAL_MspInit+0x44>)
 8002194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002198:	6593      	str	r3, [r2, #88]	@ 0x58
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <HAL_MspInit+0x44>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000

080021b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	@ 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a17      	ldr	r2, [pc, #92]	@ (8002234 <HAL_SPI_MspInit+0x7c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d128      	bne.n	800222c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021da:	4b17      	ldr	r3, [pc, #92]	@ (8002238 <HAL_SPI_MspInit+0x80>)
 80021dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021de:	4a16      	ldr	r2, [pc, #88]	@ (8002238 <HAL_SPI_MspInit+0x80>)
 80021e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80021e6:	4b14      	ldr	r3, [pc, #80]	@ (8002238 <HAL_SPI_MspInit+0x80>)
 80021e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f2:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <HAL_SPI_MspInit+0x80>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f6:	4a10      	ldr	r2, [pc, #64]	@ (8002238 <HAL_SPI_MspInit+0x80>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <HAL_SPI_MspInit+0x80>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800220a:	23e0      	movs	r3, #224	@ 0xe0
 800220c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002216:	2303      	movs	r3, #3
 8002218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800221a:	2305      	movs	r3, #5
 800221c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4619      	mov	r1, r3
 8002224:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002228:	f000 fb9e 	bl	8002968 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800222c:	bf00      	nop
 800222e:	3728      	adds	r7, #40	@ 0x28
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40013000 	.word	0x40013000
 8002238:	40021000 	.word	0x40021000

0800223c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b0ae      	sub	sp, #184	@ 0xb8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002254:	f107 0310 	add.w	r3, r7, #16
 8002258:	2294      	movs	r2, #148	@ 0x94
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f005 f84b 	bl	80072f8 <memset>
  if(huart->Instance==USART1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a26      	ldr	r2, [pc, #152]	@ (8002300 <HAL_UART_MspInit+0xc4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d145      	bne.n	80022f8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800226c:	2301      	movs	r3, #1
 800226e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002270:	2300      	movs	r3, #0
 8002272:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	4618      	mov	r0, r3
 800227a:	f001 fdbd 	bl	8003df8 <HAL_RCCEx_PeriphCLKConfig>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002284:	f7ff ff6e 	bl	8002164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002288:	4b1e      	ldr	r3, [pc, #120]	@ (8002304 <HAL_UART_MspInit+0xc8>)
 800228a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800228c:	4a1d      	ldr	r2, [pc, #116]	@ (8002304 <HAL_UART_MspInit+0xc8>)
 800228e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002292:	6613      	str	r3, [r2, #96]	@ 0x60
 8002294:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <HAL_UART_MspInit+0xc8>)
 8002296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002298:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022a0:	4b18      	ldr	r3, [pc, #96]	@ (8002304 <HAL_UART_MspInit+0xc8>)
 80022a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a4:	4a17      	ldr	r2, [pc, #92]	@ (8002304 <HAL_UART_MspInit+0xc8>)
 80022a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ac:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <HAL_UART_MspInit+0xc8>)
 80022ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80022b8:	f000 feb6 	bl	8003028 <HAL_PWREx_EnableVddIO2>
    /**USART1 GPIO Configuration
    PG9     ------> USART1_TX
    PG10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022bc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d0:	2303      	movs	r3, #3
 80022d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022d6:	2307      	movs	r3, #7
 80022d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80022e0:	4619      	mov	r1, r3
 80022e2:	4809      	ldr	r0, [pc, #36]	@ (8002308 <HAL_UART_MspInit+0xcc>)
 80022e4:	f000 fb40 	bl	8002968 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2100      	movs	r1, #0
 80022ec:	2025      	movs	r0, #37	@ 0x25
 80022ee:	f000 fa3c 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022f2:	2025      	movs	r0, #37	@ 0x25
 80022f4:	f000 fa55 	bl	80027a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022f8:	bf00      	nop
 80022fa:	37b8      	adds	r7, #184	@ 0xb8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40013800 	.word	0x40013800
 8002304:	40021000 	.word	0x40021000
 8002308:	48001800 	.word	0x48001800

0800230c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0a      	ldr	r2, [pc, #40]	@ (8002344 <HAL_UART_MspDeInit+0x38>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d10d      	bne.n	800233a <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800231e:	4b0a      	ldr	r3, [pc, #40]	@ (8002348 <HAL_UART_MspDeInit+0x3c>)
 8002320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002322:	4a09      	ldr	r2, [pc, #36]	@ (8002348 <HAL_UART_MspDeInit+0x3c>)
 8002324:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002328:	6613      	str	r3, [r2, #96]	@ 0x60

    /**USART1 GPIO Configuration
    PG9     ------> USART1_TX
    PG10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_10);
 800232a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800232e:	4807      	ldr	r0, [pc, #28]	@ (800234c <HAL_UART_MspDeInit+0x40>)
 8002330:	f000 fcac 	bl	8002c8c <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002334:	2025      	movs	r0, #37	@ 0x25
 8002336:	f000 fa42 	bl	80027be <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40013800 	.word	0x40013800
 8002348:	40021000 	.word	0x40021000
 800234c:	48001800 	.word	0x48001800

08002350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <NMI_Handler+0x4>

08002358 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <HardFault_Handler+0x4>

08002360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <MemManage_Handler+0x4>

08002368 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <BusFault_Handler+0x4>

08002370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <UsageFault_Handler+0x4>

08002378 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a6:	f000 f89d 	bl	80024e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023b4:	4802      	ldr	r0, [pc, #8]	@ (80023c0 <USART1_IRQHandler+0x10>)
 80023b6:	f002 ff57 	bl	8005268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000130 	.word	0x20000130

080023c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023c8:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <SystemInit+0x20>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ce:	4a05      	ldr	r2, [pc, #20]	@ (80023e4 <SystemInit+0x20>)
 80023d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002420 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023ec:	f7ff ffea 	bl	80023c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023f0:	480c      	ldr	r0, [pc, #48]	@ (8002424 <LoopForever+0x6>)
  ldr r1, =_edata
 80023f2:	490d      	ldr	r1, [pc, #52]	@ (8002428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023f4:	4a0d      	ldr	r2, [pc, #52]	@ (800242c <LoopForever+0xe>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f8:	e002      	b.n	8002400 <LoopCopyDataInit>

080023fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023fe:	3304      	adds	r3, #4

08002400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002404:	d3f9      	bcc.n	80023fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002406:	4a0a      	ldr	r2, [pc, #40]	@ (8002430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002408:	4c0a      	ldr	r4, [pc, #40]	@ (8002434 <LoopForever+0x16>)
  movs r3, #0
 800240a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800240c:	e001      	b.n	8002412 <LoopFillZerobss>

0800240e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800240e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002410:	3204      	adds	r2, #4

08002412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002414:	d3fb      	bcc.n	800240e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002416:	f004 ff7d 	bl	8007314 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800241a:	f7ff f85f 	bl	80014dc <main>

0800241e <LoopForever>:

LoopForever:
    b LoopForever
 800241e:	e7fe      	b.n	800241e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002420:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002428:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 800242c:	0800a468 	.word	0x0800a468
  ldr r2, =_sbss
 8002430:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002434:	20000320 	.word	0x20000320

08002438 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002438:	e7fe      	b.n	8002438 <ADC1_IRQHandler>

0800243a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002444:	2003      	movs	r0, #3
 8002446:	f000 f985 	bl	8002754 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800244a:	2000      	movs	r0, #0
 800244c:	f000 f80e 	bl	800246c <HAL_InitTick>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	71fb      	strb	r3, [r7, #7]
 800245a:	e001      	b.n	8002460 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800245c:	f7ff fe88 	bl	8002170 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002460:	79fb      	ldrb	r3, [r7, #7]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002478:	4b17      	ldr	r3, [pc, #92]	@ (80024d8 <HAL_InitTick+0x6c>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d023      	beq.n	80024c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002480:	4b16      	ldr	r3, [pc, #88]	@ (80024dc <HAL_InitTick+0x70>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b14      	ldr	r3, [pc, #80]	@ (80024d8 <HAL_InitTick+0x6c>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800248e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002492:	fbb2 f3f3 	udiv	r3, r2, r3
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f99f 	bl	80027da <HAL_SYSTICK_Config>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10f      	bne.n	80024c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b0f      	cmp	r3, #15
 80024a6:	d809      	bhi.n	80024bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a8:	2200      	movs	r2, #0
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f000 f95b 	bl	800276a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024b4:	4a0a      	ldr	r2, [pc, #40]	@ (80024e0 <HAL_InitTick+0x74>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e007      	b.n	80024cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
 80024c0:	e004      	b.n	80024cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	73fb      	strb	r3, [r7, #15]
 80024c6:	e001      	b.n	80024cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000048 	.word	0x20000048
 80024dc:	20000040 	.word	0x20000040
 80024e0:	20000044 	.word	0x20000044

080024e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024e8:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <HAL_IncTick+0x20>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_IncTick+0x24>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4413      	add	r3, r2
 80024f4:	4a04      	ldr	r2, [pc, #16]	@ (8002508 <HAL_IncTick+0x24>)
 80024f6:	6013      	str	r3, [r2, #0]
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000048 	.word	0x20000048
 8002508:	200001e4 	.word	0x200001e4

0800250c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return uwTick;
 8002510:	4b03      	ldr	r3, [pc, #12]	@ (8002520 <HAL_GetTick+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	200001e4 	.word	0x200001e4

08002524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800252c:	f7ff ffee 	bl	800250c <HAL_GetTick>
 8002530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d005      	beq.n	800254a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800253e:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <HAL_Delay+0x44>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4413      	add	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800254a:	bf00      	nop
 800254c:	f7ff ffde 	bl	800250c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	429a      	cmp	r2, r3
 800255a:	d8f7      	bhi.n	800254c <HAL_Delay+0x28>
  {
  }
}
 800255c:	bf00      	nop
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000048 	.word	0x20000048

0800256c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800257c:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <__NVIC_SetPriorityGrouping+0x44>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002588:	4013      	ands	r3, r2
 800258a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002594:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800259c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800259e:	4a04      	ldr	r2, [pc, #16]	@ (80025b0 <__NVIC_SetPriorityGrouping+0x44>)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	60d3      	str	r3, [r2, #12]
}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b8:	4b04      	ldr	r3, [pc, #16]	@ (80025cc <__NVIC_GetPriorityGrouping+0x18>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	f003 0307 	and.w	r3, r3, #7
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	db0b      	blt.n	80025fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	f003 021f 	and.w	r2, r3, #31
 80025e8:	4907      	ldr	r1, [pc, #28]	@ (8002608 <__NVIC_EnableIRQ+0x38>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2001      	movs	r0, #1
 80025f2:	fa00 f202 	lsl.w	r2, r0, r2
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000e100 	.word	0xe000e100

0800260c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	2b00      	cmp	r3, #0
 800261c:	db12      	blt.n	8002644 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	f003 021f 	and.w	r2, r3, #31
 8002624:	490a      	ldr	r1, [pc, #40]	@ (8002650 <__NVIC_DisableIRQ+0x44>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	2001      	movs	r0, #1
 800262e:	fa00 f202 	lsl.w	r2, r0, r2
 8002632:	3320      	adds	r3, #32
 8002634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002638:	f3bf 8f4f 	dsb	sy
}
 800263c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800263e:	f3bf 8f6f 	isb	sy
}
 8002642:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000e100 	.word	0xe000e100

08002654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	2b00      	cmp	r3, #0
 8002666:	db0a      	blt.n	800267e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	490c      	ldr	r1, [pc, #48]	@ (80026a0 <__NVIC_SetPriority+0x4c>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	0112      	lsls	r2, r2, #4
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	440b      	add	r3, r1
 8002678:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800267c:	e00a      	b.n	8002694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4908      	ldr	r1, [pc, #32]	@ (80026a4 <__NVIC_SetPriority+0x50>)
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	3b04      	subs	r3, #4
 800268c:	0112      	lsls	r2, r2, #4
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	440b      	add	r3, r1
 8002692:	761a      	strb	r2, [r3, #24]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000e100 	.word	0xe000e100
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	@ 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f1c3 0307 	rsb	r3, r3, #7
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	bf28      	it	cs
 80026c6:	2304      	movcs	r3, #4
 80026c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3304      	adds	r3, #4
 80026ce:	2b06      	cmp	r3, #6
 80026d0:	d902      	bls.n	80026d8 <NVIC_EncodePriority+0x30>
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3b03      	subs	r3, #3
 80026d6:	e000      	b.n	80026da <NVIC_EncodePriority+0x32>
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	f04f 32ff 	mov.w	r2, #4294967295
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43da      	mvns	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	401a      	ands	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f0:	f04f 31ff 	mov.w	r1, #4294967295
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	43d9      	mvns	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	4313      	orrs	r3, r2
         );
}
 8002702:	4618      	mov	r0, r3
 8002704:	3724      	adds	r7, #36	@ 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002720:	d301      	bcc.n	8002726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002722:	2301      	movs	r3, #1
 8002724:	e00f      	b.n	8002746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002726:	4a0a      	ldr	r2, [pc, #40]	@ (8002750 <SysTick_Config+0x40>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800272e:	210f      	movs	r1, #15
 8002730:	f04f 30ff 	mov.w	r0, #4294967295
 8002734:	f7ff ff8e 	bl	8002654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002738:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <SysTick_Config+0x40>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800273e:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <SysTick_Config+0x40>)
 8002740:	2207      	movs	r2, #7
 8002742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	e000e010 	.word	0xe000e010

08002754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ff05 	bl	800256c <__NVIC_SetPriorityGrouping>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b086      	sub	sp, #24
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800277c:	f7ff ff1a 	bl	80025b4 <__NVIC_GetPriorityGrouping>
 8002780:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	6978      	ldr	r0, [r7, #20]
 8002788:	f7ff ff8e 	bl	80026a8 <NVIC_EncodePriority>
 800278c:	4602      	mov	r2, r0
 800278e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff5d 	bl	8002654 <__NVIC_SetPriority>
}
 800279a:	bf00      	nop
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff0d 	bl	80025d0 <__NVIC_EnableIRQ>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff1d 	bl	800260c <__NVIC_DisableIRQ>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ff94 	bl	8002710 <SysTick_Config>
 80027e8:	4603      	mov	r3, r0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d008      	beq.n	800281c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2204      	movs	r2, #4
 800280e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e040      	b.n	800289e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 020e 	bic.w	r2, r2, #14
 800282a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002836:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800283a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002850:	f003 021c 	and.w	r2, r3, #28
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	2101      	movs	r1, #1
 800285a:	fa01 f202 	lsl.w	r2, r1, r2
 800285e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002868:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00c      	beq.n	800288c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002880:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800288a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800289c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d005      	beq.n	80028ce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2204      	movs	r2, #4
 80028c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
 80028cc:	e047      	b.n	800295e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 020e 	bic.w	r2, r2, #14
 80028dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	f003 021c 	and.w	r2, r3, #28
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	2101      	movs	r1, #1
 800290c:	fa01 f202 	lsl.w	r2, r1, r2
 8002910:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800291a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00c      	beq.n	800293e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002932:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800293c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4798      	blx	r3
    }
  }
  return status;
 800295e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002976:	e166      	b.n	8002c46 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2101      	movs	r1, #1
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	fa01 f303 	lsl.w	r3, r1, r3
 8002984:	4013      	ands	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8158 	beq.w	8002c40 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d005      	beq.n	80029a8 <HAL_GPIO_Init+0x40>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d130      	bne.n	8002a0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	2203      	movs	r2, #3
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029de:	2201      	movs	r2, #1
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4013      	ands	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f003 0201 	and.w	r2, r3, #1
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d017      	beq.n	8002a46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	2203      	movs	r2, #3
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d123      	bne.n	8002a9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	08da      	lsrs	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3208      	adds	r2, #8
 8002a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	220f      	movs	r2, #15
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	08da      	lsrs	r2, r3, #3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3208      	adds	r2, #8
 8002a94:	6939      	ldr	r1, [r7, #16]
 8002a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0203 	and.w	r2, r3, #3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80b2 	beq.w	8002c40 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002adc:	4b61      	ldr	r3, [pc, #388]	@ (8002c64 <HAL_GPIO_Init+0x2fc>)
 8002ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae0:	4a60      	ldr	r2, [pc, #384]	@ (8002c64 <HAL_GPIO_Init+0x2fc>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ae8:	4b5e      	ldr	r3, [pc, #376]	@ (8002c64 <HAL_GPIO_Init+0x2fc>)
 8002aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002af4:	4a5c      	ldr	r2, [pc, #368]	@ (8002c68 <HAL_GPIO_Init+0x300>)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	089b      	lsrs	r3, r3, #2
 8002afa:	3302      	adds	r3, #2
 8002afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	220f      	movs	r2, #15
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b1e:	d02b      	beq.n	8002b78 <HAL_GPIO_Init+0x210>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a52      	ldr	r2, [pc, #328]	@ (8002c6c <HAL_GPIO_Init+0x304>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d025      	beq.n	8002b74 <HAL_GPIO_Init+0x20c>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a51      	ldr	r2, [pc, #324]	@ (8002c70 <HAL_GPIO_Init+0x308>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d01f      	beq.n	8002b70 <HAL_GPIO_Init+0x208>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a50      	ldr	r2, [pc, #320]	@ (8002c74 <HAL_GPIO_Init+0x30c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d019      	beq.n	8002b6c <HAL_GPIO_Init+0x204>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a4f      	ldr	r2, [pc, #316]	@ (8002c78 <HAL_GPIO_Init+0x310>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d013      	beq.n	8002b68 <HAL_GPIO_Init+0x200>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a4e      	ldr	r2, [pc, #312]	@ (8002c7c <HAL_GPIO_Init+0x314>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d00d      	beq.n	8002b64 <HAL_GPIO_Init+0x1fc>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a4d      	ldr	r2, [pc, #308]	@ (8002c80 <HAL_GPIO_Init+0x318>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d007      	beq.n	8002b60 <HAL_GPIO_Init+0x1f8>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a4c      	ldr	r2, [pc, #304]	@ (8002c84 <HAL_GPIO_Init+0x31c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d101      	bne.n	8002b5c <HAL_GPIO_Init+0x1f4>
 8002b58:	2307      	movs	r3, #7
 8002b5a:	e00e      	b.n	8002b7a <HAL_GPIO_Init+0x212>
 8002b5c:	2308      	movs	r3, #8
 8002b5e:	e00c      	b.n	8002b7a <HAL_GPIO_Init+0x212>
 8002b60:	2306      	movs	r3, #6
 8002b62:	e00a      	b.n	8002b7a <HAL_GPIO_Init+0x212>
 8002b64:	2305      	movs	r3, #5
 8002b66:	e008      	b.n	8002b7a <HAL_GPIO_Init+0x212>
 8002b68:	2304      	movs	r3, #4
 8002b6a:	e006      	b.n	8002b7a <HAL_GPIO_Init+0x212>
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e004      	b.n	8002b7a <HAL_GPIO_Init+0x212>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e002      	b.n	8002b7a <HAL_GPIO_Init+0x212>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <HAL_GPIO_Init+0x212>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	f002 0203 	and.w	r2, r2, #3
 8002b80:	0092      	lsls	r2, r2, #2
 8002b82:	4093      	lsls	r3, r2
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b8a:	4937      	ldr	r1, [pc, #220]	@ (8002c68 <HAL_GPIO_Init+0x300>)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	3302      	adds	r3, #2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b98:	4b3b      	ldr	r3, [pc, #236]	@ (8002c88 <HAL_GPIO_Init+0x320>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bbc:	4a32      	ldr	r2, [pc, #200]	@ (8002c88 <HAL_GPIO_Init+0x320>)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bc2:	4b31      	ldr	r3, [pc, #196]	@ (8002c88 <HAL_GPIO_Init+0x320>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002be6:	4a28      	ldr	r2, [pc, #160]	@ (8002c88 <HAL_GPIO_Init+0x320>)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bec:	4b26      	ldr	r3, [pc, #152]	@ (8002c88 <HAL_GPIO_Init+0x320>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c10:	4a1d      	ldr	r2, [pc, #116]	@ (8002c88 <HAL_GPIO_Init+0x320>)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c16:	4b1c      	ldr	r3, [pc, #112]	@ (8002c88 <HAL_GPIO_Init+0x320>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c3a:	4a13      	ldr	r2, [pc, #76]	@ (8002c88 <HAL_GPIO_Init+0x320>)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	3301      	adds	r3, #1
 8002c44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f47f ae91 	bne.w	8002978 <HAL_GPIO_Init+0x10>
  }
}
 8002c56:	bf00      	nop
 8002c58:	bf00      	nop
 8002c5a:	371c      	adds	r7, #28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40010000 	.word	0x40010000
 8002c6c:	48000400 	.word	0x48000400
 8002c70:	48000800 	.word	0x48000800
 8002c74:	48000c00 	.word	0x48000c00
 8002c78:	48001000 	.word	0x48001000
 8002c7c:	48001400 	.word	0x48001400
 8002c80:	48001800 	.word	0x48001800
 8002c84:	48001c00 	.word	0x48001c00
 8002c88:	40010400 	.word	0x40010400

08002c8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002c9a:	e0c9      	b.n	8002e30 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80bc 	beq.w	8002e2a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002cb2:	4a66      	ldr	r2, [pc, #408]	@ (8002e4c <HAL_GPIO_DeInit+0x1c0>)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	089b      	lsrs	r3, r3, #2
 8002cb8:	3302      	adds	r3, #2
 8002cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cbe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	220f      	movs	r2, #15
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cda:	d02b      	beq.n	8002d34 <HAL_GPIO_DeInit+0xa8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a5c      	ldr	r2, [pc, #368]	@ (8002e50 <HAL_GPIO_DeInit+0x1c4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d025      	beq.n	8002d30 <HAL_GPIO_DeInit+0xa4>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a5b      	ldr	r2, [pc, #364]	@ (8002e54 <HAL_GPIO_DeInit+0x1c8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d01f      	beq.n	8002d2c <HAL_GPIO_DeInit+0xa0>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a5a      	ldr	r2, [pc, #360]	@ (8002e58 <HAL_GPIO_DeInit+0x1cc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d019      	beq.n	8002d28 <HAL_GPIO_DeInit+0x9c>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a59      	ldr	r2, [pc, #356]	@ (8002e5c <HAL_GPIO_DeInit+0x1d0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d013      	beq.n	8002d24 <HAL_GPIO_DeInit+0x98>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a58      	ldr	r2, [pc, #352]	@ (8002e60 <HAL_GPIO_DeInit+0x1d4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00d      	beq.n	8002d20 <HAL_GPIO_DeInit+0x94>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a57      	ldr	r2, [pc, #348]	@ (8002e64 <HAL_GPIO_DeInit+0x1d8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d007      	beq.n	8002d1c <HAL_GPIO_DeInit+0x90>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a56      	ldr	r2, [pc, #344]	@ (8002e68 <HAL_GPIO_DeInit+0x1dc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d101      	bne.n	8002d18 <HAL_GPIO_DeInit+0x8c>
 8002d14:	2307      	movs	r3, #7
 8002d16:	e00e      	b.n	8002d36 <HAL_GPIO_DeInit+0xaa>
 8002d18:	2308      	movs	r3, #8
 8002d1a:	e00c      	b.n	8002d36 <HAL_GPIO_DeInit+0xaa>
 8002d1c:	2306      	movs	r3, #6
 8002d1e:	e00a      	b.n	8002d36 <HAL_GPIO_DeInit+0xaa>
 8002d20:	2305      	movs	r3, #5
 8002d22:	e008      	b.n	8002d36 <HAL_GPIO_DeInit+0xaa>
 8002d24:	2304      	movs	r3, #4
 8002d26:	e006      	b.n	8002d36 <HAL_GPIO_DeInit+0xaa>
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e004      	b.n	8002d36 <HAL_GPIO_DeInit+0xaa>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e002      	b.n	8002d36 <HAL_GPIO_DeInit+0xaa>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <HAL_GPIO_DeInit+0xaa>
 8002d34:	2300      	movs	r3, #0
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	f002 0203 	and.w	r2, r2, #3
 8002d3c:	0092      	lsls	r2, r2, #2
 8002d3e:	4093      	lsls	r3, r2
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d132      	bne.n	8002dac <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002d46:	4b49      	ldr	r3, [pc, #292]	@ (8002e6c <HAL_GPIO_DeInit+0x1e0>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	4947      	ldr	r1, [pc, #284]	@ (8002e6c <HAL_GPIO_DeInit+0x1e0>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002d54:	4b45      	ldr	r3, [pc, #276]	@ (8002e6c <HAL_GPIO_DeInit+0x1e0>)
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	4943      	ldr	r1, [pc, #268]	@ (8002e6c <HAL_GPIO_DeInit+0x1e0>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002d62:	4b42      	ldr	r3, [pc, #264]	@ (8002e6c <HAL_GPIO_DeInit+0x1e0>)
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	4940      	ldr	r1, [pc, #256]	@ (8002e6c <HAL_GPIO_DeInit+0x1e0>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002d70:	4b3e      	ldr	r3, [pc, #248]	@ (8002e6c <HAL_GPIO_DeInit+0x1e0>)
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	493c      	ldr	r1, [pc, #240]	@ (8002e6c <HAL_GPIO_DeInit+0x1e0>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	220f      	movs	r2, #15
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002d8e:	4a2f      	ldr	r2, [pc, #188]	@ (8002e4c <HAL_GPIO_DeInit+0x1c0>)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	089b      	lsrs	r3, r3, #2
 8002d94:	3302      	adds	r3, #2
 8002d96:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	43da      	mvns	r2, r3
 8002d9e:	482b      	ldr	r0, [pc, #172]	@ (8002e4c <HAL_GPIO_DeInit+0x1c0>)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	089b      	lsrs	r3, r3, #2
 8002da4:	400a      	ands	r2, r1
 8002da6:	3302      	adds	r3, #2
 8002da8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	2103      	movs	r1, #3
 8002db6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	08da      	lsrs	r2, r3, #3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3208      	adds	r2, #8
 8002dc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	220f      	movs	r2, #15
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	08d2      	lsrs	r2, r2, #3
 8002de0:	4019      	ands	r1, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3208      	adds	r2, #8
 8002de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	2103      	movs	r1, #3
 8002df4:	fa01 f303 	lsl.w	r3, r1, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	2101      	movs	r1, #1
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	401a      	ands	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2103      	movs	r1, #3
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	401a      	ands	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f47f af2f 	bne.w	8002c9c <HAL_GPIO_DeInit+0x10>
  }
}
 8002e3e:	bf00      	nop
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	48000400 	.word	0x48000400
 8002e54:	48000800 	.word	0x48000800
 8002e58:	48000c00 	.word	0x48000c00
 8002e5c:	48001000 	.word	0x48001000
 8002e60:	48001400 	.word	0x48001400
 8002e64:	48001800 	.word	0x48001800
 8002e68:	48001c00 	.word	0x48001c00
 8002e6c:	40010400 	.word	0x40010400

08002e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	807b      	strh	r3, [r7, #2]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e80:	787b      	ldrb	r3, [r7, #1]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e86:	887a      	ldrh	r2, [r7, #2]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e8c:	e002      	b.n	8002e94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8002edc <HAL_PWREx_GetVoltageRange+0x3c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eb0:	d102      	bne.n	8002eb8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002eb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002eb6:	e00b      	b.n	8002ed0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002eb8:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <HAL_PWREx_GetVoltageRange+0x3c>)
 8002eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ec6:	d102      	bne.n	8002ece <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002ec8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ecc:	e000      	b.n	8002ed0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002ece:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40007000 	.word	0x40007000

08002ee0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d141      	bne.n	8002f72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eee:	4b4b      	ldr	r3, [pc, #300]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002efa:	d131      	bne.n	8002f60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002efc:	4b47      	ldr	r3, [pc, #284]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f02:	4a46      	ldr	r2, [pc, #280]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f0c:	4b43      	ldr	r3, [pc, #268]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f14:	4a41      	ldr	r2, [pc, #260]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f1c:	4b40      	ldr	r3, [pc, #256]	@ (8003020 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2232      	movs	r2, #50	@ 0x32
 8002f22:	fb02 f303 	mul.w	r3, r2, r3
 8002f26:	4a3f      	ldr	r2, [pc, #252]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	0c9b      	lsrs	r3, r3, #18
 8002f2e:	3301      	adds	r3, #1
 8002f30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f32:	e002      	b.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f3a:	4b38      	ldr	r3, [pc, #224]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f46:	d102      	bne.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f2      	bne.n	8002f34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f4e:	4b33      	ldr	r3, [pc, #204]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f5a:	d158      	bne.n	800300e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e057      	b.n	8003010 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f60:	4b2e      	ldr	r3, [pc, #184]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f66:	4a2d      	ldr	r2, [pc, #180]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f70:	e04d      	b.n	800300e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f78:	d141      	bne.n	8002ffe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f7a:	4b28      	ldr	r3, [pc, #160]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f86:	d131      	bne.n	8002fec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f88:	4b24      	ldr	r3, [pc, #144]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f8e:	4a23      	ldr	r2, [pc, #140]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f98:	4b20      	ldr	r3, [pc, #128]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fa0:	4a1e      	ldr	r2, [pc, #120]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fa6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8003020 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2232      	movs	r2, #50	@ 0x32
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	0c9b      	lsrs	r3, r3, #18
 8002fba:	3301      	adds	r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fbe:	e002      	b.n	8002fc6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fc6:	4b15      	ldr	r3, [pc, #84]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd2:	d102      	bne.n	8002fda <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f2      	bne.n	8002fc0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fda:	4b10      	ldr	r3, [pc, #64]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe6:	d112      	bne.n	800300e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e011      	b.n	8003010 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fec:	4b0b      	ldr	r3, [pc, #44]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ffc:	e007      	b.n	800300e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ffe:	4b07      	ldr	r3, [pc, #28]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003006:	4a05      	ldr	r2, [pc, #20]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003008:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800300c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	40007000 	.word	0x40007000
 8003020:	20000040 	.word	0x20000040
 8003024:	431bde83 	.word	0x431bde83

08003028 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800302c:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <HAL_PWREx_EnableVddIO2+0x1c>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a04      	ldr	r2, [pc, #16]	@ (8003044 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003032:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003036:	6053      	str	r3, [r2, #4]
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40007000 	.word	0x40007000

08003048 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d102      	bne.n	800305c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	f000 bc08 	b.w	800386c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800305c:	4b96      	ldr	r3, [pc, #600]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003066:	4b94      	ldr	r3, [pc, #592]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80e4 	beq.w	8003246 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d007      	beq.n	8003094 <HAL_RCC_OscConfig+0x4c>
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2b0c      	cmp	r3, #12
 8003088:	f040 808b 	bne.w	80031a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2b01      	cmp	r3, #1
 8003090:	f040 8087 	bne.w	80031a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003094:	4b88      	ldr	r3, [pc, #544]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_OscConfig+0x64>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e3df      	b.n	800386c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1a      	ldr	r2, [r3, #32]
 80030b0:	4b81      	ldr	r3, [pc, #516]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <HAL_RCC_OscConfig+0x7e>
 80030bc:	4b7e      	ldr	r3, [pc, #504]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030c4:	e005      	b.n	80030d2 <HAL_RCC_OscConfig+0x8a>
 80030c6:	4b7c      	ldr	r3, [pc, #496]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 80030c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d223      	bcs.n	800311e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fdcc 	bl	8003c78 <RCC_SetFlashLatencyFromMSIRange>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e3c0      	b.n	800386c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ea:	4b73      	ldr	r3, [pc, #460]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a72      	ldr	r2, [pc, #456]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 80030f0:	f043 0308 	orr.w	r3, r3, #8
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b70      	ldr	r3, [pc, #448]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	496d      	ldr	r1, [pc, #436]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003104:	4313      	orrs	r3, r2
 8003106:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003108:	4b6b      	ldr	r3, [pc, #428]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	4968      	ldr	r1, [pc, #416]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
 800311c:	e025      	b.n	800316a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800311e:	4b66      	ldr	r3, [pc, #408]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a65      	ldr	r2, [pc, #404]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003124:	f043 0308 	orr.w	r3, r3, #8
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4b63      	ldr	r3, [pc, #396]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	4960      	ldr	r1, [pc, #384]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800313c:	4b5e      	ldr	r3, [pc, #376]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	495b      	ldr	r1, [pc, #364]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fd8c 	bl	8003c78 <RCC_SetFlashLatencyFromMSIRange>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e380      	b.n	800386c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800316a:	f000 fcc1 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 800316e:	4602      	mov	r2, r0
 8003170:	4b51      	ldr	r3, [pc, #324]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	4950      	ldr	r1, [pc, #320]	@ (80032bc <HAL_RCC_OscConfig+0x274>)
 800317c:	5ccb      	ldrb	r3, [r1, r3]
 800317e:	f003 031f 	and.w	r3, r3, #31
 8003182:	fa22 f303 	lsr.w	r3, r2, r3
 8003186:	4a4e      	ldr	r2, [pc, #312]	@ (80032c0 <HAL_RCC_OscConfig+0x278>)
 8003188:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800318a:	4b4e      	ldr	r3, [pc, #312]	@ (80032c4 <HAL_RCC_OscConfig+0x27c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff f96c 	bl	800246c <HAL_InitTick>
 8003194:	4603      	mov	r3, r0
 8003196:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d052      	beq.n	8003244 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	e364      	b.n	800386c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d032      	beq.n	8003210 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031aa:	4b43      	ldr	r3, [pc, #268]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a42      	ldr	r2, [pc, #264]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031b6:	f7ff f9a9 	bl	800250c <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031be:	f7ff f9a5 	bl	800250c <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e34d      	b.n	800386c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031d0:	4b39      	ldr	r3, [pc, #228]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031dc:	4b36      	ldr	r3, [pc, #216]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a35      	ldr	r2, [pc, #212]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 80031e2:	f043 0308 	orr.w	r3, r3, #8
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	4b33      	ldr	r3, [pc, #204]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4930      	ldr	r1, [pc, #192]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031fa:	4b2f      	ldr	r3, [pc, #188]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	492b      	ldr	r1, [pc, #172]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 800320a:	4313      	orrs	r3, r2
 800320c:	604b      	str	r3, [r1, #4]
 800320e:	e01a      	b.n	8003246 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003210:	4b29      	ldr	r3, [pc, #164]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a28      	ldr	r2, [pc, #160]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800321c:	f7ff f976 	bl	800250c <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003224:	f7ff f972 	bl	800250c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e31a      	b.n	800386c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003236:	4b20      	ldr	r3, [pc, #128]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x1dc>
 8003242:	e000      	b.n	8003246 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003244:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d073      	beq.n	800333a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	2b08      	cmp	r3, #8
 8003256:	d005      	beq.n	8003264 <HAL_RCC_OscConfig+0x21c>
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2b0c      	cmp	r3, #12
 800325c:	d10e      	bne.n	800327c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b03      	cmp	r3, #3
 8003262:	d10b      	bne.n	800327c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003264:	4b14      	ldr	r3, [pc, #80]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d063      	beq.n	8003338 <HAL_RCC_OscConfig+0x2f0>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d15f      	bne.n	8003338 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e2f7      	b.n	800386c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003284:	d106      	bne.n	8003294 <HAL_RCC_OscConfig+0x24c>
 8003286:	4b0c      	ldr	r3, [pc, #48]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a0b      	ldr	r2, [pc, #44]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 800328c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e025      	b.n	80032e0 <HAL_RCC_OscConfig+0x298>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800329c:	d114      	bne.n	80032c8 <HAL_RCC_OscConfig+0x280>
 800329e:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a05      	ldr	r2, [pc, #20]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 80032a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4b03      	ldr	r3, [pc, #12]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a02      	ldr	r2, [pc, #8]	@ (80032b8 <HAL_RCC_OscConfig+0x270>)
 80032b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e013      	b.n	80032e0 <HAL_RCC_OscConfig+0x298>
 80032b8:	40021000 	.word	0x40021000
 80032bc:	0800a3b8 	.word	0x0800a3b8
 80032c0:	20000040 	.word	0x20000040
 80032c4:	20000044 	.word	0x20000044
 80032c8:	4ba0      	ldr	r3, [pc, #640]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a9f      	ldr	r2, [pc, #636]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 80032ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	4b9d      	ldr	r3, [pc, #628]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a9c      	ldr	r2, [pc, #624]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 80032da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d013      	beq.n	8003310 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7ff f910 	bl	800250c <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f0:	f7ff f90c 	bl	800250c <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	@ 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e2b4      	b.n	800386c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003302:	4b92      	ldr	r3, [pc, #584]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x2a8>
 800330e:	e014      	b.n	800333a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7ff f8fc 	bl	800250c <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003318:	f7ff f8f8 	bl	800250c <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	@ 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e2a0      	b.n	800386c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800332a:	4b88      	ldr	r3, [pc, #544]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x2d0>
 8003336:	e000      	b.n	800333a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d060      	beq.n	8003408 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2b04      	cmp	r3, #4
 800334a:	d005      	beq.n	8003358 <HAL_RCC_OscConfig+0x310>
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2b0c      	cmp	r3, #12
 8003350:	d119      	bne.n	8003386 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d116      	bne.n	8003386 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003358:	4b7c      	ldr	r3, [pc, #496]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_OscConfig+0x328>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e27d      	b.n	800386c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003370:	4b76      	ldr	r3, [pc, #472]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	061b      	lsls	r3, r3, #24
 800337e:	4973      	ldr	r1, [pc, #460]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 8003380:	4313      	orrs	r3, r2
 8003382:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003384:	e040      	b.n	8003408 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d023      	beq.n	80033d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800338e:	4b6f      	ldr	r3, [pc, #444]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a6e      	ldr	r2, [pc, #440]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339a:	f7ff f8b7 	bl	800250c <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a2:	f7ff f8b3 	bl	800250c <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e25b      	b.n	800386c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b4:	4b65      	ldr	r3, [pc, #404]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c0:	4b62      	ldr	r3, [pc, #392]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	061b      	lsls	r3, r3, #24
 80033ce:	495f      	ldr	r1, [pc, #380]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
 80033d4:	e018      	b.n	8003408 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d6:	4b5d      	ldr	r3, [pc, #372]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a5c      	ldr	r2, [pc, #368]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 80033dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7ff f893 	bl	800250c <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ea:	f7ff f88f 	bl	800250c <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e237      	b.n	800386c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033fc:	4b53      	ldr	r3, [pc, #332]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f0      	bne.n	80033ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d03c      	beq.n	800348e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d01c      	beq.n	8003456 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341c:	4b4b      	ldr	r3, [pc, #300]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 800341e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003422:	4a4a      	ldr	r2, [pc, #296]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342c:	f7ff f86e 	bl	800250c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003434:	f7ff f86a 	bl	800250c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e212      	b.n	800386c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003446:	4b41      	ldr	r3, [pc, #260]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 8003448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0ef      	beq.n	8003434 <HAL_RCC_OscConfig+0x3ec>
 8003454:	e01b      	b.n	800348e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003456:	4b3d      	ldr	r3, [pc, #244]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 8003458:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800345c:	4a3b      	ldr	r2, [pc, #236]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 800345e:	f023 0301 	bic.w	r3, r3, #1
 8003462:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003466:	f7ff f851 	bl	800250c <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346e:	f7ff f84d 	bl	800250c <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e1f5      	b.n	800386c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003480:	4b32      	ldr	r3, [pc, #200]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 8003482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1ef      	bne.n	800346e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80a6 	beq.w	80035e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349c:	2300      	movs	r3, #0
 800349e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034a0:	4b2a      	ldr	r3, [pc, #168]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10d      	bne.n	80034c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ac:	4b27      	ldr	r3, [pc, #156]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b0:	4a26      	ldr	r2, [pc, #152]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 80034b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80034b8:	4b24      	ldr	r3, [pc, #144]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 80034ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c4:	2301      	movs	r3, #1
 80034c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c8:	4b21      	ldr	r3, [pc, #132]	@ (8003550 <HAL_RCC_OscConfig+0x508>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d118      	bne.n	8003506 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003550 <HAL_RCC_OscConfig+0x508>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003550 <HAL_RCC_OscConfig+0x508>)
 80034da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e0:	f7ff f814 	bl	800250c <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e8:	f7ff f810 	bl	800250c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e1b8      	b.n	800386c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034fa:	4b15      	ldr	r3, [pc, #84]	@ (8003550 <HAL_RCC_OscConfig+0x508>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d108      	bne.n	8003520 <HAL_RCC_OscConfig+0x4d8>
 800350e:	4b0f      	ldr	r3, [pc, #60]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003514:	4a0d      	ldr	r2, [pc, #52]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800351e:	e029      	b.n	8003574 <HAL_RCC_OscConfig+0x52c>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b05      	cmp	r3, #5
 8003526:	d115      	bne.n	8003554 <HAL_RCC_OscConfig+0x50c>
 8003528:	4b08      	ldr	r3, [pc, #32]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352e:	4a07      	ldr	r2, [pc, #28]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 8003530:	f043 0304 	orr.w	r3, r3, #4
 8003534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003538:	4b04      	ldr	r3, [pc, #16]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353e:	4a03      	ldr	r2, [pc, #12]	@ (800354c <HAL_RCC_OscConfig+0x504>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003548:	e014      	b.n	8003574 <HAL_RCC_OscConfig+0x52c>
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	40007000 	.word	0x40007000
 8003554:	4b9d      	ldr	r3, [pc, #628]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355a:	4a9c      	ldr	r2, [pc, #624]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 800355c:	f023 0301 	bic.w	r3, r3, #1
 8003560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003564:	4b99      	ldr	r3, [pc, #612]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356a:	4a98      	ldr	r2, [pc, #608]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 800356c:	f023 0304 	bic.w	r3, r3, #4
 8003570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d016      	beq.n	80035aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7fe ffc6 	bl	800250c <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003582:	e00a      	b.n	800359a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003584:	f7fe ffc2 	bl	800250c <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e168      	b.n	800386c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800359a:	4b8c      	ldr	r3, [pc, #560]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 800359c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0ed      	beq.n	8003584 <HAL_RCC_OscConfig+0x53c>
 80035a8:	e015      	b.n	80035d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035aa:	f7fe ffaf 	bl	800250c <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035b0:	e00a      	b.n	80035c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f7fe ffab 	bl	800250c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e151      	b.n	800386c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035c8:	4b80      	ldr	r3, [pc, #512]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1ed      	bne.n	80035b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035d6:	7ffb      	ldrb	r3, [r7, #31]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d105      	bne.n	80035e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035dc:	4b7b      	ldr	r3, [pc, #492]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e0:	4a7a      	ldr	r2, [pc, #488]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 80035e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035e6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d03c      	beq.n	800366e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01c      	beq.n	8003636 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035fc:	4b73      	ldr	r3, [pc, #460]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 80035fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003602:	4a72      	ldr	r2, [pc, #456]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360c:	f7fe ff7e 	bl	800250c <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003614:	f7fe ff7a 	bl	800250c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e122      	b.n	800386c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003626:	4b69      	ldr	r3, [pc, #420]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 8003628:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0ef      	beq.n	8003614 <HAL_RCC_OscConfig+0x5cc>
 8003634:	e01b      	b.n	800366e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003636:	4b65      	ldr	r3, [pc, #404]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 8003638:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800363c:	4a63      	ldr	r2, [pc, #396]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 800363e:	f023 0301 	bic.w	r3, r3, #1
 8003642:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003646:	f7fe ff61 	bl	800250c <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800364e:	f7fe ff5d 	bl	800250c <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e105      	b.n	800386c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003660:	4b5a      	ldr	r3, [pc, #360]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 8003662:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1ef      	bne.n	800364e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80f9 	beq.w	800386a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367c:	2b02      	cmp	r3, #2
 800367e:	f040 80cf 	bne.w	8003820 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003682:	4b52      	ldr	r3, [pc, #328]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f003 0203 	and.w	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003692:	429a      	cmp	r2, r3
 8003694:	d12c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a0:	3b01      	subs	r3, #1
 80036a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d123      	bne.n	80036f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d11b      	bne.n	80036f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d113      	bne.n	80036f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	3b01      	subs	r3, #1
 80036d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036d8:	429a      	cmp	r2, r3
 80036da:	d109      	bne.n	80036f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	3b01      	subs	r3, #1
 80036ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d071      	beq.n	80037d4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b0c      	cmp	r3, #12
 80036f4:	d068      	beq.n	80037c8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036f6:	4b35      	ldr	r3, [pc, #212]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d105      	bne.n	800370e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003702:	4b32      	ldr	r3, [pc, #200]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e0ac      	b.n	800386c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003712:	4b2e      	ldr	r3, [pc, #184]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a2d      	ldr	r2, [pc, #180]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 8003718:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800371c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800371e:	f7fe fef5 	bl	800250c <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003726:	f7fe fef1 	bl	800250c <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e099      	b.n	800386c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003738:	4b24      	ldr	r3, [pc, #144]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1f0      	bne.n	8003726 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003744:	4b21      	ldr	r3, [pc, #132]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	4b21      	ldr	r3, [pc, #132]	@ (80037d0 <HAL_RCC_OscConfig+0x788>)
 800374a:	4013      	ands	r3, r2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003754:	3a01      	subs	r2, #1
 8003756:	0112      	lsls	r2, r2, #4
 8003758:	4311      	orrs	r1, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800375e:	0212      	lsls	r2, r2, #8
 8003760:	4311      	orrs	r1, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003766:	0852      	lsrs	r2, r2, #1
 8003768:	3a01      	subs	r2, #1
 800376a:	0552      	lsls	r2, r2, #21
 800376c:	4311      	orrs	r1, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003772:	0852      	lsrs	r2, r2, #1
 8003774:	3a01      	subs	r2, #1
 8003776:	0652      	lsls	r2, r2, #25
 8003778:	4311      	orrs	r1, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800377e:	06d2      	lsls	r2, r2, #27
 8003780:	430a      	orrs	r2, r1
 8003782:	4912      	ldr	r1, [pc, #72]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 8003784:	4313      	orrs	r3, r2
 8003786:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003788:	4b10      	ldr	r3, [pc, #64]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a0f      	ldr	r2, [pc, #60]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 800378e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003792:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003794:	4b0d      	ldr	r3, [pc, #52]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4a0c      	ldr	r2, [pc, #48]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 800379a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800379e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037a0:	f7fe feb4 	bl	800250c <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a8:	f7fe feb0 	bl	800250c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e058      	b.n	800386c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ba:	4b04      	ldr	r3, [pc, #16]	@ (80037cc <HAL_RCC_OscConfig+0x784>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037c6:	e050      	b.n	800386a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e04f      	b.n	800386c <HAL_RCC_OscConfig+0x824>
 80037cc:	40021000 	.word	0x40021000
 80037d0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d4:	4b27      	ldr	r3, [pc, #156]	@ (8003874 <HAL_RCC_OscConfig+0x82c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d144      	bne.n	800386a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037e0:	4b24      	ldr	r3, [pc, #144]	@ (8003874 <HAL_RCC_OscConfig+0x82c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a23      	ldr	r2, [pc, #140]	@ (8003874 <HAL_RCC_OscConfig+0x82c>)
 80037e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037ec:	4b21      	ldr	r3, [pc, #132]	@ (8003874 <HAL_RCC_OscConfig+0x82c>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a20      	ldr	r2, [pc, #128]	@ (8003874 <HAL_RCC_OscConfig+0x82c>)
 80037f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037f8:	f7fe fe88 	bl	800250c <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003800:	f7fe fe84 	bl	800250c <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e02c      	b.n	800386c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003812:	4b18      	ldr	r3, [pc, #96]	@ (8003874 <HAL_RCC_OscConfig+0x82c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0x7b8>
 800381e:	e024      	b.n	800386a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2b0c      	cmp	r3, #12
 8003824:	d01f      	beq.n	8003866 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003826:	4b13      	ldr	r3, [pc, #76]	@ (8003874 <HAL_RCC_OscConfig+0x82c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a12      	ldr	r2, [pc, #72]	@ (8003874 <HAL_RCC_OscConfig+0x82c>)
 800382c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003832:	f7fe fe6b 	bl	800250c <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383a:	f7fe fe67 	bl	800250c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e00f      	b.n	800386c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800384c:	4b09      	ldr	r3, [pc, #36]	@ (8003874 <HAL_RCC_OscConfig+0x82c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1f0      	bne.n	800383a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003858:	4b06      	ldr	r3, [pc, #24]	@ (8003874 <HAL_RCC_OscConfig+0x82c>)
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	4905      	ldr	r1, [pc, #20]	@ (8003874 <HAL_RCC_OscConfig+0x82c>)
 800385e:	4b06      	ldr	r3, [pc, #24]	@ (8003878 <HAL_RCC_OscConfig+0x830>)
 8003860:	4013      	ands	r3, r2
 8003862:	60cb      	str	r3, [r1, #12]
 8003864:	e001      	b.n	800386a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	feeefffc 	.word	0xfeeefffc

0800387c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e11d      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003894:	4b90      	ldr	r3, [pc, #576]	@ (8003ad8 <HAL_RCC_ClockConfig+0x25c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d910      	bls.n	80038c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a2:	4b8d      	ldr	r3, [pc, #564]	@ (8003ad8 <HAL_RCC_ClockConfig+0x25c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 020f 	bic.w	r2, r3, #15
 80038aa:	498b      	ldr	r1, [pc, #556]	@ (8003ad8 <HAL_RCC_ClockConfig+0x25c>)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b89      	ldr	r3, [pc, #548]	@ (8003ad8 <HAL_RCC_ClockConfig+0x25c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e105      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d010      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	4b81      	ldr	r3, [pc, #516]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038dc:	429a      	cmp	r2, r3
 80038de:	d908      	bls.n	80038f2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b7e      	ldr	r3, [pc, #504]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	497b      	ldr	r1, [pc, #492]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d079      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d11e      	bne.n	8003944 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003906:	4b75      	ldr	r3, [pc, #468]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e0dc      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003916:	f000 fa09 	bl	8003d2c <RCC_GetSysClockFreqFromPLLSource>
 800391a:	4603      	mov	r3, r0
 800391c:	4a70      	ldr	r2, [pc, #448]	@ (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d946      	bls.n	80039b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003922:	4b6e      	ldr	r3, [pc, #440]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d140      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800392e:	4b6b      	ldr	r3, [pc, #428]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003936:	4a69      	ldr	r2, [pc, #420]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800393c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800393e:	2380      	movs	r3, #128	@ 0x80
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	e035      	b.n	80039b0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d107      	bne.n	800395c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800394c:	4b63      	ldr	r3, [pc, #396]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d115      	bne.n	8003984 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0b9      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d107      	bne.n	8003974 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003964:	4b5d      	ldr	r3, [pc, #372]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d109      	bne.n	8003984 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0ad      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003974:	4b59      	ldr	r3, [pc, #356]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0a5      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003984:	f000 f8b4 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8003988:	4603      	mov	r3, r0
 800398a:	4a55      	ldr	r2, [pc, #340]	@ (8003ae0 <HAL_RCC_ClockConfig+0x264>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d90f      	bls.n	80039b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003990:	4b52      	ldr	r3, [pc, #328]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800399c:	4b4f      	ldr	r3, [pc, #316]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039a4:	4a4d      	ldr	r2, [pc, #308]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 80039a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039aa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039ac:	2380      	movs	r3, #128	@ 0x80
 80039ae:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039b0:	4b4a      	ldr	r3, [pc, #296]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f023 0203 	bic.w	r2, r3, #3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4947      	ldr	r1, [pc, #284]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c2:	f7fe fda3 	bl	800250c <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c8:	e00a      	b.n	80039e0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ca:	f7fe fd9f 	bl	800250c <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d8:	4293      	cmp	r3, r2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e077      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e0:	4b3e      	ldr	r3, [pc, #248]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 020c 	and.w	r2, r3, #12
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d1eb      	bne.n	80039ca <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b80      	cmp	r3, #128	@ 0x80
 80039f6:	d105      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80039f8:	4b38      	ldr	r3, [pc, #224]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4a37      	ldr	r2, [pc, #220]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 80039fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a02:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d010      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	4b31      	ldr	r3, [pc, #196]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d208      	bcs.n	8003a32 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a20:	4b2e      	ldr	r3, [pc, #184]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	492b      	ldr	r1, [pc, #172]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a32:	4b29      	ldr	r3, [pc, #164]	@ (8003ad8 <HAL_RCC_ClockConfig+0x25c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d210      	bcs.n	8003a62 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a40:	4b25      	ldr	r3, [pc, #148]	@ (8003ad8 <HAL_RCC_ClockConfig+0x25c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 020f 	bic.w	r2, r3, #15
 8003a48:	4923      	ldr	r1, [pc, #140]	@ (8003ad8 <HAL_RCC_ClockConfig+0x25c>)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a50:	4b21      	ldr	r3, [pc, #132]	@ (8003ad8 <HAL_RCC_ClockConfig+0x25c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d001      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e036      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	4918      	ldr	r1, [pc, #96]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d009      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a8c:	4b13      	ldr	r3, [pc, #76]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4910      	ldr	r1, [pc, #64]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aa0:	f000 f826 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003adc <HAL_RCC_ClockConfig+0x260>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	490c      	ldr	r1, [pc, #48]	@ (8003ae4 <HAL_RCC_ClockConfig+0x268>)
 8003ab2:	5ccb      	ldrb	r3, [r1, r3]
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8003abc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae8 <HAL_RCC_ClockConfig+0x26c>)
 8003abe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8003aec <HAL_RCC_ClockConfig+0x270>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fe fcd1 	bl	800246c <HAL_InitTick>
 8003aca:	4603      	mov	r3, r0
 8003acc:	73fb      	strb	r3, [r7, #15]

  return status;
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40022000 	.word	0x40022000
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	04c4b400 	.word	0x04c4b400
 8003ae4:	0800a3b8 	.word	0x0800a3b8
 8003ae8:	20000040 	.word	0x20000040
 8003aec:	20000044 	.word	0x20000044

08003af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b089      	sub	sp, #36	@ 0x24
 8003af4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	2300      	movs	r3, #0
 8003afc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003afe:	4b3e      	ldr	r3, [pc, #248]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b08:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0x34>
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2b0c      	cmp	r3, #12
 8003b1c:	d121      	bne.n	8003b62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d11e      	bne.n	8003b62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b24:	4b34      	ldr	r3, [pc, #208]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b30:	4b31      	ldr	r3, [pc, #196]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b36:	0a1b      	lsrs	r3, r3, #8
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	e005      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b40:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b4c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10d      	bne.n	8003b78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d102      	bne.n	8003b6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b68:	4b25      	ldr	r3, [pc, #148]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	e004      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d101      	bne.n	8003b78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b74:	4b23      	ldr	r3, [pc, #140]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	2b0c      	cmp	r3, #12
 8003b7c:	d134      	bne.n	8003be8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d003      	beq.n	8003b9c <HAL_RCC_GetSysClockFreq+0xac>
 8003b94:	e005      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b96:	4b1a      	ldr	r3, [pc, #104]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b98:	617b      	str	r3, [r7, #20]
      break;
 8003b9a:	e005      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b9c:	4b19      	ldr	r3, [pc, #100]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b9e:	617b      	str	r3, [r7, #20]
      break;
 8003ba0:	e002      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	617b      	str	r3, [r7, #20]
      break;
 8003ba6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ba8:	4b13      	ldr	r3, [pc, #76]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bb6:	4b10      	ldr	r3, [pc, #64]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	fb03 f202 	mul.w	r2, r3, r2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bce:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	0e5b      	lsrs	r3, r3, #25
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	3301      	adds	r3, #1
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003be8:	69bb      	ldr	r3, [r7, #24]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3724      	adds	r7, #36	@ 0x24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	0800a3d0 	.word	0x0800a3d0
 8003c00:	00f42400 	.word	0x00f42400
 8003c04:	007a1200 	.word	0x007a1200

08003c08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c0c:	4b03      	ldr	r3, [pc, #12]	@ (8003c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000040 	.word	0x20000040

08003c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c24:	f7ff fff0 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4904      	ldr	r1, [pc, #16]	@ (8003c48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40021000 	.word	0x40021000
 8003c48:	0800a3c8 	.word	0x0800a3c8

08003c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c50:	f7ff ffda 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4b06      	ldr	r3, [pc, #24]	@ (8003c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	0adb      	lsrs	r3, r3, #11
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	4904      	ldr	r1, [pc, #16]	@ (8003c74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c62:	5ccb      	ldrb	r3, [r1, r3]
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000
 8003c74:	0800a3c8 	.word	0x0800a3c8

08003c78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c84:	4b27      	ldr	r3, [pc, #156]	@ (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c90:	f7ff f906 	bl	8002ea0 <HAL_PWREx_GetVoltageRange>
 8003c94:	6178      	str	r0, [r7, #20]
 8003c96:	e014      	b.n	8003cc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c98:	4b22      	ldr	r3, [pc, #136]	@ (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9c:	4a21      	ldr	r2, [pc, #132]	@ (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cb0:	f7ff f8f6 	bl	8002ea0 <HAL_PWREx_GetVoltageRange>
 8003cb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cba:	4a1a      	ldr	r2, [pc, #104]	@ (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cc8:	d10b      	bne.n	8003ce2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b80      	cmp	r3, #128	@ 0x80
 8003cce:	d913      	bls.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003cd4:	d902      	bls.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	e00d      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cdc:	2301      	movs	r3, #1
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	e00a      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ce6:	d902      	bls.n	8003cee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003ce8:	2302      	movs	r3, #2
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	e004      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b70      	cmp	r3, #112	@ 0x70
 8003cf2:	d101      	bne.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f023 020f 	bic.w	r2, r3, #15
 8003d00:	4909      	ldr	r1, [pc, #36]	@ (8003d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d08:	4b07      	ldr	r3, [pc, #28]	@ (8003d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d001      	beq.n	8003d1a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40022000 	.word	0x40022000

08003d2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d32:	4b2d      	ldr	r3, [pc, #180]	@ (8003de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d00b      	beq.n	8003d5a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d825      	bhi.n	8003d94 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d008      	beq.n	8003d60 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d11f      	bne.n	8003d94 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003d54:	4b25      	ldr	r3, [pc, #148]	@ (8003dec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d56:	613b      	str	r3, [r7, #16]
    break;
 8003d58:	e01f      	b.n	8003d9a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003d5a:	4b25      	ldr	r3, [pc, #148]	@ (8003df0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003d5c:	613b      	str	r3, [r7, #16]
    break;
 8003d5e:	e01c      	b.n	8003d9a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d60:	4b21      	ldr	r3, [pc, #132]	@ (8003de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d107      	bne.n	8003d7c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8003de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d72:	0a1b      	lsrs	r3, r3, #8
 8003d74:	f003 030f 	and.w	r3, r3, #15
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	e005      	b.n	8003d88 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	091b      	lsrs	r3, r3, #4
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003d88:	4a1a      	ldr	r2, [pc, #104]	@ (8003df4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d90:	613b      	str	r3, [r7, #16]
    break;
 8003d92:	e002      	b.n	8003d9a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	613b      	str	r3, [r7, #16]
    break;
 8003d98:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d9a:	4b13      	ldr	r3, [pc, #76]	@ (8003de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	3301      	adds	r3, #1
 8003da6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003da8:	4b0f      	ldr	r3, [pc, #60]	@ (8003de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	0a1b      	lsrs	r3, r3, #8
 8003dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	fb03 f202 	mul.w	r2, r3, r2
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbe:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dc0:	4b09      	ldr	r3, [pc, #36]	@ (8003de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	0e5b      	lsrs	r3, r3, #25
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	3301      	adds	r3, #1
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003dda:	683b      	ldr	r3, [r7, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	40021000 	.word	0x40021000
 8003dec:	00f42400 	.word	0x00f42400
 8003df0:	007a1200 	.word	0x007a1200
 8003df4:	0800a3d0 	.word	0x0800a3d0

08003df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e00:	2300      	movs	r3, #0
 8003e02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e04:	2300      	movs	r3, #0
 8003e06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d040      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e18:	2b80      	cmp	r3, #128	@ 0x80
 8003e1a:	d02a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e1c:	2b80      	cmp	r3, #128	@ 0x80
 8003e1e:	d825      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e20:	2b60      	cmp	r3, #96	@ 0x60
 8003e22:	d026      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e24:	2b60      	cmp	r3, #96	@ 0x60
 8003e26:	d821      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e28:	2b40      	cmp	r3, #64	@ 0x40
 8003e2a:	d006      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003e2c:	2b40      	cmp	r3, #64	@ 0x40
 8003e2e:	d81d      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d009      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d010      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003e38:	e018      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e3a:	4b89      	ldr	r3, [pc, #548]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	4a88      	ldr	r2, [pc, #544]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e44:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e46:	e015      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fb02 	bl	8004458 <RCCEx_PLLSAI1_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e58:	e00c      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3320      	adds	r3, #32
 8003e5e:	2100      	movs	r1, #0
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fbed 	bl	8004640 <RCCEx_PLLSAI2_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e6a:	e003      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	74fb      	strb	r3, [r7, #19]
      break;
 8003e70:	e000      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003e72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10b      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e7a:	4b79      	ldr	r3, [pc, #484]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e80:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e88:	4975      	ldr	r1, [pc, #468]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003e90:	e001      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e92:	7cfb      	ldrb	r3, [r7, #19]
 8003e94:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d047      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eaa:	d030      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb0:	d82a      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003eb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eb6:	d02a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003eb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ebc:	d824      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ebe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ec2:	d008      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ec8:	d81e      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed2:	d010      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003ed4:	e018      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ed6:	4b62      	ldr	r3, [pc, #392]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	4a61      	ldr	r2, [pc, #388]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ee2:	e015      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fab4 	bl	8004458 <RCCEx_PLLSAI1_Config>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ef4:	e00c      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3320      	adds	r3, #32
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fb9f 	bl	8004640 <RCCEx_PLLSAI2_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f06:	e003      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	74fb      	strb	r3, [r7, #19]
      break;
 8003f0c:	e000      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f10:	7cfb      	ldrb	r3, [r7, #19]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10b      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f16:	4b52      	ldr	r3, [pc, #328]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f24:	494e      	ldr	r1, [pc, #312]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003f2c:	e001      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2e:	7cfb      	ldrb	r3, [r7, #19]
 8003f30:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 809f 	beq.w	800407e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f40:	2300      	movs	r3, #0
 8003f42:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f44:	4b46      	ldr	r3, [pc, #280]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f54:	2300      	movs	r3, #0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00d      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5a:	4b41      	ldr	r3, [pc, #260]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5e:	4a40      	ldr	r2, [pc, #256]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f64:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f66:	4b3e      	ldr	r3, [pc, #248]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f72:	2301      	movs	r3, #1
 8003f74:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f76:	4b3b      	ldr	r3, [pc, #236]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a3a      	ldr	r2, [pc, #232]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f82:	f7fe fac3 	bl	800250c <HAL_GetTick>
 8003f86:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f88:	e009      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f8a:	f7fe fabf 	bl	800250c <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d902      	bls.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	74fb      	strb	r3, [r7, #19]
        break;
 8003f9c:	e005      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f9e:	4b31      	ldr	r3, [pc, #196]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0ef      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003faa:	7cfb      	ldrb	r3, [r7, #19]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d15b      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fba:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01f      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d019      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fce:	4b24      	ldr	r3, [pc, #144]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fd8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fda:	4b21      	ldr	r3, [pc, #132]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fe2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fea:	4b1d      	ldr	r3, [pc, #116]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ff6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ffa:	4a19      	ldr	r2, [pc, #100]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d016      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400c:	f7fe fa7e 	bl	800250c <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004012:	e00b      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004014:	f7fe fa7a 	bl	800250c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d902      	bls.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	74fb      	strb	r3, [r7, #19]
            break;
 800402a:	e006      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800402c:	4b0c      	ldr	r3, [pc, #48]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0ec      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800403a:	7cfb      	ldrb	r3, [r7, #19]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10c      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004040:	4b07      	ldr	r3, [pc, #28]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004046:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004050:	4903      	ldr	r1, [pc, #12]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004058:	e008      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800405a:	7cfb      	ldrb	r3, [r7, #19]
 800405c:	74bb      	strb	r3, [r7, #18]
 800405e:	e005      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004060:	40021000 	.word	0x40021000
 8004064:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004068:	7cfb      	ldrb	r3, [r7, #19]
 800406a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800406c:	7c7b      	ldrb	r3, [r7, #17]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d105      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004072:	4ba0      	ldr	r3, [pc, #640]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004076:	4a9f      	ldr	r2, [pc, #636]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800407c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800408a:	4b9a      	ldr	r3, [pc, #616]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800408c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004090:	f023 0203 	bic.w	r2, r3, #3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004098:	4996      	ldr	r1, [pc, #600]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040ac:	4b91      	ldr	r3, [pc, #580]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b2:	f023 020c 	bic.w	r2, r3, #12
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	498e      	ldr	r1, [pc, #568]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040ce:	4b89      	ldr	r3, [pc, #548]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040dc:	4985      	ldr	r1, [pc, #532]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040f0:	4b80      	ldr	r3, [pc, #512]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040fe:	497d      	ldr	r1, [pc, #500]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004112:	4b78      	ldr	r3, [pc, #480]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004118:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004120:	4974      	ldr	r1, [pc, #464]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004134:	4b6f      	ldr	r3, [pc, #444]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004142:	496c      	ldr	r1, [pc, #432]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004156:	4b67      	ldr	r3, [pc, #412]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004164:	4963      	ldr	r1, [pc, #396]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004178:	4b5e      	ldr	r3, [pc, #376]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004186:	495b      	ldr	r1, [pc, #364]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800419a:	4b56      	ldr	r3, [pc, #344]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a8:	4952      	ldr	r1, [pc, #328]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041bc:	4b4d      	ldr	r3, [pc, #308]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ca:	494a      	ldr	r1, [pc, #296]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041de:	4b45      	ldr	r3, [pc, #276]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ec:	4941      	ldr	r1, [pc, #260]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004200:	4b3c      	ldr	r3, [pc, #240]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004202:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004206:	f023 0203 	bic.w	r2, r3, #3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800420e:	4939      	ldr	r1, [pc, #228]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d028      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004222:	4b34      	ldr	r3, [pc, #208]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004228:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004230:	4930      	ldr	r1, [pc, #192]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800423c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004240:	d106      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004242:	4b2c      	ldr	r3, [pc, #176]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	4a2b      	ldr	r2, [pc, #172]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004248:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800424c:	60d3      	str	r3, [r2, #12]
 800424e:	e011      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004254:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004258:	d10c      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3304      	adds	r3, #4
 800425e:	2101      	movs	r1, #1
 8004260:	4618      	mov	r0, r3
 8004262:	f000 f8f9 	bl	8004458 <RCCEx_PLLSAI1_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800426a:	7cfb      	ldrb	r3, [r7, #19]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004270:	7cfb      	ldrb	r3, [r7, #19]
 8004272:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d04d      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004284:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004288:	d108      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800428a:	4b1a      	ldr	r3, [pc, #104]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800428c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004290:	4a18      	ldr	r2, [pc, #96]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004292:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004296:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800429a:	e012      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800429c:	4b15      	ldr	r3, [pc, #84]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800429e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042a2:	4a14      	ldr	r2, [pc, #80]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042a8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80042ac:	4b11      	ldr	r3, [pc, #68]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042ba:	490e      	ldr	r1, [pc, #56]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042ca:	d106      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042cc:	4b09      	ldr	r3, [pc, #36]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4a08      	ldr	r2, [pc, #32]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042d6:	60d3      	str	r3, [r2, #12]
 80042d8:	e020      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042e2:	d109      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042e4:	4b03      	ldr	r3, [pc, #12]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4a02      	ldr	r2, [pc, #8]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ee:	60d3      	str	r3, [r2, #12]
 80042f0:	e014      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80042f2:	bf00      	nop
 80042f4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004300:	d10c      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3304      	adds	r3, #4
 8004306:	2101      	movs	r1, #1
 8004308:	4618      	mov	r0, r3
 800430a:	f000 f8a5 	bl	8004458 <RCCEx_PLLSAI1_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004312:	7cfb      	ldrb	r3, [r7, #19]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004318:	7cfb      	ldrb	r3, [r7, #19]
 800431a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d028      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004328:	4b4a      	ldr	r3, [pc, #296]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800432e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004336:	4947      	ldr	r1, [pc, #284]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004342:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004346:	d106      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004348:	4b42      	ldr	r3, [pc, #264]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	4a41      	ldr	r2, [pc, #260]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800434e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004352:	60d3      	str	r3, [r2, #12]
 8004354:	e011      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800435a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800435e:	d10c      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3304      	adds	r3, #4
 8004364:	2101      	movs	r1, #1
 8004366:	4618      	mov	r0, r3
 8004368:	f000 f876 	bl	8004458 <RCCEx_PLLSAI1_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004370:	7cfb      	ldrb	r3, [r7, #19]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004376:	7cfb      	ldrb	r3, [r7, #19]
 8004378:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01e      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004386:	4b33      	ldr	r3, [pc, #204]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004396:	492f      	ldr	r1, [pc, #188]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3304      	adds	r3, #4
 80043ae:	2102      	movs	r1, #2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 f851 	bl	8004458 <RCCEx_PLLSAI1_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ba:	7cfb      	ldrb	r3, [r7, #19]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80043c0:	7cfb      	ldrb	r3, [r7, #19]
 80043c2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00b      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043d0:	4b20      	ldr	r3, [pc, #128]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043d6:	f023 0204 	bic.w	r2, r3, #4
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043e0:	491c      	ldr	r1, [pc, #112]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00b      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80043f4:	4b17      	ldr	r3, [pc, #92]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043fa:	f023 0218 	bic.w	r2, r3, #24
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004404:	4913      	ldr	r1, [pc, #76]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d017      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004418:	4b0e      	ldr	r3, [pc, #56]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800441a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800441e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004428:	490a      	ldr	r1, [pc, #40]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004436:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800443a:	d105      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800443c:	4b05      	ldr	r3, [pc, #20]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	4a04      	ldr	r2, [pc, #16]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004442:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004446:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004448:	7cbb      	ldrb	r3, [r7, #18]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000

08004458 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004466:	4b72      	ldr	r3, [pc, #456]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00e      	beq.n	8004490 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004472:	4b6f      	ldr	r3, [pc, #444]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f003 0203 	and.w	r2, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d103      	bne.n	800448a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
       ||
 8004486:	2b00      	cmp	r3, #0
 8004488:	d142      	bne.n	8004510 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
 800448e:	e03f      	b.n	8004510 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b03      	cmp	r3, #3
 8004496:	d018      	beq.n	80044ca <RCCEx_PLLSAI1_Config+0x72>
 8004498:	2b03      	cmp	r3, #3
 800449a:	d825      	bhi.n	80044e8 <RCCEx_PLLSAI1_Config+0x90>
 800449c:	2b01      	cmp	r3, #1
 800449e:	d002      	beq.n	80044a6 <RCCEx_PLLSAI1_Config+0x4e>
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d009      	beq.n	80044b8 <RCCEx_PLLSAI1_Config+0x60>
 80044a4:	e020      	b.n	80044e8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044a6:	4b62      	ldr	r3, [pc, #392]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d11d      	bne.n	80044ee <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b6:	e01a      	b.n	80044ee <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044b8:	4b5d      	ldr	r3, [pc, #372]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d116      	bne.n	80044f2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044c8:	e013      	b.n	80044f2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044ca:	4b59      	ldr	r3, [pc, #356]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10f      	bne.n	80044f6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044d6:	4b56      	ldr	r3, [pc, #344]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044e6:	e006      	b.n	80044f6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	73fb      	strb	r3, [r7, #15]
      break;
 80044ec:	e004      	b.n	80044f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044ee:	bf00      	nop
 80044f0:	e002      	b.n	80044f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044f2:	bf00      	nop
 80044f4:	e000      	b.n	80044f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d108      	bne.n	8004510 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80044fe:	4b4c      	ldr	r3, [pc, #304]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f023 0203 	bic.w	r2, r3, #3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4949      	ldr	r1, [pc, #292]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 800450c:	4313      	orrs	r3, r2
 800450e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004510:	7bfb      	ldrb	r3, [r7, #15]
 8004512:	2b00      	cmp	r3, #0
 8004514:	f040 8086 	bne.w	8004624 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004518:	4b45      	ldr	r3, [pc, #276]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a44      	ldr	r2, [pc, #272]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 800451e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004524:	f7fd fff2 	bl	800250c <HAL_GetTick>
 8004528:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800452a:	e009      	b.n	8004540 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800452c:	f7fd ffee 	bl	800250c <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d902      	bls.n	8004540 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	73fb      	strb	r3, [r7, #15]
        break;
 800453e:	e005      	b.n	800454c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004540:	4b3b      	ldr	r3, [pc, #236]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1ef      	bne.n	800452c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d168      	bne.n	8004624 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d113      	bne.n	8004580 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004558:	4b35      	ldr	r3, [pc, #212]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	4b35      	ldr	r3, [pc, #212]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1dc>)
 800455e:	4013      	ands	r3, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6892      	ldr	r2, [r2, #8]
 8004564:	0211      	lsls	r1, r2, #8
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68d2      	ldr	r2, [r2, #12]
 800456a:	06d2      	lsls	r2, r2, #27
 800456c:	4311      	orrs	r1, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6852      	ldr	r2, [r2, #4]
 8004572:	3a01      	subs	r2, #1
 8004574:	0112      	lsls	r2, r2, #4
 8004576:	430a      	orrs	r2, r1
 8004578:	492d      	ldr	r1, [pc, #180]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 800457a:	4313      	orrs	r3, r2
 800457c:	610b      	str	r3, [r1, #16]
 800457e:	e02d      	b.n	80045dc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d115      	bne.n	80045b2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004586:	4b2a      	ldr	r3, [pc, #168]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	4b2b      	ldr	r3, [pc, #172]	@ (8004638 <RCCEx_PLLSAI1_Config+0x1e0>)
 800458c:	4013      	ands	r3, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6892      	ldr	r2, [r2, #8]
 8004592:	0211      	lsls	r1, r2, #8
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6912      	ldr	r2, [r2, #16]
 8004598:	0852      	lsrs	r2, r2, #1
 800459a:	3a01      	subs	r2, #1
 800459c:	0552      	lsls	r2, r2, #21
 800459e:	4311      	orrs	r1, r2
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6852      	ldr	r2, [r2, #4]
 80045a4:	3a01      	subs	r2, #1
 80045a6:	0112      	lsls	r2, r2, #4
 80045a8:	430a      	orrs	r2, r1
 80045aa:	4921      	ldr	r1, [pc, #132]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	610b      	str	r3, [r1, #16]
 80045b0:	e014      	b.n	80045dc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045b4:	691a      	ldr	r2, [r3, #16]
 80045b6:	4b21      	ldr	r3, [pc, #132]	@ (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6892      	ldr	r2, [r2, #8]
 80045be:	0211      	lsls	r1, r2, #8
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6952      	ldr	r2, [r2, #20]
 80045c4:	0852      	lsrs	r2, r2, #1
 80045c6:	3a01      	subs	r2, #1
 80045c8:	0652      	lsls	r2, r2, #25
 80045ca:	4311      	orrs	r1, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6852      	ldr	r2, [r2, #4]
 80045d0:	3a01      	subs	r2, #1
 80045d2:	0112      	lsls	r2, r2, #4
 80045d4:	430a      	orrs	r2, r1
 80045d6:	4916      	ldr	r1, [pc, #88]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045dc:	4b14      	ldr	r3, [pc, #80]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a13      	ldr	r2, [pc, #76]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fd ff90 	bl	800250c <HAL_GetTick>
 80045ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045ee:	e009      	b.n	8004604 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045f0:	f7fd ff8c 	bl	800250c <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d902      	bls.n	8004604 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	73fb      	strb	r3, [r7, #15]
          break;
 8004602:	e005      	b.n	8004610 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004604:	4b0a      	ldr	r3, [pc, #40]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0ef      	beq.n	80045f0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004616:	4b06      	ldr	r3, [pc, #24]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	4904      	ldr	r1, [pc, #16]	@ (8004630 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004620:	4313      	orrs	r3, r2
 8004622:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004624:	7bfb      	ldrb	r3, [r7, #15]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40021000 	.word	0x40021000
 8004634:	07ff800f 	.word	0x07ff800f
 8004638:	ff9f800f 	.word	0xff9f800f
 800463c:	f9ff800f 	.word	0xf9ff800f

08004640 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800464e:	4b72      	ldr	r3, [pc, #456]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00e      	beq.n	8004678 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800465a:	4b6f      	ldr	r3, [pc, #444]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f003 0203 	and.w	r2, r3, #3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d103      	bne.n	8004672 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
       ||
 800466e:	2b00      	cmp	r3, #0
 8004670:	d142      	bne.n	80046f8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	73fb      	strb	r3, [r7, #15]
 8004676:	e03f      	b.n	80046f8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b03      	cmp	r3, #3
 800467e:	d018      	beq.n	80046b2 <RCCEx_PLLSAI2_Config+0x72>
 8004680:	2b03      	cmp	r3, #3
 8004682:	d825      	bhi.n	80046d0 <RCCEx_PLLSAI2_Config+0x90>
 8004684:	2b01      	cmp	r3, #1
 8004686:	d002      	beq.n	800468e <RCCEx_PLLSAI2_Config+0x4e>
 8004688:	2b02      	cmp	r3, #2
 800468a:	d009      	beq.n	80046a0 <RCCEx_PLLSAI2_Config+0x60>
 800468c:	e020      	b.n	80046d0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800468e:	4b62      	ldr	r3, [pc, #392]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d11d      	bne.n	80046d6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800469e:	e01a      	b.n	80046d6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046a0:	4b5d      	ldr	r3, [pc, #372]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d116      	bne.n	80046da <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b0:	e013      	b.n	80046da <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046b2:	4b59      	ldr	r3, [pc, #356]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10f      	bne.n	80046de <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046be:	4b56      	ldr	r3, [pc, #344]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d109      	bne.n	80046de <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046ce:	e006      	b.n	80046de <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	73fb      	strb	r3, [r7, #15]
      break;
 80046d4:	e004      	b.n	80046e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80046d6:	bf00      	nop
 80046d8:	e002      	b.n	80046e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80046da:	bf00      	nop
 80046dc:	e000      	b.n	80046e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80046de:	bf00      	nop
    }

    if(status == HAL_OK)
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d108      	bne.n	80046f8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80046e6:	4b4c      	ldr	r3, [pc, #304]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f023 0203 	bic.w	r2, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4949      	ldr	r1, [pc, #292]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f040 8086 	bne.w	800480c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004700:	4b45      	ldr	r3, [pc, #276]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a44      	ldr	r2, [pc, #272]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800470a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800470c:	f7fd fefe 	bl	800250c <HAL_GetTick>
 8004710:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004712:	e009      	b.n	8004728 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004714:	f7fd fefa 	bl	800250c <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d902      	bls.n	8004728 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	73fb      	strb	r3, [r7, #15]
        break;
 8004726:	e005      	b.n	8004734 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004728:	4b3b      	ldr	r3, [pc, #236]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1ef      	bne.n	8004714 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004734:	7bfb      	ldrb	r3, [r7, #15]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d168      	bne.n	800480c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d113      	bne.n	8004768 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004740:	4b35      	ldr	r3, [pc, #212]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004742:	695a      	ldr	r2, [r3, #20]
 8004744:	4b35      	ldr	r3, [pc, #212]	@ (800481c <RCCEx_PLLSAI2_Config+0x1dc>)
 8004746:	4013      	ands	r3, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6892      	ldr	r2, [r2, #8]
 800474c:	0211      	lsls	r1, r2, #8
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	68d2      	ldr	r2, [r2, #12]
 8004752:	06d2      	lsls	r2, r2, #27
 8004754:	4311      	orrs	r1, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6852      	ldr	r2, [r2, #4]
 800475a:	3a01      	subs	r2, #1
 800475c:	0112      	lsls	r2, r2, #4
 800475e:	430a      	orrs	r2, r1
 8004760:	492d      	ldr	r1, [pc, #180]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004762:	4313      	orrs	r3, r2
 8004764:	614b      	str	r3, [r1, #20]
 8004766:	e02d      	b.n	80047c4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d115      	bne.n	800479a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800476e:	4b2a      	ldr	r3, [pc, #168]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004770:	695a      	ldr	r2, [r3, #20]
 8004772:	4b2b      	ldr	r3, [pc, #172]	@ (8004820 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004774:	4013      	ands	r3, r2
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6892      	ldr	r2, [r2, #8]
 800477a:	0211      	lsls	r1, r2, #8
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6912      	ldr	r2, [r2, #16]
 8004780:	0852      	lsrs	r2, r2, #1
 8004782:	3a01      	subs	r2, #1
 8004784:	0552      	lsls	r2, r2, #21
 8004786:	4311      	orrs	r1, r2
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6852      	ldr	r2, [r2, #4]
 800478c:	3a01      	subs	r2, #1
 800478e:	0112      	lsls	r2, r2, #4
 8004790:	430a      	orrs	r2, r1
 8004792:	4921      	ldr	r1, [pc, #132]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004794:	4313      	orrs	r3, r2
 8004796:	614b      	str	r3, [r1, #20]
 8004798:	e014      	b.n	80047c4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800479a:	4b1f      	ldr	r3, [pc, #124]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 800479c:	695a      	ldr	r2, [r3, #20]
 800479e:	4b21      	ldr	r3, [pc, #132]	@ (8004824 <RCCEx_PLLSAI2_Config+0x1e4>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6892      	ldr	r2, [r2, #8]
 80047a6:	0211      	lsls	r1, r2, #8
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6952      	ldr	r2, [r2, #20]
 80047ac:	0852      	lsrs	r2, r2, #1
 80047ae:	3a01      	subs	r2, #1
 80047b0:	0652      	lsls	r2, r2, #25
 80047b2:	4311      	orrs	r1, r2
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6852      	ldr	r2, [r2, #4]
 80047b8:	3a01      	subs	r2, #1
 80047ba:	0112      	lsls	r2, r2, #4
 80047bc:	430a      	orrs	r2, r1
 80047be:	4916      	ldr	r1, [pc, #88]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047c4:	4b14      	ldr	r3, [pc, #80]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a13      	ldr	r2, [pc, #76]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d0:	f7fd fe9c 	bl	800250c <HAL_GetTick>
 80047d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047d6:	e009      	b.n	80047ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047d8:	f7fd fe98 	bl	800250c <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d902      	bls.n	80047ec <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	73fb      	strb	r3, [r7, #15]
          break;
 80047ea:	e005      	b.n	80047f8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0ef      	beq.n	80047d8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047fe:	4b06      	ldr	r3, [pc, #24]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004800:	695a      	ldr	r2, [r3, #20]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	4904      	ldr	r1, [pc, #16]	@ (8004818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004808:	4313      	orrs	r3, r2
 800480a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800480c:	7bfb      	ldrb	r3, [r7, #15]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
 800481c:	07ff800f 	.word	0x07ff800f
 8004820:	ff9f800f 	.word	0xff9f800f
 8004824:	f9ff800f 	.word	0xf9ff800f

08004828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e095      	b.n	8004966 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483e:	2b00      	cmp	r3, #0
 8004840:	d108      	bne.n	8004854 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800484a:	d009      	beq.n	8004860 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	61da      	str	r2, [r3, #28]
 8004852:	e005      	b.n	8004860 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fd fc9c 	bl	80021b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004896:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048a0:	d902      	bls.n	80048a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	e002      	b.n	80048ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80048b6:	d007      	beq.n	80048c8 <HAL_SPI_Init+0xa0>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048c0:	d002      	beq.n	80048c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800490a:	ea42 0103 	orr.w	r1, r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004912:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	0c1b      	lsrs	r3, r3, #16
 8004924:	f003 0204 	and.w	r2, r3, #4
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004944:	ea42 0103 	orr.w	r1, r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b088      	sub	sp, #32
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	603b      	str	r3, [r7, #0]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_SPI_Transmit+0x22>
 800498c:	2302      	movs	r3, #2
 800498e:	e15f      	b.n	8004c50 <HAL_SPI_Transmit+0x2e2>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004998:	f7fd fdb8 	bl	800250c <HAL_GetTick>
 800499c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800499e:	88fb      	ldrh	r3, [r7, #6]
 80049a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d002      	beq.n	80049b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049ae:	2302      	movs	r3, #2
 80049b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049b2:	e148      	b.n	8004c46 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <HAL_SPI_Transmit+0x52>
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d102      	bne.n	80049c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049c4:	e13f      	b.n	8004c46 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2203      	movs	r2, #3
 80049ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	88fa      	ldrh	r2, [r7, #6]
 80049de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	88fa      	ldrh	r2, [r7, #6]
 80049e4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a10:	d10f      	bne.n	8004a32 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a3c:	2b40      	cmp	r3, #64	@ 0x40
 8004a3e:	d007      	beq.n	8004a50 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a58:	d94f      	bls.n	8004afa <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d002      	beq.n	8004a68 <HAL_SPI_Transmit+0xfa>
 8004a62:	8afb      	ldrh	r3, [r7, #22]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d142      	bne.n	8004aee <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a6c:	881a      	ldrh	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a78:	1c9a      	adds	r2, r3, #2
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a8c:	e02f      	b.n	8004aee <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d112      	bne.n	8004ac2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa0:	881a      	ldrh	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aac:	1c9a      	adds	r2, r3, #2
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ac0:	e015      	b.n	8004aee <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ac2:	f7fd fd23 	bl	800250c <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d803      	bhi.n	8004ada <HAL_SPI_Transmit+0x16c>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad8:	d102      	bne.n	8004ae0 <HAL_SPI_Transmit+0x172>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d106      	bne.n	8004aee <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004aec:	e0ab      	b.n	8004c46 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1ca      	bne.n	8004a8e <HAL_SPI_Transmit+0x120>
 8004af8:	e080      	b.n	8004bfc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_SPI_Transmit+0x19a>
 8004b02:	8afb      	ldrh	r3, [r7, #22]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d174      	bne.n	8004bf2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d912      	bls.n	8004b38 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b16:	881a      	ldrh	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b22:	1c9a      	adds	r2, r3, #2
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b02      	subs	r3, #2
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b36:	e05c      	b.n	8004bf2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	330c      	adds	r3, #12
 8004b42:	7812      	ldrb	r2, [r2, #0]
 8004b44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b5e:	e048      	b.n	8004bf2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d12b      	bne.n	8004bc6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d912      	bls.n	8004b9e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7c:	881a      	ldrh	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b88:	1c9a      	adds	r2, r3, #2
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b02      	subs	r3, #2
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b9c:	e029      	b.n	8004bf2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	7812      	ldrb	r2, [r2, #0]
 8004baa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bc4:	e015      	b.n	8004bf2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bc6:	f7fd fca1 	bl	800250c <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d803      	bhi.n	8004bde <HAL_SPI_Transmit+0x270>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d102      	bne.n	8004be4 <HAL_SPI_Transmit+0x276>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d106      	bne.n	8004bf2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004bf0:	e029      	b.n	8004c46 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1b1      	bne.n	8004b60 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	6839      	ldr	r1, [r7, #0]
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f947 	bl	8004e94 <SPI_EndRxTxTransaction>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10a      	bne.n	8004c30 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	77fb      	strb	r3, [r7, #31]
 8004c3c:	e003      	b.n	8004c46 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004c4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3720      	adds	r7, #32
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	603b      	str	r3, [r7, #0]
 8004c64:	4613      	mov	r3, r2
 8004c66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c68:	f7fd fc50 	bl	800250c <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	4413      	add	r3, r2
 8004c76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c78:	f7fd fc48 	bl	800250c <HAL_GetTick>
 8004c7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c7e:	4b39      	ldr	r3, [pc, #228]	@ (8004d64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	015b      	lsls	r3, r3, #5
 8004c84:	0d1b      	lsrs	r3, r3, #20
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	fb02 f303 	mul.w	r3, r2, r3
 8004c8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c8e:	e054      	b.n	8004d3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c96:	d050      	beq.n	8004d3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c98:	f7fd fc38 	bl	800250c <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d902      	bls.n	8004cae <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d13d      	bne.n	8004d2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004cbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cc6:	d111      	bne.n	8004cec <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cd0:	d004      	beq.n	8004cdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cda:	d107      	bne.n	8004cec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf4:	d10f      	bne.n	8004d16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e017      	b.n	8004d5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4013      	ands	r3, r2
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	bf0c      	ite	eq
 8004d4a:	2301      	moveq	r3, #1
 8004d4c:	2300      	movne	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d19b      	bne.n	8004c90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3720      	adds	r7, #32
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20000040 	.word	0x20000040

08004d68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08a      	sub	sp, #40	@ 0x28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004d7a:	f7fd fbc7 	bl	800250c <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	4413      	add	r3, r2
 8004d88:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004d8a:	f7fd fbbf 	bl	800250c <HAL_GetTick>
 8004d8e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	330c      	adds	r3, #12
 8004d96:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d98:	4b3d      	ldr	r3, [pc, #244]	@ (8004e90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	00da      	lsls	r2, r3, #3
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	0d1b      	lsrs	r3, r3, #20
 8004da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004daa:	fb02 f303 	mul.w	r3, r2, r3
 8004dae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004db0:	e060      	b.n	8004e74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004db8:	d107      	bne.n	8004dca <SPI_WaitFifoStateUntilTimeout+0x62>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d104      	bne.n	8004dca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd0:	d050      	beq.n	8004e74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dd2:	f7fd fb9b 	bl	800250c <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d902      	bls.n	8004de8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d13d      	bne.n	8004e64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004df6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e00:	d111      	bne.n	8004e26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e0a:	d004      	beq.n	8004e16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e14:	d107      	bne.n	8004e26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e2e:	d10f      	bne.n	8004e50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e010      	b.n	8004e86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d196      	bne.n	8004db2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3728      	adds	r7, #40	@ 0x28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20000040 	.word	0x20000040

08004e94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f7ff ff5b 	bl	8004d68 <SPI_WaitFifoStateUntilTimeout>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d007      	beq.n	8004ec8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ebc:	f043 0220 	orr.w	r2, r3, #32
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e027      	b.n	8004f18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2180      	movs	r1, #128	@ 0x80
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f7ff fec0 	bl	8004c58 <SPI_WaitFlagStateUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d007      	beq.n	8004eee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ee2:	f043 0220 	orr.w	r2, r3, #32
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e014      	b.n	8004f18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f7ff ff34 	bl	8004d68 <SPI_WaitFifoStateUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f0a:	f043 0220 	orr.w	r2, r3, #32
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e000      	b.n	8004f18 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e042      	b.n	8004fb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d106      	bne.n	8004f4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7fd f979 	bl	800223c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2224      	movs	r2, #36	@ 0x24
 8004f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 ffbc 	bl	8005ee8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fcbd 	bl	80058f0 <UART_SetConfig>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e01b      	b.n	8004fb8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f001 f83b 	bl	800602c <UART_CheckIdleState>
 8004fb6:	4603      	mov	r3, r0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e031      	b.n	8005036 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2224      	movs	r2, #36	@ 0x24
 8004fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0201 	bic.w	r2, r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2200      	movs	r2, #0
 8005000:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fd f982 	bl	800230c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b08a      	sub	sp, #40	@ 0x28
 8005042:	af02      	add	r7, sp, #8
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	4613      	mov	r3, r2
 800504c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005054:	2b20      	cmp	r3, #32
 8005056:	f040 80b6 	bne.w	80051c6 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <HAL_UART_Receive+0x28>
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e0ae      	b.n	80051c8 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2222      	movs	r2, #34	@ 0x22
 8005076:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005080:	f7fd fa44 	bl	800250c <HAL_GetTick>
 8005084:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	88fa      	ldrh	r2, [r7, #6]
 800508a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	88fa      	ldrh	r2, [r7, #6]
 8005092:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800509e:	d10e      	bne.n	80050be <HAL_UART_Receive+0x80>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d105      	bne.n	80050b4 <HAL_UART_Receive+0x76>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80050ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80050b2:	e02d      	b.n	8005110 <HAL_UART_Receive+0xd2>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	22ff      	movs	r2, #255	@ 0xff
 80050b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80050bc:	e028      	b.n	8005110 <HAL_UART_Receive+0xd2>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10d      	bne.n	80050e2 <HAL_UART_Receive+0xa4>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d104      	bne.n	80050d8 <HAL_UART_Receive+0x9a>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	22ff      	movs	r2, #255	@ 0xff
 80050d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80050d6:	e01b      	b.n	8005110 <HAL_UART_Receive+0xd2>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	227f      	movs	r2, #127	@ 0x7f
 80050dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80050e0:	e016      	b.n	8005110 <HAL_UART_Receive+0xd2>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050ea:	d10d      	bne.n	8005108 <HAL_UART_Receive+0xca>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d104      	bne.n	80050fe <HAL_UART_Receive+0xc0>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	227f      	movs	r2, #127	@ 0x7f
 80050f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80050fc:	e008      	b.n	8005110 <HAL_UART_Receive+0xd2>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	223f      	movs	r2, #63	@ 0x3f
 8005102:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005106:	e003      	b.n	8005110 <HAL_UART_Receive+0xd2>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005116:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005120:	d108      	bne.n	8005134 <HAL_UART_Receive+0xf6>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d104      	bne.n	8005134 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	e003      	b.n	800513c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005138:	2300      	movs	r3, #0
 800513a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800513c:	e037      	b.n	80051ae <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2200      	movs	r2, #0
 8005146:	2120      	movs	r1, #32
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f001 f819 	bl	8006180 <UART_WaitOnFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e033      	b.n	80051c8 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10c      	bne.n	8005180 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800516c:	b29a      	uxth	r2, r3
 800516e:	8a7b      	ldrh	r3, [r7, #18]
 8005170:	4013      	ands	r3, r2
 8005172:	b29a      	uxth	r2, r3
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	3302      	adds	r3, #2
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	e00d      	b.n	800519c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005186:	b29b      	uxth	r3, r3
 8005188:	b2da      	uxtb	r2, r3
 800518a:	8a7b      	ldrh	r3, [r7, #18]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	4013      	ands	r3, r2
 8005190:	b2da      	uxtb	r2, r3
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	3301      	adds	r3, #1
 800519a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1c1      	bne.n	800513e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	e000      	b.n	80051c8 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80051c6:	2302      	movs	r3, #2
  }
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3720      	adds	r7, #32
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08a      	sub	sp, #40	@ 0x28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	4613      	mov	r3, r2
 80051dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d137      	bne.n	8005258 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_UART_Receive_IT+0x24>
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e030      	b.n	800525a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a18      	ldr	r2, [pc, #96]	@ (8005264 <HAL_UART_Receive_IT+0x94>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d01f      	beq.n	8005248 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d018      	beq.n	8005248 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	e853 3f00 	ldrex	r3, [r3]
 8005222:	613b      	str	r3, [r7, #16]
   return(result);
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	461a      	mov	r2, r3
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	623b      	str	r3, [r7, #32]
 8005236:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	69f9      	ldr	r1, [r7, #28]
 800523a:	6a3a      	ldr	r2, [r7, #32]
 800523c:	e841 2300 	strex	r3, r2, [r1]
 8005240:	61bb      	str	r3, [r7, #24]
   return(result);
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e6      	bne.n	8005216 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005248:	88fb      	ldrh	r3, [r7, #6]
 800524a:	461a      	mov	r2, r3
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fffe 	bl	8006250 <UART_Start_Receive_IT>
 8005254:	4603      	mov	r3, r0
 8005256:	e000      	b.n	800525a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005258:	2302      	movs	r3, #2
  }
}
 800525a:	4618      	mov	r0, r3
 800525c:	3728      	adds	r7, #40	@ 0x28
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40008000 	.word	0x40008000

08005268 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b0ba      	sub	sp, #232	@ 0xe8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800528e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005292:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005296:	4013      	ands	r3, r2
 8005298:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800529c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d11b      	bne.n	80052dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d015      	beq.n	80052dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80052b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052b4:	f003 0320 	and.w	r3, r3, #32
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d105      	bne.n	80052c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80052bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d009      	beq.n	80052dc <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 82e3 	beq.w	8005898 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	4798      	blx	r3
      }
      return;
 80052da:	e2dd      	b.n	8005898 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80052dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 8123 	beq.w	800552c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80052e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80052ea:	4b8d      	ldr	r3, [pc, #564]	@ (8005520 <HAL_UART_IRQHandler+0x2b8>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80052f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80052f6:	4b8b      	ldr	r3, [pc, #556]	@ (8005524 <HAL_UART_IRQHandler+0x2bc>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 8116 	beq.w	800552c <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d011      	beq.n	8005330 <HAL_UART_IRQHandler+0xc8>
 800530c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00b      	beq.n	8005330 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2201      	movs	r2, #1
 800531e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005326:	f043 0201 	orr.w	r2, r3, #1
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d011      	beq.n	8005360 <HAL_UART_IRQHandler+0xf8>
 800533c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00b      	beq.n	8005360 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2202      	movs	r2, #2
 800534e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005356:	f043 0204 	orr.w	r2, r3, #4
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d011      	beq.n	8005390 <HAL_UART_IRQHandler+0x128>
 800536c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00b      	beq.n	8005390 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2204      	movs	r2, #4
 800537e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005386:	f043 0202 	orr.w	r2, r3, #2
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b00      	cmp	r3, #0
 800539a:	d017      	beq.n	80053cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800539c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d105      	bne.n	80053b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80053a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80053ac:	4b5c      	ldr	r3, [pc, #368]	@ (8005520 <HAL_UART_IRQHandler+0x2b8>)
 80053ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00b      	beq.n	80053cc <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2208      	movs	r2, #8
 80053ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c2:	f043 0208 	orr.w	r2, r3, #8
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d012      	beq.n	80053fe <HAL_UART_IRQHandler+0x196>
 80053d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00c      	beq.n	80053fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053f4:	f043 0220 	orr.w	r2, r3, #32
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 8249 	beq.w	800589c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800540a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b00      	cmp	r3, #0
 8005414:	d013      	beq.n	800543e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b00      	cmp	r3, #0
 8005420:	d105      	bne.n	800542e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d007      	beq.n	800543e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005444:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005452:	2b40      	cmp	r3, #64	@ 0x40
 8005454:	d005      	beq.n	8005462 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800545a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800545e:	2b00      	cmp	r3, #0
 8005460:	d054      	beq.n	800550c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f001 f816 	bl	8006494 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005472:	2b40      	cmp	r3, #64	@ 0x40
 8005474:	d146      	bne.n	8005504 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3308      	adds	r3, #8
 800547c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005480:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005484:	e853 3f00 	ldrex	r3, [r3]
 8005488:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800548c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005490:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005494:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3308      	adds	r3, #8
 800549e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80054a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80054a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80054ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1d9      	bne.n	8005476 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d017      	beq.n	80054fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054d2:	4a15      	ldr	r2, [pc, #84]	@ (8005528 <HAL_UART_IRQHandler+0x2c0>)
 80054d4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fd f9e4 	bl	80028aa <HAL_DMA_Abort_IT>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d019      	beq.n	800551c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80054f6:	4610      	mov	r0, r2
 80054f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fa:	e00f      	b.n	800551c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f9e1 	bl	80058c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005502:	e00b      	b.n	800551c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f9dd 	bl	80058c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800550a:	e007      	b.n	800551c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f9d9 	bl	80058c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800551a:	e1bf      	b.n	800589c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800551c:	bf00      	nop
    return;
 800551e:	e1bd      	b.n	800589c <HAL_UART_IRQHandler+0x634>
 8005520:	10000001 	.word	0x10000001
 8005524:	04000120 	.word	0x04000120
 8005528:	08006561 	.word	0x08006561

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005530:	2b01      	cmp	r3, #1
 8005532:	f040 8153 	bne.w	80057dc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800553a:	f003 0310 	and.w	r3, r3, #16
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 814c 	beq.w	80057dc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 8145 	beq.w	80057dc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2210      	movs	r2, #16
 8005558:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005564:	2b40      	cmp	r3, #64	@ 0x40
 8005566:	f040 80bb 	bne.w	80056e0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005578:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 818f 	beq.w	80058a0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005588:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800558c:	429a      	cmp	r2, r3
 800558e:	f080 8187 	bcs.w	80058a0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005598:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0320 	and.w	r3, r3, #32
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f040 8087 	bne.w	80056be <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055bc:	e853 3f00 	ldrex	r3, [r3]
 80055c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1da      	bne.n	80055b0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3308      	adds	r3, #8
 8005600:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800560a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800560c:	f023 0301 	bic.w	r3, r3, #1
 8005610:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3308      	adds	r3, #8
 800561a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800561e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005622:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005624:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005626:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005630:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e1      	bne.n	80055fa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3308      	adds	r3, #8
 800563c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005648:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800564c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3308      	adds	r3, #8
 8005656:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800565a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800565c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005660:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005662:	e841 2300 	strex	r3, r2, [r1]
 8005666:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005668:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1e3      	bne.n	8005636 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800568a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800568c:	f023 0310 	bic.w	r3, r3, #16
 8005690:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	461a      	mov	r2, r3
 800569a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800569e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e4      	bne.n	800567c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fd f89a 	bl	80027f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	4619      	mov	r1, r3
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f8fd 	bl	80058d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056de:	e0df      	b.n	80058a0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80d1 	beq.w	80058a4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005702:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 80cc 	beq.w	80058a4 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800571a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800571c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005720:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	461a      	mov	r2, r3
 800572a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800572e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005730:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005734:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800573c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e4      	bne.n	800570c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3308      	adds	r3, #8
 8005748:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	623b      	str	r3, [r7, #32]
   return(result);
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005758:	f023 0301 	bic.w	r3, r3, #1
 800575c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3308      	adds	r3, #8
 8005766:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800576a:	633a      	str	r2, [r7, #48]	@ 0x30
 800576c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005772:	e841 2300 	strex	r3, r2, [r1]
 8005776:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1e1      	bne.n	8005742 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	60fb      	str	r3, [r7, #12]
   return(result);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0310 	bic.w	r3, r3, #16
 80057a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80057b4:	61fb      	str	r3, [r7, #28]
 80057b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b8:	69b9      	ldr	r1, [r7, #24]
 80057ba:	69fa      	ldr	r2, [r7, #28]
 80057bc:	e841 2300 	strex	r3, r2, [r1]
 80057c0:	617b      	str	r3, [r7, #20]
   return(result);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e4      	bne.n	8005792 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057d2:	4619      	mov	r1, r3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f87f 	bl	80058d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057da:	e063      	b.n	80058a4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00e      	beq.n	8005806 <HAL_UART_IRQHandler+0x59e>
 80057e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80057fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 fc14 	bl	800702c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005804:	e051      	b.n	80058aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800580a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800580e:	2b00      	cmp	r3, #0
 8005810:	d014      	beq.n	800583c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800581a:	2b00      	cmp	r3, #0
 800581c:	d105      	bne.n	800582a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800581e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005822:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d008      	beq.n	800583c <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800582e:	2b00      	cmp	r3, #0
 8005830:	d03a      	beq.n	80058a8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	4798      	blx	r3
    }
    return;
 800583a:	e035      	b.n	80058a8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800583c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d009      	beq.n	800585c <HAL_UART_IRQHandler+0x5f4>
 8005848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800584c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fe99 	bl	800658c <UART_EndTransmit_IT>
    return;
 800585a:	e026      	b.n	80058aa <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800585c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005860:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d009      	beq.n	800587c <HAL_UART_IRQHandler+0x614>
 8005868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800586c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f001 fbed 	bl	8007054 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800587a:	e016      	b.n	80058aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800587c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005880:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d010      	beq.n	80058aa <HAL_UART_IRQHandler+0x642>
 8005888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800588c:	2b00      	cmp	r3, #0
 800588e:	da0c      	bge.n	80058aa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f001 fbd5 	bl	8007040 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005896:	e008      	b.n	80058aa <HAL_UART_IRQHandler+0x642>
      return;
 8005898:	bf00      	nop
 800589a:	e006      	b.n	80058aa <HAL_UART_IRQHandler+0x642>
    return;
 800589c:	bf00      	nop
 800589e:	e004      	b.n	80058aa <HAL_UART_IRQHandler+0x642>
      return;
 80058a0:	bf00      	nop
 80058a2:	e002      	b.n	80058aa <HAL_UART_IRQHandler+0x642>
      return;
 80058a4:	bf00      	nop
 80058a6:	e000      	b.n	80058aa <HAL_UART_IRQHandler+0x642>
    return;
 80058a8:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80058aa:	37e8      	adds	r7, #232	@ 0xe8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058f4:	b08c      	sub	sp, #48	@ 0x30
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	431a      	orrs	r2, r3
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	431a      	orrs	r2, r3
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	4313      	orrs	r3, r2
 8005916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	4baa      	ldr	r3, [pc, #680]	@ (8005bc8 <UART_SetConfig+0x2d8>)
 8005920:	4013      	ands	r3, r2
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005928:	430b      	orrs	r3, r1
 800592a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a9f      	ldr	r2, [pc, #636]	@ (8005bcc <UART_SetConfig+0x2dc>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d004      	beq.n	800595c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005958:	4313      	orrs	r3, r2
 800595a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005966:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	6812      	ldr	r2, [r2, #0]
 800596e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005970:	430b      	orrs	r3, r1
 8005972:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597a:	f023 010f 	bic.w	r1, r3, #15
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a90      	ldr	r2, [pc, #576]	@ (8005bd0 <UART_SetConfig+0x2e0>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d125      	bne.n	80059e0 <UART_SetConfig+0xf0>
 8005994:	4b8f      	ldr	r3, [pc, #572]	@ (8005bd4 <UART_SetConfig+0x2e4>)
 8005996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d81a      	bhi.n	80059d8 <UART_SetConfig+0xe8>
 80059a2:	a201      	add	r2, pc, #4	@ (adr r2, 80059a8 <UART_SetConfig+0xb8>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059b9 	.word	0x080059b9
 80059ac:	080059c9 	.word	0x080059c9
 80059b0:	080059c1 	.word	0x080059c1
 80059b4:	080059d1 	.word	0x080059d1
 80059b8:	2301      	movs	r3, #1
 80059ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059be:	e116      	b.n	8005bee <UART_SetConfig+0x2fe>
 80059c0:	2302      	movs	r3, #2
 80059c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059c6:	e112      	b.n	8005bee <UART_SetConfig+0x2fe>
 80059c8:	2304      	movs	r3, #4
 80059ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ce:	e10e      	b.n	8005bee <UART_SetConfig+0x2fe>
 80059d0:	2308      	movs	r3, #8
 80059d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059d6:	e10a      	b.n	8005bee <UART_SetConfig+0x2fe>
 80059d8:	2310      	movs	r3, #16
 80059da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059de:	e106      	b.n	8005bee <UART_SetConfig+0x2fe>
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a7c      	ldr	r2, [pc, #496]	@ (8005bd8 <UART_SetConfig+0x2e8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d138      	bne.n	8005a5c <UART_SetConfig+0x16c>
 80059ea:	4b7a      	ldr	r3, [pc, #488]	@ (8005bd4 <UART_SetConfig+0x2e4>)
 80059ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f0:	f003 030c 	and.w	r3, r3, #12
 80059f4:	2b0c      	cmp	r3, #12
 80059f6:	d82d      	bhi.n	8005a54 <UART_SetConfig+0x164>
 80059f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005a00 <UART_SetConfig+0x110>)
 80059fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fe:	bf00      	nop
 8005a00:	08005a35 	.word	0x08005a35
 8005a04:	08005a55 	.word	0x08005a55
 8005a08:	08005a55 	.word	0x08005a55
 8005a0c:	08005a55 	.word	0x08005a55
 8005a10:	08005a45 	.word	0x08005a45
 8005a14:	08005a55 	.word	0x08005a55
 8005a18:	08005a55 	.word	0x08005a55
 8005a1c:	08005a55 	.word	0x08005a55
 8005a20:	08005a3d 	.word	0x08005a3d
 8005a24:	08005a55 	.word	0x08005a55
 8005a28:	08005a55 	.word	0x08005a55
 8005a2c:	08005a55 	.word	0x08005a55
 8005a30:	08005a4d 	.word	0x08005a4d
 8005a34:	2300      	movs	r3, #0
 8005a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a3a:	e0d8      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a42:	e0d4      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005a44:	2304      	movs	r3, #4
 8005a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a4a:	e0d0      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005a4c:	2308      	movs	r3, #8
 8005a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a52:	e0cc      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005a54:	2310      	movs	r3, #16
 8005a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a5a:	e0c8      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a5e      	ldr	r2, [pc, #376]	@ (8005bdc <UART_SetConfig+0x2ec>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d125      	bne.n	8005ab2 <UART_SetConfig+0x1c2>
 8005a66:	4b5b      	ldr	r3, [pc, #364]	@ (8005bd4 <UART_SetConfig+0x2e4>)
 8005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a6c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a70:	2b30      	cmp	r3, #48	@ 0x30
 8005a72:	d016      	beq.n	8005aa2 <UART_SetConfig+0x1b2>
 8005a74:	2b30      	cmp	r3, #48	@ 0x30
 8005a76:	d818      	bhi.n	8005aaa <UART_SetConfig+0x1ba>
 8005a78:	2b20      	cmp	r3, #32
 8005a7a:	d00a      	beq.n	8005a92 <UART_SetConfig+0x1a2>
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	d814      	bhi.n	8005aaa <UART_SetConfig+0x1ba>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <UART_SetConfig+0x19a>
 8005a84:	2b10      	cmp	r3, #16
 8005a86:	d008      	beq.n	8005a9a <UART_SetConfig+0x1aa>
 8005a88:	e00f      	b.n	8005aaa <UART_SetConfig+0x1ba>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a90:	e0ad      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005a92:	2302      	movs	r3, #2
 8005a94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a98:	e0a9      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005a9a:	2304      	movs	r3, #4
 8005a9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aa0:	e0a5      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005aa2:	2308      	movs	r3, #8
 8005aa4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aa8:	e0a1      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005aaa:	2310      	movs	r3, #16
 8005aac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ab0:	e09d      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a4a      	ldr	r2, [pc, #296]	@ (8005be0 <UART_SetConfig+0x2f0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d125      	bne.n	8005b08 <UART_SetConfig+0x218>
 8005abc:	4b45      	ldr	r3, [pc, #276]	@ (8005bd4 <UART_SetConfig+0x2e4>)
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005ac6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ac8:	d016      	beq.n	8005af8 <UART_SetConfig+0x208>
 8005aca:	2bc0      	cmp	r3, #192	@ 0xc0
 8005acc:	d818      	bhi.n	8005b00 <UART_SetConfig+0x210>
 8005ace:	2b80      	cmp	r3, #128	@ 0x80
 8005ad0:	d00a      	beq.n	8005ae8 <UART_SetConfig+0x1f8>
 8005ad2:	2b80      	cmp	r3, #128	@ 0x80
 8005ad4:	d814      	bhi.n	8005b00 <UART_SetConfig+0x210>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <UART_SetConfig+0x1f0>
 8005ada:	2b40      	cmp	r3, #64	@ 0x40
 8005adc:	d008      	beq.n	8005af0 <UART_SetConfig+0x200>
 8005ade:	e00f      	b.n	8005b00 <UART_SetConfig+0x210>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ae6:	e082      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aee:	e07e      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005af0:	2304      	movs	r3, #4
 8005af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005af6:	e07a      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005af8:	2308      	movs	r3, #8
 8005afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005afe:	e076      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005b00:	2310      	movs	r3, #16
 8005b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b06:	e072      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a35      	ldr	r2, [pc, #212]	@ (8005be4 <UART_SetConfig+0x2f4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d12a      	bne.n	8005b68 <UART_SetConfig+0x278>
 8005b12:	4b30      	ldr	r3, [pc, #192]	@ (8005bd4 <UART_SetConfig+0x2e4>)
 8005b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b20:	d01a      	beq.n	8005b58 <UART_SetConfig+0x268>
 8005b22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b26:	d81b      	bhi.n	8005b60 <UART_SetConfig+0x270>
 8005b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b2c:	d00c      	beq.n	8005b48 <UART_SetConfig+0x258>
 8005b2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b32:	d815      	bhi.n	8005b60 <UART_SetConfig+0x270>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <UART_SetConfig+0x250>
 8005b38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b3c:	d008      	beq.n	8005b50 <UART_SetConfig+0x260>
 8005b3e:	e00f      	b.n	8005b60 <UART_SetConfig+0x270>
 8005b40:	2300      	movs	r3, #0
 8005b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b46:	e052      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b4e:	e04e      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005b50:	2304      	movs	r3, #4
 8005b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b56:	e04a      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005b58:	2308      	movs	r3, #8
 8005b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b5e:	e046      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005b60:	2310      	movs	r3, #16
 8005b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b66:	e042      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a17      	ldr	r2, [pc, #92]	@ (8005bcc <UART_SetConfig+0x2dc>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d13a      	bne.n	8005be8 <UART_SetConfig+0x2f8>
 8005b72:	4b18      	ldr	r3, [pc, #96]	@ (8005bd4 <UART_SetConfig+0x2e4>)
 8005b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b80:	d01a      	beq.n	8005bb8 <UART_SetConfig+0x2c8>
 8005b82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b86:	d81b      	bhi.n	8005bc0 <UART_SetConfig+0x2d0>
 8005b88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b8c:	d00c      	beq.n	8005ba8 <UART_SetConfig+0x2b8>
 8005b8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b92:	d815      	bhi.n	8005bc0 <UART_SetConfig+0x2d0>
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <UART_SetConfig+0x2b0>
 8005b98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b9c:	d008      	beq.n	8005bb0 <UART_SetConfig+0x2c0>
 8005b9e:	e00f      	b.n	8005bc0 <UART_SetConfig+0x2d0>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ba6:	e022      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bae:	e01e      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bb6:	e01a      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005bb8:	2308      	movs	r3, #8
 8005bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bbe:	e016      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bc6:	e012      	b.n	8005bee <UART_SetConfig+0x2fe>
 8005bc8:	cfff69f3 	.word	0xcfff69f3
 8005bcc:	40008000 	.word	0x40008000
 8005bd0:	40013800 	.word	0x40013800
 8005bd4:	40021000 	.word	0x40021000
 8005bd8:	40004400 	.word	0x40004400
 8005bdc:	40004800 	.word	0x40004800
 8005be0:	40004c00 	.word	0x40004c00
 8005be4:	40005000 	.word	0x40005000
 8005be8:	2310      	movs	r3, #16
 8005bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4aae      	ldr	r2, [pc, #696]	@ (8005eac <UART_SetConfig+0x5bc>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	f040 8097 	bne.w	8005d28 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bfa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d823      	bhi.n	8005c4a <UART_SetConfig+0x35a>
 8005c02:	a201      	add	r2, pc, #4	@ (adr r2, 8005c08 <UART_SetConfig+0x318>)
 8005c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c08:	08005c2d 	.word	0x08005c2d
 8005c0c:	08005c4b 	.word	0x08005c4b
 8005c10:	08005c35 	.word	0x08005c35
 8005c14:	08005c4b 	.word	0x08005c4b
 8005c18:	08005c3b 	.word	0x08005c3b
 8005c1c:	08005c4b 	.word	0x08005c4b
 8005c20:	08005c4b 	.word	0x08005c4b
 8005c24:	08005c4b 	.word	0x08005c4b
 8005c28:	08005c43 	.word	0x08005c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c2c:	f7fd fff8 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 8005c30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c32:	e010      	b.n	8005c56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c34:	4b9e      	ldr	r3, [pc, #632]	@ (8005eb0 <UART_SetConfig+0x5c0>)
 8005c36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c38:	e00d      	b.n	8005c56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c3a:	f7fd ff59 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8005c3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c40:	e009      	b.n	8005c56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c48:	e005      	b.n	8005c56 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 8130 	beq.w	8005ebe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c62:	4a94      	ldr	r2, [pc, #592]	@ (8005eb4 <UART_SetConfig+0x5c4>)
 8005c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	4613      	mov	r3, r2
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	4413      	add	r3, r2
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d305      	bcc.n	8005c8e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d903      	bls.n	8005c96 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c94:	e113      	b.n	8005ebe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	2200      	movs	r2, #0
 8005c9a:	60bb      	str	r3, [r7, #8]
 8005c9c:	60fa      	str	r2, [r7, #12]
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca2:	4a84      	ldr	r2, [pc, #528]	@ (8005eb4 <UART_SetConfig+0x5c4>)
 8005ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2200      	movs	r2, #0
 8005cac:	603b      	str	r3, [r7, #0]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005cb8:	f7fa ff5e 	bl	8000b78 <__aeabi_uldivmod>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	020b      	lsls	r3, r1, #8
 8005cce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005cd2:	0202      	lsls	r2, r0, #8
 8005cd4:	6979      	ldr	r1, [r7, #20]
 8005cd6:	6849      	ldr	r1, [r1, #4]
 8005cd8:	0849      	lsrs	r1, r1, #1
 8005cda:	2000      	movs	r0, #0
 8005cdc:	460c      	mov	r4, r1
 8005cde:	4605      	mov	r5, r0
 8005ce0:	eb12 0804 	adds.w	r8, r2, r4
 8005ce4:	eb43 0905 	adc.w	r9, r3, r5
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	469a      	mov	sl, r3
 8005cf0:	4693      	mov	fp, r2
 8005cf2:	4652      	mov	r2, sl
 8005cf4:	465b      	mov	r3, fp
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	4649      	mov	r1, r9
 8005cfa:	f7fa ff3d 	bl	8000b78 <__aeabi_uldivmod>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4613      	mov	r3, r2
 8005d04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d0c:	d308      	bcc.n	8005d20 <UART_SetConfig+0x430>
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d14:	d204      	bcs.n	8005d20 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6a3a      	ldr	r2, [r7, #32]
 8005d1c:	60da      	str	r2, [r3, #12]
 8005d1e:	e0ce      	b.n	8005ebe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d26:	e0ca      	b.n	8005ebe <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d30:	d166      	bne.n	8005e00 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005d32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d827      	bhi.n	8005d8a <UART_SetConfig+0x49a>
 8005d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d40 <UART_SetConfig+0x450>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005d65 	.word	0x08005d65
 8005d44:	08005d6d 	.word	0x08005d6d
 8005d48:	08005d75 	.word	0x08005d75
 8005d4c:	08005d8b 	.word	0x08005d8b
 8005d50:	08005d7b 	.word	0x08005d7b
 8005d54:	08005d8b 	.word	0x08005d8b
 8005d58:	08005d8b 	.word	0x08005d8b
 8005d5c:	08005d8b 	.word	0x08005d8b
 8005d60:	08005d83 	.word	0x08005d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d64:	f7fd ff5c 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 8005d68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d6a:	e014      	b.n	8005d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d6c:	f7fd ff6e 	bl	8003c4c <HAL_RCC_GetPCLK2Freq>
 8005d70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d72:	e010      	b.n	8005d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d74:	4b4e      	ldr	r3, [pc, #312]	@ (8005eb0 <UART_SetConfig+0x5c0>)
 8005d76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d78:	e00d      	b.n	8005d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d7a:	f7fd feb9 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8005d7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d80:	e009      	b.n	8005d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d88:	e005      	b.n	8005d96 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005d94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 8090 	beq.w	8005ebe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da2:	4a44      	ldr	r2, [pc, #272]	@ (8005eb4 <UART_SetConfig+0x5c4>)
 8005da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005da8:	461a      	mov	r2, r3
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8005db0:	005a      	lsls	r2, r3, #1
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	085b      	lsrs	r3, r3, #1
 8005db8:	441a      	add	r2, r3
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	2b0f      	cmp	r3, #15
 8005dc8:	d916      	bls.n	8005df8 <UART_SetConfig+0x508>
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd0:	d212      	bcs.n	8005df8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f023 030f 	bic.w	r3, r3, #15
 8005dda:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	085b      	lsrs	r3, r3, #1
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	8bfb      	ldrh	r3, [r7, #30]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	8bfa      	ldrh	r2, [r7, #30]
 8005df4:	60da      	str	r2, [r3, #12]
 8005df6:	e062      	b.n	8005ebe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005dfe:	e05e      	b.n	8005ebe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e00:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d828      	bhi.n	8005e5a <UART_SetConfig+0x56a>
 8005e08:	a201      	add	r2, pc, #4	@ (adr r2, 8005e10 <UART_SetConfig+0x520>)
 8005e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0e:	bf00      	nop
 8005e10:	08005e35 	.word	0x08005e35
 8005e14:	08005e3d 	.word	0x08005e3d
 8005e18:	08005e45 	.word	0x08005e45
 8005e1c:	08005e5b 	.word	0x08005e5b
 8005e20:	08005e4b 	.word	0x08005e4b
 8005e24:	08005e5b 	.word	0x08005e5b
 8005e28:	08005e5b 	.word	0x08005e5b
 8005e2c:	08005e5b 	.word	0x08005e5b
 8005e30:	08005e53 	.word	0x08005e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e34:	f7fd fef4 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 8005e38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e3a:	e014      	b.n	8005e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e3c:	f7fd ff06 	bl	8003c4c <HAL_RCC_GetPCLK2Freq>
 8005e40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e42:	e010      	b.n	8005e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e44:	4b1a      	ldr	r3, [pc, #104]	@ (8005eb0 <UART_SetConfig+0x5c0>)
 8005e46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e48:	e00d      	b.n	8005e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e4a:	f7fd fe51 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8005e4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e50:	e009      	b.n	8005e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e58:	e005      	b.n	8005e66 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e64:	bf00      	nop
    }

    if (pclk != 0U)
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d028      	beq.n	8005ebe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e70:	4a10      	ldr	r2, [pc, #64]	@ (8005eb4 <UART_SetConfig+0x5c4>)
 8005e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e76:	461a      	mov	r2, r3
 8005e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	085b      	lsrs	r3, r3, #1
 8005e84:	441a      	add	r2, r3
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	2b0f      	cmp	r3, #15
 8005e94:	d910      	bls.n	8005eb8 <UART_SetConfig+0x5c8>
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e9c:	d20c      	bcs.n	8005eb8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	60da      	str	r2, [r3, #12]
 8005ea8:	e009      	b.n	8005ebe <UART_SetConfig+0x5ce>
 8005eaa:	bf00      	nop
 8005eac:	40008000 	.word	0x40008000
 8005eb0:	00f42400 	.word	0x00f42400
 8005eb4:	0800a400 	.word	0x0800a400
      }
      else
      {
        ret = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005eda:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3730      	adds	r7, #48	@ 0x30
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005ee8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00a      	beq.n	8005f12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5a:	f003 0304 	and.w	r3, r3, #4
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00a      	beq.n	8005f9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01a      	beq.n	8005ffe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fe6:	d10a      	bne.n	8005ffe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	605a      	str	r2, [r3, #4]
  }
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b098      	sub	sp, #96	@ 0x60
 8006030:	af02      	add	r7, sp, #8
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800603c:	f7fc fa66 	bl	800250c <HAL_GetTick>
 8006040:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0308 	and.w	r3, r3, #8
 800604c:	2b08      	cmp	r3, #8
 800604e:	d12f      	bne.n	80060b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006050:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006058:	2200      	movs	r2, #0
 800605a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f88e 	bl	8006180 <UART_WaitOnFlagUntilTimeout>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d022      	beq.n	80060b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800607a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800607e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006088:	647b      	str	r3, [r7, #68]	@ 0x44
 800608a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800608e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e6      	bne.n	800606a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e063      	b.n	8006178 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0304 	and.w	r3, r3, #4
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d149      	bne.n	8006152 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c6:	2200      	movs	r2, #0
 80060c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f857 	bl	8006180 <UART_WaitOnFlagUntilTimeout>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d03c      	beq.n	8006152 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	e853 3f00 	ldrex	r3, [r3]
 80060e4:	623b      	str	r3, [r7, #32]
   return(result);
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80060f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060fe:	e841 2300 	strex	r3, r2, [r1]
 8006102:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1e6      	bne.n	80060d8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3308      	adds	r3, #8
 8006110:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	e853 3f00 	ldrex	r3, [r3]
 8006118:	60fb      	str	r3, [r7, #12]
   return(result);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f023 0301 	bic.w	r3, r3, #1
 8006120:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3308      	adds	r3, #8
 8006128:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800612a:	61fa      	str	r2, [r7, #28]
 800612c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612e:	69b9      	ldr	r1, [r7, #24]
 8006130:	69fa      	ldr	r2, [r7, #28]
 8006132:	e841 2300 	strex	r3, r2, [r1]
 8006136:	617b      	str	r3, [r7, #20]
   return(result);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1e5      	bne.n	800610a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2220      	movs	r2, #32
 8006142:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e012      	b.n	8006178 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2220      	movs	r2, #32
 8006156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3758      	adds	r7, #88	@ 0x58
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	4613      	mov	r3, r2
 800618e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006190:	e049      	b.n	8006226 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006198:	d045      	beq.n	8006226 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800619a:	f7fc f9b7 	bl	800250c <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d302      	bcc.n	80061b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e048      	b.n	8006246 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0304 	and.w	r3, r3, #4
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d031      	beq.n	8006226 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	f003 0308 	and.w	r3, r3, #8
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d110      	bne.n	80061f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2208      	movs	r2, #8
 80061d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 f95b 	bl	8006494 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2208      	movs	r2, #8
 80061e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e029      	b.n	8006246 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006200:	d111      	bne.n	8006226 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800620a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 f941 	bl	8006494 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2220      	movs	r2, #32
 8006216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e00f      	b.n	8006246 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69da      	ldr	r2, [r3, #28]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4013      	ands	r3, r2
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	429a      	cmp	r2, r3
 8006234:	bf0c      	ite	eq
 8006236:	2301      	moveq	r3, #1
 8006238:	2300      	movne	r3, #0
 800623a:	b2db      	uxtb	r3, r3
 800623c:	461a      	mov	r2, r3
 800623e:	79fb      	ldrb	r3, [r7, #7]
 8006240:	429a      	cmp	r2, r3
 8006242:	d0a6      	beq.n	8006192 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006250:	b480      	push	{r7}
 8006252:	b0a3      	sub	sp, #140	@ 0x8c
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	4613      	mov	r3, r2
 800625c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	88fa      	ldrh	r2, [r7, #6]
 8006268:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	88fa      	ldrh	r2, [r7, #6]
 8006270:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006282:	d10e      	bne.n	80062a2 <UART_Start_Receive_IT+0x52>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d105      	bne.n	8006298 <UART_Start_Receive_IT+0x48>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006292:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006296:	e02d      	b.n	80062f4 <UART_Start_Receive_IT+0xa4>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	22ff      	movs	r2, #255	@ 0xff
 800629c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80062a0:	e028      	b.n	80062f4 <UART_Start_Receive_IT+0xa4>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10d      	bne.n	80062c6 <UART_Start_Receive_IT+0x76>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d104      	bne.n	80062bc <UART_Start_Receive_IT+0x6c>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	22ff      	movs	r2, #255	@ 0xff
 80062b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80062ba:	e01b      	b.n	80062f4 <UART_Start_Receive_IT+0xa4>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	227f      	movs	r2, #127	@ 0x7f
 80062c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80062c4:	e016      	b.n	80062f4 <UART_Start_Receive_IT+0xa4>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062ce:	d10d      	bne.n	80062ec <UART_Start_Receive_IT+0x9c>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d104      	bne.n	80062e2 <UART_Start_Receive_IT+0x92>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	227f      	movs	r2, #127	@ 0x7f
 80062dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80062e0:	e008      	b.n	80062f4 <UART_Start_Receive_IT+0xa4>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	223f      	movs	r2, #63	@ 0x3f
 80062e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80062ea:	e003      	b.n	80062f4 <UART_Start_Receive_IT+0xa4>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2222      	movs	r2, #34	@ 0x22
 8006300:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3308      	adds	r3, #8
 800630a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006314:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006316:	f043 0301 	orr.w	r3, r3, #1
 800631a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3308      	adds	r3, #8
 8006324:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006328:	673a      	str	r2, [r7, #112]	@ 0x70
 800632a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800632e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006336:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e3      	bne.n	8006304 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006340:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006344:	d14f      	bne.n	80063e6 <UART_Start_Receive_IT+0x196>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800634c:	88fa      	ldrh	r2, [r7, #6]
 800634e:	429a      	cmp	r2, r3
 8006350:	d349      	bcc.n	80063e6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800635a:	d107      	bne.n	800636c <UART_Start_Receive_IT+0x11c>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d103      	bne.n	800636c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4a47      	ldr	r2, [pc, #284]	@ (8006484 <UART_Start_Receive_IT+0x234>)
 8006368:	675a      	str	r2, [r3, #116]	@ 0x74
 800636a:	e002      	b.n	8006372 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4a46      	ldr	r2, [pc, #280]	@ (8006488 <UART_Start_Receive_IT+0x238>)
 8006370:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d01a      	beq.n	80063b0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006382:	e853 3f00 	ldrex	r3, [r3]
 8006386:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006388:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800638a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800638e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	461a      	mov	r2, r3
 8006398:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800639c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800639e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80063a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80063a4:	e841 2300 	strex	r3, r2, [r1]
 80063a8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80063aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1e4      	bne.n	800637a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3308      	adds	r3, #8
 80063b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ba:	e853 3f00 	ldrex	r3, [r3]
 80063be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3308      	adds	r3, #8
 80063ce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80063d0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80063d2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80063d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063d8:	e841 2300 	strex	r3, r2, [r1]
 80063dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80063de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1e5      	bne.n	80063b0 <UART_Start_Receive_IT+0x160>
 80063e4:	e046      	b.n	8006474 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ee:	d107      	bne.n	8006400 <UART_Start_Receive_IT+0x1b0>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d103      	bne.n	8006400 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4a24      	ldr	r2, [pc, #144]	@ (800648c <UART_Start_Receive_IT+0x23c>)
 80063fc:	675a      	str	r2, [r3, #116]	@ 0x74
 80063fe:	e002      	b.n	8006406 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4a23      	ldr	r2, [pc, #140]	@ (8006490 <UART_Start_Receive_IT+0x240>)
 8006404:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d019      	beq.n	8006442 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800641c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006422:	677b      	str	r3, [r7, #116]	@ 0x74
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800642c:	637b      	str	r3, [r7, #52]	@ 0x34
 800642e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006432:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800643a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e6      	bne.n	800640e <UART_Start_Receive_IT+0x1be>
 8006440:	e018      	b.n	8006474 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	e853 3f00 	ldrex	r3, [r3]
 800644e:	613b      	str	r3, [r7, #16]
   return(result);
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	f043 0320 	orr.w	r3, r3, #32
 8006456:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	461a      	mov	r2, r3
 800645e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006460:	623b      	str	r3, [r7, #32]
 8006462:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006464:	69f9      	ldr	r1, [r7, #28]
 8006466:	6a3a      	ldr	r2, [r7, #32]
 8006468:	e841 2300 	strex	r3, r2, [r1]
 800646c:	61bb      	str	r3, [r7, #24]
   return(result);
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1e6      	bne.n	8006442 <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	378c      	adds	r7, #140	@ 0x8c
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	08006cc1 	.word	0x08006cc1
 8006488:	0800695d 	.word	0x0800695d
 800648c:	080067a1 	.word	0x080067a1
 8006490:	080065e5 	.word	0x080065e5

08006494 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006494:	b480      	push	{r7}
 8006496:	b095      	sub	sp, #84	@ 0x54
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	461a      	mov	r2, r3
 80064b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80064bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064c2:	e841 2300 	strex	r3, r2, [r1]
 80064c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1e6      	bne.n	800649c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3308      	adds	r3, #8
 80064d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	e853 3f00 	ldrex	r3, [r3]
 80064dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064e4:	f023 0301 	bic.w	r3, r3, #1
 80064e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3308      	adds	r3, #8
 80064f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e3      	bne.n	80064ce <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800650a:	2b01      	cmp	r3, #1
 800650c:	d118      	bne.n	8006540 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	e853 3f00 	ldrex	r3, [r3]
 800651a:	60bb      	str	r3, [r7, #8]
   return(result);
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f023 0310 	bic.w	r3, r3, #16
 8006522:	647b      	str	r3, [r7, #68]	@ 0x44
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	461a      	mov	r2, r3
 800652a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006530:	6979      	ldr	r1, [r7, #20]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	e841 2300 	strex	r3, r2, [r1]
 8006538:	613b      	str	r3, [r7, #16]
   return(result);
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1e6      	bne.n	800650e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2220      	movs	r2, #32
 8006544:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006554:	bf00      	nop
 8006556:	3754      	adds	r7, #84	@ 0x54
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f7ff f9a0 	bl	80058c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006584:	bf00      	nop
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b088      	sub	sp, #32
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065a8:	61fb      	str	r3, [r7, #28]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	61bb      	str	r3, [r7, #24]
 80065b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	6979      	ldr	r1, [r7, #20]
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	613b      	str	r3, [r7, #16]
   return(result);
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e6      	bne.n	8006594 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7ff f96b 	bl	80058b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065da:	bf00      	nop
 80065dc:	3720      	adds	r7, #32
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b09c      	sub	sp, #112	@ 0x70
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80065f2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065fc:	2b22      	cmp	r3, #34	@ 0x22
 80065fe:	f040 80be 	bne.w	800677e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006608:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800660c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006610:	b2d9      	uxtb	r1, r3
 8006612:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006616:	b2da      	uxtb	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800661c:	400a      	ands	r2, r1
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006632:	b29b      	uxth	r3, r3
 8006634:	3b01      	subs	r3, #1
 8006636:	b29a      	uxth	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	f040 80a3 	bne.w	8006792 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800665a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800665c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006660:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800666a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800666c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006670:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e6      	bne.n	800664c <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3308      	adds	r3, #8
 8006684:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800668e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006690:	f023 0301 	bic.w	r3, r3, #1
 8006694:	667b      	str	r3, [r7, #100]	@ 0x64
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3308      	adds	r3, #8
 800669c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800669e:	647a      	str	r2, [r7, #68]	@ 0x44
 80066a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066a6:	e841 2300 	strex	r3, r2, [r1]
 80066aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1e5      	bne.n	800667e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a34      	ldr	r2, [pc, #208]	@ (800679c <UART_RxISR_8BIT+0x1b8>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d01f      	beq.n	8006710 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d018      	beq.n	8006710 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e6:	e853 3f00 	ldrex	r3, [r3]
 80066ea:	623b      	str	r3, [r7, #32]
   return(result);
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80066f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	461a      	mov	r2, r3
 80066fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80066fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006704:	e841 2300 	strex	r3, r2, [r1]
 8006708:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800670a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e6      	bne.n	80066de <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006714:	2b01      	cmp	r3, #1
 8006716:	d12e      	bne.n	8006776 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	e853 3f00 	ldrex	r3, [r3]
 800672a:	60fb      	str	r3, [r7, #12]
   return(result);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 0310 	bic.w	r3, r3, #16
 8006732:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	461a      	mov	r2, r3
 800673a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800673c:	61fb      	str	r3, [r7, #28]
 800673e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	69b9      	ldr	r1, [r7, #24]
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	e841 2300 	strex	r3, r2, [r1]
 8006748:	617b      	str	r3, [r7, #20]
   return(result);
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e6      	bne.n	800671e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	f003 0310 	and.w	r3, r3, #16
 800675a:	2b10      	cmp	r3, #16
 800675c:	d103      	bne.n	8006766 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2210      	movs	r2, #16
 8006764:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff f8b2 	bl	80058d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006774:	e00d      	b.n	8006792 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fb faee 	bl	8001d58 <HAL_UART_RxCpltCallback>
}
 800677c:	e009      	b.n	8006792 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	8b1b      	ldrh	r3, [r3, #24]
 8006784:	b29a      	uxth	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0208 	orr.w	r2, r2, #8
 800678e:	b292      	uxth	r2, r2
 8006790:	831a      	strh	r2, [r3, #24]
}
 8006792:	bf00      	nop
 8006794:	3770      	adds	r7, #112	@ 0x70
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	40008000 	.word	0x40008000

080067a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b09c      	sub	sp, #112	@ 0x70
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80067ae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067b8:	2b22      	cmp	r3, #34	@ 0x22
 80067ba:	f040 80be 	bne.w	800693a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80067c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80067ce:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80067d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80067d6:	4013      	ands	r3, r2
 80067d8:	b29a      	uxth	r2, r3
 80067da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e2:	1c9a      	adds	r2, r3, #2
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006800:	b29b      	uxth	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	f040 80a3 	bne.w	800694e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006810:	e853 3f00 	ldrex	r3, [r3]
 8006814:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006818:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800681c:	667b      	str	r3, [r7, #100]	@ 0x64
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006826:	657b      	str	r3, [r7, #84]	@ 0x54
 8006828:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800682c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800682e:	e841 2300 	strex	r3, r2, [r1]
 8006832:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1e6      	bne.n	8006808 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3308      	adds	r3, #8
 8006840:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	f023 0301 	bic.w	r3, r3, #1
 8006850:	663b      	str	r3, [r7, #96]	@ 0x60
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3308      	adds	r3, #8
 8006858:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800685a:	643a      	str	r2, [r7, #64]	@ 0x40
 800685c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006860:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e5      	bne.n	800683a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a34      	ldr	r2, [pc, #208]	@ (8006958 <UART_RxISR_16BIT+0x1b8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d01f      	beq.n	80068cc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d018      	beq.n	80068cc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	461a      	mov	r2, r3
 80068b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068ba:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068c0:	e841 2300 	strex	r3, r2, [r1]
 80068c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e6      	bne.n	800689a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d12e      	bne.n	8006932 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f023 0310 	bic.w	r3, r3, #16
 80068ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	461a      	mov	r2, r3
 80068f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068f8:	61bb      	str	r3, [r7, #24]
 80068fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fc:	6979      	ldr	r1, [r7, #20]
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	613b      	str	r3, [r7, #16]
   return(result);
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e6      	bne.n	80068da <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	f003 0310 	and.w	r3, r3, #16
 8006916:	2b10      	cmp	r3, #16
 8006918:	d103      	bne.n	8006922 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2210      	movs	r2, #16
 8006920:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006928:	4619      	mov	r1, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7fe ffd4 	bl	80058d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006930:	e00d      	b.n	800694e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7fb fa10 	bl	8001d58 <HAL_UART_RxCpltCallback>
}
 8006938:	e009      	b.n	800694e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	8b1b      	ldrh	r3, [r3, #24]
 8006940:	b29a      	uxth	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f042 0208 	orr.w	r2, r2, #8
 800694a:	b292      	uxth	r2, r2
 800694c:	831a      	strh	r2, [r3, #24]
}
 800694e:	bf00      	nop
 8006950:	3770      	adds	r7, #112	@ 0x70
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	40008000 	.word	0x40008000

0800695c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b0ac      	sub	sp, #176	@ 0xb0
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800696a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006992:	2b22      	cmp	r3, #34	@ 0x22
 8006994:	f040 8182 	bne.w	8006c9c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800699e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80069a2:	e125      	b.n	8006bf0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80069aa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069ae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80069b2:	b2d9      	uxtb	r1, r3
 80069b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069be:	400a      	ands	r2, r1
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29a      	uxth	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80069ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069ee:	f003 0307 	and.w	r3, r3, #7
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d053      	beq.n	8006a9e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d011      	beq.n	8006a26 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006a02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00b      	beq.n	8006a26 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2201      	movs	r2, #1
 8006a14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a1c:	f043 0201 	orr.w	r2, r3, #1
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d011      	beq.n	8006a56 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006a32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00b      	beq.n	8006a56 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2202      	movs	r2, #2
 8006a44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a4c:	f043 0204 	orr.w	r2, r3, #4
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a5a:	f003 0304 	and.w	r3, r3, #4
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d011      	beq.n	8006a86 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006a62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00b      	beq.n	8006a86 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2204      	movs	r2, #4
 8006a74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a7c:	f043 0202 	orr.w	r2, r3, #2
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d006      	beq.n	8006a9e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7fe ff17 	bl	80058c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f040 80a2 	bne.w	8006bf0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006aba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ac0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ad0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006ad4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006adc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1e4      	bne.n	8006aac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006af2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006af4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006af8:	f023 0301 	bic.w	r3, r3, #1
 8006afc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3308      	adds	r3, #8
 8006b06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b0a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006b0c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006b10:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006b18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e1      	bne.n	8006ae2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a60      	ldr	r2, [pc, #384]	@ (8006cb8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d021      	beq.n	8006b80 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01a      	beq.n	8006b80 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006b6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b6e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b70:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b74:	e841 2300 	strex	r3, r2, [r1]
 8006b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e4      	bne.n	8006b4a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d130      	bne.n	8006bea <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9e:	f023 0310 	bic.w	r3, r3, #16
 8006ba2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bb2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bb8:	e841 2300 	strex	r3, r2, [r1]
 8006bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e4      	bne.n	8006b8e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	f003 0310 	and.w	r3, r3, #16
 8006bce:	2b10      	cmp	r3, #16
 8006bd0:	d103      	bne.n	8006bda <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2210      	movs	r2, #16
 8006bd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006be0:	4619      	mov	r1, r3
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7fe fe78 	bl	80058d8 <HAL_UARTEx_RxEventCallback>
 8006be8:	e002      	b.n	8006bf0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7fb f8b4 	bl	8001d58 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006bf0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d006      	beq.n	8006c06 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bfc:	f003 0320 	and.w	r3, r3, #32
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f47f aecf 	bne.w	80069a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c0c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006c10:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d04b      	beq.n	8006cb0 <UART_RxISR_8BIT_FIFOEN+0x354>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006c1e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d244      	bcs.n	8006cb0 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3308      	adds	r3, #8
 8006c46:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006c4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e3      	bne.n	8006c26 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a16      	ldr	r2, [pc, #88]	@ (8006cbc <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006c62:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	e853 3f00 	ldrex	r3, [r3]
 8006c70:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	f043 0320 	orr.w	r3, r3, #32
 8006c78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	461a      	mov	r2, r3
 8006c82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006c86:	61bb      	str	r3, [r7, #24]
 8006c88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	6979      	ldr	r1, [r7, #20]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	613b      	str	r3, [r7, #16]
   return(result);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e4      	bne.n	8006c64 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c9a:	e009      	b.n	8006cb0 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	8b1b      	ldrh	r3, [r3, #24]
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f042 0208 	orr.w	r2, r2, #8
 8006cac:	b292      	uxth	r2, r2
 8006cae:	831a      	strh	r2, [r3, #24]
}
 8006cb0:	bf00      	nop
 8006cb2:	37b0      	adds	r7, #176	@ 0xb0
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	40008000 	.word	0x40008000
 8006cbc:	080065e5 	.word	0x080065e5

08006cc0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b0ae      	sub	sp, #184	@ 0xb8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006cce:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cf6:	2b22      	cmp	r3, #34	@ 0x22
 8006cf8:	f040 8186 	bne.w	8007008 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006d02:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d06:	e129      	b.n	8006f5c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006d0e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006d1a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006d1e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006d22:	4013      	ands	r3, r2
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d30:	1c9a      	adds	r2, r3, #2
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006d52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d053      	beq.n	8006e06 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d011      	beq.n	8006d8e <UART_RxISR_16BIT_FIFOEN+0xce>
 8006d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00b      	beq.n	8006d8e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d84:	f043 0201 	orr.w	r2, r3, #1
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d011      	beq.n	8006dbe <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006d9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00b      	beq.n	8006dbe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2202      	movs	r2, #2
 8006dac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006db4:	f043 0204 	orr.w	r2, r3, #4
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006dc2:	f003 0304 	and.w	r3, r3, #4
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d011      	beq.n	8006dee <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006dca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00b      	beq.n	8006dee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2204      	movs	r2, #4
 8006ddc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006de4:	f043 0202 	orr.w	r2, r3, #2
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d006      	beq.n	8006e06 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7fe fd63 	bl	80058c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f040 80a4 	bne.w	8006f5c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1e2      	bne.n	8006e14 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	3308      	adds	r3, #8
 8006e54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e58:	e853 3f00 	ldrex	r3, [r3]
 8006e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e64:	f023 0301 	bic.w	r3, r3, #1
 8006e68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3308      	adds	r3, #8
 8006e72:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006e76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e1      	bne.n	8006e4e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a60      	ldr	r2, [pc, #384]	@ (8007024 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d021      	beq.n	8006eec <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d01a      	beq.n	8006eec <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ebe:	e853 3f00 	ldrex	r3, [r3]
 8006ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ec4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ec6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006eca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006ed8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006eda:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ede:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ee6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e4      	bne.n	8006eb6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d130      	bne.n	8006f56 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f02:	e853 3f00 	ldrex	r3, [r3]
 8006f06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f0a:	f023 0310 	bic.w	r3, r3, #16
 8006f0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f24:	e841 2300 	strex	r3, r2, [r1]
 8006f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e4      	bne.n	8006efa <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	f003 0310 	and.w	r3, r3, #16
 8006f3a:	2b10      	cmp	r3, #16
 8006f3c:	d103      	bne.n	8006f46 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2210      	movs	r2, #16
 8006f44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7fe fcc2 	bl	80058d8 <HAL_UARTEx_RxEventCallback>
 8006f54:	e002      	b.n	8006f5c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7fa fefe 	bl	8001d58 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f5c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d006      	beq.n	8006f72 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006f64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006f68:	f003 0320 	and.w	r3, r3, #32
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f47f aecb 	bne.w	8006d08 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f78:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006f7c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d04b      	beq.n	800701c <UART_RxISR_16BIT_FIFOEN+0x35c>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006f8a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d244      	bcs.n	800701c <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3308      	adds	r3, #8
 8006f98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	e853 3f00 	ldrex	r3, [r3]
 8006fa0:	623b      	str	r3, [r7, #32]
   return(result);
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fa8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006fb6:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e3      	bne.n	8006f92 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a16      	ldr	r2, [pc, #88]	@ (8007028 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8006fce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f043 0320 	orr.w	r3, r3, #32
 8006fe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ff2:	61fb      	str	r3, [r7, #28]
 8006ff4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	69b9      	ldr	r1, [r7, #24]
 8006ff8:	69fa      	ldr	r2, [r7, #28]
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	617b      	str	r3, [r7, #20]
   return(result);
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e4      	bne.n	8006fd0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007006:	e009      	b.n	800701c <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	8b1b      	ldrh	r3, [r3, #24]
 800700e:	b29a      	uxth	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f042 0208 	orr.w	r2, r2, #8
 8007018:	b292      	uxth	r2, r2
 800701a:	831a      	strh	r2, [r3, #24]
}
 800701c:	bf00      	nop
 800701e:	37b8      	adds	r7, #184	@ 0xb8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	40008000 	.word	0x40008000
 8007028:	080067a1 	.word	0x080067a1

0800702c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007076:	2b01      	cmp	r3, #1
 8007078:	d101      	bne.n	800707e <HAL_UARTEx_DisableFifoMode+0x16>
 800707a:	2302      	movs	r3, #2
 800707c:	e027      	b.n	80070ce <HAL_UARTEx_DisableFifoMode+0x66>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2224      	movs	r2, #36	@ 0x24
 800708a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0201 	bic.w	r2, r2, #1
 80070a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80070ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2220      	movs	r2, #32
 80070c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d101      	bne.n	80070f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070ee:	2302      	movs	r3, #2
 80070f0:	e02d      	b.n	800714e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2224      	movs	r2, #36	@ 0x24
 80070fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0201 	bic.w	r2, r2, #1
 8007118:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f850 	bl	80071d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007166:	2b01      	cmp	r3, #1
 8007168:	d101      	bne.n	800716e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800716a:	2302      	movs	r3, #2
 800716c:	e02d      	b.n	80071ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2224      	movs	r2, #36	@ 0x24
 800717a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0201 	bic.w	r2, r2, #1
 8007194:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f812 	bl	80071d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d108      	bne.n	80071f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071f4:	e031      	b.n	800725a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071f6:	2308      	movs	r3, #8
 80071f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071fa:	2308      	movs	r3, #8
 80071fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	0e5b      	lsrs	r3, r3, #25
 8007206:	b2db      	uxtb	r3, r3
 8007208:	f003 0307 	and.w	r3, r3, #7
 800720c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	0f5b      	lsrs	r3, r3, #29
 8007216:	b2db      	uxtb	r3, r3
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800721e:	7bbb      	ldrb	r3, [r7, #14]
 8007220:	7b3a      	ldrb	r2, [r7, #12]
 8007222:	4911      	ldr	r1, [pc, #68]	@ (8007268 <UARTEx_SetNbDataToProcess+0x94>)
 8007224:	5c8a      	ldrb	r2, [r1, r2]
 8007226:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800722a:	7b3a      	ldrb	r2, [r7, #12]
 800722c:	490f      	ldr	r1, [pc, #60]	@ (800726c <UARTEx_SetNbDataToProcess+0x98>)
 800722e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007230:	fb93 f3f2 	sdiv	r3, r3, r2
 8007234:	b29a      	uxth	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	7b7a      	ldrb	r2, [r7, #13]
 8007240:	4909      	ldr	r1, [pc, #36]	@ (8007268 <UARTEx_SetNbDataToProcess+0x94>)
 8007242:	5c8a      	ldrb	r2, [r1, r2]
 8007244:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007248:	7b7a      	ldrb	r2, [r7, #13]
 800724a:	4908      	ldr	r1, [pc, #32]	@ (800726c <UARTEx_SetNbDataToProcess+0x98>)
 800724c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800724e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007252:	b29a      	uxth	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800725a:	bf00      	nop
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	0800a418 	.word	0x0800a418
 800726c:	0800a420 	.word	0x0800a420

08007270 <arm_abs_f32>:
 8007270:	b470      	push	{r4, r5, r6}
 8007272:	0896      	lsrs	r6, r2, #2
 8007274:	d025      	beq.n	80072c2 <arm_abs_f32+0x52>
 8007276:	f100 0410 	add.w	r4, r0, #16
 800727a:	f101 0310 	add.w	r3, r1, #16
 800727e:	4635      	mov	r5, r6
 8007280:	ed54 7a04 	vldr	s15, [r4, #-16]
 8007284:	eef0 7ae7 	vabs.f32	s15, s15
 8007288:	ed43 7a04 	vstr	s15, [r3, #-16]
 800728c:	ed54 7a03 	vldr	s15, [r4, #-12]
 8007290:	eef0 7ae7 	vabs.f32	s15, s15
 8007294:	ed43 7a03 	vstr	s15, [r3, #-12]
 8007298:	ed54 7a02 	vldr	s15, [r4, #-8]
 800729c:	eef0 7ae7 	vabs.f32	s15, s15
 80072a0:	ed43 7a02 	vstr	s15, [r3, #-8]
 80072a4:	ed54 7a01 	vldr	s15, [r4, #-4]
 80072a8:	3d01      	subs	r5, #1
 80072aa:	eef0 7ae7 	vabs.f32	s15, s15
 80072ae:	ed43 7a01 	vstr	s15, [r3, #-4]
 80072b2:	f104 0410 	add.w	r4, r4, #16
 80072b6:	f103 0310 	add.w	r3, r3, #16
 80072ba:	d1e1      	bne.n	8007280 <arm_abs_f32+0x10>
 80072bc:	0136      	lsls	r6, r6, #4
 80072be:	4430      	add	r0, r6
 80072c0:	4431      	add	r1, r6
 80072c2:	f012 0203 	ands.w	r2, r2, #3
 80072c6:	d015      	beq.n	80072f4 <arm_abs_f32+0x84>
 80072c8:	edd0 7a00 	vldr	s15, [r0]
 80072cc:	3a01      	subs	r2, #1
 80072ce:	eef0 7ae7 	vabs.f32	s15, s15
 80072d2:	edc1 7a00 	vstr	s15, [r1]
 80072d6:	d00d      	beq.n	80072f4 <arm_abs_f32+0x84>
 80072d8:	edd0 7a01 	vldr	s15, [r0, #4]
 80072dc:	2a01      	cmp	r2, #1
 80072de:	eef0 7ae7 	vabs.f32	s15, s15
 80072e2:	edc1 7a01 	vstr	s15, [r1, #4]
 80072e6:	d005      	beq.n	80072f4 <arm_abs_f32+0x84>
 80072e8:	edd0 7a02 	vldr	s15, [r0, #8]
 80072ec:	eef0 7ae7 	vabs.f32	s15, s15
 80072f0:	edc1 7a02 	vstr	s15, [r1, #8]
 80072f4:	bc70      	pop	{r4, r5, r6}
 80072f6:	4770      	bx	lr

080072f8 <memset>:
 80072f8:	4402      	add	r2, r0
 80072fa:	4603      	mov	r3, r0
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d100      	bne.n	8007302 <memset+0xa>
 8007300:	4770      	bx	lr
 8007302:	f803 1b01 	strb.w	r1, [r3], #1
 8007306:	e7f9      	b.n	80072fc <memset+0x4>

08007308 <__errno>:
 8007308:	4b01      	ldr	r3, [pc, #4]	@ (8007310 <__errno+0x8>)
 800730a:	6818      	ldr	r0, [r3, #0]
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	2000004c 	.word	0x2000004c

08007314 <__libc_init_array>:
 8007314:	b570      	push	{r4, r5, r6, lr}
 8007316:	4d0d      	ldr	r5, [pc, #52]	@ (800734c <__libc_init_array+0x38>)
 8007318:	4c0d      	ldr	r4, [pc, #52]	@ (8007350 <__libc_init_array+0x3c>)
 800731a:	1b64      	subs	r4, r4, r5
 800731c:	10a4      	asrs	r4, r4, #2
 800731e:	2600      	movs	r6, #0
 8007320:	42a6      	cmp	r6, r4
 8007322:	d109      	bne.n	8007338 <__libc_init_array+0x24>
 8007324:	4d0b      	ldr	r5, [pc, #44]	@ (8007354 <__libc_init_array+0x40>)
 8007326:	4c0c      	ldr	r4, [pc, #48]	@ (8007358 <__libc_init_array+0x44>)
 8007328:	f000 ff78 	bl	800821c <_init>
 800732c:	1b64      	subs	r4, r4, r5
 800732e:	10a4      	asrs	r4, r4, #2
 8007330:	2600      	movs	r6, #0
 8007332:	42a6      	cmp	r6, r4
 8007334:	d105      	bne.n	8007342 <__libc_init_array+0x2e>
 8007336:	bd70      	pop	{r4, r5, r6, pc}
 8007338:	f855 3b04 	ldr.w	r3, [r5], #4
 800733c:	4798      	blx	r3
 800733e:	3601      	adds	r6, #1
 8007340:	e7ee      	b.n	8007320 <__libc_init_array+0xc>
 8007342:	f855 3b04 	ldr.w	r3, [r5], #4
 8007346:	4798      	blx	r3
 8007348:	3601      	adds	r6, #1
 800734a:	e7f2      	b.n	8007332 <__libc_init_array+0x1e>
 800734c:	0800a460 	.word	0x0800a460
 8007350:	0800a460 	.word	0x0800a460
 8007354:	0800a460 	.word	0x0800a460
 8007358:	0800a464 	.word	0x0800a464

0800735c <pow>:
 800735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735e:	ed2d 8b02 	vpush	{d8}
 8007362:	eeb0 8a40 	vmov.f32	s16, s0
 8007366:	eef0 8a60 	vmov.f32	s17, s1
 800736a:	ec55 4b11 	vmov	r4, r5, d1
 800736e:	f000 f873 	bl	8007458 <__ieee754_pow>
 8007372:	4622      	mov	r2, r4
 8007374:	462b      	mov	r3, r5
 8007376:	4620      	mov	r0, r4
 8007378:	4629      	mov	r1, r5
 800737a:	ec57 6b10 	vmov	r6, r7, d0
 800737e:	f7f9 fb95 	bl	8000aac <__aeabi_dcmpun>
 8007382:	2800      	cmp	r0, #0
 8007384:	d13b      	bne.n	80073fe <pow+0xa2>
 8007386:	ec51 0b18 	vmov	r0, r1, d8
 800738a:	2200      	movs	r2, #0
 800738c:	2300      	movs	r3, #0
 800738e:	f7f9 fb5b 	bl	8000a48 <__aeabi_dcmpeq>
 8007392:	b1b8      	cbz	r0, 80073c4 <pow+0x68>
 8007394:	2200      	movs	r2, #0
 8007396:	2300      	movs	r3, #0
 8007398:	4620      	mov	r0, r4
 800739a:	4629      	mov	r1, r5
 800739c:	f7f9 fb54 	bl	8000a48 <__aeabi_dcmpeq>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d146      	bne.n	8007432 <pow+0xd6>
 80073a4:	ec45 4b10 	vmov	d0, r4, r5
 80073a8:	f000 f848 	bl	800743c <finite>
 80073ac:	b338      	cbz	r0, 80073fe <pow+0xa2>
 80073ae:	2200      	movs	r2, #0
 80073b0:	2300      	movs	r3, #0
 80073b2:	4620      	mov	r0, r4
 80073b4:	4629      	mov	r1, r5
 80073b6:	f7f9 fb51 	bl	8000a5c <__aeabi_dcmplt>
 80073ba:	b300      	cbz	r0, 80073fe <pow+0xa2>
 80073bc:	f7ff ffa4 	bl	8007308 <__errno>
 80073c0:	2322      	movs	r3, #34	@ 0x22
 80073c2:	e01b      	b.n	80073fc <pow+0xa0>
 80073c4:	ec47 6b10 	vmov	d0, r6, r7
 80073c8:	f000 f838 	bl	800743c <finite>
 80073cc:	b9e0      	cbnz	r0, 8007408 <pow+0xac>
 80073ce:	eeb0 0a48 	vmov.f32	s0, s16
 80073d2:	eef0 0a68 	vmov.f32	s1, s17
 80073d6:	f000 f831 	bl	800743c <finite>
 80073da:	b1a8      	cbz	r0, 8007408 <pow+0xac>
 80073dc:	ec45 4b10 	vmov	d0, r4, r5
 80073e0:	f000 f82c 	bl	800743c <finite>
 80073e4:	b180      	cbz	r0, 8007408 <pow+0xac>
 80073e6:	4632      	mov	r2, r6
 80073e8:	463b      	mov	r3, r7
 80073ea:	4630      	mov	r0, r6
 80073ec:	4639      	mov	r1, r7
 80073ee:	f7f9 fb5d 	bl	8000aac <__aeabi_dcmpun>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d0e2      	beq.n	80073bc <pow+0x60>
 80073f6:	f7ff ff87 	bl	8007308 <__errno>
 80073fa:	2321      	movs	r3, #33	@ 0x21
 80073fc:	6003      	str	r3, [r0, #0]
 80073fe:	ecbd 8b02 	vpop	{d8}
 8007402:	ec47 6b10 	vmov	d0, r6, r7
 8007406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007408:	2200      	movs	r2, #0
 800740a:	2300      	movs	r3, #0
 800740c:	4630      	mov	r0, r6
 800740e:	4639      	mov	r1, r7
 8007410:	f7f9 fb1a 	bl	8000a48 <__aeabi_dcmpeq>
 8007414:	2800      	cmp	r0, #0
 8007416:	d0f2      	beq.n	80073fe <pow+0xa2>
 8007418:	eeb0 0a48 	vmov.f32	s0, s16
 800741c:	eef0 0a68 	vmov.f32	s1, s17
 8007420:	f000 f80c 	bl	800743c <finite>
 8007424:	2800      	cmp	r0, #0
 8007426:	d0ea      	beq.n	80073fe <pow+0xa2>
 8007428:	ec45 4b10 	vmov	d0, r4, r5
 800742c:	f000 f806 	bl	800743c <finite>
 8007430:	e7c3      	b.n	80073ba <pow+0x5e>
 8007432:	4f01      	ldr	r7, [pc, #4]	@ (8007438 <pow+0xdc>)
 8007434:	2600      	movs	r6, #0
 8007436:	e7e2      	b.n	80073fe <pow+0xa2>
 8007438:	3ff00000 	.word	0x3ff00000

0800743c <finite>:
 800743c:	b082      	sub	sp, #8
 800743e:	ed8d 0b00 	vstr	d0, [sp]
 8007442:	9801      	ldr	r0, [sp, #4]
 8007444:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007448:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800744c:	0fc0      	lsrs	r0, r0, #31
 800744e:	b002      	add	sp, #8
 8007450:	4770      	bx	lr
 8007452:	0000      	movs	r0, r0
 8007454:	0000      	movs	r0, r0
	...

08007458 <__ieee754_pow>:
 8007458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745c:	b091      	sub	sp, #68	@ 0x44
 800745e:	ed8d 1b00 	vstr	d1, [sp]
 8007462:	e9dd 1900 	ldrd	r1, r9, [sp]
 8007466:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800746a:	ea5a 0001 	orrs.w	r0, sl, r1
 800746e:	ec57 6b10 	vmov	r6, r7, d0
 8007472:	d113      	bne.n	800749c <__ieee754_pow+0x44>
 8007474:	19b3      	adds	r3, r6, r6
 8007476:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800747a:	4152      	adcs	r2, r2
 800747c:	4298      	cmp	r0, r3
 800747e:	4b98      	ldr	r3, [pc, #608]	@ (80076e0 <__ieee754_pow+0x288>)
 8007480:	4193      	sbcs	r3, r2
 8007482:	f080 84ea 	bcs.w	8007e5a <__ieee754_pow+0xa02>
 8007486:	e9dd 2300 	ldrd	r2, r3, [sp]
 800748a:	4630      	mov	r0, r6
 800748c:	4639      	mov	r1, r7
 800748e:	f7f8 febd 	bl	800020c <__adddf3>
 8007492:	ec41 0b10 	vmov	d0, r0, r1
 8007496:	b011      	add	sp, #68	@ 0x44
 8007498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800749c:	4a91      	ldr	r2, [pc, #580]	@ (80076e4 <__ieee754_pow+0x28c>)
 800749e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80074a2:	4590      	cmp	r8, r2
 80074a4:	463d      	mov	r5, r7
 80074a6:	4633      	mov	r3, r6
 80074a8:	d806      	bhi.n	80074b8 <__ieee754_pow+0x60>
 80074aa:	d101      	bne.n	80074b0 <__ieee754_pow+0x58>
 80074ac:	2e00      	cmp	r6, #0
 80074ae:	d1ea      	bne.n	8007486 <__ieee754_pow+0x2e>
 80074b0:	4592      	cmp	sl, r2
 80074b2:	d801      	bhi.n	80074b8 <__ieee754_pow+0x60>
 80074b4:	d10e      	bne.n	80074d4 <__ieee754_pow+0x7c>
 80074b6:	b169      	cbz	r1, 80074d4 <__ieee754_pow+0x7c>
 80074b8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80074bc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80074c0:	431d      	orrs	r5, r3
 80074c2:	d1e0      	bne.n	8007486 <__ieee754_pow+0x2e>
 80074c4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80074c8:	18db      	adds	r3, r3, r3
 80074ca:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80074ce:	4152      	adcs	r2, r2
 80074d0:	429d      	cmp	r5, r3
 80074d2:	e7d4      	b.n	800747e <__ieee754_pow+0x26>
 80074d4:	2d00      	cmp	r5, #0
 80074d6:	46c3      	mov	fp, r8
 80074d8:	da3a      	bge.n	8007550 <__ieee754_pow+0xf8>
 80074da:	4a83      	ldr	r2, [pc, #524]	@ (80076e8 <__ieee754_pow+0x290>)
 80074dc:	4592      	cmp	sl, r2
 80074de:	d84d      	bhi.n	800757c <__ieee754_pow+0x124>
 80074e0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80074e4:	4592      	cmp	sl, r2
 80074e6:	f240 84c7 	bls.w	8007e78 <__ieee754_pow+0xa20>
 80074ea:	ea4f 522a 	mov.w	r2, sl, asr #20
 80074ee:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80074f2:	2a14      	cmp	r2, #20
 80074f4:	dd0f      	ble.n	8007516 <__ieee754_pow+0xbe>
 80074f6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80074fa:	fa21 f402 	lsr.w	r4, r1, r2
 80074fe:	fa04 f202 	lsl.w	r2, r4, r2
 8007502:	428a      	cmp	r2, r1
 8007504:	f040 84b8 	bne.w	8007e78 <__ieee754_pow+0xa20>
 8007508:	f004 0401 	and.w	r4, r4, #1
 800750c:	f1c4 0402 	rsb	r4, r4, #2
 8007510:	2900      	cmp	r1, #0
 8007512:	d158      	bne.n	80075c6 <__ieee754_pow+0x16e>
 8007514:	e00e      	b.n	8007534 <__ieee754_pow+0xdc>
 8007516:	2900      	cmp	r1, #0
 8007518:	d154      	bne.n	80075c4 <__ieee754_pow+0x16c>
 800751a:	f1c2 0214 	rsb	r2, r2, #20
 800751e:	fa4a f402 	asr.w	r4, sl, r2
 8007522:	fa04 f202 	lsl.w	r2, r4, r2
 8007526:	4552      	cmp	r2, sl
 8007528:	f040 84a3 	bne.w	8007e72 <__ieee754_pow+0xa1a>
 800752c:	f004 0401 	and.w	r4, r4, #1
 8007530:	f1c4 0402 	rsb	r4, r4, #2
 8007534:	4a6d      	ldr	r2, [pc, #436]	@ (80076ec <__ieee754_pow+0x294>)
 8007536:	4592      	cmp	sl, r2
 8007538:	d12e      	bne.n	8007598 <__ieee754_pow+0x140>
 800753a:	f1b9 0f00 	cmp.w	r9, #0
 800753e:	f280 8494 	bge.w	8007e6a <__ieee754_pow+0xa12>
 8007542:	496a      	ldr	r1, [pc, #424]	@ (80076ec <__ieee754_pow+0x294>)
 8007544:	4632      	mov	r2, r6
 8007546:	463b      	mov	r3, r7
 8007548:	2000      	movs	r0, #0
 800754a:	f7f9 f93f 	bl	80007cc <__aeabi_ddiv>
 800754e:	e7a0      	b.n	8007492 <__ieee754_pow+0x3a>
 8007550:	2400      	movs	r4, #0
 8007552:	bbc1      	cbnz	r1, 80075c6 <__ieee754_pow+0x16e>
 8007554:	4a63      	ldr	r2, [pc, #396]	@ (80076e4 <__ieee754_pow+0x28c>)
 8007556:	4592      	cmp	sl, r2
 8007558:	d1ec      	bne.n	8007534 <__ieee754_pow+0xdc>
 800755a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800755e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8007562:	431a      	orrs	r2, r3
 8007564:	f000 8479 	beq.w	8007e5a <__ieee754_pow+0xa02>
 8007568:	4b61      	ldr	r3, [pc, #388]	@ (80076f0 <__ieee754_pow+0x298>)
 800756a:	4598      	cmp	r8, r3
 800756c:	d908      	bls.n	8007580 <__ieee754_pow+0x128>
 800756e:	f1b9 0f00 	cmp.w	r9, #0
 8007572:	f2c0 8476 	blt.w	8007e62 <__ieee754_pow+0xa0a>
 8007576:	e9dd 0100 	ldrd	r0, r1, [sp]
 800757a:	e78a      	b.n	8007492 <__ieee754_pow+0x3a>
 800757c:	2402      	movs	r4, #2
 800757e:	e7e8      	b.n	8007552 <__ieee754_pow+0xfa>
 8007580:	f1b9 0f00 	cmp.w	r9, #0
 8007584:	f04f 0000 	mov.w	r0, #0
 8007588:	f04f 0100 	mov.w	r1, #0
 800758c:	da81      	bge.n	8007492 <__ieee754_pow+0x3a>
 800758e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007592:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007596:	e77c      	b.n	8007492 <__ieee754_pow+0x3a>
 8007598:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800759c:	d106      	bne.n	80075ac <__ieee754_pow+0x154>
 800759e:	4632      	mov	r2, r6
 80075a0:	463b      	mov	r3, r7
 80075a2:	4630      	mov	r0, r6
 80075a4:	4639      	mov	r1, r7
 80075a6:	f7f8 ffe7 	bl	8000578 <__aeabi_dmul>
 80075aa:	e772      	b.n	8007492 <__ieee754_pow+0x3a>
 80075ac:	4a51      	ldr	r2, [pc, #324]	@ (80076f4 <__ieee754_pow+0x29c>)
 80075ae:	4591      	cmp	r9, r2
 80075b0:	d109      	bne.n	80075c6 <__ieee754_pow+0x16e>
 80075b2:	2d00      	cmp	r5, #0
 80075b4:	db07      	blt.n	80075c6 <__ieee754_pow+0x16e>
 80075b6:	ec47 6b10 	vmov	d0, r6, r7
 80075ba:	b011      	add	sp, #68	@ 0x44
 80075bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c0:	f000 bd52 	b.w	8008068 <__ieee754_sqrt>
 80075c4:	2400      	movs	r4, #0
 80075c6:	ec47 6b10 	vmov	d0, r6, r7
 80075ca:	9302      	str	r3, [sp, #8]
 80075cc:	f000 fc88 	bl	8007ee0 <fabs>
 80075d0:	9b02      	ldr	r3, [sp, #8]
 80075d2:	ec51 0b10 	vmov	r0, r1, d0
 80075d6:	bb53      	cbnz	r3, 800762e <__ieee754_pow+0x1d6>
 80075d8:	4b44      	ldr	r3, [pc, #272]	@ (80076ec <__ieee754_pow+0x294>)
 80075da:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80075de:	429a      	cmp	r2, r3
 80075e0:	d002      	beq.n	80075e8 <__ieee754_pow+0x190>
 80075e2:	f1b8 0f00 	cmp.w	r8, #0
 80075e6:	d122      	bne.n	800762e <__ieee754_pow+0x1d6>
 80075e8:	f1b9 0f00 	cmp.w	r9, #0
 80075ec:	da05      	bge.n	80075fa <__ieee754_pow+0x1a2>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	2000      	movs	r0, #0
 80075f4:	493d      	ldr	r1, [pc, #244]	@ (80076ec <__ieee754_pow+0x294>)
 80075f6:	f7f9 f8e9 	bl	80007cc <__aeabi_ddiv>
 80075fa:	2d00      	cmp	r5, #0
 80075fc:	f6bf af49 	bge.w	8007492 <__ieee754_pow+0x3a>
 8007600:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8007604:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007608:	ea58 0804 	orrs.w	r8, r8, r4
 800760c:	d108      	bne.n	8007620 <__ieee754_pow+0x1c8>
 800760e:	4602      	mov	r2, r0
 8007610:	460b      	mov	r3, r1
 8007612:	4610      	mov	r0, r2
 8007614:	4619      	mov	r1, r3
 8007616:	f7f8 fdf7 	bl	8000208 <__aeabi_dsub>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	e794      	b.n	800754a <__ieee754_pow+0xf2>
 8007620:	2c01      	cmp	r4, #1
 8007622:	f47f af36 	bne.w	8007492 <__ieee754_pow+0x3a>
 8007626:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800762a:	4619      	mov	r1, r3
 800762c:	e731      	b.n	8007492 <__ieee754_pow+0x3a>
 800762e:	0feb      	lsrs	r3, r5, #31
 8007630:	3b01      	subs	r3, #1
 8007632:	ea53 0204 	orrs.w	r2, r3, r4
 8007636:	d102      	bne.n	800763e <__ieee754_pow+0x1e6>
 8007638:	4632      	mov	r2, r6
 800763a:	463b      	mov	r3, r7
 800763c:	e7e9      	b.n	8007612 <__ieee754_pow+0x1ba>
 800763e:	3c01      	subs	r4, #1
 8007640:	431c      	orrs	r4, r3
 8007642:	d016      	beq.n	8007672 <__ieee754_pow+0x21a>
 8007644:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80076d0 <__ieee754_pow+0x278>
 8007648:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800764c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007650:	f240 8112 	bls.w	8007878 <__ieee754_pow+0x420>
 8007654:	4b28      	ldr	r3, [pc, #160]	@ (80076f8 <__ieee754_pow+0x2a0>)
 8007656:	459a      	cmp	sl, r3
 8007658:	4b25      	ldr	r3, [pc, #148]	@ (80076f0 <__ieee754_pow+0x298>)
 800765a:	d916      	bls.n	800768a <__ieee754_pow+0x232>
 800765c:	4598      	cmp	r8, r3
 800765e:	d80b      	bhi.n	8007678 <__ieee754_pow+0x220>
 8007660:	f1b9 0f00 	cmp.w	r9, #0
 8007664:	da0b      	bge.n	800767e <__ieee754_pow+0x226>
 8007666:	2000      	movs	r0, #0
 8007668:	b011      	add	sp, #68	@ 0x44
 800766a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766e:	f000 bcf3 	b.w	8008058 <__math_oflow>
 8007672:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80076d8 <__ieee754_pow+0x280>
 8007676:	e7e7      	b.n	8007648 <__ieee754_pow+0x1f0>
 8007678:	f1b9 0f00 	cmp.w	r9, #0
 800767c:	dcf3      	bgt.n	8007666 <__ieee754_pow+0x20e>
 800767e:	2000      	movs	r0, #0
 8007680:	b011      	add	sp, #68	@ 0x44
 8007682:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007686:	f000 bcdf 	b.w	8008048 <__math_uflow>
 800768a:	4598      	cmp	r8, r3
 800768c:	d20c      	bcs.n	80076a8 <__ieee754_pow+0x250>
 800768e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007692:	2200      	movs	r2, #0
 8007694:	2300      	movs	r3, #0
 8007696:	f7f9 f9e1 	bl	8000a5c <__aeabi_dcmplt>
 800769a:	3800      	subs	r0, #0
 800769c:	bf18      	it	ne
 800769e:	2001      	movne	r0, #1
 80076a0:	f1b9 0f00 	cmp.w	r9, #0
 80076a4:	daec      	bge.n	8007680 <__ieee754_pow+0x228>
 80076a6:	e7df      	b.n	8007668 <__ieee754_pow+0x210>
 80076a8:	4b10      	ldr	r3, [pc, #64]	@ (80076ec <__ieee754_pow+0x294>)
 80076aa:	4598      	cmp	r8, r3
 80076ac:	f04f 0200 	mov.w	r2, #0
 80076b0:	d924      	bls.n	80076fc <__ieee754_pow+0x2a4>
 80076b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076b6:	2300      	movs	r3, #0
 80076b8:	f7f9 f9d0 	bl	8000a5c <__aeabi_dcmplt>
 80076bc:	3800      	subs	r0, #0
 80076be:	bf18      	it	ne
 80076c0:	2001      	movne	r0, #1
 80076c2:	f1b9 0f00 	cmp.w	r9, #0
 80076c6:	dccf      	bgt.n	8007668 <__ieee754_pow+0x210>
 80076c8:	e7da      	b.n	8007680 <__ieee754_pow+0x228>
 80076ca:	bf00      	nop
 80076cc:	f3af 8000 	nop.w
 80076d0:	00000000 	.word	0x00000000
 80076d4:	3ff00000 	.word	0x3ff00000
 80076d8:	00000000 	.word	0x00000000
 80076dc:	bff00000 	.word	0xbff00000
 80076e0:	fff00000 	.word	0xfff00000
 80076e4:	7ff00000 	.word	0x7ff00000
 80076e8:	433fffff 	.word	0x433fffff
 80076ec:	3ff00000 	.word	0x3ff00000
 80076f0:	3fefffff 	.word	0x3fefffff
 80076f4:	3fe00000 	.word	0x3fe00000
 80076f8:	43f00000 	.word	0x43f00000
 80076fc:	4b5a      	ldr	r3, [pc, #360]	@ (8007868 <__ieee754_pow+0x410>)
 80076fe:	f7f8 fd83 	bl	8000208 <__aeabi_dsub>
 8007702:	a351      	add	r3, pc, #324	@ (adr r3, 8007848 <__ieee754_pow+0x3f0>)
 8007704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007708:	4604      	mov	r4, r0
 800770a:	460d      	mov	r5, r1
 800770c:	f7f8 ff34 	bl	8000578 <__aeabi_dmul>
 8007710:	a34f      	add	r3, pc, #316	@ (adr r3, 8007850 <__ieee754_pow+0x3f8>)
 8007712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007716:	4606      	mov	r6, r0
 8007718:	460f      	mov	r7, r1
 800771a:	4620      	mov	r0, r4
 800771c:	4629      	mov	r1, r5
 800771e:	f7f8 ff2b 	bl	8000578 <__aeabi_dmul>
 8007722:	4b52      	ldr	r3, [pc, #328]	@ (800786c <__ieee754_pow+0x414>)
 8007724:	4682      	mov	sl, r0
 8007726:	468b      	mov	fp, r1
 8007728:	2200      	movs	r2, #0
 800772a:	4620      	mov	r0, r4
 800772c:	4629      	mov	r1, r5
 800772e:	f7f8 ff23 	bl	8000578 <__aeabi_dmul>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	a148      	add	r1, pc, #288	@ (adr r1, 8007858 <__ieee754_pow+0x400>)
 8007738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800773c:	f7f8 fd64 	bl	8000208 <__aeabi_dsub>
 8007740:	4622      	mov	r2, r4
 8007742:	462b      	mov	r3, r5
 8007744:	f7f8 ff18 	bl	8000578 <__aeabi_dmul>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	2000      	movs	r0, #0
 800774e:	4948      	ldr	r1, [pc, #288]	@ (8007870 <__ieee754_pow+0x418>)
 8007750:	f7f8 fd5a 	bl	8000208 <__aeabi_dsub>
 8007754:	4622      	mov	r2, r4
 8007756:	4680      	mov	r8, r0
 8007758:	4689      	mov	r9, r1
 800775a:	462b      	mov	r3, r5
 800775c:	4620      	mov	r0, r4
 800775e:	4629      	mov	r1, r5
 8007760:	f7f8 ff0a 	bl	8000578 <__aeabi_dmul>
 8007764:	4602      	mov	r2, r0
 8007766:	460b      	mov	r3, r1
 8007768:	4640      	mov	r0, r8
 800776a:	4649      	mov	r1, r9
 800776c:	f7f8 ff04 	bl	8000578 <__aeabi_dmul>
 8007770:	a33b      	add	r3, pc, #236	@ (adr r3, 8007860 <__ieee754_pow+0x408>)
 8007772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007776:	f7f8 feff 	bl	8000578 <__aeabi_dmul>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4650      	mov	r0, sl
 8007780:	4659      	mov	r1, fp
 8007782:	f7f8 fd41 	bl	8000208 <__aeabi_dsub>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	4680      	mov	r8, r0
 800778c:	4689      	mov	r9, r1
 800778e:	4630      	mov	r0, r6
 8007790:	4639      	mov	r1, r7
 8007792:	f7f8 fd3b 	bl	800020c <__adddf3>
 8007796:	2400      	movs	r4, #0
 8007798:	4632      	mov	r2, r6
 800779a:	463b      	mov	r3, r7
 800779c:	4620      	mov	r0, r4
 800779e:	460d      	mov	r5, r1
 80077a0:	f7f8 fd32 	bl	8000208 <__aeabi_dsub>
 80077a4:	4602      	mov	r2, r0
 80077a6:	460b      	mov	r3, r1
 80077a8:	4640      	mov	r0, r8
 80077aa:	4649      	mov	r1, r9
 80077ac:	f7f8 fd2c 	bl	8000208 <__aeabi_dsub>
 80077b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077b8:	2300      	movs	r3, #0
 80077ba:	9304      	str	r3, [sp, #16]
 80077bc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80077c0:	4606      	mov	r6, r0
 80077c2:	460f      	mov	r7, r1
 80077c4:	4652      	mov	r2, sl
 80077c6:	465b      	mov	r3, fp
 80077c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077cc:	f7f8 fd1c 	bl	8000208 <__aeabi_dsub>
 80077d0:	4622      	mov	r2, r4
 80077d2:	462b      	mov	r3, r5
 80077d4:	f7f8 fed0 	bl	8000578 <__aeabi_dmul>
 80077d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077dc:	4680      	mov	r8, r0
 80077de:	4689      	mov	r9, r1
 80077e0:	4630      	mov	r0, r6
 80077e2:	4639      	mov	r1, r7
 80077e4:	f7f8 fec8 	bl	8000578 <__aeabi_dmul>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	4640      	mov	r0, r8
 80077ee:	4649      	mov	r1, r9
 80077f0:	f7f8 fd0c 	bl	800020c <__adddf3>
 80077f4:	4652      	mov	r2, sl
 80077f6:	465b      	mov	r3, fp
 80077f8:	4606      	mov	r6, r0
 80077fa:	460f      	mov	r7, r1
 80077fc:	4620      	mov	r0, r4
 80077fe:	4629      	mov	r1, r5
 8007800:	f7f8 feba 	bl	8000578 <__aeabi_dmul>
 8007804:	460b      	mov	r3, r1
 8007806:	4602      	mov	r2, r0
 8007808:	4680      	mov	r8, r0
 800780a:	4689      	mov	r9, r1
 800780c:	4630      	mov	r0, r6
 800780e:	4639      	mov	r1, r7
 8007810:	f7f8 fcfc 	bl	800020c <__adddf3>
 8007814:	4b17      	ldr	r3, [pc, #92]	@ (8007874 <__ieee754_pow+0x41c>)
 8007816:	4299      	cmp	r1, r3
 8007818:	4604      	mov	r4, r0
 800781a:	460d      	mov	r5, r1
 800781c:	468a      	mov	sl, r1
 800781e:	468b      	mov	fp, r1
 8007820:	f340 82ef 	ble.w	8007e02 <__ieee754_pow+0x9aa>
 8007824:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007828:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800782c:	4303      	orrs	r3, r0
 800782e:	f000 81e8 	beq.w	8007c02 <__ieee754_pow+0x7aa>
 8007832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007836:	2200      	movs	r2, #0
 8007838:	2300      	movs	r3, #0
 800783a:	f7f9 f90f 	bl	8000a5c <__aeabi_dcmplt>
 800783e:	3800      	subs	r0, #0
 8007840:	bf18      	it	ne
 8007842:	2001      	movne	r0, #1
 8007844:	e710      	b.n	8007668 <__ieee754_pow+0x210>
 8007846:	bf00      	nop
 8007848:	60000000 	.word	0x60000000
 800784c:	3ff71547 	.word	0x3ff71547
 8007850:	f85ddf44 	.word	0xf85ddf44
 8007854:	3e54ae0b 	.word	0x3e54ae0b
 8007858:	55555555 	.word	0x55555555
 800785c:	3fd55555 	.word	0x3fd55555
 8007860:	652b82fe 	.word	0x652b82fe
 8007864:	3ff71547 	.word	0x3ff71547
 8007868:	3ff00000 	.word	0x3ff00000
 800786c:	3fd00000 	.word	0x3fd00000
 8007870:	3fe00000 	.word	0x3fe00000
 8007874:	408fffff 	.word	0x408fffff
 8007878:	4bd5      	ldr	r3, [pc, #852]	@ (8007bd0 <__ieee754_pow+0x778>)
 800787a:	402b      	ands	r3, r5
 800787c:	2200      	movs	r2, #0
 800787e:	b92b      	cbnz	r3, 800788c <__ieee754_pow+0x434>
 8007880:	4bd4      	ldr	r3, [pc, #848]	@ (8007bd4 <__ieee754_pow+0x77c>)
 8007882:	f7f8 fe79 	bl	8000578 <__aeabi_dmul>
 8007886:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800788a:	468b      	mov	fp, r1
 800788c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007890:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007894:	4413      	add	r3, r2
 8007896:	930a      	str	r3, [sp, #40]	@ 0x28
 8007898:	4bcf      	ldr	r3, [pc, #828]	@ (8007bd8 <__ieee754_pow+0x780>)
 800789a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800789e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80078a2:	459b      	cmp	fp, r3
 80078a4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80078a8:	dd08      	ble.n	80078bc <__ieee754_pow+0x464>
 80078aa:	4bcc      	ldr	r3, [pc, #816]	@ (8007bdc <__ieee754_pow+0x784>)
 80078ac:	459b      	cmp	fp, r3
 80078ae:	f340 81a5 	ble.w	8007bfc <__ieee754_pow+0x7a4>
 80078b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078b4:	3301      	adds	r3, #1
 80078b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80078b8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80078bc:	f04f 0a00 	mov.w	sl, #0
 80078c0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80078c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078c6:	4bc6      	ldr	r3, [pc, #792]	@ (8007be0 <__ieee754_pow+0x788>)
 80078c8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80078cc:	ed93 7b00 	vldr	d7, [r3]
 80078d0:	4629      	mov	r1, r5
 80078d2:	ec53 2b17 	vmov	r2, r3, d7
 80078d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80078da:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80078de:	f7f8 fc93 	bl	8000208 <__aeabi_dsub>
 80078e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80078e6:	4606      	mov	r6, r0
 80078e8:	460f      	mov	r7, r1
 80078ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078ee:	f7f8 fc8d 	bl	800020c <__adddf3>
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	2000      	movs	r0, #0
 80078f8:	49ba      	ldr	r1, [pc, #744]	@ (8007be4 <__ieee754_pow+0x78c>)
 80078fa:	f7f8 ff67 	bl	80007cc <__aeabi_ddiv>
 80078fe:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	4630      	mov	r0, r6
 8007908:	4639      	mov	r1, r7
 800790a:	f7f8 fe35 	bl	8000578 <__aeabi_dmul>
 800790e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007912:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007916:	106d      	asrs	r5, r5, #1
 8007918:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800791c:	f04f 0b00 	mov.w	fp, #0
 8007920:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007924:	4661      	mov	r1, ip
 8007926:	2200      	movs	r2, #0
 8007928:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800792c:	4658      	mov	r0, fp
 800792e:	46e1      	mov	r9, ip
 8007930:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8007934:	4614      	mov	r4, r2
 8007936:	461d      	mov	r5, r3
 8007938:	f7f8 fe1e 	bl	8000578 <__aeabi_dmul>
 800793c:	4602      	mov	r2, r0
 800793e:	460b      	mov	r3, r1
 8007940:	4630      	mov	r0, r6
 8007942:	4639      	mov	r1, r7
 8007944:	f7f8 fc60 	bl	8000208 <__aeabi_dsub>
 8007948:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800794c:	4606      	mov	r6, r0
 800794e:	460f      	mov	r7, r1
 8007950:	4620      	mov	r0, r4
 8007952:	4629      	mov	r1, r5
 8007954:	f7f8 fc58 	bl	8000208 <__aeabi_dsub>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007960:	f7f8 fc52 	bl	8000208 <__aeabi_dsub>
 8007964:	465a      	mov	r2, fp
 8007966:	464b      	mov	r3, r9
 8007968:	f7f8 fe06 	bl	8000578 <__aeabi_dmul>
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
 8007970:	4630      	mov	r0, r6
 8007972:	4639      	mov	r1, r7
 8007974:	f7f8 fc48 	bl	8000208 <__aeabi_dsub>
 8007978:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800797c:	f7f8 fdfc 	bl	8000578 <__aeabi_dmul>
 8007980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007984:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007988:	4610      	mov	r0, r2
 800798a:	4619      	mov	r1, r3
 800798c:	f7f8 fdf4 	bl	8000578 <__aeabi_dmul>
 8007990:	a37d      	add	r3, pc, #500	@ (adr r3, 8007b88 <__ieee754_pow+0x730>)
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	4604      	mov	r4, r0
 8007998:	460d      	mov	r5, r1
 800799a:	f7f8 fded 	bl	8000578 <__aeabi_dmul>
 800799e:	a37c      	add	r3, pc, #496	@ (adr r3, 8007b90 <__ieee754_pow+0x738>)
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	f7f8 fc32 	bl	800020c <__adddf3>
 80079a8:	4622      	mov	r2, r4
 80079aa:	462b      	mov	r3, r5
 80079ac:	f7f8 fde4 	bl	8000578 <__aeabi_dmul>
 80079b0:	a379      	add	r3, pc, #484	@ (adr r3, 8007b98 <__ieee754_pow+0x740>)
 80079b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b6:	f7f8 fc29 	bl	800020c <__adddf3>
 80079ba:	4622      	mov	r2, r4
 80079bc:	462b      	mov	r3, r5
 80079be:	f7f8 fddb 	bl	8000578 <__aeabi_dmul>
 80079c2:	a377      	add	r3, pc, #476	@ (adr r3, 8007ba0 <__ieee754_pow+0x748>)
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	f7f8 fc20 	bl	800020c <__adddf3>
 80079cc:	4622      	mov	r2, r4
 80079ce:	462b      	mov	r3, r5
 80079d0:	f7f8 fdd2 	bl	8000578 <__aeabi_dmul>
 80079d4:	a374      	add	r3, pc, #464	@ (adr r3, 8007ba8 <__ieee754_pow+0x750>)
 80079d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079da:	f7f8 fc17 	bl	800020c <__adddf3>
 80079de:	4622      	mov	r2, r4
 80079e0:	462b      	mov	r3, r5
 80079e2:	f7f8 fdc9 	bl	8000578 <__aeabi_dmul>
 80079e6:	a372      	add	r3, pc, #456	@ (adr r3, 8007bb0 <__ieee754_pow+0x758>)
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	f7f8 fc0e 	bl	800020c <__adddf3>
 80079f0:	4622      	mov	r2, r4
 80079f2:	4606      	mov	r6, r0
 80079f4:	460f      	mov	r7, r1
 80079f6:	462b      	mov	r3, r5
 80079f8:	4620      	mov	r0, r4
 80079fa:	4629      	mov	r1, r5
 80079fc:	f7f8 fdbc 	bl	8000578 <__aeabi_dmul>
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	4630      	mov	r0, r6
 8007a06:	4639      	mov	r1, r7
 8007a08:	f7f8 fdb6 	bl	8000578 <__aeabi_dmul>
 8007a0c:	465a      	mov	r2, fp
 8007a0e:	4604      	mov	r4, r0
 8007a10:	460d      	mov	r5, r1
 8007a12:	464b      	mov	r3, r9
 8007a14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a18:	f7f8 fbf8 	bl	800020c <__adddf3>
 8007a1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a20:	f7f8 fdaa 	bl	8000578 <__aeabi_dmul>
 8007a24:	4622      	mov	r2, r4
 8007a26:	462b      	mov	r3, r5
 8007a28:	f7f8 fbf0 	bl	800020c <__adddf3>
 8007a2c:	465a      	mov	r2, fp
 8007a2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a32:	464b      	mov	r3, r9
 8007a34:	4658      	mov	r0, fp
 8007a36:	4649      	mov	r1, r9
 8007a38:	f7f8 fd9e 	bl	8000578 <__aeabi_dmul>
 8007a3c:	4b6a      	ldr	r3, [pc, #424]	@ (8007be8 <__ieee754_pow+0x790>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	4606      	mov	r6, r0
 8007a42:	460f      	mov	r7, r1
 8007a44:	f7f8 fbe2 	bl	800020c <__adddf3>
 8007a48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a4c:	f7f8 fbde 	bl	800020c <__adddf3>
 8007a50:	46d8      	mov	r8, fp
 8007a52:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8007a56:	460d      	mov	r5, r1
 8007a58:	465a      	mov	r2, fp
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4640      	mov	r0, r8
 8007a5e:	4649      	mov	r1, r9
 8007a60:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8007a64:	f7f8 fd88 	bl	8000578 <__aeabi_dmul>
 8007a68:	465c      	mov	r4, fp
 8007a6a:	4680      	mov	r8, r0
 8007a6c:	4689      	mov	r9, r1
 8007a6e:	4b5e      	ldr	r3, [pc, #376]	@ (8007be8 <__ieee754_pow+0x790>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	4620      	mov	r0, r4
 8007a74:	4629      	mov	r1, r5
 8007a76:	f7f8 fbc7 	bl	8000208 <__aeabi_dsub>
 8007a7a:	4632      	mov	r2, r6
 8007a7c:	463b      	mov	r3, r7
 8007a7e:	f7f8 fbc3 	bl	8000208 <__aeabi_dsub>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a8a:	f7f8 fbbd 	bl	8000208 <__aeabi_dsub>
 8007a8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a92:	f7f8 fd71 	bl	8000578 <__aeabi_dmul>
 8007a96:	4622      	mov	r2, r4
 8007a98:	4606      	mov	r6, r0
 8007a9a:	460f      	mov	r7, r1
 8007a9c:	462b      	mov	r3, r5
 8007a9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007aa2:	f7f8 fd69 	bl	8000578 <__aeabi_dmul>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	4630      	mov	r0, r6
 8007aac:	4639      	mov	r1, r7
 8007aae:	f7f8 fbad 	bl	800020c <__adddf3>
 8007ab2:	4606      	mov	r6, r0
 8007ab4:	460f      	mov	r7, r1
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4640      	mov	r0, r8
 8007abc:	4649      	mov	r1, r9
 8007abe:	f7f8 fba5 	bl	800020c <__adddf3>
 8007ac2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007ac6:	a33c      	add	r3, pc, #240	@ (adr r3, 8007bb8 <__ieee754_pow+0x760>)
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	4658      	mov	r0, fp
 8007ace:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8007ad2:	460d      	mov	r5, r1
 8007ad4:	f7f8 fd50 	bl	8000578 <__aeabi_dmul>
 8007ad8:	465c      	mov	r4, fp
 8007ada:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ade:	4642      	mov	r2, r8
 8007ae0:	464b      	mov	r3, r9
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	f7f8 fb8f 	bl	8000208 <__aeabi_dsub>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	4630      	mov	r0, r6
 8007af0:	4639      	mov	r1, r7
 8007af2:	f7f8 fb89 	bl	8000208 <__aeabi_dsub>
 8007af6:	a332      	add	r3, pc, #200	@ (adr r3, 8007bc0 <__ieee754_pow+0x768>)
 8007af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afc:	f7f8 fd3c 	bl	8000578 <__aeabi_dmul>
 8007b00:	a331      	add	r3, pc, #196	@ (adr r3, 8007bc8 <__ieee754_pow+0x770>)
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	4606      	mov	r6, r0
 8007b08:	460f      	mov	r7, r1
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	f7f8 fd33 	bl	8000578 <__aeabi_dmul>
 8007b12:	4602      	mov	r2, r0
 8007b14:	460b      	mov	r3, r1
 8007b16:	4630      	mov	r0, r6
 8007b18:	4639      	mov	r1, r7
 8007b1a:	f7f8 fb77 	bl	800020c <__adddf3>
 8007b1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007b20:	4b32      	ldr	r3, [pc, #200]	@ (8007bec <__ieee754_pow+0x794>)
 8007b22:	4413      	add	r3, r2
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	f7f8 fb70 	bl	800020c <__adddf3>
 8007b2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007b32:	f7f8 fcb7 	bl	80004a4 <__aeabi_i2d>
 8007b36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007b38:	4b2d      	ldr	r3, [pc, #180]	@ (8007bf0 <__ieee754_pow+0x798>)
 8007b3a:	4413      	add	r3, r2
 8007b3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b40:	4606      	mov	r6, r0
 8007b42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b46:	460f      	mov	r7, r1
 8007b48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b4c:	f7f8 fb5e 	bl	800020c <__adddf3>
 8007b50:	4642      	mov	r2, r8
 8007b52:	464b      	mov	r3, r9
 8007b54:	f7f8 fb5a 	bl	800020c <__adddf3>
 8007b58:	4632      	mov	r2, r6
 8007b5a:	463b      	mov	r3, r7
 8007b5c:	f7f8 fb56 	bl	800020c <__adddf3>
 8007b60:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8007b64:	4632      	mov	r2, r6
 8007b66:	463b      	mov	r3, r7
 8007b68:	4658      	mov	r0, fp
 8007b6a:	460d      	mov	r5, r1
 8007b6c:	f7f8 fb4c 	bl	8000208 <__aeabi_dsub>
 8007b70:	4642      	mov	r2, r8
 8007b72:	464b      	mov	r3, r9
 8007b74:	f7f8 fb48 	bl	8000208 <__aeabi_dsub>
 8007b78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b7c:	f7f8 fb44 	bl	8000208 <__aeabi_dsub>
 8007b80:	465c      	mov	r4, fp
 8007b82:	4602      	mov	r2, r0
 8007b84:	e036      	b.n	8007bf4 <__ieee754_pow+0x79c>
 8007b86:	bf00      	nop
 8007b88:	4a454eef 	.word	0x4a454eef
 8007b8c:	3fca7e28 	.word	0x3fca7e28
 8007b90:	93c9db65 	.word	0x93c9db65
 8007b94:	3fcd864a 	.word	0x3fcd864a
 8007b98:	a91d4101 	.word	0xa91d4101
 8007b9c:	3fd17460 	.word	0x3fd17460
 8007ba0:	518f264d 	.word	0x518f264d
 8007ba4:	3fd55555 	.word	0x3fd55555
 8007ba8:	db6fabff 	.word	0xdb6fabff
 8007bac:	3fdb6db6 	.word	0x3fdb6db6
 8007bb0:	33333303 	.word	0x33333303
 8007bb4:	3fe33333 	.word	0x3fe33333
 8007bb8:	e0000000 	.word	0xe0000000
 8007bbc:	3feec709 	.word	0x3feec709
 8007bc0:	dc3a03fd 	.word	0xdc3a03fd
 8007bc4:	3feec709 	.word	0x3feec709
 8007bc8:	145b01f5 	.word	0x145b01f5
 8007bcc:	be3e2fe0 	.word	0xbe3e2fe0
 8007bd0:	7ff00000 	.word	0x7ff00000
 8007bd4:	43400000 	.word	0x43400000
 8007bd8:	0003988e 	.word	0x0003988e
 8007bdc:	000bb679 	.word	0x000bb679
 8007be0:	0800a448 	.word	0x0800a448
 8007be4:	3ff00000 	.word	0x3ff00000
 8007be8:	40080000 	.word	0x40080000
 8007bec:	0800a428 	.word	0x0800a428
 8007bf0:	0800a438 	.word	0x0800a438
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bfa:	e5d7      	b.n	80077ac <__ieee754_pow+0x354>
 8007bfc:	f04f 0a01 	mov.w	sl, #1
 8007c00:	e65e      	b.n	80078c0 <__ieee754_pow+0x468>
 8007c02:	a3b4      	add	r3, pc, #720	@ (adr r3, 8007ed4 <__ieee754_pow+0xa7c>)
 8007c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c08:	4630      	mov	r0, r6
 8007c0a:	4639      	mov	r1, r7
 8007c0c:	f7f8 fafe 	bl	800020c <__adddf3>
 8007c10:	4642      	mov	r2, r8
 8007c12:	e9cd 0100 	strd	r0, r1, [sp]
 8007c16:	464b      	mov	r3, r9
 8007c18:	4620      	mov	r0, r4
 8007c1a:	4629      	mov	r1, r5
 8007c1c:	f7f8 faf4 	bl	8000208 <__aeabi_dsub>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c28:	f7f8 ff36 	bl	8000a98 <__aeabi_dcmpgt>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	f47f ae00 	bne.w	8007832 <__ieee754_pow+0x3da>
 8007c32:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8007c36:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007c3a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007c3e:	fa43 fa0a 	asr.w	sl, r3, sl
 8007c42:	44da      	add	sl, fp
 8007c44:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007c48:	489d      	ldr	r0, [pc, #628]	@ (8007ec0 <__ieee754_pow+0xa68>)
 8007c4a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007c4e:	4108      	asrs	r0, r1
 8007c50:	ea00 030a 	and.w	r3, r0, sl
 8007c54:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007c58:	f1c1 0114 	rsb	r1, r1, #20
 8007c5c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007c60:	fa4a fa01 	asr.w	sl, sl, r1
 8007c64:	f1bb 0f00 	cmp.w	fp, #0
 8007c68:	4640      	mov	r0, r8
 8007c6a:	4649      	mov	r1, r9
 8007c6c:	f04f 0200 	mov.w	r2, #0
 8007c70:	bfb8      	it	lt
 8007c72:	f1ca 0a00 	rsblt	sl, sl, #0
 8007c76:	f7f8 fac7 	bl	8000208 <__aeabi_dsub>
 8007c7a:	4680      	mov	r8, r0
 8007c7c:	4689      	mov	r9, r1
 8007c7e:	4632      	mov	r2, r6
 8007c80:	463b      	mov	r3, r7
 8007c82:	4640      	mov	r0, r8
 8007c84:	4649      	mov	r1, r9
 8007c86:	f7f8 fac1 	bl	800020c <__adddf3>
 8007c8a:	2400      	movs	r4, #0
 8007c8c:	a37c      	add	r3, pc, #496	@ (adr r3, 8007e80 <__ieee754_pow+0xa28>)
 8007c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c92:	4620      	mov	r0, r4
 8007c94:	460d      	mov	r5, r1
 8007c96:	f7f8 fc6f 	bl	8000578 <__aeabi_dmul>
 8007c9a:	4642      	mov	r2, r8
 8007c9c:	e9cd 0100 	strd	r0, r1, [sp]
 8007ca0:	464b      	mov	r3, r9
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	f7f8 faaf 	bl	8000208 <__aeabi_dsub>
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	4630      	mov	r0, r6
 8007cb0:	4639      	mov	r1, r7
 8007cb2:	f7f8 faa9 	bl	8000208 <__aeabi_dsub>
 8007cb6:	a374      	add	r3, pc, #464	@ (adr r3, 8007e88 <__ieee754_pow+0xa30>)
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	f7f8 fc5c 	bl	8000578 <__aeabi_dmul>
 8007cc0:	a373      	add	r3, pc, #460	@ (adr r3, 8007e90 <__ieee754_pow+0xa38>)
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	4680      	mov	r8, r0
 8007cc8:	4689      	mov	r9, r1
 8007cca:	4620      	mov	r0, r4
 8007ccc:	4629      	mov	r1, r5
 8007cce:	f7f8 fc53 	bl	8000578 <__aeabi_dmul>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4640      	mov	r0, r8
 8007cd8:	4649      	mov	r1, r9
 8007cda:	f7f8 fa97 	bl	800020c <__adddf3>
 8007cde:	4604      	mov	r4, r0
 8007ce0:	460d      	mov	r5, r1
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cea:	f7f8 fa8f 	bl	800020c <__adddf3>
 8007cee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cf2:	4680      	mov	r8, r0
 8007cf4:	4689      	mov	r9, r1
 8007cf6:	f7f8 fa87 	bl	8000208 <__aeabi_dsub>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4620      	mov	r0, r4
 8007d00:	4629      	mov	r1, r5
 8007d02:	f7f8 fa81 	bl	8000208 <__aeabi_dsub>
 8007d06:	4642      	mov	r2, r8
 8007d08:	4606      	mov	r6, r0
 8007d0a:	460f      	mov	r7, r1
 8007d0c:	464b      	mov	r3, r9
 8007d0e:	4640      	mov	r0, r8
 8007d10:	4649      	mov	r1, r9
 8007d12:	f7f8 fc31 	bl	8000578 <__aeabi_dmul>
 8007d16:	a360      	add	r3, pc, #384	@ (adr r3, 8007e98 <__ieee754_pow+0xa40>)
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	460d      	mov	r5, r1
 8007d20:	f7f8 fc2a 	bl	8000578 <__aeabi_dmul>
 8007d24:	a35e      	add	r3, pc, #376	@ (adr r3, 8007ea0 <__ieee754_pow+0xa48>)
 8007d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2a:	f7f8 fa6d 	bl	8000208 <__aeabi_dsub>
 8007d2e:	4622      	mov	r2, r4
 8007d30:	462b      	mov	r3, r5
 8007d32:	f7f8 fc21 	bl	8000578 <__aeabi_dmul>
 8007d36:	a35c      	add	r3, pc, #368	@ (adr r3, 8007ea8 <__ieee754_pow+0xa50>)
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	f7f8 fa66 	bl	800020c <__adddf3>
 8007d40:	4622      	mov	r2, r4
 8007d42:	462b      	mov	r3, r5
 8007d44:	f7f8 fc18 	bl	8000578 <__aeabi_dmul>
 8007d48:	a359      	add	r3, pc, #356	@ (adr r3, 8007eb0 <__ieee754_pow+0xa58>)
 8007d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4e:	f7f8 fa5b 	bl	8000208 <__aeabi_dsub>
 8007d52:	4622      	mov	r2, r4
 8007d54:	462b      	mov	r3, r5
 8007d56:	f7f8 fc0f 	bl	8000578 <__aeabi_dmul>
 8007d5a:	a357      	add	r3, pc, #348	@ (adr r3, 8007eb8 <__ieee754_pow+0xa60>)
 8007d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d60:	f7f8 fa54 	bl	800020c <__adddf3>
 8007d64:	4622      	mov	r2, r4
 8007d66:	462b      	mov	r3, r5
 8007d68:	f7f8 fc06 	bl	8000578 <__aeabi_dmul>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4640      	mov	r0, r8
 8007d72:	4649      	mov	r1, r9
 8007d74:	f7f8 fa48 	bl	8000208 <__aeabi_dsub>
 8007d78:	4604      	mov	r4, r0
 8007d7a:	460d      	mov	r5, r1
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4640      	mov	r0, r8
 8007d82:	4649      	mov	r1, r9
 8007d84:	f7f8 fbf8 	bl	8000578 <__aeabi_dmul>
 8007d88:	2200      	movs	r2, #0
 8007d8a:	e9cd 0100 	strd	r0, r1, [sp]
 8007d8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007d92:	4620      	mov	r0, r4
 8007d94:	4629      	mov	r1, r5
 8007d96:	f7f8 fa37 	bl	8000208 <__aeabi_dsub>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007da2:	f7f8 fd13 	bl	80007cc <__aeabi_ddiv>
 8007da6:	4632      	mov	r2, r6
 8007da8:	4604      	mov	r4, r0
 8007daa:	460d      	mov	r5, r1
 8007dac:	463b      	mov	r3, r7
 8007dae:	4640      	mov	r0, r8
 8007db0:	4649      	mov	r1, r9
 8007db2:	f7f8 fbe1 	bl	8000578 <__aeabi_dmul>
 8007db6:	4632      	mov	r2, r6
 8007db8:	463b      	mov	r3, r7
 8007dba:	f7f8 fa27 	bl	800020c <__adddf3>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	f7f8 fa1f 	bl	8000208 <__aeabi_dsub>
 8007dca:	4642      	mov	r2, r8
 8007dcc:	464b      	mov	r3, r9
 8007dce:	f7f8 fa1b 	bl	8000208 <__aeabi_dsub>
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	493b      	ldr	r1, [pc, #236]	@ (8007ec4 <__ieee754_pow+0xa6c>)
 8007dd8:	2000      	movs	r0, #0
 8007dda:	f7f8 fa15 	bl	8000208 <__aeabi_dsub>
 8007dde:	ec41 0b10 	vmov	d0, r0, r1
 8007de2:	ee10 3a90 	vmov	r3, s1
 8007de6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007dea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dee:	da30      	bge.n	8007e52 <__ieee754_pow+0x9fa>
 8007df0:	4650      	mov	r0, sl
 8007df2:	f000 f87d 	bl	8007ef0 <scalbn>
 8007df6:	ec51 0b10 	vmov	r0, r1, d0
 8007dfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dfe:	f7ff bbd2 	b.w	80075a6 <__ieee754_pow+0x14e>
 8007e02:	4c31      	ldr	r4, [pc, #196]	@ (8007ec8 <__ieee754_pow+0xa70>)
 8007e04:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007e08:	42a3      	cmp	r3, r4
 8007e0a:	d91a      	bls.n	8007e42 <__ieee754_pow+0x9ea>
 8007e0c:	4b2f      	ldr	r3, [pc, #188]	@ (8007ecc <__ieee754_pow+0xa74>)
 8007e0e:	440b      	add	r3, r1
 8007e10:	4303      	orrs	r3, r0
 8007e12:	d009      	beq.n	8007e28 <__ieee754_pow+0x9d0>
 8007e14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f7f8 fe1e 	bl	8000a5c <__aeabi_dcmplt>
 8007e20:	3800      	subs	r0, #0
 8007e22:	bf18      	it	ne
 8007e24:	2001      	movne	r0, #1
 8007e26:	e42b      	b.n	8007680 <__ieee754_pow+0x228>
 8007e28:	4642      	mov	r2, r8
 8007e2a:	464b      	mov	r3, r9
 8007e2c:	f7f8 f9ec 	bl	8000208 <__aeabi_dsub>
 8007e30:	4632      	mov	r2, r6
 8007e32:	463b      	mov	r3, r7
 8007e34:	f7f8 fe26 	bl	8000a84 <__aeabi_dcmpge>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	d1eb      	bne.n	8007e14 <__ieee754_pow+0x9bc>
 8007e3c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8007edc <__ieee754_pow+0xa84>
 8007e40:	e6f7      	b.n	8007c32 <__ieee754_pow+0x7da>
 8007e42:	469a      	mov	sl, r3
 8007e44:	4b22      	ldr	r3, [pc, #136]	@ (8007ed0 <__ieee754_pow+0xa78>)
 8007e46:	459a      	cmp	sl, r3
 8007e48:	f63f aef3 	bhi.w	8007c32 <__ieee754_pow+0x7da>
 8007e4c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007e50:	e715      	b.n	8007c7e <__ieee754_pow+0x826>
 8007e52:	ec51 0b10 	vmov	r0, r1, d0
 8007e56:	4619      	mov	r1, r3
 8007e58:	e7cf      	b.n	8007dfa <__ieee754_pow+0x9a2>
 8007e5a:	491a      	ldr	r1, [pc, #104]	@ (8007ec4 <__ieee754_pow+0xa6c>)
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	f7ff bb18 	b.w	8007492 <__ieee754_pow+0x3a>
 8007e62:	2000      	movs	r0, #0
 8007e64:	2100      	movs	r1, #0
 8007e66:	f7ff bb14 	b.w	8007492 <__ieee754_pow+0x3a>
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	4639      	mov	r1, r7
 8007e6e:	f7ff bb10 	b.w	8007492 <__ieee754_pow+0x3a>
 8007e72:	460c      	mov	r4, r1
 8007e74:	f7ff bb5e 	b.w	8007534 <__ieee754_pow+0xdc>
 8007e78:	2400      	movs	r4, #0
 8007e7a:	f7ff bb49 	b.w	8007510 <__ieee754_pow+0xb8>
 8007e7e:	bf00      	nop
 8007e80:	00000000 	.word	0x00000000
 8007e84:	3fe62e43 	.word	0x3fe62e43
 8007e88:	fefa39ef 	.word	0xfefa39ef
 8007e8c:	3fe62e42 	.word	0x3fe62e42
 8007e90:	0ca86c39 	.word	0x0ca86c39
 8007e94:	be205c61 	.word	0xbe205c61
 8007e98:	72bea4d0 	.word	0x72bea4d0
 8007e9c:	3e663769 	.word	0x3e663769
 8007ea0:	c5d26bf1 	.word	0xc5d26bf1
 8007ea4:	3ebbbd41 	.word	0x3ebbbd41
 8007ea8:	af25de2c 	.word	0xaf25de2c
 8007eac:	3f11566a 	.word	0x3f11566a
 8007eb0:	16bebd93 	.word	0x16bebd93
 8007eb4:	3f66c16c 	.word	0x3f66c16c
 8007eb8:	5555553e 	.word	0x5555553e
 8007ebc:	3fc55555 	.word	0x3fc55555
 8007ec0:	fff00000 	.word	0xfff00000
 8007ec4:	3ff00000 	.word	0x3ff00000
 8007ec8:	4090cbff 	.word	0x4090cbff
 8007ecc:	3f6f3400 	.word	0x3f6f3400
 8007ed0:	3fe00000 	.word	0x3fe00000
 8007ed4:	652b82fe 	.word	0x652b82fe
 8007ed8:	3c971547 	.word	0x3c971547
 8007edc:	4090cc00 	.word	0x4090cc00

08007ee0 <fabs>:
 8007ee0:	ec51 0b10 	vmov	r0, r1, d0
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007eea:	ec43 2b10 	vmov	d0, r2, r3
 8007eee:	4770      	bx	lr

08007ef0 <scalbn>:
 8007ef0:	b570      	push	{r4, r5, r6, lr}
 8007ef2:	ec55 4b10 	vmov	r4, r5, d0
 8007ef6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007efa:	4606      	mov	r6, r0
 8007efc:	462b      	mov	r3, r5
 8007efe:	b991      	cbnz	r1, 8007f26 <scalbn+0x36>
 8007f00:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007f04:	4323      	orrs	r3, r4
 8007f06:	d03d      	beq.n	8007f84 <scalbn+0x94>
 8007f08:	4b35      	ldr	r3, [pc, #212]	@ (8007fe0 <scalbn+0xf0>)
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f7f8 fb32 	bl	8000578 <__aeabi_dmul>
 8007f14:	4b33      	ldr	r3, [pc, #204]	@ (8007fe4 <scalbn+0xf4>)
 8007f16:	429e      	cmp	r6, r3
 8007f18:	4604      	mov	r4, r0
 8007f1a:	460d      	mov	r5, r1
 8007f1c:	da0f      	bge.n	8007f3e <scalbn+0x4e>
 8007f1e:	a328      	add	r3, pc, #160	@ (adr r3, 8007fc0 <scalbn+0xd0>)
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	e01e      	b.n	8007f64 <scalbn+0x74>
 8007f26:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007f2a:	4291      	cmp	r1, r2
 8007f2c:	d10b      	bne.n	8007f46 <scalbn+0x56>
 8007f2e:	4622      	mov	r2, r4
 8007f30:	4620      	mov	r0, r4
 8007f32:	4629      	mov	r1, r5
 8007f34:	f7f8 f96a 	bl	800020c <__adddf3>
 8007f38:	4604      	mov	r4, r0
 8007f3a:	460d      	mov	r5, r1
 8007f3c:	e022      	b.n	8007f84 <scalbn+0x94>
 8007f3e:	460b      	mov	r3, r1
 8007f40:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007f44:	3936      	subs	r1, #54	@ 0x36
 8007f46:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007f4a:	4296      	cmp	r6, r2
 8007f4c:	dd0d      	ble.n	8007f6a <scalbn+0x7a>
 8007f4e:	2d00      	cmp	r5, #0
 8007f50:	a11d      	add	r1, pc, #116	@ (adr r1, 8007fc8 <scalbn+0xd8>)
 8007f52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f56:	da02      	bge.n	8007f5e <scalbn+0x6e>
 8007f58:	a11d      	add	r1, pc, #116	@ (adr r1, 8007fd0 <scalbn+0xe0>)
 8007f5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f5e:	a31a      	add	r3, pc, #104	@ (adr r3, 8007fc8 <scalbn+0xd8>)
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f7f8 fb08 	bl	8000578 <__aeabi_dmul>
 8007f68:	e7e6      	b.n	8007f38 <scalbn+0x48>
 8007f6a:	1872      	adds	r2, r6, r1
 8007f6c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007f70:	428a      	cmp	r2, r1
 8007f72:	dcec      	bgt.n	8007f4e <scalbn+0x5e>
 8007f74:	2a00      	cmp	r2, #0
 8007f76:	dd08      	ble.n	8007f8a <scalbn+0x9a>
 8007f78:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007f7c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007f80:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007f84:	ec45 4b10 	vmov	d0, r4, r5
 8007f88:	bd70      	pop	{r4, r5, r6, pc}
 8007f8a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007f8e:	da08      	bge.n	8007fa2 <scalbn+0xb2>
 8007f90:	2d00      	cmp	r5, #0
 8007f92:	a10b      	add	r1, pc, #44	@ (adr r1, 8007fc0 <scalbn+0xd0>)
 8007f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f98:	dac1      	bge.n	8007f1e <scalbn+0x2e>
 8007f9a:	a10f      	add	r1, pc, #60	@ (adr r1, 8007fd8 <scalbn+0xe8>)
 8007f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fa0:	e7bd      	b.n	8007f1e <scalbn+0x2e>
 8007fa2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007fa6:	3236      	adds	r2, #54	@ 0x36
 8007fa8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007fac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe8 <scalbn+0xf8>)
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	e7d4      	b.n	8007f64 <scalbn+0x74>
 8007fba:	bf00      	nop
 8007fbc:	f3af 8000 	nop.w
 8007fc0:	c2f8f359 	.word	0xc2f8f359
 8007fc4:	01a56e1f 	.word	0x01a56e1f
 8007fc8:	8800759c 	.word	0x8800759c
 8007fcc:	7e37e43c 	.word	0x7e37e43c
 8007fd0:	8800759c 	.word	0x8800759c
 8007fd4:	fe37e43c 	.word	0xfe37e43c
 8007fd8:	c2f8f359 	.word	0xc2f8f359
 8007fdc:	81a56e1f 	.word	0x81a56e1f
 8007fe0:	43500000 	.word	0x43500000
 8007fe4:	ffff3cb0 	.word	0xffff3cb0
 8007fe8:	3c900000 	.word	0x3c900000

08007fec <with_errno>:
 8007fec:	b510      	push	{r4, lr}
 8007fee:	ed2d 8b02 	vpush	{d8}
 8007ff2:	eeb0 8a40 	vmov.f32	s16, s0
 8007ff6:	eef0 8a60 	vmov.f32	s17, s1
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	f7ff f984 	bl	8007308 <__errno>
 8008000:	eeb0 0a48 	vmov.f32	s0, s16
 8008004:	eef0 0a68 	vmov.f32	s1, s17
 8008008:	ecbd 8b02 	vpop	{d8}
 800800c:	6004      	str	r4, [r0, #0]
 800800e:	bd10      	pop	{r4, pc}

08008010 <xflow>:
 8008010:	4603      	mov	r3, r0
 8008012:	b507      	push	{r0, r1, r2, lr}
 8008014:	ec51 0b10 	vmov	r0, r1, d0
 8008018:	b183      	cbz	r3, 800803c <xflow+0x2c>
 800801a:	4602      	mov	r2, r0
 800801c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008020:	e9cd 2300 	strd	r2, r3, [sp]
 8008024:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008028:	f7f8 faa6 	bl	8000578 <__aeabi_dmul>
 800802c:	ec41 0b10 	vmov	d0, r0, r1
 8008030:	2022      	movs	r0, #34	@ 0x22
 8008032:	b003      	add	sp, #12
 8008034:	f85d eb04 	ldr.w	lr, [sp], #4
 8008038:	f7ff bfd8 	b.w	8007fec <with_errno>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	e7ee      	b.n	8008020 <xflow+0x10>
 8008042:	0000      	movs	r0, r0
 8008044:	0000      	movs	r0, r0
	...

08008048 <__math_uflow>:
 8008048:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008050 <__math_uflow+0x8>
 800804c:	f7ff bfe0 	b.w	8008010 <xflow>
 8008050:	00000000 	.word	0x00000000
 8008054:	10000000 	.word	0x10000000

08008058 <__math_oflow>:
 8008058:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008060 <__math_oflow+0x8>
 800805c:	f7ff bfd8 	b.w	8008010 <xflow>
 8008060:	00000000 	.word	0x00000000
 8008064:	70000000 	.word	0x70000000

08008068 <__ieee754_sqrt>:
 8008068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806c:	4a68      	ldr	r2, [pc, #416]	@ (8008210 <__ieee754_sqrt+0x1a8>)
 800806e:	ec55 4b10 	vmov	r4, r5, d0
 8008072:	43aa      	bics	r2, r5
 8008074:	462b      	mov	r3, r5
 8008076:	4621      	mov	r1, r4
 8008078:	d110      	bne.n	800809c <__ieee754_sqrt+0x34>
 800807a:	4622      	mov	r2, r4
 800807c:	4620      	mov	r0, r4
 800807e:	4629      	mov	r1, r5
 8008080:	f7f8 fa7a 	bl	8000578 <__aeabi_dmul>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	4620      	mov	r0, r4
 800808a:	4629      	mov	r1, r5
 800808c:	f7f8 f8be 	bl	800020c <__adddf3>
 8008090:	4604      	mov	r4, r0
 8008092:	460d      	mov	r5, r1
 8008094:	ec45 4b10 	vmov	d0, r4, r5
 8008098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800809c:	2d00      	cmp	r5, #0
 800809e:	dc0e      	bgt.n	80080be <__ieee754_sqrt+0x56>
 80080a0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80080a4:	4322      	orrs	r2, r4
 80080a6:	d0f5      	beq.n	8008094 <__ieee754_sqrt+0x2c>
 80080a8:	b19d      	cbz	r5, 80080d2 <__ieee754_sqrt+0x6a>
 80080aa:	4622      	mov	r2, r4
 80080ac:	4620      	mov	r0, r4
 80080ae:	4629      	mov	r1, r5
 80080b0:	f7f8 f8aa 	bl	8000208 <__aeabi_dsub>
 80080b4:	4602      	mov	r2, r0
 80080b6:	460b      	mov	r3, r1
 80080b8:	f7f8 fb88 	bl	80007cc <__aeabi_ddiv>
 80080bc:	e7e8      	b.n	8008090 <__ieee754_sqrt+0x28>
 80080be:	152a      	asrs	r2, r5, #20
 80080c0:	d115      	bne.n	80080ee <__ieee754_sqrt+0x86>
 80080c2:	2000      	movs	r0, #0
 80080c4:	e009      	b.n	80080da <__ieee754_sqrt+0x72>
 80080c6:	0acb      	lsrs	r3, r1, #11
 80080c8:	3a15      	subs	r2, #21
 80080ca:	0549      	lsls	r1, r1, #21
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d0fa      	beq.n	80080c6 <__ieee754_sqrt+0x5e>
 80080d0:	e7f7      	b.n	80080c2 <__ieee754_sqrt+0x5a>
 80080d2:	462a      	mov	r2, r5
 80080d4:	e7fa      	b.n	80080cc <__ieee754_sqrt+0x64>
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	3001      	adds	r0, #1
 80080da:	02dc      	lsls	r4, r3, #11
 80080dc:	d5fb      	bpl.n	80080d6 <__ieee754_sqrt+0x6e>
 80080de:	1e44      	subs	r4, r0, #1
 80080e0:	1b12      	subs	r2, r2, r4
 80080e2:	f1c0 0420 	rsb	r4, r0, #32
 80080e6:	fa21 f404 	lsr.w	r4, r1, r4
 80080ea:	4323      	orrs	r3, r4
 80080ec:	4081      	lsls	r1, r0
 80080ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080f2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80080f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080fa:	07d2      	lsls	r2, r2, #31
 80080fc:	bf5c      	itt	pl
 80080fe:	005b      	lslpl	r3, r3, #1
 8008100:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008104:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008108:	bf58      	it	pl
 800810a:	0049      	lslpl	r1, r1, #1
 800810c:	2600      	movs	r6, #0
 800810e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008112:	106d      	asrs	r5, r5, #1
 8008114:	0049      	lsls	r1, r1, #1
 8008116:	2016      	movs	r0, #22
 8008118:	4632      	mov	r2, r6
 800811a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800811e:	1917      	adds	r7, r2, r4
 8008120:	429f      	cmp	r7, r3
 8008122:	bfde      	ittt	le
 8008124:	193a      	addle	r2, r7, r4
 8008126:	1bdb      	suble	r3, r3, r7
 8008128:	1936      	addle	r6, r6, r4
 800812a:	0fcf      	lsrs	r7, r1, #31
 800812c:	3801      	subs	r0, #1
 800812e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8008132:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008136:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800813a:	d1f0      	bne.n	800811e <__ieee754_sqrt+0xb6>
 800813c:	4604      	mov	r4, r0
 800813e:	2720      	movs	r7, #32
 8008140:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008144:	429a      	cmp	r2, r3
 8008146:	eb00 0e0c 	add.w	lr, r0, ip
 800814a:	db02      	blt.n	8008152 <__ieee754_sqrt+0xea>
 800814c:	d113      	bne.n	8008176 <__ieee754_sqrt+0x10e>
 800814e:	458e      	cmp	lr, r1
 8008150:	d811      	bhi.n	8008176 <__ieee754_sqrt+0x10e>
 8008152:	f1be 0f00 	cmp.w	lr, #0
 8008156:	eb0e 000c 	add.w	r0, lr, ip
 800815a:	da42      	bge.n	80081e2 <__ieee754_sqrt+0x17a>
 800815c:	2800      	cmp	r0, #0
 800815e:	db40      	blt.n	80081e2 <__ieee754_sqrt+0x17a>
 8008160:	f102 0801 	add.w	r8, r2, #1
 8008164:	1a9b      	subs	r3, r3, r2
 8008166:	458e      	cmp	lr, r1
 8008168:	bf88      	it	hi
 800816a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800816e:	eba1 010e 	sub.w	r1, r1, lr
 8008172:	4464      	add	r4, ip
 8008174:	4642      	mov	r2, r8
 8008176:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800817a:	3f01      	subs	r7, #1
 800817c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008180:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008184:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008188:	d1dc      	bne.n	8008144 <__ieee754_sqrt+0xdc>
 800818a:	4319      	orrs	r1, r3
 800818c:	d01b      	beq.n	80081c6 <__ieee754_sqrt+0x15e>
 800818e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8008214 <__ieee754_sqrt+0x1ac>
 8008192:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008218 <__ieee754_sqrt+0x1b0>
 8008196:	e9da 0100 	ldrd	r0, r1, [sl]
 800819a:	e9db 2300 	ldrd	r2, r3, [fp]
 800819e:	f7f8 f833 	bl	8000208 <__aeabi_dsub>
 80081a2:	e9da 8900 	ldrd	r8, r9, [sl]
 80081a6:	4602      	mov	r2, r0
 80081a8:	460b      	mov	r3, r1
 80081aa:	4640      	mov	r0, r8
 80081ac:	4649      	mov	r1, r9
 80081ae:	f7f8 fc5f 	bl	8000a70 <__aeabi_dcmple>
 80081b2:	b140      	cbz	r0, 80081c6 <__ieee754_sqrt+0x15e>
 80081b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80081b8:	e9da 0100 	ldrd	r0, r1, [sl]
 80081bc:	e9db 2300 	ldrd	r2, r3, [fp]
 80081c0:	d111      	bne.n	80081e6 <__ieee754_sqrt+0x17e>
 80081c2:	3601      	adds	r6, #1
 80081c4:	463c      	mov	r4, r7
 80081c6:	1072      	asrs	r2, r6, #1
 80081c8:	0863      	lsrs	r3, r4, #1
 80081ca:	07f1      	lsls	r1, r6, #31
 80081cc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80081d0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80081d4:	bf48      	it	mi
 80081d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80081da:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80081de:	4618      	mov	r0, r3
 80081e0:	e756      	b.n	8008090 <__ieee754_sqrt+0x28>
 80081e2:	4690      	mov	r8, r2
 80081e4:	e7be      	b.n	8008164 <__ieee754_sqrt+0xfc>
 80081e6:	f7f8 f811 	bl	800020c <__adddf3>
 80081ea:	e9da 8900 	ldrd	r8, r9, [sl]
 80081ee:	4602      	mov	r2, r0
 80081f0:	460b      	mov	r3, r1
 80081f2:	4640      	mov	r0, r8
 80081f4:	4649      	mov	r1, r9
 80081f6:	f7f8 fc31 	bl	8000a5c <__aeabi_dcmplt>
 80081fa:	b120      	cbz	r0, 8008206 <__ieee754_sqrt+0x19e>
 80081fc:	1ca0      	adds	r0, r4, #2
 80081fe:	bf08      	it	eq
 8008200:	3601      	addeq	r6, #1
 8008202:	3402      	adds	r4, #2
 8008204:	e7df      	b.n	80081c6 <__ieee754_sqrt+0x15e>
 8008206:	1c63      	adds	r3, r4, #1
 8008208:	f023 0401 	bic.w	r4, r3, #1
 800820c:	e7db      	b.n	80081c6 <__ieee754_sqrt+0x15e>
 800820e:	bf00      	nop
 8008210:	7ff00000 	.word	0x7ff00000
 8008214:	200000a8 	.word	0x200000a8
 8008218:	200000a0 	.word	0x200000a0

0800821c <_init>:
 800821c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821e:	bf00      	nop
 8008220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008222:	bc08      	pop	{r3}
 8008224:	469e      	mov	lr, r3
 8008226:	4770      	bx	lr

08008228 <_fini>:
 8008228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822a:	bf00      	nop
 800822c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800822e:	bc08      	pop	{r3}
 8008230:	469e      	mov	lr, r3
 8008232:	4770      	bx	lr
