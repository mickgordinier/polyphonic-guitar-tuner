
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e76c  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000157a0  0800e930  0800e930  0001e930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080240d0  080240d0  00040080  2**0
                  CONTENTS
  4 .ARM          00000008  080240d0  080240d0  000340d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080240d8  080240d8  00040080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080240d8  080240d8  000340d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080240dc  080240dc  000340dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080240e0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000080  08024160  00040080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  08024160  000404e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040080  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000400b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000257ea  00000000  00000000  00040168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004578  00000000  00000000  00065952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001918  00000000  00000000  00069ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001938e  00000000  00000000  0006b7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000867d  00000000  00000000  00084b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000129d  00000000  00000000  0008d1f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00007374  00000000  00000000  0008e490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000063  00000000  00000000  00095804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003477  00000000  00000000  00095867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 000000d8  00000000  00000000  00098cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000080 	.word	0x20000080
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e914 	.word	0x0800e914

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000084 	.word	0x20000084
 80001fc:	0800e914 	.word	0x0800e914

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <__aeabi_drsub>:
 8000214:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000218:	e002      	b.n	8000220 <__adddf3>
 800021a:	bf00      	nop

0800021c <__aeabi_dsub>:
 800021c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000220 <__adddf3>:
 8000220:	b530      	push	{r4, r5, lr}
 8000222:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000226:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022a:	ea94 0f05 	teq	r4, r5
 800022e:	bf08      	it	eq
 8000230:	ea90 0f02 	teqeq	r0, r2
 8000234:	bf1f      	itttt	ne
 8000236:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000242:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000246:	f000 80e2 	beq.w	800040e <__adddf3+0x1ee>
 800024a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000252:	bfb8      	it	lt
 8000254:	426d      	neglt	r5, r5
 8000256:	dd0c      	ble.n	8000272 <__adddf3+0x52>
 8000258:	442c      	add	r4, r5
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	ea82 0000 	eor.w	r0, r2, r0
 8000266:	ea83 0101 	eor.w	r1, r3, r1
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	2d36      	cmp	r5, #54	; 0x36
 8000274:	bf88      	it	hi
 8000276:	bd30      	pophi	{r4, r5, pc}
 8000278:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800027c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000280:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000284:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x70>
 800028a:	4240      	negs	r0, r0
 800028c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000290:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000294:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000298:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x84>
 800029e:	4252      	negs	r2, r2
 80002a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a4:	ea94 0f05 	teq	r4, r5
 80002a8:	f000 80a7 	beq.w	80003fa <__adddf3+0x1da>
 80002ac:	f1a4 0401 	sub.w	r4, r4, #1
 80002b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b4:	db0d      	blt.n	80002d2 <__adddf3+0xb2>
 80002b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ba:	fa22 f205 	lsr.w	r2, r2, r5
 80002be:	1880      	adds	r0, r0, r2
 80002c0:	f141 0100 	adc.w	r1, r1, #0
 80002c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c8:	1880      	adds	r0, r0, r2
 80002ca:	fa43 f305 	asr.w	r3, r3, r5
 80002ce:	4159      	adcs	r1, r3
 80002d0:	e00e      	b.n	80002f0 <__adddf3+0xd0>
 80002d2:	f1a5 0520 	sub.w	r5, r5, #32
 80002d6:	f10e 0e20 	add.w	lr, lr, #32
 80002da:	2a01      	cmp	r2, #1
 80002dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e0:	bf28      	it	cs
 80002e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	18c0      	adds	r0, r0, r3
 80002ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f4:	d507      	bpl.n	8000306 <__adddf3+0xe6>
 80002f6:	f04f 0e00 	mov.w	lr, #0
 80002fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000302:	eb6e 0101 	sbc.w	r1, lr, r1
 8000306:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030a:	d31b      	bcc.n	8000344 <__adddf3+0x124>
 800030c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000310:	d30c      	bcc.n	800032c <__adddf3+0x10c>
 8000312:	0849      	lsrs	r1, r1, #1
 8000314:	ea5f 0030 	movs.w	r0, r0, rrx
 8000318:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800031c:	f104 0401 	add.w	r4, r4, #1
 8000320:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000324:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000328:	f080 809a 	bcs.w	8000460 <__adddf3+0x240>
 800032c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000330:	bf08      	it	eq
 8000332:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000336:	f150 0000 	adcs.w	r0, r0, #0
 800033a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033e:	ea41 0105 	orr.w	r1, r1, r5
 8000342:	bd30      	pop	{r4, r5, pc}
 8000344:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000348:	4140      	adcs	r0, r0
 800034a:	eb41 0101 	adc.w	r1, r1, r1
 800034e:	3c01      	subs	r4, #1
 8000350:	bf28      	it	cs
 8000352:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000356:	d2e9      	bcs.n	800032c <__adddf3+0x10c>
 8000358:	f091 0f00 	teq	r1, #0
 800035c:	bf04      	itt	eq
 800035e:	4601      	moveq	r1, r0
 8000360:	2000      	moveq	r0, #0
 8000362:	fab1 f381 	clz	r3, r1
 8000366:	bf08      	it	eq
 8000368:	3320      	addeq	r3, #32
 800036a:	f1a3 030b 	sub.w	r3, r3, #11
 800036e:	f1b3 0220 	subs.w	r2, r3, #32
 8000372:	da0c      	bge.n	800038e <__adddf3+0x16e>
 8000374:	320c      	adds	r2, #12
 8000376:	dd08      	ble.n	800038a <__adddf3+0x16a>
 8000378:	f102 0c14 	add.w	ip, r2, #20
 800037c:	f1c2 020c 	rsb	r2, r2, #12
 8000380:	fa01 f00c 	lsl.w	r0, r1, ip
 8000384:	fa21 f102 	lsr.w	r1, r1, r2
 8000388:	e00c      	b.n	80003a4 <__adddf3+0x184>
 800038a:	f102 0214 	add.w	r2, r2, #20
 800038e:	bfd8      	it	le
 8000390:	f1c2 0c20 	rsble	ip, r2, #32
 8000394:	fa01 f102 	lsl.w	r1, r1, r2
 8000398:	fa20 fc0c 	lsr.w	ip, r0, ip
 800039c:	bfdc      	itt	le
 800039e:	ea41 010c 	orrle.w	r1, r1, ip
 80003a2:	4090      	lslle	r0, r2
 80003a4:	1ae4      	subs	r4, r4, r3
 80003a6:	bfa2      	ittt	ge
 80003a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ac:	4329      	orrge	r1, r5
 80003ae:	bd30      	popge	{r4, r5, pc}
 80003b0:	ea6f 0404 	mvn.w	r4, r4
 80003b4:	3c1f      	subs	r4, #31
 80003b6:	da1c      	bge.n	80003f2 <__adddf3+0x1d2>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc0e      	bgt.n	80003da <__adddf3+0x1ba>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0220 	rsb	r2, r4, #32
 80003c4:	fa20 f004 	lsr.w	r0, r0, r4
 80003c8:	fa01 f302 	lsl.w	r3, r1, r2
 80003cc:	ea40 0003 	orr.w	r0, r0, r3
 80003d0:	fa21 f304 	lsr.w	r3, r1, r4
 80003d4:	ea45 0103 	orr.w	r1, r5, r3
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f1c4 040c 	rsb	r4, r4, #12
 80003de:	f1c4 0220 	rsb	r2, r4, #32
 80003e2:	fa20 f002 	lsr.w	r0, r0, r2
 80003e6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ea:	ea40 0003 	orr.w	r0, r0, r3
 80003ee:	4629      	mov	r1, r5
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	fa21 f004 	lsr.w	r0, r1, r4
 80003f6:	4629      	mov	r1, r5
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f094 0f00 	teq	r4, #0
 80003fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000402:	bf06      	itte	eq
 8000404:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000408:	3401      	addeq	r4, #1
 800040a:	3d01      	subne	r5, #1
 800040c:	e74e      	b.n	80002ac <__adddf3+0x8c>
 800040e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000412:	bf18      	it	ne
 8000414:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000418:	d029      	beq.n	800046e <__adddf3+0x24e>
 800041a:	ea94 0f05 	teq	r4, r5
 800041e:	bf08      	it	eq
 8000420:	ea90 0f02 	teqeq	r0, r2
 8000424:	d005      	beq.n	8000432 <__adddf3+0x212>
 8000426:	ea54 0c00 	orrs.w	ip, r4, r0
 800042a:	bf04      	itt	eq
 800042c:	4619      	moveq	r1, r3
 800042e:	4610      	moveq	r0, r2
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea91 0f03 	teq	r1, r3
 8000436:	bf1e      	ittt	ne
 8000438:	2100      	movne	r1, #0
 800043a:	2000      	movne	r0, #0
 800043c:	bd30      	popne	{r4, r5, pc}
 800043e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000442:	d105      	bne.n	8000450 <__adddf3+0x230>
 8000444:	0040      	lsls	r0, r0, #1
 8000446:	4149      	adcs	r1, r1
 8000448:	bf28      	it	cs
 800044a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000454:	bf3c      	itt	cc
 8000456:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045a:	bd30      	popcc	{r4, r5, pc}
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000464:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000468:	f04f 0000 	mov.w	r0, #0
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000472:	bf1a      	itte	ne
 8000474:	4619      	movne	r1, r3
 8000476:	4610      	movne	r0, r2
 8000478:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800047c:	bf1c      	itt	ne
 800047e:	460b      	movne	r3, r1
 8000480:	4602      	movne	r2, r0
 8000482:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000486:	bf06      	itte	eq
 8000488:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800048c:	ea91 0f03 	teqeq	r1, r3
 8000490:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	bf00      	nop

08000498 <__aeabi_ui2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ac:	f04f 0500 	mov.w	r5, #0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e750      	b.n	8000358 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_i2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d0:	bf48      	it	mi
 80004d2:	4240      	negmi	r0, r0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e73e      	b.n	8000358 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_f2d>:
 80004dc:	0042      	lsls	r2, r0, #1
 80004de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ea:	bf1f      	itttt	ne
 80004ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f8:	4770      	bxne	lr
 80004fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fe:	bf08      	it	eq
 8000500:	4770      	bxeq	lr
 8000502:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000506:	bf04      	itt	eq
 8000508:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000514:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000518:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800051c:	e71c      	b.n	8000358 <__adddf3+0x138>
 800051e:	bf00      	nop

08000520 <__aeabi_ul2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f04f 0500 	mov.w	r5, #0
 800052e:	e00a      	b.n	8000546 <__aeabi_l2d+0x16>

08000530 <__aeabi_l2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053e:	d502      	bpl.n	8000546 <__aeabi_l2d+0x16>
 8000540:	4240      	negs	r0, r0
 8000542:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000546:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000552:	f43f aed8 	beq.w	8000306 <__adddf3+0xe6>
 8000556:	f04f 0203 	mov.w	r2, #3
 800055a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055e:	bf18      	it	ne
 8000560:	3203      	addne	r2, #3
 8000562:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000566:	bf18      	it	ne
 8000568:	3203      	addne	r2, #3
 800056a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056e:	f1c2 0320 	rsb	r3, r2, #32
 8000572:	fa00 fc03 	lsl.w	ip, r0, r3
 8000576:	fa20 f002 	lsr.w	r0, r0, r2
 800057a:	fa01 fe03 	lsl.w	lr, r1, r3
 800057e:	ea40 000e 	orr.w	r0, r0, lr
 8000582:	fa21 f102 	lsr.w	r1, r1, r2
 8000586:	4414      	add	r4, r2
 8000588:	e6bd      	b.n	8000306 <__adddf3+0xe6>
 800058a:	bf00      	nop

0800058c <__aeabi_dmul>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000592:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000596:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059a:	bf1d      	ittte	ne
 800059c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a0:	ea94 0f0c 	teqne	r4, ip
 80005a4:	ea95 0f0c 	teqne	r5, ip
 80005a8:	f000 f8de 	bleq	8000768 <__aeabi_dmul+0x1dc>
 80005ac:	442c      	add	r4, r5
 80005ae:	ea81 0603 	eor.w	r6, r1, r3
 80005b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005be:	bf18      	it	ne
 80005c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005cc:	d038      	beq.n	8000640 <__aeabi_dmul+0xb4>
 80005ce:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d2:	f04f 0500 	mov.w	r5, #0
 80005d6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005da:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005de:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e2:	f04f 0600 	mov.w	r6, #0
 80005e6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ea:	f09c 0f00 	teq	ip, #0
 80005ee:	bf18      	it	ne
 80005f0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005fc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000600:	d204      	bcs.n	800060c <__aeabi_dmul+0x80>
 8000602:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000606:	416d      	adcs	r5, r5
 8000608:	eb46 0606 	adc.w	r6, r6, r6
 800060c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000610:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000614:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000618:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800061c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000620:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000624:	bf88      	it	hi
 8000626:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062a:	d81e      	bhi.n	800066a <__aeabi_dmul+0xde>
 800062c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000644:	ea46 0101 	orr.w	r1, r6, r1
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	ea81 0103 	eor.w	r1, r1, r3
 8000650:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000654:	bfc2      	ittt	gt
 8000656:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065e:	bd70      	popgt	{r4, r5, r6, pc}
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f04f 0e00 	mov.w	lr, #0
 8000668:	3c01      	subs	r4, #1
 800066a:	f300 80ab 	bgt.w	80007c4 <__aeabi_dmul+0x238>
 800066e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000672:	bfde      	ittt	le
 8000674:	2000      	movle	r0, #0
 8000676:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067a:	bd70      	pople	{r4, r5, r6, pc}
 800067c:	f1c4 0400 	rsb	r4, r4, #0
 8000680:	3c20      	subs	r4, #32
 8000682:	da35      	bge.n	80006f0 <__aeabi_dmul+0x164>
 8000684:	340c      	adds	r4, #12
 8000686:	dc1b      	bgt.n	80006c0 <__aeabi_dmul+0x134>
 8000688:	f104 0414 	add.w	r4, r4, #20
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f305 	lsl.w	r3, r0, r5
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f205 	lsl.w	r2, r1, r5
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	fa21 f604 	lsr.w	r6, r1, r4
 80006b0:	eb42 0106 	adc.w	r1, r2, r6
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 040c 	rsb	r4, r4, #12
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f304 	lsl.w	r3, r0, r4
 80006cc:	fa20 f005 	lsr.w	r0, r0, r5
 80006d0:	fa01 f204 	lsl.w	r2, r1, r4
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	f141 0100 	adc.w	r1, r1, #0
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f205 	lsl.w	r2, r0, r5
 80006f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006fc:	fa20 f304 	lsr.w	r3, r0, r4
 8000700:	fa01 f205 	lsl.w	r2, r1, r5
 8000704:	ea43 0302 	orr.w	r3, r3, r2
 8000708:	fa21 f004 	lsr.w	r0, r1, r4
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	fa21 f204 	lsr.w	r2, r1, r4
 8000714:	ea20 0002 	bic.w	r0, r0, r2
 8000718:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f094 0f00 	teq	r4, #0
 800072c:	d10f      	bne.n	800074e <__aeabi_dmul+0x1c2>
 800072e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000732:	0040      	lsls	r0, r0, #1
 8000734:	eb41 0101 	adc.w	r1, r1, r1
 8000738:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800073c:	bf08      	it	eq
 800073e:	3c01      	subeq	r4, #1
 8000740:	d0f7      	beq.n	8000732 <__aeabi_dmul+0x1a6>
 8000742:	ea41 0106 	orr.w	r1, r1, r6
 8000746:	f095 0f00 	teq	r5, #0
 800074a:	bf18      	it	ne
 800074c:	4770      	bxne	lr
 800074e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000752:	0052      	lsls	r2, r2, #1
 8000754:	eb43 0303 	adc.w	r3, r3, r3
 8000758:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800075c:	bf08      	it	eq
 800075e:	3d01      	subeq	r5, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1c6>
 8000762:	ea43 0306 	orr.w	r3, r3, r6
 8000766:	4770      	bx	lr
 8000768:	ea94 0f0c 	teq	r4, ip
 800076c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000770:	bf18      	it	ne
 8000772:	ea95 0f0c 	teqne	r5, ip
 8000776:	d00c      	beq.n	8000792 <__aeabi_dmul+0x206>
 8000778:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077c:	bf18      	it	ne
 800077e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000782:	d1d1      	bne.n	8000728 <__aeabi_dmul+0x19c>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000796:	bf06      	itte	eq
 8000798:	4610      	moveq	r0, r2
 800079a:	4619      	moveq	r1, r3
 800079c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a0:	d019      	beq.n	80007d6 <__aeabi_dmul+0x24a>
 80007a2:	ea94 0f0c 	teq	r4, ip
 80007a6:	d102      	bne.n	80007ae <__aeabi_dmul+0x222>
 80007a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ac:	d113      	bne.n	80007d6 <__aeabi_dmul+0x24a>
 80007ae:	ea95 0f0c 	teq	r5, ip
 80007b2:	d105      	bne.n	80007c0 <__aeabi_dmul+0x234>
 80007b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b8:	bf1c      	itt	ne
 80007ba:	4610      	movne	r0, r2
 80007bc:	4619      	movne	r1, r3
 80007be:	d10a      	bne.n	80007d6 <__aeabi_dmul+0x24a>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d0:	f04f 0000 	mov.w	r0, #0
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007de:	bd70      	pop	{r4, r5, r6, pc}

080007e0 <__aeabi_ddiv>:
 80007e0:	b570      	push	{r4, r5, r6, lr}
 80007e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ee:	bf1d      	ittte	ne
 80007f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f4:	ea94 0f0c 	teqne	r4, ip
 80007f8:	ea95 0f0c 	teqne	r5, ip
 80007fc:	f000 f8a7 	bleq	800094e <__aeabi_ddiv+0x16e>
 8000800:	eba4 0405 	sub.w	r4, r4, r5
 8000804:	ea81 0e03 	eor.w	lr, r1, r3
 8000808:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800080c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000810:	f000 8088 	beq.w	8000924 <__aeabi_ddiv+0x144>
 8000814:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000818:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800081c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000820:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000824:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000828:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800082c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000830:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000834:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000838:	429d      	cmp	r5, r3
 800083a:	bf08      	it	eq
 800083c:	4296      	cmpeq	r6, r2
 800083e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000842:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000846:	d202      	bcs.n	800084e <__aeabi_ddiv+0x6e>
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	1ab6      	subs	r6, r6, r2
 8000850:	eb65 0503 	sbc.w	r5, r5, r3
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 000c 	orrcs.w	r0, r0, ip
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008bc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c0:	d018      	beq.n	80008f4 <__aeabi_ddiv+0x114>
 80008c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008de:	d1c0      	bne.n	8000862 <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	d10b      	bne.n	80008fe <__aeabi_ddiv+0x11e>
 80008e6:	ea41 0100 	orr.w	r1, r1, r0
 80008ea:	f04f 0000 	mov.w	r0, #0
 80008ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f2:	e7b6      	b.n	8000862 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	bf04      	itt	eq
 80008fa:	4301      	orreq	r1, r0
 80008fc:	2000      	moveq	r0, #0
 80008fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000902:	bf88      	it	hi
 8000904:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000908:	f63f aeaf 	bhi.w	800066a <__aeabi_dmul+0xde>
 800090c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000910:	bf04      	itt	eq
 8000912:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000916:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091a:	f150 0000 	adcs.w	r0, r0, #0
 800091e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000922:	bd70      	pop	{r4, r5, r6, pc}
 8000924:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000928:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800092c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000930:	bfc2      	ittt	gt
 8000932:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000936:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093a:	bd70      	popgt	{r4, r5, r6, pc}
 800093c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000940:	f04f 0e00 	mov.w	lr, #0
 8000944:	3c01      	subs	r4, #1
 8000946:	e690      	b.n	800066a <__aeabi_dmul+0xde>
 8000948:	ea45 0e06 	orr.w	lr, r5, r6
 800094c:	e68d      	b.n	800066a <__aeabi_dmul+0xde>
 800094e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000952:	ea94 0f0c 	teq	r4, ip
 8000956:	bf08      	it	eq
 8000958:	ea95 0f0c 	teqeq	r5, ip
 800095c:	f43f af3b 	beq.w	80007d6 <__aeabi_dmul+0x24a>
 8000960:	ea94 0f0c 	teq	r4, ip
 8000964:	d10a      	bne.n	800097c <__aeabi_ddiv+0x19c>
 8000966:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096a:	f47f af34 	bne.w	80007d6 <__aeabi_dmul+0x24a>
 800096e:	ea95 0f0c 	teq	r5, ip
 8000972:	f47f af25 	bne.w	80007c0 <__aeabi_dmul+0x234>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e72c      	b.n	80007d6 <__aeabi_dmul+0x24a>
 800097c:	ea95 0f0c 	teq	r5, ip
 8000980:	d106      	bne.n	8000990 <__aeabi_ddiv+0x1b0>
 8000982:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000986:	f43f aefd 	beq.w	8000784 <__aeabi_dmul+0x1f8>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e722      	b.n	80007d6 <__aeabi_dmul+0x24a>
 8000990:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000994:	bf18      	it	ne
 8000996:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099a:	f47f aec5 	bne.w	8000728 <__aeabi_dmul+0x19c>
 800099e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a2:	f47f af0d 	bne.w	80007c0 <__aeabi_dmul+0x234>
 80009a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009aa:	f47f aeeb 	bne.w	8000784 <__aeabi_dmul+0x1f8>
 80009ae:	e712      	b.n	80007d6 <__aeabi_dmul+0x24a>

080009b0 <__gedf2>:
 80009b0:	f04f 3cff 	mov.w	ip, #4294967295
 80009b4:	e006      	b.n	80009c4 <__cmpdf2+0x4>
 80009b6:	bf00      	nop

080009b8 <__ledf2>:
 80009b8:	f04f 0c01 	mov.w	ip, #1
 80009bc:	e002      	b.n	80009c4 <__cmpdf2+0x4>
 80009be:	bf00      	nop

080009c0 <__cmpdf2>:
 80009c0:	f04f 0c01 	mov.w	ip, #1
 80009c4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009da:	d01b      	beq.n	8000a14 <__cmpdf2+0x54>
 80009dc:	b001      	add	sp, #4
 80009de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e2:	bf0c      	ite	eq
 80009e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e8:	ea91 0f03 	teqne	r1, r3
 80009ec:	bf02      	ittt	eq
 80009ee:	ea90 0f02 	teqeq	r0, r2
 80009f2:	2000      	moveq	r0, #0
 80009f4:	4770      	bxeq	lr
 80009f6:	f110 0f00 	cmn.w	r0, #0
 80009fa:	ea91 0f03 	teq	r1, r3
 80009fe:	bf58      	it	pl
 8000a00:	4299      	cmppl	r1, r3
 8000a02:	bf08      	it	eq
 8000a04:	4290      	cmpeq	r0, r2
 8000a06:	bf2c      	ite	cs
 8000a08:	17d8      	asrcs	r0, r3, #31
 8000a0a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0e:	f040 0001 	orr.w	r0, r0, #1
 8000a12:	4770      	bx	lr
 8000a14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__cmpdf2+0x64>
 8000a1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a22:	d107      	bne.n	8000a34 <__cmpdf2+0x74>
 8000a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	d1d6      	bne.n	80009dc <__cmpdf2+0x1c>
 8000a2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a32:	d0d3      	beq.n	80009dc <__cmpdf2+0x1c>
 8000a34:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <__aeabi_cdrcmple>:
 8000a3c:	4684      	mov	ip, r0
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4662      	mov	r2, ip
 8000a42:	468c      	mov	ip, r1
 8000a44:	4619      	mov	r1, r3
 8000a46:	4663      	mov	r3, ip
 8000a48:	e000      	b.n	8000a4c <__aeabi_cdcmpeq>
 8000a4a:	bf00      	nop

08000a4c <__aeabi_cdcmpeq>:
 8000a4c:	b501      	push	{r0, lr}
 8000a4e:	f7ff ffb7 	bl	80009c0 <__cmpdf2>
 8000a52:	2800      	cmp	r0, #0
 8000a54:	bf48      	it	mi
 8000a56:	f110 0f00 	cmnmi.w	r0, #0
 8000a5a:	bd01      	pop	{r0, pc}

08000a5c <__aeabi_dcmpeq>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff fff4 	bl	8000a4c <__aeabi_cdcmpeq>
 8000a64:	bf0c      	ite	eq
 8000a66:	2001      	moveq	r0, #1
 8000a68:	2000      	movne	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmplt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffea 	bl	8000a4c <__aeabi_cdcmpeq>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmple>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffe0 	bl	8000a4c <__aeabi_cdcmpeq>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpge>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffce 	bl	8000a3c <__aeabi_cdrcmple>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpgt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffc4 	bl	8000a3c <__aeabi_cdrcmple>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpun>:
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__aeabi_dcmpun+0x10>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d10a      	bne.n	8000ae6 <__aeabi_dcmpun+0x26>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__aeabi_dcmpun+0x20>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d102      	bne.n	8000ae6 <__aeabi_dcmpun+0x26>
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	f04f 0001 	mov.w	r0, #1
 8000aea:	4770      	bx	lr

08000aec <__aeabi_d2iz>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d215      	bcs.n	8000b22 <__aeabi_d2iz+0x36>
 8000af6:	d511      	bpl.n	8000b1c <__aeabi_d2iz+0x30>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d912      	bls.n	8000b28 <__aeabi_d2iz+0x3c>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	bf18      	it	ne
 8000b18:	4240      	negne	r0, r0
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b26:	d105      	bne.n	8000b34 <__aeabi_d2iz+0x48>
 8000b28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	bf08      	it	eq
 8000b2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2f>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b44:	bf24      	itt	cs
 8000b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4e:	d90d      	bls.n	8000b6c <__aeabi_d2f+0x30>
 8000b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b64:	bf08      	it	eq
 8000b66:	f020 0001 	biceq.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b70:	d121      	bne.n	8000bb6 <__aeabi_d2f+0x7a>
 8000b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b76:	bfbc      	itt	lt
 8000b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	4770      	bxlt	lr
 8000b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b86:	f1c2 0218 	rsb	r2, r2, #24
 8000b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b92:	fa20 f002 	lsr.w	r0, r0, r2
 8000b96:	bf18      	it	ne
 8000b98:	f040 0001 	orrne.w	r0, r0, #1
 8000b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba8:	ea40 000c 	orr.w	r0, r0, ip
 8000bac:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb4:	e7cc      	b.n	8000b50 <__aeabi_d2f+0x14>
 8000bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bba:	d107      	bne.n	8000bcc <__aeabi_d2f+0x90>
 8000bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bca:	4770      	bxne	lr
 8000bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b970 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9e08      	ldr	r6, [sp, #32]
 8000c12:	460d      	mov	r5, r1
 8000c14:	4604      	mov	r4, r0
 8000c16:	460f      	mov	r7, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d14a      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4694      	mov	ip, r2
 8000c20:	d965      	bls.n	8000cee <__udivmoddi4+0xe2>
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	b143      	cbz	r3, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c2c:	f1c3 0220 	rsb	r2, r3, #32
 8000c30:	409f      	lsls	r7, r3
 8000c32:	fa20 f202 	lsr.w	r2, r0, r2
 8000c36:	4317      	orrs	r7, r2
 8000c38:	409c      	lsls	r4, r3
 8000c3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3e:	fa1f f58c 	uxth.w	r5, ip
 8000c42:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c46:	0c22      	lsrs	r2, r4, #16
 8000c48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c4c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c50:	fb01 f005 	mul.w	r0, r1, r5
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x62>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c60:	f080 811c 	bcs.w	8000e9c <__udivmoddi4+0x290>
 8000c64:	4290      	cmp	r0, r2
 8000c66:	f240 8119 	bls.w	8000e9c <__udivmoddi4+0x290>
 8000c6a:	3902      	subs	r1, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a12      	subs	r2, r2, r0
 8000c70:	b2a4      	uxth	r4, r4
 8000c72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7e:	fb00 f505 	mul.w	r5, r0, r5
 8000c82:	42a5      	cmp	r5, r4
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x90>
 8000c86:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x294>
 8000c92:	42a5      	cmp	r5, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x294>
 8000c98:	4464      	add	r4, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca0:	1b64      	subs	r4, r4, r5
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11e      	cbz	r6, 8000cae <__udivmoddi4+0xa2>
 8000ca6:	40dc      	lsrs	r4, r3
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e9c6 4300 	strd	r4, r3, [r6]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0xbc>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80ed 	beq.w	8000e96 <__udivmoddi4+0x28a>
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e9c6 0500 	strd	r0, r5, [r6]
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc8:	fab3 f183 	clz	r1, r3
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d149      	bne.n	8000d64 <__udivmoddi4+0x158>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	d302      	bcc.n	8000cda <__udivmoddi4+0xce>
 8000cd4:	4282      	cmp	r2, r0
 8000cd6:	f200 80f8 	bhi.w	8000eca <__udivmoddi4+0x2be>
 8000cda:	1a84      	subs	r4, r0, r2
 8000cdc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	4617      	mov	r7, r2
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d0e2      	beq.n	8000cae <__udivmoddi4+0xa2>
 8000ce8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cec:	e7df      	b.n	8000cae <__udivmoddi4+0xa2>
 8000cee:	b902      	cbnz	r2, 8000cf2 <__udivmoddi4+0xe6>
 8000cf0:	deff      	udf	#255	; 0xff
 8000cf2:	fab2 f382 	clz	r3, r2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x210>
 8000cfc:	1a8a      	subs	r2, r1, r2
 8000cfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d02:	fa1f fe8c 	uxth.w	lr, ip
 8000d06:	2101      	movs	r1, #1
 8000d08:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d0c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d10:	0c22      	lsrs	r2, r4, #16
 8000d12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d16:	fb0e f005 	mul.w	r0, lr, r5
 8000d1a:	4290      	cmp	r0, r2
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d22:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x122>
 8000d28:	4290      	cmp	r0, r2
 8000d2a:	f200 80cb 	bhi.w	8000ec4 <__udivmoddi4+0x2b8>
 8000d2e:	4645      	mov	r5, r8
 8000d30:	1a12      	subs	r2, r2, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d38:	fb07 2210 	mls	r2, r7, r0, r2
 8000d3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d40:	fb0e fe00 	mul.w	lr, lr, r0
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x14e>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x14c>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f200 80bb 	bhi.w	8000ece <__udivmoddi4+0x2c2>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d62:	e79f      	b.n	8000ca4 <__udivmoddi4+0x98>
 8000d64:	f1c1 0720 	rsb	r7, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d72:	fa05 f401 	lsl.w	r4, r5, r1
 8000d76:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7a:	40fd      	lsrs	r5, r7
 8000d7c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d94:	fb08 f50e 	mul.w	r5, r8, lr
 8000d98:	42a5      	cmp	r5, r4
 8000d9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9e:	fa00 f001 	lsl.w	r0, r0, r1
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dac:	f080 8088 	bcs.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db0:	42a5      	cmp	r5, r4
 8000db2:	f240 8085 	bls.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dba:	4464      	add	r4, ip
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	b29d      	uxth	r5, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dcc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1da>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ddc:	d26c      	bcs.n	8000eb8 <__udivmoddi4+0x2ac>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	d96a      	bls.n	8000eb8 <__udivmoddi4+0x2ac>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dea:	fba3 9502 	umull	r9, r5, r3, r2
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	42ac      	cmp	r4, r5
 8000df4:	46c8      	mov	r8, r9
 8000df6:	46ae      	mov	lr, r5
 8000df8:	d356      	bcc.n	8000ea8 <__udivmoddi4+0x29c>
 8000dfa:	d053      	beq.n	8000ea4 <__udivmoddi4+0x298>
 8000dfc:	b156      	cbz	r6, 8000e14 <__udivmoddi4+0x208>
 8000dfe:	ebb0 0208 	subs.w	r2, r0, r8
 8000e02:	eb64 040e 	sbc.w	r4, r4, lr
 8000e06:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0a:	40ca      	lsrs	r2, r1
 8000e0c:	40cc      	lsrs	r4, r1
 8000e0e:	4317      	orrs	r7, r2
 8000e10:	e9c6 7400 	strd	r7, r4, [r6]
 8000e14:	4618      	mov	r0, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1c:	f1c3 0120 	rsb	r1, r3, #32
 8000e20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e24:	fa20 f201 	lsr.w	r2, r0, r1
 8000e28:	fa25 f101 	lsr.w	r1, r5, r1
 8000e2c:	409d      	lsls	r5, r3
 8000e2e:	432a      	orrs	r2, r5
 8000e30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e46:	fb00 f50e 	mul.w	r5, r0, lr
 8000e4a:	428d      	cmp	r5, r1
 8000e4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x258>
 8000e52:	eb1c 0101 	adds.w	r1, ip, r1
 8000e56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5a:	d22f      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e5c:	428d      	cmp	r5, r1
 8000e5e:	d92d      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1b49      	subs	r1, r1, r5
 8000e66:	b292      	uxth	r2, r2
 8000e68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	fb05 f10e 	mul.w	r1, r5, lr
 8000e78:	4291      	cmp	r1, r2
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x282>
 8000e7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e84:	d216      	bcs.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e86:	4291      	cmp	r1, r2
 8000e88:	d914      	bls.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e8a:	3d02      	subs	r5, #2
 8000e8c:	4462      	add	r2, ip
 8000e8e:	1a52      	subs	r2, r2, r1
 8000e90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e94:	e738      	b.n	8000d08 <__udivmoddi4+0xfc>
 8000e96:	4631      	mov	r1, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e708      	b.n	8000cae <__udivmoddi4+0xa2>
 8000e9c:	4639      	mov	r1, r7
 8000e9e:	e6e6      	b.n	8000c6e <__udivmoddi4+0x62>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x90>
 8000ea4:	4548      	cmp	r0, r9
 8000ea6:	d2a9      	bcs.n	8000dfc <__udivmoddi4+0x1f0>
 8000ea8:	ebb9 0802 	subs.w	r8, r9, r2
 8000eac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	e7a3      	b.n	8000dfc <__udivmoddi4+0x1f0>
 8000eb4:	4645      	mov	r5, r8
 8000eb6:	e7ea      	b.n	8000e8e <__udivmoddi4+0x282>
 8000eb8:	462b      	mov	r3, r5
 8000eba:	e794      	b.n	8000de6 <__udivmoddi4+0x1da>
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	e7d1      	b.n	8000e64 <__udivmoddi4+0x258>
 8000ec0:	46d0      	mov	r8, sl
 8000ec2:	e77b      	b.n	8000dbc <__udivmoddi4+0x1b0>
 8000ec4:	3d02      	subs	r5, #2
 8000ec6:	4462      	add	r2, ip
 8000ec8:	e732      	b.n	8000d30 <__udivmoddi4+0x124>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e70a      	b.n	8000ce4 <__udivmoddi4+0xd8>
 8000ece:	4464      	add	r4, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e742      	b.n	8000d5a <__udivmoddi4+0x14e>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <ILI9341_Select>:


#include "stm32l4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2110      	movs	r1, #16
 8000ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee4:	f004 fb18 	bl	8005518 <HAL_GPIO_WritePin>
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef8:	f004 fb0e 	bl	8005518 <HAL_GPIO_WritePin>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2101      	movs	r1, #1
 8000f08:	4806      	ldr	r0, [pc, #24]	; (8000f24 <ILI9341_Reset+0x24>)
 8000f0a:	f004 fb05 	bl	8005518 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000f0e:	2005      	movs	r0, #5
 8000f10:	f002 fb8c 	bl	800362c <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2101      	movs	r1, #1
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <ILI9341_Reset+0x24>)
 8000f1a:	f004 fafd 	bl	8005518 <HAL_GPIO_WritePin>
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	48000400 	.word	0x48000400

08000f28 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2102      	movs	r1, #2
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <ILI9341_WriteCommand+0x2c>)
 8000f38:	f004 faee 	bl	8005518 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000f3c:	1df9      	adds	r1, r7, #7
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	2201      	movs	r2, #1
 8000f44:	4804      	ldr	r0, [pc, #16]	; (8000f58 <ILI9341_WriteCommand+0x30>)
 8000f46:	f007 fc18 	bl	800877a <HAL_SPI_Transmit>

}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	48000400 	.word	0x48000400
 8000f58:	200002a0 	.word	0x200002a0

08000f5c <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <ILI9341_WriteData+0x54>)
 8000f6c:	f004 fad4 	bl	8005518 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000f70:	e015      	b.n	8000f9e <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f78:	bf28      	it	cs
 8000f7a:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8000f7e:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000f80:	89fa      	ldrh	r2, [r7, #14]
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <ILI9341_WriteData+0x58>)
 8000f8a:	f007 fbf6 	bl	800877a <HAL_SPI_Transmit>

        buff += chunk_size;
 8000f8e:	89fb      	ldrh	r3, [r7, #14]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000f96:	89fb      	ldrh	r3, [r7, #14]
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1e6      	bne.n	8000f72 <ILI9341_WriteData+0x16>
    }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	48000400 	.word	0x48000400
 8000fb4:	200002a0 	.word	0x200002a0

08000fb8 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	80fb      	strh	r3, [r7, #6]
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80bb      	strh	r3, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	807b      	strh	r3, [r7, #2]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8000fd6:	202a      	movs	r0, #42	; 0x2a
 8000fd8:	f7ff ffa6 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	0a1b      	lsrs	r3, r3, #8
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	733b      	strb	r3, [r7, #12]
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	737b      	strb	r3, [r7, #13]
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	0a1b      	lsrs	r3, r3, #8
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	73bb      	strb	r3, [r7, #14]
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2104      	movs	r1, #4
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ffaa 	bl	8000f5c <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8001008:	202b      	movs	r0, #43	; 0x2b
 800100a:	f7ff ff8d 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800100e:	88bb      	ldrh	r3, [r7, #4]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b29b      	uxth	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	723b      	strb	r3, [r7, #8]
 8001018:	88bb      	ldrh	r3, [r7, #4]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	727b      	strb	r3, [r7, #9]
 800101e:	883b      	ldrh	r3, [r7, #0]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	b29b      	uxth	r3, r3
 8001024:	b2db      	uxtb	r3, r3
 8001026:	72bb      	strb	r3, [r7, #10]
 8001028:	883b      	ldrh	r3, [r7, #0]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	2104      	movs	r1, #4
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff91 	bl	8000f5c <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800103a:	202c      	movs	r0, #44	; 0x2c
 800103c:	f7ff ff74 	bl	8000f28 <ILI9341_WriteCommand>
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}

08001048 <ILI9341_Init>:

void ILI9341_Init() {
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b09b      	sub	sp, #108	; 0x6c
 800104c:	af00      	add	r7, sp, #0
    ILI9341_Select();
 800104e:	f7ff ff43 	bl	8000ed8 <ILI9341_Select>
    ILI9341_Reset();
 8001052:	f7ff ff55 	bl	8000f00 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8001056:	2001      	movs	r0, #1
 8001058:	f7ff ff66 	bl	8000f28 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 800105c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001060:	f002 fae4 	bl	800362c <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8001064:	20cb      	movs	r0, #203	; 0xcb
 8001066:	f7ff ff5f 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800106a:	4a87      	ldr	r2, [pc, #540]	; (8001288 <ILI9341_Init+0x240>)
 800106c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001070:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001074:	6018      	str	r0, [r3, #0]
 8001076:	3304      	adds	r3, #4
 8001078:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800107a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800107e:	2105      	movs	r1, #5
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff6b 	bl	8000f5c <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8001086:	20cf      	movs	r0, #207	; 0xcf
 8001088:	f7ff ff4e 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 800108c:	4a7f      	ldr	r2, [pc, #508]	; (800128c <ILI9341_Init+0x244>)
 800108e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001092:	6812      	ldr	r2, [r2, #0]
 8001094:	4611      	mov	r1, r2
 8001096:	8019      	strh	r1, [r3, #0]
 8001098:	3302      	adds	r3, #2
 800109a:	0c12      	lsrs	r2, r2, #16
 800109c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800109e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010a2:	2103      	movs	r1, #3
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff59 	bl	8000f5c <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80010aa:	20e8      	movs	r0, #232	; 0xe8
 80010ac:	f7ff ff3c 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80010b0:	4a77      	ldr	r2, [pc, #476]	; (8001290 <ILI9341_Init+0x248>)
 80010b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010b6:	6812      	ldr	r2, [r2, #0]
 80010b8:	4611      	mov	r1, r2
 80010ba:	8019      	strh	r1, [r3, #0]
 80010bc:	3302      	adds	r3, #2
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80010c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010c6:	2103      	movs	r1, #3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff47 	bl	8000f5c <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 80010ce:	20ea      	movs	r0, #234	; 0xea
 80010d0:	f7ff ff2a 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 80010da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010de:	2102      	movs	r1, #2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff3b 	bl	8000f5c <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 80010e6:	20ed      	movs	r0, #237	; 0xed
 80010e8:	f7ff ff1e 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80010ec:	4b69      	ldr	r3, [pc, #420]	; (8001294 <ILI9341_Init+0x24c>)
 80010ee:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 80010f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010f4:	2104      	movs	r1, #4
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff30 	bl	8000f5c <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80010fc:	20f7      	movs	r0, #247	; 0xf7
 80010fe:	f7ff ff13 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8001102:	2320      	movs	r3, #32
 8001104:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8001108:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800110c:	2101      	movs	r1, #1
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff24 	bl	8000f5c <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8001114:	20c0      	movs	r0, #192	; 0xc0
 8001116:	f7ff ff07 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800111a:	2323      	movs	r3, #35	; 0x23
 800111c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 8001120:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001124:	2101      	movs	r1, #1
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff18 	bl	8000f5c <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 800112c:	20c1      	movs	r0, #193	; 0xc1
 800112e:	f7ff fefb 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8001132:	2310      	movs	r3, #16
 8001134:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8001138:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800113c:	2101      	movs	r1, #1
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff0c 	bl	8000f5c <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8001144:	20c5      	movs	r0, #197	; 0xc5
 8001146:	f7ff feef 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 800114a:	f642 033e 	movw	r3, #10302	; 0x283e
 800114e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 8001152:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001156:	2102      	movs	r1, #2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff feff 	bl	8000f5c <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 800115e:	20c7      	movs	r0, #199	; 0xc7
 8001160:	f7ff fee2 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8001164:	2386      	movs	r3, #134	; 0x86
 8001166:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 800116a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800116e:	2101      	movs	r1, #1
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fef3 	bl	8000f5c <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8001176:	2036      	movs	r0, #54	; 0x36
 8001178:	f7ff fed6 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 800117c:	2348      	movs	r3, #72	; 0x48
 800117e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 8001182:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fee7 	bl	8000f5c <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 800118e:	203a      	movs	r0, #58	; 0x3a
 8001190:	f7ff feca 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8001194:	2355      	movs	r3, #85	; 0x55
 8001196:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 800119a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800119e:	2101      	movs	r1, #1
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fedb 	bl	8000f5c <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80011a6:	20b1      	movs	r0, #177	; 0xb1
 80011a8:	f7ff febe 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80011ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011b0:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 80011b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011b6:	2102      	movs	r1, #2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fecf 	bl	8000f5c <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80011be:	20b6      	movs	r0, #182	; 0xb6
 80011c0:	f7ff feb2 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80011c4:	4a34      	ldr	r2, [pc, #208]	; (8001298 <ILI9341_Init+0x250>)
 80011c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	4611      	mov	r1, r2
 80011ce:	8019      	strh	r1, [r3, #0]
 80011d0:	3302      	adds	r3, #2
 80011d2:	0c12      	lsrs	r2, r2, #16
 80011d4:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80011d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011da:	2103      	movs	r1, #3
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff febd 	bl	8000f5c <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 80011e2:	20f2      	movs	r0, #242	; 0xf2
 80011e4:	f7ff fea0 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 80011e8:	2300      	movs	r3, #0
 80011ea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 80011ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f2:	2101      	movs	r1, #1
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff feb1 	bl	8000f5c <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80011fa:	2026      	movs	r0, #38	; 0x26
 80011fc:	f7ff fe94 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8001200:	2301      	movs	r3, #1
 8001202:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 8001206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120a:	2101      	movs	r1, #1
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fea5 	bl	8000f5c <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8001212:	20e0      	movs	r0, #224	; 0xe0
 8001214:	f7ff fe88 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8001218:	4b20      	ldr	r3, [pc, #128]	; (800129c <ILI9341_Init+0x254>)
 800121a:	f107 0414 	add.w	r4, r7, #20
 800121e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001220:	c407      	stmia	r4!, {r0, r1, r2}
 8001222:	8023      	strh	r3, [r4, #0]
 8001224:	3402      	adds	r4, #2
 8001226:	0c1b      	lsrs	r3, r3, #16
 8001228:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	210f      	movs	r1, #15
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fe93 	bl	8000f5c <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8001236:	20e1      	movs	r0, #225	; 0xe1
 8001238:	f7ff fe76 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <ILI9341_Init+0x258>)
 800123e:	1d3c      	adds	r4, r7, #4
 8001240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001242:	c407      	stmia	r4!, {r0, r1, r2}
 8001244:	8023      	strh	r3, [r4, #0]
 8001246:	3402      	adds	r4, #2
 8001248:	0c1b      	lsrs	r3, r3, #16
 800124a:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	210f      	movs	r1, #15
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fe83 	bl	8000f5c <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8001256:	2011      	movs	r0, #17
 8001258:	f7ff fe66 	bl	8000f28 <ILI9341_WriteCommand>
    HAL_Delay(120);
 800125c:	2078      	movs	r0, #120	; 0x78
 800125e:	f002 f9e5 	bl	800362c <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8001262:	2029      	movs	r0, #41	; 0x29
 8001264:	f7ff fe60 	bl	8000f28 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8001268:	2036      	movs	r0, #54	; 0x36
 800126a:	f7ff fe5d 	bl	8000f28 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 800126e:	2348      	movs	r3, #72	; 0x48
 8001270:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001272:	463b      	mov	r3, r7
 8001274:	2101      	movs	r1, #1
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fe70 	bl	8000f5c <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 800127c:	f7ff fe36 	bl	8000eec <ILI9341_Unselect>
}
 8001280:	bf00      	nop
 8001282:	376c      	adds	r7, #108	; 0x6c
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}
 8001288:	0800e930 	.word	0x0800e930
 800128c:	0800e938 	.word	0x0800e938
 8001290:	0800e93c 	.word	0x0800e93c
 8001294:	81120364 	.word	0x81120364
 8001298:	0800e940 	.word	0x0800e940
 800129c:	0800e944 	.word	0x0800e944
 80012a0:	0800e954 	.word	0x0800e954

080012a4 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80012a4:	b082      	sub	sp, #8
 80012a6:	b590      	push	{r4, r7, lr}
 80012a8:	b089      	sub	sp, #36	; 0x24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	637b      	str	r3, [r7, #52]	; 0x34
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
 80012b2:	460b      	mov	r3, r1
 80012b4:	80bb      	strh	r3, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80012ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80012be:	b29a      	uxth	r2, r3
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	4413      	add	r3, r2
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	3b01      	subs	r3, #1
 80012c8:	b29c      	uxth	r4, r3
 80012ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	88bb      	ldrh	r3, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	3b01      	subs	r3, #1
 80012d8:	b29b      	uxth	r3, r3
 80012da:	88b9      	ldrh	r1, [r7, #4]
 80012dc:	88f8      	ldrh	r0, [r7, #6]
 80012de:	4622      	mov	r2, r4
 80012e0:	f7ff fe6a 	bl	8000fb8 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	e043      	b.n	8001372 <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 80012ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	3b20      	subs	r3, #32
 80012f0:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80012f4:	fb01 f303 	mul.w	r3, r1, r3
 80012f8:	4619      	mov	r1, r3
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	440b      	add	r3, r1
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
 800130a:	e029      	b.n	8001360 <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00e      	beq.n	800133a <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800131c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800131e:	0a1b      	lsrs	r3, r3, #8
 8001320:	b29b      	uxth	r3, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	743b      	strb	r3, [r7, #16]
 8001326:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001328:	b2db      	uxtb	r3, r3
 800132a:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	2102      	movs	r1, #2
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fe12 	bl	8000f5c <ILI9341_WriteData>
 8001338:	e00f      	b.n	800135a <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800133a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800133e:	0a1b      	lsrs	r3, r3, #8
 8001340:	b29b      	uxth	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	733b      	strb	r3, [r7, #12]
 8001346:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800134a:	b2db      	uxtb	r3, r3
 800134c:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	2102      	movs	r1, #2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fe01 	bl	8000f5c <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	3301      	adds	r3, #1
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001364:	461a      	mov	r2, r3
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4293      	cmp	r3, r2
 800136a:	d3cf      	bcc.n	800130c <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	3301      	adds	r3, #1
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001376:	461a      	mov	r2, r3
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	4293      	cmp	r3, r2
 800137c:	d3b5      	bcc.n	80012ea <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 800137e:	bf00      	nop
 8001380:	bf00      	nop
 8001382:	3724      	adds	r7, #36	; 0x24
 8001384:	46bd      	mov	sp, r7
 8001386:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800138a:	b002      	add	sp, #8
 800138c:	4770      	bx	lr

0800138e <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800138e:	b082      	sub	sp, #8
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af04      	add	r7, sp, #16
 8001396:	603a      	str	r2, [r7, #0]
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	4603      	mov	r3, r0
 800139c:	80fb      	strh	r3, [r7, #6]
 800139e:	460b      	mov	r3, r1
 80013a0:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 80013a2:	f7ff fd99 	bl	8000ed8 <ILI9341_Select>

    while(*str) {
 80013a6:	e02e      	b.n	8001406 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	7d3a      	ldrb	r2, [r7, #20]
 80013ac:	4413      	add	r3, r2
 80013ae:	2bef      	cmp	r3, #239	; 0xef
 80013b0:	dd14      	ble.n	80013dc <ILI9341_WriteString+0x4e>
            x = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80013b6:	7d7b      	ldrb	r3, [r7, #21]
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	88bb      	ldrh	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 80013c0:	88bb      	ldrh	r3, [r7, #4]
 80013c2:	7d7a      	ldrb	r2, [r7, #21]
 80013c4:	4413      	add	r3, r2
 80013c6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80013ca:	da21      	bge.n	8001410 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b20      	cmp	r3, #32
 80013d2:	d103      	bne.n	80013dc <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	603b      	str	r3, [r7, #0]
                continue;
 80013da:	e014      	b.n	8001406 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	781a      	ldrb	r2, [r3, #0]
 80013e0:	88b9      	ldrh	r1, [r7, #4]
 80013e2:	88f8      	ldrh	r0, [r7, #6]
 80013e4:	8c3b      	ldrh	r3, [r7, #32]
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	8bbb      	ldrh	r3, [r7, #28]
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f7ff ff57 	bl	80012a4 <ILI9341_WriteChar>
        x += font.width;
 80013f6:	7d3b      	ldrb	r3, [r7, #20]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	4413      	add	r3, r2
 80013fe:	80fb      	strh	r3, [r7, #6]
        str++;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1cc      	bne.n	80013a8 <ILI9341_WriteString+0x1a>
 800140e:	e000      	b.n	8001412 <ILI9341_WriteString+0x84>
                break;
 8001410:	bf00      	nop
    }

    ILI9341_Unselect();
 8001412:	f7ff fd6b 	bl	8000eec <ILI9341_Unselect>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001420:	b002      	add	sp, #8
 8001422:	4770      	bx	lr

08001424 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	4604      	mov	r4, r0
 800142c:	4608      	mov	r0, r1
 800142e:	4611      	mov	r1, r2
 8001430:	461a      	mov	r2, r3
 8001432:	4623      	mov	r3, r4
 8001434:	80fb      	strh	r3, [r7, #6]
 8001436:	4603      	mov	r3, r0
 8001438:	80bb      	strh	r3, [r7, #4]
 800143a:	460b      	mov	r3, r1
 800143c:	807b      	strh	r3, [r7, #2]
 800143e:	4613      	mov	r3, r2
 8001440:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	2bef      	cmp	r3, #239	; 0xef
 8001446:	d853      	bhi.n	80014f0 <ILI9341_FillRectangle+0xcc>
 8001448:	88bb      	ldrh	r3, [r7, #4]
 800144a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800144e:	d24f      	bcs.n	80014f0 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8001450:	88fa      	ldrh	r2, [r7, #6]
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	4413      	add	r3, r2
 8001456:	2bf0      	cmp	r3, #240	; 0xf0
 8001458:	dd03      	ble.n	8001462 <ILI9341_FillRectangle+0x3e>
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001460:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8001462:	88ba      	ldrh	r2, [r7, #4]
 8001464:	883b      	ldrh	r3, [r7, #0]
 8001466:	4413      	add	r3, r2
 8001468:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800146c:	dd03      	ble.n	8001476 <ILI9341_FillRectangle+0x52>
 800146e:	88bb      	ldrh	r3, [r7, #4]
 8001470:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001474:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8001476:	f7ff fd2f 	bl	8000ed8 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 800147a:	88fa      	ldrh	r2, [r7, #6]
 800147c:	887b      	ldrh	r3, [r7, #2]
 800147e:	4413      	add	r3, r2
 8001480:	b29b      	uxth	r3, r3
 8001482:	3b01      	subs	r3, #1
 8001484:	b29c      	uxth	r4, r3
 8001486:	88ba      	ldrh	r2, [r7, #4]
 8001488:	883b      	ldrh	r3, [r7, #0]
 800148a:	4413      	add	r3, r2
 800148c:	b29b      	uxth	r3, r3
 800148e:	3b01      	subs	r3, #1
 8001490:	b29b      	uxth	r3, r3
 8001492:	88b9      	ldrh	r1, [r7, #4]
 8001494:	88f8      	ldrh	r0, [r7, #6]
 8001496:	4622      	mov	r2, r4
 8001498:	f7ff fd8e 	bl	8000fb8 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800149c:	8c3b      	ldrh	r3, [r7, #32]
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	733b      	strb	r3, [r7, #12]
 80014a6:	8c3b      	ldrh	r3, [r7, #32]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80014ac:	2201      	movs	r2, #1
 80014ae:	2102      	movs	r1, #2
 80014b0:	4811      	ldr	r0, [pc, #68]	; (80014f8 <ILI9341_FillRectangle+0xd4>)
 80014b2:	f004 f831 	bl	8005518 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80014b6:	883b      	ldrh	r3, [r7, #0]
 80014b8:	80bb      	strh	r3, [r7, #4]
 80014ba:	e013      	b.n	80014e4 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 80014bc:	887b      	ldrh	r3, [r7, #2]
 80014be:	80fb      	strh	r3, [r7, #6]
 80014c0:	e00a      	b.n	80014d8 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80014c2:	f107 010c 	add.w	r1, r7, #12
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	2202      	movs	r2, #2
 80014cc:	480b      	ldr	r0, [pc, #44]	; (80014fc <ILI9341_FillRectangle+0xd8>)
 80014ce:	f007 f954 	bl	800877a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	80fb      	strh	r3, [r7, #6]
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f1      	bne.n	80014c2 <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 80014de:	88bb      	ldrh	r3, [r7, #4]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	80bb      	strh	r3, [r7, #4]
 80014e4:	88bb      	ldrh	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1e8      	bne.n	80014bc <ILI9341_FillRectangle+0x98>

        }
    }

    ILI9341_Unselect();
 80014ea:	f7ff fcff 	bl	8000eec <ILI9341_Unselect>
 80014ee:	e000      	b.n	80014f2 <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80014f0:	bf00      	nop
}
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd90      	pop	{r4, r7, pc}
 80014f8:	48000400 	.word	0x48000400
 80014fc:	200002a0 	.word	0x200002a0

08001500 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af02      	add	r7, sp, #8
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001512:	22f0      	movs	r2, #240	; 0xf0
 8001514:	2100      	movs	r1, #0
 8001516:	2000      	movs	r0, #0
 8001518:	f7ff ff84 	bl	8001424 <ILI9341_FillRectangle>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8001528:	2201      	movs	r2, #1
 800152a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001532:	f003 fff1 	bl	8005518 <HAL_GPIO_WritePin>
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

	convFlag = 1;
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]

}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	2000039c 	.word	0x2000039c

0800155c <apply_hanning_window>:


void apply_hanning_window(float32_t * signal, uint32_t length){
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < length; ++i){
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	e033      	b.n	80015d4 <apply_hanning_window+0x78>
		float32_t han_value = 0.5f * (1.0f - cosf(2 * PI * i / (length - 1)));
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001576:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80015e8 <apply_hanning_window+0x8c>
 800157a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	3b01      	subs	r3, #1
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800158a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800158e:	eeb0 0a66 	vmov.f32	s0, s13
 8001592:	f00a fe5b 	bl	800c24c <cosf>
 8001596:	eef0 7a40 	vmov.f32	s15, s0
 800159a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800159e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015aa:	edc7 7a02 	vstr	s15, [r7, #8]
		signal[i] *= han_value;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	ed93 7a00 	vldr	s14, [r3]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80015c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ca:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < length; ++i){
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3301      	adds	r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d8c7      	bhi.n	800156c <apply_hanning_window+0x10>
	}
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40c90fdb 	.word	0x40c90fdb

080015ec <find_peaks>:


void find_peaks(float32_t* data, uint32_t length, int32_t* peaks, uint32_t* num_peaks) {
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	603b      	str	r3, [r7, #0]
    float32_t threshold = 0; // Adjust if needed
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
    *num_peaks = 0;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 1; i < length - 1; ++i) {
 8001606:	2301      	movs	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	e041      	b.n	8001690 <find_peaks+0xa4>
        if (data[i] > threshold && data[i] > data[i-1] && data[i] > data[i+1]) {
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	4413      	add	r3, r2
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	ed97 7a04 	vldr	s14, [r7, #16]
 800161c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	d531      	bpl.n	800168a <find_peaks+0x9e>
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4413      	add	r3, r2
 800162e:	ed93 7a00 	vldr	s14, [r3]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001638:	3b01      	subs	r3, #1
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164c:	dd1d      	ble.n	800168a <find_peaks+0x9e>
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	4413      	add	r3, r2
 8001656:	ed93 7a00 	vldr	s14, [r3]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	dd0b      	ble.n	800168a <find_peaks+0x9e>
            peaks[*num_peaks] = i;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	601a      	str	r2, [r3, #0]
            (*num_peaks)++;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 1; i < length - 1; ++i) {
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3301      	adds	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	3b01      	subs	r3, #1
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	429a      	cmp	r2, r3
 8001698:	d3b8      	bcc.n	800160c <find_peaks+0x20>
        }
    }
}
 800169a:	bf00      	nop
 800169c:	bf00      	nop
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <autocorrelate>:



void autocorrelate(float32_t* x, uint32_t N, float32_t* autocorrelation) {
 80016a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016ac:	b093      	sub	sp, #76	; 0x4c
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6178      	str	r0, [r7, #20]
 80016b2:	6139      	str	r1, [r7, #16]
 80016b4:	60fa      	str	r2, [r7, #12]
 80016b6:	466b      	mov	r3, sp
 80016b8:	461e      	mov	r6, r3

    arm_rfft_fast_instance_f32 fftInstance;


    // Initialize the FFT instance
    arm_rfft_fast_init_f32(&fftInstance, N);
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	b29a      	uxth	r2, r3
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f009 fce1 	bl	800b08c <arm_rfft_fast_init_f32>

    float32_t output[N];
 80016ca:	6939      	ldr	r1, [r7, #16]
 80016cc:	460b      	mov	r3, r1
 80016ce:	3b01      	subs	r3, #1
 80016d0:	643b      	str	r3, [r7, #64]	; 0x40
 80016d2:	2300      	movs	r3, #0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	0143      	lsls	r3, r0, #5
 80016e4:	6838      	ldr	r0, [r7, #0]
 80016e6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016ea:	6838      	ldr	r0, [r7, #0]
 80016ec:	0142      	lsls	r2, r0, #5
 80016ee:	2300      	movs	r3, #0
 80016f0:	468a      	mov	sl, r1
 80016f2:	469b      	mov	fp, r3
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001700:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001704:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001708:	008b      	lsls	r3, r1, #2
 800170a:	3307      	adds	r3, #7
 800170c:	08db      	lsrs	r3, r3, #3
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	ebad 0d03 	sub.w	sp, sp, r3
 8001714:	466b      	mov	r3, sp
 8001716:	3303      	adds	r3, #3
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_rfft_fast_f32(&fftInstance, x, output, 0);
 800171e:	f107 001c 	add.w	r0, r7, #28
 8001722:	2300      	movs	r3, #0
 8001724:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001726:	6979      	ldr	r1, [r7, #20]
 8001728:	f009 fd94 	bl	800b254 <arm_rfft_fast_f32>

    float32_t power_spectrum[N/2];
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	0859      	lsrs	r1, r3, #1
 8001730:	460b      	mov	r3, r1
 8001732:	3b01      	subs	r3, #1
 8001734:	63bb      	str	r3, [r7, #56]	; 0x38
 8001736:	2300      	movs	r3, #0
 8001738:	4688      	mov	r8, r1
 800173a:	4699      	mov	r9, r3
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001748:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800174c:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001750:	2300      	movs	r3, #0
 8001752:	460c      	mov	r4, r1
 8001754:	461d      	mov	r5, r3
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	016b      	lsls	r3, r5, #5
 8001760:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001764:	0162      	lsls	r2, r4, #5
 8001766:	008b      	lsls	r3, r1, #2
 8001768:	3307      	adds	r3, #7
 800176a:	08db      	lsrs	r3, r3, #3
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	ebad 0d03 	sub.w	sp, sp, r3
 8001772:	466b      	mov	r3, sp
 8001774:	3303      	adds	r3, #3
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	637b      	str	r3, [r7, #52]	; 0x34
    //arm_cmplx_mag_squared_f32(output, power_spectrum, N/2);
    power_spectrum[0] = output[0] * output[0];
 800177c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800177e:	ed93 7a00 	vldr	s14, [r3]
 8001782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178e:	edc3 7a00 	vstr	s15, [r3]
    power_spectrum[1] = output[1] * output[1];
 8001792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001794:	ed93 7a01 	vldr	s14, [r3, #4]
 8001798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800179a:	edd3 7a01 	vldr	s15, [r3, #4]
 800179e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a4:	edc3 7a01 	vstr	s15, [r3, #4]

    // Rest of the frequency bins (upto N/2)
    for (uint32_t i = 1; i < N / 2; ++i) {
 80017a8:	2301      	movs	r3, #1
 80017aa:	647b      	str	r3, [r7, #68]	; 0x44
 80017ac:	e036      	b.n	800181c <autocorrelate+0x174>
        power_spectrum[2 * i] = output[2 * i] * output[2 * i] + output[2 * i + 1] * output[2 * i + 1]; // Real part
 80017ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	ed93 7a00 	vldr	s14, [r3]
 80017bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	3301      	adds	r3, #1
 80017d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	edd3 6a00 	vldr	s13, [r3]
 80017de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	3301      	adds	r3, #1
 80017e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	edc3 7a00 	vstr	s15, [r3]
        power_spectrum[2 * i + 1] = 0; // Imaginary part is 0
 8001804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	3301      	adds	r3, #1
 800180a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 1; i < N / 2; ++i) {
 8001816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001818:	3301      	adds	r3, #1
 800181a:	647b      	str	r3, [r7, #68]	; 0x44
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	085b      	lsrs	r3, r3, #1
 8001820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001822:	429a      	cmp	r2, r3
 8001824:	d3c3      	bcc.n	80017ae <autocorrelate+0x106>
    }

    //arm_abs_f32(autocorrelation, autocorrelation, BUFFER_LENGTH);

    arm_rfft_fast_f32(&fftInstance, power_spectrum, autocorrelation, 1);
 8001826:	f107 001c 	add.w	r0, r7, #28
 800182a:	2301      	movs	r3, #1
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001830:	f009 fd10 	bl	800b254 <arm_rfft_fast_f32>

    arm_abs_f32(autocorrelation, autocorrelation, BUFFER_LENGTH);
 8001834:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001838:	68f9      	ldr	r1, [r7, #12]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f00a f8e8 	bl	800ba10 <arm_abs_f32>
 8001840:	46b5      	mov	sp, r6
}
 8001842:	bf00      	nop
 8001844:	374c      	adds	r7, #76	; 0x4c
 8001846:	46bd      	mov	sp, r7
 8001848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800184c <screenInit>:
}




void screenInit () {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	ILI9341_Unselect();
 8001850:	f7ff fb4c 	bl	8000eec <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 8001854:	f7ff fe66 	bl	8001524 <ILI9341_TouchUnselect>
	ILI9341_Init();
 8001858:	f7ff fbf6 	bl	8001048 <ILI9341_Init>
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <reverse>:

void reverse(char* str, int len)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	3b01      	subs	r3, #1
 8001872:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001874:	e018      	b.n	80018a8 <reverse+0x48>
        temp = str[i];
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	4413      	add	r3, r2
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	441a      	add	r2, r3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	440b      	add	r3, r1
 800188c:	7812      	ldrb	r2, [r2, #0]
 800188e:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	701a      	strb	r2, [r3, #0]
        i++;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3301      	adds	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
        j--;
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	dbe2      	blt.n	8001876 <reverse+0x16>
    }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	371c      	adds	r7, #28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <intToStr>:

int intToStr(int x, char str[], int d)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
    int i = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
    while (x) {
 80018d0:	e01d      	b.n	800190e <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	4b1d      	ldr	r3, [pc, #116]	; (800194c <intToStr+0x8c>)
 80018d6:	fb83 1302 	smull	r1, r3, r3, r2
 80018da:	1099      	asrs	r1, r3, #2
 80018dc:	17d3      	asrs	r3, r2, #31
 80018de:	1ac9      	subs	r1, r1, r3
 80018e0:	460b      	mov	r3, r1
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	1ad1      	subs	r1, r2, r3
 80018ea:	b2ca      	uxtb	r2, r1
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	1c59      	adds	r1, r3, #1
 80018f0:	6179      	str	r1, [r7, #20]
 80018f2:	4619      	mov	r1, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	440b      	add	r3, r1
 80018f8:	3230      	adds	r2, #48	; 0x30
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4a12      	ldr	r2, [pc, #72]	; (800194c <intToStr+0x8c>)
 8001902:	fb82 1203 	smull	r1, r2, r2, r3
 8001906:	1092      	asrs	r2, r2, #2
 8001908:	17db      	asrs	r3, r3, #31
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	60fb      	str	r3, [r7, #12]
    while (x) {
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1de      	bne.n	80018d2 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8001914:	e007      	b.n	8001926 <intToStr+0x66>
        str[i++] = '0';
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	617a      	str	r2, [r7, #20]
 800191c:	461a      	mov	r2, r3
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	4413      	add	r3, r2
 8001922:	2230      	movs	r2, #48	; 0x30
 8001924:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	429a      	cmp	r2, r3
 800192c:	dbf3      	blt.n	8001916 <intToStr+0x56>

    reverse(str, i);
 800192e:	6979      	ldr	r1, [r7, #20]
 8001930:	68b8      	ldr	r0, [r7, #8]
 8001932:	f7ff ff95 	bl	8001860 <reverse>
    str[i] = '\0';
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	4413      	add	r3, r2
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
    return i;
 8001940:	697b      	ldr	r3, [r7, #20]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	66666667 	.word	0x66666667

08001950 <ftoa>:

void ftoa(float n, char* res, int afterpoint)
{
 8001950:	b5b0      	push	{r4, r5, r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0
 8001956:	ed87 0a03 	vstr	s0, [r7, #12]
 800195a:	60b8      	str	r0, [r7, #8]
 800195c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 800195e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001966:	ee17 3a90 	vmov	r3, s15
 800196a:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	ee07 3a90 	vmov	s15, r3
 8001972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001976:	ed97 7a03 	vldr	s14, [r7, #12]
 800197a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197e:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	69f8      	ldr	r0, [r7, #28]
 8001988:	f7ff ff9a 	bl	80018c0 <intToStr>
 800198c:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d030      	beq.n	80019f6 <ftoa+0xa6>
        res[i] = '.'; // add dot
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	4413      	add	r3, r2
 800199a:	222e      	movs	r2, #46	; 0x2e
 800199c:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 800199e:	69b8      	ldr	r0, [r7, #24]
 80019a0:	f7fe fd9c 	bl	80004dc <__aeabi_f2d>
 80019a4:	4604      	mov	r4, r0
 80019a6:	460d      	mov	r5, r1
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7fe fd85 	bl	80004b8 <__aeabi_i2d>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	ec43 2b11 	vmov	d1, r2, r3
 80019b6:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001a00 <ftoa+0xb0>
 80019ba:	f00a fb5f 	bl	800c07c <pow>
 80019be:	ec53 2b10 	vmov	r2, r3, d0
 80019c2:	4620      	mov	r0, r4
 80019c4:	4629      	mov	r1, r5
 80019c6:	f7fe fde1 	bl	800058c <__aeabi_dmul>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	f7ff f8b3 	bl	8000b3c <__aeabi_d2f>
 80019d6:	4603      	mov	r3, r0
 80019d8:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80019da:	edd7 7a06 	vldr	s15, [r7, #24]
 80019de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	3301      	adds	r3, #1
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	4413      	add	r3, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4619      	mov	r1, r3
 80019ee:	ee17 0a90 	vmov	r0, s15
 80019f2:	f7ff ff65 	bl	80018c0 <intToStr>
    }
}
 80019f6:	bf00      	nop
 80019f8:	3720      	adds	r7, #32
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bdb0      	pop	{r4, r5, r7, pc}
 80019fe:	bf00      	nop
 8001a00:	00000000 	.word	0x00000000
 8001a04:	40240000 	.word	0x40240000

08001a08 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	f5ad 3d90 	sub.w	sp, sp, #73728	; 0x12000
 8001a0e:	b0be      	sub	sp, #248	; 0xf8
 8001a10:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	convFlag = 0;
 8001a12:	4baf      	ldr	r3, [pc, #700]	; (8001cd0 <main+0x2c8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
	//E (low), A, D, G, B, E (high)
	float32_t string_freqs[6] = {82.41, 110.0, 146.83, 196.0, 246.94, 329.63};
 8001a18:	4bae      	ldr	r3, [pc, #696]	; (8001cd4 <main+0x2cc>)
 8001a1a:	f507 3490 	add.w	r4, r7, #73728	; 0x12000
 8001a1e:	f104 047c 	add.w	r4, r4, #124	; 0x7c
 8001a22:	461d      	mov	r5, r3
 8001a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a2c:	e884 0003 	stmia.w	r4, {r0, r1}
	float32_t measured_freq;
	char *strings[] = {"E (low)", "A", "D", "G", "B", "E (high)" };
 8001a30:	4ba9      	ldr	r3, [pc, #676]	; (8001cd8 <main+0x2d0>)
 8001a32:	f507 3490 	add.w	r4, r7, #73728	; 0x12000
 8001a36:	f104 0464 	add.w	r4, r4, #100	; 0x64
 8001a3a:	461d      	mov	r5, r3
 8001a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a44:	e884 0003 	stmia.w	r4, {r0, r1}
	char * E_high = "E (high)";
 8001a48:	4ba4      	ldr	r3, [pc, #656]	; (8001cdc <main+0x2d4>)
 8001a4a:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8001a4e:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 8001a52:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a54:	f001 fd75 	bl	8003542 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a58:	f000 fd66 	bl	8002528 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a5c:	f000 fdaa 	bl	80025b4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a60:	f001 f864 	bl	8002b2c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a64:	f001 f838 	bl	8002ad8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a68:	f000 fdd4 	bl	8002614 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001a6c:	f000 fe38 	bl	80026e0 <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 8001a70:	f000 fe6a 	bl	8002748 <MX_LPUART1_UART_Init>
  MX_SAI1_Init();
 8001a74:	f000 feb4 	bl	80027e0 <MX_SAI1_Init>
  MX_TIM1_Init();
 8001a78:	f000 ff26 	bl	80028c8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001a7c:	f000 ffd0 	bl	8002a20 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001a80:	f000 fee4 	bl	800284c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  screenInit();
 8001a84:	f7ff fee2 	bl	800184c <screenInit>
  ILI9341_FillScreen(ILI9341_BLACK);
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff fd39 	bl	8001500 <ILI9341_FillScreen>
  //arm_rfft_fast_init_f32(&fftHandler, BUFFER_LENGTH);

  float32_t signal[BUFFER_LENGTH];
  float32_t autocorrelation[BUFFER_LENGTH];

  uint32_t LOWEST_PERIOD = SAMPLING_RATE / 440; //440hz max
 8001a8e:	2309      	movs	r3, #9
 8001a90:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8001a94:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 8001a98:	6013      	str	r3, [r2, #0]
  uint32_t HIGHEST_PERIOD = SAMPLING_RATE / 50; //60 Hz min (change to 50)
 8001a9a:	2351      	movs	r3, #81	; 0x51
 8001a9c:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8001aa0:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 8001aa4:	6013      	str	r3, [r2, #0]

   volatile uint16_t ADC_BUFFER[BUFFER_LENGTH];

//  float32_t freq_resolution = (float32_t)SAMPLING_RATE / (float32_t)BUFFER_LENGTH;

  HAL_TIM_Base_Start_IT(&htim1);
 8001aa6:	488e      	ldr	r0, [pc, #568]	; (8001ce0 <main+0x2d8>)
 8001aa8:	f007 f998 	bl	8008ddc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001aac:	2104      	movs	r1, #4
 8001aae:	488d      	ldr	r0, [pc, #564]	; (8001ce4 <main+0x2dc>)
 8001ab0:	f007 fabc 	bl	800902c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, BUFFER_LENGTH);
 8001ab4:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8001ab8:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8001abc:	3b84      	subs	r3, #132	; 0x84
 8001abe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4888      	ldr	r0, [pc, #544]	; (8001ce8 <main+0x2e0>)
 8001ac6:	f002 f8f5 	bl	8003cb4 <HAL_ADC_Start_DMA>

	  //Test signal with harmonics
	  for (int i = 0; i < BUFFER_LENGTH; ++i){
 8001aca:	2300      	movs	r3, #0
 8001acc:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8001ad0:	f102 02e0 	add.w	r2, r2, #224	; 0xe0
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e0b9      	b.n	8001c4c <main+0x244>
		  float32_t r = (float32_t)i / (float32_t)SAMPLING_RATE;
 8001ad8:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001adc:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aea:	eddf 6a80 	vldr	s13, [pc, #512]	; 8001cec <main+0x2e4>
 8001aee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af2:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001af6:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8001afa:	edc3 7a00 	vstr	s15, [r3]
		  r *= 3.14158265359 * 2;
 8001afe:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001b02:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	f7fe fce8 	bl	80004dc <__aeabi_f2d>
 8001b0c:	a36e      	add	r3, pc, #440	; (adr r3, 8001cc8 <main+0x2c0>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fd3b 	bl	800058c <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f7ff f80d 	bl	8000b3c <__aeabi_d2f>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8001b28:	f102 0298 	add.w	r2, r2, #152	; 0x98
 8001b2c:	6013      	str	r3, [r2, #0]
		  r *= 329; //Hz
 8001b2e:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001b32:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8001b36:	edd3 7a00 	vldr	s15, [r3]
 8001b3a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001cf0 <main+0x2e8>
 8001b3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b42:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001b46:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8001b4a:	edc3 7a00 	vstr	s15, [r3]

		  float32_t s = sin(r) + sin(r*4) * 0.5 + sin(r*3) * 0.25;
 8001b4e:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001b52:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	f7fe fcc0 	bl	80004dc <__aeabi_f2d>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	ec43 2b10 	vmov	d0, r2, r3
 8001b64:	f00a fafc 	bl	800c160 <sin>
 8001b68:	ec55 4b10 	vmov	r4, r5, d0
 8001b6c:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001b70:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001b7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b80:	ee17 0a90 	vmov	r0, s15
 8001b84:	f7fe fcaa 	bl	80004dc <__aeabi_f2d>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	ec43 2b10 	vmov	d0, r2, r3
 8001b90:	f00a fae6 	bl	800c160 <sin>
 8001b94:	ec51 0b10 	vmov	r0, r1, d0
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	4b55      	ldr	r3, [pc, #340]	; (8001cf4 <main+0x2ec>)
 8001b9e:	f7fe fcf5 	bl	800058c <__aeabi_dmul>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	4629      	mov	r1, r5
 8001baa:	f7fe fb39 	bl	8000220 <__adddf3>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4614      	mov	r4, r2
 8001bb4:	461d      	mov	r5, r3
 8001bb6:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001bba:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001bc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bca:	ee17 0a90 	vmov	r0, s15
 8001bce:	f7fe fc85 	bl	80004dc <__aeabi_f2d>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	ec43 2b10 	vmov	d0, r2, r3
 8001bda:	f00a fac1 	bl	800c160 <sin>
 8001bde:	ec51 0b10 	vmov	r0, r1, d0
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4b44      	ldr	r3, [pc, #272]	; (8001cf8 <main+0x2f0>)
 8001be8:	f7fe fcd0 	bl	800058c <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	f7fe fb14 	bl	8000220 <__adddf3>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f7fe ff9c 	bl	8000b3c <__aeabi_d2f>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8001c0a:	f102 0294 	add.w	r2, r2, #148	; 0x94
 8001c0e:	6013      	str	r3, [r2, #0]
		  signal[i] = s;
 8001c10:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8001c14:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001c1e:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	3b84      	subs	r3, #132	; 0x84
 8001c2a:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8001c2e:	f102 0294 	add.w	r2, r2, #148	; 0x94
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	601a      	str	r2, [r3, #0]
	  for (int i = 0; i < BUFFER_LENGTH; ++i){
 8001c36:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001c3a:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8001c46:	f102 02e0 	add.w	r2, r2, #224	; 0xe0
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001c50:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c5a:	f6ff af3d 	blt.w	8001ad8 <main+0xd0>

    arm_rfft_fast_instance_f32 fftInstance;


    // Initialize the FFT instance
    arm_rfft_fast_init_f32(&fftInstance, BUFFER_LENGTH);
 8001c5e:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8001c62:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8001c66:	3b9c      	subs	r3, #156	; 0x9c
 8001c68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f009 fa0d 	bl	800b08c <arm_rfft_fast_init_f32>

    float32_t output[BUFFER_LENGTH];
    arm_rfft_fast_f32(&fftInstance, signal, output, 0);
 8001c72:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001c76:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8001c7a:	3ae8      	subs	r2, #232	; 0xe8
 8001c7c:	f507 4160 	add.w	r1, r7, #57344	; 0xe000
 8001c80:	f101 0168 	add.w	r1, r1, #104	; 0x68
 8001c84:	3904      	subs	r1, #4
 8001c86:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 8001c8a:	f100 00e8 	add.w	r0, r0, #232	; 0xe8
 8001c8e:	389c      	subs	r0, #156	; 0x9c
 8001c90:	2300      	movs	r3, #0
 8001c92:	f009 fadf 	bl	800b254 <arm_rfft_fast_f32>

    output[0] = 0;
 8001c96:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001c9a:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	f842 3ce8 	str.w	r3, [r2, #-232]
    output[1] = 0;
 8001ca8:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001cac:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	f842 3ce4 	str.w	r3, [r2, #-228]

    // Rest of the frequency bins (upto N/2)
    float32_t HPS[BUFFER_LENGTH / 2];
    for (uint32_t i = 0; i < BUFFER_LENGTH / 2; ++i) {
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8001cc0:	f102 02dc 	add.w	r2, r2, #220	; 0xdc
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e07f      	b.n	8001dc8 <main+0x3c0>
 8001cc8:	1616ccb1 	.word	0x1616ccb1
 8001ccc:	401921f6 	.word	0x401921f6
 8001cd0:	2000039c 	.word	0x2000039c
 8001cd4:	0800e9ac 	.word	0x0800e9ac
 8001cd8:	0800e9dc 	.word	0x0800e9dc
 8001cdc:	0800e964 	.word	0x0800e964
 8001ce0:	20000304 	.word	0x20000304
 8001ce4:	20000350 	.word	0x20000350
 8001ce8:	2000009c 	.word	0x2000009c
 8001cec:	457f199a 	.word	0x457f199a
 8001cf0:	43a48000 	.word	0x43a48000
 8001cf4:	3fe00000 	.word	0x3fe00000
 8001cf8:	3fd00000 	.word	0x3fd00000
 8001cfc:	442a8000 	.word	0x442a8000
 8001d00:	44000000 	.word	0x44000000
        HPS[i] = sqrtf(output[2 * i] * output[2 * i] + output[2 * i + 1] * output[2 * i + 1]); // Real part
 8001d04:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001d08:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001d14:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3be8      	subs	r3, #232	; 0xe8
 8001d1e:	ed93 7a00 	vldr	s14, [r3]
 8001d22:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001d26:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001d32:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	3be8      	subs	r3, #232	; 0xe8
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d44:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001d48:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	3301      	adds	r3, #1
 8001d52:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001d56:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3be8      	subs	r3, #232	; 0xe8
 8001d60:	edd3 6a00 	vldr	s13, [r3]
 8001d64:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001d68:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	3301      	adds	r3, #1
 8001d72:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001d76:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3be8      	subs	r3, #232	; 0xe8
 8001d80:	edd3 7a00 	vldr	s15, [r3]
 8001d84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d90:	f00a fa3e 	bl	800c210 <sqrtf>
 8001d94:	eef0 7a40 	vmov.f32	s15, s0
 8001d98:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001da2:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	3be8      	subs	r3, #232	; 0xe8
 8001dae:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < BUFFER_LENGTH / 2; ++i) {
 8001db2:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001db6:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8001dc2:	f102 02dc 	add.w	r2, r2, #220	; 0xdc
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001dcc:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dd6:	d395      	bcc.n	8001d04 <main+0x2fc>
    }

    for(int i = 0; i < BUFFER_LENGTH / 4; i++) {
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8001dde:	f102 02d8 	add.w	r2, r2, #216	; 0xd8
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	e0a7      	b.n	8001f36 <main+0x52e>

      HPS[i] = HPS[i] * HPS[2*i];
 8001de6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001dea:	461a      	mov	r2, r3
 8001dec:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001df0:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	3be8      	subs	r3, #232	; 0xe8
 8001dfc:	ed93 7a00 	vldr	s14, [r3]
 8001e00:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001e04:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	3be8      	subs	r3, #232	; 0xe8
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e22:	461a      	mov	r2, r3
 8001e24:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001e28:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	3be8      	subs	r3, #232	; 0xe8
 8001e34:	edc3 7a00 	vstr	s15, [r3]

      if(i < floorf(BUFFER_LENGTH / 6)) {
 8001e38:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001e3c:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	ee07 3a90 	vmov	s15, r3
 8001e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e4a:	ed1f 7a54 	vldr	s14, [pc, #-336]	; 8001cfc <main+0x2f4>
 8001e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e56:	d52a      	bpl.n	8001eae <main+0x4a6>
        HPS[i] = HPS[i] * HPS[3*i];
 8001e58:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001e62:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3be8      	subs	r3, #232	; 0xe8
 8001e6e:	ed93 7a00 	vldr	s14, [r3]
 8001e72:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001e76:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	3be8      	subs	r3, #232	; 0xe8
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e94:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e98:	461a      	mov	r2, r3
 8001e9a:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001e9e:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3be8      	subs	r3, #232	; 0xe8
 8001eaa:	edc3 7a00 	vstr	s15, [r3]
      }

      if(i < floorf(BUFFER_LENGTH / 8)) {
 8001eae:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001eb2:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	ee07 3a90 	vmov	s15, r3
 8001ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec0:	ed1f 7a71 	vldr	s14, [pc, #-452]	; 8001d00 <main+0x2f8>
 8001ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ecc:	d528      	bpl.n	8001f20 <main+0x518>
        HPS[i] = HPS[i] * HPS[4*i];
 8001ece:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001ed8:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3be8      	subs	r3, #232	; 0xe8
 8001ee4:	ed93 7a00 	vldr	s14, [r3]
 8001ee8:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001eec:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	3be8      	subs	r3, #232	; 0xe8
 8001efe:	edd3 7a00 	vldr	s15, [r3]
 8001f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f06:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001f10:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	3be8      	subs	r3, #232	; 0xe8
 8001f1c:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < BUFFER_LENGTH / 4; i++) {
 8001f20:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001f24:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8001f30:	f102 02d8 	add.w	r2, r2, #216	; 0xd8
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001f3a:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f44:	f6ff af4f 	blt.w	8001de6 <main+0x3de>
      }

    }

    int max_peak = 0;
 8001f48:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8001f4c:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8001f50:	461a      	mov	r2, r3
 8001f52:	2300      	movs	r3, #0
 8001f54:	f842 3ca0 	str.w	r3, [r2, #-160]
    int max_mag = 0;
 8001f58:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8001f5c:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8001f60:	461a      	mov	r2, r3
 8001f62:	2300      	movs	r3, #0
 8001f64:	f842 3ca4 	str.w	r3, [r2, #-164]
    arm_max_f32(HPS, BUFFER_LENGTH / 2, &max_mag, &max_peak);
 8001f68:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8001f6c:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8001f70:	3ba0      	subs	r3, #160	; 0xa0
 8001f72:	f507 4200 	add.w	r2, r7, #32768	; 0x8000
 8001f76:	f102 02e8 	add.w	r2, r2, #232	; 0xe8
 8001f7a:	3aa4      	subs	r2, #164	; 0xa4
 8001f7c:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8001f80:	38e8      	subs	r0, #232	; 0xe8
 8001f82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f86:	f008 ff4d 	bl	800ae24 <arm_max_f32>

//////// TEST CODE HPS //////////



	  while(convFlag == 0) {;}
 8001f8a:	bf00      	nop
 8001f8c:	4bcc      	ldr	r3, [pc, #816]	; (80022c0 <main+0x8b8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0fb      	beq.n	8001f8c <main+0x584>


	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 8001f94:	2300      	movs	r3, #0
 8001f96:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8001f9a:	f102 02d4 	add.w	r2, r2, #212	; 0xd4
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	e031      	b.n	8002006 <main+0x5fe>
		  signal[i] = (double)(ADC_BUFFER[i]);
 8001fa2:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8001fa6:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8001faa:	461a      	mov	r2, r3
 8001fac:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001fb0:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	f833 3c84 	ldrh.w	r3, [r3, #-132]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fa69 	bl	8000498 <__aeabi_ui2d>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7fe fdb5 	bl	8000b3c <__aeabi_d2f>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8001fd8:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001fe2:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	3b84      	subs	r3, #132	; 0x84
 8001fee:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 8001ff0:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8001ff4:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8002000:	f102 02d4 	add.w	r2, r2, #212	; 0xd4
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 800200a:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002014:	dbc5      	blt.n	8001fa2 <main+0x59a>
	  }


	  apply_hanning_window(&signal, BUFFER_LENGTH);
 8002016:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 800201a:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800201e:	3b04      	subs	r3, #4
 8002020:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fa99 	bl	800155c <apply_hanning_window>



	  autocorrelate(signal, BUFFER_LENGTH,  autocorrelation);
 800202a:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 800202e:	f102 02e8 	add.w	r2, r2, #232	; 0xe8
 8002032:	3a84      	subs	r2, #132	; 0x84
 8002034:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8002038:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800203c:	3b04      	subs	r3, #4
 800203e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fb30 	bl	80016a8 <autocorrelate>

	  uint32_t peaks[BUFFER_LENGTH/2];
	  uint32_t num_peaks = 0;
 8002048:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 800204c:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8002050:	461a      	mov	r2, r3
 8002052:	2300      	movs	r3, #0
 8002054:	f842 3ca8 	str.w	r3, [r2, #-168]

	  find_peaks(autocorrelation, BUFFER_LENGTH/2, peaks, &num_peaks); //returns peak indices
 8002058:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 800205c:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8002060:	3ba8      	subs	r3, #168	; 0xa8
 8002062:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8002066:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800206a:	3ae8      	subs	r2, #232	; 0xe8
 800206c:	f507 4020 	add.w	r0, r7, #40960	; 0xa000
 8002070:	f100 00e8 	add.w	r0, r0, #232	; 0xe8
 8002074:	3884      	subs	r0, #132	; 0x84
 8002076:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800207a:	f7ff fab7 	bl	80015ec <find_peaks>


	  float32_t freq = 0.0f;
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8002086:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 800208a:	6013      	str	r3, [r2, #0]
	     if (num_peaks > 0) {
 800208c:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8002090:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8002094:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80ac 	beq.w	80021f6 <main+0x7ee>
	         // Get the highest valid peak
	         uint32_t max_peak_index = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 80020a4:	f102 02d0 	add.w	r2, r2, #208	; 0xd0
 80020a8:	6013      	str	r3, [r2, #0]
	         float32_t max_value = 0;
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 80020b2:	f102 02cc 	add.w	r2, r2, #204	; 0xcc
 80020b6:	6013      	str	r3, [r2, #0]
	         for (uint32_t i = 0; i < num_peaks; ++i) {
 80020b8:	2300      	movs	r3, #0
 80020ba:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 80020be:	f102 02c8 	add.w	r2, r2, #200	; 0xc8
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	e06c      	b.n	80021a0 <main+0x798>
	             int32_t peak = peaks[i];
 80020c6:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80020ca:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80020ce:	461a      	mov	r2, r3
 80020d0:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 80020d4:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	f853 3ce8 	ldr.w	r3, [r3, #-232]
 80020e2:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 80020e6:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 80020ea:	6013      	str	r3, [r2, #0]
	             //peak greater than lowest period and smaller than largest possible period
	             if (peak > LOWEST_PERIOD && peak < HIGHEST_PERIOD) { //if valid peak
 80020ec:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 80020f0:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 80020fa:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d242      	bcs.n	800218a <main+0x782>
 8002104:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8002108:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8002112:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d936      	bls.n	800218a <main+0x782>
	                 if (autocorrelation[peak] > max_value) {
 800211c:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 8002120:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8002124:	461a      	mov	r2, r3
 8002126:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 800212a:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	3b84      	subs	r3, #132	; 0x84
 8002136:	edd3 7a00 	vldr	s15, [r3]
 800213a:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 800213e:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 8002142:	ed93 7a00 	vldr	s14, [r3]
 8002146:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800214a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214e:	d51c      	bpl.n	800218a <main+0x782>
	                     max_peak_index = peak;
 8002150:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8002154:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 800215e:	f102 02d0 	add.w	r2, r2, #208	; 0xd0
 8002162:	6013      	str	r3, [r2, #0]
	                     max_value = autocorrelation[peak];
 8002164:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 8002168:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 800216c:	461a      	mov	r2, r3
 800216e:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8002172:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	3b84      	subs	r3, #132	; 0x84
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8002184:	f102 02cc 	add.w	r2, r2, #204	; 0xcc
 8002188:	6013      	str	r3, [r2, #0]
	         for (uint32_t i = 0; i < num_peaks; ++i) {
 800218a:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 800218e:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3301      	adds	r3, #1
 8002196:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 800219a:	f102 02c8 	add.w	r2, r2, #200	; 0xc8
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80021a4:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 80021a8:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80021ac:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 80021b0:	f102 02c8 	add.w	r2, r2, #200	; 0xc8
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d385      	bcc.n	80020c6 <main+0x6be>
	                 }
	             }
	         }
	         if (max_value > 0) {
 80021ba:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 80021be:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ce:	dd12      	ble.n	80021f6 <main+0x7ee>
	             measured_freq = (float32_t)SAMPLING_RATE / max_peak_index;
 80021d0:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 80021d4:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	ee07 3a90 	vmov	s15, r3
 80021de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80022c4 <main+0x8bc>
 80021e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021ea:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 80021ee:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 80021f2:	edc3 7a00 	vstr	s15, [r3]

	     //Match frequency to string

	     //find smallest magnitude of distance
	     float32_t min_freqs[6];
	     for(int i = 0; i < 6; ++i){
 80021f6:	2300      	movs	r3, #0
 80021f8:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 80021fc:	f102 02c4 	add.w	r2, r2, #196	; 0xc4
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	e02f      	b.n	8002264 <main+0x85c>
	    	 min_freqs[i] = string_freqs[i] - measured_freq;
 8002204:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8002208:	f103 03c4 	add.w	r3, r3, #196	; 0xc4
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8002214:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8002218:	443b      	add	r3, r7
 800221a:	3b6c      	subs	r3, #108	; 0x6c
 800221c:	ed93 7a00 	vldr	s14, [r3]
 8002220:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8002224:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002230:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8002234:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8002238:	461a      	mov	r2, r3
 800223a:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 800223e:	f103 03c4 	add.w	r3, r3, #196	; 0xc4
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	3bc0      	subs	r3, #192	; 0xc0
 800224a:	edc3 7a00 	vstr	s15, [r3]
	     for(int i = 0; i < 6; ++i){
 800224e:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8002252:	f103 03c4 	add.w	r3, r3, #196	; 0xc4
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 800225e:	f102 02c4 	add.w	r2, r2, #196	; 0xc4
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8002268:	f103 03c4 	add.w	r3, r3, #196	; 0xc4
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b05      	cmp	r3, #5
 8002270:	ddc8      	ble.n	8002204 <main+0x7fc>
	     }

	     arm_abs_f32(min_freqs, min_freqs, 6);
 8002272:	f507 4100 	add.w	r1, r7, #32768	; 0x8000
 8002276:	f101 01e8 	add.w	r1, r1, #232	; 0xe8
 800227a:	39c0      	subs	r1, #192	; 0xc0
 800227c:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8002280:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8002284:	3bc0      	subs	r3, #192	; 0xc0
 8002286:	2206      	movs	r2, #6
 8002288:	4618      	mov	r0, r3
 800228a:	f009 fbc1 	bl	800ba10 <arm_abs_f32>

	     //find the argmin
	     float32_t current_min = min_freqs[0];
 800228e:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8002292:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8002296:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 800229a:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 800229e:	f102 02c0 	add.w	r2, r2, #192	; 0xc0
 80022a2:	6013      	str	r3, [r2, #0]
	     uint8_t index = 0;;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 80022aa:	f102 02bf 	add.w	r2, r2, #191	; 0xbf
 80022ae:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 80022b0:	2300      	movs	r3, #0
 80022b2:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 80022b6:	f102 02b8 	add.w	r2, r2, #184	; 0xb8
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	e046      	b.n	800234c <main+0x944>
 80022be:	bf00      	nop
 80022c0:	2000039c 	.word	0x2000039c
 80022c4:	457f199a 	.word	0x457f199a
	    	 if (min_freqs[i] < current_min){
 80022c8:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80022cc:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 80022d0:	461a      	mov	r2, r3
 80022d2:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 80022d6:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	3bc0      	subs	r3, #192	; 0xc0
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 80022ea:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
 80022ee:	ed93 7a00 	vldr	s14, [r3]
 80022f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fa:	dd1c      	ble.n	8002336 <main+0x92e>
	    		 current_min = min_freqs[i];
 80022fc:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8002300:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8002304:	461a      	mov	r2, r3
 8002306:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 800230a:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	3bc0      	subs	r3, #192	; 0xc0
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 800231c:	f102 02c0 	add.w	r2, r2, #192	; 0xc0
 8002320:	6013      	str	r3, [r2, #0]
	    		 index = i;
 8002322:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8002326:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8002330:	f102 02bf 	add.w	r2, r2, #191	; 0xbf
 8002334:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 8002336:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 800233a:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3301      	adds	r3, #1
 8002342:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8002346:	f102 02b8 	add.w	r2, r2, #184	; 0xb8
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8002350:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b05      	cmp	r3, #5
 8002358:	ddb6      	ble.n	80022c8 <main+0x8c0>
	    	 }
	     }

	     //assign detected string
	     detected_string = strings[index];
 800235a:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 800235e:	f103 03bf 	add.w	r3, r3, #191	; 0xbf
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800236a:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 800236e:	443b      	add	r3, r7
 8002370:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002374:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8002378:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 800237c:	6013      	str	r3, [r2, #0]

	     //manually compensate for high E being off
	     if(strcmp(detected_string, E_high) == 0){
 800237e:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8002382:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 8002386:	6819      	ldr	r1, [r3, #0]
 8002388:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 800238c:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	f7fd ff35 	bl	8000200 <strcmp>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10f      	bne.n	80023bc <main+0x9b4>
	    	measured_freq += 2.0; //subject to change, but add 2Hz
 800239c:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 80023a0:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80023ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023b0:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 80023b4:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 80023b8:	edc3 7a00 	vstr	s15, [r3]
	     }

	     string_offset = measured_freq - string_freqs[index];
 80023bc:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 80023c0:	f103 03bf 	add.w	r3, r3, #191	; 0xbf
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 80023cc:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 80023d0:	443b      	add	r3, r7
 80023d2:	3b6c      	subs	r3, #108	; 0x6c
 80023d4:	edd3 7a00 	vldr	s15, [r3]
 80023d8:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 80023dc:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 80023e0:	ed93 7a00 	vldr	s14, [r3]
 80023e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023e8:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 80023ec:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 80023f0:	edc3 7a00 	vstr	s15, [r3]


	     char charFreq[20];
	     char desiredFreq[20];
	     ftoa(measured_freq, charFreq, 2);
 80023f4:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80023f8:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 80023fc:	3bd4      	subs	r3, #212	; 0xd4
 80023fe:	2102      	movs	r1, #2
 8002400:	4618      	mov	r0, r3
 8002402:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8002406:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 800240a:	ed93 0a00 	vldr	s0, [r3]
 800240e:	f7ff fa9f 	bl	8001950 <ftoa>
	     ftoa(string_freqs[index], desiredFreq, 2);
 8002412:	f507 3390 	add.w	r3, r7, #73728	; 0x12000
 8002416:	f103 03bf 	add.w	r3, r3, #191	; 0xbf
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8002422:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8002426:	443b      	add	r3, r7
 8002428:	3b6c      	subs	r3, #108	; 0x6c
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8002432:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8002436:	3be8      	subs	r3, #232	; 0xe8
 8002438:	2102      	movs	r1, #2
 800243a:	4618      	mov	r0, r3
 800243c:	eeb0 0a67 	vmov.f32	s0, s15
 8002440:	f7ff fa86 	bl	8001950 <ftoa>
	     ILI9341_WriteString(10, 0, "Detected String:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8002444:	4b32      	ldr	r3, [pc, #200]	; (8002510 <main+0xb08>)
 8002446:	2200      	movs	r2, #0
 8002448:	9202      	str	r2, [sp, #8]
 800244a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800244e:	9201      	str	r2, [sp, #4]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	9200      	str	r2, [sp, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a2f      	ldr	r2, [pc, #188]	; (8002514 <main+0xb0c>)
 8002458:	2100      	movs	r1, #0
 800245a:	200a      	movs	r0, #10
 800245c:	f7fe ff97 	bl	800138e <ILI9341_WriteString>
	     ILI9341_WriteString(100, 30, detected_string, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8002460:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <main+0xb10>)
 8002462:	2200      	movs	r2, #0
 8002464:	9202      	str	r2, [sp, #8]
 8002466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800246a:	9201      	str	r2, [sp, #4]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	9200      	str	r2, [sp, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f507 3290 	add.w	r2, r7, #73728	; 0x12000
 8002476:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	211e      	movs	r1, #30
 800247e:	2064      	movs	r0, #100	; 0x64
 8002480:	f7fe ff85 	bl	800138e <ILI9341_WriteString>
	     ILI9341_WriteString(10, 60, "Actual Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8002484:	4b22      	ldr	r3, [pc, #136]	; (8002510 <main+0xb08>)
 8002486:	2200      	movs	r2, #0
 8002488:	9202      	str	r2, [sp, #8]
 800248a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800248e:	9201      	str	r2, [sp, #4]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	9200      	str	r2, [sp, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a21      	ldr	r2, [pc, #132]	; (800251c <main+0xb14>)
 8002498:	213c      	movs	r1, #60	; 0x3c
 800249a:	200a      	movs	r0, #10
 800249c:	f7fe ff77 	bl	800138e <ILI9341_WriteString>
	     ILI9341_WriteString(100, 90, charFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <main+0xb10>)
 80024a2:	f507 4200 	add.w	r2, r7, #32768	; 0x8000
 80024a6:	f102 02e8 	add.w	r2, r2, #232	; 0xe8
 80024aa:	3ad4      	subs	r2, #212	; 0xd4
 80024ac:	2100      	movs	r1, #0
 80024ae:	9102      	str	r1, [sp, #8]
 80024b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80024b4:	9101      	str	r1, [sp, #4]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	9100      	str	r1, [sp, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	215a      	movs	r1, #90	; 0x5a
 80024be:	2064      	movs	r0, #100	; 0x64
 80024c0:	f7fe ff65 	bl	800138e <ILI9341_WriteString>
	     ILI9341_WriteString(10, 120, "Desired Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <main+0xb08>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	9202      	str	r2, [sp, #8]
 80024ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ce:	9201      	str	r2, [sp, #4]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	9200      	str	r2, [sp, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a12      	ldr	r2, [pc, #72]	; (8002520 <main+0xb18>)
 80024d8:	2178      	movs	r1, #120	; 0x78
 80024da:	200a      	movs	r0, #10
 80024dc:	f7fe ff57 	bl	800138e <ILI9341_WriteString>
	     ILI9341_WriteString(100, 150, desiredFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80024e0:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <main+0xb10>)
 80024e2:	f507 4200 	add.w	r2, r7, #32768	; 0x8000
 80024e6:	f102 02e8 	add.w	r2, r2, #232	; 0xe8
 80024ea:	3ae8      	subs	r2, #232	; 0xe8
 80024ec:	2100      	movs	r1, #0
 80024ee:	9102      	str	r1, [sp, #8]
 80024f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80024f4:	9101      	str	r1, [sp, #4]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	9100      	str	r1, [sp, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2196      	movs	r1, #150	; 0x96
 80024fe:	2064      	movs	r0, #100	; 0x64
 8002500:	f7fe ff45 	bl	800138e <ILI9341_WriteString>
	     //for (int i = 0; i < 1000000; ++i);

	     //set_motor_speed(55);


	  convFlag = 0;
 8002504:	4b07      	ldr	r3, [pc, #28]	; (8002524 <main+0xb1c>)
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
  {
 800250a:	f7ff bad3 	b.w	8001ab4 <main+0xac>
 800250e:	bf00      	nop
 8002510:	20000000 	.word	0x20000000
 8002514:	0800e970 	.word	0x0800e970
 8002518:	20000008 	.word	0x20000008
 800251c:	0800e984 	.word	0x0800e984
 8002520:	0800e998 	.word	0x0800e998
 8002524:	2000039c 	.word	0x2000039c

08002528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b096      	sub	sp, #88	; 0x58
 800252c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	2244      	movs	r2, #68	; 0x44
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f009 fd6e 	bl	800c018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800253c:	463b      	mov	r3, r7
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
 8002548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800254a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800254e:	f003 f81b 	bl	8005588 <HAL_PWREx_ControlVoltageScaling>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002558:	f000 fc8e 	bl	8002e78 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800255c:	2310      	movs	r3, #16
 800255e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002560:	2301      	movs	r3, #1
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8002568:	2370      	movs	r3, #112	; 0x70
 800256a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800256c:	2300      	movs	r3, #0
 800256e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	4618      	mov	r0, r3
 8002576:	f003 f8bb 	bl	80056f0 <HAL_RCC_OscConfig>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002580:	f000 fc7a 	bl	8002e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002584:	230f      	movs	r3, #15
 8002586:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002588:	2300      	movs	r3, #0
 800258a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002598:	463b      	mov	r3, r7
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f003 fcc1 	bl	8005f24 <HAL_RCC_ClockConfig>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <SystemClock_Config+0x84>
  {
    Error_Handler();
 80025a8:	f000 fc66 	bl	8002e78 <Error_Handler>
  }
}
 80025ac:	bf00      	nop
 80025ae:	3758      	adds	r7, #88	; 0x58
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b0a6      	sub	sp, #152	; 0x98
 80025b8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	2294      	movs	r2, #148	; 0x94
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f009 fd29 	bl	800c018 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 80025c6:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80025ca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80025cc:	2300      	movs	r3, #0
 80025ce:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80025d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80025d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80025d8:	2301      	movs	r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80025dc:	2301      	movs	r3, #1
 80025de:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80025e0:	2308      	movs	r3, #8
 80025e2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80025e4:	2302      	movs	r3, #2
 80025e6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80025e8:	2302      	movs	r3, #2
 80025ea:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80025ec:	2302      	movs	r3, #2
 80025ee:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 80025f0:	4b07      	ldr	r3, [pc, #28]	; (8002610 <PeriphCommonClock_Config+0x5c>)
 80025f2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	4618      	mov	r0, r3
 80025f8:	f003 ff52 	bl	80064a0 <HAL_RCCEx_PeriphCLKConfig>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8002602:	f000 fc39 	bl	8002e78 <Error_Handler>
  }
}
 8002606:	bf00      	nop
 8002608:	3798      	adds	r7, #152	; 0x98
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	01010000 	.word	0x01010000

08002614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800261a:	463b      	mov	r3, r7
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
 8002628:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800262a:	4b2a      	ldr	r3, [pc, #168]	; (80026d4 <MX_ADC1_Init+0xc0>)
 800262c:	4a2a      	ldr	r2, [pc, #168]	; (80026d8 <MX_ADC1_Init+0xc4>)
 800262e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002630:	4b28      	ldr	r3, [pc, #160]	; (80026d4 <MX_ADC1_Init+0xc0>)
 8002632:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002636:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002638:	4b26      	ldr	r3, [pc, #152]	; (80026d4 <MX_ADC1_Init+0xc0>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800263e:	4b25      	ldr	r3, [pc, #148]	; (80026d4 <MX_ADC1_Init+0xc0>)
 8002640:	2200      	movs	r2, #0
 8002642:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002644:	4b23      	ldr	r3, [pc, #140]	; (80026d4 <MX_ADC1_Init+0xc0>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800264a:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <MX_ADC1_Init+0xc0>)
 800264c:	2204      	movs	r2, #4
 800264e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002650:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <MX_ADC1_Init+0xc0>)
 8002652:	2200      	movs	r2, #0
 8002654:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002656:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <MX_ADC1_Init+0xc0>)
 8002658:	2200      	movs	r2, #0
 800265a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800265c:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <MX_ADC1_Init+0xc0>)
 800265e:	2201      	movs	r2, #1
 8002660:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002662:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <MX_ADC1_Init+0xc0>)
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800266a:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <MX_ADC1_Init+0xc0>)
 800266c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002670:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <MX_ADC1_Init+0xc0>)
 8002674:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002678:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800267a:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <MX_ADC1_Init+0xc0>)
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <MX_ADC1_Init+0xc0>)
 8002684:	2200      	movs	r2, #0
 8002686:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002688:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <MX_ADC1_Init+0xc0>)
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002690:	4810      	ldr	r0, [pc, #64]	; (80026d4 <MX_ADC1_Init+0xc0>)
 8002692:	f001 f9c9 	bl	8003a28 <HAL_ADC_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800269c:	f000 fbec 	bl	8002e78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80026a0:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <MX_ADC1_Init+0xc8>)
 80026a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026a4:	2306      	movs	r3, #6
 80026a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80026a8:	2307      	movs	r3, #7
 80026aa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80026ac:	237f      	movs	r3, #127	; 0x7f
 80026ae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80026b0:	2304      	movs	r3, #4
 80026b2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026b8:	463b      	mov	r3, r7
 80026ba:	4619      	mov	r1, r3
 80026bc:	4805      	ldr	r0, [pc, #20]	; (80026d4 <MX_ADC1_Init+0xc0>)
 80026be:	f001 fb91 	bl	8003de4 <HAL_ADC_ConfigChannel>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80026c8:	f000 fbd6 	bl	8002e78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026cc:	bf00      	nop
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	2000009c 	.word	0x2000009c
 80026d8:	50040000 	.word	0x50040000
 80026dc:	04300002 	.word	0x04300002

080026e0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80026e6:	463b      	mov	r3, r7
 80026e8:	2228      	movs	r2, #40	; 0x28
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f009 fc93 	bl	800c018 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <MX_DAC1_Init+0x60>)
 80026f4:	4a13      	ldr	r2, [pc, #76]	; (8002744 <MX_DAC1_Init+0x64>)
 80026f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80026f8:	4811      	ldr	r0, [pc, #68]	; (8002740 <MX_DAC1_Init+0x60>)
 80026fa:	f002 f99a 	bl	8004a32 <HAL_DAC_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002704:	f000 fbb8 	bl	8002e78 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002708:	2300      	movs	r3, #0
 800270a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800270c:	2300      	movs	r3, #0
 800270e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002710:	2300      	movs	r3, #0
 8002712:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002720:	463b      	mov	r3, r7
 8002722:	2200      	movs	r2, #0
 8002724:	4619      	mov	r1, r3
 8002726:	4806      	ldr	r0, [pc, #24]	; (8002740 <MX_DAC1_Init+0x60>)
 8002728:	f002 f9a6 	bl	8004a78 <HAL_DAC_ConfigChannel>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 8002732:	f000 fba1 	bl	8002e78 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002736:	bf00      	nop
 8002738:	3728      	adds	r7, #40	; 0x28
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000164 	.word	0x20000164
 8002744:	40007400 	.word	0x40007400

08002748 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800274c:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <MX_LPUART1_UART_Init+0x90>)
 800274e:	4a23      	ldr	r2, [pc, #140]	; (80027dc <MX_LPUART1_UART_Init+0x94>)
 8002750:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002752:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <MX_LPUART1_UART_Init+0x90>)
 8002754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002758:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800275a:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <MX_LPUART1_UART_Init+0x90>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002760:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <MX_LPUART1_UART_Init+0x90>)
 8002762:	2200      	movs	r2, #0
 8002764:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002766:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <MX_LPUART1_UART_Init+0x90>)
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800276c:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <MX_LPUART1_UART_Init+0x90>)
 800276e:	220c      	movs	r2, #12
 8002770:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002772:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <MX_LPUART1_UART_Init+0x90>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002778:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <MX_LPUART1_UART_Init+0x90>)
 800277a:	2200      	movs	r2, #0
 800277c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800277e:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <MX_LPUART1_UART_Init+0x90>)
 8002780:	2200      	movs	r2, #0
 8002782:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <MX_LPUART1_UART_Init+0x90>)
 8002786:	2200      	movs	r2, #0
 8002788:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800278a:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <MX_LPUART1_UART_Init+0x90>)
 800278c:	2200      	movs	r2, #0
 800278e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002790:	4811      	ldr	r0, [pc, #68]	; (80027d8 <MX_LPUART1_UART_Init+0x90>)
 8002792:	f007 fcdf 	bl	800a154 <HAL_UART_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800279c:	f000 fb6c 	bl	8002e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027a0:	2100      	movs	r1, #0
 80027a2:	480d      	ldr	r0, [pc, #52]	; (80027d8 <MX_LPUART1_UART_Init+0x90>)
 80027a4:	f008 fa74 	bl	800ac90 <HAL_UARTEx_SetTxFifoThreshold>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80027ae:	f000 fb63 	bl	8002e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027b2:	2100      	movs	r1, #0
 80027b4:	4808      	ldr	r0, [pc, #32]	; (80027d8 <MX_LPUART1_UART_Init+0x90>)
 80027b6:	f008 faa9 	bl	800ad0c <HAL_UARTEx_SetRxFifoThreshold>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80027c0:	f000 fb5a 	bl	8002e78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80027c4:	4804      	ldr	r0, [pc, #16]	; (80027d8 <MX_LPUART1_UART_Init+0x90>)
 80027c6:	f008 fa2a 	bl	800ac1e <HAL_UARTEx_DisableFifoMode>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80027d0:	f000 fb52 	bl	8002e78 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000178 	.word	0x20000178
 80027dc:	40008000 	.word	0x40008000

080027e0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80027e4:	4b16      	ldr	r3, [pc, #88]	; (8002840 <MX_SAI1_Init+0x60>)
 80027e6:	4a17      	ldr	r2, [pc, #92]	; (8002844 <MX_SAI1_Init+0x64>)
 80027e8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <MX_SAI1_Init+0x60>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80027f0:	4b13      	ldr	r3, [pc, #76]	; (8002840 <MX_SAI1_Init+0x60>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80027f6:	4b12      	ldr	r3, [pc, #72]	; (8002840 <MX_SAI1_Init+0x60>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80027fc:	4b10      	ldr	r3, [pc, #64]	; (8002840 <MX_SAI1_Init+0x60>)
 80027fe:	2200      	movs	r2, #0
 8002800:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002802:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <MX_SAI1_Init+0x60>)
 8002804:	2200      	movs	r2, #0
 8002806:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002808:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <MX_SAI1_Init+0x60>)
 800280a:	4a0f      	ldr	r2, [pc, #60]	; (8002848 <MX_SAI1_Init+0x68>)
 800280c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800280e:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <MX_SAI1_Init+0x60>)
 8002810:	2200      	movs	r2, #0
 8002812:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <MX_SAI1_Init+0x60>)
 8002816:	2200      	movs	r2, #0
 8002818:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <MX_SAI1_Init+0x60>)
 800281c:	2200      	movs	r2, #0
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <MX_SAI1_Init+0x60>)
 8002822:	2200      	movs	r2, #0
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002826:	2302      	movs	r3, #2
 8002828:	2200      	movs	r2, #0
 800282a:	2100      	movs	r1, #0
 800282c:	4804      	ldr	r0, [pc, #16]	; (8002840 <MX_SAI1_Init+0x60>)
 800282e:	f005 fb83 	bl	8007f38 <HAL_SAI_InitProtocol>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 8002838:	f000 fb1e 	bl	8002e78 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800283c:	bf00      	nop
 800283e:	bd80      	pop	{r7, pc}
 8002840:	2000020c 	.word	0x2000020c
 8002844:	40015404 	.word	0x40015404
 8002848:	0002ee00 	.word	0x0002ee00

0800284c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <MX_SPI1_Init+0x74>)
 8002852:	4a1c      	ldr	r2, [pc, #112]	; (80028c4 <MX_SPI1_Init+0x78>)
 8002854:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002856:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <MX_SPI1_Init+0x74>)
 8002858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800285c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800285e:	4b18      	ldr	r3, [pc, #96]	; (80028c0 <MX_SPI1_Init+0x74>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002864:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <MX_SPI1_Init+0x74>)
 8002866:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800286a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800286c:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <MX_SPI1_Init+0x74>)
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002872:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <MX_SPI1_Init+0x74>)
 8002874:	2200      	movs	r2, #0
 8002876:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <MX_SPI1_Init+0x74>)
 800287a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800287e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <MX_SPI1_Init+0x74>)
 8002882:	2228      	movs	r2, #40	; 0x28
 8002884:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <MX_SPI1_Init+0x74>)
 8002888:	2200      	movs	r2, #0
 800288a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <MX_SPI1_Init+0x74>)
 800288e:	2200      	movs	r2, #0
 8002890:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <MX_SPI1_Init+0x74>)
 8002894:	2200      	movs	r2, #0
 8002896:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <MX_SPI1_Init+0x74>)
 800289a:	2207      	movs	r2, #7
 800289c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <MX_SPI1_Init+0x74>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <MX_SPI1_Init+0x74>)
 80028a6:	2208      	movs	r2, #8
 80028a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028aa:	4805      	ldr	r0, [pc, #20]	; (80028c0 <MX_SPI1_Init+0x74>)
 80028ac:	f005 fec2 	bl	8008634 <HAL_SPI_Init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80028b6:	f000 fadf 	bl	8002e78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200002a0 	.word	0x200002a0
 80028c4:	40013000 	.word	0x40013000

080028c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b09a      	sub	sp, #104	; 0x68
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	605a      	str	r2, [r3, #4]
 80028d8:	609a      	str	r2, [r3, #8]
 80028da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]
 80028f8:	615a      	str	r2, [r3, #20]
 80028fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028fc:	1d3b      	adds	r3, r7, #4
 80028fe:	222c      	movs	r2, #44	; 0x2c
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f009 fb88 	bl	800c018 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002908:	4b43      	ldr	r3, [pc, #268]	; (8002a18 <MX_TIM1_Init+0x150>)
 800290a:	4a44      	ldr	r2, [pc, #272]	; (8002a1c <MX_TIM1_Init+0x154>)
 800290c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 19;
 800290e:	4b42      	ldr	r3, [pc, #264]	; (8002a18 <MX_TIM1_Init+0x150>)
 8002910:	2213      	movs	r2, #19
 8002912:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002914:	4b40      	ldr	r3, [pc, #256]	; (8002a18 <MX_TIM1_Init+0x150>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 800291a:	4b3f      	ldr	r3, [pc, #252]	; (8002a18 <MX_TIM1_Init+0x150>)
 800291c:	2209      	movs	r2, #9
 800291e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002920:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <MX_TIM1_Init+0x150>)
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002926:	4b3c      	ldr	r3, [pc, #240]	; (8002a18 <MX_TIM1_Init+0x150>)
 8002928:	2200      	movs	r2, #0
 800292a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800292c:	4b3a      	ldr	r3, [pc, #232]	; (8002a18 <MX_TIM1_Init+0x150>)
 800292e:	2200      	movs	r2, #0
 8002930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002932:	4839      	ldr	r0, [pc, #228]	; (8002a18 <MX_TIM1_Init+0x150>)
 8002934:	f006 f9fa 	bl	8008d2c <HAL_TIM_Base_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800293e:	f000 fa9b 	bl	8002e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002946:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002948:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800294c:	4619      	mov	r1, r3
 800294e:	4832      	ldr	r0, [pc, #200]	; (8002a18 <MX_TIM1_Init+0x150>)
 8002950:	f006 fe00 	bl	8009554 <HAL_TIM_ConfigClockSource>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800295a:	f000 fa8d 	bl	8002e78 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800295e:	482e      	ldr	r0, [pc, #184]	; (8002a18 <MX_TIM1_Init+0x150>)
 8002960:	f006 faac 	bl	8008ebc <HAL_TIM_OC_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800296a:	f000 fa85 	bl	8002e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800296e:	2320      	movs	r3, #32
 8002970:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002976:	2300      	movs	r3, #0
 8002978:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800297a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800297e:	4619      	mov	r1, r3
 8002980:	4825      	ldr	r0, [pc, #148]	; (8002a18 <MX_TIM1_Init+0x150>)
 8002982:	f007 fae1 	bl	8009f48 <HAL_TIMEx_MasterConfigSynchronization>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800298c:	f000 fa74 	bl	8002e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002990:	2300      	movs	r3, #0
 8002992:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5;
 8002994:	2305      	movs	r3, #5
 8002996:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002998:	2300      	movs	r3, #0
 800299a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800299c:	2300      	movs	r3, #0
 800299e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029a4:	2300      	movs	r3, #0
 80029a6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029a8:	2300      	movs	r3, #0
 80029aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029b0:	2200      	movs	r2, #0
 80029b2:	4619      	mov	r1, r3
 80029b4:	4818      	ldr	r0, [pc, #96]	; (8002a18 <MX_TIM1_Init+0x150>)
 80029b6:	f006 fc3f 	bl	8009238 <HAL_TIM_OC_ConfigChannel>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80029c0:	f000 fa5a 	bl	8002e78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80029e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029f0:	2300      	movs	r3, #0
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	4619      	mov	r1, r3
 80029f8:	4807      	ldr	r0, [pc, #28]	; (8002a18 <MX_TIM1_Init+0x150>)
 80029fa:	f007 fb2d 	bl	800a058 <HAL_TIMEx_ConfigBreakDeadTime>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002a04:	f000 fa38 	bl	8002e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a08:	4803      	ldr	r0, [pc, #12]	; (8002a18 <MX_TIM1_Init+0x150>)
 8002a0a:	f000 fc7f 	bl	800330c <HAL_TIM_MspPostInit>

}
 8002a0e:	bf00      	nop
 8002a10:	3768      	adds	r7, #104	; 0x68
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000304 	.word	0x20000304
 8002a1c:	40012c00 	.word	0x40012c00

08002a20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08a      	sub	sp, #40	; 0x28
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a26:	f107 031c 	add.w	r3, r7, #28
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a32:	463b      	mov	r3, r7
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
 8002a40:	615a      	str	r2, [r3, #20]
 8002a42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a44:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <MX_TIM4_Init+0xb0>)
 8002a46:	4a23      	ldr	r2, [pc, #140]	; (8002ad4 <MX_TIM4_Init+0xb4>)
 8002a48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8002a4a:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <MX_TIM4_Init+0xb0>)
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a50:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <MX_TIM4_Init+0xb0>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8002a56:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <MX_TIM4_Init+0xb0>)
 8002a58:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <MX_TIM4_Init+0xb0>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a64:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <MX_TIM4_Init+0xb0>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a6a:	4819      	ldr	r0, [pc, #100]	; (8002ad0 <MX_TIM4_Init+0xb0>)
 8002a6c:	f006 fa87 	bl	8008f7e <HAL_TIM_PWM_Init>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002a76:	f000 f9ff 	bl	8002e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a82:	f107 031c 	add.w	r3, r7, #28
 8002a86:	4619      	mov	r1, r3
 8002a88:	4811      	ldr	r0, [pc, #68]	; (8002ad0 <MX_TIM4_Init+0xb0>)
 8002a8a:	f007 fa5d 	bl	8009f48 <HAL_TIMEx_MasterConfigSynchronization>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002a94:	f000 f9f0 	bl	8002e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a98:	2360      	movs	r3, #96	; 0x60
 8002a9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 750;
 8002a9c:	f240 23ee 	movw	r3, #750	; 0x2ee
 8002aa0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002aaa:	463b      	mov	r3, r7
 8002aac:	2204      	movs	r2, #4
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4807      	ldr	r0, [pc, #28]	; (8002ad0 <MX_TIM4_Init+0xb0>)
 8002ab2:	f006 fc3b 	bl	800932c <HAL_TIM_PWM_ConfigChannel>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002abc:	f000 f9dc 	bl	8002e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002ac0:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <MX_TIM4_Init+0xb0>)
 8002ac2:	f000 fc23 	bl	800330c <HAL_TIM_MspPostInit>

}
 8002ac6:	bf00      	nop
 8002ac8:	3728      	adds	r7, #40	; 0x28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000350 	.word	0x20000350
 8002ad4:	40000800 	.word	0x40000800

08002ad8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002ade:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <MX_DMA_Init+0x50>)
 8002ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae2:	4a11      	ldr	r2, [pc, #68]	; (8002b28 <MX_DMA_Init+0x50>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6493      	str	r3, [r2, #72]	; 0x48
 8002aea:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <MX_DMA_Init+0x50>)
 8002aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	607b      	str	r3, [r7, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002af6:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <MX_DMA_Init+0x50>)
 8002af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afa:	4a0b      	ldr	r2, [pc, #44]	; (8002b28 <MX_DMA_Init+0x50>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6493      	str	r3, [r2, #72]	; 0x48
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <MX_DMA_Init+0x50>)
 8002b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2100      	movs	r1, #0
 8002b12:	200b      	movs	r0, #11
 8002b14:	f001 ff57 	bl	80049c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b18:	200b      	movs	r0, #11
 8002b1a:	f001 ff70 	bl	80049fe <HAL_NVIC_EnableIRQ>

}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000

08002b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08e      	sub	sp, #56	; 0x38
 8002b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	609a      	str	r2, [r3, #8]
 8002b3e:	60da      	str	r2, [r3, #12]
 8002b40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b42:	4bb2      	ldr	r3, [pc, #712]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b46:	4ab1      	ldr	r2, [pc, #708]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002b48:	f043 0310 	orr.w	r3, r3, #16
 8002b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b4e:	4baf      	ldr	r3, [pc, #700]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	623b      	str	r3, [r7, #32]
 8002b58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b5a:	4bac      	ldr	r3, [pc, #688]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5e:	4aab      	ldr	r2, [pc, #684]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b66:	4ba9      	ldr	r3, [pc, #676]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	61fb      	str	r3, [r7, #28]
 8002b70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b72:	4ba6      	ldr	r3, [pc, #664]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b76:	4aa5      	ldr	r2, [pc, #660]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002b78:	f043 0320 	orr.w	r3, r3, #32
 8002b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b7e:	4ba3      	ldr	r3, [pc, #652]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b8a:	4ba0      	ldr	r3, [pc, #640]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8e:	4a9f      	ldr	r2, [pc, #636]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b96:	4b9d      	ldr	r3, [pc, #628]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba2:	4b9a      	ldr	r3, [pc, #616]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba6:	4a99      	ldr	r2, [pc, #612]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bae:	4b97      	ldr	r3, [pc, #604]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bba:	4b94      	ldr	r3, [pc, #592]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bbe:	4a93      	ldr	r2, [pc, #588]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bc6:	4b91      	ldr	r3, [pc, #580]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bd2:	4b8e      	ldr	r3, [pc, #568]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd6:	4a8d      	ldr	r2, [pc, #564]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002bd8:	f043 0308 	orr.w	r3, r3, #8
 8002bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bde:	4b8b      	ldr	r3, [pc, #556]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bea:	4b88      	ldr	r3, [pc, #544]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bee:	4a87      	ldr	r2, [pc, #540]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf6:	4b85      	ldr	r3, [pc, #532]	; (8002e0c <MX_GPIO_Init+0x2e0>)
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002c02:	f002 fd65 	bl	80056d0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2107      	movs	r1, #7
 8002c0a:	4881      	ldr	r0, [pc, #516]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002c0c:	f002 fc84 	bl	8005518 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002c10:	2307      	movs	r3, #7
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c14:	2312      	movs	r3, #18
 8002c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c20:	2304      	movs	r3, #4
 8002c22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c28:	4619      	mov	r1, r3
 8002c2a:	487a      	ldr	r0, [pc, #488]	; (8002e14 <MX_GPIO_Init+0x2e8>)
 8002c2c:	f002 fae2 	bl	80051f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c30:	2301      	movs	r3, #1
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c40:	2301      	movs	r3, #1
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c4e:	f002 fad1 	bl	80051f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002c52:	2307      	movs	r3, #7
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c56:	2301      	movs	r3, #1
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c66:	4619      	mov	r1, r3
 8002c68:	4869      	ldr	r0, [pc, #420]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002c6a:	f002 fac3 	bl	80051f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c74:	2302      	movs	r3, #2
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c80:	2301      	movs	r3, #1
 8002c82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4861      	ldr	r0, [pc, #388]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002c8c:	f002 fab2 	bl	80051f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002c90:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c96:	2302      	movs	r3, #2
 8002c98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002ca2:	230d      	movs	r3, #13
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002caa:	4619      	mov	r1, r3
 8002cac:	4858      	ldr	r0, [pc, #352]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002cae:	f002 faa1 	bl	80051f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002cb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002cc4:	230e      	movs	r3, #14
 8002cc6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4850      	ldr	r0, [pc, #320]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002cd0:	f002 fa90 	bl	80051f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ce6:	2307      	movs	r3, #7
 8002ce8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4849      	ldr	r0, [pc, #292]	; (8002e18 <MX_GPIO_Init+0x2ec>)
 8002cf2:	f002 fa7f 	bl	80051f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002cf6:	2340      	movs	r3, #64	; 0x40
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d02:	2300      	movs	r3, #0
 8002d04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002d06:	230d      	movs	r3, #13
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4842      	ldr	r0, [pc, #264]	; (8002e1c <MX_GPIO_Init+0x2f0>)
 8002d12:	f002 fa6f 	bl	80051f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d22:	2300      	movs	r3, #0
 8002d24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d26:	2302      	movs	r3, #2
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d2e:	4619      	mov	r1, r3
 8002d30:	483a      	ldr	r0, [pc, #232]	; (8002e1c <MX_GPIO_Init+0x2f0>)
 8002d32:	f002 fa5f 	bl	80051f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002d36:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d44:	2303      	movs	r3, #3
 8002d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d48:	230c      	movs	r3, #12
 8002d4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d50:	4619      	mov	r1, r3
 8002d52:	4832      	ldr	r0, [pc, #200]	; (8002e1c <MX_GPIO_Init+0x2f0>)
 8002d54:	f002 fa4e 	bl	80051f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8002d58:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d66:	2303      	movs	r3, #3
 8002d68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002d6a:	230a      	movs	r3, #10
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d72:	4619      	mov	r1, r3
 8002d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d78:	f002 fa3c 	bl	80051f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d82:	2300      	movs	r3, #0
 8002d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d94:	f002 fa2e 	bl	80051f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da4:	2303      	movs	r3, #3
 8002da6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002da8:	2309      	movs	r3, #9
 8002daa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db0:	4619      	mov	r1, r3
 8002db2:	4819      	ldr	r0, [pc, #100]	; (8002e18 <MX_GPIO_Init+0x2ec>)
 8002db4:	f002 fa1e 	bl	80051f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002db8:	2304      	movs	r3, #4
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002dc8:	230c      	movs	r3, #12
 8002dca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4811      	ldr	r0, [pc, #68]	; (8002e18 <MX_GPIO_Init+0x2ec>)
 8002dd4:	f002 fa0e 	bl	80051f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002dd8:	2378      	movs	r3, #120	; 0x78
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de4:	2303      	movs	r3, #3
 8002de6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002de8:	2307      	movs	r3, #7
 8002dea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df0:	4619      	mov	r1, r3
 8002df2:	4809      	ldr	r0, [pc, #36]	; (8002e18 <MX_GPIO_Init+0x2ec>)
 8002df4:	f002 f9fe 	bl	80051f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002df8:	2338      	movs	r3, #56	; 0x38
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e04:	2303      	movs	r3, #3
 8002e06:	633b      	str	r3, [r7, #48]	; 0x30
 8002e08:	e00a      	b.n	8002e20 <MX_GPIO_Init+0x2f4>
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	48000400 	.word	0x48000400
 8002e14:	48001400 	.word	0x48001400
 8002e18:	48000c00 	.word	0x48000c00
 8002e1c:	48000800 	.word	0x48000800
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e20:	2306      	movs	r3, #6
 8002e22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4812      	ldr	r0, [pc, #72]	; (8002e74 <MX_GPIO_Init+0x348>)
 8002e2c:	f002 f9e2 	bl	80051f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e30:	2340      	movs	r3, #64	; 0x40
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e34:	2303      	movs	r3, #3
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e40:	4619      	mov	r1, r3
 8002e42:	480c      	ldr	r0, [pc, #48]	; (8002e74 <MX_GPIO_Init+0x348>)
 8002e44:	f002 f9d6 	bl	80051f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e4e:	2312      	movs	r3, #18
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e56:	2303      	movs	r3, #3
 8002e58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e62:	4619      	mov	r1, r3
 8002e64:	4803      	ldr	r0, [pc, #12]	; (8002e74 <MX_GPIO_Init+0x348>)
 8002e66:	f002 f9c5 	bl	80051f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e6a:	bf00      	nop
 8002e6c:	3738      	adds	r7, #56	; 0x38
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	48000400 	.word	0x48000400

08002e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e7c:	b672      	cpsid	i
}
 8002e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e80:	e7fe      	b.n	8002e80 <Error_Handler+0x8>
	...

08002e84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <HAL_MspInit+0x44>)
 8002e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8e:	4a0e      	ldr	r2, [pc, #56]	; (8002ec8 <HAL_MspInit+0x44>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6613      	str	r3, [r2, #96]	; 0x60
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <HAL_MspInit+0x44>)
 8002e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <HAL_MspInit+0x44>)
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea6:	4a08      	ldr	r2, [pc, #32]	; (8002ec8 <HAL_MspInit+0x44>)
 8002ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eac:	6593      	str	r3, [r2, #88]	; 0x58
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_MspInit+0x44>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40021000 	.word	0x40021000

08002ecc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a37      	ldr	r2, [pc, #220]	; (8002fc8 <HAL_ADC_MspInit+0xfc>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d168      	bne.n	8002fc0 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002eee:	4b37      	ldr	r3, [pc, #220]	; (8002fcc <HAL_ADC_MspInit+0x100>)
 8002ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef2:	4a36      	ldr	r2, [pc, #216]	; (8002fcc <HAL_ADC_MspInit+0x100>)
 8002ef4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002efa:	4b34      	ldr	r3, [pc, #208]	; (8002fcc <HAL_ADC_MspInit+0x100>)
 8002efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f06:	4b31      	ldr	r3, [pc, #196]	; (8002fcc <HAL_ADC_MspInit+0x100>)
 8002f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0a:	4a30      	ldr	r2, [pc, #192]	; (8002fcc <HAL_ADC_MspInit+0x100>)
 8002f0c:	f043 0304 	orr.w	r3, r3, #4
 8002f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f12:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <HAL_ADC_MspInit+0x100>)
 8002f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1e:	4b2b      	ldr	r3, [pc, #172]	; (8002fcc <HAL_ADC_MspInit+0x100>)
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f22:	4a2a      	ldr	r2, [pc, #168]	; (8002fcc <HAL_ADC_MspInit+0x100>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f2a:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <HAL_ADC_MspInit+0x100>)
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002f36:	233f      	movs	r3, #63	; 0x3f
 8002f38:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002f3a:	230b      	movs	r3, #11
 8002f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f42:	f107 0314 	add.w	r3, r7, #20
 8002f46:	4619      	mov	r1, r3
 8002f48:	4821      	ldr	r0, [pc, #132]	; (8002fd0 <HAL_ADC_MspInit+0x104>)
 8002f4a:	f002 f953 	bl	80051f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002f4e:	230a      	movs	r3, #10
 8002f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002f52:	230b      	movs	r3, #11
 8002f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5a:	f107 0314 	add.w	r3, r7, #20
 8002f5e:	4619      	mov	r1, r3
 8002f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f64:	f002 f946 	bl	80051f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002f68:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <HAL_ADC_MspInit+0x108>)
 8002f6a:	4a1b      	ldr	r2, [pc, #108]	; (8002fd8 <HAL_ADC_MspInit+0x10c>)
 8002f6c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002f6e:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <HAL_ADC_MspInit+0x108>)
 8002f70:	2205      	movs	r2, #5
 8002f72:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f74:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <HAL_ADC_MspInit+0x108>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f7a:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <HAL_ADC_MspInit+0x108>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <HAL_ADC_MspInit+0x108>)
 8002f82:	2280      	movs	r2, #128	; 0x80
 8002f84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f86:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <HAL_ADC_MspInit+0x108>)
 8002f88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f8e:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_ADC_MspInit+0x108>)
 8002f90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f96:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <HAL_ADC_MspInit+0x108>)
 8002f98:	2220      	movs	r2, #32
 8002f9a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <HAL_ADC_MspInit+0x108>)
 8002f9e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002fa2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002fa4:	480b      	ldr	r0, [pc, #44]	; (8002fd4 <HAL_ADC_MspInit+0x108>)
 8002fa6:	f001 feb3 	bl	8004d10 <HAL_DMA_Init>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 8002fb0:	f7ff ff62 	bl	8002e78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a07      	ldr	r2, [pc, #28]	; (8002fd4 <HAL_ADC_MspInit+0x108>)
 8002fb8:	651a      	str	r2, [r3, #80]	; 0x50
 8002fba:	4a06      	ldr	r2, [pc, #24]	; (8002fd4 <HAL_ADC_MspInit+0x108>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002fc0:	bf00      	nop
 8002fc2:	3728      	adds	r7, #40	; 0x28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	50040000 	.word	0x50040000
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	48000800 	.word	0x48000800
 8002fd4:	20000104 	.word	0x20000104
 8002fd8:	40020008 	.word	0x40020008

08002fdc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08a      	sub	sp, #40	; 0x28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a15      	ldr	r2, [pc, #84]	; (8003050 <HAL_DAC_MspInit+0x74>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d124      	bne.n	8003048 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002ffe:	4b15      	ldr	r3, [pc, #84]	; (8003054 <HAL_DAC_MspInit+0x78>)
 8003000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003002:	4a14      	ldr	r2, [pc, #80]	; (8003054 <HAL_DAC_MspInit+0x78>)
 8003004:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003008:	6593      	str	r3, [r2, #88]	; 0x58
 800300a:	4b12      	ldr	r3, [pc, #72]	; (8003054 <HAL_DAC_MspInit+0x78>)
 800300c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003016:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <HAL_DAC_MspInit+0x78>)
 8003018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301a:	4a0e      	ldr	r2, [pc, #56]	; (8003054 <HAL_DAC_MspInit+0x78>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003022:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <HAL_DAC_MspInit+0x78>)
 8003024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800302e:	2310      	movs	r3, #16
 8003030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003032:	2303      	movs	r3, #3
 8003034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303a:	f107 0314 	add.w	r3, r7, #20
 800303e:	4619      	mov	r1, r3
 8003040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003044:	f002 f8d6 	bl	80051f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003048:	bf00      	nop
 800304a:	3728      	adds	r7, #40	; 0x28
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40007400 	.word	0x40007400
 8003054:	40021000 	.word	0x40021000

08003058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b0ae      	sub	sp, #184	; 0xb8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003060:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	60da      	str	r2, [r3, #12]
 800306e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003070:	f107 0310 	add.w	r3, r7, #16
 8003074:	2294      	movs	r2, #148	; 0x94
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f008 ffcd 	bl	800c018 <memset>
  if(huart->Instance==LPUART1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a22      	ldr	r2, [pc, #136]	; (800310c <HAL_UART_MspInit+0xb4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d13d      	bne.n	8003104 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003088:	2320      	movs	r3, #32
 800308a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800308c:	2300      	movs	r3, #0
 800308e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003090:	f107 0310 	add.w	r3, r7, #16
 8003094:	4618      	mov	r0, r3
 8003096:	f003 fa03 	bl	80064a0 <HAL_RCCEx_PeriphCLKConfig>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80030a0:	f7ff feea 	bl	8002e78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80030a4:	4b1a      	ldr	r3, [pc, #104]	; (8003110 <HAL_UART_MspInit+0xb8>)
 80030a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a8:	4a19      	ldr	r2, [pc, #100]	; (8003110 <HAL_UART_MspInit+0xb8>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	65d3      	str	r3, [r2, #92]	; 0x5c
 80030b0:	4b17      	ldr	r3, [pc, #92]	; (8003110 <HAL_UART_MspInit+0xb8>)
 80030b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030bc:	4b14      	ldr	r3, [pc, #80]	; (8003110 <HAL_UART_MspInit+0xb8>)
 80030be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c0:	4a13      	ldr	r2, [pc, #76]	; (8003110 <HAL_UART_MspInit+0xb8>)
 80030c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_UART_MspInit+0xb8>)
 80030ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80030d4:	f002 fafc 	bl	80056d0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80030d8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80030dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e0:	2302      	movs	r3, #2
 80030e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ec:	2303      	movs	r3, #3
 80030ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80030f2:	2308      	movs	r3, #8
 80030f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80030fc:	4619      	mov	r1, r3
 80030fe:	4805      	ldr	r0, [pc, #20]	; (8003114 <HAL_UART_MspInit+0xbc>)
 8003100:	f002 f878 	bl	80051f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8003104:	bf00      	nop
 8003106:	37b8      	adds	r7, #184	; 0xb8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40008000 	.word	0x40008000
 8003110:	40021000 	.word	0x40021000
 8003114:	48001800 	.word	0x48001800

08003118 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	; 0x28
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a17      	ldr	r2, [pc, #92]	; (8003194 <HAL_SPI_MspInit+0x7c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d128      	bne.n	800318c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800313a:	4b17      	ldr	r3, [pc, #92]	; (8003198 <HAL_SPI_MspInit+0x80>)
 800313c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313e:	4a16      	ldr	r2, [pc, #88]	; (8003198 <HAL_SPI_MspInit+0x80>)
 8003140:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003144:	6613      	str	r3, [r2, #96]	; 0x60
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <HAL_SPI_MspInit+0x80>)
 8003148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003152:	4b11      	ldr	r3, [pc, #68]	; (8003198 <HAL_SPI_MspInit+0x80>)
 8003154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003156:	4a10      	ldr	r2, [pc, #64]	; (8003198 <HAL_SPI_MspInit+0x80>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800315e:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_SPI_MspInit+0x80>)
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800316a:	23e0      	movs	r3, #224	; 0xe0
 800316c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316e:	2302      	movs	r3, #2
 8003170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003176:	2303      	movs	r3, #3
 8003178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800317a:	2305      	movs	r3, #5
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317e:	f107 0314 	add.w	r3, r7, #20
 8003182:	4619      	mov	r1, r3
 8003184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003188:	f002 f834 	bl	80051f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800318c:	bf00      	nop
 800318e:	3728      	adds	r7, #40	; 0x28
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40013000 	.word	0x40013000
 8003198:	40021000 	.word	0x40021000

0800319c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a20      	ldr	r2, [pc, #128]	; (800323c <HAL_TIM_Base_MspInit+0xa0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d139      	bne.n	8003232 <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031be:	4b20      	ldr	r3, [pc, #128]	; (8003240 <HAL_TIM_Base_MspInit+0xa4>)
 80031c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c2:	4a1f      	ldr	r2, [pc, #124]	; (8003240 <HAL_TIM_Base_MspInit+0xa4>)
 80031c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031c8:	6613      	str	r3, [r2, #96]	; 0x60
 80031ca:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <HAL_TIM_Base_MspInit+0xa4>)
 80031cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031d6:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_TIM_Base_MspInit+0xa4>)
 80031d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031da:	4a19      	ldr	r2, [pc, #100]	; (8003240 <HAL_TIM_Base_MspInit+0xa4>)
 80031dc:	f043 0310 	orr.w	r3, r3, #16
 80031e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031e2:	4b17      	ldr	r3, [pc, #92]	; (8003240 <HAL_TIM_Base_MspInit+0xa4>)
 80031e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80031ee:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 80031f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f4:	2302      	movs	r3, #2
 80031f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fc:	2300      	movs	r3, #0
 80031fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003200:	2301      	movs	r3, #1
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003204:	f107 0314 	add.w	r3, r7, #20
 8003208:	4619      	mov	r1, r3
 800320a:	480e      	ldr	r0, [pc, #56]	; (8003244 <HAL_TIM_Base_MspInit+0xa8>)
 800320c:	f001 fff2 	bl	80051f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003210:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003216:	2302      	movs	r3, #2
 8003218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321e:	2300      	movs	r3, #0
 8003220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8003222:	2303      	movs	r3, #3
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003226:	f107 0314 	add.w	r3, r7, #20
 800322a:	4619      	mov	r1, r3
 800322c:	4805      	ldr	r0, [pc, #20]	; (8003244 <HAL_TIM_Base_MspInit+0xa8>)
 800322e:	f001 ffe1 	bl	80051f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003232:	bf00      	nop
 8003234:	3728      	adds	r7, #40	; 0x28
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40012c00 	.word	0x40012c00
 8003240:	40021000 	.word	0x40021000
 8003244:	48001000 	.word	0x48001000

08003248 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08a      	sub	sp, #40	; 0x28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	f107 0314 	add.w	r3, r7, #20
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM4)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a25      	ldr	r2, [pc, #148]	; (80032fc <HAL_TIM_PWM_MspInit+0xb4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d144      	bne.n	80032f4 <HAL_TIM_PWM_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800326a:	4b25      	ldr	r3, [pc, #148]	; (8003300 <HAL_TIM_PWM_MspInit+0xb8>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	4a24      	ldr	r2, [pc, #144]	; (8003300 <HAL_TIM_PWM_MspInit+0xb8>)
 8003270:	f043 0304 	orr.w	r3, r3, #4
 8003274:	6593      	str	r3, [r2, #88]	; 0x58
 8003276:	4b22      	ldr	r3, [pc, #136]	; (8003300 <HAL_TIM_PWM_MspInit+0xb8>)
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003282:	4b1f      	ldr	r3, [pc, #124]	; (8003300 <HAL_TIM_PWM_MspInit+0xb8>)
 8003284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003286:	4a1e      	ldr	r2, [pc, #120]	; (8003300 <HAL_TIM_PWM_MspInit+0xb8>)
 8003288:	f043 0308 	orr.w	r3, r3, #8
 800328c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800328e:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <HAL_TIM_PWM_MspInit+0xb8>)
 8003290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800329a:	4b19      	ldr	r3, [pc, #100]	; (8003300 <HAL_TIM_PWM_MspInit+0xb8>)
 800329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329e:	4a18      	ldr	r2, [pc, #96]	; (8003300 <HAL_TIM_PWM_MspInit+0xb8>)
 80032a0:	f043 0310 	orr.w	r3, r3, #16
 80032a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032a6:	4b16      	ldr	r3, [pc, #88]	; (8003300 <HAL_TIM_PWM_MspInit+0xb8>)
 80032a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80032b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80032b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b8:	2302      	movs	r3, #2
 80032ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c0:	2300      	movs	r3, #0
 80032c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80032c4:	2302      	movs	r3, #2
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	4619      	mov	r1, r3
 80032ce:	480d      	ldr	r0, [pc, #52]	; (8003304 <HAL_TIM_PWM_MspInit+0xbc>)
 80032d0:	f001 ff90 	bl	80051f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80032d4:	2301      	movs	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d8:	2302      	movs	r3, #2
 80032da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e0:	2300      	movs	r3, #0
 80032e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80032e4:	2302      	movs	r3, #2
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032e8:	f107 0314 	add.w	r3, r7, #20
 80032ec:	4619      	mov	r1, r3
 80032ee:	4806      	ldr	r0, [pc, #24]	; (8003308 <HAL_TIM_PWM_MspInit+0xc0>)
 80032f0:	f001 ff80 	bl	80051f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80032f4:	bf00      	nop
 80032f6:	3728      	adds	r7, #40	; 0x28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40000800 	.word	0x40000800
 8003300:	40021000 	.word	0x40021000
 8003304:	48000c00 	.word	0x48000c00
 8003308:	48001000 	.word	0x48001000

0800330c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	f107 0314 	add.w	r3, r7, #20
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a23      	ldr	r2, [pc, #140]	; (80033b8 <HAL_TIM_MspPostInit+0xac>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d11d      	bne.n	800336a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800332e:	4b23      	ldr	r3, [pc, #140]	; (80033bc <HAL_TIM_MspPostInit+0xb0>)
 8003330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003332:	4a22      	ldr	r2, [pc, #136]	; (80033bc <HAL_TIM_MspPostInit+0xb0>)
 8003334:	f043 0310 	orr.w	r3, r3, #16
 8003338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800333a:	4b20      	ldr	r3, [pc, #128]	; (80033bc <HAL_TIM_MspPostInit+0xb0>)
 800333c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE10     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 8003346:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 800334a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334c:	2302      	movs	r3, #2
 800334e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003354:	2300      	movs	r3, #0
 8003356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003358:	2301      	movs	r3, #1
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800335c:	f107 0314 	add.w	r3, r7, #20
 8003360:	4619      	mov	r1, r3
 8003362:	4817      	ldr	r0, [pc, #92]	; (80033c0 <HAL_TIM_MspPostInit+0xb4>)
 8003364:	f001 ff46 	bl	80051f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003368:	e021      	b.n	80033ae <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a15      	ldr	r2, [pc, #84]	; (80033c4 <HAL_TIM_MspPostInit+0xb8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d11c      	bne.n	80033ae <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003374:	4b11      	ldr	r3, [pc, #68]	; (80033bc <HAL_TIM_MspPostInit+0xb0>)
 8003376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003378:	4a10      	ldr	r2, [pc, #64]	; (80033bc <HAL_TIM_MspPostInit+0xb0>)
 800337a:	f043 0308 	orr.w	r3, r3, #8
 800337e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003380:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <HAL_TIM_MspPostInit+0xb0>)
 8003382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800338c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339a:	2300      	movs	r3, #0
 800339c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800339e:	2302      	movs	r3, #2
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033a2:	f107 0314 	add.w	r3, r7, #20
 80033a6:	4619      	mov	r1, r3
 80033a8:	4807      	ldr	r0, [pc, #28]	; (80033c8 <HAL_TIM_MspPostInit+0xbc>)
 80033aa:	f001 ff23 	bl	80051f4 <HAL_GPIO_Init>
}
 80033ae:	bf00      	nop
 80033b0:	3728      	adds	r7, #40	; 0x28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40012c00 	.word	0x40012c00
 80033bc:	40021000 	.word	0x40021000
 80033c0:	48001000 	.word	0x48001000
 80033c4:	40000800 	.word	0x40000800
 80033c8:	48000c00 	.word	0x48000c00

080033cc <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <HAL_SAI_MspInit+0x84>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d134      	bne.n	8003448 <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80033de:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <HAL_SAI_MspInit+0x88>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10b      	bne.n	80033fe <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80033e6:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <HAL_SAI_MspInit+0x8c>)
 80033e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ea:	4a1b      	ldr	r2, [pc, #108]	; (8003458 <HAL_SAI_MspInit+0x8c>)
 80033ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033f0:	6613      	str	r3, [r2, #96]	; 0x60
 80033f2:	4b19      	ldr	r3, [pc, #100]	; (8003458 <HAL_SAI_MspInit+0x8c>)
 80033f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <HAL_SAI_MspInit+0x88>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3301      	adds	r3, #1
 8003404:	4a13      	ldr	r2, [pc, #76]	; (8003454 <HAL_SAI_MspInit+0x88>)
 8003406:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PF7     ------> SAI1_MCLK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8003408:	237c      	movs	r3, #124	; 0x7c
 800340a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340c:	2302      	movs	r3, #2
 800340e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003414:	2300      	movs	r3, #0
 8003416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003418:	230d      	movs	r3, #13
 800341a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800341c:	f107 030c 	add.w	r3, r7, #12
 8003420:	4619      	mov	r1, r3
 8003422:	480e      	ldr	r0, [pc, #56]	; (800345c <HAL_SAI_MspInit+0x90>)
 8003424:	f001 fee6 	bl	80051f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342c:	2302      	movs	r3, #2
 800342e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003434:	2300      	movs	r3, #0
 8003436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003438:	230d      	movs	r3, #13
 800343a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800343c:	f107 030c 	add.w	r3, r7, #12
 8003440:	4619      	mov	r1, r3
 8003442:	4807      	ldr	r0, [pc, #28]	; (8003460 <HAL_SAI_MspInit+0x94>)
 8003444:	f001 fed6 	bl	80051f4 <HAL_GPIO_Init>

    }
}
 8003448:	bf00      	nop
 800344a:	3720      	adds	r7, #32
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40015404 	.word	0x40015404
 8003454:	200003a0 	.word	0x200003a0
 8003458:	40021000 	.word	0x40021000
 800345c:	48001000 	.word	0x48001000
 8003460:	48001400 	.word	0x48001400

08003464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003468:	e7fe      	b.n	8003468 <NMI_Handler+0x4>

0800346a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800346a:	b480      	push	{r7}
 800346c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800346e:	e7fe      	b.n	800346e <HardFault_Handler+0x4>

08003470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003474:	e7fe      	b.n	8003474 <MemManage_Handler+0x4>

08003476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003476:	b480      	push	{r7}
 8003478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800347a:	e7fe      	b.n	800347a <BusFault_Handler+0x4>

0800347c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003480:	e7fe      	b.n	8003480 <UsageFault_Handler+0x4>

08003482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003482:	b480      	push	{r7}
 8003484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800349e:	b480      	push	{r7}
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034b0:	f000 f89c 	bl	80035ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034b4:	bf00      	nop
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034bc:	4802      	ldr	r0, [pc, #8]	; (80034c8 <DMA1_Channel1_IRQHandler+0x10>)
 80034be:	f001 fd4a 	bl	8004f56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000104 	.word	0x20000104

080034cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <SystemInit+0x20>)
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d6:	4a05      	ldr	r2, [pc, #20]	; (80034ec <SystemInit+0x20>)
 80034d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80034f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003528 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034f4:	f7ff ffea 	bl	80034cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034f8:	480c      	ldr	r0, [pc, #48]	; (800352c <LoopForever+0x6>)
  ldr r1, =_edata
 80034fa:	490d      	ldr	r1, [pc, #52]	; (8003530 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034fc:	4a0d      	ldr	r2, [pc, #52]	; (8003534 <LoopForever+0xe>)
  movs r3, #0
 80034fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003500:	e002      	b.n	8003508 <LoopCopyDataInit>

08003502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003506:	3304      	adds	r3, #4

08003508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800350a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800350c:	d3f9      	bcc.n	8003502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800350e:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003510:	4c0a      	ldr	r4, [pc, #40]	; (800353c <LoopForever+0x16>)
  movs r3, #0
 8003512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003514:	e001      	b.n	800351a <LoopFillZerobss>

08003516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003518:	3204      	adds	r2, #4

0800351a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800351a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800351c:	d3fb      	bcc.n	8003516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800351e:	f008 fd89 	bl	800c034 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003522:	f7fe fa71 	bl	8001a08 <main>

08003526 <LoopForever>:

LoopForever:
    b LoopForever
 8003526:	e7fe      	b.n	8003526 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003528:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800352c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003530:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003534:	080240e0 	.word	0x080240e0
  ldr r2, =_sbss
 8003538:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800353c:	200004e0 	.word	0x200004e0

08003540 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003540:	e7fe      	b.n	8003540 <ADC1_IRQHandler>

08003542 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800354c:	2003      	movs	r0, #3
 800354e:	f001 fa2f 	bl	80049b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003552:	2000      	movs	r0, #0
 8003554:	f000 f80e 	bl	8003574 <HAL_InitTick>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	71fb      	strb	r3, [r7, #7]
 8003562:	e001      	b.n	8003568 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003564:	f7ff fc8e 	bl	8002e84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003568:	79fb      	ldrb	r3, [r7, #7]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003580:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <HAL_InitTick+0x6c>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d023      	beq.n	80035d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003588:	4b16      	ldr	r3, [pc, #88]	; (80035e4 <HAL_InitTick+0x70>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b14      	ldr	r3, [pc, #80]	; (80035e0 <HAL_InitTick+0x6c>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	4619      	mov	r1, r3
 8003592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003596:	fbb3 f3f1 	udiv	r3, r3, r1
 800359a:	fbb2 f3f3 	udiv	r3, r2, r3
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 fa3b 	bl	8004a1a <HAL_SYSTICK_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10f      	bne.n	80035ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b0f      	cmp	r3, #15
 80035ae:	d809      	bhi.n	80035c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035b0:	2200      	movs	r2, #0
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	f04f 30ff 	mov.w	r0, #4294967295
 80035b8:	f001 fa05 	bl	80049c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035bc:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <HAL_InitTick+0x74>)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e007      	b.n	80035d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
 80035c8:	e004      	b.n	80035d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
 80035ce:	e001      	b.n	80035d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000018 	.word	0x20000018
 80035e4:	20000010 	.word	0x20000010
 80035e8:	20000014 	.word	0x20000014

080035ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_IncTick+0x20>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	4b06      	ldr	r3, [pc, #24]	; (8003610 <HAL_IncTick+0x24>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4413      	add	r3, r2
 80035fc:	4a04      	ldr	r2, [pc, #16]	; (8003610 <HAL_IncTick+0x24>)
 80035fe:	6013      	str	r3, [r2, #0]
}
 8003600:	bf00      	nop
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	20000018 	.word	0x20000018
 8003610:	200003a4 	.word	0x200003a4

08003614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return uwTick;
 8003618:	4b03      	ldr	r3, [pc, #12]	; (8003628 <HAL_GetTick+0x14>)
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	200003a4 	.word	0x200003a4

0800362c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003634:	f7ff ffee 	bl	8003614 <HAL_GetTick>
 8003638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d005      	beq.n	8003652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003646:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <HAL_Delay+0x44>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4413      	add	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003652:	bf00      	nop
 8003654:	f7ff ffde 	bl	8003614 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	429a      	cmp	r2, r3
 8003662:	d8f7      	bhi.n	8003654 <HAL_Delay+0x28>
  {
  }
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000018 	.word	0x20000018

08003674 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	609a      	str	r2, [r3, #8]
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	609a      	str	r2, [r3, #8]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	3360      	adds	r3, #96	; 0x60
 80036ee:	461a      	mov	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b08      	ldr	r3, [pc, #32]	; (8003720 <LL_ADC_SetOffset+0x44>)
 80036fe:	4013      	ands	r3, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	4313      	orrs	r3, r2
 800370c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003714:	bf00      	nop
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	03fff000 	.word	0x03fff000

08003724 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3360      	adds	r3, #96	; 0x60
 8003732:	461a      	mov	r2, r3
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3360      	adds	r3, #96	; 0x60
 8003760:	461a      	mov	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	431a      	orrs	r2, r3
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	615a      	str	r2, [r3, #20]
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b087      	sub	sp, #28
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	3330      	adds	r3, #48	; 0x30
 80037e2:	461a      	mov	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	0a1b      	lsrs	r3, r3, #8
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	4413      	add	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	211f      	movs	r1, #31
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	401a      	ands	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	0e9b      	lsrs	r3, r3, #26
 800380a:	f003 011f 	and.w	r1, r3, #31
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	431a      	orrs	r2, r3
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800382a:	b480      	push	{r7}
 800382c:	b087      	sub	sp, #28
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	3314      	adds	r3, #20
 800383a:	461a      	mov	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	0e5b      	lsrs	r3, r3, #25
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	4413      	add	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	0d1b      	lsrs	r3, r3, #20
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	2107      	movs	r1, #7
 8003858:	fa01 f303 	lsl.w	r3, r1, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	401a      	ands	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	0d1b      	lsrs	r3, r3, #20
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	fa01 f303 	lsl.w	r3, r1, r3
 800386e:	431a      	orrs	r2, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003874:	bf00      	nop
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003898:	43db      	mvns	r3, r3
 800389a:	401a      	ands	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f003 0318 	and.w	r3, r3, #24
 80038a2:	4908      	ldr	r1, [pc, #32]	; (80038c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80038a4:	40d9      	lsrs	r1, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	400b      	ands	r3, r1
 80038aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ae:	431a      	orrs	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80038b6:	bf00      	nop
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	0007ffff 	.word	0x0007ffff

080038c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80038d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6093      	str	r3, [r2, #8]
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003900:	d101      	bne.n	8003906 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003924:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003928:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003950:	d101      	bne.n	8003956 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003974:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003978:	f043 0201 	orr.w	r2, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <LL_ADC_IsEnabled+0x18>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <LL_ADC_IsEnabled+0x1a>
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039c6:	f043 0204 	orr.w	r2, r3, #4
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d101      	bne.n	80039f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d101      	bne.n	8003a18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e129      	b.n	8003c96 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d109      	bne.n	8003a64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff fa3b 	bl	8002ecc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff ff3f 	bl	80038ec <LL_ADC_IsDeepPowerDownEnabled>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d004      	beq.n	8003a7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff25 	bl	80038c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff ff5a 	bl	800393c <LL_ADC_IsInternalRegulatorEnabled>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d115      	bne.n	8003aba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff ff3e 	bl	8003914 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a98:	4b81      	ldr	r3, [pc, #516]	; (8003ca0 <HAL_ADC_Init+0x278>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	099b      	lsrs	r3, r3, #6
 8003a9e:	4a81      	ldr	r2, [pc, #516]	; (8003ca4 <HAL_ADC_Init+0x27c>)
 8003aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa4:	099b      	lsrs	r3, r3, #6
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003aac:	e002      	b.n	8003ab4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f9      	bne.n	8003aae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff ff3c 	bl	800393c <LL_ADC_IsInternalRegulatorEnabled>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10d      	bne.n	8003ae6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ace:	f043 0210 	orr.w	r2, r3, #16
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ada:	f043 0201 	orr.w	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff ff75 	bl	80039da <LL_ADC_REG_IsConversionOngoing>
 8003af0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f040 80c2 	bne.w	8003c84 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f040 80be 	bne.w	8003c84 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b10:	f043 0202 	orr.w	r2, r3, #2
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff ff35 	bl	800398c <LL_ADC_IsEnabled>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10b      	bne.n	8003b40 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b28:	485f      	ldr	r0, [pc, #380]	; (8003ca8 <HAL_ADC_Init+0x280>)
 8003b2a:	f7ff ff2f 	bl	800398c <LL_ADC_IsEnabled>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d105      	bne.n	8003b40 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	485c      	ldr	r0, [pc, #368]	; (8003cac <HAL_ADC_Init+0x284>)
 8003b3c:	f7ff fd9a 	bl	8003674 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	7e5b      	ldrb	r3, [r3, #25]
 8003b44:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b4a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003b50:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003b56:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b5e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d106      	bne.n	8003b7c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	3b01      	subs	r3, #1
 8003b74:	045b      	lsls	r3, r3, #17
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d009      	beq.n	8003b98 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	4b44      	ldr	r3, [pc, #272]	; (8003cb0 <HAL_ADC_Init+0x288>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6812      	ldr	r2, [r2, #0]
 8003ba6:	69b9      	ldr	r1, [r7, #24]
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff ff25 	bl	8003a00 <LL_ADC_INJ_IsConversionOngoing>
 8003bb6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d140      	bne.n	8003c40 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d13d      	bne.n	8003c40 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	7e1b      	ldrb	r3, [r3, #24]
 8003bcc:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bce:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bd6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003be6:	f023 0306 	bic.w	r3, r3, #6
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	69b9      	ldr	r1, [r7, #24]
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d118      	bne.n	8003c30 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c08:	f023 0304 	bic.w	r3, r3, #4
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c14:	4311      	orrs	r1, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c1a:	4311      	orrs	r1, r2
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c20:	430a      	orrs	r2, r1
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0201 	orr.w	r2, r2, #1
 8003c2c:	611a      	str	r2, [r3, #16]
 8003c2e:	e007      	b.n	8003c40 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d10c      	bne.n	8003c62 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	f023 010f 	bic.w	r1, r3, #15
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	1e5a      	subs	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c60:	e007      	b.n	8003c72 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 020f 	bic.w	r2, r2, #15
 8003c70:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	f043 0201 	orr.w	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	659a      	str	r2, [r3, #88]	; 0x58
 8003c82:	e007      	b.n	8003c94 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c88:	f043 0210 	orr.w	r2, r3, #16
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c94:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3720      	adds	r7, #32
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000010 	.word	0x20000010
 8003ca4:	053e2d63 	.word	0x053e2d63
 8003ca8:	50040000 	.word	0x50040000
 8003cac:	50040300 	.word	0x50040300
 8003cb0:	fff0c007 	.word	0xfff0c007

08003cb4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fe88 	bl	80039da <LL_ADC_REG_IsConversionOngoing>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d167      	bne.n	8003da0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_ADC_Start_DMA+0x2a>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e063      	b.n	8003da6 <HAL_ADC_Start_DMA+0xf2>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fc78 	bl	80045dc <ADC_Enable>
 8003cec:	4603      	mov	r3, r0
 8003cee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d14f      	bne.n	8003d96 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d006      	beq.n	8003d24 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1a:	f023 0206 	bic.w	r2, r3, #6
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d22:	e002      	b.n	8003d2a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d2e:	4a20      	ldr	r2, [pc, #128]	; (8003db0 <HAL_ADC_Start_DMA+0xfc>)
 8003d30:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d36:	4a1f      	ldr	r2, [pc, #124]	; (8003db4 <HAL_ADC_Start_DMA+0x100>)
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3e:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <HAL_ADC_Start_DMA+0x104>)
 8003d40:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	221c      	movs	r2, #28
 8003d48:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0210 	orr.w	r2, r2, #16
 8003d60:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0201 	orr.w	r2, r2, #1
 8003d70:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3340      	adds	r3, #64	; 0x40
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f001 f86d 	bl	8004e60 <HAL_DMA_Start_IT>
 8003d86:	4603      	mov	r3, r0
 8003d88:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fe0f 	bl	80039b2 <LL_ADC_REG_StartConversion>
 8003d94:	e006      	b.n	8003da4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003d9e:	e001      	b.n	8003da4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003da0:	2302      	movs	r3, #2
 8003da2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	080046e9 	.word	0x080046e9
 8003db4:	080047c1 	.word	0x080047c1
 8003db8:	080047dd 	.word	0x080047dd

08003dbc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b0b6      	sub	sp, #216	; 0xd8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x22>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e3d5      	b.n	80045b2 <HAL_ADC_ConfigChannel+0x7ce>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fde1 	bl	80039da <LL_ADC_REG_IsConversionOngoing>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f040 83ba 	bne.w	8004594 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b05      	cmp	r3, #5
 8003e2e:	d824      	bhi.n	8003e7a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	3b02      	subs	r3, #2
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d81b      	bhi.n	8003e72 <HAL_ADC_ConfigChannel+0x8e>
 8003e3a:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <HAL_ADC_ConfigChannel+0x5c>)
 8003e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e40:	08003e51 	.word	0x08003e51
 8003e44:	08003e59 	.word	0x08003e59
 8003e48:	08003e61 	.word	0x08003e61
 8003e4c:	08003e69 	.word	0x08003e69
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003e50:	230c      	movs	r3, #12
 8003e52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003e56:	e010      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003e58:	2312      	movs	r3, #18
 8003e5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003e5e:	e00c      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003e60:	2318      	movs	r3, #24
 8003e62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003e66:	e008      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003e68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003e70:	e003      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003e72:	2306      	movs	r3, #6
 8003e74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003e78:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003e88:	f7ff fca3 	bl	80037d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff fda2 	bl	80039da <LL_ADC_REG_IsConversionOngoing>
 8003e96:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fdae 	bl	8003a00 <LL_ADC_INJ_IsConversionOngoing>
 8003ea4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ea8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f040 81bf 	bne.w	8004230 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003eb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f040 81ba 	bne.w	8004230 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ec4:	d10f      	bne.n	8003ee6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f7ff fcaa 	bl	800382a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff fc51 	bl	8003786 <LL_ADC_SetSamplingTimeCommonConfig>
 8003ee4:	e00e      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6819      	ldr	r1, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f7ff fc99 	bl	800382a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2100      	movs	r1, #0
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff fc41 	bl	8003786 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	08db      	lsrs	r3, r3, #3
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d00a      	beq.n	8003f3c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6919      	ldr	r1, [r3, #16]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f36:	f7ff fbd1 	bl	80036dc <LL_ADC_SetOffset>
 8003f3a:	e179      	b.n	8004230 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2100      	movs	r1, #0
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff fbee 	bl	8003724 <LL_ADC_GetOffsetChannel>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10a      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x184>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fbe3 	bl	8003724 <LL_ADC_GetOffsetChannel>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	0e9b      	lsrs	r3, r3, #26
 8003f62:	f003 021f 	and.w	r2, r3, #31
 8003f66:	e01e      	b.n	8003fa6 <HAL_ADC_ConfigChannel+0x1c2>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff fbd8 	bl	8003724 <LL_ADC_GetOffsetChannel>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f7e:	fa93 f3a3 	rbit	r3, r3
 8003f82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003f96:	2320      	movs	r3, #32
 8003f98:	e004      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003f9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d105      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x1da>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	0e9b      	lsrs	r3, r3, #26
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	e018      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x20c>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003fd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003fda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003fe2:	2320      	movs	r3, #32
 8003fe4:	e004      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003fe6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d106      	bne.n	8004002 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fba7 	bl	8003750 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2101      	movs	r1, #1
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff fb8b 	bl	8003724 <LL_ADC_GetOffsetChannel>
 800400e:	4603      	mov	r3, r0
 8004010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <HAL_ADC_ConfigChannel+0x24a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2101      	movs	r1, #1
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fb80 	bl	8003724 <LL_ADC_GetOffsetChannel>
 8004024:	4603      	mov	r3, r0
 8004026:	0e9b      	lsrs	r3, r3, #26
 8004028:	f003 021f 	and.w	r2, r3, #31
 800402c:	e01e      	b.n	800406c <HAL_ADC_ConfigChannel+0x288>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2101      	movs	r1, #1
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff fb75 	bl	8003724 <LL_ADC_GetOffsetChannel>
 800403a:	4603      	mov	r3, r0
 800403c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004040:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800404c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004054:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800405c:	2320      	movs	r3, #32
 800405e:	e004      	b.n	800406a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004060:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004064:	fab3 f383 	clz	r3, r3
 8004068:	b2db      	uxtb	r3, r3
 800406a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004074:	2b00      	cmp	r3, #0
 8004076:	d105      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x2a0>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	0e9b      	lsrs	r3, r3, #26
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	e018      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x2d2>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004090:	fa93 f3a3 	rbit	r3, r3
 8004094:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004098:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800409c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80040a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80040a8:	2320      	movs	r3, #32
 80040aa:	e004      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80040ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040b0:	fab3 f383 	clz	r3, r3
 80040b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d106      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2200      	movs	r2, #0
 80040c0:	2101      	movs	r1, #1
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff fb44 	bl	8003750 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2102      	movs	r1, #2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fb28 	bl	8003724 <LL_ADC_GetOffsetChannel>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x310>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2102      	movs	r1, #2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fb1d 	bl	8003724 <LL_ADC_GetOffsetChannel>
 80040ea:	4603      	mov	r3, r0
 80040ec:	0e9b      	lsrs	r3, r3, #26
 80040ee:	f003 021f 	and.w	r2, r3, #31
 80040f2:	e01e      	b.n	8004132 <HAL_ADC_ConfigChannel+0x34e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2102      	movs	r1, #2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff fb12 	bl	8003724 <LL_ADC_GetOffsetChannel>
 8004100:	4603      	mov	r3, r0
 8004102:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004106:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800410a:	fa93 f3a3 	rbit	r3, r3
 800410e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004112:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004116:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800411a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8004122:	2320      	movs	r3, #32
 8004124:	e004      	b.n	8004130 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8004126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800412a:	fab3 f383 	clz	r3, r3
 800412e:	b2db      	uxtb	r3, r3
 8004130:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800413a:	2b00      	cmp	r3, #0
 800413c:	d105      	bne.n	800414a <HAL_ADC_ConfigChannel+0x366>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	0e9b      	lsrs	r3, r3, #26
 8004144:	f003 031f 	and.w	r3, r3, #31
 8004148:	e014      	b.n	8004174 <HAL_ADC_ConfigChannel+0x390>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004150:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004152:	fa93 f3a3 	rbit	r3, r3
 8004156:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800415a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800415e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8004166:	2320      	movs	r3, #32
 8004168:	e004      	b.n	8004174 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800416a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800416e:	fab3 f383 	clz	r3, r3
 8004172:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004174:	429a      	cmp	r2, r3
 8004176:	d106      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2200      	movs	r2, #0
 800417e:	2102      	movs	r1, #2
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff fae5 	bl	8003750 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2103      	movs	r1, #3
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fac9 	bl	8003724 <LL_ADC_GetOffsetChannel>
 8004192:	4603      	mov	r3, r0
 8004194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10a      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x3ce>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2103      	movs	r1, #3
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fabe 	bl	8003724 <LL_ADC_GetOffsetChannel>
 80041a8:	4603      	mov	r3, r0
 80041aa:	0e9b      	lsrs	r3, r3, #26
 80041ac:	f003 021f 	and.w	r2, r3, #31
 80041b0:	e017      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x3fe>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2103      	movs	r1, #3
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fab3 	bl	8003724 <LL_ADC_GetOffsetChannel>
 80041be:	4603      	mov	r3, r0
 80041c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041c4:	fa93 f3a3 	rbit	r3, r3
 80041c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041cc:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80041ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80041d4:	2320      	movs	r3, #32
 80041d6:	e003      	b.n	80041e0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80041d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041da:	fab3 f383 	clz	r3, r3
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d105      	bne.n	80041fa <HAL_ADC_ConfigChannel+0x416>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	0e9b      	lsrs	r3, r3, #26
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	e011      	b.n	800421e <HAL_ADC_ConfigChannel+0x43a>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004202:	fa93 f3a3 	rbit	r3, r3
 8004206:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004208:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800420a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800420c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8004212:	2320      	movs	r3, #32
 8004214:	e003      	b.n	800421e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8004216:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004218:	fab3 f383 	clz	r3, r3
 800421c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800421e:	429a      	cmp	r2, r3
 8004220:	d106      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2200      	movs	r2, #0
 8004228:	2103      	movs	r1, #3
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff fa90 	bl	8003750 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fba9 	bl	800398c <LL_ADC_IsEnabled>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	f040 813f 	bne.w	80044c0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6818      	ldr	r0, [r3, #0]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6819      	ldr	r1, [r3, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	461a      	mov	r2, r3
 8004250:	f7ff fb16 	bl	8003880 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4a8e      	ldr	r2, [pc, #568]	; (8004494 <HAL_ADC_ConfigChannel+0x6b0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	f040 8130 	bne.w	80044c0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10b      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x4a4>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	0e9b      	lsrs	r3, r3, #26
 8004276:	3301      	adds	r3, #1
 8004278:	f003 031f 	and.w	r3, r3, #31
 800427c:	2b09      	cmp	r3, #9
 800427e:	bf94      	ite	ls
 8004280:	2301      	movls	r3, #1
 8004282:	2300      	movhi	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	e019      	b.n	80042bc <HAL_ADC_ConfigChannel+0x4d8>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004290:	fa93 f3a3 	rbit	r3, r3
 8004294:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004298:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800429a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80042a0:	2320      	movs	r3, #32
 80042a2:	e003      	b.n	80042ac <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80042a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a6:	fab3 f383 	clz	r3, r3
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	3301      	adds	r3, #1
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	2b09      	cmp	r3, #9
 80042b4:	bf94      	ite	ls
 80042b6:	2301      	movls	r3, #1
 80042b8:	2300      	movhi	r3, #0
 80042ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d079      	beq.n	80043b4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d107      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x4f8>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0e9b      	lsrs	r3, r3, #26
 80042d2:	3301      	adds	r3, #1
 80042d4:	069b      	lsls	r3, r3, #26
 80042d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042da:	e015      	b.n	8004308 <HAL_ADC_ConfigChannel+0x524>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e4:	fa93 f3a3 	rbit	r3, r3
 80042e8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80042ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ec:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80042ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80042f4:	2320      	movs	r3, #32
 80042f6:	e003      	b.n	8004300 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80042f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042fa:	fab3 f383 	clz	r3, r3
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	3301      	adds	r3, #1
 8004302:	069b      	lsls	r3, r3, #26
 8004304:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004310:	2b00      	cmp	r3, #0
 8004312:	d109      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x544>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	0e9b      	lsrs	r3, r3, #26
 800431a:	3301      	adds	r3, #1
 800431c:	f003 031f 	and.w	r3, r3, #31
 8004320:	2101      	movs	r1, #1
 8004322:	fa01 f303 	lsl.w	r3, r1, r3
 8004326:	e017      	b.n	8004358 <HAL_ADC_ConfigChannel+0x574>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004330:	fa93 f3a3 	rbit	r3, r3
 8004334:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004338:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800433a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004340:	2320      	movs	r3, #32
 8004342:	e003      	b.n	800434c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004346:	fab3 f383 	clz	r3, r3
 800434a:	b2db      	uxtb	r3, r3
 800434c:	3301      	adds	r3, #1
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	2101      	movs	r1, #1
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	ea42 0103 	orr.w	r1, r2, r3
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <HAL_ADC_ConfigChannel+0x59a>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	0e9b      	lsrs	r3, r3, #26
 800436e:	3301      	adds	r3, #1
 8004370:	f003 021f 	and.w	r2, r3, #31
 8004374:	4613      	mov	r3, r2
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4413      	add	r3, r2
 800437a:	051b      	lsls	r3, r3, #20
 800437c:	e018      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x5cc>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004386:	fa93 f3a3 	rbit	r3, r3
 800438a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004396:	2320      	movs	r3, #32
 8004398:	e003      	b.n	80043a2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	fab3 f383 	clz	r3, r3
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	3301      	adds	r3, #1
 80043a4:	f003 021f 	and.w	r2, r3, #31
 80043a8:	4613      	mov	r3, r2
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	4413      	add	r3, r2
 80043ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043b0:	430b      	orrs	r3, r1
 80043b2:	e080      	b.n	80044b6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d107      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x5ec>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	0e9b      	lsrs	r3, r3, #26
 80043c6:	3301      	adds	r3, #1
 80043c8:	069b      	lsls	r3, r3, #26
 80043ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043ce:	e015      	b.n	80043fc <HAL_ADC_ConfigChannel+0x618>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	fa93 f3a3 	rbit	r3, r3
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80043e8:	2320      	movs	r3, #32
 80043ea:	e003      	b.n	80043f4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80043ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ee:	fab3 f383 	clz	r3, r3
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	3301      	adds	r3, #1
 80043f6:	069b      	lsls	r3, r3, #26
 80043f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004404:	2b00      	cmp	r3, #0
 8004406:	d109      	bne.n	800441c <HAL_ADC_ConfigChannel+0x638>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	0e9b      	lsrs	r3, r3, #26
 800440e:	3301      	adds	r3, #1
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	2101      	movs	r1, #1
 8004416:	fa01 f303 	lsl.w	r3, r1, r3
 800441a:	e017      	b.n	800444c <HAL_ADC_ConfigChannel+0x668>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	fa93 f3a3 	rbit	r3, r3
 8004428:	61bb      	str	r3, [r7, #24]
  return result;
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004434:	2320      	movs	r3, #32
 8004436:	e003      	b.n	8004440 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	fab3 f383 	clz	r3, r3
 800443e:	b2db      	uxtb	r3, r3
 8004440:	3301      	adds	r3, #1
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	2101      	movs	r1, #1
 8004448:	fa01 f303 	lsl.w	r3, r1, r3
 800444c:	ea42 0103 	orr.w	r1, r2, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10d      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x694>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	0e9b      	lsrs	r3, r3, #26
 8004462:	3301      	adds	r3, #1
 8004464:	f003 021f 	and.w	r2, r3, #31
 8004468:	4613      	mov	r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	4413      	add	r3, r2
 800446e:	3b1e      	subs	r3, #30
 8004470:	051b      	lsls	r3, r3, #20
 8004472:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004476:	e01d      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x6d0>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	fa93 f3a3 	rbit	r3, r3
 8004484:	60fb      	str	r3, [r7, #12]
  return result;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d103      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004490:	2320      	movs	r3, #32
 8004492:	e005      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x6bc>
 8004494:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	fab3 f383 	clz	r3, r3
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	3301      	adds	r3, #1
 80044a2:	f003 021f 	and.w	r2, r3, #31
 80044a6:	4613      	mov	r3, r2
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	4413      	add	r3, r2
 80044ac:	3b1e      	subs	r3, #30
 80044ae:	051b      	lsls	r3, r3, #20
 80044b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044ba:	4619      	mov	r1, r3
 80044bc:	f7ff f9b5 	bl	800382a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	4b3d      	ldr	r3, [pc, #244]	; (80045bc <HAL_ADC_ConfigChannel+0x7d8>)
 80044c6:	4013      	ands	r3, r2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d06c      	beq.n	80045a6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044cc:	483c      	ldr	r0, [pc, #240]	; (80045c0 <HAL_ADC_ConfigChannel+0x7dc>)
 80044ce:	f7ff f8f7 	bl	80036c0 <LL_ADC_GetCommonPathInternalCh>
 80044d2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a3a      	ldr	r2, [pc, #232]	; (80045c4 <HAL_ADC_ConfigChannel+0x7e0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d127      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d121      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a35      	ldr	r2, [pc, #212]	; (80045c8 <HAL_ADC_ConfigChannel+0x7e4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d157      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044fe:	4619      	mov	r1, r3
 8004500:	482f      	ldr	r0, [pc, #188]	; (80045c0 <HAL_ADC_ConfigChannel+0x7dc>)
 8004502:	f7ff f8ca 	bl	800369a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004506:	4b31      	ldr	r3, [pc, #196]	; (80045cc <HAL_ADC_ConfigChannel+0x7e8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	099b      	lsrs	r3, r3, #6
 800450c:	4a30      	ldr	r2, [pc, #192]	; (80045d0 <HAL_ADC_ConfigChannel+0x7ec>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	099b      	lsrs	r3, r3, #6
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	4613      	mov	r3, r2
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004520:	e002      	b.n	8004528 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	3b01      	subs	r3, #1
 8004526:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f9      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800452e:	e03a      	b.n	80045a6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a27      	ldr	r2, [pc, #156]	; (80045d4 <HAL_ADC_ConfigChannel+0x7f0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d113      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800453a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800453e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10d      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1f      	ldr	r2, [pc, #124]	; (80045c8 <HAL_ADC_ConfigChannel+0x7e4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d12a      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004550:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004554:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004558:	4619      	mov	r1, r3
 800455a:	4819      	ldr	r0, [pc, #100]	; (80045c0 <HAL_ADC_ConfigChannel+0x7dc>)
 800455c:	f7ff f89d 	bl	800369a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004560:	e021      	b.n	80045a6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1c      	ldr	r2, [pc, #112]	; (80045d8 <HAL_ADC_ConfigChannel+0x7f4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d11c      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800456c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d116      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a12      	ldr	r2, [pc, #72]	; (80045c8 <HAL_ADC_ConfigChannel+0x7e4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d111      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004582:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004586:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800458a:	4619      	mov	r1, r3
 800458c:	480c      	ldr	r0, [pc, #48]	; (80045c0 <HAL_ADC_ConfigChannel+0x7dc>)
 800458e:	f7ff f884 	bl	800369a <LL_ADC_SetCommonPathInternalCh>
 8004592:	e008      	b.n	80045a6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	f043 0220 	orr.w	r2, r3, #32
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80045ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	37d8      	adds	r7, #216	; 0xd8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	80080000 	.word	0x80080000
 80045c0:	50040300 	.word	0x50040300
 80045c4:	c7520000 	.word	0xc7520000
 80045c8:	50040000 	.word	0x50040000
 80045cc:	20000010 	.word	0x20000010
 80045d0:	053e2d63 	.word	0x053e2d63
 80045d4:	cb840000 	.word	0xcb840000
 80045d8:	80000001 	.word	0x80000001

080045dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff f9cd 	bl	800398c <LL_ADC_IsEnabled>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d169      	bne.n	80046cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <ADC_Enable+0xfc>)
 8004600:	4013      	ands	r3, r2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00d      	beq.n	8004622 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460a:	f043 0210 	orr.w	r2, r3, #16
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004616:	f043 0201 	orr.w	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e055      	b.n	80046ce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff f99c 	bl	8003964 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800462c:	482b      	ldr	r0, [pc, #172]	; (80046dc <ADC_Enable+0x100>)
 800462e:	f7ff f847 	bl	80036c0 <LL_ADC_GetCommonPathInternalCh>
 8004632:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004638:	2b00      	cmp	r3, #0
 800463a:	d013      	beq.n	8004664 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800463c:	4b28      	ldr	r3, [pc, #160]	; (80046e0 <ADC_Enable+0x104>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	099b      	lsrs	r3, r3, #6
 8004642:	4a28      	ldr	r2, [pc, #160]	; (80046e4 <ADC_Enable+0x108>)
 8004644:	fba2 2303 	umull	r2, r3, r2, r3
 8004648:	099b      	lsrs	r3, r3, #6
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	4613      	mov	r3, r2
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004656:	e002      	b.n	800465e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	3b01      	subs	r3, #1
 800465c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f9      	bne.n	8004658 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004664:	f7fe ffd6 	bl	8003614 <HAL_GetTick>
 8004668:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800466a:	e028      	b.n	80046be <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff f98b 	bl	800398c <LL_ADC_IsEnabled>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d104      	bne.n	8004686 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff f96f 	bl	8003964 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004686:	f7fe ffc5 	bl	8003614 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d914      	bls.n	80046be <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d00d      	beq.n	80046be <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a6:	f043 0210 	orr.w	r2, r3, #16
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b2:	f043 0201 	orr.w	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e007      	b.n	80046ce <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d1cf      	bne.n	800466c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	8000003f 	.word	0x8000003f
 80046dc:	50040300 	.word	0x50040300
 80046e0:	20000010 	.word	0x20000010
 80046e4:	053e2d63 	.word	0x053e2d63

080046e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d14b      	bne.n	800479a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d021      	beq.n	8004760 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff f843 	bl	80037ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d032      	beq.n	8004792 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d12b      	bne.n	8004792 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d11f      	bne.n	8004792 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004756:	f043 0201 	orr.w	r2, r3, #1
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	659a      	str	r2, [r3, #88]	; 0x58
 800475e:	e018      	b.n	8004792 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d111      	bne.n	8004792 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004772:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d105      	bne.n	8004792 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478a:	f043 0201 	orr.w	r2, r3, #1
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f7fc fed2 	bl	800153c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004798:	e00e      	b.n	80047b8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f7ff fb12 	bl	8003dd0 <HAL_ADC_ErrorCallback>
}
 80047ac:	e004      	b.n	80047b8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	4798      	blx	r3
}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f7ff faf4 	bl	8003dbc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047d4:	bf00      	nop
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fa:	f043 0204 	orr.w	r2, r3, #4
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f7ff fae4 	bl	8003dd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004808:	bf00      	nop
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004820:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <__NVIC_SetPriorityGrouping+0x44>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800482c:	4013      	ands	r3, r2
 800482e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800483c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004842:	4a04      	ldr	r2, [pc, #16]	; (8004854 <__NVIC_SetPriorityGrouping+0x44>)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	60d3      	str	r3, [r2, #12]
}
 8004848:	bf00      	nop
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	e000ed00 	.word	0xe000ed00

08004858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800485c:	4b04      	ldr	r3, [pc, #16]	; (8004870 <__NVIC_GetPriorityGrouping+0x18>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	0a1b      	lsrs	r3, r3, #8
 8004862:	f003 0307 	and.w	r3, r3, #7
}
 8004866:	4618      	mov	r0, r3
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	e000ed00 	.word	0xe000ed00

08004874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800487e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004882:	2b00      	cmp	r3, #0
 8004884:	db0b      	blt.n	800489e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004886:	79fb      	ldrb	r3, [r7, #7]
 8004888:	f003 021f 	and.w	r2, r3, #31
 800488c:	4907      	ldr	r1, [pc, #28]	; (80048ac <__NVIC_EnableIRQ+0x38>)
 800488e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	2001      	movs	r0, #1
 8004896:	fa00 f202 	lsl.w	r2, r0, r2
 800489a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	e000e100 	.word	0xe000e100

080048b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	6039      	str	r1, [r7, #0]
 80048ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	db0a      	blt.n	80048da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	490c      	ldr	r1, [pc, #48]	; (80048fc <__NVIC_SetPriority+0x4c>)
 80048ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ce:	0112      	lsls	r2, r2, #4
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	440b      	add	r3, r1
 80048d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048d8:	e00a      	b.n	80048f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	4908      	ldr	r1, [pc, #32]	; (8004900 <__NVIC_SetPriority+0x50>)
 80048e0:	79fb      	ldrb	r3, [r7, #7]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	3b04      	subs	r3, #4
 80048e8:	0112      	lsls	r2, r2, #4
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	440b      	add	r3, r1
 80048ee:	761a      	strb	r2, [r3, #24]
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	e000e100 	.word	0xe000e100
 8004900:	e000ed00 	.word	0xe000ed00

08004904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004904:	b480      	push	{r7}
 8004906:	b089      	sub	sp, #36	; 0x24
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f1c3 0307 	rsb	r3, r3, #7
 800491e:	2b04      	cmp	r3, #4
 8004920:	bf28      	it	cs
 8004922:	2304      	movcs	r3, #4
 8004924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	3304      	adds	r3, #4
 800492a:	2b06      	cmp	r3, #6
 800492c:	d902      	bls.n	8004934 <NVIC_EncodePriority+0x30>
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	3b03      	subs	r3, #3
 8004932:	e000      	b.n	8004936 <NVIC_EncodePriority+0x32>
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004938:	f04f 32ff 	mov.w	r2, #4294967295
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43da      	mvns	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	401a      	ands	r2, r3
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800494c:	f04f 31ff 	mov.w	r1, #4294967295
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	fa01 f303 	lsl.w	r3, r1, r3
 8004956:	43d9      	mvns	r1, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800495c:	4313      	orrs	r3, r2
         );
}
 800495e:	4618      	mov	r0, r3
 8004960:	3724      	adds	r7, #36	; 0x24
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3b01      	subs	r3, #1
 8004978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800497c:	d301      	bcc.n	8004982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800497e:	2301      	movs	r3, #1
 8004980:	e00f      	b.n	80049a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004982:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <SysTick_Config+0x40>)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3b01      	subs	r3, #1
 8004988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800498a:	210f      	movs	r1, #15
 800498c:	f04f 30ff 	mov.w	r0, #4294967295
 8004990:	f7ff ff8e 	bl	80048b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004994:	4b05      	ldr	r3, [pc, #20]	; (80049ac <SysTick_Config+0x40>)
 8004996:	2200      	movs	r2, #0
 8004998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800499a:	4b04      	ldr	r3, [pc, #16]	; (80049ac <SysTick_Config+0x40>)
 800499c:	2207      	movs	r2, #7
 800499e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	e000e010 	.word	0xe000e010

080049b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff ff29 	bl	8004810 <__NVIC_SetPriorityGrouping>
}
 80049be:	bf00      	nop
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b086      	sub	sp, #24
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	4603      	mov	r3, r0
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	607a      	str	r2, [r7, #4]
 80049d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049d8:	f7ff ff3e 	bl	8004858 <__NVIC_GetPriorityGrouping>
 80049dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	68b9      	ldr	r1, [r7, #8]
 80049e2:	6978      	ldr	r0, [r7, #20]
 80049e4:	f7ff ff8e 	bl	8004904 <NVIC_EncodePriority>
 80049e8:	4602      	mov	r2, r0
 80049ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ee:	4611      	mov	r1, r2
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff ff5d 	bl	80048b0 <__NVIC_SetPriority>
}
 80049f6:	bf00      	nop
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	4603      	mov	r3, r0
 8004a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff ff31 	bl	8004874 <__NVIC_EnableIRQ>
}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff ffa2 	bl	800496c <SysTick_Config>
 8004a28:	4603      	mov	r3, r0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e014      	b.n	8004a6e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	791b      	ldrb	r3, [r3, #4]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d105      	bne.n	8004a5a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7fe fac1 	bl	8002fdc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b088      	sub	sp, #32
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	795b      	ldrb	r3, [r3, #5]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_DAC_ConfigChannel+0x1c>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e137      	b.n	8004d04 <HAL_DAC_ConfigChannel+0x28c>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2201      	movs	r2, #1
 8004a98:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	f040 8081 	bne.w	8004bac <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004aaa:	f7fe fdb3 	bl	8003614 <HAL_GetTick>
 8004aae:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d140      	bne.n	8004b38 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ab6:	e018      	b.n	8004aea <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ab8:	f7fe fdac 	bl	8003614 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d911      	bls.n	8004aea <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f043 0208 	orr.w	r2, r3, #8
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2203      	movs	r2, #3
 8004ae4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e10c      	b.n	8004d04 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1df      	bne.n	8004ab8 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8004af8:	2001      	movs	r0, #1
 8004afa:	f7fe fd97 	bl	800362c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	69d2      	ldr	r2, [r2, #28]
 8004b06:	641a      	str	r2, [r3, #64]	; 0x40
 8004b08:	e023      	b.n	8004b52 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004b0a:	f7fe fd83 	bl	8003614 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d90f      	bls.n	8004b38 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	da0a      	bge.n	8004b38 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f043 0208 	orr.w	r2, r3, #8
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2203      	movs	r2, #3
 8004b32:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e0e5      	b.n	8004d04 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	dbe3      	blt.n	8004b0a <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8004b42:	2001      	movs	r0, #1
 8004b44:	f7fe fd72 	bl	800362c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	69d2      	ldr	r2, [r2, #28]
 8004b50:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004b62:	fa01 f303 	lsl.w	r3, r1, r3
 8004b66:	43db      	mvns	r3, r3
 8004b68:	ea02 0103 	and.w	r1, r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6a1a      	ldr	r2, [r3, #32]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	409a      	lsls	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	21ff      	movs	r1, #255	; 0xff
 8004b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b92:	43db      	mvns	r3, r3
 8004b94:	ea02 0103 	and.w	r1, r2, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	409a      	lsls	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d11d      	bne.n	8004bf0 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f003 0310 	and.w	r3, r3, #16
 8004bc2:	221f      	movs	r2, #31
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2207      	movs	r2, #7
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	43db      	mvns	r3, r3
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6819      	ldr	r1, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f003 0310 	and.w	r3, r3, #16
 8004c44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	43da      	mvns	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	400a      	ands	r2, r1
 8004c54:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004c68:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	69fa      	ldr	r2, [r7, #28]
 8004c70:	4013      	ands	r3, r2
 8004c72:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c94:	d104      	bne.n	8004ca0 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c9c:	61fb      	str	r3, [r7, #28]
 8004c9e:	e018      	b.n	8004cd2 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d104      	bne.n	8004cb2 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cae:	61fb      	str	r3, [r7, #28]
 8004cb0:	e00f      	b.n	8004cd2 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8004cb2:	f001 fafd 	bl	80062b0 <HAL_RCC_GetHCLKFreq>
 8004cb6:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	4a14      	ldr	r2, [pc, #80]	; (8004d0c <HAL_DAC_ConfigChannel+0x294>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d904      	bls.n	8004cca <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	e003      	b.n	8004cd2 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cd0:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6819      	ldr	r1, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	22c0      	movs	r2, #192	; 0xc0
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	43da      	mvns	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	400a      	ands	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3720      	adds	r7, #32
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	04c4b400 	.word	0x04c4b400

08004d10 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e08d      	b.n	8004e3e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	4b47      	ldr	r3, [pc, #284]	; (8004e48 <HAL_DMA_Init+0x138>)
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d80f      	bhi.n	8004d4e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	4b45      	ldr	r3, [pc, #276]	; (8004e4c <HAL_DMA_Init+0x13c>)
 8004d36:	4413      	add	r3, r2
 8004d38:	4a45      	ldr	r2, [pc, #276]	; (8004e50 <HAL_DMA_Init+0x140>)
 8004d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3e:	091b      	lsrs	r3, r3, #4
 8004d40:	009a      	lsls	r2, r3, #2
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a42      	ldr	r2, [pc, #264]	; (8004e54 <HAL_DMA_Init+0x144>)
 8004d4a:	641a      	str	r2, [r3, #64]	; 0x40
 8004d4c:	e00e      	b.n	8004d6c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	4b40      	ldr	r3, [pc, #256]	; (8004e58 <HAL_DMA_Init+0x148>)
 8004d56:	4413      	add	r3, r2
 8004d58:	4a3d      	ldr	r2, [pc, #244]	; (8004e50 <HAL_DMA_Init+0x140>)
 8004d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5e:	091b      	lsrs	r3, r3, #4
 8004d60:	009a      	lsls	r2, r3, #2
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a3c      	ldr	r2, [pc, #240]	; (8004e5c <HAL_DMA_Init+0x14c>)
 8004d6a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004da8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f9b6 	bl	8005130 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dcc:	d102      	bne.n	8004dd4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004de8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d010      	beq.n	8004e14 <HAL_DMA_Init+0x104>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d80c      	bhi.n	8004e14 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f9d6 	bl	80051ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e10:	605a      	str	r2, [r3, #4]
 8004e12:	e008      	b.n	8004e26 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40020407 	.word	0x40020407
 8004e4c:	bffdfff8 	.word	0xbffdfff8
 8004e50:	cccccccd 	.word	0xcccccccd
 8004e54:	40020000 	.word	0x40020000
 8004e58:	bffdfbf8 	.word	0xbffdfbf8
 8004e5c:	40020400 	.word	0x40020400

08004e60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_DMA_Start_IT+0x20>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e066      	b.n	8004f4e <HAL_DMA_Start_IT+0xee>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d155      	bne.n	8004f40 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0201 	bic.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 f8fb 	bl	80050b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d008      	beq.n	8004ed8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 020e 	orr.w	r2, r2, #14
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	e00f      	b.n	8004ef8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0204 	bic.w	r2, r2, #4
 8004ee6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 020a 	orr.w	r2, r2, #10
 8004ef6:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f14:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d007      	beq.n	8004f2e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f2c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f042 0201 	orr.w	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	e005      	b.n	8004f4c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	f003 031c 	and.w	r3, r3, #28
 8004f76:	2204      	movs	r2, #4
 8004f78:	409a      	lsls	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d026      	beq.n	8004fd0 <HAL_DMA_IRQHandler+0x7a>
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d021      	beq.n	8004fd0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d107      	bne.n	8004faa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0204 	bic.w	r2, r2, #4
 8004fa8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fae:	f003 021c 	and.w	r2, r3, #28
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	2104      	movs	r1, #4
 8004fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fbc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d071      	beq.n	80050aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004fce:	e06c      	b.n	80050aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd4:	f003 031c 	and.w	r3, r3, #28
 8004fd8:	2202      	movs	r2, #2
 8004fda:	409a      	lsls	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d02e      	beq.n	8005042 <HAL_DMA_IRQHandler+0xec>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d029      	beq.n	8005042 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10b      	bne.n	8005014 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 020a 	bic.w	r2, r2, #10
 800500a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005018:	f003 021c 	and.w	r2, r3, #28
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	2102      	movs	r1, #2
 8005022:	fa01 f202 	lsl.w	r2, r1, r2
 8005026:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	2b00      	cmp	r3, #0
 8005036:	d038      	beq.n	80050aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005040:	e033      	b.n	80050aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005046:	f003 031c 	and.w	r3, r3, #28
 800504a:	2208      	movs	r2, #8
 800504c:	409a      	lsls	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4013      	ands	r3, r2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d02a      	beq.n	80050ac <HAL_DMA_IRQHandler+0x156>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d025      	beq.n	80050ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 020e 	bic.w	r2, r2, #14
 800506e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005074:	f003 021c 	and.w	r2, r3, #28
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	2101      	movs	r1, #1
 800507e:	fa01 f202 	lsl.w	r2, r1, r2
 8005082:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d004      	beq.n	80050ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80050aa:	bf00      	nop
 80050ac:	bf00      	nop
}
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80050ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d004      	beq.n	80050de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80050dc:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e2:	f003 021c 	and.w	r2, r3, #28
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	2101      	movs	r1, #1
 80050ec:	fa01 f202 	lsl.w	r2, r1, r2
 80050f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	2b10      	cmp	r3, #16
 8005100:	d108      	bne.n	8005114 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005112:	e007      	b.n	8005124 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	60da      	str	r2, [r3, #12]
}
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	4b17      	ldr	r3, [pc, #92]	; (800519c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005140:	429a      	cmp	r2, r3
 8005142:	d80a      	bhi.n	800515a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005148:	089b      	lsrs	r3, r3, #2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005150:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6493      	str	r3, [r2, #72]	; 0x48
 8005158:	e007      	b.n	800516a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515e:	089b      	lsrs	r3, r3, #2
 8005160:	009a      	lsls	r2, r3, #2
 8005162:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005164:	4413      	add	r3, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	3b08      	subs	r3, #8
 8005172:	4a0c      	ldr	r2, [pc, #48]	; (80051a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005174:	fba2 2303 	umull	r2, r3, r2, r3
 8005178:	091b      	lsrs	r3, r3, #4
 800517a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a0a      	ldr	r2, [pc, #40]	; (80051a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005180:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	2201      	movs	r2, #1
 800518a:	409a      	lsls	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005190:	bf00      	nop
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	40020407 	.word	0x40020407
 80051a0:	4002081c 	.word	0x4002081c
 80051a4:	cccccccd 	.word	0xcccccccd
 80051a8:	40020880 	.word	0x40020880

080051ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	461a      	mov	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a08      	ldr	r2, [pc, #32]	; (80051f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80051ce:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	2201      	movs	r2, #1
 80051da:	409a      	lsls	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80051e0:	bf00      	nop
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	1000823f 	.word	0x1000823f
 80051f0:	40020940 	.word	0x40020940

080051f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051fe:	2300      	movs	r3, #0
 8005200:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005202:	e166      	b.n	80054d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	2101      	movs	r1, #1
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	fa01 f303 	lsl.w	r3, r1, r3
 8005210:	4013      	ands	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8158 	beq.w	80054cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f003 0303 	and.w	r3, r3, #3
 8005224:	2b01      	cmp	r3, #1
 8005226:	d005      	beq.n	8005234 <HAL_GPIO_Init+0x40>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d130      	bne.n	8005296 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	2203      	movs	r2, #3
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	43db      	mvns	r3, r3
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	4013      	ands	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800526a:	2201      	movs	r2, #1
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	fa02 f303 	lsl.w	r3, r2, r3
 8005272:	43db      	mvns	r3, r3
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4013      	ands	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	091b      	lsrs	r3, r3, #4
 8005280:	f003 0201 	and.w	r2, r3, #1
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d017      	beq.n	80052d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	2203      	movs	r2, #3
 80052ae:	fa02 f303 	lsl.w	r3, r2, r3
 80052b2:	43db      	mvns	r3, r3
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4013      	ands	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	fa02 f303 	lsl.w	r3, r2, r3
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d123      	bne.n	8005326 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	08da      	lsrs	r2, r3, #3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3208      	adds	r2, #8
 80052e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	220f      	movs	r2, #15
 80052f6:	fa02 f303 	lsl.w	r3, r2, r3
 80052fa:	43db      	mvns	r3, r3
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4013      	ands	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	691a      	ldr	r2, [r3, #16]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	08da      	lsrs	r2, r3, #3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3208      	adds	r2, #8
 8005320:	6939      	ldr	r1, [r7, #16]
 8005322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	2203      	movs	r2, #3
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	43db      	mvns	r3, r3
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4013      	ands	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f003 0203 	and.w	r2, r3, #3
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 80b2 	beq.w	80054cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005368:	4b61      	ldr	r3, [pc, #388]	; (80054f0 <HAL_GPIO_Init+0x2fc>)
 800536a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800536c:	4a60      	ldr	r2, [pc, #384]	; (80054f0 <HAL_GPIO_Init+0x2fc>)
 800536e:	f043 0301 	orr.w	r3, r3, #1
 8005372:	6613      	str	r3, [r2, #96]	; 0x60
 8005374:	4b5e      	ldr	r3, [pc, #376]	; (80054f0 <HAL_GPIO_Init+0x2fc>)
 8005376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005380:	4a5c      	ldr	r2, [pc, #368]	; (80054f4 <HAL_GPIO_Init+0x300>)
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	089b      	lsrs	r3, r3, #2
 8005386:	3302      	adds	r3, #2
 8005388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800538c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f003 0303 	and.w	r3, r3, #3
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	220f      	movs	r2, #15
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	43db      	mvns	r3, r3
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4013      	ands	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80053aa:	d02b      	beq.n	8005404 <HAL_GPIO_Init+0x210>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a52      	ldr	r2, [pc, #328]	; (80054f8 <HAL_GPIO_Init+0x304>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d025      	beq.n	8005400 <HAL_GPIO_Init+0x20c>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a51      	ldr	r2, [pc, #324]	; (80054fc <HAL_GPIO_Init+0x308>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d01f      	beq.n	80053fc <HAL_GPIO_Init+0x208>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a50      	ldr	r2, [pc, #320]	; (8005500 <HAL_GPIO_Init+0x30c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d019      	beq.n	80053f8 <HAL_GPIO_Init+0x204>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a4f      	ldr	r2, [pc, #316]	; (8005504 <HAL_GPIO_Init+0x310>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d013      	beq.n	80053f4 <HAL_GPIO_Init+0x200>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a4e      	ldr	r2, [pc, #312]	; (8005508 <HAL_GPIO_Init+0x314>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00d      	beq.n	80053f0 <HAL_GPIO_Init+0x1fc>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a4d      	ldr	r2, [pc, #308]	; (800550c <HAL_GPIO_Init+0x318>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d007      	beq.n	80053ec <HAL_GPIO_Init+0x1f8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a4c      	ldr	r2, [pc, #304]	; (8005510 <HAL_GPIO_Init+0x31c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d101      	bne.n	80053e8 <HAL_GPIO_Init+0x1f4>
 80053e4:	2307      	movs	r3, #7
 80053e6:	e00e      	b.n	8005406 <HAL_GPIO_Init+0x212>
 80053e8:	2308      	movs	r3, #8
 80053ea:	e00c      	b.n	8005406 <HAL_GPIO_Init+0x212>
 80053ec:	2306      	movs	r3, #6
 80053ee:	e00a      	b.n	8005406 <HAL_GPIO_Init+0x212>
 80053f0:	2305      	movs	r3, #5
 80053f2:	e008      	b.n	8005406 <HAL_GPIO_Init+0x212>
 80053f4:	2304      	movs	r3, #4
 80053f6:	e006      	b.n	8005406 <HAL_GPIO_Init+0x212>
 80053f8:	2303      	movs	r3, #3
 80053fa:	e004      	b.n	8005406 <HAL_GPIO_Init+0x212>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e002      	b.n	8005406 <HAL_GPIO_Init+0x212>
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <HAL_GPIO_Init+0x212>
 8005404:	2300      	movs	r3, #0
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	f002 0203 	and.w	r2, r2, #3
 800540c:	0092      	lsls	r2, r2, #2
 800540e:	4093      	lsls	r3, r2
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005416:	4937      	ldr	r1, [pc, #220]	; (80054f4 <HAL_GPIO_Init+0x300>)
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	089b      	lsrs	r3, r3, #2
 800541c:	3302      	adds	r3, #2
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005424:	4b3b      	ldr	r3, [pc, #236]	; (8005514 <HAL_GPIO_Init+0x320>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	43db      	mvns	r3, r3
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4013      	ands	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005448:	4a32      	ldr	r2, [pc, #200]	; (8005514 <HAL_GPIO_Init+0x320>)
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800544e:	4b31      	ldr	r3, [pc, #196]	; (8005514 <HAL_GPIO_Init+0x320>)
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	43db      	mvns	r3, r3
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4013      	ands	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005472:	4a28      	ldr	r2, [pc, #160]	; (8005514 <HAL_GPIO_Init+0x320>)
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005478:	4b26      	ldr	r3, [pc, #152]	; (8005514 <HAL_GPIO_Init+0x320>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	43db      	mvns	r3, r3
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4013      	ands	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800549c:	4a1d      	ldr	r2, [pc, #116]	; (8005514 <HAL_GPIO_Init+0x320>)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80054a2:	4b1c      	ldr	r3, [pc, #112]	; (8005514 <HAL_GPIO_Init+0x320>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	43db      	mvns	r3, r3
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4013      	ands	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80054c6:	4a13      	ldr	r2, [pc, #76]	; (8005514 <HAL_GPIO_Init+0x320>)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	3301      	adds	r3, #1
 80054d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	fa22 f303 	lsr.w	r3, r2, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f47f ae91 	bne.w	8005204 <HAL_GPIO_Init+0x10>
  }
}
 80054e2:	bf00      	nop
 80054e4:	bf00      	nop
 80054e6:	371c      	adds	r7, #28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	40021000 	.word	0x40021000
 80054f4:	40010000 	.word	0x40010000
 80054f8:	48000400 	.word	0x48000400
 80054fc:	48000800 	.word	0x48000800
 8005500:	48000c00 	.word	0x48000c00
 8005504:	48001000 	.word	0x48001000
 8005508:	48001400 	.word	0x48001400
 800550c:	48001800 	.word	0x48001800
 8005510:	48001c00 	.word	0x48001c00
 8005514:	40010400 	.word	0x40010400

08005518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	807b      	strh	r3, [r7, #2]
 8005524:	4613      	mov	r3, r2
 8005526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005528:	787b      	ldrb	r3, [r7, #1]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800552e:	887a      	ldrh	r2, [r7, #2]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005534:	e002      	b.n	800553c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005536:	887a      	ldrh	r2, [r7, #2]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800554c:	4b0d      	ldr	r3, [pc, #52]	; (8005584 <HAL_PWREx_GetVoltageRange+0x3c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005558:	d102      	bne.n	8005560 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800555a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800555e:	e00b      	b.n	8005578 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005560:	4b08      	ldr	r3, [pc, #32]	; (8005584 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800556e:	d102      	bne.n	8005576 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005574:	e000      	b.n	8005578 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005576:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005578:	4618      	mov	r0, r3
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40007000 	.word	0x40007000

08005588 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d141      	bne.n	800561a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005596:	4b4b      	ldr	r3, [pc, #300]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800559e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a2:	d131      	bne.n	8005608 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055a4:	4b47      	ldr	r3, [pc, #284]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055aa:	4a46      	ldr	r2, [pc, #280]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055b4:	4b43      	ldr	r3, [pc, #268]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055bc:	4a41      	ldr	r2, [pc, #260]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80055c4:	4b40      	ldr	r3, [pc, #256]	; (80056c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2232      	movs	r2, #50	; 0x32
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	4a3f      	ldr	r2, [pc, #252]	; (80056cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80055d0:	fba2 2303 	umull	r2, r3, r2, r3
 80055d4:	0c9b      	lsrs	r3, r3, #18
 80055d6:	3301      	adds	r3, #1
 80055d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055da:	e002      	b.n	80055e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3b01      	subs	r3, #1
 80055e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055e2:	4b38      	ldr	r3, [pc, #224]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ee:	d102      	bne.n	80055f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f2      	bne.n	80055dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055f6:	4b33      	ldr	r3, [pc, #204]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005602:	d158      	bne.n	80056b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e057      	b.n	80056b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005608:	4b2e      	ldr	r3, [pc, #184]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800560a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800560e:	4a2d      	ldr	r2, [pc, #180]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005614:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005618:	e04d      	b.n	80056b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005620:	d141      	bne.n	80056a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005622:	4b28      	ldr	r3, [pc, #160]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800562a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800562e:	d131      	bne.n	8005694 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005630:	4b24      	ldr	r3, [pc, #144]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005636:	4a23      	ldr	r2, [pc, #140]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005640:	4b20      	ldr	r3, [pc, #128]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005648:	4a1e      	ldr	r2, [pc, #120]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800564a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800564e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005650:	4b1d      	ldr	r3, [pc, #116]	; (80056c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2232      	movs	r2, #50	; 0x32
 8005656:	fb02 f303 	mul.w	r3, r2, r3
 800565a:	4a1c      	ldr	r2, [pc, #112]	; (80056cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800565c:	fba2 2303 	umull	r2, r3, r2, r3
 8005660:	0c9b      	lsrs	r3, r3, #18
 8005662:	3301      	adds	r3, #1
 8005664:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005666:	e002      	b.n	800566e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3b01      	subs	r3, #1
 800566c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800566e:	4b15      	ldr	r3, [pc, #84]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567a:	d102      	bne.n	8005682 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1f2      	bne.n	8005668 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005682:	4b10      	ldr	r3, [pc, #64]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800568a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800568e:	d112      	bne.n	80056b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e011      	b.n	80056b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005694:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800569a:	4a0a      	ldr	r2, [pc, #40]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800569c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80056a4:	e007      	b.n	80056b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80056a6:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056ae:	4a05      	ldr	r2, [pc, #20]	; (80056c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056b4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	40007000 	.word	0x40007000
 80056c8:	20000010 	.word	0x20000010
 80056cc:	431bde83 	.word	0x431bde83

080056d0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80056d4:	4b05      	ldr	r3, [pc, #20]	; (80056ec <HAL_PWREx_EnableVddIO2+0x1c>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	4a04      	ldr	r2, [pc, #16]	; (80056ec <HAL_PWREx_EnableVddIO2+0x1c>)
 80056da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056de:	6053      	str	r3, [r2, #4]
}
 80056e0:	bf00      	nop
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40007000 	.word	0x40007000

080056f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d102      	bne.n	8005704 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	f000 bc08 	b.w	8005f14 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005704:	4b96      	ldr	r3, [pc, #600]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 030c 	and.w	r3, r3, #12
 800570c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800570e:	4b94      	ldr	r3, [pc, #592]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 80e4 	beq.w	80058ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <HAL_RCC_OscConfig+0x4c>
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b0c      	cmp	r3, #12
 8005730:	f040 808b 	bne.w	800584a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2b01      	cmp	r3, #1
 8005738:	f040 8087 	bne.w	800584a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800573c:	4b88      	ldr	r3, [pc, #544]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_RCC_OscConfig+0x64>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e3df      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a1a      	ldr	r2, [r3, #32]
 8005758:	4b81      	ldr	r3, [pc, #516]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d004      	beq.n	800576e <HAL_RCC_OscConfig+0x7e>
 8005764:	4b7e      	ldr	r3, [pc, #504]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800576c:	e005      	b.n	800577a <HAL_RCC_OscConfig+0x8a>
 800576e:	4b7c      	ldr	r3, [pc, #496]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 8005770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005774:	091b      	lsrs	r3, r3, #4
 8005776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800577a:	4293      	cmp	r3, r2
 800577c:	d223      	bcs.n	80057c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fdcc 	bl	8006320 <RCC_SetFlashLatencyFromMSIRange>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e3c0      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005792:	4b73      	ldr	r3, [pc, #460]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a72      	ldr	r2, [pc, #456]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 8005798:	f043 0308 	orr.w	r3, r3, #8
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	4b70      	ldr	r3, [pc, #448]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	496d      	ldr	r1, [pc, #436]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057b0:	4b6b      	ldr	r3, [pc, #428]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	4968      	ldr	r1, [pc, #416]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	604b      	str	r3, [r1, #4]
 80057c4:	e025      	b.n	8005812 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057c6:	4b66      	ldr	r3, [pc, #408]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a65      	ldr	r2, [pc, #404]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 80057cc:	f043 0308 	orr.w	r3, r3, #8
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	4b63      	ldr	r3, [pc, #396]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	4960      	ldr	r1, [pc, #384]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057e4:	4b5e      	ldr	r3, [pc, #376]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	495b      	ldr	r1, [pc, #364]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d109      	bne.n	8005812 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fd8c 	bl	8006320 <RCC_SetFlashLatencyFromMSIRange>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e380      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005812:	f000 fcc1 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 8005816:	4602      	mov	r2, r0
 8005818:	4b51      	ldr	r3, [pc, #324]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	091b      	lsrs	r3, r3, #4
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	4950      	ldr	r1, [pc, #320]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005824:	5ccb      	ldrb	r3, [r1, r3]
 8005826:	f003 031f 	and.w	r3, r3, #31
 800582a:	fa22 f303 	lsr.w	r3, r2, r3
 800582e:	4a4e      	ldr	r2, [pc, #312]	; (8005968 <HAL_RCC_OscConfig+0x278>)
 8005830:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005832:	4b4e      	ldr	r3, [pc, #312]	; (800596c <HAL_RCC_OscConfig+0x27c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f7fd fe9c 	bl	8003574 <HAL_InitTick>
 800583c:	4603      	mov	r3, r0
 800583e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d052      	beq.n	80058ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005846:	7bfb      	ldrb	r3, [r7, #15]
 8005848:	e364      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d032      	beq.n	80058b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005852:	4b43      	ldr	r3, [pc, #268]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a42      	ldr	r2, [pc, #264]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800585e:	f7fd fed9 	bl	8003614 <HAL_GetTick>
 8005862:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005864:	e008      	b.n	8005878 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005866:	f7fd fed5 	bl	8003614 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e34d      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005878:	4b39      	ldr	r3, [pc, #228]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0f0      	beq.n	8005866 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005884:	4b36      	ldr	r3, [pc, #216]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a35      	ldr	r2, [pc, #212]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 800588a:	f043 0308 	orr.w	r3, r3, #8
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	4b33      	ldr	r3, [pc, #204]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	4930      	ldr	r1, [pc, #192]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058a2:	4b2f      	ldr	r3, [pc, #188]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	021b      	lsls	r3, r3, #8
 80058b0:	492b      	ldr	r1, [pc, #172]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	604b      	str	r3, [r1, #4]
 80058b6:	e01a      	b.n	80058ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80058b8:	4b29      	ldr	r3, [pc, #164]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a28      	ldr	r2, [pc, #160]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 80058be:	f023 0301 	bic.w	r3, r3, #1
 80058c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058c4:	f7fd fea6 	bl	8003614 <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058cc:	f7fd fea2 	bl	8003614 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e31a      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058de:	4b20      	ldr	r3, [pc, #128]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1f0      	bne.n	80058cc <HAL_RCC_OscConfig+0x1dc>
 80058ea:	e000      	b.n	80058ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d073      	beq.n	80059e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d005      	beq.n	800590c <HAL_RCC_OscConfig+0x21c>
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	2b0c      	cmp	r3, #12
 8005904:	d10e      	bne.n	8005924 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2b03      	cmp	r3, #3
 800590a:	d10b      	bne.n	8005924 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800590c:	4b14      	ldr	r3, [pc, #80]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d063      	beq.n	80059e0 <HAL_RCC_OscConfig+0x2f0>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d15f      	bne.n	80059e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e2f7      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592c:	d106      	bne.n	800593c <HAL_RCC_OscConfig+0x24c>
 800592e:	4b0c      	ldr	r3, [pc, #48]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a0b      	ldr	r2, [pc, #44]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 8005934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	e025      	b.n	8005988 <HAL_RCC_OscConfig+0x298>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005944:	d114      	bne.n	8005970 <HAL_RCC_OscConfig+0x280>
 8005946:	4b06      	ldr	r3, [pc, #24]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a05      	ldr	r2, [pc, #20]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 800594c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	4b03      	ldr	r3, [pc, #12]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a02      	ldr	r2, [pc, #8]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 8005958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	e013      	b.n	8005988 <HAL_RCC_OscConfig+0x298>
 8005960:	40021000 	.word	0x40021000
 8005964:	08010a9c 	.word	0x08010a9c
 8005968:	20000010 	.word	0x20000010
 800596c:	20000014 	.word	0x20000014
 8005970:	4ba0      	ldr	r3, [pc, #640]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a9f      	ldr	r2, [pc, #636]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	4b9d      	ldr	r3, [pc, #628]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a9c      	ldr	r2, [pc, #624]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d013      	beq.n	80059b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fd fe40 	bl	8003614 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005998:	f7fd fe3c 	bl	8003614 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b64      	cmp	r3, #100	; 0x64
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e2b4      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059aa:	4b92      	ldr	r3, [pc, #584]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0f0      	beq.n	8005998 <HAL_RCC_OscConfig+0x2a8>
 80059b6:	e014      	b.n	80059e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b8:	f7fd fe2c 	bl	8003614 <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059be:	e008      	b.n	80059d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059c0:	f7fd fe28 	bl	8003614 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b64      	cmp	r3, #100	; 0x64
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e2a0      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059d2:	4b88      	ldr	r3, [pc, #544]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1f0      	bne.n	80059c0 <HAL_RCC_OscConfig+0x2d0>
 80059de:	e000      	b.n	80059e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d060      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	2b04      	cmp	r3, #4
 80059f2:	d005      	beq.n	8005a00 <HAL_RCC_OscConfig+0x310>
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2b0c      	cmp	r3, #12
 80059f8:	d119      	bne.n	8005a2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d116      	bne.n	8005a2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a00:	4b7c      	ldr	r3, [pc, #496]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d005      	beq.n	8005a18 <HAL_RCC_OscConfig+0x328>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e27d      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a18:	4b76      	ldr	r3, [pc, #472]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	061b      	lsls	r3, r3, #24
 8005a26:	4973      	ldr	r1, [pc, #460]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a2c:	e040      	b.n	8005ab0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d023      	beq.n	8005a7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a36:	4b6f      	ldr	r3, [pc, #444]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a6e      	ldr	r2, [pc, #440]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a42:	f7fd fde7 	bl	8003614 <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a4a:	f7fd fde3 	bl	8003614 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e25b      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a5c:	4b65      	ldr	r3, [pc, #404]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0f0      	beq.n	8005a4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a68:	4b62      	ldr	r3, [pc, #392]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	061b      	lsls	r3, r3, #24
 8005a76:	495f      	ldr	r1, [pc, #380]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	604b      	str	r3, [r1, #4]
 8005a7c:	e018      	b.n	8005ab0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a7e:	4b5d      	ldr	r3, [pc, #372]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a5c      	ldr	r2, [pc, #368]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8a:	f7fd fdc3 	bl	8003614 <HAL_GetTick>
 8005a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a90:	e008      	b.n	8005aa4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a92:	f7fd fdbf 	bl	8003614 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e237      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005aa4:	4b53      	ldr	r3, [pc, #332]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1f0      	bne.n	8005a92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0308 	and.w	r3, r3, #8
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d03c      	beq.n	8005b36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01c      	beq.n	8005afe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ac4:	4b4b      	ldr	r3, [pc, #300]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aca:	4a4a      	ldr	r2, [pc, #296]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005acc:	f043 0301 	orr.w	r3, r3, #1
 8005ad0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad4:	f7fd fd9e 	bl	8003614 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005adc:	f7fd fd9a 	bl	8003614 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e212      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005aee:	4b41      	ldr	r3, [pc, #260]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0ef      	beq.n	8005adc <HAL_RCC_OscConfig+0x3ec>
 8005afc:	e01b      	b.n	8005b36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005afe:	4b3d      	ldr	r3, [pc, #244]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b04:	4a3b      	ldr	r2, [pc, #236]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005b06:	f023 0301 	bic.w	r3, r3, #1
 8005b0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0e:	f7fd fd81 	bl	8003614 <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b14:	e008      	b.n	8005b28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b16:	f7fd fd7d 	bl	8003614 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e1f5      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b28:	4b32      	ldr	r3, [pc, #200]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1ef      	bne.n	8005b16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0304 	and.w	r3, r3, #4
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 80a6 	beq.w	8005c90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b44:	2300      	movs	r3, #0
 8005b46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005b48:	4b2a      	ldr	r3, [pc, #168]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10d      	bne.n	8005b70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b54:	4b27      	ldr	r3, [pc, #156]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b58:	4a26      	ldr	r2, [pc, #152]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8005b60:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b70:	4b21      	ldr	r3, [pc, #132]	; (8005bf8 <HAL_RCC_OscConfig+0x508>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d118      	bne.n	8005bae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b7c:	4b1e      	ldr	r3, [pc, #120]	; (8005bf8 <HAL_RCC_OscConfig+0x508>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1d      	ldr	r2, [pc, #116]	; (8005bf8 <HAL_RCC_OscConfig+0x508>)
 8005b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b88:	f7fd fd44 	bl	8003614 <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b90:	f7fd fd40 	bl	8003614 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e1b8      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ba2:	4b15      	ldr	r3, [pc, #84]	; (8005bf8 <HAL_RCC_OscConfig+0x508>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0f0      	beq.n	8005b90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d108      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x4d8>
 8005bb6:	4b0f      	ldr	r3, [pc, #60]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bbc:	4a0d      	ldr	r2, [pc, #52]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bc6:	e029      	b.n	8005c1c <HAL_RCC_OscConfig+0x52c>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	2b05      	cmp	r3, #5
 8005bce:	d115      	bne.n	8005bfc <HAL_RCC_OscConfig+0x50c>
 8005bd0:	4b08      	ldr	r3, [pc, #32]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd6:	4a07      	ldr	r2, [pc, #28]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005bd8:	f043 0304 	orr.w	r3, r3, #4
 8005bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005be0:	4b04      	ldr	r3, [pc, #16]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be6:	4a03      	ldr	r2, [pc, #12]	; (8005bf4 <HAL_RCC_OscConfig+0x504>)
 8005be8:	f043 0301 	orr.w	r3, r3, #1
 8005bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bf0:	e014      	b.n	8005c1c <HAL_RCC_OscConfig+0x52c>
 8005bf2:	bf00      	nop
 8005bf4:	40021000 	.word	0x40021000
 8005bf8:	40007000 	.word	0x40007000
 8005bfc:	4b9d      	ldr	r3, [pc, #628]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c02:	4a9c      	ldr	r2, [pc, #624]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005c04:	f023 0301 	bic.w	r3, r3, #1
 8005c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c0c:	4b99      	ldr	r3, [pc, #612]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c12:	4a98      	ldr	r2, [pc, #608]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005c14:	f023 0304 	bic.w	r3, r3, #4
 8005c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d016      	beq.n	8005c52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c24:	f7fd fcf6 	bl	8003614 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c2a:	e00a      	b.n	8005c42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c2c:	f7fd fcf2 	bl	8003614 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e168      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c42:	4b8c      	ldr	r3, [pc, #560]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0ed      	beq.n	8005c2c <HAL_RCC_OscConfig+0x53c>
 8005c50:	e015      	b.n	8005c7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c52:	f7fd fcdf 	bl	8003614 <HAL_GetTick>
 8005c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c58:	e00a      	b.n	8005c70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5a:	f7fd fcdb 	bl	8003614 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e151      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c70:	4b80      	ldr	r3, [pc, #512]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1ed      	bne.n	8005c5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c7e:	7ffb      	ldrb	r3, [r7, #31]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d105      	bne.n	8005c90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c84:	4b7b      	ldr	r3, [pc, #492]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c88:	4a7a      	ldr	r2, [pc, #488]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d03c      	beq.n	8005d16 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01c      	beq.n	8005cde <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ca4:	4b73      	ldr	r3, [pc, #460]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005caa:	4a72      	ldr	r2, [pc, #456]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005cac:	f043 0301 	orr.w	r3, r3, #1
 8005cb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb4:	f7fd fcae 	bl	8003614 <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cbc:	f7fd fcaa 	bl	8003614 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e122      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cce:	4b69      	ldr	r3, [pc, #420]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0ef      	beq.n	8005cbc <HAL_RCC_OscConfig+0x5cc>
 8005cdc:	e01b      	b.n	8005d16 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005cde:	4b65      	ldr	r3, [pc, #404]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ce4:	4a63      	ldr	r2, [pc, #396]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005ce6:	f023 0301 	bic.w	r3, r3, #1
 8005cea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cee:	f7fd fc91 	bl	8003614 <HAL_GetTick>
 8005cf2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cf4:	e008      	b.n	8005d08 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cf6:	f7fd fc8d 	bl	8003614 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d901      	bls.n	8005d08 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e105      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d08:	4b5a      	ldr	r3, [pc, #360]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1ef      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 80f9 	beq.w	8005f12 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	f040 80cf 	bne.w	8005ec8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005d2a:	4b52      	ldr	r3, [pc, #328]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f003 0203 	and.w	r2, r3, #3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d12c      	bne.n	8005d98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d123      	bne.n	8005d98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d11b      	bne.n	8005d98 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d113      	bne.n	8005d98 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7a:	085b      	lsrs	r3, r3, #1
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d109      	bne.n	8005d98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	085b      	lsrs	r3, r3, #1
 8005d90:	3b01      	subs	r3, #1
 8005d92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d071      	beq.n	8005e7c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	2b0c      	cmp	r3, #12
 8005d9c:	d068      	beq.n	8005e70 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005d9e:	4b35      	ldr	r3, [pc, #212]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d105      	bne.n	8005db6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005daa:	4b32      	ldr	r3, [pc, #200]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e0ac      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005dba:	4b2e      	ldr	r3, [pc, #184]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a2d      	ldr	r2, [pc, #180]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005dc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dc4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005dc6:	f7fd fc25 	bl	8003614 <HAL_GetTick>
 8005dca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dcc:	e008      	b.n	8005de0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dce:	f7fd fc21 	bl	8003614 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e099      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005de0:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1f0      	bne.n	8005dce <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dec:	4b21      	ldr	r3, [pc, #132]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	4b21      	ldr	r3, [pc, #132]	; (8005e78 <HAL_RCC_OscConfig+0x788>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005dfc:	3a01      	subs	r2, #1
 8005dfe:	0112      	lsls	r2, r2, #4
 8005e00:	4311      	orrs	r1, r2
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e06:	0212      	lsls	r2, r2, #8
 8005e08:	4311      	orrs	r1, r2
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e0e:	0852      	lsrs	r2, r2, #1
 8005e10:	3a01      	subs	r2, #1
 8005e12:	0552      	lsls	r2, r2, #21
 8005e14:	4311      	orrs	r1, r2
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e1a:	0852      	lsrs	r2, r2, #1
 8005e1c:	3a01      	subs	r2, #1
 8005e1e:	0652      	lsls	r2, r2, #25
 8005e20:	4311      	orrs	r1, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e26:	06d2      	lsls	r2, r2, #27
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	4912      	ldr	r1, [pc, #72]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005e30:	4b10      	ldr	r3, [pc, #64]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a0f      	ldr	r2, [pc, #60]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e3c:	4b0d      	ldr	r3, [pc, #52]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	4a0c      	ldr	r2, [pc, #48]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e48:	f7fd fbe4 	bl	8003614 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e50:	f7fd fbe0 	bl	8003614 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e058      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e62:	4b04      	ldr	r3, [pc, #16]	; (8005e74 <HAL_RCC_OscConfig+0x784>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0f0      	beq.n	8005e50 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e6e:	e050      	b.n	8005f12 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e04f      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
 8005e74:	40021000 	.word	0x40021000
 8005e78:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e7c:	4b27      	ldr	r3, [pc, #156]	; (8005f1c <HAL_RCC_OscConfig+0x82c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d144      	bne.n	8005f12 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005e88:	4b24      	ldr	r3, [pc, #144]	; (8005f1c <HAL_RCC_OscConfig+0x82c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a23      	ldr	r2, [pc, #140]	; (8005f1c <HAL_RCC_OscConfig+0x82c>)
 8005e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e94:	4b21      	ldr	r3, [pc, #132]	; (8005f1c <HAL_RCC_OscConfig+0x82c>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	4a20      	ldr	r2, [pc, #128]	; (8005f1c <HAL_RCC_OscConfig+0x82c>)
 8005e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ea0:	f7fd fbb8 	bl	8003614 <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ea8:	f7fd fbb4 	bl	8003614 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e02c      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eba:	4b18      	ldr	r3, [pc, #96]	; (8005f1c <HAL_RCC_OscConfig+0x82c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x7b8>
 8005ec6:	e024      	b.n	8005f12 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	2b0c      	cmp	r3, #12
 8005ecc:	d01f      	beq.n	8005f0e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ece:	4b13      	ldr	r3, [pc, #76]	; (8005f1c <HAL_RCC_OscConfig+0x82c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a12      	ldr	r2, [pc, #72]	; (8005f1c <HAL_RCC_OscConfig+0x82c>)
 8005ed4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eda:	f7fd fb9b 	bl	8003614 <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee2:	f7fd fb97 	bl	8003614 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e00f      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ef4:	4b09      	ldr	r3, [pc, #36]	; (8005f1c <HAL_RCC_OscConfig+0x82c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1f0      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005f00:	4b06      	ldr	r3, [pc, #24]	; (8005f1c <HAL_RCC_OscConfig+0x82c>)
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	4905      	ldr	r1, [pc, #20]	; (8005f1c <HAL_RCC_OscConfig+0x82c>)
 8005f06:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <HAL_RCC_OscConfig+0x830>)
 8005f08:	4013      	ands	r3, r2
 8005f0a:	60cb      	str	r3, [r1, #12]
 8005f0c:	e001      	b.n	8005f12 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e000      	b.n	8005f14 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3720      	adds	r7, #32
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	feeefffc 	.word	0xfeeefffc

08005f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e11d      	b.n	8006178 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f3c:	4b90      	ldr	r3, [pc, #576]	; (8006180 <HAL_RCC_ClockConfig+0x25c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d910      	bls.n	8005f6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f4a:	4b8d      	ldr	r3, [pc, #564]	; (8006180 <HAL_RCC_ClockConfig+0x25c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f023 020f 	bic.w	r2, r3, #15
 8005f52:	498b      	ldr	r1, [pc, #556]	; (8006180 <HAL_RCC_ClockConfig+0x25c>)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f5a:	4b89      	ldr	r3, [pc, #548]	; (8006180 <HAL_RCC_ClockConfig+0x25c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d001      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e105      	b.n	8006178 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d010      	beq.n	8005f9a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	4b81      	ldr	r3, [pc, #516]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d908      	bls.n	8005f9a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f88:	4b7e      	ldr	r3, [pc, #504]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	497b      	ldr	r1, [pc, #492]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d079      	beq.n	800609a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d11e      	bne.n	8005fec <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fae:	4b75      	ldr	r3, [pc, #468]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e0dc      	b.n	8006178 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005fbe:	f000 fa09 	bl	80063d4 <RCC_GetSysClockFreqFromPLLSource>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4a70      	ldr	r2, [pc, #448]	; (8006188 <HAL_RCC_ClockConfig+0x264>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d946      	bls.n	8006058 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005fca:	4b6e      	ldr	r3, [pc, #440]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d140      	bne.n	8006058 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fd6:	4b6b      	ldr	r3, [pc, #428]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fde:	4a69      	ldr	r2, [pc, #420]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 8005fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005fe6:	2380      	movs	r3, #128	; 0x80
 8005fe8:	617b      	str	r3, [r7, #20]
 8005fea:	e035      	b.n	8006058 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d107      	bne.n	8006004 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ff4:	4b63      	ldr	r3, [pc, #396]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d115      	bne.n	800602c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e0b9      	b.n	8006178 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d107      	bne.n	800601c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800600c:	4b5d      	ldr	r3, [pc, #372]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d109      	bne.n	800602c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e0ad      	b.n	8006178 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800601c:	4b59      	ldr	r3, [pc, #356]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e0a5      	b.n	8006178 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800602c:	f000 f8b4 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 8006030:	4603      	mov	r3, r0
 8006032:	4a55      	ldr	r2, [pc, #340]	; (8006188 <HAL_RCC_ClockConfig+0x264>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d90f      	bls.n	8006058 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006038:	4b52      	ldr	r3, [pc, #328]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d109      	bne.n	8006058 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006044:	4b4f      	ldr	r3, [pc, #316]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800604c:	4a4d      	ldr	r2, [pc, #308]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 800604e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006052:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006054:	2380      	movs	r3, #128	; 0x80
 8006056:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006058:	4b4a      	ldr	r3, [pc, #296]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f023 0203 	bic.w	r2, r3, #3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	4947      	ldr	r1, [pc, #284]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 8006066:	4313      	orrs	r3, r2
 8006068:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800606a:	f7fd fad3 	bl	8003614 <HAL_GetTick>
 800606e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006070:	e00a      	b.n	8006088 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006072:	f7fd facf 	bl	8003614 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006080:	4293      	cmp	r3, r2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e077      	b.n	8006178 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006088:	4b3e      	ldr	r3, [pc, #248]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 020c 	and.w	r2, r3, #12
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	429a      	cmp	r2, r3
 8006098:	d1eb      	bne.n	8006072 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2b80      	cmp	r3, #128	; 0x80
 800609e:	d105      	bne.n	80060ac <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80060a0:	4b38      	ldr	r3, [pc, #224]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	4a37      	ldr	r2, [pc, #220]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 80060a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060aa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d010      	beq.n	80060da <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	4b31      	ldr	r3, [pc, #196]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d208      	bcs.n	80060da <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060c8:	4b2e      	ldr	r3, [pc, #184]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	492b      	ldr	r1, [pc, #172]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060da:	4b29      	ldr	r3, [pc, #164]	; (8006180 <HAL_RCC_ClockConfig+0x25c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d210      	bcs.n	800610a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060e8:	4b25      	ldr	r3, [pc, #148]	; (8006180 <HAL_RCC_ClockConfig+0x25c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f023 020f 	bic.w	r2, r3, #15
 80060f0:	4923      	ldr	r1, [pc, #140]	; (8006180 <HAL_RCC_ClockConfig+0x25c>)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f8:	4b21      	ldr	r3, [pc, #132]	; (8006180 <HAL_RCC_ClockConfig+0x25c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 030f 	and.w	r3, r3, #15
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	429a      	cmp	r2, r3
 8006104:	d001      	beq.n	800610a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e036      	b.n	8006178 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0304 	and.w	r3, r3, #4
 8006112:	2b00      	cmp	r3, #0
 8006114:	d008      	beq.n	8006128 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006116:	4b1b      	ldr	r3, [pc, #108]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	4918      	ldr	r1, [pc, #96]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 8006124:	4313      	orrs	r3, r2
 8006126:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0308 	and.w	r3, r3, #8
 8006130:	2b00      	cmp	r3, #0
 8006132:	d009      	beq.n	8006148 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006134:	4b13      	ldr	r3, [pc, #76]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	4910      	ldr	r1, [pc, #64]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 8006144:	4313      	orrs	r3, r2
 8006146:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006148:	f000 f826 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 800614c:	4602      	mov	r2, r0
 800614e:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <HAL_RCC_ClockConfig+0x260>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	091b      	lsrs	r3, r3, #4
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	490c      	ldr	r1, [pc, #48]	; (800618c <HAL_RCC_ClockConfig+0x268>)
 800615a:	5ccb      	ldrb	r3, [r1, r3]
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	fa22 f303 	lsr.w	r3, r2, r3
 8006164:	4a0a      	ldr	r2, [pc, #40]	; (8006190 <HAL_RCC_ClockConfig+0x26c>)
 8006166:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006168:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <HAL_RCC_ClockConfig+0x270>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4618      	mov	r0, r3
 800616e:	f7fd fa01 	bl	8003574 <HAL_InitTick>
 8006172:	4603      	mov	r3, r0
 8006174:	73fb      	strb	r3, [r7, #15]

  return status;
 8006176:	7bfb      	ldrb	r3, [r7, #15]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40022000 	.word	0x40022000
 8006184:	40021000 	.word	0x40021000
 8006188:	04c4b400 	.word	0x04c4b400
 800618c:	08010a9c 	.word	0x08010a9c
 8006190:	20000010 	.word	0x20000010
 8006194:	20000014 	.word	0x20000014

08006198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006198:	b480      	push	{r7}
 800619a:	b089      	sub	sp, #36	; 0x24
 800619c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	61fb      	str	r3, [r7, #28]
 80061a2:	2300      	movs	r3, #0
 80061a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061a6:	4b3e      	ldr	r3, [pc, #248]	; (80062a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 030c 	and.w	r3, r3, #12
 80061ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061b0:	4b3b      	ldr	r3, [pc, #236]	; (80062a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f003 0303 	and.w	r3, r3, #3
 80061b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <HAL_RCC_GetSysClockFreq+0x34>
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	2b0c      	cmp	r3, #12
 80061c4:	d121      	bne.n	800620a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d11e      	bne.n	800620a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061cc:	4b34      	ldr	r3, [pc, #208]	; (80062a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0308 	and.w	r3, r3, #8
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d107      	bne.n	80061e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80061d8:	4b31      	ldr	r3, [pc, #196]	; (80062a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061de:	0a1b      	lsrs	r3, r3, #8
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	61fb      	str	r3, [r7, #28]
 80061e6:	e005      	b.n	80061f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80061e8:	4b2d      	ldr	r3, [pc, #180]	; (80062a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	091b      	lsrs	r3, r3, #4
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80061f4:	4a2b      	ldr	r2, [pc, #172]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10d      	bne.n	8006220 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006208:	e00a      	b.n	8006220 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	2b04      	cmp	r3, #4
 800620e:	d102      	bne.n	8006216 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006210:	4b25      	ldr	r3, [pc, #148]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006212:	61bb      	str	r3, [r7, #24]
 8006214:	e004      	b.n	8006220 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	2b08      	cmp	r3, #8
 800621a:	d101      	bne.n	8006220 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800621c:	4b23      	ldr	r3, [pc, #140]	; (80062ac <HAL_RCC_GetSysClockFreq+0x114>)
 800621e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	2b0c      	cmp	r3, #12
 8006224:	d134      	bne.n	8006290 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006226:	4b1e      	ldr	r3, [pc, #120]	; (80062a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b02      	cmp	r3, #2
 8006234:	d003      	beq.n	800623e <HAL_RCC_GetSysClockFreq+0xa6>
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b03      	cmp	r3, #3
 800623a:	d003      	beq.n	8006244 <HAL_RCC_GetSysClockFreq+0xac>
 800623c:	e005      	b.n	800624a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800623e:	4b1a      	ldr	r3, [pc, #104]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006240:	617b      	str	r3, [r7, #20]
      break;
 8006242:	e005      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006244:	4b19      	ldr	r3, [pc, #100]	; (80062ac <HAL_RCC_GetSysClockFreq+0x114>)
 8006246:	617b      	str	r3, [r7, #20]
      break;
 8006248:	e002      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	617b      	str	r3, [r7, #20]
      break;
 800624e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006250:	4b13      	ldr	r3, [pc, #76]	; (80062a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	091b      	lsrs	r3, r3, #4
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	3301      	adds	r3, #1
 800625c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800625e:	4b10      	ldr	r3, [pc, #64]	; (80062a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	0a1b      	lsrs	r3, r3, #8
 8006264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	fb03 f202 	mul.w	r2, r3, r2
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	fbb2 f3f3 	udiv	r3, r2, r3
 8006274:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006276:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	0e5b      	lsrs	r3, r3, #25
 800627c:	f003 0303 	and.w	r3, r3, #3
 8006280:	3301      	adds	r3, #1
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	fbb2 f3f3 	udiv	r3, r2, r3
 800628e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006290:	69bb      	ldr	r3, [r7, #24]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3724      	adds	r7, #36	; 0x24
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40021000 	.word	0x40021000
 80062a4:	08010ab4 	.word	0x08010ab4
 80062a8:	00f42400 	.word	0x00f42400
 80062ac:	007a1200 	.word	0x007a1200

080062b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062b4:	4b03      	ldr	r3, [pc, #12]	; (80062c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80062b6:	681b      	ldr	r3, [r3, #0]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	20000010 	.word	0x20000010

080062c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062cc:	f7ff fff0 	bl	80062b0 <HAL_RCC_GetHCLKFreq>
 80062d0:	4602      	mov	r2, r0
 80062d2:	4b06      	ldr	r3, [pc, #24]	; (80062ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	0a1b      	lsrs	r3, r3, #8
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	4904      	ldr	r1, [pc, #16]	; (80062f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062de:	5ccb      	ldrb	r3, [r1, r3]
 80062e0:	f003 031f 	and.w	r3, r3, #31
 80062e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40021000 	.word	0x40021000
 80062f0:	08010aac 	.word	0x08010aac

080062f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80062f8:	f7ff ffda 	bl	80062b0 <HAL_RCC_GetHCLKFreq>
 80062fc:	4602      	mov	r2, r0
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	0adb      	lsrs	r3, r3, #11
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	4904      	ldr	r1, [pc, #16]	; (800631c <HAL_RCC_GetPCLK2Freq+0x28>)
 800630a:	5ccb      	ldrb	r3, [r1, r3]
 800630c:	f003 031f 	and.w	r3, r3, #31
 8006310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006314:	4618      	mov	r0, r3
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40021000 	.word	0x40021000
 800631c:	08010aac 	.word	0x08010aac

08006320 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006328:	2300      	movs	r3, #0
 800632a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800632c:	4b27      	ldr	r3, [pc, #156]	; (80063cc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800632e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d003      	beq.n	8006340 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006338:	f7ff f906 	bl	8005548 <HAL_PWREx_GetVoltageRange>
 800633c:	6178      	str	r0, [r7, #20]
 800633e:	e014      	b.n	800636a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006340:	4b22      	ldr	r3, [pc, #136]	; (80063cc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006344:	4a21      	ldr	r2, [pc, #132]	; (80063cc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800634a:	6593      	str	r3, [r2, #88]	; 0x58
 800634c:	4b1f      	ldr	r3, [pc, #124]	; (80063cc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006358:	f7ff f8f6 	bl	8005548 <HAL_PWREx_GetVoltageRange>
 800635c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800635e:	4b1b      	ldr	r3, [pc, #108]	; (80063cc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006362:	4a1a      	ldr	r2, [pc, #104]	; (80063cc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006368:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006370:	d10b      	bne.n	800638a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b80      	cmp	r3, #128	; 0x80
 8006376:	d913      	bls.n	80063a0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2ba0      	cmp	r3, #160	; 0xa0
 800637c:	d902      	bls.n	8006384 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800637e:	2302      	movs	r3, #2
 8006380:	613b      	str	r3, [r7, #16]
 8006382:	e00d      	b.n	80063a0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006384:	2301      	movs	r3, #1
 8006386:	613b      	str	r3, [r7, #16]
 8006388:	e00a      	b.n	80063a0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b7f      	cmp	r3, #127	; 0x7f
 800638e:	d902      	bls.n	8006396 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006390:	2302      	movs	r3, #2
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	e004      	b.n	80063a0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b70      	cmp	r3, #112	; 0x70
 800639a:	d101      	bne.n	80063a0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800639c:	2301      	movs	r3, #1
 800639e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80063a0:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f023 020f 	bic.w	r2, r3, #15
 80063a8:	4909      	ldr	r1, [pc, #36]	; (80063d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80063b0:	4b07      	ldr	r3, [pc, #28]	; (80063d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d001      	beq.n	80063c2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e000      	b.n	80063c4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	40021000 	.word	0x40021000
 80063d0:	40022000 	.word	0x40022000

080063d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80063da:	4b2d      	ldr	r3, [pc, #180]	; (8006490 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d00b      	beq.n	8006402 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b03      	cmp	r3, #3
 80063ee:	d825      	bhi.n	800643c <RCC_GetSysClockFreqFromPLLSource+0x68>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d008      	beq.n	8006408 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d11f      	bne.n	800643c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80063fc:	4b25      	ldr	r3, [pc, #148]	; (8006494 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80063fe:	613b      	str	r3, [r7, #16]
    break;
 8006400:	e01f      	b.n	8006442 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006402:	4b25      	ldr	r3, [pc, #148]	; (8006498 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006404:	613b      	str	r3, [r7, #16]
    break;
 8006406:	e01c      	b.n	8006442 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006408:	4b21      	ldr	r3, [pc, #132]	; (8006490 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0308 	and.w	r3, r3, #8
 8006410:	2b00      	cmp	r3, #0
 8006412:	d107      	bne.n	8006424 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006414:	4b1e      	ldr	r3, [pc, #120]	; (8006490 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800641a:	0a1b      	lsrs	r3, r3, #8
 800641c:	f003 030f 	and.w	r3, r3, #15
 8006420:	617b      	str	r3, [r7, #20]
 8006422:	e005      	b.n	8006430 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006424:	4b1a      	ldr	r3, [pc, #104]	; (8006490 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	091b      	lsrs	r3, r3, #4
 800642a:	f003 030f 	and.w	r3, r3, #15
 800642e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006430:	4a1a      	ldr	r2, [pc, #104]	; (800649c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006438:	613b      	str	r3, [r7, #16]
    break;
 800643a:	e002      	b.n	8006442 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800643c:	2300      	movs	r3, #0
 800643e:	613b      	str	r3, [r7, #16]
    break;
 8006440:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006442:	4b13      	ldr	r3, [pc, #76]	; (8006490 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	091b      	lsrs	r3, r3, #4
 8006448:	f003 030f 	and.w	r3, r3, #15
 800644c:	3301      	adds	r3, #1
 800644e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006450:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	0a1b      	lsrs	r3, r3, #8
 8006456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	fb03 f202 	mul.w	r2, r3, r2
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	fbb2 f3f3 	udiv	r3, r2, r3
 8006466:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006468:	4b09      	ldr	r3, [pc, #36]	; (8006490 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	0e5b      	lsrs	r3, r3, #25
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	3301      	adds	r3, #1
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006480:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006482:	683b      	ldr	r3, [r7, #0]
}
 8006484:	4618      	mov	r0, r3
 8006486:	371c      	adds	r7, #28
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	40021000 	.word	0x40021000
 8006494:	00f42400 	.word	0x00f42400
 8006498:	007a1200 	.word	0x007a1200
 800649c:	08010ab4 	.word	0x08010ab4

080064a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064a8:	2300      	movs	r3, #0
 80064aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064ac:	2300      	movs	r3, #0
 80064ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d040      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064c0:	2b80      	cmp	r3, #128	; 0x80
 80064c2:	d02a      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80064c4:	2b80      	cmp	r3, #128	; 0x80
 80064c6:	d825      	bhi.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80064c8:	2b60      	cmp	r3, #96	; 0x60
 80064ca:	d026      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80064cc:	2b60      	cmp	r3, #96	; 0x60
 80064ce:	d821      	bhi.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80064d0:	2b40      	cmp	r3, #64	; 0x40
 80064d2:	d006      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80064d4:	2b40      	cmp	r3, #64	; 0x40
 80064d6:	d81d      	bhi.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d009      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80064dc:	2b20      	cmp	r3, #32
 80064de:	d010      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80064e0:	e018      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80064e2:	4b89      	ldr	r3, [pc, #548]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	4a88      	ldr	r2, [pc, #544]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ec:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064ee:	e015      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3304      	adds	r3, #4
 80064f4:	2100      	movs	r1, #0
 80064f6:	4618      	mov	r0, r3
 80064f8:	f001 fa24 	bl	8007944 <RCCEx_PLLSAI1_Config>
 80064fc:	4603      	mov	r3, r0
 80064fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006500:	e00c      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3320      	adds	r3, #32
 8006506:	2100      	movs	r1, #0
 8006508:	4618      	mov	r0, r3
 800650a:	f001 fb0f 	bl	8007b2c <RCCEx_PLLSAI2_Config>
 800650e:	4603      	mov	r3, r0
 8006510:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006512:	e003      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	74fb      	strb	r3, [r7, #19]
      break;
 8006518:	e000      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800651a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800651c:	7cfb      	ldrb	r3, [r7, #19]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10b      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006522:	4b79      	ldr	r3, [pc, #484]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006524:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006528:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006530:	4975      	ldr	r1, [pc, #468]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006532:	4313      	orrs	r3, r2
 8006534:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006538:	e001      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653a:	7cfb      	ldrb	r3, [r7, #19]
 800653c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d047      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006552:	d030      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006558:	d82a      	bhi.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800655a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800655e:	d02a      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006564:	d824      	bhi.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800656a:	d008      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800656c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006570:	d81e      	bhi.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800657a:	d010      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800657c:	e018      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800657e:	4b62      	ldr	r3, [pc, #392]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	4a61      	ldr	r2, [pc, #388]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006588:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800658a:	e015      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3304      	adds	r3, #4
 8006590:	2100      	movs	r1, #0
 8006592:	4618      	mov	r0, r3
 8006594:	f001 f9d6 	bl	8007944 <RCCEx_PLLSAI1_Config>
 8006598:	4603      	mov	r3, r0
 800659a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800659c:	e00c      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	3320      	adds	r3, #32
 80065a2:	2100      	movs	r1, #0
 80065a4:	4618      	mov	r0, r3
 80065a6:	f001 fac1 	bl	8007b2c <RCCEx_PLLSAI2_Config>
 80065aa:	4603      	mov	r3, r0
 80065ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80065ae:	e003      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	74fb      	strb	r3, [r7, #19]
      break;
 80065b4:	e000      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80065b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065b8:	7cfb      	ldrb	r3, [r7, #19]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10b      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80065be:	4b52      	ldr	r3, [pc, #328]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065cc:	494e      	ldr	r1, [pc, #312]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80065d4:	e001      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d6:	7cfb      	ldrb	r3, [r7, #19]
 80065d8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 809f 	beq.w	8006726 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065e8:	2300      	movs	r3, #0
 80065ea:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065ec:	4b46      	ldr	r3, [pc, #280]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80065f8:	2301      	movs	r3, #1
 80065fa:	e000      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80065fc:	2300      	movs	r3, #0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00d      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006602:	4b41      	ldr	r3, [pc, #260]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006606:	4a40      	ldr	r2, [pc, #256]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800660c:	6593      	str	r3, [r2, #88]	; 0x58
 800660e:	4b3e      	ldr	r3, [pc, #248]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006616:	60bb      	str	r3, [r7, #8]
 8006618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800661a:	2301      	movs	r3, #1
 800661c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800661e:	4b3b      	ldr	r3, [pc, #236]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a3a      	ldr	r2, [pc, #232]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006628:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800662a:	f7fc fff3 	bl	8003614 <HAL_GetTick>
 800662e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006630:	e009      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006632:	f7fc ffef 	bl	8003614 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d902      	bls.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	74fb      	strb	r3, [r7, #19]
        break;
 8006644:	e005      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006646:	4b31      	ldr	r3, [pc, #196]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0ef      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006652:	7cfb      	ldrb	r3, [r7, #19]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d15b      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006658:	4b2b      	ldr	r3, [pc, #172]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800665a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006662:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d01f      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	429a      	cmp	r2, r3
 8006674:	d019      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006676:	4b24      	ldr	r3, [pc, #144]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800667c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006680:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006682:	4b21      	ldr	r3, [pc, #132]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006688:	4a1f      	ldr	r2, [pc, #124]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800668a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800668e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006692:	4b1d      	ldr	r3, [pc, #116]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006698:	4a1b      	ldr	r2, [pc, #108]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800669a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800669e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066a2:	4a19      	ldr	r2, [pc, #100]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d016      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b4:	f7fc ffae 	bl	8003614 <HAL_GetTick>
 80066b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066ba:	e00b      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066bc:	f7fc ffaa 	bl	8003614 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d902      	bls.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	74fb      	strb	r3, [r7, #19]
            break;
 80066d2:	e006      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066d4:	4b0c      	ldr	r3, [pc, #48]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0ec      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80066e2:	7cfb      	ldrb	r3, [r7, #19]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10c      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066e8:	4b07      	ldr	r3, [pc, #28]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f8:	4903      	ldr	r1, [pc, #12]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006700:	e008      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006702:	7cfb      	ldrb	r3, [r7, #19]
 8006704:	74bb      	strb	r3, [r7, #18]
 8006706:	e005      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006708:	40021000 	.word	0x40021000
 800670c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006710:	7cfb      	ldrb	r3, [r7, #19]
 8006712:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006714:	7c7b      	ldrb	r3, [r7, #17]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d105      	bne.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800671a:	4ba0      	ldr	r3, [pc, #640]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800671c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671e:	4a9f      	ldr	r2, [pc, #636]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006724:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00a      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006732:	4b9a      	ldr	r3, [pc, #616]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006738:	f023 0203 	bic.w	r2, r3, #3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006740:	4996      	ldr	r1, [pc, #600]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006742:	4313      	orrs	r3, r2
 8006744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00a      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006754:	4b91      	ldr	r3, [pc, #580]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675a:	f023 020c 	bic.w	r2, r3, #12
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	498e      	ldr	r1, [pc, #568]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006764:	4313      	orrs	r3, r2
 8006766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0304 	and.w	r3, r3, #4
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00a      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006776:	4b89      	ldr	r3, [pc, #548]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006784:	4985      	ldr	r1, [pc, #532]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006786:	4313      	orrs	r3, r2
 8006788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0308 	and.w	r3, r3, #8
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00a      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006798:	4b80      	ldr	r3, [pc, #512]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800679a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a6:	497d      	ldr	r1, [pc, #500]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0310 	and.w	r3, r3, #16
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80067ba:	4b78      	ldr	r3, [pc, #480]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c8:	4974      	ldr	r1, [pc, #464]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0320 	and.w	r3, r3, #32
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067dc:	4b6f      	ldr	r3, [pc, #444]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ea:	496c      	ldr	r1, [pc, #432]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067fe:	4b67      	ldr	r3, [pc, #412]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006804:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800680c:	4963      	ldr	r1, [pc, #396]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800680e:	4313      	orrs	r3, r2
 8006810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006820:	4b5e      	ldr	r3, [pc, #376]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006826:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800682e:	495b      	ldr	r1, [pc, #364]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006830:	4313      	orrs	r3, r2
 8006832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006842:	4b56      	ldr	r3, [pc, #344]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006848:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006850:	4952      	ldr	r1, [pc, #328]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006852:	4313      	orrs	r3, r2
 8006854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00a      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006864:	4b4d      	ldr	r3, [pc, #308]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006872:	494a      	ldr	r1, [pc, #296]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006874:	4313      	orrs	r3, r2
 8006876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006886:	4b45      	ldr	r3, [pc, #276]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006894:	4941      	ldr	r1, [pc, #260]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006896:	4313      	orrs	r3, r2
 8006898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00a      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068a8:	4b3c      	ldr	r3, [pc, #240]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068ae:	f023 0203 	bic.w	r2, r3, #3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068b6:	4939      	ldr	r1, [pc, #228]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d028      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068ca:	4b34      	ldr	r3, [pc, #208]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d8:	4930      	ldr	r1, [pc, #192]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068e8:	d106      	bne.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068ea:	4b2c      	ldr	r3, [pc, #176]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	4a2b      	ldr	r2, [pc, #172]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068f4:	60d3      	str	r3, [r2, #12]
 80068f6:	e011      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006900:	d10c      	bne.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3304      	adds	r3, #4
 8006906:	2101      	movs	r1, #1
 8006908:	4618      	mov	r0, r3
 800690a:	f001 f81b 	bl	8007944 <RCCEx_PLLSAI1_Config>
 800690e:	4603      	mov	r3, r0
 8006910:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006912:	7cfb      	ldrb	r3, [r7, #19]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006918:	7cfb      	ldrb	r3, [r7, #19]
 800691a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d04d      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800692c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006930:	d108      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006932:	4b1a      	ldr	r3, [pc, #104]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006934:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006938:	4a18      	ldr	r2, [pc, #96]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800693a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800693e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006942:	e012      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006944:	4b15      	ldr	r3, [pc, #84]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006946:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800694a:	4a14      	ldr	r2, [pc, #80]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800694c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006950:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006954:	4b11      	ldr	r3, [pc, #68]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800695a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006962:	490e      	ldr	r1, [pc, #56]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006964:	4313      	orrs	r3, r2
 8006966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800696e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006972:	d106      	bne.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006974:	4b09      	ldr	r3, [pc, #36]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	4a08      	ldr	r2, [pc, #32]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800697a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800697e:	60d3      	str	r3, [r2, #12]
 8006980:	e020      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006986:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800698a:	d109      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800698c:	4b03      	ldr	r3, [pc, #12]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	4a02      	ldr	r2, [pc, #8]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006996:	60d3      	str	r3, [r2, #12]
 8006998:	e014      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800699a:	bf00      	nop
 800699c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069a8:	d10c      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	3304      	adds	r3, #4
 80069ae:	2101      	movs	r1, #1
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 ffc7 	bl	8007944 <RCCEx_PLLSAI1_Config>
 80069b6:	4603      	mov	r3, r0
 80069b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069ba:	7cfb      	ldrb	r3, [r7, #19]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80069c0:	7cfb      	ldrb	r3, [r7, #19]
 80069c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d028      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069d0:	4b4a      	ldr	r3, [pc, #296]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069de:	4947      	ldr	r1, [pc, #284]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069ee:	d106      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069f0:	4b42      	ldr	r3, [pc, #264]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	4a41      	ldr	r2, [pc, #260]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069fa:	60d3      	str	r3, [r2, #12]
 80069fc:	e011      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a06:	d10c      	bne.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	2101      	movs	r1, #1
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 ff98 	bl	8007944 <RCCEx_PLLSAI1_Config>
 8006a14:	4603      	mov	r3, r0
 8006a16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a18:	7cfb      	ldrb	r3, [r7, #19]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006a1e:	7cfb      	ldrb	r3, [r7, #19]
 8006a20:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d01e      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a2e:	4b33      	ldr	r3, [pc, #204]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a34:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a3e:	492f      	ldr	r1, [pc, #188]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a50:	d10c      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3304      	adds	r3, #4
 8006a56:	2102      	movs	r1, #2
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 ff73 	bl	8007944 <RCCEx_PLLSAI1_Config>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a62:	7cfb      	ldrb	r3, [r7, #19]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006a68:	7cfb      	ldrb	r3, [r7, #19]
 8006a6a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00b      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a78:	4b20      	ldr	r3, [pc, #128]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a7e:	f023 0204 	bic.w	r2, r3, #4
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a88:	491c      	ldr	r1, [pc, #112]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00b      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006a9c:	4b17      	ldr	r3, [pc, #92]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006aa2:	f023 0218 	bic.w	r2, r3, #24
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aac:	4913      	ldr	r1, [pc, #76]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d017      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006ac0:	4b0e      	ldr	r3, [pc, #56]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ac6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ad0:	490a      	ldr	r1, [pc, #40]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ae2:	d105      	bne.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ae4:	4b05      	ldr	r3, [pc, #20]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	4a04      	ldr	r2, [pc, #16]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006af0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40021000 	.word	0x40021000

08006b00 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b12:	d13e      	bne.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006b14:	4bb6      	ldr	r3, [pc, #728]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b1e:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b26:	d028      	beq.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b2e:	f200 86f4 	bhi.w	800791a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b38:	d005      	beq.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b40:	d00e      	beq.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8006b42:	f000 beea 	b.w	800791a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b46:	4baa      	ldr	r3, [pc, #680]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	f040 86e4 	bne.w	800791e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8006b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b5a:	61fb      	str	r3, [r7, #28]
      break;
 8006b5c:	f000 bedf 	b.w	800791e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006b60:	4ba3      	ldr	r3, [pc, #652]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	f040 86d9 	bne.w	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8006b70:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006b74:	61fb      	str	r3, [r7, #28]
      break;
 8006b76:	f000 bed4 	b.w	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b7a:	4b9d      	ldr	r3, [pc, #628]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b86:	f040 86ce 	bne.w	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8006b8a:	4b9a      	ldr	r3, [pc, #616]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006b8c:	61fb      	str	r3, [r7, #28]
      break;
 8006b8e:	f000 beca 	b.w	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b92:	4b97      	ldr	r3, [pc, #604]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f003 0303 	and.w	r3, r3, #3
 8006b9a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	d036      	beq.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b03      	cmp	r3, #3
 8006ba6:	d840      	bhi.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d003      	beq.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d020      	beq.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006bb4:	e039      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006bb6:	4b8e      	ldr	r3, [pc, #568]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d116      	bne.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006bc2:	4b8b      	ldr	r3, [pc, #556]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0308 	and.w	r3, r3, #8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d005      	beq.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006bce:	4b88      	ldr	r3, [pc, #544]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	091b      	lsrs	r3, r3, #4
 8006bd4:	f003 030f 	and.w	r3, r3, #15
 8006bd8:	e005      	b.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006bda:	4b85      	ldr	r3, [pc, #532]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006be0:	0a1b      	lsrs	r3, r3, #8
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	4a84      	ldr	r2, [pc, #528]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006bee:	e01f      	b.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	61bb      	str	r3, [r7, #24]
      break;
 8006bf4:	e01c      	b.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bf6:	4b7e      	ldr	r3, [pc, #504]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c02:	d102      	bne.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006c04:	4b7d      	ldr	r3, [pc, #500]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006c06:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006c08:	e012      	b.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61bb      	str	r3, [r7, #24]
      break;
 8006c0e:	e00f      	b.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c10:	4b77      	ldr	r3, [pc, #476]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c1c:	d102      	bne.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8006c1e:	4b78      	ldr	r3, [pc, #480]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006c20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006c22:	e005      	b.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	61bb      	str	r3, [r7, #24]
      break;
 8006c28:	e002      	b.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	61bb      	str	r3, [r7, #24]
      break;
 8006c2e:	bf00      	nop
    }

    switch(PeriphClk)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c36:	f000 8606 	beq.w	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c40:	f200 8673 	bhi.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c4a:	f000 8469 	beq.w	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c54:	f200 8669 	bhi.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c5e:	f000 8531 	beq.w	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c68:	f200 865f 	bhi.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c72:	f000 8187 	beq.w	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c7c:	f200 8655 	bhi.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c86:	f000 80cd 	beq.w	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c90:	f200 864b 	bhi.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c9a:	f000 8430 	beq.w	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca4:	f200 8641 	bhi.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cae:	f000 83e4 	beq.w	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cb8:	f200 8637 	bhi.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cc2:	f000 80af 	beq.w	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ccc:	f200 862d 	bhi.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cd6:	f000 809d 	beq.w	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce0:	f200 8623 	bhi.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cea:	f000 808b 	beq.w	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cf4:	f200 8619 	bhi.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cfe:	f000 8554 	beq.w	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d08:	f200 860f 	bhi.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d12:	f000 8500 	beq.w	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d1c:	f200 8605 	bhi.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d26:	f000 84a1 	beq.w	800766c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d30:	f200 85fb 	bhi.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b80      	cmp	r3, #128	; 0x80
 8006d38:	f000 846c 	beq.w	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b80      	cmp	r3, #128	; 0x80
 8006d40:	f200 85f3 	bhi.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	d84c      	bhi.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 85ec 	beq.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	2b1f      	cmp	r3, #31
 8006d58:	f200 85e7 	bhi.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006d5c:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d62:	bf00      	nop
 8006d64:	08007179 	.word	0x08007179
 8006d68:	080071e7 	.word	0x080071e7
 8006d6c:	0800792b 	.word	0x0800792b
 8006d70:	0800727b 	.word	0x0800727b
 8006d74:	0800792b 	.word	0x0800792b
 8006d78:	0800792b 	.word	0x0800792b
 8006d7c:	0800792b 	.word	0x0800792b
 8006d80:	080072f3 	.word	0x080072f3
 8006d84:	0800792b 	.word	0x0800792b
 8006d88:	0800792b 	.word	0x0800792b
 8006d8c:	0800792b 	.word	0x0800792b
 8006d90:	0800792b 	.word	0x0800792b
 8006d94:	0800792b 	.word	0x0800792b
 8006d98:	0800792b 	.word	0x0800792b
 8006d9c:	0800792b 	.word	0x0800792b
 8006da0:	08007377 	.word	0x08007377
 8006da4:	0800792b 	.word	0x0800792b
 8006da8:	0800792b 	.word	0x0800792b
 8006dac:	0800792b 	.word	0x0800792b
 8006db0:	0800792b 	.word	0x0800792b
 8006db4:	0800792b 	.word	0x0800792b
 8006db8:	0800792b 	.word	0x0800792b
 8006dbc:	0800792b 	.word	0x0800792b
 8006dc0:	0800792b 	.word	0x0800792b
 8006dc4:	0800792b 	.word	0x0800792b
 8006dc8:	0800792b 	.word	0x0800792b
 8006dcc:	0800792b 	.word	0x0800792b
 8006dd0:	0800792b 	.word	0x0800792b
 8006dd4:	0800792b 	.word	0x0800792b
 8006dd8:	0800792b 	.word	0x0800792b
 8006ddc:	0800792b 	.word	0x0800792b
 8006de0:	080073f9 	.word	0x080073f9
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	f000 83e8 	beq.w	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006dec:	f000 bd9d 	b.w	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006df0:	40021000 	.word	0x40021000
 8006df4:	0003d090 	.word	0x0003d090
 8006df8:	08010ab4 	.word	0x08010ab4
 8006dfc:	00f42400 	.word	0x00f42400
 8006e00:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006e04:	69b9      	ldr	r1, [r7, #24]
 8006e06:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006e0a:	f000 ff83 	bl	8007d14 <RCCEx_GetSAIxPeriphCLKFreq>
 8006e0e:	61f8      	str	r0, [r7, #28]
      break;
 8006e10:	f000 bd8e 	b.w	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006e14:	69b9      	ldr	r1, [r7, #24]
 8006e16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006e1a:	f000 ff7b 	bl	8007d14 <RCCEx_GetSAIxPeriphCLKFreq>
 8006e1e:	61f8      	str	r0, [r7, #28]
      break;
 8006e20:	f000 bd86 	b.w	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006e24:	4b9a      	ldr	r3, [pc, #616]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e2a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006e36:	d015      	beq.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006e3e:	f200 8092 	bhi.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e48:	d029      	beq.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e50:	f200 8089 	bhi.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d07b      	beq.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e60:	d04a      	beq.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8006e62:	e080      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006e64:	4b8a      	ldr	r3, [pc, #552]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d17d      	bne.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006e70:	4b87      	ldr	r3, [pc, #540]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0308 	and.w	r3, r3, #8
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d005      	beq.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8006e7c:	4b84      	ldr	r3, [pc, #528]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	091b      	lsrs	r3, r3, #4
 8006e82:	f003 030f 	and.w	r3, r3, #15
 8006e86:	e005      	b.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8006e88:	4b81      	ldr	r3, [pc, #516]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e8e:	0a1b      	lsrs	r3, r3, #8
 8006e90:	f003 030f 	and.w	r3, r3, #15
 8006e94:	4a7f      	ldr	r2, [pc, #508]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e9a:	61fb      	str	r3, [r7, #28]
          break;
 8006e9c:	e066      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006e9e:	4b7c      	ldr	r3, [pc, #496]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ea6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006eaa:	d162      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006eac:	4b78      	ldr	r3, [pc, #480]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eb8:	d15b      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006eba:	4b75      	ldr	r3, [pc, #468]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	0a1b      	lsrs	r3, r3, #8
 8006ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ec4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	fb03 f202 	mul.w	r2, r3, r2
 8006ece:	4b70      	ldr	r3, [pc, #448]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	091b      	lsrs	r3, r3, #4
 8006ed4:	f003 030f 	and.w	r3, r3, #15
 8006ed8:	3301      	adds	r3, #1
 8006eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ede:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006ee0:	4b6b      	ldr	r3, [pc, #428]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	0d5b      	lsrs	r3, r3, #21
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	3301      	adds	r3, #1
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef4:	61fb      	str	r3, [r7, #28]
          break;
 8006ef6:	e03c      	b.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006ef8:	4b65      	ldr	r3, [pc, #404]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f04:	d138      	bne.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006f06:	4b62      	ldr	r3, [pc, #392]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f12:	d131      	bne.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006f14:	4b5e      	ldr	r3, [pc, #376]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	0a1b      	lsrs	r3, r3, #8
 8006f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f1e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	fb03 f202 	mul.w	r2, r3, r2
 8006f28:	4b59      	ldr	r3, [pc, #356]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	091b      	lsrs	r3, r3, #4
 8006f2e:	f003 030f 	and.w	r3, r3, #15
 8006f32:	3301      	adds	r3, #1
 8006f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f38:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006f3a:	4b55      	ldr	r3, [pc, #340]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	0d5b      	lsrs	r3, r3, #21
 8006f40:	f003 0303 	and.w	r3, r3, #3
 8006f44:	3301      	adds	r3, #1
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4e:	61fb      	str	r3, [r7, #28]
          break;
 8006f50:	e012      	b.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006f52:	4b4f      	ldr	r3, [pc, #316]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006f54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f58:	f003 0302 	and.w	r3, r3, #2
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d10e      	bne.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8006f60:	4b4d      	ldr	r3, [pc, #308]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006f62:	61fb      	str	r3, [r7, #28]
          break;
 8006f64:	e00b      	b.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8006f66:	bf00      	nop
 8006f68:	f000 bce2 	b.w	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f6c:	bf00      	nop
 8006f6e:	f000 bcdf 	b.w	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f72:	bf00      	nop
 8006f74:	f000 bcdc 	b.w	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f78:	bf00      	nop
 8006f7a:	f000 bcd9 	b.w	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f7e:	bf00      	nop
        break;
 8006f80:	f000 bcd6 	b.w	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8006f84:	4b42      	ldr	r3, [pc, #264]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f92:	d13d      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006f94:	4b3e      	ldr	r3, [pc, #248]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fa0:	f040 84c5 	bne.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8006fa4:	4b3a      	ldr	r3, [pc, #232]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fb0:	f040 84bd 	bne.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006fb4:	4b36      	ldr	r3, [pc, #216]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	0a1b      	lsrs	r3, r3, #8
 8006fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fbe:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	fb03 f202 	mul.w	r2, r3, r2
 8006fc8:	4b31      	ldr	r3, [pc, #196]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	091b      	lsrs	r3, r3, #4
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006fda:	4b2d      	ldr	r3, [pc, #180]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	0edb      	lsrs	r3, r3, #27
 8006fe0:	f003 031f 	and.w	r3, r3, #31
 8006fe4:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10a      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006fec:	4b28      	ldr	r3, [pc, #160]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8006ff8:	2311      	movs	r3, #17
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	e001      	b.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8006ffe:	2307      	movs	r3, #7
 8007000:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	fbb2 f3f3 	udiv	r3, r2, r3
 800700a:	61fb      	str	r3, [r7, #28]
      break;
 800700c:	f000 bc8f 	b.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007010:	4b1f      	ldr	r3, [pc, #124]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007016:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007022:	d016      	beq.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800702a:	f200 809b 	bhi.w	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007034:	d032      	beq.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800703c:	f200 8092 	bhi.w	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 8084 	beq.w	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800704e:	d052      	beq.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8007050:	e088      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007052:	4b0f      	ldr	r3, [pc, #60]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b02      	cmp	r3, #2
 800705c:	f040 8084 	bne.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007060:	4b0b      	ldr	r3, [pc, #44]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800706c:	4b08      	ldr	r3, [pc, #32]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	091b      	lsrs	r3, r3, #4
 8007072:	f003 030f 	and.w	r3, r3, #15
 8007076:	e005      	b.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8007078:	4b05      	ldr	r3, [pc, #20]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800707a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800707e:	0a1b      	lsrs	r3, r3, #8
 8007080:	f003 030f 	and.w	r3, r3, #15
 8007084:	4a03      	ldr	r2, [pc, #12]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800708a:	61fb      	str	r3, [r7, #28]
          break;
 800708c:	e06c      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800708e:	bf00      	nop
 8007090:	40021000 	.word	0x40021000
 8007094:	08010ab4 	.word	0x08010ab4
 8007098:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800709c:	4ba5      	ldr	r3, [pc, #660]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070a8:	d160      	bne.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80070aa:	4ba2      	ldr	r3, [pc, #648]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070b6:	d159      	bne.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80070b8:	4b9e      	ldr	r3, [pc, #632]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	0a1b      	lsrs	r3, r3, #8
 80070be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070c2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	fb03 f202 	mul.w	r2, r3, r2
 80070cc:	4b99      	ldr	r3, [pc, #612]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	091b      	lsrs	r3, r3, #4
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	3301      	adds	r3, #1
 80070d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070dc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80070de:	4b95      	ldr	r3, [pc, #596]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	0d5b      	lsrs	r3, r3, #21
 80070e4:	f003 0303 	and.w	r3, r3, #3
 80070e8:	3301      	adds	r3, #1
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f2:	61fb      	str	r3, [r7, #28]
          break;
 80070f4:	e03a      	b.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80070f6:	4b8f      	ldr	r3, [pc, #572]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007102:	d135      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007104:	4b8b      	ldr	r3, [pc, #556]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800710c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007110:	d12e      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007112:	4b88      	ldr	r3, [pc, #544]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	0a1b      	lsrs	r3, r3, #8
 8007118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800711c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	fb03 f202 	mul.w	r2, r3, r2
 8007126:	4b83      	ldr	r3, [pc, #524]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	091b      	lsrs	r3, r3, #4
 800712c:	f003 030f 	and.w	r3, r3, #15
 8007130:	3301      	adds	r3, #1
 8007132:	fbb2 f3f3 	udiv	r3, r2, r3
 8007136:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007138:	4b7e      	ldr	r3, [pc, #504]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	0d5b      	lsrs	r3, r3, #21
 800713e:	f003 0303 	and.w	r3, r3, #3
 8007142:	3301      	adds	r3, #1
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	fbb2 f3f3 	udiv	r3, r2, r3
 800714c:	61fb      	str	r3, [r7, #28]
          break;
 800714e:	e00f      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007150:	4b78      	ldr	r3, [pc, #480]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b02      	cmp	r3, #2
 800715c:	d10a      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800715e:	4b76      	ldr	r3, [pc, #472]	; (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007160:	61fb      	str	r3, [r7, #28]
          break;
 8007162:	e007      	b.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8007164:	bf00      	nop
 8007166:	e3e2      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007168:	bf00      	nop
 800716a:	e3e0      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800716c:	bf00      	nop
 800716e:	e3de      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007170:	bf00      	nop
 8007172:	e3dc      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007174:	bf00      	nop
      break;
 8007176:	e3da      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007178:	4b6e      	ldr	r3, [pc, #440]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800717a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800717e:	f003 0303 	and.w	r3, r3, #3
 8007182:	60fb      	str	r3, [r7, #12]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2b03      	cmp	r3, #3
 8007188:	d827      	bhi.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800718a:	a201      	add	r2, pc, #4	; (adr r2, 8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800718c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007190:	080071a1 	.word	0x080071a1
 8007194:	080071a9 	.word	0x080071a9
 8007198:	080071b1 	.word	0x080071b1
 800719c:	080071c5 	.word	0x080071c5
          frequency = HAL_RCC_GetPCLK2Freq();
 80071a0:	f7ff f8a8 	bl	80062f4 <HAL_RCC_GetPCLK2Freq>
 80071a4:	61f8      	str	r0, [r7, #28]
          break;
 80071a6:	e01d      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80071a8:	f7fe fff6 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 80071ac:	61f8      	str	r0, [r7, #28]
          break;
 80071ae:	e019      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071b0:	4b60      	ldr	r3, [pc, #384]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071bc:	d10f      	bne.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 80071be:	4b5f      	ldr	r3, [pc, #380]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80071c0:	61fb      	str	r3, [r7, #28]
          break;
 80071c2:	e00c      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80071c4:	4b5b      	ldr	r3, [pc, #364]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d107      	bne.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 80071d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071d6:	61fb      	str	r3, [r7, #28]
          break;
 80071d8:	e003      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80071da:	bf00      	nop
 80071dc:	e3a8      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80071de:	bf00      	nop
 80071e0:	e3a6      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80071e2:	bf00      	nop
        break;
 80071e4:	e3a4      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80071e6:	4b53      	ldr	r3, [pc, #332]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ec:	f003 030c 	and.w	r3, r3, #12
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b0c      	cmp	r3, #12
 80071f6:	d83a      	bhi.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80071f8:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 80071fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fe:	bf00      	nop
 8007200:	08007235 	.word	0x08007235
 8007204:	0800726f 	.word	0x0800726f
 8007208:	0800726f 	.word	0x0800726f
 800720c:	0800726f 	.word	0x0800726f
 8007210:	0800723d 	.word	0x0800723d
 8007214:	0800726f 	.word	0x0800726f
 8007218:	0800726f 	.word	0x0800726f
 800721c:	0800726f 	.word	0x0800726f
 8007220:	08007245 	.word	0x08007245
 8007224:	0800726f 	.word	0x0800726f
 8007228:	0800726f 	.word	0x0800726f
 800722c:	0800726f 	.word	0x0800726f
 8007230:	08007259 	.word	0x08007259
          frequency = HAL_RCC_GetPCLK1Freq();
 8007234:	f7ff f848 	bl	80062c8 <HAL_RCC_GetPCLK1Freq>
 8007238:	61f8      	str	r0, [r7, #28]
          break;
 800723a:	e01d      	b.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800723c:	f7fe ffac 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 8007240:	61f8      	str	r0, [r7, #28]
          break;
 8007242:	e019      	b.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007244:	4b3b      	ldr	r3, [pc, #236]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800724c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007250:	d10f      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8007252:	4b3a      	ldr	r3, [pc, #232]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007254:	61fb      	str	r3, [r7, #28]
          break;
 8007256:	e00c      	b.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007258:	4b36      	ldr	r3, [pc, #216]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800725a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b02      	cmp	r3, #2
 8007264:	d107      	bne.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8007266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800726a:	61fb      	str	r3, [r7, #28]
          break;
 800726c:	e003      	b.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800726e:	bf00      	nop
 8007270:	e35e      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007272:	bf00      	nop
 8007274:	e35c      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007276:	bf00      	nop
        break;
 8007278:	e35a      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800727a:	4b2e      	ldr	r3, [pc, #184]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800727c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007280:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2b30      	cmp	r3, #48	; 0x30
 800728a:	d021      	beq.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b30      	cmp	r3, #48	; 0x30
 8007290:	d829      	bhi.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b20      	cmp	r3, #32
 8007296:	d011      	beq.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b20      	cmp	r3, #32
 800729c:	d823      	bhi.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d003      	beq.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b10      	cmp	r3, #16
 80072a8:	d004      	beq.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 80072aa:	e01c      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80072ac:	f7ff f80c 	bl	80062c8 <HAL_RCC_GetPCLK1Freq>
 80072b0:	61f8      	str	r0, [r7, #28]
          break;
 80072b2:	e01d      	b.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80072b4:	f7fe ff70 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 80072b8:	61f8      	str	r0, [r7, #28]
          break;
 80072ba:	e019      	b.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072bc:	4b1d      	ldr	r3, [pc, #116]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072c8:	d10f      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 80072ca:	4b1c      	ldr	r3, [pc, #112]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80072cc:	61fb      	str	r3, [r7, #28]
          break;
 80072ce:	e00c      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80072d0:	4b18      	ldr	r3, [pc, #96]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d107      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 80072de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072e2:	61fb      	str	r3, [r7, #28]
          break;
 80072e4:	e003      	b.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80072e6:	bf00      	nop
 80072e8:	e322      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80072ea:	bf00      	nop
 80072ec:	e320      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80072ee:	bf00      	nop
        break;
 80072f0:	e31e      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80072f2:	4b10      	ldr	r3, [pc, #64]	; (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2bc0      	cmp	r3, #192	; 0xc0
 8007302:	d027      	beq.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2bc0      	cmp	r3, #192	; 0xc0
 8007308:	d82f      	bhi.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2b80      	cmp	r3, #128	; 0x80
 800730e:	d017      	beq.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b80      	cmp	r3, #128	; 0x80
 8007314:	d829      	bhi.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2b40      	cmp	r3, #64	; 0x40
 8007320:	d004      	beq.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8007322:	e022      	b.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007324:	f7fe ffd0 	bl	80062c8 <HAL_RCC_GetPCLK1Freq>
 8007328:	61f8      	str	r0, [r7, #28]
          break;
 800732a:	e023      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 800732c:	f7fe ff34 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 8007330:	61f8      	str	r0, [r7, #28]
          break;
 8007332:	e01f      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8007334:	40021000 	.word	0x40021000
 8007338:	02dc6c00 	.word	0x02dc6c00
 800733c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007340:	4b9b      	ldr	r3, [pc, #620]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800734c:	d10f      	bne.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800734e:	4b99      	ldr	r3, [pc, #612]	; (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007350:	61fb      	str	r3, [r7, #28]
          break;
 8007352:	e00c      	b.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007354:	4b96      	ldr	r3, [pc, #600]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735a:	f003 0302 	and.w	r3, r3, #2
 800735e:	2b02      	cmp	r3, #2
 8007360:	d107      	bne.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8007362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007366:	61fb      	str	r3, [r7, #28]
          break;
 8007368:	e003      	b.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800736a:	bf00      	nop
 800736c:	e2e0      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800736e:	bf00      	nop
 8007370:	e2de      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007372:	bf00      	nop
        break;
 8007374:	e2dc      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007376:	4b8e      	ldr	r3, [pc, #568]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800737c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007380:	60fb      	str	r3, [r7, #12]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007388:	d025      	beq.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007390:	d82c      	bhi.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007398:	d013      	beq.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073a0:	d824      	bhi.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d004      	beq.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ae:	d004      	beq.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 80073b0:	e01c      	b.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80073b2:	f7fe ff89 	bl	80062c8 <HAL_RCC_GetPCLK1Freq>
 80073b6:	61f8      	str	r0, [r7, #28]
          break;
 80073b8:	e01d      	b.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80073ba:	f7fe feed 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 80073be:	61f8      	str	r0, [r7, #28]
          break;
 80073c0:	e019      	b.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073c2:	4b7b      	ldr	r3, [pc, #492]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ce:	d10f      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 80073d0:	4b78      	ldr	r3, [pc, #480]	; (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80073d2:	61fb      	str	r3, [r7, #28]
          break;
 80073d4:	e00c      	b.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80073d6:	4b76      	ldr	r3, [pc, #472]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80073d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d107      	bne.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 80073e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073e8:	61fb      	str	r3, [r7, #28]
          break;
 80073ea:	e003      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 80073ec:	bf00      	nop
 80073ee:	e29f      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80073f0:	bf00      	nop
 80073f2:	e29d      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80073f4:	bf00      	nop
        break;
 80073f6:	e29b      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80073f8:	4b6d      	ldr	r3, [pc, #436]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80073fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800740a:	d025      	beq.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007412:	d82c      	bhi.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800741a:	d013      	beq.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007422:	d824      	bhi.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d004      	beq.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007430:	d004      	beq.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8007432:	e01c      	b.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007434:	f7fe ff48 	bl	80062c8 <HAL_RCC_GetPCLK1Freq>
 8007438:	61f8      	str	r0, [r7, #28]
          break;
 800743a:	e01d      	b.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800743c:	f7fe feac 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 8007440:	61f8      	str	r0, [r7, #28]
          break;
 8007442:	e019      	b.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007444:	4b5a      	ldr	r3, [pc, #360]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800744c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007450:	d10f      	bne.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8007452:	4b58      	ldr	r3, [pc, #352]	; (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007454:	61fb      	str	r3, [r7, #28]
          break;
 8007456:	e00c      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007458:	4b55      	ldr	r3, [pc, #340]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800745a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b02      	cmp	r3, #2
 8007464:	d107      	bne.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8007466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800746a:	61fb      	str	r3, [r7, #28]
          break;
 800746c:	e003      	b.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800746e:	bf00      	nop
 8007470:	e25e      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007472:	bf00      	nop
 8007474:	e25c      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007476:	bf00      	nop
        break;
 8007478:	e25a      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800747a:	4b4d      	ldr	r3, [pc, #308]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800747c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007480:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007484:	60fb      	str	r3, [r7, #12]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800748c:	d007      	beq.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007494:	d12f      	bne.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8007496:	f7fe fe7f 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 800749a:	61f8      	str	r0, [r7, #28]
          break;
 800749c:	e02e      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800749e:	4b44      	ldr	r3, [pc, #272]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074aa:	d126      	bne.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80074ac:	4b40      	ldr	r3, [pc, #256]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d020      	beq.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80074b8:	4b3d      	ldr	r3, [pc, #244]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	0a1b      	lsrs	r3, r3, #8
 80074be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074c2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	fb03 f202 	mul.w	r2, r3, r2
 80074cc:	4b38      	ldr	r3, [pc, #224]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	091b      	lsrs	r3, r3, #4
 80074d2:	f003 030f 	and.w	r3, r3, #15
 80074d6:	3301      	adds	r3, #1
 80074d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074dc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80074de:	4b34      	ldr	r3, [pc, #208]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	0e5b      	lsrs	r3, r3, #25
 80074e4:	f003 0303 	and.w	r3, r3, #3
 80074e8:	3301      	adds	r3, #1
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f2:	61fb      	str	r3, [r7, #28]
          break;
 80074f4:	e001      	b.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 80074f6:	bf00      	nop
 80074f8:	e21a      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80074fa:	bf00      	nop
        break;
 80074fc:	e218      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80074fe:	4b2c      	ldr	r3, [pc, #176]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007500:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d103      	bne.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8007510:	f7fe fef0 	bl	80062f4 <HAL_RCC_GetPCLK2Freq>
 8007514:	61f8      	str	r0, [r7, #28]
        break;
 8007516:	e20b      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8007518:	f7fe fe3e 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 800751c:	61f8      	str	r0, [r7, #28]
        break;
 800751e:	e207      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8007520:	4b23      	ldr	r3, [pc, #140]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007526:	f003 0318 	and.w	r3, r3, #24
 800752a:	60fb      	str	r3, [r7, #12]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b10      	cmp	r3, #16
 8007530:	d010      	beq.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b10      	cmp	r3, #16
 8007536:	d834      	bhi.n	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d003      	beq.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2b08      	cmp	r3, #8
 8007542:	d024      	beq.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8007544:	e02d      	b.n	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007546:	69b9      	ldr	r1, [r7, #24]
 8007548:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800754c:	f000 fbe2 	bl	8007d14 <RCCEx_GetSAIxPeriphCLKFreq>
 8007550:	61f8      	str	r0, [r7, #28]
          break;
 8007552:	e02b      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007554:	4b16      	ldr	r3, [pc, #88]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0302 	and.w	r3, r3, #2
 800755c:	2b02      	cmp	r3, #2
 800755e:	d122      	bne.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007560:	4b13      	ldr	r3, [pc, #76]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0308 	and.w	r3, r3, #8
 8007568:	2b00      	cmp	r3, #0
 800756a:	d005      	beq.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800756c:	4b10      	ldr	r3, [pc, #64]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	091b      	lsrs	r3, r3, #4
 8007572:	f003 030f 	and.w	r3, r3, #15
 8007576:	e005      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8007578:	4b0d      	ldr	r3, [pc, #52]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800757a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800757e:	0a1b      	lsrs	r3, r3, #8
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	4a0c      	ldr	r2, [pc, #48]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800758a:	61fb      	str	r3, [r7, #28]
          break;
 800758c:	e00b      	b.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800758e:	4b08      	ldr	r3, [pc, #32]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800759a:	d106      	bne.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800759c:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800759e:	61fb      	str	r3, [r7, #28]
          break;
 80075a0:	e003      	b.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 80075a2:	bf00      	nop
 80075a4:	e1c4      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80075a6:	bf00      	nop
 80075a8:	e1c2      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80075aa:	bf00      	nop
        break;
 80075ac:	e1c0      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80075ae:	bf00      	nop
 80075b0:	40021000 	.word	0x40021000
 80075b4:	00f42400 	.word	0x00f42400
 80075b8:	08010ab4 	.word	0x08010ab4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80075bc:	4b96      	ldr	r3, [pc, #600]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80075be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ce:	d013      	beq.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075d6:	d819      	bhi.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d004      	beq.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e4:	d004      	beq.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 80075e6:	e011      	b.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80075e8:	f7fe fe6e 	bl	80062c8 <HAL_RCC_GetPCLK1Freq>
 80075ec:	61f8      	str	r0, [r7, #28]
          break;
 80075ee:	e010      	b.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 80075f0:	f7fe fdd2 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 80075f4:	61f8      	str	r0, [r7, #28]
          break;
 80075f6:	e00c      	b.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075f8:	4b87      	ldr	r3, [pc, #540]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007604:	d104      	bne.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8007606:	4b85      	ldr	r3, [pc, #532]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007608:	61fb      	str	r3, [r7, #28]
          break;
 800760a:	e001      	b.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 800760c:	bf00      	nop
 800760e:	e18f      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007610:	bf00      	nop
        break;
 8007612:	e18d      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007614:	4b80      	ldr	r3, [pc, #512]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800761a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800761e:	60fb      	str	r3, [r7, #12]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007626:	d013      	beq.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800762e:	d819      	bhi.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d004      	beq.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800763c:	d004      	beq.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800763e:	e011      	b.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007640:	f7fe fe42 	bl	80062c8 <HAL_RCC_GetPCLK1Freq>
 8007644:	61f8      	str	r0, [r7, #28]
          break;
 8007646:	e010      	b.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8007648:	f7fe fda6 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 800764c:	61f8      	str	r0, [r7, #28]
          break;
 800764e:	e00c      	b.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007650:	4b71      	ldr	r3, [pc, #452]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800765c:	d104      	bne.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800765e:	4b6f      	ldr	r3, [pc, #444]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007660:	61fb      	str	r3, [r7, #28]
          break;
 8007662:	e001      	b.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8007664:	bf00      	nop
 8007666:	e163      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007668:	bf00      	nop
        break;
 800766a:	e161      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800766c:	4b6a      	ldr	r3, [pc, #424]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800766e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007672:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800767e:	d013      	beq.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007686:	d819      	bhi.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d004      	beq.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007694:	d004      	beq.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8007696:	e011      	b.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007698:	f7fe fe16 	bl	80062c8 <HAL_RCC_GetPCLK1Freq>
 800769c:	61f8      	str	r0, [r7, #28]
          break;
 800769e:	e010      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 80076a0:	f7fe fd7a 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 80076a4:	61f8      	str	r0, [r7, #28]
          break;
 80076a6:	e00c      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076a8:	4b5b      	ldr	r3, [pc, #364]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076b4:	d104      	bne.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 80076b6:	4b59      	ldr	r3, [pc, #356]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80076b8:	61fb      	str	r3, [r7, #28]
          break;
 80076ba:	e001      	b.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 80076bc:	bf00      	nop
 80076be:	e137      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80076c0:	bf00      	nop
        break;
 80076c2:	e135      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80076c4:	4b54      	ldr	r3, [pc, #336]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80076c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076ca:	f003 0303 	and.w	r3, r3, #3
 80076ce:	60fb      	str	r3, [r7, #12]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d011      	beq.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d818      	bhi.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d004      	beq.n	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 80076e8:	e011      	b.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80076ea:	f7fe fded 	bl	80062c8 <HAL_RCC_GetPCLK1Freq>
 80076ee:	61f8      	str	r0, [r7, #28]
          break;
 80076f0:	e010      	b.n	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 80076f2:	f7fe fd51 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 80076f6:	61f8      	str	r0, [r7, #28]
          break;
 80076f8:	e00c      	b.n	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076fa:	4b47      	ldr	r3, [pc, #284]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007706:	d104      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8007708:	4b44      	ldr	r3, [pc, #272]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800770a:	61fb      	str	r3, [r7, #28]
          break;
 800770c:	e001      	b.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800770e:	bf00      	nop
 8007710:	e10e      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007712:	bf00      	nop
        break;
 8007714:	e10c      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007716:	4b40      	ldr	r3, [pc, #256]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007720:	60fb      	str	r3, [r7, #12]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007728:	d02c      	beq.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007730:	d833      	bhi.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007738:	d01a      	beq.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007740:	d82b      	bhi.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d004      	beq.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800774e:	d004      	beq.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8007750:	e023      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007752:	f7fe fdb9 	bl	80062c8 <HAL_RCC_GetPCLK1Freq>
 8007756:	61f8      	str	r0, [r7, #28]
          break;
 8007758:	e026      	b.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800775a:	4b2f      	ldr	r3, [pc, #188]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800775c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b02      	cmp	r3, #2
 8007766:	d11a      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8007768:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800776c:	61fb      	str	r3, [r7, #28]
          break;
 800776e:	e016      	b.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007770:	4b29      	ldr	r3, [pc, #164]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800777c:	d111      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800777e:	4b27      	ldr	r3, [pc, #156]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007780:	61fb      	str	r3, [r7, #28]
          break;
 8007782:	e00e      	b.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007784:	4b24      	ldr	r3, [pc, #144]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b02      	cmp	r3, #2
 8007790:	d109      	bne.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8007792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007796:	61fb      	str	r3, [r7, #28]
          break;
 8007798:	e005      	b.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800779a:	bf00      	nop
 800779c:	e0c8      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800779e:	bf00      	nop
 80077a0:	e0c6      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80077a2:	bf00      	nop
 80077a4:	e0c4      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80077a6:	bf00      	nop
        break;
 80077a8:	e0c2      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80077aa:	4b1b      	ldr	r3, [pc, #108]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80077ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077bc:	d030      	beq.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077c4:	d837      	bhi.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077cc:	d01a      	beq.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077d4:	d82f      	bhi.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d004      	beq.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077e2:	d004      	beq.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 80077e4:	e027      	b.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 80077e6:	f7fe fd6f 	bl	80062c8 <HAL_RCC_GetPCLK1Freq>
 80077ea:	61f8      	str	r0, [r7, #28]
          break;
 80077ec:	e02a      	b.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80077ee:	4b0a      	ldr	r3, [pc, #40]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80077f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077f4:	f003 0302 	and.w	r3, r3, #2
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d11e      	bne.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 80077fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007800:	61fb      	str	r3, [r7, #28]
          break;
 8007802:	e01a      	b.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007804:	4b04      	ldr	r3, [pc, #16]	; (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800780c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007810:	d115      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8007812:	4b02      	ldr	r3, [pc, #8]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007814:	61fb      	str	r3, [r7, #28]
          break;
 8007816:	e012      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007818:	40021000 	.word	0x40021000
 800781c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007820:	4b46      	ldr	r3, [pc, #280]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b02      	cmp	r3, #2
 800782c:	d109      	bne.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800782e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007832:	61fb      	str	r3, [r7, #28]
          break;
 8007834:	e005      	b.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8007836:	bf00      	nop
 8007838:	e07a      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800783a:	bf00      	nop
 800783c:	e078      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800783e:	bf00      	nop
 8007840:	e076      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007842:	bf00      	nop
        break;
 8007844:	e074      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007846:	4b3d      	ldr	r3, [pc, #244]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007848:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800784c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007850:	60fb      	str	r3, [r7, #12]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007858:	d02c      	beq.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007860:	d855      	bhi.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d004      	beq.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800786e:	d004      	beq.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8007870:	e04d      	b.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8007872:	f7fe fc91 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 8007876:	61f8      	str	r0, [r7, #28]
          break;
 8007878:	e04e      	b.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800787a:	4b30      	ldr	r3, [pc, #192]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b02      	cmp	r3, #2
 8007884:	d145      	bne.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007886:	4b2d      	ldr	r3, [pc, #180]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0308 	and.w	r3, r3, #8
 800788e:	2b00      	cmp	r3, #0
 8007890:	d005      	beq.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8007892:	4b2a      	ldr	r3, [pc, #168]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	091b      	lsrs	r3, r3, #4
 8007898:	f003 030f 	and.w	r3, r3, #15
 800789c:	e005      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800789e:	4b27      	ldr	r3, [pc, #156]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80078a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078a4:	0a1b      	lsrs	r3, r3, #8
 80078a6:	f003 030f 	and.w	r3, r3, #15
 80078aa:	4a25      	ldr	r2, [pc, #148]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80078ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078b0:	61fb      	str	r3, [r7, #28]
          break;
 80078b2:	e02e      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80078b4:	4b21      	ldr	r3, [pc, #132]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078c0:	d129      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80078c2:	4b1e      	ldr	r3, [pc, #120]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078ce:	d122      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80078d0:	4b1a      	ldr	r3, [pc, #104]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	0a1b      	lsrs	r3, r3, #8
 80078d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078da:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	fb03 f202 	mul.w	r2, r3, r2
 80078e4:	4b15      	ldr	r3, [pc, #84]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	091b      	lsrs	r3, r3, #4
 80078ea:	f003 030f 	and.w	r3, r3, #15
 80078ee:	3301      	adds	r3, #1
 80078f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80078f6:	4b11      	ldr	r3, [pc, #68]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	0d5b      	lsrs	r3, r3, #21
 80078fc:	f003 0303 	and.w	r3, r3, #3
 8007900:	3301      	adds	r3, #1
 8007902:	005b      	lsls	r3, r3, #1
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	fbb2 f3f3 	udiv	r3, r2, r3
 800790a:	61fb      	str	r3, [r7, #28]
          break;
 800790c:	e003      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800790e:	bf00      	nop
 8007910:	e00e      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007912:	bf00      	nop
 8007914:	e00c      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007916:	bf00      	nop
        break;
 8007918:	e00a      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800791a:	bf00      	nop
 800791c:	e008      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800791e:	bf00      	nop
 8007920:	e006      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007922:	bf00      	nop
 8007924:	e004      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007926:	bf00      	nop
 8007928:	e002      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800792a:	bf00      	nop
 800792c:	e000      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800792e:	bf00      	nop
    }
  }

  return(frequency);
 8007930:	69fb      	ldr	r3, [r7, #28]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3720      	adds	r7, #32
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	40021000 	.word	0x40021000
 8007940:	08010ab4 	.word	0x08010ab4

08007944 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007952:	4b72      	ldr	r3, [pc, #456]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	f003 0303 	and.w	r3, r3, #3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00e      	beq.n	800797c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800795e:	4b6f      	ldr	r3, [pc, #444]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f003 0203 	and.w	r2, r3, #3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d103      	bne.n	8007976 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
       ||
 8007972:	2b00      	cmp	r3, #0
 8007974:	d142      	bne.n	80079fc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	73fb      	strb	r3, [r7, #15]
 800797a:	e03f      	b.n	80079fc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b03      	cmp	r3, #3
 8007982:	d018      	beq.n	80079b6 <RCCEx_PLLSAI1_Config+0x72>
 8007984:	2b03      	cmp	r3, #3
 8007986:	d825      	bhi.n	80079d4 <RCCEx_PLLSAI1_Config+0x90>
 8007988:	2b01      	cmp	r3, #1
 800798a:	d002      	beq.n	8007992 <RCCEx_PLLSAI1_Config+0x4e>
 800798c:	2b02      	cmp	r3, #2
 800798e:	d009      	beq.n	80079a4 <RCCEx_PLLSAI1_Config+0x60>
 8007990:	e020      	b.n	80079d4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007992:	4b62      	ldr	r3, [pc, #392]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d11d      	bne.n	80079da <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079a2:	e01a      	b.n	80079da <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80079a4:	4b5d      	ldr	r3, [pc, #372]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d116      	bne.n	80079de <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079b4:	e013      	b.n	80079de <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80079b6:	4b59      	ldr	r3, [pc, #356]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10f      	bne.n	80079e2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80079c2:	4b56      	ldr	r3, [pc, #344]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d109      	bne.n	80079e2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079d2:	e006      	b.n	80079e2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	73fb      	strb	r3, [r7, #15]
      break;
 80079d8:	e004      	b.n	80079e4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80079da:	bf00      	nop
 80079dc:	e002      	b.n	80079e4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80079de:	bf00      	nop
 80079e0:	e000      	b.n	80079e4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80079e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d108      	bne.n	80079fc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80079ea:	4b4c      	ldr	r3, [pc, #304]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	f023 0203 	bic.w	r2, r3, #3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4949      	ldr	r1, [pc, #292]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f040 8086 	bne.w	8007b10 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007a04:	4b45      	ldr	r3, [pc, #276]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a44      	ldr	r2, [pc, #272]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a10:	f7fb fe00 	bl	8003614 <HAL_GetTick>
 8007a14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007a16:	e009      	b.n	8007a2c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a18:	f7fb fdfc 	bl	8003614 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d902      	bls.n	8007a2c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	73fb      	strb	r3, [r7, #15]
        break;
 8007a2a:	e005      	b.n	8007a38 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007a2c:	4b3b      	ldr	r3, [pc, #236]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1ef      	bne.n	8007a18 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d168      	bne.n	8007b10 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d113      	bne.n	8007a6c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a44:	4b35      	ldr	r3, [pc, #212]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a46:	691a      	ldr	r2, [r3, #16]
 8007a48:	4b35      	ldr	r3, [pc, #212]	; (8007b20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6892      	ldr	r2, [r2, #8]
 8007a50:	0211      	lsls	r1, r2, #8
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	68d2      	ldr	r2, [r2, #12]
 8007a56:	06d2      	lsls	r2, r2, #27
 8007a58:	4311      	orrs	r1, r2
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	6852      	ldr	r2, [r2, #4]
 8007a5e:	3a01      	subs	r2, #1
 8007a60:	0112      	lsls	r2, r2, #4
 8007a62:	430a      	orrs	r2, r1
 8007a64:	492d      	ldr	r1, [pc, #180]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	610b      	str	r3, [r1, #16]
 8007a6a:	e02d      	b.n	8007ac8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d115      	bne.n	8007a9e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a72:	4b2a      	ldr	r3, [pc, #168]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a74:	691a      	ldr	r2, [r3, #16]
 8007a76:	4b2b      	ldr	r3, [pc, #172]	; (8007b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a78:	4013      	ands	r3, r2
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	6892      	ldr	r2, [r2, #8]
 8007a7e:	0211      	lsls	r1, r2, #8
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	6912      	ldr	r2, [r2, #16]
 8007a84:	0852      	lsrs	r2, r2, #1
 8007a86:	3a01      	subs	r2, #1
 8007a88:	0552      	lsls	r2, r2, #21
 8007a8a:	4311      	orrs	r1, r2
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	6852      	ldr	r2, [r2, #4]
 8007a90:	3a01      	subs	r2, #1
 8007a92:	0112      	lsls	r2, r2, #4
 8007a94:	430a      	orrs	r2, r1
 8007a96:	4921      	ldr	r1, [pc, #132]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	610b      	str	r3, [r1, #16]
 8007a9c:	e014      	b.n	8007ac8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a9e:	4b1f      	ldr	r3, [pc, #124]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007aa0:	691a      	ldr	r2, [r3, #16]
 8007aa2:	4b21      	ldr	r3, [pc, #132]	; (8007b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	6892      	ldr	r2, [r2, #8]
 8007aaa:	0211      	lsls	r1, r2, #8
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	6952      	ldr	r2, [r2, #20]
 8007ab0:	0852      	lsrs	r2, r2, #1
 8007ab2:	3a01      	subs	r2, #1
 8007ab4:	0652      	lsls	r2, r2, #25
 8007ab6:	4311      	orrs	r1, r2
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	6852      	ldr	r2, [r2, #4]
 8007abc:	3a01      	subs	r2, #1
 8007abe:	0112      	lsls	r2, r2, #4
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	4916      	ldr	r1, [pc, #88]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007ac8:	4b14      	ldr	r3, [pc, #80]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a13      	ldr	r2, [pc, #76]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ace:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ad2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ad4:	f7fb fd9e 	bl	8003614 <HAL_GetTick>
 8007ad8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007ada:	e009      	b.n	8007af0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007adc:	f7fb fd9a 	bl	8003614 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d902      	bls.n	8007af0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	73fb      	strb	r3, [r7, #15]
          break;
 8007aee:	e005      	b.n	8007afc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007af0:	4b0a      	ldr	r3, [pc, #40]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0ef      	beq.n	8007adc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d106      	bne.n	8007b10 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007b02:	4b06      	ldr	r3, [pc, #24]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b04:	691a      	ldr	r2, [r3, #16]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	4904      	ldr	r1, [pc, #16]	; (8007b1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	40021000 	.word	0x40021000
 8007b20:	07ff800f 	.word	0x07ff800f
 8007b24:	ff9f800f 	.word	0xff9f800f
 8007b28:	f9ff800f 	.word	0xf9ff800f

08007b2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007b3a:	4b72      	ldr	r3, [pc, #456]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00e      	beq.n	8007b64 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007b46:	4b6f      	ldr	r3, [pc, #444]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f003 0203 	and.w	r2, r3, #3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d103      	bne.n	8007b5e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
       ||
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d142      	bne.n	8007be4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	73fb      	strb	r3, [r7, #15]
 8007b62:	e03f      	b.n	8007be4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b03      	cmp	r3, #3
 8007b6a:	d018      	beq.n	8007b9e <RCCEx_PLLSAI2_Config+0x72>
 8007b6c:	2b03      	cmp	r3, #3
 8007b6e:	d825      	bhi.n	8007bbc <RCCEx_PLLSAI2_Config+0x90>
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d002      	beq.n	8007b7a <RCCEx_PLLSAI2_Config+0x4e>
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d009      	beq.n	8007b8c <RCCEx_PLLSAI2_Config+0x60>
 8007b78:	e020      	b.n	8007bbc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007b7a:	4b62      	ldr	r3, [pc, #392]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d11d      	bne.n	8007bc2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b8a:	e01a      	b.n	8007bc2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007b8c:	4b5d      	ldr	r3, [pc, #372]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d116      	bne.n	8007bc6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b9c:	e013      	b.n	8007bc6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007b9e:	4b59      	ldr	r3, [pc, #356]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10f      	bne.n	8007bca <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007baa:	4b56      	ldr	r3, [pc, #344]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d109      	bne.n	8007bca <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007bba:	e006      	b.n	8007bca <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc0:	e004      	b.n	8007bcc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007bc2:	bf00      	nop
 8007bc4:	e002      	b.n	8007bcc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007bc6:	bf00      	nop
 8007bc8:	e000      	b.n	8007bcc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007bca:	bf00      	nop
    }

    if(status == HAL_OK)
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d108      	bne.n	8007be4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007bd2:	4b4c      	ldr	r3, [pc, #304]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	f023 0203 	bic.w	r2, r3, #3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4949      	ldr	r1, [pc, #292]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f040 8086 	bne.w	8007cf8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007bec:	4b45      	ldr	r3, [pc, #276]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a44      	ldr	r2, [pc, #272]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bf8:	f7fb fd0c 	bl	8003614 <HAL_GetTick>
 8007bfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007bfe:	e009      	b.n	8007c14 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007c00:	f7fb fd08 	bl	8003614 <HAL_GetTick>
 8007c04:	4602      	mov	r2, r0
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d902      	bls.n	8007c14 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	73fb      	strb	r3, [r7, #15]
        break;
 8007c12:	e005      	b.n	8007c20 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007c14:	4b3b      	ldr	r3, [pc, #236]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1ef      	bne.n	8007c00 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d168      	bne.n	8007cf8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d113      	bne.n	8007c54 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007c2c:	4b35      	ldr	r3, [pc, #212]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c2e:	695a      	ldr	r2, [r3, #20]
 8007c30:	4b35      	ldr	r3, [pc, #212]	; (8007d08 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007c32:	4013      	ands	r3, r2
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	6892      	ldr	r2, [r2, #8]
 8007c38:	0211      	lsls	r1, r2, #8
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	68d2      	ldr	r2, [r2, #12]
 8007c3e:	06d2      	lsls	r2, r2, #27
 8007c40:	4311      	orrs	r1, r2
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	6852      	ldr	r2, [r2, #4]
 8007c46:	3a01      	subs	r2, #1
 8007c48:	0112      	lsls	r2, r2, #4
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	492d      	ldr	r1, [pc, #180]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	614b      	str	r3, [r1, #20]
 8007c52:	e02d      	b.n	8007cb0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d115      	bne.n	8007c86 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007c5a:	4b2a      	ldr	r3, [pc, #168]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c5c:	695a      	ldr	r2, [r3, #20]
 8007c5e:	4b2b      	ldr	r3, [pc, #172]	; (8007d0c <RCCEx_PLLSAI2_Config+0x1e0>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6892      	ldr	r2, [r2, #8]
 8007c66:	0211      	lsls	r1, r2, #8
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	6912      	ldr	r2, [r2, #16]
 8007c6c:	0852      	lsrs	r2, r2, #1
 8007c6e:	3a01      	subs	r2, #1
 8007c70:	0552      	lsls	r2, r2, #21
 8007c72:	4311      	orrs	r1, r2
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	6852      	ldr	r2, [r2, #4]
 8007c78:	3a01      	subs	r2, #1
 8007c7a:	0112      	lsls	r2, r2, #4
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	4921      	ldr	r1, [pc, #132]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c80:	4313      	orrs	r3, r2
 8007c82:	614b      	str	r3, [r1, #20]
 8007c84:	e014      	b.n	8007cb0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007c86:	4b1f      	ldr	r3, [pc, #124]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c88:	695a      	ldr	r2, [r3, #20]
 8007c8a:	4b21      	ldr	r3, [pc, #132]	; (8007d10 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	6892      	ldr	r2, [r2, #8]
 8007c92:	0211      	lsls	r1, r2, #8
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6952      	ldr	r2, [r2, #20]
 8007c98:	0852      	lsrs	r2, r2, #1
 8007c9a:	3a01      	subs	r2, #1
 8007c9c:	0652      	lsls	r2, r2, #25
 8007c9e:	4311      	orrs	r1, r2
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	6852      	ldr	r2, [r2, #4]
 8007ca4:	3a01      	subs	r2, #1
 8007ca6:	0112      	lsls	r2, r2, #4
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	4916      	ldr	r1, [pc, #88]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007cb0:	4b14      	ldr	r3, [pc, #80]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a13      	ldr	r2, [pc, #76]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cbc:	f7fb fcaa 	bl	8003614 <HAL_GetTick>
 8007cc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007cc2:	e009      	b.n	8007cd8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007cc4:	f7fb fca6 	bl	8003614 <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d902      	bls.n	8007cd8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	73fb      	strb	r3, [r7, #15]
          break;
 8007cd6:	e005      	b.n	8007ce4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007cd8:	4b0a      	ldr	r3, [pc, #40]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d0ef      	beq.n	8007cc4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d106      	bne.n	8007cf8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007cea:	4b06      	ldr	r3, [pc, #24]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007cec:	695a      	ldr	r2, [r3, #20]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	4904      	ldr	r1, [pc, #16]	; (8007d04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	40021000 	.word	0x40021000
 8007d08:	07ff800f 	.word	0x07ff800f
 8007d0c:	ff9f800f 	.word	0xff9f800f
 8007d10:	f9ff800f 	.word	0xf9ff800f

08007d14 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b089      	sub	sp, #36	; 0x24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8007d22:	2300      	movs	r3, #0
 8007d24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d30:	d10b      	bne.n	8007d4a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007d32:	4b7e      	ldr	r3, [pc, #504]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007d34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d38:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007d3c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	2b60      	cmp	r3, #96	; 0x60
 8007d42:	d112      	bne.n	8007d6a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007d44:	4b7a      	ldr	r3, [pc, #488]	; (8007f30 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007d46:	61fb      	str	r3, [r7, #28]
 8007d48:	e00f      	b.n	8007d6a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d50:	d10b      	bne.n	8007d6a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007d52:	4b76      	ldr	r3, [pc, #472]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007d54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d5c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d64:	d101      	bne.n	8007d6a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007d66:	4b72      	ldr	r3, [pc, #456]	; (8007f30 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007d68:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f040 80d6 	bne.w	8007f1e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	2b40      	cmp	r3, #64	; 0x40
 8007d7a:	d003      	beq.n	8007d84 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d82:	d13b      	bne.n	8007dfc <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007d84:	4b69      	ldr	r3, [pc, #420]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d90:	f040 80c4 	bne.w	8007f1c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8007d94:	4b65      	ldr	r3, [pc, #404]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 80bd 	beq.w	8007f1c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007da2:	4b62      	ldr	r3, [pc, #392]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	091b      	lsrs	r3, r3, #4
 8007da8:	f003 030f 	and.w	r3, r3, #15
 8007dac:	3301      	adds	r3, #1
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007db6:	4b5d      	ldr	r3, [pc, #372]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	0a1b      	lsrs	r3, r3, #8
 8007dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dc0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007dc2:	4b5a      	ldr	r3, [pc, #360]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	0edb      	lsrs	r3, r3, #27
 8007dc8:	f003 031f 	and.w	r3, r3, #31
 8007dcc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007dd4:	4b55      	ldr	r3, [pc, #340]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8007de0:	2311      	movs	r3, #17
 8007de2:	617b      	str	r3, [r7, #20]
 8007de4:	e001      	b.n	8007dea <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8007de6:	2307      	movs	r3, #7
 8007de8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	fb03 f202 	mul.w	r2, r3, r2
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007dfa:	e08f      	b.n	8007f1c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d13a      	bne.n	8007e78 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8007e02:	4b4a      	ldr	r3, [pc, #296]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e0e:	f040 8086 	bne.w	8007f1e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007e12:	4b46      	ldr	r3, [pc, #280]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d07f      	beq.n	8007f1e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007e1e:	4b43      	ldr	r3, [pc, #268]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	091b      	lsrs	r3, r3, #4
 8007e24:	f003 030f 	and.w	r3, r3, #15
 8007e28:	3301      	adds	r3, #1
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e30:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007e32:	4b3e      	ldr	r3, [pc, #248]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	0a1b      	lsrs	r3, r3, #8
 8007e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e3c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007e3e:	4b3b      	ldr	r3, [pc, #236]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	0edb      	lsrs	r3, r3, #27
 8007e44:	f003 031f 	and.w	r3, r3, #31
 8007e48:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10a      	bne.n	8007e66 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007e50:	4b36      	ldr	r3, [pc, #216]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007e5c:	2311      	movs	r3, #17
 8007e5e:	617b      	str	r3, [r7, #20]
 8007e60:	e001      	b.n	8007e66 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8007e62:	2307      	movs	r3, #7
 8007e64:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	fb03 f202 	mul.w	r2, r3, r2
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e74:	61fb      	str	r3, [r7, #28]
 8007e76:	e052      	b.n	8007f1e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	2b80      	cmp	r3, #128	; 0x80
 8007e7c:	d003      	beq.n	8007e86 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e84:	d109      	bne.n	8007e9a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e86:	4b29      	ldr	r3, [pc, #164]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e92:	d144      	bne.n	8007f1e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8007e94:	4b27      	ldr	r3, [pc, #156]	; (8007f34 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8007e96:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e98:	e041      	b.n	8007f1e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	2b20      	cmp	r3, #32
 8007e9e:	d003      	beq.n	8007ea8 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ea6:	d13a      	bne.n	8007f1e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007ea8:	4b20      	ldr	r3, [pc, #128]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eb4:	d133      	bne.n	8007f1e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007eb6:	4b1d      	ldr	r3, [pc, #116]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d02d      	beq.n	8007f1e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8007ec2:	4b1a      	ldr	r3, [pc, #104]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	091b      	lsrs	r3, r3, #4
 8007ec8:	f003 030f 	and.w	r3, r3, #15
 8007ecc:	3301      	adds	r3, #1
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007ed6:	4b15      	ldr	r3, [pc, #84]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	0a1b      	lsrs	r3, r3, #8
 8007edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ee0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8007ee2:	4b12      	ldr	r3, [pc, #72]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	0edb      	lsrs	r3, r3, #27
 8007ee8:	f003 031f 	and.w	r3, r3, #31
 8007eec:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10a      	bne.n	8007f0a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8007ef4:	4b0d      	ldr	r3, [pc, #52]	; (8007f2c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8007f00:	2311      	movs	r3, #17
 8007f02:	617b      	str	r3, [r7, #20]
 8007f04:	e001      	b.n	8007f0a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8007f06:	2307      	movs	r3, #7
 8007f08:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	fb03 f202 	mul.w	r2, r3, r2
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f18:	61fb      	str	r3, [r7, #28]
 8007f1a:	e000      	b.n	8007f1e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007f1c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007f1e:	69fb      	ldr	r3, [r7, #28]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3724      	adds	r7, #36	; 0x24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	40021000 	.word	0x40021000
 8007f30:	001fff68 	.word	0x001fff68
 8007f34:	00f42400 	.word	0x00f42400

08007f38 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d904      	bls.n	8007f56 <HAL_SAI_InitProtocol+0x1e>
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	3b03      	subs	r3, #3
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d812      	bhi.n	8007f7a <HAL_SAI_InitProtocol+0x42>
 8007f54:	e008      	b.n	8007f68 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	68b9      	ldr	r1, [r7, #8]
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 f9fb 	bl	8008358 <SAI_InitI2S>
 8007f62:	4603      	mov	r3, r0
 8007f64:	75fb      	strb	r3, [r7, #23]
      break;
 8007f66:	e00b      	b.n	8007f80 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	68b9      	ldr	r1, [r7, #8]
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 faa4 	bl	80084bc <SAI_InitPCM>
 8007f74:	4603      	mov	r3, r0
 8007f76:	75fb      	strb	r3, [r7, #23]
      break;
 8007f78:	e002      	b.n	8007f80 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f7e:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f80:	7dfb      	ldrb	r3, [r7, #23]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d104      	bne.n	8007f90 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 f808 	bl	8007f9c <HAL_SAI_Init>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
	...

08007f9c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b08a      	sub	sp, #40	; 0x28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e1c7      	b.n	800833e <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d10e      	bne.n	8007fd6 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a81      	ldr	r2, [pc, #516]	; (80081c4 <HAL_SAI_Init+0x228>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d107      	bne.n	8007fd2 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d103      	bne.n	8007fd2 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e1b3      	b.n	800833e <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d106      	bne.n	8007ff0 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f7fb f9ee 	bl	80033cc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fae5 	bl	80085c0 <SAI_Disable>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e19e      	b.n	800833e <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2202      	movs	r2, #2
 8008004:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	2b02      	cmp	r3, #2
 800800e:	d00c      	beq.n	800802a <HAL_SAI_Init+0x8e>
 8008010:	2b02      	cmp	r3, #2
 8008012:	d80d      	bhi.n	8008030 <HAL_SAI_Init+0x94>
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <HAL_SAI_Init+0x82>
 8008018:	2b01      	cmp	r3, #1
 800801a:	d003      	beq.n	8008024 <HAL_SAI_Init+0x88>
 800801c:	e008      	b.n	8008030 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008022:	e008      	b.n	8008036 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008024:	2310      	movs	r3, #16
 8008026:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008028:	e005      	b.n	8008036 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800802a:	2320      	movs	r3, #32
 800802c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800802e:	e002      	b.n	8008036 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8008030:	2300      	movs	r3, #0
 8008032:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008034:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	2b03      	cmp	r3, #3
 800803c:	d81d      	bhi.n	800807a <HAL_SAI_Init+0xde>
 800803e:	a201      	add	r2, pc, #4	; (adr r2, 8008044 <HAL_SAI_Init+0xa8>)
 8008040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008044:	08008055 	.word	0x08008055
 8008048:	0800805b 	.word	0x0800805b
 800804c:	08008063 	.word	0x08008063
 8008050:	0800806b 	.word	0x0800806b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	61fb      	str	r3, [r7, #28]
      break;
 8008058:	e012      	b.n	8008080 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800805a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800805e:	61fb      	str	r3, [r7, #28]
      break;
 8008060:	e00e      	b.n	8008080 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008062:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008066:	61fb      	str	r3, [r7, #28]
      break;
 8008068:	e00a      	b.n	8008080 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800806a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800806e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	f043 0301 	orr.w	r3, r3, #1
 8008076:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008078:	e002      	b.n	8008080 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	61fb      	str	r3, [r7, #28]
      break;
 800807e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a4f      	ldr	r2, [pc, #316]	; (80081c4 <HAL_SAI_Init+0x228>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d004      	beq.n	8008094 <HAL_SAI_Init+0xf8>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a4e      	ldr	r2, [pc, #312]	; (80081c8 <HAL_SAI_Init+0x22c>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d103      	bne.n	800809c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8008094:	4a4d      	ldr	r2, [pc, #308]	; (80081cc <HAL_SAI_Init+0x230>)
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	6013      	str	r3, [r2, #0]
 800809a:	e002      	b.n	80080a2 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800809c:	4a4c      	ldr	r2, [pc, #304]	; (80081d0 <HAL_SAI_Init+0x234>)
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d073      	beq.n	8008192 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a45      	ldr	r2, [pc, #276]	; (80081c4 <HAL_SAI_Init+0x228>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d004      	beq.n	80080be <HAL_SAI_Init+0x122>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a43      	ldr	r2, [pc, #268]	; (80081c8 <HAL_SAI_Init+0x22c>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d105      	bne.n	80080ca <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80080be:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80080c2:	f7fe fd1d 	bl	8006b00 <HAL_RCCEx_GetPeriphCLKFreq>
 80080c6:	61b8      	str	r0, [r7, #24]
 80080c8:	e004      	b.n	80080d4 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80080ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80080ce:	f7fe fd17 	bl	8006b00 <HAL_RCCEx_GetPeriphCLKFreq>
 80080d2:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	695b      	ldr	r3, [r3, #20]
 80080d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080dc:	d120      	bne.n	8008120 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e2:	2b04      	cmp	r3, #4
 80080e4:	d102      	bne.n	80080ec <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80080e6:	2340      	movs	r3, #64	; 0x40
 80080e8:	613b      	str	r3, [r7, #16]
 80080ea:	e00a      	b.n	8008102 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f0:	2b08      	cmp	r3, #8
 80080f2:	d103      	bne.n	80080fc <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80080f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080f8:	613b      	str	r3, [r7, #16]
 80080fa:	e002      	b.n	8008102 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008100:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	4613      	mov	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	4619      	mov	r1, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	fb02 f303 	mul.w	r3, r2, r3
 8008118:	fbb1 f3f3 	udiv	r3, r1, r3
 800811c:	617b      	str	r3, [r7, #20]
 800811e:	e017      	b.n	8008150 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008124:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008128:	d101      	bne.n	800812e <HAL_SAI_Init+0x192>
 800812a:	2302      	movs	r3, #2
 800812c:	e000      	b.n	8008130 <HAL_SAI_Init+0x194>
 800812e:	2301      	movs	r3, #1
 8008130:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008132:	69ba      	ldr	r2, [r7, #24]
 8008134:	4613      	mov	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	005b      	lsls	r3, r3, #1
 800813c:	4619      	mov	r1, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	fb02 f303 	mul.w	r3, r2, r3
 8008148:	021b      	lsls	r3, r3, #8
 800814a:	fbb1 f3f3 	udiv	r3, r1, r3
 800814e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	4a20      	ldr	r2, [pc, #128]	; (80081d4 <HAL_SAI_Init+0x238>)
 8008154:	fba2 2303 	umull	r2, r3, r2, r3
 8008158:	08da      	lsrs	r2, r3, #3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800815e:	6979      	ldr	r1, [r7, #20]
 8008160:	4b1c      	ldr	r3, [pc, #112]	; (80081d4 <HAL_SAI_Init+0x238>)
 8008162:	fba3 2301 	umull	r2, r3, r3, r1
 8008166:	08da      	lsrs	r2, r3, #3
 8008168:	4613      	mov	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	005b      	lsls	r3, r3, #1
 8008170:	1aca      	subs	r2, r1, r3
 8008172:	2a08      	cmp	r2, #8
 8008174:	d904      	bls.n	8008180 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	1c5a      	adds	r2, r3, #1
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008184:	2b04      	cmp	r3, #4
 8008186:	d104      	bne.n	8008192 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a1b      	ldr	r3, [r3, #32]
 800818c:	085a      	lsrs	r2, r3, #1
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <HAL_SAI_Init+0x206>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d109      	bne.n	80081b6 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d101      	bne.n	80081ae <HAL_SAI_Init+0x212>
 80081aa:	2300      	movs	r3, #0
 80081ac:	e001      	b.n	80081b2 <HAL_SAI_Init+0x216>
 80081ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081b2:	623b      	str	r3, [r7, #32]
 80081b4:	e012      	b.n	80081dc <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d10c      	bne.n	80081d8 <HAL_SAI_Init+0x23c>
 80081be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081c2:	e00a      	b.n	80081da <HAL_SAI_Init+0x23e>
 80081c4:	40015404 	.word	0x40015404
 80081c8:	40015424 	.word	0x40015424
 80081cc:	40015400 	.word	0x40015400
 80081d0:	40015800 	.word	0x40015800
 80081d4:	cccccccd 	.word	0xcccccccd
 80081d8:	2300      	movs	r3, #0
 80081da:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6819      	ldr	r1, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	4b58      	ldr	r3, [pc, #352]	; (8008348 <HAL_SAI_Init+0x3ac>)
 80081e8:	400b      	ands	r3, r1
 80081ea:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6819      	ldr	r1, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008200:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008206:	431a      	orrs	r2, r3
 8008208:	6a3b      	ldr	r3, [r7, #32]
 800820a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8008214:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008220:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a1b      	ldr	r3, [r3, #32]
 8008226:	051b      	lsls	r3, r3, #20
 8008228:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800822e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	6812      	ldr	r2, [r2, #0]
 8008242:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008246:	f023 030f 	bic.w	r3, r3, #15
 800824a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6859      	ldr	r1, [r3, #4]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	699a      	ldr	r2, [r3, #24]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825a:	431a      	orrs	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008260:	431a      	orrs	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	430a      	orrs	r2, r1
 8008268:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6899      	ldr	r1, [r3, #8]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	4b35      	ldr	r3, [pc, #212]	; (800834c <HAL_SAI_Init+0x3b0>)
 8008276:	400b      	ands	r3, r1
 8008278:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	6899      	ldr	r1, [r3, #8]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008284:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800828a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8008290:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8008296:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800829c:	3b01      	subs	r3, #1
 800829e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80082a0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68d9      	ldr	r1, [r3, #12]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	f24f 0320 	movw	r3, #61472	; 0xf020
 80082b8:	400b      	ands	r3, r1
 80082ba:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68d9      	ldr	r1, [r3, #12]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082ca:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082d0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80082d2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082d8:	3b01      	subs	r3, #1
 80082da:	021b      	lsls	r3, r3, #8
 80082dc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	430a      	orrs	r2, r1
 80082e4:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a19      	ldr	r2, [pc, #100]	; (8008350 <HAL_SAI_Init+0x3b4>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d119      	bne.n	8008324 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80082f0:	4b18      	ldr	r3, [pc, #96]	; (8008354 <HAL_SAI_Init+0x3b8>)
 80082f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082f4:	4a17      	ldr	r2, [pc, #92]	; (8008354 <HAL_SAI_Init+0x3b8>)
 80082f6:	f023 0301 	bic.w	r3, r3, #1
 80082fa:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008302:	2b01      	cmp	r3, #1
 8008304:	d10e      	bne.n	8008324 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830e:	3b01      	subs	r3, #1
 8008310:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008312:	4910      	ldr	r1, [pc, #64]	; (8008354 <HAL_SAI_Init+0x3b8>)
 8008314:	4313      	orrs	r3, r2
 8008316:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8008318:	4b0e      	ldr	r3, [pc, #56]	; (8008354 <HAL_SAI_Init+0x3b8>)
 800831a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831c:	4a0d      	ldr	r2, [pc, #52]	; (8008354 <HAL_SAI_Init+0x3b8>)
 800831e:	f043 0301 	orr.w	r3, r3, #1
 8008322:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3728      	adds	r7, #40	; 0x28
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	f805c010 	.word	0xf805c010
 800834c:	fff88000 	.word	0xfff88000
 8008350:	40015404 	.word	0x40015404
 8008354:	40015400 	.word	0x40015400

08008358 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
 8008364:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <SAI_InitI2S+0x2e>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	2b02      	cmp	r3, #2
 8008384:	d103      	bne.n	800838e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	64da      	str	r2, [r3, #76]	; 0x4c
 800838c:	e002      	b.n	8008394 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2201      	movs	r2, #1
 8008392:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800839a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083a2:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e077      	b.n	80084ae <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d107      	bne.n	80083d4 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80083d0:	661a      	str	r2, [r3, #96]	; 0x60
 80083d2:	e006      	b.n	80083e2 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80083da:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d84f      	bhi.n	8008488 <SAI_InitI2S+0x130>
 80083e8:	a201      	add	r2, pc, #4	; (adr r2, 80083f0 <SAI_InitI2S+0x98>)
 80083ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ee:	bf00      	nop
 80083f0:	08008401 	.word	0x08008401
 80083f4:	08008423 	.word	0x08008423
 80083f8:	08008445 	.word	0x08008445
 80083fc:	08008467 	.word	0x08008467
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2280      	movs	r2, #128	; 0x80
 8008404:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	085b      	lsrs	r3, r3, #1
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	085b      	lsrs	r3, r3, #1
 8008414:	011a      	lsls	r2, r3, #4
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2240      	movs	r2, #64	; 0x40
 800841e:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008420:	e035      	b.n	800848e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2280      	movs	r2, #128	; 0x80
 8008426:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	085b      	lsrs	r3, r3, #1
 800842c:	019a      	lsls	r2, r3, #6
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	085b      	lsrs	r3, r3, #1
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2280      	movs	r2, #128	; 0x80
 8008440:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008442:	e024      	b.n	800848e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	22c0      	movs	r2, #192	; 0xc0
 8008448:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	085b      	lsrs	r3, r3, #1
 800844e:	019a      	lsls	r2, r3, #6
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	085b      	lsrs	r3, r3, #1
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2280      	movs	r2, #128	; 0x80
 8008462:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008464:	e013      	b.n	800848e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	22e0      	movs	r2, #224	; 0xe0
 800846a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	085b      	lsrs	r3, r3, #1
 8008470:	019a      	lsls	r2, r3, #6
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	085b      	lsrs	r3, r3, #1
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2280      	movs	r2, #128	; 0x80
 8008484:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008486:	e002      	b.n	800848e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	75fb      	strb	r3, [r7, #23]
      break;
 800848c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b02      	cmp	r3, #2
 8008492:	d10b      	bne.n	80084ac <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d102      	bne.n	80084a0 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2210      	movs	r2, #16
 800849e:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d102      	bne.n	80084ac <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2208      	movs	r2, #8
 80084aa:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 80084ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	371c      	adds	r7, #28
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop

080084bc <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80084bc:	b480      	push	{r7}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
 80084c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <SAI_InitPCM+0x2e>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d103      	bne.n	80084f2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2201      	movs	r2, #1
 80084ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80084f0:	e002      	b.n	80084f8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008504:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800850c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008520:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2b04      	cmp	r3, #4
 8008526:	d103      	bne.n	8008530 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2201      	movs	r2, #1
 800852c:	655a      	str	r2, [r3, #84]	; 0x54
 800852e:	e002      	b.n	8008536 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	220d      	movs	r2, #13
 8008534:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b03      	cmp	r3, #3
 800853a:	d837      	bhi.n	80085ac <SAI_InitPCM+0xf0>
 800853c:	a201      	add	r2, pc, #4	; (adr r2, 8008544 <SAI_InitPCM+0x88>)
 800853e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008542:	bf00      	nop
 8008544:	08008555 	.word	0x08008555
 8008548:	0800856b 	.word	0x0800856b
 800854c:	08008581 	.word	0x08008581
 8008550:	08008597 	.word	0x08008597
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2280      	movs	r2, #128	; 0x80
 8008558:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	011a      	lsls	r2, r3, #4
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2240      	movs	r2, #64	; 0x40
 8008566:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008568:	e023      	b.n	80085b2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2280      	movs	r2, #128	; 0x80
 800856e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2280      	movs	r2, #128	; 0x80
 800857c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800857e:	e018      	b.n	80085b2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	22c0      	movs	r2, #192	; 0xc0
 8008584:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	015a      	lsls	r2, r3, #5
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2280      	movs	r2, #128	; 0x80
 8008592:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008594:	e00d      	b.n	80085b2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	22e0      	movs	r2, #224	; 0xe0
 800859a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2280      	movs	r2, #128	; 0x80
 80085a8:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80085aa:	e002      	b.n	80085b2 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	75fb      	strb	r3, [r7, #23]
      break;
 80085b0:	bf00      	nop
  }

  return status;
 80085b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	371c      	adds	r7, #28
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80085c8:	4b18      	ldr	r3, [pc, #96]	; (800862c <SAI_Disable+0x6c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a18      	ldr	r2, [pc, #96]	; (8008630 <SAI_Disable+0x70>)
 80085ce:	fba2 2303 	umull	r2, r3, r2, r3
 80085d2:	0b1b      	lsrs	r3, r3, #12
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80085ea:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10a      	bne.n	8008608 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	72fb      	strb	r3, [r7, #11]
      break;
 8008606:	e009      	b.n	800861c <SAI_Disable+0x5c>
    }
    count--;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3b01      	subs	r3, #1
 800860c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e7      	bne.n	80085ec <SAI_Disable+0x2c>

  return status;
 800861c:	7afb      	ldrb	r3, [r7, #11]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	20000010 	.word	0x20000010
 8008630:	95cbec1b 	.word	0x95cbec1b

08008634 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e095      	b.n	8008772 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864a:	2b00      	cmp	r3, #0
 800864c:	d108      	bne.n	8008660 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008656:	d009      	beq.n	800866c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	61da      	str	r2, [r3, #28]
 800865e:	e005      	b.n	800866c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d106      	bne.n	800868c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7fa fd46 	bl	8003118 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2202      	movs	r2, #2
 8008690:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80086ac:	d902      	bls.n	80086b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80086ae:	2300      	movs	r3, #0
 80086b0:	60fb      	str	r3, [r7, #12]
 80086b2:	e002      	b.n	80086ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80086b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80086c2:	d007      	beq.n	80086d4 <HAL_SPI_Init+0xa0>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80086cc:	d002      	beq.n	80086d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80086e4:	431a      	orrs	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	431a      	orrs	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	431a      	orrs	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008702:	431a      	orrs	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	69db      	ldr	r3, [r3, #28]
 8008708:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800870c:	431a      	orrs	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008716:	ea42 0103 	orr.w	r1, r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	430a      	orrs	r2, r1
 8008728:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	0c1b      	lsrs	r3, r3, #16
 8008730:	f003 0204 	and.w	r2, r3, #4
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008738:	f003 0310 	and.w	r3, r3, #16
 800873c:	431a      	orrs	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008742:	f003 0308 	and.w	r3, r3, #8
 8008746:	431a      	orrs	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008750:	ea42 0103 	orr.w	r1, r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b088      	sub	sp, #32
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	603b      	str	r3, [r7, #0]
 8008786:	4613      	mov	r3, r2
 8008788:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008794:	2b01      	cmp	r3, #1
 8008796:	d101      	bne.n	800879c <HAL_SPI_Transmit+0x22>
 8008798:	2302      	movs	r3, #2
 800879a:	e15f      	b.n	8008a5c <HAL_SPI_Transmit+0x2e2>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087a4:	f7fa ff36 	bl	8003614 <HAL_GetTick>
 80087a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80087aa:	88fb      	ldrh	r3, [r7, #6]
 80087ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d002      	beq.n	80087c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80087ba:	2302      	movs	r3, #2
 80087bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80087be:	e148      	b.n	8008a52 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d002      	beq.n	80087cc <HAL_SPI_Transmit+0x52>
 80087c6:	88fb      	ldrh	r3, [r7, #6]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80087d0:	e13f      	b.n	8008a52 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2203      	movs	r2, #3
 80087d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	88fa      	ldrh	r2, [r7, #6]
 80087ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	88fa      	ldrh	r2, [r7, #6]
 80087f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800881c:	d10f      	bne.n	800883e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800882c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800883c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008848:	2b40      	cmp	r3, #64	; 0x40
 800884a:	d007      	beq.n	800885c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800885a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008864:	d94f      	bls.n	8008906 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <HAL_SPI_Transmit+0xfa>
 800886e:	8afb      	ldrh	r3, [r7, #22]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d142      	bne.n	80088fa <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008878:	881a      	ldrh	r2, [r3, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008884:	1c9a      	adds	r2, r3, #2
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800888e:	b29b      	uxth	r3, r3
 8008890:	3b01      	subs	r3, #1
 8008892:	b29a      	uxth	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008898:	e02f      	b.n	80088fa <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f003 0302 	and.w	r3, r3, #2
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d112      	bne.n	80088ce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ac:	881a      	ldrh	r2, [r3, #0]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b8:	1c9a      	adds	r2, r3, #2
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	3b01      	subs	r3, #1
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80088cc:	e015      	b.n	80088fa <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088ce:	f7fa fea1 	bl	8003614 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d803      	bhi.n	80088e6 <HAL_SPI_Transmit+0x16c>
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e4:	d102      	bne.n	80088ec <HAL_SPI_Transmit+0x172>
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d106      	bne.n	80088fa <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80088f8:	e0ab      	b.n	8008a52 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088fe:	b29b      	uxth	r3, r3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1ca      	bne.n	800889a <HAL_SPI_Transmit+0x120>
 8008904:	e080      	b.n	8008a08 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d002      	beq.n	8008914 <HAL_SPI_Transmit+0x19a>
 800890e:	8afb      	ldrh	r3, [r7, #22]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d174      	bne.n	80089fe <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008918:	b29b      	uxth	r3, r3
 800891a:	2b01      	cmp	r3, #1
 800891c:	d912      	bls.n	8008944 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008922:	881a      	ldrh	r2, [r3, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892e:	1c9a      	adds	r2, r3, #2
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008938:	b29b      	uxth	r3, r3
 800893a:	3b02      	subs	r3, #2
 800893c:	b29a      	uxth	r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008942:	e05c      	b.n	80089fe <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	330c      	adds	r3, #12
 800894e:	7812      	ldrb	r2, [r2, #0]
 8008950:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008960:	b29b      	uxth	r3, r3
 8008962:	3b01      	subs	r3, #1
 8008964:	b29a      	uxth	r2, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800896a:	e048      	b.n	80089fe <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f003 0302 	and.w	r3, r3, #2
 8008976:	2b02      	cmp	r3, #2
 8008978:	d12b      	bne.n	80089d2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800897e:	b29b      	uxth	r3, r3
 8008980:	2b01      	cmp	r3, #1
 8008982:	d912      	bls.n	80089aa <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008988:	881a      	ldrh	r2, [r3, #0]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008994:	1c9a      	adds	r2, r3, #2
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800899e:	b29b      	uxth	r3, r3
 80089a0:	3b02      	subs	r3, #2
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089a8:	e029      	b.n	80089fe <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	330c      	adds	r3, #12
 80089b4:	7812      	ldrb	r2, [r2, #0]
 80089b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089bc:	1c5a      	adds	r2, r3, #1
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	3b01      	subs	r3, #1
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089d0:	e015      	b.n	80089fe <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089d2:	f7fa fe1f 	bl	8003614 <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	683a      	ldr	r2, [r7, #0]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d803      	bhi.n	80089ea <HAL_SPI_Transmit+0x270>
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e8:	d102      	bne.n	80089f0 <HAL_SPI_Transmit+0x276>
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d106      	bne.n	80089fe <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80089f0:	2303      	movs	r3, #3
 80089f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80089fc:	e029      	b.n	8008a52 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1b1      	bne.n	800896c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f000 f947 	bl	8008ca0 <SPI_EndRxTxTransaction>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d002      	beq.n	8008a1e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10a      	bne.n	8008a3c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a26:	2300      	movs	r3, #0
 8008a28:	613b      	str	r3, [r7, #16]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	613b      	str	r3, [r7, #16]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	613b      	str	r3, [r7, #16]
 8008a3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	77fb      	strb	r3, [r7, #31]
 8008a48:	e003      	b.n	8008a52 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008a5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3720      	adds	r7, #32
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b088      	sub	sp, #32
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	603b      	str	r3, [r7, #0]
 8008a70:	4613      	mov	r3, r2
 8008a72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008a74:	f7fa fdce 	bl	8003614 <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7c:	1a9b      	subs	r3, r3, r2
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	4413      	add	r3, r2
 8008a82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008a84:	f7fa fdc6 	bl	8003614 <HAL_GetTick>
 8008a88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008a8a:	4b39      	ldr	r3, [pc, #228]	; (8008b70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	015b      	lsls	r3, r3, #5
 8008a90:	0d1b      	lsrs	r3, r3, #20
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	fb02 f303 	mul.w	r3, r2, r3
 8008a98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a9a:	e054      	b.n	8008b46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa2:	d050      	beq.n	8008b46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008aa4:	f7fa fdb6 	bl	8003614 <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	69fa      	ldr	r2, [r7, #28]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d902      	bls.n	8008aba <SPI_WaitFlagStateUntilTimeout+0x56>
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d13d      	bne.n	8008b36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008ac8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ad2:	d111      	bne.n	8008af8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008adc:	d004      	beq.n	8008ae8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ae6:	d107      	bne.n	8008af8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008af6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b00:	d10f      	bne.n	8008b22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b10:	601a      	str	r2, [r3, #0]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e017      	b.n	8008b66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	3b01      	subs	r3, #1
 8008b44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	689a      	ldr	r2, [r3, #8]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	4013      	ands	r3, r2
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	bf0c      	ite	eq
 8008b56:	2301      	moveq	r3, #1
 8008b58:	2300      	movne	r3, #0
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	79fb      	ldrb	r3, [r7, #7]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d19b      	bne.n	8008a9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3720      	adds	r7, #32
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	20000010 	.word	0x20000010

08008b74 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b08a      	sub	sp, #40	; 0x28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008b86:	f7fa fd45 	bl	8003614 <HAL_GetTick>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8e:	1a9b      	subs	r3, r3, r2
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	4413      	add	r3, r2
 8008b94:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008b96:	f7fa fd3d 	bl	8003614 <HAL_GetTick>
 8008b9a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	330c      	adds	r3, #12
 8008ba2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008ba4:	4b3d      	ldr	r3, [pc, #244]	; (8008c9c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	00da      	lsls	r2, r3, #3
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	0d1b      	lsrs	r3, r3, #20
 8008bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb6:	fb02 f303 	mul.w	r3, r2, r3
 8008bba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008bbc:	e060      	b.n	8008c80 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008bc4:	d107      	bne.n	8008bd6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d104      	bne.n	8008bd6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008bd4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bdc:	d050      	beq.n	8008c80 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008bde:	f7fa fd19 	bl	8003614 <HAL_GetTick>
 8008be2:	4602      	mov	r2, r0
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	1ad3      	subs	r3, r2, r3
 8008be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d902      	bls.n	8008bf4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d13d      	bne.n	8008c70 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008c02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c0c:	d111      	bne.n	8008c32 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c16:	d004      	beq.n	8008c22 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c20:	d107      	bne.n	8008c32 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c3a:	d10f      	bne.n	8008c5c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c4a:	601a      	str	r2, [r3, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e010      	b.n	8008c92 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008c76:	2300      	movs	r3, #0
 8008c78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	689a      	ldr	r2, [r3, #8]
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	4013      	ands	r3, r2
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d196      	bne.n	8008bbe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3728      	adds	r7, #40	; 0x28
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20000010 	.word	0x20000010

08008ca0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af02      	add	r7, sp, #8
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f7ff ff5b 	bl	8008b74 <SPI_WaitFifoStateUntilTimeout>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d007      	beq.n	8008cd4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cc8:	f043 0220 	orr.w	r2, r3, #32
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e027      	b.n	8008d24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	2180      	movs	r1, #128	; 0x80
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f7ff fec0 	bl	8008a64 <SPI_WaitFlagStateUntilTimeout>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d007      	beq.n	8008cfa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cee:	f043 0220 	orr.w	r2, r3, #32
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e014      	b.n	8008d24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f7ff ff34 	bl	8008b74 <SPI_WaitFifoStateUntilTimeout>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d007      	beq.n	8008d22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d16:	f043 0220 	orr.w	r2, r3, #32
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e000      	b.n	8008d24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e049      	b.n	8008dd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d106      	bne.n	8008d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7fa fa22 	bl	800319c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3304      	adds	r3, #4
 8008d68:	4619      	mov	r1, r3
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	f000 fcbc 	bl	80096e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d001      	beq.n	8008df4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	e04f      	b.n	8008e94 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68da      	ldr	r2, [r3, #12]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f042 0201 	orr.w	r2, r2, #1
 8008e0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a23      	ldr	r2, [pc, #140]	; (8008ea0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d01d      	beq.n	8008e52 <HAL_TIM_Base_Start_IT+0x76>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e1e:	d018      	beq.n	8008e52 <HAL_TIM_Base_Start_IT+0x76>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a1f      	ldr	r2, [pc, #124]	; (8008ea4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d013      	beq.n	8008e52 <HAL_TIM_Base_Start_IT+0x76>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a1e      	ldr	r2, [pc, #120]	; (8008ea8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d00e      	beq.n	8008e52 <HAL_TIM_Base_Start_IT+0x76>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a1c      	ldr	r2, [pc, #112]	; (8008eac <HAL_TIM_Base_Start_IT+0xd0>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d009      	beq.n	8008e52 <HAL_TIM_Base_Start_IT+0x76>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a1b      	ldr	r2, [pc, #108]	; (8008eb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d004      	beq.n	8008e52 <HAL_TIM_Base_Start_IT+0x76>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a19      	ldr	r2, [pc, #100]	; (8008eb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d115      	bne.n	8008e7e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	689a      	ldr	r2, [r3, #8]
 8008e58:	4b17      	ldr	r3, [pc, #92]	; (8008eb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2b06      	cmp	r3, #6
 8008e62:	d015      	beq.n	8008e90 <HAL_TIM_Base_Start_IT+0xb4>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e6a:	d011      	beq.n	8008e90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f042 0201 	orr.w	r2, r2, #1
 8008e7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e7c:	e008      	b.n	8008e90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f042 0201 	orr.w	r2, r2, #1
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	e000      	b.n	8008e92 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3714      	adds	r7, #20
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	40012c00 	.word	0x40012c00
 8008ea4:	40000400 	.word	0x40000400
 8008ea8:	40000800 	.word	0x40000800
 8008eac:	40000c00 	.word	0x40000c00
 8008eb0:	40013400 	.word	0x40013400
 8008eb4:	40014000 	.word	0x40014000
 8008eb8:	00010007 	.word	0x00010007

08008ebc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e049      	b.n	8008f62 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d106      	bne.n	8008ee8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f841 	bl	8008f6a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2202      	movs	r2, #2
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	4619      	mov	r1, r3
 8008efa:	4610      	mov	r0, r2
 8008efc:	f000 fbf4 	bl	80096e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b083      	sub	sp, #12
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008f72:	bf00      	nop
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b082      	sub	sp, #8
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e049      	b.n	8009024 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d106      	bne.n	8008faa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7fa f94f 	bl	8003248 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2202      	movs	r2, #2
 8008fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	3304      	adds	r3, #4
 8008fba:	4619      	mov	r1, r3
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	f000 fb93 	bl	80096e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2201      	movs	r2, #1
 8008fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d109      	bne.n	8009050 <HAL_TIM_PWM_Start+0x24>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b01      	cmp	r3, #1
 8009046:	bf14      	ite	ne
 8009048:	2301      	movne	r3, #1
 800904a:	2300      	moveq	r3, #0
 800904c:	b2db      	uxtb	r3, r3
 800904e:	e03c      	b.n	80090ca <HAL_TIM_PWM_Start+0x9e>
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	2b04      	cmp	r3, #4
 8009054:	d109      	bne.n	800906a <HAL_TIM_PWM_Start+0x3e>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800905c:	b2db      	uxtb	r3, r3
 800905e:	2b01      	cmp	r3, #1
 8009060:	bf14      	ite	ne
 8009062:	2301      	movne	r3, #1
 8009064:	2300      	moveq	r3, #0
 8009066:	b2db      	uxtb	r3, r3
 8009068:	e02f      	b.n	80090ca <HAL_TIM_PWM_Start+0x9e>
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b08      	cmp	r3, #8
 800906e:	d109      	bne.n	8009084 <HAL_TIM_PWM_Start+0x58>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009076:	b2db      	uxtb	r3, r3
 8009078:	2b01      	cmp	r3, #1
 800907a:	bf14      	ite	ne
 800907c:	2301      	movne	r3, #1
 800907e:	2300      	moveq	r3, #0
 8009080:	b2db      	uxtb	r3, r3
 8009082:	e022      	b.n	80090ca <HAL_TIM_PWM_Start+0x9e>
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	2b0c      	cmp	r3, #12
 8009088:	d109      	bne.n	800909e <HAL_TIM_PWM_Start+0x72>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b01      	cmp	r3, #1
 8009094:	bf14      	ite	ne
 8009096:	2301      	movne	r3, #1
 8009098:	2300      	moveq	r3, #0
 800909a:	b2db      	uxtb	r3, r3
 800909c:	e015      	b.n	80090ca <HAL_TIM_PWM_Start+0x9e>
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2b10      	cmp	r3, #16
 80090a2:	d109      	bne.n	80090b8 <HAL_TIM_PWM_Start+0x8c>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	bf14      	ite	ne
 80090b0:	2301      	movne	r3, #1
 80090b2:	2300      	moveq	r3, #0
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	e008      	b.n	80090ca <HAL_TIM_PWM_Start+0x9e>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	bf14      	ite	ne
 80090c4:	2301      	movne	r3, #1
 80090c6:	2300      	moveq	r3, #0
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d001      	beq.n	80090d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e09c      	b.n	800920c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d104      	bne.n	80090e2 <HAL_TIM_PWM_Start+0xb6>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2202      	movs	r2, #2
 80090dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090e0:	e023      	b.n	800912a <HAL_TIM_PWM_Start+0xfe>
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2b04      	cmp	r3, #4
 80090e6:	d104      	bne.n	80090f2 <HAL_TIM_PWM_Start+0xc6>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2202      	movs	r2, #2
 80090ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090f0:	e01b      	b.n	800912a <HAL_TIM_PWM_Start+0xfe>
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2b08      	cmp	r3, #8
 80090f6:	d104      	bne.n	8009102 <HAL_TIM_PWM_Start+0xd6>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2202      	movs	r2, #2
 80090fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009100:	e013      	b.n	800912a <HAL_TIM_PWM_Start+0xfe>
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	2b0c      	cmp	r3, #12
 8009106:	d104      	bne.n	8009112 <HAL_TIM_PWM_Start+0xe6>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2202      	movs	r2, #2
 800910c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009110:	e00b      	b.n	800912a <HAL_TIM_PWM_Start+0xfe>
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b10      	cmp	r3, #16
 8009116:	d104      	bne.n	8009122 <HAL_TIM_PWM_Start+0xf6>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2202      	movs	r2, #2
 800911c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009120:	e003      	b.n	800912a <HAL_TIM_PWM_Start+0xfe>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2202      	movs	r2, #2
 8009126:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2201      	movs	r2, #1
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	4618      	mov	r0, r3
 8009134:	f000 fee2 	bl	8009efc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a35      	ldr	r2, [pc, #212]	; (8009214 <HAL_TIM_PWM_Start+0x1e8>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d013      	beq.n	800916a <HAL_TIM_PWM_Start+0x13e>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a34      	ldr	r2, [pc, #208]	; (8009218 <HAL_TIM_PWM_Start+0x1ec>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d00e      	beq.n	800916a <HAL_TIM_PWM_Start+0x13e>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a32      	ldr	r2, [pc, #200]	; (800921c <HAL_TIM_PWM_Start+0x1f0>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d009      	beq.n	800916a <HAL_TIM_PWM_Start+0x13e>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a31      	ldr	r2, [pc, #196]	; (8009220 <HAL_TIM_PWM_Start+0x1f4>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d004      	beq.n	800916a <HAL_TIM_PWM_Start+0x13e>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a2f      	ldr	r2, [pc, #188]	; (8009224 <HAL_TIM_PWM_Start+0x1f8>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d101      	bne.n	800916e <HAL_TIM_PWM_Start+0x142>
 800916a:	2301      	movs	r3, #1
 800916c:	e000      	b.n	8009170 <HAL_TIM_PWM_Start+0x144>
 800916e:	2300      	movs	r3, #0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d007      	beq.n	8009184 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009182:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a22      	ldr	r2, [pc, #136]	; (8009214 <HAL_TIM_PWM_Start+0x1e8>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d01d      	beq.n	80091ca <HAL_TIM_PWM_Start+0x19e>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009196:	d018      	beq.n	80091ca <HAL_TIM_PWM_Start+0x19e>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a22      	ldr	r2, [pc, #136]	; (8009228 <HAL_TIM_PWM_Start+0x1fc>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d013      	beq.n	80091ca <HAL_TIM_PWM_Start+0x19e>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a21      	ldr	r2, [pc, #132]	; (800922c <HAL_TIM_PWM_Start+0x200>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d00e      	beq.n	80091ca <HAL_TIM_PWM_Start+0x19e>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a1f      	ldr	r2, [pc, #124]	; (8009230 <HAL_TIM_PWM_Start+0x204>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d009      	beq.n	80091ca <HAL_TIM_PWM_Start+0x19e>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a17      	ldr	r2, [pc, #92]	; (8009218 <HAL_TIM_PWM_Start+0x1ec>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d004      	beq.n	80091ca <HAL_TIM_PWM_Start+0x19e>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a15      	ldr	r2, [pc, #84]	; (800921c <HAL_TIM_PWM_Start+0x1f0>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d115      	bne.n	80091f6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	689a      	ldr	r2, [r3, #8]
 80091d0:	4b18      	ldr	r3, [pc, #96]	; (8009234 <HAL_TIM_PWM_Start+0x208>)
 80091d2:	4013      	ands	r3, r2
 80091d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2b06      	cmp	r3, #6
 80091da:	d015      	beq.n	8009208 <HAL_TIM_PWM_Start+0x1dc>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091e2:	d011      	beq.n	8009208 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f042 0201 	orr.w	r2, r2, #1
 80091f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091f4:	e008      	b.n	8009208 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f042 0201 	orr.w	r2, r2, #1
 8009204:	601a      	str	r2, [r3, #0]
 8009206:	e000      	b.n	800920a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009208:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	40012c00 	.word	0x40012c00
 8009218:	40013400 	.word	0x40013400
 800921c:	40014000 	.word	0x40014000
 8009220:	40014400 	.word	0x40014400
 8009224:	40014800 	.word	0x40014800
 8009228:	40000400 	.word	0x40000400
 800922c:	40000800 	.word	0x40000800
 8009230:	40000c00 	.word	0x40000c00
 8009234:	00010007 	.word	0x00010007

08009238 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800924e:	2b01      	cmp	r3, #1
 8009250:	d101      	bne.n	8009256 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009252:	2302      	movs	r3, #2
 8009254:	e066      	b.n	8009324 <HAL_TIM_OC_ConfigChannel+0xec>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2b14      	cmp	r3, #20
 8009262:	d857      	bhi.n	8009314 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009264:	a201      	add	r2, pc, #4	; (adr r2, 800926c <HAL_TIM_OC_ConfigChannel+0x34>)
 8009266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926a:	bf00      	nop
 800926c:	080092c1 	.word	0x080092c1
 8009270:	08009315 	.word	0x08009315
 8009274:	08009315 	.word	0x08009315
 8009278:	08009315 	.word	0x08009315
 800927c:	080092cf 	.word	0x080092cf
 8009280:	08009315 	.word	0x08009315
 8009284:	08009315 	.word	0x08009315
 8009288:	08009315 	.word	0x08009315
 800928c:	080092dd 	.word	0x080092dd
 8009290:	08009315 	.word	0x08009315
 8009294:	08009315 	.word	0x08009315
 8009298:	08009315 	.word	0x08009315
 800929c:	080092eb 	.word	0x080092eb
 80092a0:	08009315 	.word	0x08009315
 80092a4:	08009315 	.word	0x08009315
 80092a8:	08009315 	.word	0x08009315
 80092ac:	080092f9 	.word	0x080092f9
 80092b0:	08009315 	.word	0x08009315
 80092b4:	08009315 	.word	0x08009315
 80092b8:	08009315 	.word	0x08009315
 80092bc:	08009307 	.word	0x08009307
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68b9      	ldr	r1, [r7, #8]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 faa8 	bl	800981c <TIM_OC1_SetConfig>
      break;
 80092cc:	e025      	b.n	800931a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68b9      	ldr	r1, [r7, #8]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 fb31 	bl	800993c <TIM_OC2_SetConfig>
      break;
 80092da:	e01e      	b.n	800931a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68b9      	ldr	r1, [r7, #8]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 fbb4 	bl	8009a50 <TIM_OC3_SetConfig>
      break;
 80092e8:	e017      	b.n	800931a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68b9      	ldr	r1, [r7, #8]
 80092f0:	4618      	mov	r0, r3
 80092f2:	f000 fc35 	bl	8009b60 <TIM_OC4_SetConfig>
      break;
 80092f6:	e010      	b.n	800931a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68b9      	ldr	r1, [r7, #8]
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 fc98 	bl	8009c34 <TIM_OC5_SetConfig>
      break;
 8009304:	e009      	b.n	800931a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68b9      	ldr	r1, [r7, #8]
 800930c:	4618      	mov	r0, r3
 800930e:	f000 fcf5 	bl	8009cfc <TIM_OC6_SetConfig>
      break;
 8009312:	e002      	b.n	800931a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	75fb      	strb	r3, [r7, #23]
      break;
 8009318:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009322:	7dfb      	ldrb	r3, [r7, #23]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3718      	adds	r7, #24
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009342:	2b01      	cmp	r3, #1
 8009344:	d101      	bne.n	800934a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009346:	2302      	movs	r3, #2
 8009348:	e0ff      	b.n	800954a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2b14      	cmp	r3, #20
 8009356:	f200 80f0 	bhi.w	800953a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800935a:	a201      	add	r2, pc, #4	; (adr r2, 8009360 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800935c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009360:	080093b5 	.word	0x080093b5
 8009364:	0800953b 	.word	0x0800953b
 8009368:	0800953b 	.word	0x0800953b
 800936c:	0800953b 	.word	0x0800953b
 8009370:	080093f5 	.word	0x080093f5
 8009374:	0800953b 	.word	0x0800953b
 8009378:	0800953b 	.word	0x0800953b
 800937c:	0800953b 	.word	0x0800953b
 8009380:	08009437 	.word	0x08009437
 8009384:	0800953b 	.word	0x0800953b
 8009388:	0800953b 	.word	0x0800953b
 800938c:	0800953b 	.word	0x0800953b
 8009390:	08009477 	.word	0x08009477
 8009394:	0800953b 	.word	0x0800953b
 8009398:	0800953b 	.word	0x0800953b
 800939c:	0800953b 	.word	0x0800953b
 80093a0:	080094b9 	.word	0x080094b9
 80093a4:	0800953b 	.word	0x0800953b
 80093a8:	0800953b 	.word	0x0800953b
 80093ac:	0800953b 	.word	0x0800953b
 80093b0:	080094f9 	.word	0x080094f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68b9      	ldr	r1, [r7, #8]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 fa2e 	bl	800981c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	699a      	ldr	r2, [r3, #24]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f042 0208 	orr.w	r2, r2, #8
 80093ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	699a      	ldr	r2, [r3, #24]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f022 0204 	bic.w	r2, r2, #4
 80093de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6999      	ldr	r1, [r3, #24]
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	691a      	ldr	r2, [r3, #16]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	430a      	orrs	r2, r1
 80093f0:	619a      	str	r2, [r3, #24]
      break;
 80093f2:	e0a5      	b.n	8009540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68b9      	ldr	r1, [r7, #8]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 fa9e 	bl	800993c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	699a      	ldr	r2, [r3, #24]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800940e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	699a      	ldr	r2, [r3, #24]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800941e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6999      	ldr	r1, [r3, #24]
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	021a      	lsls	r2, r3, #8
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	430a      	orrs	r2, r1
 8009432:	619a      	str	r2, [r3, #24]
      break;
 8009434:	e084      	b.n	8009540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68b9      	ldr	r1, [r7, #8]
 800943c:	4618      	mov	r0, r3
 800943e:	f000 fb07 	bl	8009a50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	69da      	ldr	r2, [r3, #28]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f042 0208 	orr.w	r2, r2, #8
 8009450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	69da      	ldr	r2, [r3, #28]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f022 0204 	bic.w	r2, r2, #4
 8009460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	69d9      	ldr	r1, [r3, #28]
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	691a      	ldr	r2, [r3, #16]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	430a      	orrs	r2, r1
 8009472:	61da      	str	r2, [r3, #28]
      break;
 8009474:	e064      	b.n	8009540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68b9      	ldr	r1, [r7, #8]
 800947c:	4618      	mov	r0, r3
 800947e:	f000 fb6f 	bl	8009b60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	69da      	ldr	r2, [r3, #28]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	69da      	ldr	r2, [r3, #28]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	69d9      	ldr	r1, [r3, #28]
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	021a      	lsls	r2, r3, #8
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	430a      	orrs	r2, r1
 80094b4:	61da      	str	r2, [r3, #28]
      break;
 80094b6:	e043      	b.n	8009540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68b9      	ldr	r1, [r7, #8]
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 fbb8 	bl	8009c34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f042 0208 	orr.w	r2, r2, #8
 80094d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f022 0204 	bic.w	r2, r2, #4
 80094e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	691a      	ldr	r2, [r3, #16]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	430a      	orrs	r2, r1
 80094f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80094f6:	e023      	b.n	8009540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68b9      	ldr	r1, [r7, #8]
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 fbfc 	bl	8009cfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009512:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009522:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	021a      	lsls	r2, r3, #8
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	430a      	orrs	r2, r1
 8009536:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009538:	e002      	b.n	8009540 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	75fb      	strb	r3, [r7, #23]
      break;
 800953e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009548:	7dfb      	ldrb	r3, [r7, #23]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop

08009554 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009568:	2b01      	cmp	r3, #1
 800956a:	d101      	bne.n	8009570 <HAL_TIM_ConfigClockSource+0x1c>
 800956c:	2302      	movs	r3, #2
 800956e:	e0b6      	b.n	80096de <HAL_TIM_ConfigClockSource+0x18a>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800958e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800959a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095ac:	d03e      	beq.n	800962c <HAL_TIM_ConfigClockSource+0xd8>
 80095ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095b2:	f200 8087 	bhi.w	80096c4 <HAL_TIM_ConfigClockSource+0x170>
 80095b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095ba:	f000 8086 	beq.w	80096ca <HAL_TIM_ConfigClockSource+0x176>
 80095be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095c2:	d87f      	bhi.n	80096c4 <HAL_TIM_ConfigClockSource+0x170>
 80095c4:	2b70      	cmp	r3, #112	; 0x70
 80095c6:	d01a      	beq.n	80095fe <HAL_TIM_ConfigClockSource+0xaa>
 80095c8:	2b70      	cmp	r3, #112	; 0x70
 80095ca:	d87b      	bhi.n	80096c4 <HAL_TIM_ConfigClockSource+0x170>
 80095cc:	2b60      	cmp	r3, #96	; 0x60
 80095ce:	d050      	beq.n	8009672 <HAL_TIM_ConfigClockSource+0x11e>
 80095d0:	2b60      	cmp	r3, #96	; 0x60
 80095d2:	d877      	bhi.n	80096c4 <HAL_TIM_ConfigClockSource+0x170>
 80095d4:	2b50      	cmp	r3, #80	; 0x50
 80095d6:	d03c      	beq.n	8009652 <HAL_TIM_ConfigClockSource+0xfe>
 80095d8:	2b50      	cmp	r3, #80	; 0x50
 80095da:	d873      	bhi.n	80096c4 <HAL_TIM_ConfigClockSource+0x170>
 80095dc:	2b40      	cmp	r3, #64	; 0x40
 80095de:	d058      	beq.n	8009692 <HAL_TIM_ConfigClockSource+0x13e>
 80095e0:	2b40      	cmp	r3, #64	; 0x40
 80095e2:	d86f      	bhi.n	80096c4 <HAL_TIM_ConfigClockSource+0x170>
 80095e4:	2b30      	cmp	r3, #48	; 0x30
 80095e6:	d064      	beq.n	80096b2 <HAL_TIM_ConfigClockSource+0x15e>
 80095e8:	2b30      	cmp	r3, #48	; 0x30
 80095ea:	d86b      	bhi.n	80096c4 <HAL_TIM_ConfigClockSource+0x170>
 80095ec:	2b20      	cmp	r3, #32
 80095ee:	d060      	beq.n	80096b2 <HAL_TIM_ConfigClockSource+0x15e>
 80095f0:	2b20      	cmp	r3, #32
 80095f2:	d867      	bhi.n	80096c4 <HAL_TIM_ConfigClockSource+0x170>
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d05c      	beq.n	80096b2 <HAL_TIM_ConfigClockSource+0x15e>
 80095f8:	2b10      	cmp	r3, #16
 80095fa:	d05a      	beq.n	80096b2 <HAL_TIM_ConfigClockSource+0x15e>
 80095fc:	e062      	b.n	80096c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800960e:	f000 fc55 	bl	8009ebc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009620:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	609a      	str	r2, [r3, #8]
      break;
 800962a:	e04f      	b.n	80096cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800963c:	f000 fc3e 	bl	8009ebc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	689a      	ldr	r2, [r3, #8]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800964e:	609a      	str	r2, [r3, #8]
      break;
 8009650:	e03c      	b.n	80096cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800965e:	461a      	mov	r2, r3
 8009660:	f000 fbb2 	bl	8009dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2150      	movs	r1, #80	; 0x50
 800966a:	4618      	mov	r0, r3
 800966c:	f000 fc0b 	bl	8009e86 <TIM_ITRx_SetConfig>
      break;
 8009670:	e02c      	b.n	80096cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800967e:	461a      	mov	r2, r3
 8009680:	f000 fbd1 	bl	8009e26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2160      	movs	r1, #96	; 0x60
 800968a:	4618      	mov	r0, r3
 800968c:	f000 fbfb 	bl	8009e86 <TIM_ITRx_SetConfig>
      break;
 8009690:	e01c      	b.n	80096cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800969e:	461a      	mov	r2, r3
 80096a0:	f000 fb92 	bl	8009dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2140      	movs	r1, #64	; 0x40
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 fbeb 	bl	8009e86 <TIM_ITRx_SetConfig>
      break;
 80096b0:	e00c      	b.n	80096cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4619      	mov	r1, r3
 80096bc:	4610      	mov	r0, r2
 80096be:	f000 fbe2 	bl	8009e86 <TIM_ITRx_SetConfig>
      break;
 80096c2:	e003      	b.n	80096cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	73fb      	strb	r3, [r7, #15]
      break;
 80096c8:	e000      	b.n	80096cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80096ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
	...

080096e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a40      	ldr	r2, [pc, #256]	; (80097fc <TIM_Base_SetConfig+0x114>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d013      	beq.n	8009728 <TIM_Base_SetConfig+0x40>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009706:	d00f      	beq.n	8009728 <TIM_Base_SetConfig+0x40>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a3d      	ldr	r2, [pc, #244]	; (8009800 <TIM_Base_SetConfig+0x118>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d00b      	beq.n	8009728 <TIM_Base_SetConfig+0x40>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a3c      	ldr	r2, [pc, #240]	; (8009804 <TIM_Base_SetConfig+0x11c>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d007      	beq.n	8009728 <TIM_Base_SetConfig+0x40>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a3b      	ldr	r2, [pc, #236]	; (8009808 <TIM_Base_SetConfig+0x120>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d003      	beq.n	8009728 <TIM_Base_SetConfig+0x40>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a3a      	ldr	r2, [pc, #232]	; (800980c <TIM_Base_SetConfig+0x124>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d108      	bne.n	800973a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800972e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	4313      	orrs	r3, r2
 8009738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a2f      	ldr	r2, [pc, #188]	; (80097fc <TIM_Base_SetConfig+0x114>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d01f      	beq.n	8009782 <TIM_Base_SetConfig+0x9a>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009748:	d01b      	beq.n	8009782 <TIM_Base_SetConfig+0x9a>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a2c      	ldr	r2, [pc, #176]	; (8009800 <TIM_Base_SetConfig+0x118>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d017      	beq.n	8009782 <TIM_Base_SetConfig+0x9a>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a2b      	ldr	r2, [pc, #172]	; (8009804 <TIM_Base_SetConfig+0x11c>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d013      	beq.n	8009782 <TIM_Base_SetConfig+0x9a>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a2a      	ldr	r2, [pc, #168]	; (8009808 <TIM_Base_SetConfig+0x120>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d00f      	beq.n	8009782 <TIM_Base_SetConfig+0x9a>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a29      	ldr	r2, [pc, #164]	; (800980c <TIM_Base_SetConfig+0x124>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d00b      	beq.n	8009782 <TIM_Base_SetConfig+0x9a>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a28      	ldr	r2, [pc, #160]	; (8009810 <TIM_Base_SetConfig+0x128>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d007      	beq.n	8009782 <TIM_Base_SetConfig+0x9a>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a27      	ldr	r2, [pc, #156]	; (8009814 <TIM_Base_SetConfig+0x12c>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d003      	beq.n	8009782 <TIM_Base_SetConfig+0x9a>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a26      	ldr	r2, [pc, #152]	; (8009818 <TIM_Base_SetConfig+0x130>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d108      	bne.n	8009794 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	4313      	orrs	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	4313      	orrs	r3, r2
 80097a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	689a      	ldr	r2, [r3, #8]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a10      	ldr	r2, [pc, #64]	; (80097fc <TIM_Base_SetConfig+0x114>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d00f      	beq.n	80097e0 <TIM_Base_SetConfig+0xf8>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a12      	ldr	r2, [pc, #72]	; (800980c <TIM_Base_SetConfig+0x124>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d00b      	beq.n	80097e0 <TIM_Base_SetConfig+0xf8>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a11      	ldr	r2, [pc, #68]	; (8009810 <TIM_Base_SetConfig+0x128>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d007      	beq.n	80097e0 <TIM_Base_SetConfig+0xf8>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a10      	ldr	r2, [pc, #64]	; (8009814 <TIM_Base_SetConfig+0x12c>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d003      	beq.n	80097e0 <TIM_Base_SetConfig+0xf8>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a0f      	ldr	r2, [pc, #60]	; (8009818 <TIM_Base_SetConfig+0x130>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d103      	bne.n	80097e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	691a      	ldr	r2, [r3, #16]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	615a      	str	r2, [r3, #20]
}
 80097ee:	bf00      	nop
 80097f0:	3714      	adds	r7, #20
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	40012c00 	.word	0x40012c00
 8009800:	40000400 	.word	0x40000400
 8009804:	40000800 	.word	0x40000800
 8009808:	40000c00 	.word	0x40000c00
 800980c:	40013400 	.word	0x40013400
 8009810:	40014000 	.word	0x40014000
 8009814:	40014400 	.word	0x40014400
 8009818:	40014800 	.word	0x40014800

0800981c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800981c:	b480      	push	{r7}
 800981e:	b087      	sub	sp, #28
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a1b      	ldr	r3, [r3, #32]
 800982a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a1b      	ldr	r3, [r3, #32]
 8009830:	f023 0201 	bic.w	r2, r3, #1
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800984a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800984e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f023 0303 	bic.w	r3, r3, #3
 8009856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	4313      	orrs	r3, r2
 8009860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	f023 0302 	bic.w	r3, r3, #2
 8009868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	4313      	orrs	r3, r2
 8009872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a2c      	ldr	r2, [pc, #176]	; (8009928 <TIM_OC1_SetConfig+0x10c>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d00f      	beq.n	800989c <TIM_OC1_SetConfig+0x80>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a2b      	ldr	r2, [pc, #172]	; (800992c <TIM_OC1_SetConfig+0x110>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d00b      	beq.n	800989c <TIM_OC1_SetConfig+0x80>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a2a      	ldr	r2, [pc, #168]	; (8009930 <TIM_OC1_SetConfig+0x114>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d007      	beq.n	800989c <TIM_OC1_SetConfig+0x80>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a29      	ldr	r2, [pc, #164]	; (8009934 <TIM_OC1_SetConfig+0x118>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d003      	beq.n	800989c <TIM_OC1_SetConfig+0x80>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4a28      	ldr	r2, [pc, #160]	; (8009938 <TIM_OC1_SetConfig+0x11c>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d10c      	bne.n	80098b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	f023 0308 	bic.w	r3, r3, #8
 80098a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	697a      	ldr	r2, [r7, #20]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	f023 0304 	bic.w	r3, r3, #4
 80098b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a1b      	ldr	r2, [pc, #108]	; (8009928 <TIM_OC1_SetConfig+0x10c>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d00f      	beq.n	80098de <TIM_OC1_SetConfig+0xc2>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a1a      	ldr	r2, [pc, #104]	; (800992c <TIM_OC1_SetConfig+0x110>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d00b      	beq.n	80098de <TIM_OC1_SetConfig+0xc2>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a19      	ldr	r2, [pc, #100]	; (8009930 <TIM_OC1_SetConfig+0x114>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d007      	beq.n	80098de <TIM_OC1_SetConfig+0xc2>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a18      	ldr	r2, [pc, #96]	; (8009934 <TIM_OC1_SetConfig+0x118>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d003      	beq.n	80098de <TIM_OC1_SetConfig+0xc2>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a17      	ldr	r2, [pc, #92]	; (8009938 <TIM_OC1_SetConfig+0x11c>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d111      	bne.n	8009902 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	4313      	orrs	r3, r2
 8009900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	685a      	ldr	r2, [r3, #4]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	621a      	str	r2, [r3, #32]
}
 800991c:	bf00      	nop
 800991e:	371c      	adds	r7, #28
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	40012c00 	.word	0x40012c00
 800992c:	40013400 	.word	0x40013400
 8009930:	40014000 	.word	0x40014000
 8009934:	40014400 	.word	0x40014400
 8009938:	40014800 	.word	0x40014800

0800993c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800993c:	b480      	push	{r7}
 800993e:	b087      	sub	sp, #28
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a1b      	ldr	r3, [r3, #32]
 8009950:	f023 0210 	bic.w	r2, r3, #16
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800996a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800996e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	021b      	lsls	r3, r3, #8
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	4313      	orrs	r3, r2
 8009982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	f023 0320 	bic.w	r3, r3, #32
 800998a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	011b      	lsls	r3, r3, #4
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	4313      	orrs	r3, r2
 8009996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a28      	ldr	r2, [pc, #160]	; (8009a3c <TIM_OC2_SetConfig+0x100>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d003      	beq.n	80099a8 <TIM_OC2_SetConfig+0x6c>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a27      	ldr	r2, [pc, #156]	; (8009a40 <TIM_OC2_SetConfig+0x104>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d10d      	bne.n	80099c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	011b      	lsls	r3, r3, #4
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a1d      	ldr	r2, [pc, #116]	; (8009a3c <TIM_OC2_SetConfig+0x100>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d00f      	beq.n	80099ec <TIM_OC2_SetConfig+0xb0>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a1c      	ldr	r2, [pc, #112]	; (8009a40 <TIM_OC2_SetConfig+0x104>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d00b      	beq.n	80099ec <TIM_OC2_SetConfig+0xb0>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a1b      	ldr	r2, [pc, #108]	; (8009a44 <TIM_OC2_SetConfig+0x108>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d007      	beq.n	80099ec <TIM_OC2_SetConfig+0xb0>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a1a      	ldr	r2, [pc, #104]	; (8009a48 <TIM_OC2_SetConfig+0x10c>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d003      	beq.n	80099ec <TIM_OC2_SetConfig+0xb0>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a19      	ldr	r2, [pc, #100]	; (8009a4c <TIM_OC2_SetConfig+0x110>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d113      	bne.n	8009a14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	695b      	ldr	r3, [r3, #20]
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	699b      	ldr	r3, [r3, #24]
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	693a      	ldr	r2, [r7, #16]
 8009a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	621a      	str	r2, [r3, #32]
}
 8009a2e:	bf00      	nop
 8009a30:	371c      	adds	r7, #28
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	40012c00 	.word	0x40012c00
 8009a40:	40013400 	.word	0x40013400
 8009a44:	40014000 	.word	0x40014000
 8009a48:	40014400 	.word	0x40014400
 8009a4c:	40014800 	.word	0x40014800

08009a50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a1b      	ldr	r3, [r3, #32]
 8009a64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	69db      	ldr	r3, [r3, #28]
 8009a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f023 0303 	bic.w	r3, r3, #3
 8009a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	021b      	lsls	r3, r3, #8
 8009aa4:	697a      	ldr	r2, [r7, #20]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a27      	ldr	r2, [pc, #156]	; (8009b4c <TIM_OC3_SetConfig+0xfc>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d003      	beq.n	8009aba <TIM_OC3_SetConfig+0x6a>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a26      	ldr	r2, [pc, #152]	; (8009b50 <TIM_OC3_SetConfig+0x100>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d10d      	bne.n	8009ad6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	021b      	lsls	r3, r3, #8
 8009ac8:	697a      	ldr	r2, [r7, #20]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a1c      	ldr	r2, [pc, #112]	; (8009b4c <TIM_OC3_SetConfig+0xfc>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d00f      	beq.n	8009afe <TIM_OC3_SetConfig+0xae>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a1b      	ldr	r2, [pc, #108]	; (8009b50 <TIM_OC3_SetConfig+0x100>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d00b      	beq.n	8009afe <TIM_OC3_SetConfig+0xae>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a1a      	ldr	r2, [pc, #104]	; (8009b54 <TIM_OC3_SetConfig+0x104>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d007      	beq.n	8009afe <TIM_OC3_SetConfig+0xae>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a19      	ldr	r2, [pc, #100]	; (8009b58 <TIM_OC3_SetConfig+0x108>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d003      	beq.n	8009afe <TIM_OC3_SetConfig+0xae>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a18      	ldr	r2, [pc, #96]	; (8009b5c <TIM_OC3_SetConfig+0x10c>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d113      	bne.n	8009b26 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	011b      	lsls	r3, r3, #4
 8009b14:	693a      	ldr	r2, [r7, #16]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	011b      	lsls	r3, r3, #4
 8009b20:	693a      	ldr	r2, [r7, #16]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	697a      	ldr	r2, [r7, #20]
 8009b3e:	621a      	str	r2, [r3, #32]
}
 8009b40:	bf00      	nop
 8009b42:	371c      	adds	r7, #28
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	40012c00 	.word	0x40012c00
 8009b50:	40013400 	.word	0x40013400
 8009b54:	40014000 	.word	0x40014000
 8009b58:	40014400 	.word	0x40014400
 8009b5c:	40014800 	.word	0x40014800

08009b60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a1b      	ldr	r3, [r3, #32]
 8009b74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	69db      	ldr	r3, [r3, #28]
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	021b      	lsls	r3, r3, #8
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	031b      	lsls	r3, r3, #12
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a18      	ldr	r2, [pc, #96]	; (8009c20 <TIM_OC4_SetConfig+0xc0>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d00f      	beq.n	8009be4 <TIM_OC4_SetConfig+0x84>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4a17      	ldr	r2, [pc, #92]	; (8009c24 <TIM_OC4_SetConfig+0xc4>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d00b      	beq.n	8009be4 <TIM_OC4_SetConfig+0x84>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	4a16      	ldr	r2, [pc, #88]	; (8009c28 <TIM_OC4_SetConfig+0xc8>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d007      	beq.n	8009be4 <TIM_OC4_SetConfig+0x84>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a15      	ldr	r2, [pc, #84]	; (8009c2c <TIM_OC4_SetConfig+0xcc>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d003      	beq.n	8009be4 <TIM_OC4_SetConfig+0x84>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a14      	ldr	r2, [pc, #80]	; (8009c30 <TIM_OC4_SetConfig+0xd0>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d109      	bne.n	8009bf8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	019b      	lsls	r3, r3, #6
 8009bf2:	697a      	ldr	r2, [r7, #20]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	697a      	ldr	r2, [r7, #20]
 8009bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	685a      	ldr	r2, [r3, #4]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	621a      	str	r2, [r3, #32]
}
 8009c12:	bf00      	nop
 8009c14:	371c      	adds	r7, #28
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	40012c00 	.word	0x40012c00
 8009c24:	40013400 	.word	0x40013400
 8009c28:	40014000 	.word	0x40014000
 8009c2c:	40014400 	.word	0x40014400
 8009c30:	40014800 	.word	0x40014800

08009c34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b087      	sub	sp, #28
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a1b      	ldr	r3, [r3, #32]
 8009c48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009c78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	041b      	lsls	r3, r3, #16
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a17      	ldr	r2, [pc, #92]	; (8009ce8 <TIM_OC5_SetConfig+0xb4>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d00f      	beq.n	8009cae <TIM_OC5_SetConfig+0x7a>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a16      	ldr	r2, [pc, #88]	; (8009cec <TIM_OC5_SetConfig+0xb8>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d00b      	beq.n	8009cae <TIM_OC5_SetConfig+0x7a>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a15      	ldr	r2, [pc, #84]	; (8009cf0 <TIM_OC5_SetConfig+0xbc>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d007      	beq.n	8009cae <TIM_OC5_SetConfig+0x7a>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a14      	ldr	r2, [pc, #80]	; (8009cf4 <TIM_OC5_SetConfig+0xc0>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d003      	beq.n	8009cae <TIM_OC5_SetConfig+0x7a>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a13      	ldr	r2, [pc, #76]	; (8009cf8 <TIM_OC5_SetConfig+0xc4>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d109      	bne.n	8009cc2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	021b      	lsls	r3, r3, #8
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	685a      	ldr	r2, [r3, #4]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	621a      	str	r2, [r3, #32]
}
 8009cdc:	bf00      	nop
 8009cde:	371c      	adds	r7, #28
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr
 8009ce8:	40012c00 	.word	0x40012c00
 8009cec:	40013400 	.word	0x40013400
 8009cf0:	40014000 	.word	0x40014000
 8009cf4:	40014400 	.word	0x40014400
 8009cf8:	40014800 	.word	0x40014800

08009cfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b087      	sub	sp, #28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a1b      	ldr	r3, [r3, #32]
 8009d10:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	021b      	lsls	r3, r3, #8
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	051b      	lsls	r3, r3, #20
 8009d4a:	693a      	ldr	r2, [r7, #16]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a18      	ldr	r2, [pc, #96]	; (8009db4 <TIM_OC6_SetConfig+0xb8>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d00f      	beq.n	8009d78 <TIM_OC6_SetConfig+0x7c>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a17      	ldr	r2, [pc, #92]	; (8009db8 <TIM_OC6_SetConfig+0xbc>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d00b      	beq.n	8009d78 <TIM_OC6_SetConfig+0x7c>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a16      	ldr	r2, [pc, #88]	; (8009dbc <TIM_OC6_SetConfig+0xc0>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d007      	beq.n	8009d78 <TIM_OC6_SetConfig+0x7c>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a15      	ldr	r2, [pc, #84]	; (8009dc0 <TIM_OC6_SetConfig+0xc4>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d003      	beq.n	8009d78 <TIM_OC6_SetConfig+0x7c>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a14      	ldr	r2, [pc, #80]	; (8009dc4 <TIM_OC6_SetConfig+0xc8>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d109      	bne.n	8009d8c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	695b      	ldr	r3, [r3, #20]
 8009d84:	029b      	lsls	r3, r3, #10
 8009d86:	697a      	ldr	r2, [r7, #20]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	697a      	ldr	r2, [r7, #20]
 8009d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	685a      	ldr	r2, [r3, #4]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	621a      	str	r2, [r3, #32]
}
 8009da6:	bf00      	nop
 8009da8:	371c      	adds	r7, #28
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	40012c00 	.word	0x40012c00
 8009db8:	40013400 	.word	0x40013400
 8009dbc:	40014000 	.word	0x40014000
 8009dc0:	40014400 	.word	0x40014400
 8009dc4:	40014800 	.word	0x40014800

08009dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b087      	sub	sp, #28
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6a1b      	ldr	r3, [r3, #32]
 8009dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	f023 0201 	bic.w	r2, r3, #1
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	011b      	lsls	r3, r3, #4
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f023 030a 	bic.w	r3, r3, #10
 8009e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	693a      	ldr	r2, [r7, #16]
 8009e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	621a      	str	r2, [r3, #32]
}
 8009e1a:	bf00      	nop
 8009e1c:	371c      	adds	r7, #28
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr

08009e26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b087      	sub	sp, #28
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	60f8      	str	r0, [r7, #12]
 8009e2e:	60b9      	str	r1, [r7, #8]
 8009e30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6a1b      	ldr	r3, [r3, #32]
 8009e36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6a1b      	ldr	r3, [r3, #32]
 8009e3c:	f023 0210 	bic.w	r2, r3, #16
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	699b      	ldr	r3, [r3, #24]
 8009e48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	031b      	lsls	r3, r3, #12
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	011b      	lsls	r3, r3, #4
 8009e68:	697a      	ldr	r2, [r7, #20]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	693a      	ldr	r2, [r7, #16]
 8009e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	621a      	str	r2, [r3, #32]
}
 8009e7a:	bf00      	nop
 8009e7c:	371c      	adds	r7, #28
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e86:	b480      	push	{r7}
 8009e88:	b085      	sub	sp, #20
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e9e:	683a      	ldr	r2, [r7, #0]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	f043 0307 	orr.w	r3, r3, #7
 8009ea8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	609a      	str	r2, [r3, #8]
}
 8009eb0:	bf00      	nop
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b087      	sub	sp, #28
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
 8009ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ed6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	021a      	lsls	r2, r3, #8
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	431a      	orrs	r2, r3
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	697a      	ldr	r2, [r7, #20]
 8009eee:	609a      	str	r2, [r3, #8]
}
 8009ef0:	bf00      	nop
 8009ef2:	371c      	adds	r7, #28
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b087      	sub	sp, #28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	f003 031f 	and.w	r3, r3, #31
 8009f0e:	2201      	movs	r2, #1
 8009f10:	fa02 f303 	lsl.w	r3, r2, r3
 8009f14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6a1a      	ldr	r2, [r3, #32]
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	43db      	mvns	r3, r3
 8009f1e:	401a      	ands	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6a1a      	ldr	r2, [r3, #32]
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	f003 031f 	and.w	r3, r3, #31
 8009f2e:	6879      	ldr	r1, [r7, #4]
 8009f30:	fa01 f303 	lsl.w	r3, r1, r3
 8009f34:	431a      	orrs	r2, r3
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	621a      	str	r2, [r3, #32]
}
 8009f3a:	bf00      	nop
 8009f3c:	371c      	adds	r7, #28
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
	...

08009f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d101      	bne.n	8009f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	e068      	b.n	800a032 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a2e      	ldr	r2, [pc, #184]	; (800a040 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d004      	beq.n	8009f94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a2d      	ldr	r2, [pc, #180]	; (800a044 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d108      	bne.n	8009fa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009f9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a1e      	ldr	r2, [pc, #120]	; (800a040 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d01d      	beq.n	800a006 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fd2:	d018      	beq.n	800a006 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a1b      	ldr	r2, [pc, #108]	; (800a048 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d013      	beq.n	800a006 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a1a      	ldr	r2, [pc, #104]	; (800a04c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d00e      	beq.n	800a006 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a18      	ldr	r2, [pc, #96]	; (800a050 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d009      	beq.n	800a006 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a13      	ldr	r2, [pc, #76]	; (800a044 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d004      	beq.n	800a006 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a14      	ldr	r2, [pc, #80]	; (800a054 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d10c      	bne.n	800a020 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a00c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	68ba      	ldr	r2, [r7, #8]
 800a014:	4313      	orrs	r3, r2
 800a016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3714      	adds	r7, #20
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	40012c00 	.word	0x40012c00
 800a044:	40013400 	.word	0x40013400
 800a048:	40000400 	.word	0x40000400
 800a04c:	40000800 	.word	0x40000800
 800a050:	40000c00 	.word	0x40000c00
 800a054:	40014000 	.word	0x40014000

0800a058 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a062:	2300      	movs	r3, #0
 800a064:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d101      	bne.n	800a074 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a070:	2302      	movs	r3, #2
 800a072:	e065      	b.n	800a140 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	4313      	orrs	r3, r2
 800a088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	4313      	orrs	r3, r2
 800a096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	695b      	ldr	r3, [r3, #20]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	041b      	lsls	r3, r3, #16
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a16      	ldr	r2, [pc, #88]	; (800a14c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d004      	beq.n	800a102 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a14      	ldr	r2, [pc, #80]	; (800a150 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d115      	bne.n	800a12e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10c:	051b      	lsls	r3, r3, #20
 800a10e:	4313      	orrs	r3, r2
 800a110:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	69db      	ldr	r3, [r3, #28]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	6a1b      	ldr	r3, [r3, #32]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr
 800a14c:	40012c00 	.word	0x40012c00
 800a150:	40013400 	.word	0x40013400

0800a154 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d101      	bne.n	800a166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e042      	b.n	800a1ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d106      	bne.n	800a17e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7f8 ff6d 	bl	8003058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2224      	movs	r2, #36	; 0x24
 800a182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f022 0201 	bic.w	r2, r2, #1
 800a194:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d002      	beq.n	800a1a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 fb24 	bl	800a7ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f825 	bl	800a1f4 <UART_SetConfig>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d101      	bne.n	800a1b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e01b      	b.n	800a1ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	685a      	ldr	r2, [r3, #4]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a1c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	689a      	ldr	r2, [r3, #8]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a1d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f042 0201 	orr.w	r2, r2, #1
 800a1e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 fba3 	bl	800a930 <UART_CheckIdleState>
 800a1ea:	4603      	mov	r3, r0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1f8:	b08c      	sub	sp, #48	; 0x30
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	689a      	ldr	r2, [r3, #8]
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	431a      	orrs	r2, r3
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	695b      	ldr	r3, [r3, #20]
 800a212:	431a      	orrs	r2, r3
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	69db      	ldr	r3, [r3, #28]
 800a218:	4313      	orrs	r3, r2
 800a21a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	4baa      	ldr	r3, [pc, #680]	; (800a4cc <UART_SetConfig+0x2d8>)
 800a224:	4013      	ands	r3, r2
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	6812      	ldr	r2, [r2, #0]
 800a22a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a22c:	430b      	orrs	r3, r1
 800a22e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	68da      	ldr	r2, [r3, #12]
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	430a      	orrs	r2, r1
 800a244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a9f      	ldr	r2, [pc, #636]	; (800a4d0 <UART_SetConfig+0x2dc>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d004      	beq.n	800a260 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a25c:	4313      	orrs	r3, r2
 800a25e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a26a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a26e:	697a      	ldr	r2, [r7, #20]
 800a270:	6812      	ldr	r2, [r2, #0]
 800a272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a274:	430b      	orrs	r3, r1
 800a276:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27e:	f023 010f 	bic.w	r1, r3, #15
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	430a      	orrs	r2, r1
 800a28c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a90      	ldr	r2, [pc, #576]	; (800a4d4 <UART_SetConfig+0x2e0>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d125      	bne.n	800a2e4 <UART_SetConfig+0xf0>
 800a298:	4b8f      	ldr	r3, [pc, #572]	; (800a4d8 <UART_SetConfig+0x2e4>)
 800a29a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a29e:	f003 0303 	and.w	r3, r3, #3
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	d81a      	bhi.n	800a2dc <UART_SetConfig+0xe8>
 800a2a6:	a201      	add	r2, pc, #4	; (adr r2, 800a2ac <UART_SetConfig+0xb8>)
 800a2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ac:	0800a2bd 	.word	0x0800a2bd
 800a2b0:	0800a2cd 	.word	0x0800a2cd
 800a2b4:	0800a2c5 	.word	0x0800a2c5
 800a2b8:	0800a2d5 	.word	0x0800a2d5
 800a2bc:	2301      	movs	r3, #1
 800a2be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2c2:	e116      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2ca:	e112      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a2cc:	2304      	movs	r3, #4
 800a2ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2d2:	e10e      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a2d4:	2308      	movs	r3, #8
 800a2d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2da:	e10a      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a2dc:	2310      	movs	r3, #16
 800a2de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2e2:	e106      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a7c      	ldr	r2, [pc, #496]	; (800a4dc <UART_SetConfig+0x2e8>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d138      	bne.n	800a360 <UART_SetConfig+0x16c>
 800a2ee:	4b7a      	ldr	r3, [pc, #488]	; (800a4d8 <UART_SetConfig+0x2e4>)
 800a2f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f4:	f003 030c 	and.w	r3, r3, #12
 800a2f8:	2b0c      	cmp	r3, #12
 800a2fa:	d82d      	bhi.n	800a358 <UART_SetConfig+0x164>
 800a2fc:	a201      	add	r2, pc, #4	; (adr r2, 800a304 <UART_SetConfig+0x110>)
 800a2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a302:	bf00      	nop
 800a304:	0800a339 	.word	0x0800a339
 800a308:	0800a359 	.word	0x0800a359
 800a30c:	0800a359 	.word	0x0800a359
 800a310:	0800a359 	.word	0x0800a359
 800a314:	0800a349 	.word	0x0800a349
 800a318:	0800a359 	.word	0x0800a359
 800a31c:	0800a359 	.word	0x0800a359
 800a320:	0800a359 	.word	0x0800a359
 800a324:	0800a341 	.word	0x0800a341
 800a328:	0800a359 	.word	0x0800a359
 800a32c:	0800a359 	.word	0x0800a359
 800a330:	0800a359 	.word	0x0800a359
 800a334:	0800a351 	.word	0x0800a351
 800a338:	2300      	movs	r3, #0
 800a33a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a33e:	e0d8      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a340:	2302      	movs	r3, #2
 800a342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a346:	e0d4      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a348:	2304      	movs	r3, #4
 800a34a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a34e:	e0d0      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a350:	2308      	movs	r3, #8
 800a352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a356:	e0cc      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a358:	2310      	movs	r3, #16
 800a35a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a35e:	e0c8      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a5e      	ldr	r2, [pc, #376]	; (800a4e0 <UART_SetConfig+0x2ec>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d125      	bne.n	800a3b6 <UART_SetConfig+0x1c2>
 800a36a:	4b5b      	ldr	r3, [pc, #364]	; (800a4d8 <UART_SetConfig+0x2e4>)
 800a36c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a370:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a374:	2b30      	cmp	r3, #48	; 0x30
 800a376:	d016      	beq.n	800a3a6 <UART_SetConfig+0x1b2>
 800a378:	2b30      	cmp	r3, #48	; 0x30
 800a37a:	d818      	bhi.n	800a3ae <UART_SetConfig+0x1ba>
 800a37c:	2b20      	cmp	r3, #32
 800a37e:	d00a      	beq.n	800a396 <UART_SetConfig+0x1a2>
 800a380:	2b20      	cmp	r3, #32
 800a382:	d814      	bhi.n	800a3ae <UART_SetConfig+0x1ba>
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <UART_SetConfig+0x19a>
 800a388:	2b10      	cmp	r3, #16
 800a38a:	d008      	beq.n	800a39e <UART_SetConfig+0x1aa>
 800a38c:	e00f      	b.n	800a3ae <UART_SetConfig+0x1ba>
 800a38e:	2300      	movs	r3, #0
 800a390:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a394:	e0ad      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a396:	2302      	movs	r3, #2
 800a398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a39c:	e0a9      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a39e:	2304      	movs	r3, #4
 800a3a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3a4:	e0a5      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a3a6:	2308      	movs	r3, #8
 800a3a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3ac:	e0a1      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a3ae:	2310      	movs	r3, #16
 800a3b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3b4:	e09d      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a4a      	ldr	r2, [pc, #296]	; (800a4e4 <UART_SetConfig+0x2f0>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d125      	bne.n	800a40c <UART_SetConfig+0x218>
 800a3c0:	4b45      	ldr	r3, [pc, #276]	; (800a4d8 <UART_SetConfig+0x2e4>)
 800a3c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a3ca:	2bc0      	cmp	r3, #192	; 0xc0
 800a3cc:	d016      	beq.n	800a3fc <UART_SetConfig+0x208>
 800a3ce:	2bc0      	cmp	r3, #192	; 0xc0
 800a3d0:	d818      	bhi.n	800a404 <UART_SetConfig+0x210>
 800a3d2:	2b80      	cmp	r3, #128	; 0x80
 800a3d4:	d00a      	beq.n	800a3ec <UART_SetConfig+0x1f8>
 800a3d6:	2b80      	cmp	r3, #128	; 0x80
 800a3d8:	d814      	bhi.n	800a404 <UART_SetConfig+0x210>
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d002      	beq.n	800a3e4 <UART_SetConfig+0x1f0>
 800a3de:	2b40      	cmp	r3, #64	; 0x40
 800a3e0:	d008      	beq.n	800a3f4 <UART_SetConfig+0x200>
 800a3e2:	e00f      	b.n	800a404 <UART_SetConfig+0x210>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3ea:	e082      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a3ec:	2302      	movs	r3, #2
 800a3ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3f2:	e07e      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a3f4:	2304      	movs	r3, #4
 800a3f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3fa:	e07a      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a3fc:	2308      	movs	r3, #8
 800a3fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a402:	e076      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a404:	2310      	movs	r3, #16
 800a406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a40a:	e072      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a35      	ldr	r2, [pc, #212]	; (800a4e8 <UART_SetConfig+0x2f4>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d12a      	bne.n	800a46c <UART_SetConfig+0x278>
 800a416:	4b30      	ldr	r3, [pc, #192]	; (800a4d8 <UART_SetConfig+0x2e4>)
 800a418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a41c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a420:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a424:	d01a      	beq.n	800a45c <UART_SetConfig+0x268>
 800a426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a42a:	d81b      	bhi.n	800a464 <UART_SetConfig+0x270>
 800a42c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a430:	d00c      	beq.n	800a44c <UART_SetConfig+0x258>
 800a432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a436:	d815      	bhi.n	800a464 <UART_SetConfig+0x270>
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d003      	beq.n	800a444 <UART_SetConfig+0x250>
 800a43c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a440:	d008      	beq.n	800a454 <UART_SetConfig+0x260>
 800a442:	e00f      	b.n	800a464 <UART_SetConfig+0x270>
 800a444:	2300      	movs	r3, #0
 800a446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a44a:	e052      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a44c:	2302      	movs	r3, #2
 800a44e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a452:	e04e      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a454:	2304      	movs	r3, #4
 800a456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a45a:	e04a      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a45c:	2308      	movs	r3, #8
 800a45e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a462:	e046      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a464:	2310      	movs	r3, #16
 800a466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a46a:	e042      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a17      	ldr	r2, [pc, #92]	; (800a4d0 <UART_SetConfig+0x2dc>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d13a      	bne.n	800a4ec <UART_SetConfig+0x2f8>
 800a476:	4b18      	ldr	r3, [pc, #96]	; (800a4d8 <UART_SetConfig+0x2e4>)
 800a478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a47c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a480:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a484:	d01a      	beq.n	800a4bc <UART_SetConfig+0x2c8>
 800a486:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a48a:	d81b      	bhi.n	800a4c4 <UART_SetConfig+0x2d0>
 800a48c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a490:	d00c      	beq.n	800a4ac <UART_SetConfig+0x2b8>
 800a492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a496:	d815      	bhi.n	800a4c4 <UART_SetConfig+0x2d0>
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d003      	beq.n	800a4a4 <UART_SetConfig+0x2b0>
 800a49c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4a0:	d008      	beq.n	800a4b4 <UART_SetConfig+0x2c0>
 800a4a2:	e00f      	b.n	800a4c4 <UART_SetConfig+0x2d0>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4aa:	e022      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a4ac:	2302      	movs	r3, #2
 800a4ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4b2:	e01e      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a4b4:	2304      	movs	r3, #4
 800a4b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4ba:	e01a      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a4bc:	2308      	movs	r3, #8
 800a4be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4c2:	e016      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a4c4:	2310      	movs	r3, #16
 800a4c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4ca:	e012      	b.n	800a4f2 <UART_SetConfig+0x2fe>
 800a4cc:	cfff69f3 	.word	0xcfff69f3
 800a4d0:	40008000 	.word	0x40008000
 800a4d4:	40013800 	.word	0x40013800
 800a4d8:	40021000 	.word	0x40021000
 800a4dc:	40004400 	.word	0x40004400
 800a4e0:	40004800 	.word	0x40004800
 800a4e4:	40004c00 	.word	0x40004c00
 800a4e8:	40005000 	.word	0x40005000
 800a4ec:	2310      	movs	r3, #16
 800a4ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4aae      	ldr	r2, [pc, #696]	; (800a7b0 <UART_SetConfig+0x5bc>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	f040 8097 	bne.w	800a62c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a4fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a502:	2b08      	cmp	r3, #8
 800a504:	d823      	bhi.n	800a54e <UART_SetConfig+0x35a>
 800a506:	a201      	add	r2, pc, #4	; (adr r2, 800a50c <UART_SetConfig+0x318>)
 800a508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50c:	0800a531 	.word	0x0800a531
 800a510:	0800a54f 	.word	0x0800a54f
 800a514:	0800a539 	.word	0x0800a539
 800a518:	0800a54f 	.word	0x0800a54f
 800a51c:	0800a53f 	.word	0x0800a53f
 800a520:	0800a54f 	.word	0x0800a54f
 800a524:	0800a54f 	.word	0x0800a54f
 800a528:	0800a54f 	.word	0x0800a54f
 800a52c:	0800a547 	.word	0x0800a547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a530:	f7fb feca 	bl	80062c8 <HAL_RCC_GetPCLK1Freq>
 800a534:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a536:	e010      	b.n	800a55a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a538:	4b9e      	ldr	r3, [pc, #632]	; (800a7b4 <UART_SetConfig+0x5c0>)
 800a53a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a53c:	e00d      	b.n	800a55a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a53e:	f7fb fe2b 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 800a542:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a544:	e009      	b.n	800a55a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a54a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a54c:	e005      	b.n	800a55a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a54e:	2300      	movs	r3, #0
 800a550:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a558:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f000 8130 	beq.w	800a7c2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a566:	4a94      	ldr	r2, [pc, #592]	; (800a7b8 <UART_SetConfig+0x5c4>)
 800a568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a56c:	461a      	mov	r2, r3
 800a56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a570:	fbb3 f3f2 	udiv	r3, r3, r2
 800a574:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	685a      	ldr	r2, [r3, #4]
 800a57a:	4613      	mov	r3, r2
 800a57c:	005b      	lsls	r3, r3, #1
 800a57e:	4413      	add	r3, r2
 800a580:	69ba      	ldr	r2, [r7, #24]
 800a582:	429a      	cmp	r2, r3
 800a584:	d305      	bcc.n	800a592 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a58c:	69ba      	ldr	r2, [r7, #24]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d903      	bls.n	800a59a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a598:	e113      	b.n	800a7c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59c:	2200      	movs	r2, #0
 800a59e:	60bb      	str	r3, [r7, #8]
 800a5a0:	60fa      	str	r2, [r7, #12]
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a6:	4a84      	ldr	r2, [pc, #528]	; (800a7b8 <UART_SetConfig+0x5c4>)
 800a5a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	603b      	str	r3, [r7, #0]
 800a5b2:	607a      	str	r2, [r7, #4]
 800a5b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5bc:	f7f6 fb0e 	bl	8000bdc <__aeabi_uldivmod>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	4610      	mov	r0, r2
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	f04f 0200 	mov.w	r2, #0
 800a5cc:	f04f 0300 	mov.w	r3, #0
 800a5d0:	020b      	lsls	r3, r1, #8
 800a5d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a5d6:	0202      	lsls	r2, r0, #8
 800a5d8:	6979      	ldr	r1, [r7, #20]
 800a5da:	6849      	ldr	r1, [r1, #4]
 800a5dc:	0849      	lsrs	r1, r1, #1
 800a5de:	2000      	movs	r0, #0
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	eb12 0804 	adds.w	r8, r2, r4
 800a5e8:	eb43 0905 	adc.w	r9, r3, r5
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	469a      	mov	sl, r3
 800a5f4:	4693      	mov	fp, r2
 800a5f6:	4652      	mov	r2, sl
 800a5f8:	465b      	mov	r3, fp
 800a5fa:	4640      	mov	r0, r8
 800a5fc:	4649      	mov	r1, r9
 800a5fe:	f7f6 faed 	bl	8000bdc <__aeabi_uldivmod>
 800a602:	4602      	mov	r2, r0
 800a604:	460b      	mov	r3, r1
 800a606:	4613      	mov	r3, r2
 800a608:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a60a:	6a3b      	ldr	r3, [r7, #32]
 800a60c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a610:	d308      	bcc.n	800a624 <UART_SetConfig+0x430>
 800a612:	6a3b      	ldr	r3, [r7, #32]
 800a614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a618:	d204      	bcs.n	800a624 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6a3a      	ldr	r2, [r7, #32]
 800a620:	60da      	str	r2, [r3, #12]
 800a622:	e0ce      	b.n	800a7c2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a62a:	e0ca      	b.n	800a7c2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	69db      	ldr	r3, [r3, #28]
 800a630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a634:	d166      	bne.n	800a704 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a636:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a63a:	2b08      	cmp	r3, #8
 800a63c:	d827      	bhi.n	800a68e <UART_SetConfig+0x49a>
 800a63e:	a201      	add	r2, pc, #4	; (adr r2, 800a644 <UART_SetConfig+0x450>)
 800a640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a644:	0800a669 	.word	0x0800a669
 800a648:	0800a671 	.word	0x0800a671
 800a64c:	0800a679 	.word	0x0800a679
 800a650:	0800a68f 	.word	0x0800a68f
 800a654:	0800a67f 	.word	0x0800a67f
 800a658:	0800a68f 	.word	0x0800a68f
 800a65c:	0800a68f 	.word	0x0800a68f
 800a660:	0800a68f 	.word	0x0800a68f
 800a664:	0800a687 	.word	0x0800a687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a668:	f7fb fe2e 	bl	80062c8 <HAL_RCC_GetPCLK1Freq>
 800a66c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a66e:	e014      	b.n	800a69a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a670:	f7fb fe40 	bl	80062f4 <HAL_RCC_GetPCLK2Freq>
 800a674:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a676:	e010      	b.n	800a69a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a678:	4b4e      	ldr	r3, [pc, #312]	; (800a7b4 <UART_SetConfig+0x5c0>)
 800a67a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a67c:	e00d      	b.n	800a69a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a67e:	f7fb fd8b 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 800a682:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a684:	e009      	b.n	800a69a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a68a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a68c:	e005      	b.n	800a69a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a68e:	2300      	movs	r3, #0
 800a690:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a698:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f000 8090 	beq.w	800a7c2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a6:	4a44      	ldr	r2, [pc, #272]	; (800a7b8 <UART_SetConfig+0x5c4>)
 800a6a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6b4:	005a      	lsls	r2, r3, #1
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	085b      	lsrs	r3, r3, #1
 800a6bc:	441a      	add	r2, r3
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6c6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6c8:	6a3b      	ldr	r3, [r7, #32]
 800a6ca:	2b0f      	cmp	r3, #15
 800a6cc:	d916      	bls.n	800a6fc <UART_SetConfig+0x508>
 800a6ce:	6a3b      	ldr	r3, [r7, #32]
 800a6d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6d4:	d212      	bcs.n	800a6fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6d6:	6a3b      	ldr	r3, [r7, #32]
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	f023 030f 	bic.w	r3, r3, #15
 800a6de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a6e0:	6a3b      	ldr	r3, [r7, #32]
 800a6e2:	085b      	lsrs	r3, r3, #1
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	f003 0307 	and.w	r3, r3, #7
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	8bfb      	ldrh	r3, [r7, #30]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	8bfa      	ldrh	r2, [r7, #30]
 800a6f8:	60da      	str	r2, [r3, #12]
 800a6fa:	e062      	b.n	800a7c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a702:	e05e      	b.n	800a7c2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a704:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a708:	2b08      	cmp	r3, #8
 800a70a:	d828      	bhi.n	800a75e <UART_SetConfig+0x56a>
 800a70c:	a201      	add	r2, pc, #4	; (adr r2, 800a714 <UART_SetConfig+0x520>)
 800a70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a712:	bf00      	nop
 800a714:	0800a739 	.word	0x0800a739
 800a718:	0800a741 	.word	0x0800a741
 800a71c:	0800a749 	.word	0x0800a749
 800a720:	0800a75f 	.word	0x0800a75f
 800a724:	0800a74f 	.word	0x0800a74f
 800a728:	0800a75f 	.word	0x0800a75f
 800a72c:	0800a75f 	.word	0x0800a75f
 800a730:	0800a75f 	.word	0x0800a75f
 800a734:	0800a757 	.word	0x0800a757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a738:	f7fb fdc6 	bl	80062c8 <HAL_RCC_GetPCLK1Freq>
 800a73c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a73e:	e014      	b.n	800a76a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a740:	f7fb fdd8 	bl	80062f4 <HAL_RCC_GetPCLK2Freq>
 800a744:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a746:	e010      	b.n	800a76a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a748:	4b1a      	ldr	r3, [pc, #104]	; (800a7b4 <UART_SetConfig+0x5c0>)
 800a74a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a74c:	e00d      	b.n	800a76a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a74e:	f7fb fd23 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 800a752:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a754:	e009      	b.n	800a76a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a75a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a75c:	e005      	b.n	800a76a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a75e:	2300      	movs	r3, #0
 800a760:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a768:	bf00      	nop
    }

    if (pclk != 0U)
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d028      	beq.n	800a7c2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	4a10      	ldr	r2, [pc, #64]	; (800a7b8 <UART_SetConfig+0x5c4>)
 800a776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a77a:	461a      	mov	r2, r3
 800a77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	085b      	lsrs	r3, r3, #1
 800a788:	441a      	add	r2, r3
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a792:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a794:	6a3b      	ldr	r3, [r7, #32]
 800a796:	2b0f      	cmp	r3, #15
 800a798:	d910      	bls.n	800a7bc <UART_SetConfig+0x5c8>
 800a79a:	6a3b      	ldr	r3, [r7, #32]
 800a79c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7a0:	d20c      	bcs.n	800a7bc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a7a2:	6a3b      	ldr	r3, [r7, #32]
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	60da      	str	r2, [r3, #12]
 800a7ac:	e009      	b.n	800a7c2 <UART_SetConfig+0x5ce>
 800a7ae:	bf00      	nop
 800a7b0:	40008000 	.word	0x40008000
 800a7b4:	00f42400 	.word	0x00f42400
 800a7b8:	08010ae4 	.word	0x08010ae4
      }
      else
      {
        ret = HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a7de:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3730      	adds	r7, #48	; 0x30
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a7ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f8:	f003 0308 	and.w	r3, r3, #8
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00a      	beq.n	800a816 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	430a      	orrs	r2, r1
 800a814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a81a:	f003 0301 	and.w	r3, r3, #1
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00a      	beq.n	800a838 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	430a      	orrs	r2, r1
 800a836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a83c:	f003 0302 	and.w	r3, r3, #2
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00a      	beq.n	800a85a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	430a      	orrs	r2, r1
 800a858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a85e:	f003 0304 	and.w	r3, r3, #4
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00a      	beq.n	800a87c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	430a      	orrs	r2, r1
 800a87a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a880:	f003 0310 	and.w	r3, r3, #16
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00a      	beq.n	800a89e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	430a      	orrs	r2, r1
 800a89c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8a2:	f003 0320 	and.w	r3, r3, #32
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00a      	beq.n	800a8c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	430a      	orrs	r2, r1
 800a8be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d01a      	beq.n	800a902 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	430a      	orrs	r2, r1
 800a8e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8ea:	d10a      	bne.n	800a902 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	430a      	orrs	r2, r1
 800a900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00a      	beq.n	800a924 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	430a      	orrs	r2, r1
 800a922:	605a      	str	r2, [r3, #4]
  }
}
 800a924:	bf00      	nop
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b098      	sub	sp, #96	; 0x60
 800a934:	af02      	add	r7, sp, #8
 800a936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a940:	f7f8 fe68 	bl	8003614 <HAL_GetTick>
 800a944:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 0308 	and.w	r3, r3, #8
 800a950:	2b08      	cmp	r3, #8
 800a952:	d12f      	bne.n	800a9b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a954:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a958:	9300      	str	r3, [sp, #0]
 800a95a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a95c:	2200      	movs	r2, #0
 800a95e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f88e 	bl	800aa84 <UART_WaitOnFlagUntilTimeout>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d022      	beq.n	800a9b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a976:	e853 3f00 	ldrex	r3, [r3]
 800a97a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a97e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a982:	653b      	str	r3, [r7, #80]	; 0x50
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	461a      	mov	r2, r3
 800a98a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a98c:	647b      	str	r3, [r7, #68]	; 0x44
 800a98e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a990:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a994:	e841 2300 	strex	r3, r2, [r1]
 800a998:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1e6      	bne.n	800a96e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2220      	movs	r2, #32
 800a9a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	e063      	b.n	800aa7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 0304 	and.w	r3, r3, #4
 800a9be:	2b04      	cmp	r3, #4
 800a9c0:	d149      	bne.n	800aa56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f857 	bl	800aa84 <UART_WaitOnFlagUntilTimeout>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d03c      	beq.n	800aa56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e4:	e853 3f00 	ldrex	r3, [r3]
 800a9e8:	623b      	str	r3, [r7, #32]
   return(result);
 800a9ea:	6a3b      	ldr	r3, [r7, #32]
 800a9ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9fa:	633b      	str	r3, [r7, #48]	; 0x30
 800a9fc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa02:	e841 2300 	strex	r3, r2, [r1]
 800aa06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1e6      	bne.n	800a9dc <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	3308      	adds	r3, #8
 800aa14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	e853 3f00 	ldrex	r3, [r3]
 800aa1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f023 0301 	bic.w	r3, r3, #1
 800aa24:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	3308      	adds	r3, #8
 800aa2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa2e:	61fa      	str	r2, [r7, #28]
 800aa30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa32:	69b9      	ldr	r1, [r7, #24]
 800aa34:	69fa      	ldr	r2, [r7, #28]
 800aa36:	e841 2300 	strex	r3, r2, [r1]
 800aa3a:	617b      	str	r3, [r7, #20]
   return(result);
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1e5      	bne.n	800aa0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2220      	movs	r2, #32
 800aa46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa52:	2303      	movs	r3, #3
 800aa54:	e012      	b.n	800aa7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2220      	movs	r2, #32
 800aa5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2220      	movs	r2, #32
 800aa62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3758      	adds	r7, #88	; 0x58
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	603b      	str	r3, [r7, #0]
 800aa90:	4613      	mov	r3, r2
 800aa92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa94:	e049      	b.n	800ab2a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9c:	d045      	beq.n	800ab2a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa9e:	f7f8 fdb9 	bl	8003614 <HAL_GetTick>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	69ba      	ldr	r2, [r7, #24]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d302      	bcc.n	800aab4 <UART_WaitOnFlagUntilTimeout+0x30>
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aab4:	2303      	movs	r3, #3
 800aab6:	e048      	b.n	800ab4a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 0304 	and.w	r3, r3, #4
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d031      	beq.n	800ab2a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	69db      	ldr	r3, [r3, #28]
 800aacc:	f003 0308 	and.w	r3, r3, #8
 800aad0:	2b08      	cmp	r3, #8
 800aad2:	d110      	bne.n	800aaf6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2208      	movs	r2, #8
 800aada:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f000 f838 	bl	800ab52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2208      	movs	r2, #8
 800aae6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e029      	b.n	800ab4a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	69db      	ldr	r3, [r3, #28]
 800aafc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab04:	d111      	bne.n	800ab2a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f000 f81e 	bl	800ab52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2220      	movs	r2, #32
 800ab1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2200      	movs	r2, #0
 800ab22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ab26:	2303      	movs	r3, #3
 800ab28:	e00f      	b.n	800ab4a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	69da      	ldr	r2, [r3, #28]
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	4013      	ands	r3, r2
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	bf0c      	ite	eq
 800ab3a:	2301      	moveq	r3, #1
 800ab3c:	2300      	movne	r3, #0
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	461a      	mov	r2, r3
 800ab42:	79fb      	ldrb	r3, [r7, #7]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d0a6      	beq.n	800aa96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab52:	b480      	push	{r7}
 800ab54:	b095      	sub	sp, #84	; 0x54
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab62:	e853 3f00 	ldrex	r3, [r3]
 800ab66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	461a      	mov	r2, r3
 800ab76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab78:	643b      	str	r3, [r7, #64]	; 0x40
 800ab7a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab80:	e841 2300 	strex	r3, r2, [r1]
 800ab84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1e6      	bne.n	800ab5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	3308      	adds	r3, #8
 800ab92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab94:	6a3b      	ldr	r3, [r7, #32]
 800ab96:	e853 3f00 	ldrex	r3, [r3]
 800ab9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aba2:	f023 0301 	bic.w	r3, r3, #1
 800aba6:	64bb      	str	r3, [r7, #72]	; 0x48
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	3308      	adds	r3, #8
 800abae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800abb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abb8:	e841 2300 	strex	r3, r2, [r1]
 800abbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1e3      	bne.n	800ab8c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d118      	bne.n	800abfe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	e853 3f00 	ldrex	r3, [r3]
 800abd8:	60bb      	str	r3, [r7, #8]
   return(result);
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	f023 0310 	bic.w	r3, r3, #16
 800abe0:	647b      	str	r3, [r7, #68]	; 0x44
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abea:	61bb      	str	r3, [r7, #24]
 800abec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abee:	6979      	ldr	r1, [r7, #20]
 800abf0:	69ba      	ldr	r2, [r7, #24]
 800abf2:	e841 2300 	strex	r3, r2, [r1]
 800abf6:	613b      	str	r3, [r7, #16]
   return(result);
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1e6      	bne.n	800abcc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2220      	movs	r2, #32
 800ac02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ac12:	bf00      	nop
 800ac14:	3754      	adds	r7, #84	; 0x54
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b085      	sub	sp, #20
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d101      	bne.n	800ac34 <HAL_UARTEx_DisableFifoMode+0x16>
 800ac30:	2302      	movs	r3, #2
 800ac32:	e027      	b.n	800ac84 <HAL_UARTEx_DisableFifoMode+0x66>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2224      	movs	r2, #36	; 0x24
 800ac40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f022 0201 	bic.w	r2, r2, #1
 800ac5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ac62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2220      	movs	r2, #32
 800ac76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d101      	bne.n	800aca8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aca4:	2302      	movs	r3, #2
 800aca6:	e02d      	b.n	800ad04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2224      	movs	r2, #36	; 0x24
 800acb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f022 0201 	bic.w	r2, r2, #1
 800acce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	430a      	orrs	r2, r1
 800ace2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 f84f 	bl	800ad88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2220      	movs	r2, #32
 800acf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ad02:	2300      	movs	r3, #0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3710      	adds	r7, #16
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d101      	bne.n	800ad24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad20:	2302      	movs	r3, #2
 800ad22:	e02d      	b.n	800ad80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2224      	movs	r2, #36	; 0x24
 800ad30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f022 0201 	bic.w	r2, r2, #1
 800ad4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	683a      	ldr	r2, [r7, #0]
 800ad5c:	430a      	orrs	r2, r1
 800ad5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f811 	bl	800ad88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	68fa      	ldr	r2, [r7, #12]
 800ad6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2220      	movs	r2, #32
 800ad72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d108      	bne.n	800adaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ada8:	e031      	b.n	800ae0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800adaa:	2308      	movs	r3, #8
 800adac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800adae:	2308      	movs	r3, #8
 800adb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	0e5b      	lsrs	r3, r3, #25
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	f003 0307 	and.w	r3, r3, #7
 800adc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	0f5b      	lsrs	r3, r3, #29
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	f003 0307 	and.w	r3, r3, #7
 800add0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800add2:	7bbb      	ldrb	r3, [r7, #14]
 800add4:	7b3a      	ldrb	r2, [r7, #12]
 800add6:	4911      	ldr	r1, [pc, #68]	; (800ae1c <UARTEx_SetNbDataToProcess+0x94>)
 800add8:	5c8a      	ldrb	r2, [r1, r2]
 800adda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800adde:	7b3a      	ldrb	r2, [r7, #12]
 800ade0:	490f      	ldr	r1, [pc, #60]	; (800ae20 <UARTEx_SetNbDataToProcess+0x98>)
 800ade2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ade4:	fb93 f3f2 	sdiv	r3, r3, r2
 800ade8:	b29a      	uxth	r2, r3
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
 800adf2:	7b7a      	ldrb	r2, [r7, #13]
 800adf4:	4909      	ldr	r1, [pc, #36]	; (800ae1c <UARTEx_SetNbDataToProcess+0x94>)
 800adf6:	5c8a      	ldrb	r2, [r1, r2]
 800adf8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800adfc:	7b7a      	ldrb	r2, [r7, #13]
 800adfe:	4908      	ldr	r1, [pc, #32]	; (800ae20 <UARTEx_SetNbDataToProcess+0x98>)
 800ae00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae02:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ae0e:	bf00      	nop
 800ae10:	3714      	adds	r7, #20
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	08010afc 	.word	0x08010afc
 800ae20:	08010b04 	.word	0x08010b04

0800ae24 <arm_max_f32>:
 800ae24:	f101 3cff 	add.w	ip, r1, #4294967295
 800ae28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae2a:	4607      	mov	r7, r0
 800ae2c:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800ae30:	ecf7 7a01 	vldmia	r7!, {s15}
 800ae34:	d060      	beq.n	800aef8 <arm_max_f32+0xd4>
 800ae36:	2400      	movs	r4, #0
 800ae38:	3014      	adds	r0, #20
 800ae3a:	4625      	mov	r5, r4
 800ae3c:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800ae40:	ed10 7a04 	vldr	s14, [r0, #-16]
 800ae44:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae4c:	bf48      	it	mi
 800ae4e:	eef0 7a47 	vmovmi.f32	s15, s14
 800ae52:	ed10 7a03 	vldr	s14, [r0, #-12]
 800ae56:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae5a:	bf48      	it	mi
 800ae5c:	1c65      	addmi	r5, r4, #1
 800ae5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae62:	bf48      	it	mi
 800ae64:	eef0 7a47 	vmovmi.f32	s15, s14
 800ae68:	ed10 7a02 	vldr	s14, [r0, #-8]
 800ae6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae70:	bf48      	it	mi
 800ae72:	1ca5      	addmi	r5, r4, #2
 800ae74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae78:	bf48      	it	mi
 800ae7a:	eef0 7a47 	vmovmi.f32	s15, s14
 800ae7e:	ed10 7a01 	vldr	s14, [r0, #-4]
 800ae82:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae86:	bf48      	it	mi
 800ae88:	1ce5      	addmi	r5, r4, #3
 800ae8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae8e:	f104 0404 	add.w	r4, r4, #4
 800ae92:	bf44      	itt	mi
 800ae94:	eef0 7a47 	vmovmi.f32	s15, s14
 800ae98:	4625      	movmi	r5, r4
 800ae9a:	42a6      	cmp	r6, r4
 800ae9c:	f100 0010 	add.w	r0, r0, #16
 800aea0:	d1ce      	bne.n	800ae40 <arm_max_f32+0x1c>
 800aea2:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800aea6:	f01c 0003 	ands.w	r0, ip, #3
 800aeaa:	d021      	beq.n	800aef0 <arm_max_f32+0xcc>
 800aeac:	ed97 7a00 	vldr	s14, [r7]
 800aeb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aeb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb8:	bfc4      	itt	gt
 800aeba:	eef0 7a47 	vmovgt.f32	s15, s14
 800aebe:	1a0d      	subgt	r5, r1, r0
 800aec0:	3801      	subs	r0, #1
 800aec2:	d015      	beq.n	800aef0 <arm_max_f32+0xcc>
 800aec4:	ed97 7a01 	vldr	s14, [r7, #4]
 800aec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed0:	bf44      	itt	mi
 800aed2:	eef0 7a47 	vmovmi.f32	s15, s14
 800aed6:	1a0d      	submi	r5, r1, r0
 800aed8:	2801      	cmp	r0, #1
 800aeda:	d009      	beq.n	800aef0 <arm_max_f32+0xcc>
 800aedc:	ed97 7a02 	vldr	s14, [r7, #8]
 800aee0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee8:	bfc4      	itt	gt
 800aeea:	eef0 7a47 	vmovgt.f32	s15, s14
 800aeee:	4665      	movgt	r5, ip
 800aef0:	edc2 7a00 	vstr	s15, [r2]
 800aef4:	601d      	str	r5, [r3, #0]
 800aef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aef8:	4675      	mov	r5, lr
 800aefa:	e7d4      	b.n	800aea6 <arm_max_f32+0x82>

0800aefc <arm_rfft_32_fast_init_f32>:
 800aefc:	b178      	cbz	r0, 800af1e <arm_rfft_32_fast_init_f32+0x22>
 800aefe:	b430      	push	{r4, r5}
 800af00:	4908      	ldr	r1, [pc, #32]	; (800af24 <arm_rfft_32_fast_init_f32+0x28>)
 800af02:	4a09      	ldr	r2, [pc, #36]	; (800af28 <arm_rfft_32_fast_init_f32+0x2c>)
 800af04:	2310      	movs	r3, #16
 800af06:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800af0a:	8003      	strh	r3, [r0, #0]
 800af0c:	2520      	movs	r5, #32
 800af0e:	2414      	movs	r4, #20
 800af10:	4b06      	ldr	r3, [pc, #24]	; (800af2c <arm_rfft_32_fast_init_f32+0x30>)
 800af12:	8205      	strh	r5, [r0, #16]
 800af14:	8184      	strh	r4, [r0, #12]
 800af16:	6143      	str	r3, [r0, #20]
 800af18:	bc30      	pop	{r4, r5}
 800af1a:	2000      	movs	r0, #0
 800af1c:	4770      	bx	lr
 800af1e:	f04f 30ff 	mov.w	r0, #4294967295
 800af22:	4770      	bx	lr
 800af24:	08011abc 	.word	0x08011abc
 800af28:	080163f4 	.word	0x080163f4
 800af2c:	0801f174 	.word	0x0801f174

0800af30 <arm_rfft_64_fast_init_f32>:
 800af30:	b178      	cbz	r0, 800af52 <arm_rfft_64_fast_init_f32+0x22>
 800af32:	b430      	push	{r4, r5}
 800af34:	4908      	ldr	r1, [pc, #32]	; (800af58 <arm_rfft_64_fast_init_f32+0x28>)
 800af36:	4a09      	ldr	r2, [pc, #36]	; (800af5c <arm_rfft_64_fast_init_f32+0x2c>)
 800af38:	2320      	movs	r3, #32
 800af3a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800af3e:	8003      	strh	r3, [r0, #0]
 800af40:	2540      	movs	r5, #64	; 0x40
 800af42:	2430      	movs	r4, #48	; 0x30
 800af44:	4b06      	ldr	r3, [pc, #24]	; (800af60 <arm_rfft_64_fast_init_f32+0x30>)
 800af46:	8205      	strh	r5, [r0, #16]
 800af48:	8184      	strh	r4, [r0, #12]
 800af4a:	6143      	str	r3, [r0, #20]
 800af4c:	bc30      	pop	{r4, r5}
 800af4e:	2000      	movs	r0, #0
 800af50:	4770      	bx	lr
 800af52:	f04f 30ff 	mov.w	r0, #4294967295
 800af56:	4770      	bx	lr
 800af58:	08013c14 	.word	0x08013c14
 800af5c:	0801ac74 	.word	0x0801ac74
 800af60:	080239f4 	.word	0x080239f4

0800af64 <arm_rfft_256_fast_init_f32>:
 800af64:	b180      	cbz	r0, 800af88 <arm_rfft_256_fast_init_f32+0x24>
 800af66:	b430      	push	{r4, r5}
 800af68:	4909      	ldr	r1, [pc, #36]	; (800af90 <arm_rfft_256_fast_init_f32+0x2c>)
 800af6a:	4a0a      	ldr	r2, [pc, #40]	; (800af94 <arm_rfft_256_fast_init_f32+0x30>)
 800af6c:	2380      	movs	r3, #128	; 0x80
 800af6e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800af72:	8003      	strh	r3, [r0, #0]
 800af74:	f44f 7580 	mov.w	r5, #256	; 0x100
 800af78:	24d0      	movs	r4, #208	; 0xd0
 800af7a:	4b07      	ldr	r3, [pc, #28]	; (800af98 <arm_rfft_256_fast_init_f32+0x34>)
 800af7c:	8205      	strh	r5, [r0, #16]
 800af7e:	8184      	strh	r4, [r0, #12]
 800af80:	6143      	str	r3, [r0, #20]
 800af82:	bc30      	pop	{r4, r5}
 800af84:	2000      	movs	r0, #0
 800af86:	4770      	bx	lr
 800af88:	f04f 30ff 	mov.w	r0, #4294967295
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	0801191c 	.word	0x0801191c
 800af94:	08015ff4 	.word	0x08015ff4
 800af98:	0801ed74 	.word	0x0801ed74

0800af9c <arm_rfft_512_fast_init_f32>:
 800af9c:	b190      	cbz	r0, 800afc4 <arm_rfft_512_fast_init_f32+0x28>
 800af9e:	b430      	push	{r4, r5}
 800afa0:	490a      	ldr	r1, [pc, #40]	; (800afcc <arm_rfft_512_fast_init_f32+0x30>)
 800afa2:	4a0b      	ldr	r2, [pc, #44]	; (800afd0 <arm_rfft_512_fast_init_f32+0x34>)
 800afa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afa8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800afac:	8003      	strh	r3, [r0, #0]
 800afae:	f44f 7500 	mov.w	r5, #512	; 0x200
 800afb2:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800afb6:	4b07      	ldr	r3, [pc, #28]	; (800afd4 <arm_rfft_512_fast_init_f32+0x38>)
 800afb8:	8205      	strh	r5, [r0, #16]
 800afba:	8184      	strh	r4, [r0, #12]
 800afbc:	6143      	str	r3, [r0, #20]
 800afbe:	bc30      	pop	{r4, r5}
 800afc0:	2000      	movs	r0, #0
 800afc2:	4770      	bx	lr
 800afc4:	f04f 30ff 	mov.w	r0, #4294967295
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	080138a4 	.word	0x080138a4
 800afd0:	0801a474 	.word	0x0801a474
 800afd4:	080231f4 	.word	0x080231f4

0800afd8 <arm_rfft_1024_fast_init_f32>:
 800afd8:	b190      	cbz	r0, 800b000 <arm_rfft_1024_fast_init_f32+0x28>
 800afda:	b430      	push	{r4, r5}
 800afdc:	490a      	ldr	r1, [pc, #40]	; (800b008 <arm_rfft_1024_fast_init_f32+0x30>)
 800afde:	4a0b      	ldr	r2, [pc, #44]	; (800b00c <arm_rfft_1024_fast_init_f32+0x34>)
 800afe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afe4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800afe8:	8003      	strh	r3, [r0, #0]
 800afea:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800afee:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800aff2:	4b07      	ldr	r3, [pc, #28]	; (800b010 <arm_rfft_1024_fast_init_f32+0x38>)
 800aff4:	8205      	strh	r5, [r0, #16]
 800aff6:	8184      	strh	r4, [r0, #12]
 800aff8:	6143      	str	r3, [r0, #20]
 800affa:	bc30      	pop	{r4, r5}
 800affc:	2000      	movs	r0, #0
 800affe:	4770      	bx	lr
 800b000:	f04f 30ff 	mov.w	r0, #4294967295
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	08013c74 	.word	0x08013c74
 800b00c:	0801ad74 	.word	0x0801ad74
 800b010:	0801bd74 	.word	0x0801bd74

0800b014 <arm_rfft_2048_fast_init_f32>:
 800b014:	b190      	cbz	r0, 800b03c <arm_rfft_2048_fast_init_f32+0x28>
 800b016:	b430      	push	{r4, r5}
 800b018:	490a      	ldr	r1, [pc, #40]	; (800b044 <arm_rfft_2048_fast_init_f32+0x30>)
 800b01a:	4a0b      	ldr	r2, [pc, #44]	; (800b048 <arm_rfft_2048_fast_init_f32+0x34>)
 800b01c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b020:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b024:	8003      	strh	r3, [r0, #0]
 800b026:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800b02a:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800b02e:	4b07      	ldr	r3, [pc, #28]	; (800b04c <arm_rfft_2048_fast_init_f32+0x38>)
 800b030:	8205      	strh	r5, [r0, #16]
 800b032:	8184      	strh	r4, [r0, #12]
 800b034:	6143      	str	r3, [r0, #20]
 800b036:	bc30      	pop	{r4, r5}
 800b038:	2000      	movs	r0, #0
 800b03a:	4770      	bx	lr
 800b03c:	f04f 30ff 	mov.w	r0, #4294967295
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	08010b0c 	.word	0x08010b0c
 800b048:	08013ff4 	.word	0x08013ff4
 800b04c:	0801cd74 	.word	0x0801cd74

0800b050 <arm_rfft_4096_fast_init_f32>:
 800b050:	b190      	cbz	r0, 800b078 <arm_rfft_4096_fast_init_f32+0x28>
 800b052:	b430      	push	{r4, r5}
 800b054:	490a      	ldr	r1, [pc, #40]	; (800b080 <arm_rfft_4096_fast_init_f32+0x30>)
 800b056:	4a0b      	ldr	r2, [pc, #44]	; (800b084 <arm_rfft_4096_fast_init_f32+0x34>)
 800b058:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b05c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b060:	8003      	strh	r3, [r0, #0]
 800b062:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800b066:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800b06a:	4b07      	ldr	r3, [pc, #28]	; (800b088 <arm_rfft_4096_fast_init_f32+0x38>)
 800b06c:	8205      	strh	r5, [r0, #16]
 800b06e:	8184      	strh	r4, [r0, #12]
 800b070:	6143      	str	r3, [r0, #20]
 800b072:	bc30      	pop	{r4, r5}
 800b074:	2000      	movs	r0, #0
 800b076:	4770      	bx	lr
 800b078:	f04f 30ff 	mov.w	r0, #4294967295
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	08011ae4 	.word	0x08011ae4
 800b084:	08016474 	.word	0x08016474
 800b088:	0801f1f4 	.word	0x0801f1f4

0800b08c <arm_rfft_fast_init_f32>:
 800b08c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b090:	d01f      	beq.n	800b0d2 <arm_rfft_fast_init_f32+0x46>
 800b092:	d90b      	bls.n	800b0ac <arm_rfft_fast_init_f32+0x20>
 800b094:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800b098:	d019      	beq.n	800b0ce <arm_rfft_fast_init_f32+0x42>
 800b09a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800b09e:	d012      	beq.n	800b0c6 <arm_rfft_fast_init_f32+0x3a>
 800b0a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b0a4:	d00d      	beq.n	800b0c2 <arm_rfft_fast_init_f32+0x36>
 800b0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0aa:	4770      	bx	lr
 800b0ac:	2940      	cmp	r1, #64	; 0x40
 800b0ae:	d00c      	beq.n	800b0ca <arm_rfft_fast_init_f32+0x3e>
 800b0b0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b0b4:	d003      	beq.n	800b0be <arm_rfft_fast_init_f32+0x32>
 800b0b6:	2920      	cmp	r1, #32
 800b0b8:	d1f5      	bne.n	800b0a6 <arm_rfft_fast_init_f32+0x1a>
 800b0ba:	4b07      	ldr	r3, [pc, #28]	; (800b0d8 <arm_rfft_fast_init_f32+0x4c>)
 800b0bc:	4718      	bx	r3
 800b0be:	4b07      	ldr	r3, [pc, #28]	; (800b0dc <arm_rfft_fast_init_f32+0x50>)
 800b0c0:	4718      	bx	r3
 800b0c2:	4b07      	ldr	r3, [pc, #28]	; (800b0e0 <arm_rfft_fast_init_f32+0x54>)
 800b0c4:	4718      	bx	r3
 800b0c6:	4b07      	ldr	r3, [pc, #28]	; (800b0e4 <arm_rfft_fast_init_f32+0x58>)
 800b0c8:	4718      	bx	r3
 800b0ca:	4b07      	ldr	r3, [pc, #28]	; (800b0e8 <arm_rfft_fast_init_f32+0x5c>)
 800b0cc:	e7f6      	b.n	800b0bc <arm_rfft_fast_init_f32+0x30>
 800b0ce:	4b07      	ldr	r3, [pc, #28]	; (800b0ec <arm_rfft_fast_init_f32+0x60>)
 800b0d0:	e7f4      	b.n	800b0bc <arm_rfft_fast_init_f32+0x30>
 800b0d2:	4b07      	ldr	r3, [pc, #28]	; (800b0f0 <arm_rfft_fast_init_f32+0x64>)
 800b0d4:	e7f2      	b.n	800b0bc <arm_rfft_fast_init_f32+0x30>
 800b0d6:	bf00      	nop
 800b0d8:	0800aefd 	.word	0x0800aefd
 800b0dc:	0800af65 	.word	0x0800af65
 800b0e0:	0800afd9 	.word	0x0800afd9
 800b0e4:	0800b051 	.word	0x0800b051
 800b0e8:	0800af31 	.word	0x0800af31
 800b0ec:	0800b015 	.word	0x0800b015
 800b0f0:	0800af9d 	.word	0x0800af9d

0800b0f4 <stage_rfft_f32>:
 800b0f4:	b410      	push	{r4}
 800b0f6:	edd1 7a00 	vldr	s15, [r1]
 800b0fa:	ed91 7a01 	vldr	s14, [r1, #4]
 800b0fe:	8804      	ldrh	r4, [r0, #0]
 800b100:	6940      	ldr	r0, [r0, #20]
 800b102:	ee37 7a07 	vadd.f32	s14, s14, s14
 800b106:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b10a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800b10e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b112:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b116:	3c01      	subs	r4, #1
 800b118:	ee26 7a84 	vmul.f32	s14, s13, s8
 800b11c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b120:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800b124:	ed82 7a00 	vstr	s14, [r2]
 800b128:	edc2 7a01 	vstr	s15, [r2, #4]
 800b12c:	3010      	adds	r0, #16
 800b12e:	3210      	adds	r2, #16
 800b130:	3b08      	subs	r3, #8
 800b132:	3110      	adds	r1, #16
 800b134:	ed11 5a02 	vldr	s10, [r1, #-8]
 800b138:	ed93 7a02 	vldr	s14, [r3, #8]
 800b13c:	ed50 6a02 	vldr	s13, [r0, #-8]
 800b140:	edd3 4a03 	vldr	s9, [r3, #12]
 800b144:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b148:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b14c:	ee77 5a45 	vsub.f32	s11, s14, s10
 800b150:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b154:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800b158:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800b15c:	ee66 5a25 	vmul.f32	s11, s12, s11
 800b160:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800b164:	ee37 7a23 	vadd.f32	s14, s14, s7
 800b168:	ee66 6a85 	vmul.f32	s13, s13, s10
 800b16c:	ee26 6a05 	vmul.f32	s12, s12, s10
 800b170:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b174:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b178:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b17c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b180:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b184:	3c01      	subs	r4, #1
 800b186:	ed02 7a02 	vstr	s14, [r2, #-8]
 800b18a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b18e:	f1a3 0308 	sub.w	r3, r3, #8
 800b192:	f101 0108 	add.w	r1, r1, #8
 800b196:	f100 0008 	add.w	r0, r0, #8
 800b19a:	f102 0208 	add.w	r2, r2, #8
 800b19e:	d1c9      	bne.n	800b134 <stage_rfft_f32+0x40>
 800b1a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop

0800b1a8 <merge_rfft_f32>:
 800b1a8:	b410      	push	{r4}
 800b1aa:	edd1 7a00 	vldr	s15, [r1]
 800b1ae:	edd1 6a01 	vldr	s13, [r1, #4]
 800b1b2:	8804      	ldrh	r4, [r0, #0]
 800b1b4:	6940      	ldr	r0, [r0, #20]
 800b1b6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b1ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b1be:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800b1c2:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b1c6:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b1ca:	3c01      	subs	r4, #1
 800b1cc:	ed82 7a00 	vstr	s14, [r2]
 800b1d0:	edc2 7a01 	vstr	s15, [r2, #4]
 800b1d4:	b3dc      	cbz	r4, 800b24e <merge_rfft_f32+0xa6>
 800b1d6:	00e3      	lsls	r3, r4, #3
 800b1d8:	3b08      	subs	r3, #8
 800b1da:	440b      	add	r3, r1
 800b1dc:	3010      	adds	r0, #16
 800b1de:	3210      	adds	r2, #16
 800b1e0:	3110      	adds	r1, #16
 800b1e2:	ed11 5a02 	vldr	s10, [r1, #-8]
 800b1e6:	ed93 7a02 	vldr	s14, [r3, #8]
 800b1ea:	ed50 6a02 	vldr	s13, [r0, #-8]
 800b1ee:	edd3 4a03 	vldr	s9, [r3, #12]
 800b1f2:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b1f6:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b1fa:	ee75 5a47 	vsub.f32	s11, s10, s14
 800b1fe:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b202:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800b206:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800b20a:	ee66 5a25 	vmul.f32	s11, s12, s11
 800b20e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800b212:	ee37 7a63 	vsub.f32	s14, s14, s7
 800b216:	ee66 6a85 	vmul.f32	s13, s13, s10
 800b21a:	ee26 6a05 	vmul.f32	s12, s12, s10
 800b21e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b222:	ee37 7a46 	vsub.f32	s14, s14, s12
 800b226:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b22a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b22e:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b232:	3c01      	subs	r4, #1
 800b234:	ed02 7a02 	vstr	s14, [r2, #-8]
 800b238:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b23c:	f1a3 0308 	sub.w	r3, r3, #8
 800b240:	f101 0108 	add.w	r1, r1, #8
 800b244:	f100 0008 	add.w	r0, r0, #8
 800b248:	f102 0208 	add.w	r2, r2, #8
 800b24c:	d1c9      	bne.n	800b1e2 <merge_rfft_f32+0x3a>
 800b24e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <arm_rfft_fast_f32>:
 800b254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b258:	8a05      	ldrh	r5, [r0, #16]
 800b25a:	086d      	lsrs	r5, r5, #1
 800b25c:	8005      	strh	r5, [r0, #0]
 800b25e:	4604      	mov	r4, r0
 800b260:	4616      	mov	r6, r2
 800b262:	461d      	mov	r5, r3
 800b264:	b14b      	cbz	r3, 800b27a <arm_rfft_fast_f32+0x26>
 800b266:	f7ff ff9f 	bl	800b1a8 <merge_rfft_f32>
 800b26a:	462a      	mov	r2, r5
 800b26c:	4631      	mov	r1, r6
 800b26e:	4620      	mov	r0, r4
 800b270:	2301      	movs	r3, #1
 800b272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b276:	f000 bb33 	b.w	800b8e0 <arm_cfft_f32>
 800b27a:	460f      	mov	r7, r1
 800b27c:	461a      	mov	r2, r3
 800b27e:	2301      	movs	r3, #1
 800b280:	f000 fb2e 	bl	800b8e0 <arm_cfft_f32>
 800b284:	4632      	mov	r2, r6
 800b286:	4639      	mov	r1, r7
 800b288:	4620      	mov	r0, r4
 800b28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b28e:	f7ff bf31 	b.w	800b0f4 <stage_rfft_f32>
 800b292:	bf00      	nop

0800b294 <arm_cfft_radix8by2_f32>:
 800b294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b298:	ed2d 8b08 	vpush	{d8-d11}
 800b29c:	4607      	mov	r7, r0
 800b29e:	4608      	mov	r0, r1
 800b2a0:	f8b7 c000 	ldrh.w	ip, [r7]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800b2aa:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800b2ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800b2b2:	f000 80b0 	beq.w	800b416 <arm_cfft_radix8by2_f32+0x182>
 800b2b6:	008c      	lsls	r4, r1, #2
 800b2b8:	3410      	adds	r4, #16
 800b2ba:	f100 0310 	add.w	r3, r0, #16
 800b2be:	1906      	adds	r6, r0, r4
 800b2c0:	3210      	adds	r2, #16
 800b2c2:	4444      	add	r4, r8
 800b2c4:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800b2c8:	f108 0510 	add.w	r5, r8, #16
 800b2cc:	ed15 2a04 	vldr	s4, [r5, #-16]
 800b2d0:	ed55 2a03 	vldr	s5, [r5, #-12]
 800b2d4:	ed54 4a04 	vldr	s9, [r4, #-16]
 800b2d8:	ed14 4a03 	vldr	s8, [r4, #-12]
 800b2dc:	ed14 6a02 	vldr	s12, [r4, #-8]
 800b2e0:	ed54 5a01 	vldr	s11, [r4, #-4]
 800b2e4:	ed53 3a04 	vldr	s7, [r3, #-16]
 800b2e8:	ed15 0a02 	vldr	s0, [r5, #-8]
 800b2ec:	ed55 0a01 	vldr	s1, [r5, #-4]
 800b2f0:	ed56 6a04 	vldr	s13, [r6, #-16]
 800b2f4:	ed16 3a03 	vldr	s6, [r6, #-12]
 800b2f8:	ed13 7a03 	vldr	s14, [r3, #-12]
 800b2fc:	ed13 5a02 	vldr	s10, [r3, #-8]
 800b300:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b304:	ed16 1a02 	vldr	s2, [r6, #-8]
 800b308:	ed56 1a01 	vldr	s3, [r6, #-4]
 800b30c:	ee73 ba82 	vadd.f32	s23, s7, s4
 800b310:	ee37 ba22 	vadd.f32	s22, s14, s5
 800b314:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800b318:	ee33 9a04 	vadd.f32	s18, s6, s8
 800b31c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800b320:	ee75 aa00 	vadd.f32	s21, s10, s0
 800b324:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800b328:	ee71 8a06 	vadd.f32	s17, s2, s12
 800b32c:	ed43 ba04 	vstr	s23, [r3, #-16]
 800b330:	ed03 ba03 	vstr	s22, [r3, #-12]
 800b334:	ed43 aa02 	vstr	s21, [r3, #-8]
 800b338:	ed03 aa01 	vstr	s20, [r3, #-4]
 800b33c:	ed06 8a01 	vstr	s16, [r6, #-4]
 800b340:	ed46 9a04 	vstr	s19, [r6, #-16]
 800b344:	ed06 9a03 	vstr	s18, [r6, #-12]
 800b348:	ed46 8a02 	vstr	s17, [r6, #-8]
 800b34c:	ee37 7a62 	vsub.f32	s14, s14, s5
 800b350:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800b354:	ee34 4a43 	vsub.f32	s8, s8, s6
 800b358:	ed52 6a03 	vldr	s13, [r2, #-12]
 800b35c:	ed12 3a04 	vldr	s6, [r2, #-16]
 800b360:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800b364:	ee27 8a26 	vmul.f32	s16, s14, s13
 800b368:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800b36c:	ee23 2a83 	vmul.f32	s4, s7, s6
 800b370:	ee64 4a83 	vmul.f32	s9, s9, s6
 800b374:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800b378:	ee27 7a03 	vmul.f32	s14, s14, s6
 800b37c:	ee64 6a26 	vmul.f32	s13, s8, s13
 800b380:	ee24 4a03 	vmul.f32	s8, s8, s6
 800b384:	ee37 7a63 	vsub.f32	s14, s14, s7
 800b388:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b38c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800b390:	ee32 3a08 	vadd.f32	s6, s4, s16
 800b394:	ed05 7a03 	vstr	s14, [r5, #-12]
 800b398:	ed05 3a04 	vstr	s6, [r5, #-16]
 800b39c:	ed04 4a04 	vstr	s8, [r4, #-16]
 800b3a0:	ed44 6a03 	vstr	s13, [r4, #-12]
 800b3a4:	ed12 7a01 	vldr	s14, [r2, #-4]
 800b3a8:	ee76 6a41 	vsub.f32	s13, s12, s2
 800b3ac:	ee35 5a40 	vsub.f32	s10, s10, s0
 800b3b0:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800b3b4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b3b8:	ed52 5a02 	vldr	s11, [r2, #-8]
 800b3bc:	ee67 3a87 	vmul.f32	s7, s15, s14
 800b3c0:	ee66 4a87 	vmul.f32	s9, s13, s14
 800b3c4:	ee25 4a25 	vmul.f32	s8, s10, s11
 800b3c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b3cc:	ee25 5a07 	vmul.f32	s10, s10, s14
 800b3d0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800b3d4:	ee26 7a07 	vmul.f32	s14, s12, s14
 800b3d8:	ee26 6a25 	vmul.f32	s12, s12, s11
 800b3dc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b3e0:	ee74 5a23 	vadd.f32	s11, s8, s7
 800b3e4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800b3e8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b3ec:	3310      	adds	r3, #16
 800b3ee:	4563      	cmp	r3, ip
 800b3f0:	ed45 5a02 	vstr	s11, [r5, #-8]
 800b3f4:	f106 0610 	add.w	r6, r6, #16
 800b3f8:	ed45 7a01 	vstr	s15, [r5, #-4]
 800b3fc:	f102 0210 	add.w	r2, r2, #16
 800b400:	ed04 6a02 	vstr	s12, [r4, #-8]
 800b404:	ed04 7a01 	vstr	s14, [r4, #-4]
 800b408:	f105 0510 	add.w	r5, r5, #16
 800b40c:	f104 0410 	add.w	r4, r4, #16
 800b410:	f47f af5c 	bne.w	800b2cc <arm_cfft_radix8by2_f32+0x38>
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	b28c      	uxth	r4, r1
 800b418:	4621      	mov	r1, r4
 800b41a:	2302      	movs	r3, #2
 800b41c:	f000 fb3c 	bl	800ba98 <arm_radix8_butterfly_f32>
 800b420:	ecbd 8b08 	vpop	{d8-d11}
 800b424:	4621      	mov	r1, r4
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	4640      	mov	r0, r8
 800b42a:	2302      	movs	r3, #2
 800b42c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b430:	f000 bb32 	b.w	800ba98 <arm_radix8_butterfly_f32>

0800b434 <arm_cfft_radix8by4_f32>:
 800b434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b438:	ed2d 8b0a 	vpush	{d8-d12}
 800b43c:	b08d      	sub	sp, #52	; 0x34
 800b43e:	460d      	mov	r5, r1
 800b440:	910b      	str	r1, [sp, #44]	; 0x2c
 800b442:	8801      	ldrh	r1, [r0, #0]
 800b444:	6842      	ldr	r2, [r0, #4]
 800b446:	900a      	str	r0, [sp, #40]	; 0x28
 800b448:	0849      	lsrs	r1, r1, #1
 800b44a:	008b      	lsls	r3, r1, #2
 800b44c:	18ee      	adds	r6, r5, r3
 800b44e:	18f0      	adds	r0, r6, r3
 800b450:	edd0 5a00 	vldr	s11, [r0]
 800b454:	edd5 7a00 	vldr	s15, [r5]
 800b458:	ed96 7a00 	vldr	s14, [r6]
 800b45c:	edd0 3a01 	vldr	s7, [r0, #4]
 800b460:	ed96 4a01 	vldr	s8, [r6, #4]
 800b464:	ed95 5a01 	vldr	s10, [r5, #4]
 800b468:	9008      	str	r0, [sp, #32]
 800b46a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800b46e:	18c7      	adds	r7, r0, r3
 800b470:	edd7 4a00 	vldr	s9, [r7]
 800b474:	ed97 3a01 	vldr	s6, [r7, #4]
 800b478:	9701      	str	r7, [sp, #4]
 800b47a:	ee77 6a06 	vadd.f32	s13, s14, s12
 800b47e:	462c      	mov	r4, r5
 800b480:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b484:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b488:	ee16 ca90 	vmov	ip, s13
 800b48c:	f844 cb08 	str.w	ip, [r4], #8
 800b490:	ee75 6a23 	vadd.f32	s13, s10, s7
 800b494:	edd6 5a01 	vldr	s11, [r6, #4]
 800b498:	edd7 2a01 	vldr	s5, [r7, #4]
 800b49c:	9404      	str	r4, [sp, #16]
 800b49e:	ee35 5a63 	vsub.f32	s10, s10, s7
 800b4a2:	ee74 3a27 	vadd.f32	s7, s8, s15
 800b4a6:	ee36 6a47 	vsub.f32	s12, s12, s14
 800b4aa:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800b4ae:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800b4b2:	0849      	lsrs	r1, r1, #1
 800b4b4:	f102 0e08 	add.w	lr, r2, #8
 800b4b8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800b4bc:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800b4c0:	9109      	str	r1, [sp, #36]	; 0x24
 800b4c2:	ee35 4a47 	vsub.f32	s8, s10, s14
 800b4c6:	f1a1 0902 	sub.w	r9, r1, #2
 800b4ca:	f8cd e00c 	str.w	lr, [sp, #12]
 800b4ce:	4631      	mov	r1, r6
 800b4d0:	ee13 ea90 	vmov	lr, s7
 800b4d4:	ee36 6a64 	vsub.f32	s12, s12, s9
 800b4d8:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800b4dc:	4604      	mov	r4, r0
 800b4de:	edc5 5a01 	vstr	s11, [r5, #4]
 800b4e2:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b4e6:	f841 eb08 	str.w	lr, [r1], #8
 800b4ea:	ee34 5a24 	vadd.f32	s10, s8, s9
 800b4ee:	ee16 ea10 	vmov	lr, s12
 800b4f2:	ed86 5a01 	vstr	s10, [r6, #4]
 800b4f6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800b4fa:	f844 eb08 	str.w	lr, [r4], #8
 800b4fe:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b502:	edc0 6a01 	vstr	s13, [r0, #4]
 800b506:	9405      	str	r4, [sp, #20]
 800b508:	4604      	mov	r4, r0
 800b50a:	ee17 0a90 	vmov	r0, s15
 800b50e:	9106      	str	r1, [sp, #24]
 800b510:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b514:	f102 0110 	add.w	r1, r2, #16
 800b518:	46bc      	mov	ip, r7
 800b51a:	9100      	str	r1, [sp, #0]
 800b51c:	f847 0b08 	str.w	r0, [r7], #8
 800b520:	f102 0118 	add.w	r1, r2, #24
 800b524:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800b528:	9102      	str	r1, [sp, #8]
 800b52a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b52e:	9007      	str	r0, [sp, #28]
 800b530:	f000 8134 	beq.w	800b79c <arm_cfft_radix8by4_f32+0x368>
 800b534:	f102 0920 	add.w	r9, r2, #32
 800b538:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800b53c:	9a01      	ldr	r2, [sp, #4]
 800b53e:	f8dd a000 	ldr.w	sl, [sp]
 800b542:	3b0c      	subs	r3, #12
 800b544:	4683      	mov	fp, r0
 800b546:	4463      	add	r3, ip
 800b548:	f105 0e10 	add.w	lr, r5, #16
 800b54c:	f1a4 010c 	sub.w	r1, r4, #12
 800b550:	f104 0510 	add.w	r5, r4, #16
 800b554:	f1a6 0c0c 	sub.w	ip, r6, #12
 800b558:	f1a2 040c 	sub.w	r4, r2, #12
 800b55c:	f106 0010 	add.w	r0, r6, #16
 800b560:	3210      	adds	r2, #16
 800b562:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800b566:	ed55 5a02 	vldr	s11, [r5, #-8]
 800b56a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800b56e:	ed52 1a02 	vldr	s3, [r2, #-8]
 800b572:	ed55 6a01 	vldr	s13, [r5, #-4]
 800b576:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800b57a:	ed12 1a01 	vldr	s2, [r2, #-4]
 800b57e:	ed10 8a01 	vldr	s16, [r0, #-4]
 800b582:	ee35 4a25 	vadd.f32	s8, s10, s11
 800b586:	ee30 6a26 	vadd.f32	s12, s0, s13
 800b58a:	ee37 7a84 	vadd.f32	s14, s15, s8
 800b58e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b592:	ee37 7a21 	vadd.f32	s14, s14, s3
 800b596:	ee75 5a65 	vsub.f32	s11, s10, s11
 800b59a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800b59e:	ed10 7a01 	vldr	s14, [r0, #-4]
 800b5a2:	ed52 6a01 	vldr	s13, [r2, #-4]
 800b5a6:	ee36 7a07 	vadd.f32	s14, s12, s14
 800b5aa:	ee78 aa25 	vadd.f32	s21, s16, s11
 800b5ae:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b5b2:	ee70 3a67 	vsub.f32	s7, s0, s15
 800b5b6:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800b5ba:	ed94 7a02 	vldr	s14, [r4, #8]
 800b5be:	ed9c 2a02 	vldr	s4, [ip, #8]
 800b5c2:	ed91 ba02 	vldr	s22, [r1, #8]
 800b5c6:	edd3 9a02 	vldr	s19, [r3, #8]
 800b5ca:	edd4 2a01 	vldr	s5, [r4, #4]
 800b5ce:	ed9c 9a01 	vldr	s18, [ip, #4]
 800b5d2:	ed93 5a01 	vldr	s10, [r3, #4]
 800b5d6:	edd1 0a01 	vldr	s1, [r1, #4]
 800b5da:	ee72 6a07 	vadd.f32	s13, s4, s14
 800b5de:	ee32 2a47 	vsub.f32	s4, s4, s14
 800b5e2:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800b5e6:	ee79 4a22 	vadd.f32	s9, s18, s5
 800b5ea:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800b5ee:	ee79 2a62 	vsub.f32	s5, s18, s5
 800b5f2:	ed8c 7a02 	vstr	s14, [ip, #8]
 800b5f6:	ed91 7a01 	vldr	s14, [r1, #4]
 800b5fa:	edd3 8a01 	vldr	s17, [r3, #4]
 800b5fe:	ee34 7a87 	vadd.f32	s14, s9, s14
 800b602:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800b606:	ee37 7a28 	vadd.f32	s14, s14, s17
 800b60a:	ee32 9a60 	vsub.f32	s18, s4, s1
 800b60e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b612:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800b616:	ed1a aa02 	vldr	s20, [sl, #-8]
 800b61a:	ee73 8a22 	vadd.f32	s17, s6, s5
 800b61e:	ee39 9a05 	vadd.f32	s18, s18, s10
 800b622:	ee7a aac1 	vsub.f32	s21, s21, s2
 800b626:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b62a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800b62e:	ee69 ba07 	vmul.f32	s23, s18, s14
 800b632:	ee6a aa87 	vmul.f32	s21, s21, s14
 800b636:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800b63a:	ee63 ca87 	vmul.f32	s25, s7, s14
 800b63e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800b642:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800b646:	ee68 8a87 	vmul.f32	s17, s17, s14
 800b64a:	ee73 3aea 	vsub.f32	s7, s7, s21
 800b64e:	ee78 8a89 	vadd.f32	s17, s17, s18
 800b652:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800b656:	ee3b aaca 	vsub.f32	s20, s23, s20
 800b65a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800b65e:	ee76 6acb 	vsub.f32	s13, s13, s22
 800b662:	ee36 6a48 	vsub.f32	s12, s12, s16
 800b666:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800b66a:	ed00 7a02 	vstr	s14, [r0, #-8]
 800b66e:	ed40 3a01 	vstr	s7, [r0, #-4]
 800b672:	edc1 8a01 	vstr	s17, [r1, #4]
 800b676:	ed81 aa02 	vstr	s20, [r1, #8]
 800b67a:	ed59 3a04 	vldr	s7, [r9, #-16]
 800b67e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800b682:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800b686:	ed59 6a03 	vldr	s13, [r9, #-12]
 800b68a:	ee34 4a61 	vsub.f32	s8, s8, s3
 800b68e:	ee36 6a41 	vsub.f32	s12, s12, s2
 800b692:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800b696:	ee66 9a26 	vmul.f32	s19, s12, s13
 800b69a:	ee24 9a23 	vmul.f32	s18, s8, s7
 800b69e:	ee26 6a23 	vmul.f32	s12, s12, s7
 800b6a2:	ee24 4a26 	vmul.f32	s8, s8, s13
 800b6a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b6aa:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800b6ae:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800b6b2:	ee36 6a44 	vsub.f32	s12, s12, s8
 800b6b6:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b6ba:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800b6be:	ee79 3a29 	vadd.f32	s7, s18, s19
 800b6c2:	ee75 6a60 	vsub.f32	s13, s10, s1
 800b6c6:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800b6ca:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b6ce:	ed45 3a02 	vstr	s7, [r5, #-8]
 800b6d2:	ed05 6a01 	vstr	s12, [r5, #-4]
 800b6d6:	ed84 7a01 	vstr	s14, [r4, #4]
 800b6da:	ed84 4a02 	vstr	s8, [r4, #8]
 800b6de:	ee35 6a81 	vadd.f32	s12, s11, s2
 800b6e2:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800b6e6:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800b6ea:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800b6ee:	ee33 3a62 	vsub.f32	s6, s6, s5
 800b6f2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800b6f6:	ee67 2a26 	vmul.f32	s5, s14, s13
 800b6fa:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800b6fe:	ee26 5a25 	vmul.f32	s10, s12, s11
 800b702:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b706:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b70a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b70e:	ee63 6a26 	vmul.f32	s13, s6, s13
 800b712:	ee23 3a25 	vmul.f32	s6, s6, s11
 800b716:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b71a:	ee75 5a24 	vadd.f32	s11, s10, s9
 800b71e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800b722:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b726:	f1bb 0b01 	subs.w	fp, fp, #1
 800b72a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800b72e:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b732:	f10e 0e08 	add.w	lr, lr, #8
 800b736:	ed83 3a02 	vstr	s6, [r3, #8]
 800b73a:	ed83 7a01 	vstr	s14, [r3, #4]
 800b73e:	f1ac 0c08 	sub.w	ip, ip, #8
 800b742:	f10a 0a08 	add.w	sl, sl, #8
 800b746:	f100 0008 	add.w	r0, r0, #8
 800b74a:	f1a1 0108 	sub.w	r1, r1, #8
 800b74e:	f109 0910 	add.w	r9, r9, #16
 800b752:	f105 0508 	add.w	r5, r5, #8
 800b756:	f1a4 0408 	sub.w	r4, r4, #8
 800b75a:	f108 0818 	add.w	r8, r8, #24
 800b75e:	f102 0208 	add.w	r2, r2, #8
 800b762:	f1a3 0308 	sub.w	r3, r3, #8
 800b766:	f47f aefc 	bne.w	800b562 <arm_cfft_radix8by4_f32+0x12e>
 800b76a:	9907      	ldr	r1, [sp, #28]
 800b76c:	9800      	ldr	r0, [sp, #0]
 800b76e:	00cb      	lsls	r3, r1, #3
 800b770:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800b774:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800b778:	9100      	str	r1, [sp, #0]
 800b77a:	9904      	ldr	r1, [sp, #16]
 800b77c:	4419      	add	r1, r3
 800b77e:	9104      	str	r1, [sp, #16]
 800b780:	9903      	ldr	r1, [sp, #12]
 800b782:	4419      	add	r1, r3
 800b784:	9103      	str	r1, [sp, #12]
 800b786:	9906      	ldr	r1, [sp, #24]
 800b788:	4419      	add	r1, r3
 800b78a:	9106      	str	r1, [sp, #24]
 800b78c:	9905      	ldr	r1, [sp, #20]
 800b78e:	441f      	add	r7, r3
 800b790:	4419      	add	r1, r3
 800b792:	9b02      	ldr	r3, [sp, #8]
 800b794:	9105      	str	r1, [sp, #20]
 800b796:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b79a:	9302      	str	r3, [sp, #8]
 800b79c:	9904      	ldr	r1, [sp, #16]
 800b79e:	9805      	ldr	r0, [sp, #20]
 800b7a0:	ed91 4a00 	vldr	s8, [r1]
 800b7a4:	edd0 6a00 	vldr	s13, [r0]
 800b7a8:	9b06      	ldr	r3, [sp, #24]
 800b7aa:	ed97 3a00 	vldr	s6, [r7]
 800b7ae:	edd3 7a00 	vldr	s15, [r3]
 800b7b2:	edd0 4a01 	vldr	s9, [r0, #4]
 800b7b6:	edd1 3a01 	vldr	s7, [r1, #4]
 800b7ba:	ed97 2a01 	vldr	s4, [r7, #4]
 800b7be:	ed93 7a01 	vldr	s14, [r3, #4]
 800b7c2:	9a03      	ldr	r2, [sp, #12]
 800b7c4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800b7c8:	ee34 6a26 	vadd.f32	s12, s8, s13
 800b7cc:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800b7d0:	ee37 5a86 	vadd.f32	s10, s15, s12
 800b7d4:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800b7d8:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b7dc:	ee74 6a66 	vsub.f32	s13, s8, s13
 800b7e0:	ed81 5a00 	vstr	s10, [r1]
 800b7e4:	ed93 5a01 	vldr	s10, [r3, #4]
 800b7e8:	edd7 4a01 	vldr	s9, [r7, #4]
 800b7ec:	ee35 5a85 	vadd.f32	s10, s11, s10
 800b7f0:	ee37 4a26 	vadd.f32	s8, s14, s13
 800b7f4:	ee35 5a24 	vadd.f32	s10, s10, s9
 800b7f8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800b7fc:	ed81 5a01 	vstr	s10, [r1, #4]
 800b800:	edd2 1a00 	vldr	s3, [r2]
 800b804:	edd2 2a01 	vldr	s5, [r2, #4]
 800b808:	ee34 5a83 	vadd.f32	s10, s9, s6
 800b80c:	ee34 4a42 	vsub.f32	s8, s8, s4
 800b810:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b814:	ee64 4a21 	vmul.f32	s9, s8, s3
 800b818:	ee24 4a22 	vmul.f32	s8, s8, s5
 800b81c:	ee65 2a22 	vmul.f32	s5, s10, s5
 800b820:	ee25 5a21 	vmul.f32	s10, s10, s3
 800b824:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800b828:	ee35 5a44 	vsub.f32	s10, s10, s8
 800b82c:	edc3 2a00 	vstr	s5, [r3]
 800b830:	ed83 5a01 	vstr	s10, [r3, #4]
 800b834:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800b838:	9b00      	ldr	r3, [sp, #0]
 800b83a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800b83e:	ed93 4a01 	vldr	s8, [r3, #4]
 800b842:	ed93 5a00 	vldr	s10, [r3]
 800b846:	9b02      	ldr	r3, [sp, #8]
 800b848:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800b84c:	ee66 4a05 	vmul.f32	s9, s12, s10
 800b850:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b854:	ee26 6a04 	vmul.f32	s12, s12, s8
 800b858:	ee65 5a84 	vmul.f32	s11, s11, s8
 800b85c:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b860:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800b864:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b868:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b86c:	ed80 6a01 	vstr	s12, [r0, #4]
 800b870:	edc0 5a00 	vstr	s11, [r0]
 800b874:	edd3 5a01 	vldr	s11, [r3, #4]
 800b878:	edd3 6a00 	vldr	s13, [r3]
 800b87c:	ee37 7a02 	vadd.f32	s14, s14, s4
 800b880:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800b884:	ee27 6a26 	vmul.f32	s12, s14, s13
 800b888:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b88c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b890:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b894:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b898:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b89c:	ed87 7a01 	vstr	s14, [r7, #4]
 800b8a0:	edc7 7a00 	vstr	s15, [r7]
 800b8a4:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800b8a8:	4621      	mov	r1, r4
 800b8aa:	686a      	ldr	r2, [r5, #4]
 800b8ac:	2304      	movs	r3, #4
 800b8ae:	f000 f8f3 	bl	800ba98 <arm_radix8_butterfly_f32>
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	4621      	mov	r1, r4
 800b8b6:	686a      	ldr	r2, [r5, #4]
 800b8b8:	2304      	movs	r3, #4
 800b8ba:	f000 f8ed 	bl	800ba98 <arm_radix8_butterfly_f32>
 800b8be:	9808      	ldr	r0, [sp, #32]
 800b8c0:	686a      	ldr	r2, [r5, #4]
 800b8c2:	4621      	mov	r1, r4
 800b8c4:	2304      	movs	r3, #4
 800b8c6:	f000 f8e7 	bl	800ba98 <arm_radix8_butterfly_f32>
 800b8ca:	686a      	ldr	r2, [r5, #4]
 800b8cc:	9801      	ldr	r0, [sp, #4]
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	2304      	movs	r3, #4
 800b8d2:	b00d      	add	sp, #52	; 0x34
 800b8d4:	ecbd 8b0a 	vpop	{d8-d12}
 800b8d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8dc:	f000 b8dc 	b.w	800ba98 <arm_radix8_butterfly_f32>

0800b8e0 <arm_cfft_f32>:
 800b8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e4:	2a01      	cmp	r2, #1
 800b8e6:	4606      	mov	r6, r0
 800b8e8:	4617      	mov	r7, r2
 800b8ea:	460c      	mov	r4, r1
 800b8ec:	4698      	mov	r8, r3
 800b8ee:	8805      	ldrh	r5, [r0, #0]
 800b8f0:	d056      	beq.n	800b9a0 <arm_cfft_f32+0xc0>
 800b8f2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800b8f6:	d063      	beq.n	800b9c0 <arm_cfft_f32+0xe0>
 800b8f8:	d916      	bls.n	800b928 <arm_cfft_f32+0x48>
 800b8fa:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800b8fe:	d01a      	beq.n	800b936 <arm_cfft_f32+0x56>
 800b900:	d947      	bls.n	800b992 <arm_cfft_f32+0xb2>
 800b902:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800b906:	d05b      	beq.n	800b9c0 <arm_cfft_f32+0xe0>
 800b908:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800b90c:	d105      	bne.n	800b91a <arm_cfft_f32+0x3a>
 800b90e:	2301      	movs	r3, #1
 800b910:	6872      	ldr	r2, [r6, #4]
 800b912:	4629      	mov	r1, r5
 800b914:	4620      	mov	r0, r4
 800b916:	f000 f8bf 	bl	800ba98 <arm_radix8_butterfly_f32>
 800b91a:	f1b8 0f00 	cmp.w	r8, #0
 800b91e:	d111      	bne.n	800b944 <arm_cfft_f32+0x64>
 800b920:	2f01      	cmp	r7, #1
 800b922:	d016      	beq.n	800b952 <arm_cfft_f32+0x72>
 800b924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b928:	2d20      	cmp	r5, #32
 800b92a:	d049      	beq.n	800b9c0 <arm_cfft_f32+0xe0>
 800b92c:	d935      	bls.n	800b99a <arm_cfft_f32+0xba>
 800b92e:	2d40      	cmp	r5, #64	; 0x40
 800b930:	d0ed      	beq.n	800b90e <arm_cfft_f32+0x2e>
 800b932:	2d80      	cmp	r5, #128	; 0x80
 800b934:	d1f1      	bne.n	800b91a <arm_cfft_f32+0x3a>
 800b936:	4621      	mov	r1, r4
 800b938:	4630      	mov	r0, r6
 800b93a:	f7ff fcab 	bl	800b294 <arm_cfft_radix8by2_f32>
 800b93e:	f1b8 0f00 	cmp.w	r8, #0
 800b942:	d0ed      	beq.n	800b920 <arm_cfft_f32+0x40>
 800b944:	68b2      	ldr	r2, [r6, #8]
 800b946:	89b1      	ldrh	r1, [r6, #12]
 800b948:	4620      	mov	r0, r4
 800b94a:	f000 f841 	bl	800b9d0 <arm_bitreversal_32>
 800b94e:	2f01      	cmp	r7, #1
 800b950:	d1e8      	bne.n	800b924 <arm_cfft_f32+0x44>
 800b952:	ee07 5a90 	vmov	s15, r5
 800b956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b95a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b95e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b962:	2d00      	cmp	r5, #0
 800b964:	d0de      	beq.n	800b924 <arm_cfft_f32+0x44>
 800b966:	f104 0108 	add.w	r1, r4, #8
 800b96a:	2300      	movs	r3, #0
 800b96c:	3301      	adds	r3, #1
 800b96e:	429d      	cmp	r5, r3
 800b970:	f101 0108 	add.w	r1, r1, #8
 800b974:	ed11 7a04 	vldr	s14, [r1, #-16]
 800b978:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b97c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b980:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b984:	ed01 7a04 	vstr	s14, [r1, #-16]
 800b988:	ed41 7a03 	vstr	s15, [r1, #-12]
 800b98c:	d1ee      	bne.n	800b96c <arm_cfft_f32+0x8c>
 800b98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b992:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800b996:	d0ba      	beq.n	800b90e <arm_cfft_f32+0x2e>
 800b998:	e7bf      	b.n	800b91a <arm_cfft_f32+0x3a>
 800b99a:	2d10      	cmp	r5, #16
 800b99c:	d0cb      	beq.n	800b936 <arm_cfft_f32+0x56>
 800b99e:	e7bc      	b.n	800b91a <arm_cfft_f32+0x3a>
 800b9a0:	b19d      	cbz	r5, 800b9ca <arm_cfft_f32+0xea>
 800b9a2:	f101 030c 	add.w	r3, r1, #12
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	ed53 7a02 	vldr	s15, [r3, #-8]
 800b9ac:	3201      	adds	r2, #1
 800b9ae:	eef1 7a67 	vneg.f32	s15, s15
 800b9b2:	4295      	cmp	r5, r2
 800b9b4:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b9b8:	f103 0308 	add.w	r3, r3, #8
 800b9bc:	d1f4      	bne.n	800b9a8 <arm_cfft_f32+0xc8>
 800b9be:	e798      	b.n	800b8f2 <arm_cfft_f32+0x12>
 800b9c0:	4621      	mov	r1, r4
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	f7ff fd36 	bl	800b434 <arm_cfft_radix8by4_f32>
 800b9c8:	e7a7      	b.n	800b91a <arm_cfft_f32+0x3a>
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d0aa      	beq.n	800b924 <arm_cfft_f32+0x44>
 800b9ce:	e7b9      	b.n	800b944 <arm_cfft_f32+0x64>

0800b9d0 <arm_bitreversal_32>:
 800b9d0:	b1e9      	cbz	r1, 800ba0e <arm_bitreversal_32+0x3e>
 800b9d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9d4:	2500      	movs	r5, #0
 800b9d6:	f102 0e02 	add.w	lr, r2, #2
 800b9da:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800b9de:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800b9e2:	08a4      	lsrs	r4, r4, #2
 800b9e4:	089b      	lsrs	r3, r3, #2
 800b9e6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800b9ea:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800b9ee:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800b9f2:	00a6      	lsls	r6, r4, #2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800b9fa:	3304      	adds	r3, #4
 800b9fc:	1d34      	adds	r4, r6, #4
 800b9fe:	3502      	adds	r5, #2
 800ba00:	58c6      	ldr	r6, [r0, r3]
 800ba02:	5907      	ldr	r7, [r0, r4]
 800ba04:	50c7      	str	r7, [r0, r3]
 800ba06:	428d      	cmp	r5, r1
 800ba08:	5106      	str	r6, [r0, r4]
 800ba0a:	d3e6      	bcc.n	800b9da <arm_bitreversal_32+0xa>
 800ba0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba0e:	4770      	bx	lr

0800ba10 <arm_abs_f32>:
 800ba10:	b470      	push	{r4, r5, r6}
 800ba12:	0896      	lsrs	r6, r2, #2
 800ba14:	d025      	beq.n	800ba62 <arm_abs_f32+0x52>
 800ba16:	f100 0410 	add.w	r4, r0, #16
 800ba1a:	f101 0310 	add.w	r3, r1, #16
 800ba1e:	4635      	mov	r5, r6
 800ba20:	ed54 7a04 	vldr	s15, [r4, #-16]
 800ba24:	eef0 7ae7 	vabs.f32	s15, s15
 800ba28:	ed43 7a04 	vstr	s15, [r3, #-16]
 800ba2c:	ed54 7a03 	vldr	s15, [r4, #-12]
 800ba30:	eef0 7ae7 	vabs.f32	s15, s15
 800ba34:	ed43 7a03 	vstr	s15, [r3, #-12]
 800ba38:	ed54 7a02 	vldr	s15, [r4, #-8]
 800ba3c:	eef0 7ae7 	vabs.f32	s15, s15
 800ba40:	ed43 7a02 	vstr	s15, [r3, #-8]
 800ba44:	ed54 7a01 	vldr	s15, [r4, #-4]
 800ba48:	3d01      	subs	r5, #1
 800ba4a:	eef0 7ae7 	vabs.f32	s15, s15
 800ba4e:	ed43 7a01 	vstr	s15, [r3, #-4]
 800ba52:	f104 0410 	add.w	r4, r4, #16
 800ba56:	f103 0310 	add.w	r3, r3, #16
 800ba5a:	d1e1      	bne.n	800ba20 <arm_abs_f32+0x10>
 800ba5c:	0136      	lsls	r6, r6, #4
 800ba5e:	4430      	add	r0, r6
 800ba60:	4431      	add	r1, r6
 800ba62:	f012 0203 	ands.w	r2, r2, #3
 800ba66:	d015      	beq.n	800ba94 <arm_abs_f32+0x84>
 800ba68:	edd0 7a00 	vldr	s15, [r0]
 800ba6c:	3a01      	subs	r2, #1
 800ba6e:	eef0 7ae7 	vabs.f32	s15, s15
 800ba72:	edc1 7a00 	vstr	s15, [r1]
 800ba76:	d00d      	beq.n	800ba94 <arm_abs_f32+0x84>
 800ba78:	edd0 7a01 	vldr	s15, [r0, #4]
 800ba7c:	2a01      	cmp	r2, #1
 800ba7e:	eef0 7ae7 	vabs.f32	s15, s15
 800ba82:	edc1 7a01 	vstr	s15, [r1, #4]
 800ba86:	d005      	beq.n	800ba94 <arm_abs_f32+0x84>
 800ba88:	edd0 7a02 	vldr	s15, [r0, #8]
 800ba8c:	eef0 7ae7 	vabs.f32	s15, s15
 800ba90:	edc1 7a02 	vstr	s15, [r1, #8]
 800ba94:	bc70      	pop	{r4, r5, r6}
 800ba96:	4770      	bx	lr

0800ba98 <arm_radix8_butterfly_f32>:
 800ba98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba9c:	ed2d 8b10 	vpush	{d8-d15}
 800baa0:	b095      	sub	sp, #84	; 0x54
 800baa2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800baa6:	4603      	mov	r3, r0
 800baa8:	3304      	adds	r3, #4
 800baaa:	ed9f bab9 	vldr	s22, [pc, #740]	; 800bd90 <arm_radix8_butterfly_f32+0x2f8>
 800baae:	9012      	str	r0, [sp, #72]	; 0x48
 800bab0:	468b      	mov	fp, r1
 800bab2:	9313      	str	r3, [sp, #76]	; 0x4c
 800bab4:	4689      	mov	r9, r1
 800bab6:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800baba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800babc:	960f      	str	r6, [sp, #60]	; 0x3c
 800babe:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800bac2:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800bac6:	eb03 0508 	add.w	r5, r3, r8
 800baca:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800bace:	eb05 040e 	add.w	r4, r5, lr
 800bad2:	0137      	lsls	r7, r6, #4
 800bad4:	eba6 030a 	sub.w	r3, r6, sl
 800bad8:	eb04 000e 	add.w	r0, r4, lr
 800badc:	44b2      	add	sl, r6
 800bade:	1d3a      	adds	r2, r7, #4
 800bae0:	9702      	str	r7, [sp, #8]
 800bae2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800bae6:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800baea:	ebae 0c06 	sub.w	ip, lr, r6
 800baee:	9703      	str	r7, [sp, #12]
 800baf0:	eb03 0708 	add.w	r7, r3, r8
 800baf4:	9701      	str	r7, [sp, #4]
 800baf6:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800bafa:	9706      	str	r7, [sp, #24]
 800bafc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800bafe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800bb02:	f10e 0104 	add.w	r1, lr, #4
 800bb06:	4439      	add	r1, r7
 800bb08:	443a      	add	r2, r7
 800bb0a:	0137      	lsls	r7, r6, #4
 800bb0c:	00f6      	lsls	r6, r6, #3
 800bb0e:	9704      	str	r7, [sp, #16]
 800bb10:	9605      	str	r6, [sp, #20]
 800bb12:	9f01      	ldr	r7, [sp, #4]
 800bb14:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800bb16:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800bb1a:	f04f 0c00 	mov.w	ip, #0
 800bb1e:	edd4 6a00 	vldr	s13, [r4]
 800bb22:	edd7 1a00 	vldr	s3, [r7]
 800bb26:	ed16 aa01 	vldr	s20, [r6, #-4]
 800bb2a:	edd5 5a00 	vldr	s11, [r5]
 800bb2e:	ed52 9a01 	vldr	s19, [r2, #-4]
 800bb32:	ed90 6a00 	vldr	s12, [r0]
 800bb36:	ed51 7a01 	vldr	s15, [r1, #-4]
 800bb3a:	ed93 3a00 	vldr	s6, [r3]
 800bb3e:	ee39 0a86 	vadd.f32	s0, s19, s12
 800bb42:	ee33 2a21 	vadd.f32	s4, s6, s3
 800bb46:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800bb4a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800bb4e:	ee35 7a02 	vadd.f32	s14, s10, s4
 800bb52:	ee34 4a80 	vadd.f32	s8, s9, s0
 800bb56:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb5a:	ee74 6a07 	vadd.f32	s13, s8, s14
 800bb5e:	ee34 4a47 	vsub.f32	s8, s8, s14
 800bb62:	ed46 6a01 	vstr	s13, [r6, #-4]
 800bb66:	ed85 4a00 	vstr	s8, [r5]
 800bb6a:	edd1 6a00 	vldr	s13, [r1]
 800bb6e:	ed94 9a01 	vldr	s18, [r4, #4]
 800bb72:	edd3 2a01 	vldr	s5, [r3, #4]
 800bb76:	edd7 8a01 	vldr	s17, [r7, #4]
 800bb7a:	edd6 0a00 	vldr	s1, [r6]
 800bb7e:	edd5 3a01 	vldr	s7, [r5, #4]
 800bb82:	ed90 8a01 	vldr	s16, [r0, #4]
 800bb86:	ed92 7a00 	vldr	s14, [r2]
 800bb8a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800bb8e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800bb92:	ee72 aae8 	vsub.f32	s21, s5, s17
 800bb96:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800bb9a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800bb9e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800bba2:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800bba6:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800bbaa:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800bbae:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800bbb2:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800bbb6:	ee77 0a08 	vadd.f32	s1, s14, s16
 800bbba:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800bbbe:	ee37 7a48 	vsub.f32	s14, s14, s16
 800bbc2:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800bbc6:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800bbca:	ee76 6a89 	vadd.f32	s13, s13, s18
 800bbce:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800bbd2:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800bbd6:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800bbda:	ee35 5a42 	vsub.f32	s10, s10, s4
 800bbde:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800bbe2:	ee33 2a20 	vadd.f32	s4, s6, s1
 800bbe6:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800bbea:	ee33 3a60 	vsub.f32	s6, s6, s1
 800bbee:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800bbf2:	ee77 0a01 	vadd.f32	s1, s14, s2
 800bbf6:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800bbfa:	ee37 7a41 	vsub.f32	s14, s14, s2
 800bbfe:	ee73 1a84 	vadd.f32	s3, s7, s8
 800bc02:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800bc06:	ee76 3a27 	vadd.f32	s7, s12, s15
 800bc0a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bc0e:	ee32 8a00 	vadd.f32	s16, s4, s0
 800bc12:	ee33 1a45 	vsub.f32	s2, s6, s10
 800bc16:	ee32 2a40 	vsub.f32	s4, s4, s0
 800bc1a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800bc1e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800bc22:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800bc26:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800bc2a:	ee34 6a67 	vsub.f32	s12, s8, s15
 800bc2e:	ee75 4a87 	vadd.f32	s9, s11, s14
 800bc32:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800bc36:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800bc3a:	ee77 7a84 	vadd.f32	s15, s15, s8
 800bc3e:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800bc42:	44dc      	add	ip, fp
 800bc44:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800bc48:	45e1      	cmp	r9, ip
 800bc4a:	ed86 8a00 	vstr	s16, [r6]
 800bc4e:	ed85 2a01 	vstr	s4, [r5, #4]
 800bc52:	4456      	add	r6, sl
 800bc54:	ed02 0a01 	vstr	s0, [r2, #-4]
 800bc58:	4455      	add	r5, sl
 800bc5a:	edc0 6a00 	vstr	s13, [r0]
 800bc5e:	ed82 1a00 	vstr	s2, [r2]
 800bc62:	ed80 5a01 	vstr	s10, [r0, #4]
 800bc66:	4452      	add	r2, sl
 800bc68:	ed01 3a01 	vstr	s6, [r1, #-4]
 800bc6c:	4450      	add	r0, sl
 800bc6e:	edc7 2a00 	vstr	s5, [r7]
 800bc72:	edc4 4a00 	vstr	s9, [r4]
 800bc76:	ed83 7a00 	vstr	s14, [r3]
 800bc7a:	edc1 5a00 	vstr	s11, [r1]
 800bc7e:	edc7 3a01 	vstr	s7, [r7, #4]
 800bc82:	4451      	add	r1, sl
 800bc84:	ed84 6a01 	vstr	s12, [r4, #4]
 800bc88:	4457      	add	r7, sl
 800bc8a:	edc3 7a01 	vstr	s15, [r3, #4]
 800bc8e:	4454      	add	r4, sl
 800bc90:	4453      	add	r3, sl
 800bc92:	f63f af44 	bhi.w	800bb1e <arm_radix8_butterfly_f32+0x86>
 800bc96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc98:	2b07      	cmp	r3, #7
 800bc9a:	f240 81b7 	bls.w	800c00c <arm_radix8_butterfly_f32+0x574>
 800bc9e:	9b06      	ldr	r3, [sp, #24]
 800bca0:	9903      	ldr	r1, [sp, #12]
 800bca2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bca4:	9e05      	ldr	r6, [sp, #20]
 800bca6:	9a04      	ldr	r2, [sp, #16]
 800bca8:	f103 0c08 	add.w	ip, r3, #8
 800bcac:	9b02      	ldr	r3, [sp, #8]
 800bcae:	3108      	adds	r1, #8
 800bcb0:	f108 0808 	add.w	r8, r8, #8
 800bcb4:	1841      	adds	r1, r0, r1
 800bcb6:	3608      	adds	r6, #8
 800bcb8:	330c      	adds	r3, #12
 800bcba:	4604      	mov	r4, r0
 800bcbc:	4444      	add	r4, r8
 800bcbe:	18c3      	adds	r3, r0, r3
 800bcc0:	9109      	str	r1, [sp, #36]	; 0x24
 800bcc2:	1981      	adds	r1, r0, r6
 800bcc4:	f10e 0e08 	add.w	lr, lr, #8
 800bcc8:	3208      	adds	r2, #8
 800bcca:	940b      	str	r4, [sp, #44]	; 0x2c
 800bccc:	9107      	str	r1, [sp, #28]
 800bcce:	4604      	mov	r4, r0
 800bcd0:	4601      	mov	r1, r0
 800bcd2:	9304      	str	r3, [sp, #16]
 800bcd4:	f100 030c 	add.w	r3, r0, #12
 800bcd8:	4474      	add	r4, lr
 800bcda:	f04f 0801 	mov.w	r8, #1
 800bcde:	1882      	adds	r2, r0, r2
 800bce0:	4461      	add	r1, ip
 800bce2:	9305      	str	r3, [sp, #20]
 800bce4:	464b      	mov	r3, r9
 800bce6:	940a      	str	r4, [sp, #40]	; 0x28
 800bce8:	46c1      	mov	r9, r8
 800bcea:	9208      	str	r2, [sp, #32]
 800bcec:	46d8      	mov	r8, fp
 800bcee:	9106      	str	r1, [sp, #24]
 800bcf0:	f04f 0e00 	mov.w	lr, #0
 800bcf4:	469b      	mov	fp, r3
 800bcf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bcf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bcfa:	449e      	add	lr, r3
 800bcfc:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800bd00:	441a      	add	r2, r3
 800bd02:	920e      	str	r2, [sp, #56]	; 0x38
 800bd04:	441a      	add	r2, r3
 800bd06:	18d4      	adds	r4, r2, r3
 800bd08:	18e5      	adds	r5, r4, r3
 800bd0a:	18ee      	adds	r6, r5, r3
 800bd0c:	18f7      	adds	r7, r6, r3
 800bd0e:	eb07 0c03 	add.w	ip, r7, r3
 800bd12:	920d      	str	r2, [sp, #52]	; 0x34
 800bd14:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800bd18:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800bd1c:	910c      	str	r1, [sp, #48]	; 0x30
 800bd1e:	4419      	add	r1, r3
 800bd20:	9103      	str	r1, [sp, #12]
 800bd22:	4419      	add	r1, r3
 800bd24:	18ca      	adds	r2, r1, r3
 800bd26:	9202      	str	r2, [sp, #8]
 800bd28:	441a      	add	r2, r3
 800bd2a:	18d0      	adds	r0, r2, r3
 800bd2c:	ed92 ea01 	vldr	s28, [r2, #4]
 800bd30:	9a02      	ldr	r2, [sp, #8]
 800bd32:	edd4 7a00 	vldr	s15, [r4]
 800bd36:	edd2 da01 	vldr	s27, [r2, #4]
 800bd3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd3c:	ed91 da01 	vldr	s26, [r1, #4]
 800bd40:	ed92 ca01 	vldr	s24, [r2, #4]
 800bd44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd46:	9903      	ldr	r1, [sp, #12]
 800bd48:	edcd 7a03 	vstr	s15, [sp, #12]
 800bd4c:	edd2 7a00 	vldr	s15, [r2]
 800bd50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd52:	edcd 7a02 	vstr	s15, [sp, #8]
 800bd56:	edd2 7a00 	vldr	s15, [r2]
 800bd5a:	edd0 ea01 	vldr	s29, [r0, #4]
 800bd5e:	edd1 ca01 	vldr	s25, [r1, #4]
 800bd62:	eddc ba00 	vldr	s23, [ip]
 800bd66:	edd7 aa00 	vldr	s21, [r7]
 800bd6a:	ed96 aa00 	vldr	s20, [r6]
 800bd6e:	edd5 9a00 	vldr	s19, [r5]
 800bd72:	edcd 7a01 	vstr	s15, [sp, #4]
 800bd76:	4403      	add	r3, r0
 800bd78:	ed93 fa01 	vldr	s30, [r3, #4]
 800bd7c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800bd80:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800bd84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd88:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bd8c:	46cc      	mov	ip, r9
 800bd8e:	e001      	b.n	800bd94 <arm_radix8_butterfly_f32+0x2fc>
 800bd90:	3f3504f3 	.word	0x3f3504f3
 800bd94:	ed91 6a00 	vldr	s12, [r1]
 800bd98:	ed93 5a00 	vldr	s10, [r3]
 800bd9c:	edd0 fa00 	vldr	s31, [r0]
 800bda0:	edd4 7a00 	vldr	s15, [r4]
 800bda4:	ed95 7a00 	vldr	s14, [r5]
 800bda8:	ed56 3a01 	vldr	s7, [r6, #-4]
 800bdac:	ed17 3a01 	vldr	s6, [r7, #-4]
 800bdb0:	ed92 2a00 	vldr	s4, [r2]
 800bdb4:	ed96 0a00 	vldr	s0, [r6]
 800bdb8:	ee33 8a85 	vadd.f32	s16, s7, s10
 800bdbc:	ee32 1a06 	vadd.f32	s2, s4, s12
 800bdc0:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800bdc4:	ee77 4a87 	vadd.f32	s9, s15, s14
 800bdc8:	ee78 1a04 	vadd.f32	s3, s16, s8
 800bdcc:	ee71 6a24 	vadd.f32	s13, s2, s9
 800bdd0:	ee32 2a46 	vsub.f32	s4, s4, s12
 800bdd4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800bdd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bddc:	ed06 6a01 	vstr	s12, [r6, #-4]
 800bde0:	edd4 8a01 	vldr	s17, [r4, #4]
 800bde4:	ed92 9a01 	vldr	s18, [r2, #4]
 800bde8:	edd7 0a00 	vldr	s1, [r7]
 800bdec:	edd1 2a01 	vldr	s5, [r1, #4]
 800bdf0:	ed95 7a01 	vldr	s14, [r5, #4]
 800bdf4:	ed93 6a01 	vldr	s12, [r3, #4]
 800bdf8:	edd0 5a01 	vldr	s11, [r0, #4]
 800bdfc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800be00:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800be04:	ee39 5a62 	vsub.f32	s10, s18, s5
 800be08:	ee78 fac7 	vsub.f32	s31, s17, s14
 800be0c:	ee38 4a44 	vsub.f32	s8, s16, s8
 800be10:	ee38 7a87 	vadd.f32	s14, s17, s14
 800be14:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800be18:	ee79 2a22 	vadd.f32	s5, s18, s5
 800be1c:	ee32 9a27 	vadd.f32	s18, s4, s15
 800be20:	ee72 7a67 	vsub.f32	s15, s4, s15
 800be24:	ee30 2a06 	vadd.f32	s4, s0, s12
 800be28:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800be2c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800be30:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800be34:	ee32 1a08 	vadd.f32	s2, s4, s16
 800be38:	ee72 fa87 	vadd.f32	s31, s5, s14
 800be3c:	ee32 2a48 	vsub.f32	s4, s4, s16
 800be40:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800be44:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800be48:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800be4c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800be50:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800be54:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800be58:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800be5c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800be60:	ee30 6a46 	vsub.f32	s12, s0, s12
 800be64:	ee74 0a22 	vadd.f32	s1, s8, s5
 800be68:	ee36 0a28 	vadd.f32	s0, s12, s17
 800be6c:	ee74 2a62 	vsub.f32	s5, s8, s5
 800be70:	ee36 6a68 	vsub.f32	s12, s12, s17
 800be74:	ee32 4a64 	vsub.f32	s8, s4, s9
 800be78:	ee73 8a09 	vadd.f32	s17, s6, s18
 800be7c:	ee74 4a82 	vadd.f32	s9, s9, s4
 800be80:	ee33 9a49 	vsub.f32	s18, s6, s18
 800be84:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800be88:	ee35 3a85 	vadd.f32	s6, s11, s10
 800be8c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800be90:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800be94:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800be98:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800be9c:	ee30 7a68 	vsub.f32	s14, s0, s17
 800bea0:	ee35 8a03 	vadd.f32	s16, s10, s6
 800bea4:	ee38 0a80 	vadd.f32	s0, s17, s0
 800bea8:	ee73 3a82 	vadd.f32	s7, s7, s4
 800beac:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800beb0:	ed9d 2a01 	vldr	s4, [sp, #4]
 800beb4:	eddd 1a02 	vldr	s3, [sp, #8]
 800beb8:	ee35 5a43 	vsub.f32	s10, s10, s6
 800bebc:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800bec0:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800bec4:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800bec8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800becc:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800bed0:	ee76 5a49 	vsub.f32	s11, s12, s18
 800bed4:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800bed8:	ee39 6a06 	vadd.f32	s12, s18, s12
 800bedc:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800bee0:	ee21 4a84 	vmul.f32	s8, s3, s8
 800bee4:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800bee8:	ee22 7a07 	vmul.f32	s14, s4, s14
 800beec:	ee22 2a08 	vmul.f32	s4, s4, s16
 800bef0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800bef4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800bef8:	ee31 1a09 	vadd.f32	s2, s2, s18
 800befc:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800bf00:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800bf04:	ee74 0a60 	vsub.f32	s1, s8, s1
 800bf08:	ee37 7a48 	vsub.f32	s14, s14, s16
 800bf0c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800bf10:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800bf14:	ee72 1a21 	vadd.f32	s3, s4, s3
 800bf18:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800bf1c:	ee38 2a89 	vadd.f32	s4, s17, s18
 800bf20:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800bf24:	ee38 8a04 	vadd.f32	s16, s16, s8
 800bf28:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800bf2c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800bf30:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800bf34:	eddd 5a03 	vldr	s11, [sp, #12]
 800bf38:	edc6 fa00 	vstr	s31, [r6]
 800bf3c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800bf40:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800bf44:	ee30 0a45 	vsub.f32	s0, s0, s10
 800bf48:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800bf4c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800bf50:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800bf54:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800bf58:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800bf5c:	ee25 6a86 	vmul.f32	s12, s11, s12
 800bf60:	ee74 4a89 	vadd.f32	s9, s9, s18
 800bf64:	ee34 3a43 	vsub.f32	s6, s8, s6
 800bf68:	ee78 8a85 	vadd.f32	s17, s17, s10
 800bf6c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bf70:	44c4      	add	ip, r8
 800bf72:	45e3      	cmp	fp, ip
 800bf74:	edc3 3a00 	vstr	s7, [r3]
 800bf78:	edc3 6a01 	vstr	s13, [r3, #4]
 800bf7c:	4456      	add	r6, sl
 800bf7e:	ed07 1a01 	vstr	s2, [r7, #-4]
 800bf82:	edc7 0a00 	vstr	s1, [r7]
 800bf86:	4453      	add	r3, sl
 800bf88:	ed80 2a00 	vstr	s4, [r0]
 800bf8c:	edc0 2a01 	vstr	s5, [r0, #4]
 800bf90:	4457      	add	r7, sl
 800bf92:	edc2 1a00 	vstr	s3, [r2]
 800bf96:	ed82 7a01 	vstr	s14, [r2, #4]
 800bf9a:	4450      	add	r0, sl
 800bf9c:	ed85 8a00 	vstr	s16, [r5]
 800bfa0:	ed85 0a01 	vstr	s0, [r5, #4]
 800bfa4:	4452      	add	r2, sl
 800bfa6:	edc1 4a00 	vstr	s9, [r1]
 800bfaa:	4455      	add	r5, sl
 800bfac:	ed81 3a01 	vstr	s6, [r1, #4]
 800bfb0:	edc4 8a00 	vstr	s17, [r4]
 800bfb4:	ed84 6a01 	vstr	s12, [r4, #4]
 800bfb8:	4451      	add	r1, sl
 800bfba:	4454      	add	r4, sl
 800bfbc:	f63f aeea 	bhi.w	800bd94 <arm_radix8_butterfly_f32+0x2fc>
 800bfc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfc2:	3308      	adds	r3, #8
 800bfc4:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfc8:	3308      	adds	r3, #8
 800bfca:	930a      	str	r3, [sp, #40]	; 0x28
 800bfcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfce:	3308      	adds	r3, #8
 800bfd0:	9309      	str	r3, [sp, #36]	; 0x24
 800bfd2:	9b08      	ldr	r3, [sp, #32]
 800bfd4:	3308      	adds	r3, #8
 800bfd6:	9308      	str	r3, [sp, #32]
 800bfd8:	9b07      	ldr	r3, [sp, #28]
 800bfda:	3308      	adds	r3, #8
 800bfdc:	9307      	str	r3, [sp, #28]
 800bfde:	9b06      	ldr	r3, [sp, #24]
 800bfe0:	3308      	adds	r3, #8
 800bfe2:	9306      	str	r3, [sp, #24]
 800bfe4:	9b05      	ldr	r3, [sp, #20]
 800bfe6:	3308      	adds	r3, #8
 800bfe8:	9305      	str	r3, [sp, #20]
 800bfea:	9b04      	ldr	r3, [sp, #16]
 800bfec:	3308      	adds	r3, #8
 800bfee:	9304      	str	r3, [sp, #16]
 800bff0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bff2:	f109 0901 	add.w	r9, r9, #1
 800bff6:	454b      	cmp	r3, r9
 800bff8:	f47f ae7d 	bne.w	800bcf6 <arm_radix8_butterfly_f32+0x25e>
 800bffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bffe:	00db      	lsls	r3, r3, #3
 800c000:	b29b      	uxth	r3, r3
 800c002:	46d9      	mov	r9, fp
 800c004:	9310      	str	r3, [sp, #64]	; 0x40
 800c006:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800c00a:	e554      	b.n	800bab6 <arm_radix8_butterfly_f32+0x1e>
 800c00c:	b015      	add	sp, #84	; 0x54
 800c00e:	ecbd 8b10 	vpop	{d8-d15}
 800c012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c016:	bf00      	nop

0800c018 <memset>:
 800c018:	4402      	add	r2, r0
 800c01a:	4603      	mov	r3, r0
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d100      	bne.n	800c022 <memset+0xa>
 800c020:	4770      	bx	lr
 800c022:	f803 1b01 	strb.w	r1, [r3], #1
 800c026:	e7f9      	b.n	800c01c <memset+0x4>

0800c028 <__errno>:
 800c028:	4b01      	ldr	r3, [pc, #4]	; (800c030 <__errno+0x8>)
 800c02a:	6818      	ldr	r0, [r3, #0]
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	20000068 	.word	0x20000068

0800c034 <__libc_init_array>:
 800c034:	b570      	push	{r4, r5, r6, lr}
 800c036:	4d0d      	ldr	r5, [pc, #52]	; (800c06c <__libc_init_array+0x38>)
 800c038:	4c0d      	ldr	r4, [pc, #52]	; (800c070 <__libc_init_array+0x3c>)
 800c03a:	1b64      	subs	r4, r4, r5
 800c03c:	10a4      	asrs	r4, r4, #2
 800c03e:	2600      	movs	r6, #0
 800c040:	42a6      	cmp	r6, r4
 800c042:	d109      	bne.n	800c058 <__libc_init_array+0x24>
 800c044:	4d0b      	ldr	r5, [pc, #44]	; (800c074 <__libc_init_array+0x40>)
 800c046:	4c0c      	ldr	r4, [pc, #48]	; (800c078 <__libc_init_array+0x44>)
 800c048:	f002 fc64 	bl	800e914 <_init>
 800c04c:	1b64      	subs	r4, r4, r5
 800c04e:	10a4      	asrs	r4, r4, #2
 800c050:	2600      	movs	r6, #0
 800c052:	42a6      	cmp	r6, r4
 800c054:	d105      	bne.n	800c062 <__libc_init_array+0x2e>
 800c056:	bd70      	pop	{r4, r5, r6, pc}
 800c058:	f855 3b04 	ldr.w	r3, [r5], #4
 800c05c:	4798      	blx	r3
 800c05e:	3601      	adds	r6, #1
 800c060:	e7ee      	b.n	800c040 <__libc_init_array+0xc>
 800c062:	f855 3b04 	ldr.w	r3, [r5], #4
 800c066:	4798      	blx	r3
 800c068:	3601      	adds	r6, #1
 800c06a:	e7f2      	b.n	800c052 <__libc_init_array+0x1e>
 800c06c:	080240d8 	.word	0x080240d8
 800c070:	080240d8 	.word	0x080240d8
 800c074:	080240d8 	.word	0x080240d8
 800c078:	080240dc 	.word	0x080240dc

0800c07c <pow>:
 800c07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07e:	ed2d 8b02 	vpush	{d8}
 800c082:	eeb0 8a40 	vmov.f32	s16, s0
 800c086:	eef0 8a60 	vmov.f32	s17, s1
 800c08a:	ec55 4b11 	vmov	r4, r5, d1
 800c08e:	f000 fab7 	bl	800c600 <__ieee754_pow>
 800c092:	4622      	mov	r2, r4
 800c094:	462b      	mov	r3, r5
 800c096:	4620      	mov	r0, r4
 800c098:	4629      	mov	r1, r5
 800c09a:	ec57 6b10 	vmov	r6, r7, d0
 800c09e:	f7f4 fd0f 	bl	8000ac0 <__aeabi_dcmpun>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d13b      	bne.n	800c11e <pow+0xa2>
 800c0a6:	ec51 0b18 	vmov	r0, r1, d8
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	f7f4 fcd5 	bl	8000a5c <__aeabi_dcmpeq>
 800c0b2:	b1b8      	cbz	r0, 800c0e4 <pow+0x68>
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	4629      	mov	r1, r5
 800c0bc:	f7f4 fcce 	bl	8000a5c <__aeabi_dcmpeq>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	d146      	bne.n	800c152 <pow+0xd6>
 800c0c4:	ec45 4b10 	vmov	d0, r4, r5
 800c0c8:	f000 f904 	bl	800c2d4 <finite>
 800c0cc:	b338      	cbz	r0, 800c11e <pow+0xa2>
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	4629      	mov	r1, r5
 800c0d6:	f7f4 fccb 	bl	8000a70 <__aeabi_dcmplt>
 800c0da:	b300      	cbz	r0, 800c11e <pow+0xa2>
 800c0dc:	f7ff ffa4 	bl	800c028 <__errno>
 800c0e0:	2322      	movs	r3, #34	; 0x22
 800c0e2:	e01b      	b.n	800c11c <pow+0xa0>
 800c0e4:	ec47 6b10 	vmov	d0, r6, r7
 800c0e8:	f000 f8f4 	bl	800c2d4 <finite>
 800c0ec:	b9e0      	cbnz	r0, 800c128 <pow+0xac>
 800c0ee:	eeb0 0a48 	vmov.f32	s0, s16
 800c0f2:	eef0 0a68 	vmov.f32	s1, s17
 800c0f6:	f000 f8ed 	bl	800c2d4 <finite>
 800c0fa:	b1a8      	cbz	r0, 800c128 <pow+0xac>
 800c0fc:	ec45 4b10 	vmov	d0, r4, r5
 800c100:	f000 f8e8 	bl	800c2d4 <finite>
 800c104:	b180      	cbz	r0, 800c128 <pow+0xac>
 800c106:	4632      	mov	r2, r6
 800c108:	463b      	mov	r3, r7
 800c10a:	4630      	mov	r0, r6
 800c10c:	4639      	mov	r1, r7
 800c10e:	f7f4 fcd7 	bl	8000ac0 <__aeabi_dcmpun>
 800c112:	2800      	cmp	r0, #0
 800c114:	d0e2      	beq.n	800c0dc <pow+0x60>
 800c116:	f7ff ff87 	bl	800c028 <__errno>
 800c11a:	2321      	movs	r3, #33	; 0x21
 800c11c:	6003      	str	r3, [r0, #0]
 800c11e:	ecbd 8b02 	vpop	{d8}
 800c122:	ec47 6b10 	vmov	d0, r6, r7
 800c126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c128:	2200      	movs	r2, #0
 800c12a:	2300      	movs	r3, #0
 800c12c:	4630      	mov	r0, r6
 800c12e:	4639      	mov	r1, r7
 800c130:	f7f4 fc94 	bl	8000a5c <__aeabi_dcmpeq>
 800c134:	2800      	cmp	r0, #0
 800c136:	d0f2      	beq.n	800c11e <pow+0xa2>
 800c138:	eeb0 0a48 	vmov.f32	s0, s16
 800c13c:	eef0 0a68 	vmov.f32	s1, s17
 800c140:	f000 f8c8 	bl	800c2d4 <finite>
 800c144:	2800      	cmp	r0, #0
 800c146:	d0ea      	beq.n	800c11e <pow+0xa2>
 800c148:	ec45 4b10 	vmov	d0, r4, r5
 800c14c:	f000 f8c2 	bl	800c2d4 <finite>
 800c150:	e7c3      	b.n	800c0da <pow+0x5e>
 800c152:	4f01      	ldr	r7, [pc, #4]	; (800c158 <pow+0xdc>)
 800c154:	2600      	movs	r6, #0
 800c156:	e7e2      	b.n	800c11e <pow+0xa2>
 800c158:	3ff00000 	.word	0x3ff00000
 800c15c:	00000000 	.word	0x00000000

0800c160 <sin>:
 800c160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c162:	ec53 2b10 	vmov	r2, r3, d0
 800c166:	4828      	ldr	r0, [pc, #160]	; (800c208 <sin+0xa8>)
 800c168:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c16c:	4281      	cmp	r1, r0
 800c16e:	dc07      	bgt.n	800c180 <sin+0x20>
 800c170:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c200 <sin+0xa0>
 800c174:	2000      	movs	r0, #0
 800c176:	b005      	add	sp, #20
 800c178:	f85d eb04 	ldr.w	lr, [sp], #4
 800c17c:	f000 b980 	b.w	800c480 <__kernel_sin>
 800c180:	4822      	ldr	r0, [pc, #136]	; (800c20c <sin+0xac>)
 800c182:	4281      	cmp	r1, r0
 800c184:	dd09      	ble.n	800c19a <sin+0x3a>
 800c186:	ee10 0a10 	vmov	r0, s0
 800c18a:	4619      	mov	r1, r3
 800c18c:	f7f4 f846 	bl	800021c <__aeabi_dsub>
 800c190:	ec41 0b10 	vmov	d0, r0, r1
 800c194:	b005      	add	sp, #20
 800c196:	f85d fb04 	ldr.w	pc, [sp], #4
 800c19a:	4668      	mov	r0, sp
 800c19c:	f000 ff5c 	bl	800d058 <__ieee754_rem_pio2>
 800c1a0:	f000 0003 	and.w	r0, r0, #3
 800c1a4:	2801      	cmp	r0, #1
 800c1a6:	d00c      	beq.n	800c1c2 <sin+0x62>
 800c1a8:	2802      	cmp	r0, #2
 800c1aa:	d011      	beq.n	800c1d0 <sin+0x70>
 800c1ac:	b9f0      	cbnz	r0, 800c1ec <sin+0x8c>
 800c1ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c1b2:	ed9d 0b00 	vldr	d0, [sp]
 800c1b6:	2001      	movs	r0, #1
 800c1b8:	f000 f962 	bl	800c480 <__kernel_sin>
 800c1bc:	ec51 0b10 	vmov	r0, r1, d0
 800c1c0:	e7e6      	b.n	800c190 <sin+0x30>
 800c1c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c1c6:	ed9d 0b00 	vldr	d0, [sp]
 800c1ca:	f000 f891 	bl	800c2f0 <__kernel_cos>
 800c1ce:	e7f5      	b.n	800c1bc <sin+0x5c>
 800c1d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c1d4:	ed9d 0b00 	vldr	d0, [sp]
 800c1d8:	2001      	movs	r0, #1
 800c1da:	f000 f951 	bl	800c480 <__kernel_sin>
 800c1de:	ec53 2b10 	vmov	r2, r3, d0
 800c1e2:	ee10 0a10 	vmov	r0, s0
 800c1e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c1ea:	e7d1      	b.n	800c190 <sin+0x30>
 800c1ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c1f0:	ed9d 0b00 	vldr	d0, [sp]
 800c1f4:	f000 f87c 	bl	800c2f0 <__kernel_cos>
 800c1f8:	e7f1      	b.n	800c1de <sin+0x7e>
 800c1fa:	bf00      	nop
 800c1fc:	f3af 8000 	nop.w
	...
 800c208:	3fe921fb 	.word	0x3fe921fb
 800c20c:	7fefffff 	.word	0x7fefffff

0800c210 <sqrtf>:
 800c210:	b508      	push	{r3, lr}
 800c212:	ed2d 8b02 	vpush	{d8}
 800c216:	eeb0 8a40 	vmov.f32	s16, s0
 800c21a:	f000 f866 	bl	800c2ea <__ieee754_sqrtf>
 800c21e:	eeb4 8a48 	vcmp.f32	s16, s16
 800c222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c226:	d60c      	bvs.n	800c242 <sqrtf+0x32>
 800c228:	eddf 8a07 	vldr	s17, [pc, #28]	; 800c248 <sqrtf+0x38>
 800c22c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c234:	d505      	bpl.n	800c242 <sqrtf+0x32>
 800c236:	f7ff fef7 	bl	800c028 <__errno>
 800c23a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c23e:	2321      	movs	r3, #33	; 0x21
 800c240:	6003      	str	r3, [r0, #0]
 800c242:	ecbd 8b02 	vpop	{d8}
 800c246:	bd08      	pop	{r3, pc}
 800c248:	00000000 	.word	0x00000000

0800c24c <cosf>:
 800c24c:	ee10 3a10 	vmov	r3, s0
 800c250:	b507      	push	{r0, r1, r2, lr}
 800c252:	4a1e      	ldr	r2, [pc, #120]	; (800c2cc <cosf+0x80>)
 800c254:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c258:	4293      	cmp	r3, r2
 800c25a:	dc06      	bgt.n	800c26a <cosf+0x1e>
 800c25c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800c2d0 <cosf+0x84>
 800c260:	b003      	add	sp, #12
 800c262:	f85d eb04 	ldr.w	lr, [sp], #4
 800c266:	f001 b907 	b.w	800d478 <__kernel_cosf>
 800c26a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c26e:	db04      	blt.n	800c27a <cosf+0x2e>
 800c270:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c274:	b003      	add	sp, #12
 800c276:	f85d fb04 	ldr.w	pc, [sp], #4
 800c27a:	4668      	mov	r0, sp
 800c27c:	f001 f9a2 	bl	800d5c4 <__ieee754_rem_pio2f>
 800c280:	f000 0003 	and.w	r0, r0, #3
 800c284:	2801      	cmp	r0, #1
 800c286:	d009      	beq.n	800c29c <cosf+0x50>
 800c288:	2802      	cmp	r0, #2
 800c28a:	d010      	beq.n	800c2ae <cosf+0x62>
 800c28c:	b9b0      	cbnz	r0, 800c2bc <cosf+0x70>
 800c28e:	eddd 0a01 	vldr	s1, [sp, #4]
 800c292:	ed9d 0a00 	vldr	s0, [sp]
 800c296:	f001 f8ef 	bl	800d478 <__kernel_cosf>
 800c29a:	e7eb      	b.n	800c274 <cosf+0x28>
 800c29c:	eddd 0a01 	vldr	s1, [sp, #4]
 800c2a0:	ed9d 0a00 	vldr	s0, [sp]
 800c2a4:	f001 f946 	bl	800d534 <__kernel_sinf>
 800c2a8:	eeb1 0a40 	vneg.f32	s0, s0
 800c2ac:	e7e2      	b.n	800c274 <cosf+0x28>
 800c2ae:	eddd 0a01 	vldr	s1, [sp, #4]
 800c2b2:	ed9d 0a00 	vldr	s0, [sp]
 800c2b6:	f001 f8df 	bl	800d478 <__kernel_cosf>
 800c2ba:	e7f5      	b.n	800c2a8 <cosf+0x5c>
 800c2bc:	eddd 0a01 	vldr	s1, [sp, #4]
 800c2c0:	ed9d 0a00 	vldr	s0, [sp]
 800c2c4:	2001      	movs	r0, #1
 800c2c6:	f001 f935 	bl	800d534 <__kernel_sinf>
 800c2ca:	e7d3      	b.n	800c274 <cosf+0x28>
 800c2cc:	3f490fd8 	.word	0x3f490fd8
 800c2d0:	00000000 	.word	0x00000000

0800c2d4 <finite>:
 800c2d4:	b082      	sub	sp, #8
 800c2d6:	ed8d 0b00 	vstr	d0, [sp]
 800c2da:	9801      	ldr	r0, [sp, #4]
 800c2dc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c2e0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c2e4:	0fc0      	lsrs	r0, r0, #31
 800c2e6:	b002      	add	sp, #8
 800c2e8:	4770      	bx	lr

0800c2ea <__ieee754_sqrtf>:
 800c2ea:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c2ee:	4770      	bx	lr

0800c2f0 <__kernel_cos>:
 800c2f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f4:	ec57 6b10 	vmov	r6, r7, d0
 800c2f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c2fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c300:	ed8d 1b00 	vstr	d1, [sp]
 800c304:	da07      	bge.n	800c316 <__kernel_cos+0x26>
 800c306:	ee10 0a10 	vmov	r0, s0
 800c30a:	4639      	mov	r1, r7
 800c30c:	f7f4 fbee 	bl	8000aec <__aeabi_d2iz>
 800c310:	2800      	cmp	r0, #0
 800c312:	f000 8088 	beq.w	800c426 <__kernel_cos+0x136>
 800c316:	4632      	mov	r2, r6
 800c318:	463b      	mov	r3, r7
 800c31a:	4630      	mov	r0, r6
 800c31c:	4639      	mov	r1, r7
 800c31e:	f7f4 f935 	bl	800058c <__aeabi_dmul>
 800c322:	4b51      	ldr	r3, [pc, #324]	; (800c468 <__kernel_cos+0x178>)
 800c324:	2200      	movs	r2, #0
 800c326:	4604      	mov	r4, r0
 800c328:	460d      	mov	r5, r1
 800c32a:	f7f4 f92f 	bl	800058c <__aeabi_dmul>
 800c32e:	a340      	add	r3, pc, #256	; (adr r3, 800c430 <__kernel_cos+0x140>)
 800c330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c334:	4682      	mov	sl, r0
 800c336:	468b      	mov	fp, r1
 800c338:	4620      	mov	r0, r4
 800c33a:	4629      	mov	r1, r5
 800c33c:	f7f4 f926 	bl	800058c <__aeabi_dmul>
 800c340:	a33d      	add	r3, pc, #244	; (adr r3, 800c438 <__kernel_cos+0x148>)
 800c342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c346:	f7f3 ff6b 	bl	8000220 <__adddf3>
 800c34a:	4622      	mov	r2, r4
 800c34c:	462b      	mov	r3, r5
 800c34e:	f7f4 f91d 	bl	800058c <__aeabi_dmul>
 800c352:	a33b      	add	r3, pc, #236	; (adr r3, 800c440 <__kernel_cos+0x150>)
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	f7f3 ff60 	bl	800021c <__aeabi_dsub>
 800c35c:	4622      	mov	r2, r4
 800c35e:	462b      	mov	r3, r5
 800c360:	f7f4 f914 	bl	800058c <__aeabi_dmul>
 800c364:	a338      	add	r3, pc, #224	; (adr r3, 800c448 <__kernel_cos+0x158>)
 800c366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36a:	f7f3 ff59 	bl	8000220 <__adddf3>
 800c36e:	4622      	mov	r2, r4
 800c370:	462b      	mov	r3, r5
 800c372:	f7f4 f90b 	bl	800058c <__aeabi_dmul>
 800c376:	a336      	add	r3, pc, #216	; (adr r3, 800c450 <__kernel_cos+0x160>)
 800c378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37c:	f7f3 ff4e 	bl	800021c <__aeabi_dsub>
 800c380:	4622      	mov	r2, r4
 800c382:	462b      	mov	r3, r5
 800c384:	f7f4 f902 	bl	800058c <__aeabi_dmul>
 800c388:	a333      	add	r3, pc, #204	; (adr r3, 800c458 <__kernel_cos+0x168>)
 800c38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38e:	f7f3 ff47 	bl	8000220 <__adddf3>
 800c392:	4622      	mov	r2, r4
 800c394:	462b      	mov	r3, r5
 800c396:	f7f4 f8f9 	bl	800058c <__aeabi_dmul>
 800c39a:	4622      	mov	r2, r4
 800c39c:	462b      	mov	r3, r5
 800c39e:	f7f4 f8f5 	bl	800058c <__aeabi_dmul>
 800c3a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	460d      	mov	r5, r1
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	4639      	mov	r1, r7
 800c3ae:	f7f4 f8ed 	bl	800058c <__aeabi_dmul>
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	4629      	mov	r1, r5
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	f7f3 ff2f 	bl	800021c <__aeabi_dsub>
 800c3be:	4b2b      	ldr	r3, [pc, #172]	; (800c46c <__kernel_cos+0x17c>)
 800c3c0:	4598      	cmp	r8, r3
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	460f      	mov	r7, r1
 800c3c6:	dc10      	bgt.n	800c3ea <__kernel_cos+0xfa>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	4650      	mov	r0, sl
 800c3ce:	4659      	mov	r1, fp
 800c3d0:	f7f3 ff24 	bl	800021c <__aeabi_dsub>
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	4926      	ldr	r1, [pc, #152]	; (800c470 <__kernel_cos+0x180>)
 800c3d8:	4602      	mov	r2, r0
 800c3da:	2000      	movs	r0, #0
 800c3dc:	f7f3 ff1e 	bl	800021c <__aeabi_dsub>
 800c3e0:	ec41 0b10 	vmov	d0, r0, r1
 800c3e4:	b003      	add	sp, #12
 800c3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ea:	4b22      	ldr	r3, [pc, #136]	; (800c474 <__kernel_cos+0x184>)
 800c3ec:	4920      	ldr	r1, [pc, #128]	; (800c470 <__kernel_cos+0x180>)
 800c3ee:	4598      	cmp	r8, r3
 800c3f0:	bfcc      	ite	gt
 800c3f2:	4d21      	ldrgt	r5, [pc, #132]	; (800c478 <__kernel_cos+0x188>)
 800c3f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c3f8:	2400      	movs	r4, #0
 800c3fa:	4622      	mov	r2, r4
 800c3fc:	462b      	mov	r3, r5
 800c3fe:	2000      	movs	r0, #0
 800c400:	f7f3 ff0c 	bl	800021c <__aeabi_dsub>
 800c404:	4622      	mov	r2, r4
 800c406:	4680      	mov	r8, r0
 800c408:	4689      	mov	r9, r1
 800c40a:	462b      	mov	r3, r5
 800c40c:	4650      	mov	r0, sl
 800c40e:	4659      	mov	r1, fp
 800c410:	f7f3 ff04 	bl	800021c <__aeabi_dsub>
 800c414:	4632      	mov	r2, r6
 800c416:	463b      	mov	r3, r7
 800c418:	f7f3 ff00 	bl	800021c <__aeabi_dsub>
 800c41c:	4602      	mov	r2, r0
 800c41e:	460b      	mov	r3, r1
 800c420:	4640      	mov	r0, r8
 800c422:	4649      	mov	r1, r9
 800c424:	e7da      	b.n	800c3dc <__kernel_cos+0xec>
 800c426:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c460 <__kernel_cos+0x170>
 800c42a:	e7db      	b.n	800c3e4 <__kernel_cos+0xf4>
 800c42c:	f3af 8000 	nop.w
 800c430:	be8838d4 	.word	0xbe8838d4
 800c434:	bda8fae9 	.word	0xbda8fae9
 800c438:	bdb4b1c4 	.word	0xbdb4b1c4
 800c43c:	3e21ee9e 	.word	0x3e21ee9e
 800c440:	809c52ad 	.word	0x809c52ad
 800c444:	3e927e4f 	.word	0x3e927e4f
 800c448:	19cb1590 	.word	0x19cb1590
 800c44c:	3efa01a0 	.word	0x3efa01a0
 800c450:	16c15177 	.word	0x16c15177
 800c454:	3f56c16c 	.word	0x3f56c16c
 800c458:	5555554c 	.word	0x5555554c
 800c45c:	3fa55555 	.word	0x3fa55555
 800c460:	00000000 	.word	0x00000000
 800c464:	3ff00000 	.word	0x3ff00000
 800c468:	3fe00000 	.word	0x3fe00000
 800c46c:	3fd33332 	.word	0x3fd33332
 800c470:	3ff00000 	.word	0x3ff00000
 800c474:	3fe90000 	.word	0x3fe90000
 800c478:	3fd20000 	.word	0x3fd20000
 800c47c:	00000000 	.word	0x00000000

0800c480 <__kernel_sin>:
 800c480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c484:	ed2d 8b04 	vpush	{d8-d9}
 800c488:	eeb0 8a41 	vmov.f32	s16, s2
 800c48c:	eef0 8a61 	vmov.f32	s17, s3
 800c490:	ec55 4b10 	vmov	r4, r5, d0
 800c494:	b083      	sub	sp, #12
 800c496:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c49a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c49e:	9001      	str	r0, [sp, #4]
 800c4a0:	da06      	bge.n	800c4b0 <__kernel_sin+0x30>
 800c4a2:	ee10 0a10 	vmov	r0, s0
 800c4a6:	4629      	mov	r1, r5
 800c4a8:	f7f4 fb20 	bl	8000aec <__aeabi_d2iz>
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	d051      	beq.n	800c554 <__kernel_sin+0xd4>
 800c4b0:	4622      	mov	r2, r4
 800c4b2:	462b      	mov	r3, r5
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	4629      	mov	r1, r5
 800c4b8:	f7f4 f868 	bl	800058c <__aeabi_dmul>
 800c4bc:	4682      	mov	sl, r0
 800c4be:	468b      	mov	fp, r1
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	f7f4 f860 	bl	800058c <__aeabi_dmul>
 800c4cc:	a341      	add	r3, pc, #260	; (adr r3, 800c5d4 <__kernel_sin+0x154>)
 800c4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d2:	4680      	mov	r8, r0
 800c4d4:	4689      	mov	r9, r1
 800c4d6:	4650      	mov	r0, sl
 800c4d8:	4659      	mov	r1, fp
 800c4da:	f7f4 f857 	bl	800058c <__aeabi_dmul>
 800c4de:	a33f      	add	r3, pc, #252	; (adr r3, 800c5dc <__kernel_sin+0x15c>)
 800c4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e4:	f7f3 fe9a 	bl	800021c <__aeabi_dsub>
 800c4e8:	4652      	mov	r2, sl
 800c4ea:	465b      	mov	r3, fp
 800c4ec:	f7f4 f84e 	bl	800058c <__aeabi_dmul>
 800c4f0:	a33c      	add	r3, pc, #240	; (adr r3, 800c5e4 <__kernel_sin+0x164>)
 800c4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f6:	f7f3 fe93 	bl	8000220 <__adddf3>
 800c4fa:	4652      	mov	r2, sl
 800c4fc:	465b      	mov	r3, fp
 800c4fe:	f7f4 f845 	bl	800058c <__aeabi_dmul>
 800c502:	a33a      	add	r3, pc, #232	; (adr r3, 800c5ec <__kernel_sin+0x16c>)
 800c504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c508:	f7f3 fe88 	bl	800021c <__aeabi_dsub>
 800c50c:	4652      	mov	r2, sl
 800c50e:	465b      	mov	r3, fp
 800c510:	f7f4 f83c 	bl	800058c <__aeabi_dmul>
 800c514:	a337      	add	r3, pc, #220	; (adr r3, 800c5f4 <__kernel_sin+0x174>)
 800c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51a:	f7f3 fe81 	bl	8000220 <__adddf3>
 800c51e:	9b01      	ldr	r3, [sp, #4]
 800c520:	4606      	mov	r6, r0
 800c522:	460f      	mov	r7, r1
 800c524:	b9eb      	cbnz	r3, 800c562 <__kernel_sin+0xe2>
 800c526:	4602      	mov	r2, r0
 800c528:	460b      	mov	r3, r1
 800c52a:	4650      	mov	r0, sl
 800c52c:	4659      	mov	r1, fp
 800c52e:	f7f4 f82d 	bl	800058c <__aeabi_dmul>
 800c532:	a325      	add	r3, pc, #148	; (adr r3, 800c5c8 <__kernel_sin+0x148>)
 800c534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c538:	f7f3 fe70 	bl	800021c <__aeabi_dsub>
 800c53c:	4642      	mov	r2, r8
 800c53e:	464b      	mov	r3, r9
 800c540:	f7f4 f824 	bl	800058c <__aeabi_dmul>
 800c544:	4602      	mov	r2, r0
 800c546:	460b      	mov	r3, r1
 800c548:	4620      	mov	r0, r4
 800c54a:	4629      	mov	r1, r5
 800c54c:	f7f3 fe68 	bl	8000220 <__adddf3>
 800c550:	4604      	mov	r4, r0
 800c552:	460d      	mov	r5, r1
 800c554:	ec45 4b10 	vmov	d0, r4, r5
 800c558:	b003      	add	sp, #12
 800c55a:	ecbd 8b04 	vpop	{d8-d9}
 800c55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c562:	4b1b      	ldr	r3, [pc, #108]	; (800c5d0 <__kernel_sin+0x150>)
 800c564:	ec51 0b18 	vmov	r0, r1, d8
 800c568:	2200      	movs	r2, #0
 800c56a:	f7f4 f80f 	bl	800058c <__aeabi_dmul>
 800c56e:	4632      	mov	r2, r6
 800c570:	ec41 0b19 	vmov	d9, r0, r1
 800c574:	463b      	mov	r3, r7
 800c576:	4640      	mov	r0, r8
 800c578:	4649      	mov	r1, r9
 800c57a:	f7f4 f807 	bl	800058c <__aeabi_dmul>
 800c57e:	4602      	mov	r2, r0
 800c580:	460b      	mov	r3, r1
 800c582:	ec51 0b19 	vmov	r0, r1, d9
 800c586:	f7f3 fe49 	bl	800021c <__aeabi_dsub>
 800c58a:	4652      	mov	r2, sl
 800c58c:	465b      	mov	r3, fp
 800c58e:	f7f3 fffd 	bl	800058c <__aeabi_dmul>
 800c592:	ec53 2b18 	vmov	r2, r3, d8
 800c596:	f7f3 fe41 	bl	800021c <__aeabi_dsub>
 800c59a:	a30b      	add	r3, pc, #44	; (adr r3, 800c5c8 <__kernel_sin+0x148>)
 800c59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	460f      	mov	r7, r1
 800c5a4:	4640      	mov	r0, r8
 800c5a6:	4649      	mov	r1, r9
 800c5a8:	f7f3 fff0 	bl	800058c <__aeabi_dmul>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	4639      	mov	r1, r7
 800c5b4:	f7f3 fe34 	bl	8000220 <__adddf3>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	4620      	mov	r0, r4
 800c5be:	4629      	mov	r1, r5
 800c5c0:	f7f3 fe2c 	bl	800021c <__aeabi_dsub>
 800c5c4:	e7c4      	b.n	800c550 <__kernel_sin+0xd0>
 800c5c6:	bf00      	nop
 800c5c8:	55555549 	.word	0x55555549
 800c5cc:	3fc55555 	.word	0x3fc55555
 800c5d0:	3fe00000 	.word	0x3fe00000
 800c5d4:	5acfd57c 	.word	0x5acfd57c
 800c5d8:	3de5d93a 	.word	0x3de5d93a
 800c5dc:	8a2b9ceb 	.word	0x8a2b9ceb
 800c5e0:	3e5ae5e6 	.word	0x3e5ae5e6
 800c5e4:	57b1fe7d 	.word	0x57b1fe7d
 800c5e8:	3ec71de3 	.word	0x3ec71de3
 800c5ec:	19c161d5 	.word	0x19c161d5
 800c5f0:	3f2a01a0 	.word	0x3f2a01a0
 800c5f4:	1110f8a6 	.word	0x1110f8a6
 800c5f8:	3f811111 	.word	0x3f811111
 800c5fc:	00000000 	.word	0x00000000

0800c600 <__ieee754_pow>:
 800c600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c604:	ed2d 8b06 	vpush	{d8-d10}
 800c608:	b089      	sub	sp, #36	; 0x24
 800c60a:	ed8d 1b00 	vstr	d1, [sp]
 800c60e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c612:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c616:	ea58 0102 	orrs.w	r1, r8, r2
 800c61a:	ec57 6b10 	vmov	r6, r7, d0
 800c61e:	d115      	bne.n	800c64c <__ieee754_pow+0x4c>
 800c620:	19b3      	adds	r3, r6, r6
 800c622:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c626:	4152      	adcs	r2, r2
 800c628:	4299      	cmp	r1, r3
 800c62a:	4b89      	ldr	r3, [pc, #548]	; (800c850 <__ieee754_pow+0x250>)
 800c62c:	4193      	sbcs	r3, r2
 800c62e:	f080 84d1 	bcs.w	800cfd4 <__ieee754_pow+0x9d4>
 800c632:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c636:	4630      	mov	r0, r6
 800c638:	4639      	mov	r1, r7
 800c63a:	f7f3 fdf1 	bl	8000220 <__adddf3>
 800c63e:	ec41 0b10 	vmov	d0, r0, r1
 800c642:	b009      	add	sp, #36	; 0x24
 800c644:	ecbd 8b06 	vpop	{d8-d10}
 800c648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c64c:	4b81      	ldr	r3, [pc, #516]	; (800c854 <__ieee754_pow+0x254>)
 800c64e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c652:	429c      	cmp	r4, r3
 800c654:	ee10 aa10 	vmov	sl, s0
 800c658:	463d      	mov	r5, r7
 800c65a:	dc06      	bgt.n	800c66a <__ieee754_pow+0x6a>
 800c65c:	d101      	bne.n	800c662 <__ieee754_pow+0x62>
 800c65e:	2e00      	cmp	r6, #0
 800c660:	d1e7      	bne.n	800c632 <__ieee754_pow+0x32>
 800c662:	4598      	cmp	r8, r3
 800c664:	dc01      	bgt.n	800c66a <__ieee754_pow+0x6a>
 800c666:	d10f      	bne.n	800c688 <__ieee754_pow+0x88>
 800c668:	b172      	cbz	r2, 800c688 <__ieee754_pow+0x88>
 800c66a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c66e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c672:	ea55 050a 	orrs.w	r5, r5, sl
 800c676:	d1dc      	bne.n	800c632 <__ieee754_pow+0x32>
 800c678:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c67c:	18db      	adds	r3, r3, r3
 800c67e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c682:	4152      	adcs	r2, r2
 800c684:	429d      	cmp	r5, r3
 800c686:	e7d0      	b.n	800c62a <__ieee754_pow+0x2a>
 800c688:	2d00      	cmp	r5, #0
 800c68a:	da3b      	bge.n	800c704 <__ieee754_pow+0x104>
 800c68c:	4b72      	ldr	r3, [pc, #456]	; (800c858 <__ieee754_pow+0x258>)
 800c68e:	4598      	cmp	r8, r3
 800c690:	dc51      	bgt.n	800c736 <__ieee754_pow+0x136>
 800c692:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c696:	4598      	cmp	r8, r3
 800c698:	f340 84ab 	ble.w	800cff2 <__ieee754_pow+0x9f2>
 800c69c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c6a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c6a4:	2b14      	cmp	r3, #20
 800c6a6:	dd0f      	ble.n	800c6c8 <__ieee754_pow+0xc8>
 800c6a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c6ac:	fa22 f103 	lsr.w	r1, r2, r3
 800c6b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	f040 849c 	bne.w	800cff2 <__ieee754_pow+0x9f2>
 800c6ba:	f001 0101 	and.w	r1, r1, #1
 800c6be:	f1c1 0302 	rsb	r3, r1, #2
 800c6c2:	9304      	str	r3, [sp, #16]
 800c6c4:	b182      	cbz	r2, 800c6e8 <__ieee754_pow+0xe8>
 800c6c6:	e05f      	b.n	800c788 <__ieee754_pow+0x188>
 800c6c8:	2a00      	cmp	r2, #0
 800c6ca:	d15b      	bne.n	800c784 <__ieee754_pow+0x184>
 800c6cc:	f1c3 0314 	rsb	r3, r3, #20
 800c6d0:	fa48 f103 	asr.w	r1, r8, r3
 800c6d4:	fa01 f303 	lsl.w	r3, r1, r3
 800c6d8:	4543      	cmp	r3, r8
 800c6da:	f040 8487 	bne.w	800cfec <__ieee754_pow+0x9ec>
 800c6de:	f001 0101 	and.w	r1, r1, #1
 800c6e2:	f1c1 0302 	rsb	r3, r1, #2
 800c6e6:	9304      	str	r3, [sp, #16]
 800c6e8:	4b5c      	ldr	r3, [pc, #368]	; (800c85c <__ieee754_pow+0x25c>)
 800c6ea:	4598      	cmp	r8, r3
 800c6ec:	d132      	bne.n	800c754 <__ieee754_pow+0x154>
 800c6ee:	f1b9 0f00 	cmp.w	r9, #0
 800c6f2:	f280 8477 	bge.w	800cfe4 <__ieee754_pow+0x9e4>
 800c6f6:	4959      	ldr	r1, [pc, #356]	; (800c85c <__ieee754_pow+0x25c>)
 800c6f8:	4632      	mov	r2, r6
 800c6fa:	463b      	mov	r3, r7
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	f7f4 f86f 	bl	80007e0 <__aeabi_ddiv>
 800c702:	e79c      	b.n	800c63e <__ieee754_pow+0x3e>
 800c704:	2300      	movs	r3, #0
 800c706:	9304      	str	r3, [sp, #16]
 800c708:	2a00      	cmp	r2, #0
 800c70a:	d13d      	bne.n	800c788 <__ieee754_pow+0x188>
 800c70c:	4b51      	ldr	r3, [pc, #324]	; (800c854 <__ieee754_pow+0x254>)
 800c70e:	4598      	cmp	r8, r3
 800c710:	d1ea      	bne.n	800c6e8 <__ieee754_pow+0xe8>
 800c712:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c716:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c71a:	ea53 030a 	orrs.w	r3, r3, sl
 800c71e:	f000 8459 	beq.w	800cfd4 <__ieee754_pow+0x9d4>
 800c722:	4b4f      	ldr	r3, [pc, #316]	; (800c860 <__ieee754_pow+0x260>)
 800c724:	429c      	cmp	r4, r3
 800c726:	dd08      	ble.n	800c73a <__ieee754_pow+0x13a>
 800c728:	f1b9 0f00 	cmp.w	r9, #0
 800c72c:	f2c0 8456 	blt.w	800cfdc <__ieee754_pow+0x9dc>
 800c730:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c734:	e783      	b.n	800c63e <__ieee754_pow+0x3e>
 800c736:	2302      	movs	r3, #2
 800c738:	e7e5      	b.n	800c706 <__ieee754_pow+0x106>
 800c73a:	f1b9 0f00 	cmp.w	r9, #0
 800c73e:	f04f 0000 	mov.w	r0, #0
 800c742:	f04f 0100 	mov.w	r1, #0
 800c746:	f6bf af7a 	bge.w	800c63e <__ieee754_pow+0x3e>
 800c74a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c74e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c752:	e774      	b.n	800c63e <__ieee754_pow+0x3e>
 800c754:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c758:	d106      	bne.n	800c768 <__ieee754_pow+0x168>
 800c75a:	4632      	mov	r2, r6
 800c75c:	463b      	mov	r3, r7
 800c75e:	4630      	mov	r0, r6
 800c760:	4639      	mov	r1, r7
 800c762:	f7f3 ff13 	bl	800058c <__aeabi_dmul>
 800c766:	e76a      	b.n	800c63e <__ieee754_pow+0x3e>
 800c768:	4b3e      	ldr	r3, [pc, #248]	; (800c864 <__ieee754_pow+0x264>)
 800c76a:	4599      	cmp	r9, r3
 800c76c:	d10c      	bne.n	800c788 <__ieee754_pow+0x188>
 800c76e:	2d00      	cmp	r5, #0
 800c770:	db0a      	blt.n	800c788 <__ieee754_pow+0x188>
 800c772:	ec47 6b10 	vmov	d0, r6, r7
 800c776:	b009      	add	sp, #36	; 0x24
 800c778:	ecbd 8b06 	vpop	{d8-d10}
 800c77c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c780:	f001 b904 	b.w	800d98c <__ieee754_sqrt>
 800c784:	2300      	movs	r3, #0
 800c786:	9304      	str	r3, [sp, #16]
 800c788:	ec47 6b10 	vmov	d0, r6, r7
 800c78c:	f000 fe6a 	bl	800d464 <fabs>
 800c790:	ec51 0b10 	vmov	r0, r1, d0
 800c794:	f1ba 0f00 	cmp.w	sl, #0
 800c798:	d129      	bne.n	800c7ee <__ieee754_pow+0x1ee>
 800c79a:	b124      	cbz	r4, 800c7a6 <__ieee754_pow+0x1a6>
 800c79c:	4b2f      	ldr	r3, [pc, #188]	; (800c85c <__ieee754_pow+0x25c>)
 800c79e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d123      	bne.n	800c7ee <__ieee754_pow+0x1ee>
 800c7a6:	f1b9 0f00 	cmp.w	r9, #0
 800c7aa:	da05      	bge.n	800c7b8 <__ieee754_pow+0x1b8>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	492a      	ldr	r1, [pc, #168]	; (800c85c <__ieee754_pow+0x25c>)
 800c7b4:	f7f4 f814 	bl	80007e0 <__aeabi_ddiv>
 800c7b8:	2d00      	cmp	r5, #0
 800c7ba:	f6bf af40 	bge.w	800c63e <__ieee754_pow+0x3e>
 800c7be:	9b04      	ldr	r3, [sp, #16]
 800c7c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c7c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c7c8:	431c      	orrs	r4, r3
 800c7ca:	d108      	bne.n	800c7de <__ieee754_pow+0x1de>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	4610      	mov	r0, r2
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	f7f3 fd22 	bl	800021c <__aeabi_dsub>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	460b      	mov	r3, r1
 800c7dc:	e78f      	b.n	800c6fe <__ieee754_pow+0xfe>
 800c7de:	9b04      	ldr	r3, [sp, #16]
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	f47f af2c 	bne.w	800c63e <__ieee754_pow+0x3e>
 800c7e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	e727      	b.n	800c63e <__ieee754_pow+0x3e>
 800c7ee:	0feb      	lsrs	r3, r5, #31
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	9306      	str	r3, [sp, #24]
 800c7f4:	9a06      	ldr	r2, [sp, #24]
 800c7f6:	9b04      	ldr	r3, [sp, #16]
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	d102      	bne.n	800c802 <__ieee754_pow+0x202>
 800c7fc:	4632      	mov	r2, r6
 800c7fe:	463b      	mov	r3, r7
 800c800:	e7e6      	b.n	800c7d0 <__ieee754_pow+0x1d0>
 800c802:	4b19      	ldr	r3, [pc, #100]	; (800c868 <__ieee754_pow+0x268>)
 800c804:	4598      	cmp	r8, r3
 800c806:	f340 80fb 	ble.w	800ca00 <__ieee754_pow+0x400>
 800c80a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c80e:	4598      	cmp	r8, r3
 800c810:	4b13      	ldr	r3, [pc, #76]	; (800c860 <__ieee754_pow+0x260>)
 800c812:	dd0c      	ble.n	800c82e <__ieee754_pow+0x22e>
 800c814:	429c      	cmp	r4, r3
 800c816:	dc0f      	bgt.n	800c838 <__ieee754_pow+0x238>
 800c818:	f1b9 0f00 	cmp.w	r9, #0
 800c81c:	da0f      	bge.n	800c83e <__ieee754_pow+0x23e>
 800c81e:	2000      	movs	r0, #0
 800c820:	b009      	add	sp, #36	; 0x24
 800c822:	ecbd 8b06 	vpop	{d8-d10}
 800c826:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82a:	f001 b8a6 	b.w	800d97a <__math_oflow>
 800c82e:	429c      	cmp	r4, r3
 800c830:	dbf2      	blt.n	800c818 <__ieee754_pow+0x218>
 800c832:	4b0a      	ldr	r3, [pc, #40]	; (800c85c <__ieee754_pow+0x25c>)
 800c834:	429c      	cmp	r4, r3
 800c836:	dd19      	ble.n	800c86c <__ieee754_pow+0x26c>
 800c838:	f1b9 0f00 	cmp.w	r9, #0
 800c83c:	dcef      	bgt.n	800c81e <__ieee754_pow+0x21e>
 800c83e:	2000      	movs	r0, #0
 800c840:	b009      	add	sp, #36	; 0x24
 800c842:	ecbd 8b06 	vpop	{d8-d10}
 800c846:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c84a:	f001 b88d 	b.w	800d968 <__math_uflow>
 800c84e:	bf00      	nop
 800c850:	fff00000 	.word	0xfff00000
 800c854:	7ff00000 	.word	0x7ff00000
 800c858:	433fffff 	.word	0x433fffff
 800c85c:	3ff00000 	.word	0x3ff00000
 800c860:	3fefffff 	.word	0x3fefffff
 800c864:	3fe00000 	.word	0x3fe00000
 800c868:	41e00000 	.word	0x41e00000
 800c86c:	4b60      	ldr	r3, [pc, #384]	; (800c9f0 <__ieee754_pow+0x3f0>)
 800c86e:	2200      	movs	r2, #0
 800c870:	f7f3 fcd4 	bl	800021c <__aeabi_dsub>
 800c874:	a354      	add	r3, pc, #336	; (adr r3, 800c9c8 <__ieee754_pow+0x3c8>)
 800c876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87a:	4604      	mov	r4, r0
 800c87c:	460d      	mov	r5, r1
 800c87e:	f7f3 fe85 	bl	800058c <__aeabi_dmul>
 800c882:	a353      	add	r3, pc, #332	; (adr r3, 800c9d0 <__ieee754_pow+0x3d0>)
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	4606      	mov	r6, r0
 800c88a:	460f      	mov	r7, r1
 800c88c:	4620      	mov	r0, r4
 800c88e:	4629      	mov	r1, r5
 800c890:	f7f3 fe7c 	bl	800058c <__aeabi_dmul>
 800c894:	4b57      	ldr	r3, [pc, #348]	; (800c9f4 <__ieee754_pow+0x3f4>)
 800c896:	4682      	mov	sl, r0
 800c898:	468b      	mov	fp, r1
 800c89a:	2200      	movs	r2, #0
 800c89c:	4620      	mov	r0, r4
 800c89e:	4629      	mov	r1, r5
 800c8a0:	f7f3 fe74 	bl	800058c <__aeabi_dmul>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	a14b      	add	r1, pc, #300	; (adr r1, 800c9d8 <__ieee754_pow+0x3d8>)
 800c8aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ae:	f7f3 fcb5 	bl	800021c <__aeabi_dsub>
 800c8b2:	4622      	mov	r2, r4
 800c8b4:	462b      	mov	r3, r5
 800c8b6:	f7f3 fe69 	bl	800058c <__aeabi_dmul>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	460b      	mov	r3, r1
 800c8be:	2000      	movs	r0, #0
 800c8c0:	494d      	ldr	r1, [pc, #308]	; (800c9f8 <__ieee754_pow+0x3f8>)
 800c8c2:	f7f3 fcab 	bl	800021c <__aeabi_dsub>
 800c8c6:	4622      	mov	r2, r4
 800c8c8:	4680      	mov	r8, r0
 800c8ca:	4689      	mov	r9, r1
 800c8cc:	462b      	mov	r3, r5
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	f7f3 fe5b 	bl	800058c <__aeabi_dmul>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	460b      	mov	r3, r1
 800c8da:	4640      	mov	r0, r8
 800c8dc:	4649      	mov	r1, r9
 800c8de:	f7f3 fe55 	bl	800058c <__aeabi_dmul>
 800c8e2:	a33f      	add	r3, pc, #252	; (adr r3, 800c9e0 <__ieee754_pow+0x3e0>)
 800c8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e8:	f7f3 fe50 	bl	800058c <__aeabi_dmul>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	460b      	mov	r3, r1
 800c8f0:	4650      	mov	r0, sl
 800c8f2:	4659      	mov	r1, fp
 800c8f4:	f7f3 fc92 	bl	800021c <__aeabi_dsub>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	4680      	mov	r8, r0
 800c8fe:	4689      	mov	r9, r1
 800c900:	4630      	mov	r0, r6
 800c902:	4639      	mov	r1, r7
 800c904:	f7f3 fc8c 	bl	8000220 <__adddf3>
 800c908:	2000      	movs	r0, #0
 800c90a:	4632      	mov	r2, r6
 800c90c:	463b      	mov	r3, r7
 800c90e:	4604      	mov	r4, r0
 800c910:	460d      	mov	r5, r1
 800c912:	f7f3 fc83 	bl	800021c <__aeabi_dsub>
 800c916:	4602      	mov	r2, r0
 800c918:	460b      	mov	r3, r1
 800c91a:	4640      	mov	r0, r8
 800c91c:	4649      	mov	r1, r9
 800c91e:	f7f3 fc7d 	bl	800021c <__aeabi_dsub>
 800c922:	9b04      	ldr	r3, [sp, #16]
 800c924:	9a06      	ldr	r2, [sp, #24]
 800c926:	3b01      	subs	r3, #1
 800c928:	4313      	orrs	r3, r2
 800c92a:	4682      	mov	sl, r0
 800c92c:	468b      	mov	fp, r1
 800c92e:	f040 81e7 	bne.w	800cd00 <__ieee754_pow+0x700>
 800c932:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c9e8 <__ieee754_pow+0x3e8>
 800c936:	eeb0 8a47 	vmov.f32	s16, s14
 800c93a:	eef0 8a67 	vmov.f32	s17, s15
 800c93e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c942:	2600      	movs	r6, #0
 800c944:	4632      	mov	r2, r6
 800c946:	463b      	mov	r3, r7
 800c948:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c94c:	f7f3 fc66 	bl	800021c <__aeabi_dsub>
 800c950:	4622      	mov	r2, r4
 800c952:	462b      	mov	r3, r5
 800c954:	f7f3 fe1a 	bl	800058c <__aeabi_dmul>
 800c958:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c95c:	4680      	mov	r8, r0
 800c95e:	4689      	mov	r9, r1
 800c960:	4650      	mov	r0, sl
 800c962:	4659      	mov	r1, fp
 800c964:	f7f3 fe12 	bl	800058c <__aeabi_dmul>
 800c968:	4602      	mov	r2, r0
 800c96a:	460b      	mov	r3, r1
 800c96c:	4640      	mov	r0, r8
 800c96e:	4649      	mov	r1, r9
 800c970:	f7f3 fc56 	bl	8000220 <__adddf3>
 800c974:	4632      	mov	r2, r6
 800c976:	463b      	mov	r3, r7
 800c978:	4680      	mov	r8, r0
 800c97a:	4689      	mov	r9, r1
 800c97c:	4620      	mov	r0, r4
 800c97e:	4629      	mov	r1, r5
 800c980:	f7f3 fe04 	bl	800058c <__aeabi_dmul>
 800c984:	460b      	mov	r3, r1
 800c986:	4604      	mov	r4, r0
 800c988:	460d      	mov	r5, r1
 800c98a:	4602      	mov	r2, r0
 800c98c:	4649      	mov	r1, r9
 800c98e:	4640      	mov	r0, r8
 800c990:	f7f3 fc46 	bl	8000220 <__adddf3>
 800c994:	4b19      	ldr	r3, [pc, #100]	; (800c9fc <__ieee754_pow+0x3fc>)
 800c996:	4299      	cmp	r1, r3
 800c998:	ec45 4b19 	vmov	d9, r4, r5
 800c99c:	4606      	mov	r6, r0
 800c99e:	460f      	mov	r7, r1
 800c9a0:	468b      	mov	fp, r1
 800c9a2:	f340 82f0 	ble.w	800cf86 <__ieee754_pow+0x986>
 800c9a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c9aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c9ae:	4303      	orrs	r3, r0
 800c9b0:	f000 81e4 	beq.w	800cd7c <__ieee754_pow+0x77c>
 800c9b4:	ec51 0b18 	vmov	r0, r1, d8
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	f7f4 f858 	bl	8000a70 <__aeabi_dcmplt>
 800c9c0:	3800      	subs	r0, #0
 800c9c2:	bf18      	it	ne
 800c9c4:	2001      	movne	r0, #1
 800c9c6:	e72b      	b.n	800c820 <__ieee754_pow+0x220>
 800c9c8:	60000000 	.word	0x60000000
 800c9cc:	3ff71547 	.word	0x3ff71547
 800c9d0:	f85ddf44 	.word	0xf85ddf44
 800c9d4:	3e54ae0b 	.word	0x3e54ae0b
 800c9d8:	55555555 	.word	0x55555555
 800c9dc:	3fd55555 	.word	0x3fd55555
 800c9e0:	652b82fe 	.word	0x652b82fe
 800c9e4:	3ff71547 	.word	0x3ff71547
 800c9e8:	00000000 	.word	0x00000000
 800c9ec:	bff00000 	.word	0xbff00000
 800c9f0:	3ff00000 	.word	0x3ff00000
 800c9f4:	3fd00000 	.word	0x3fd00000
 800c9f8:	3fe00000 	.word	0x3fe00000
 800c9fc:	408fffff 	.word	0x408fffff
 800ca00:	4bd5      	ldr	r3, [pc, #852]	; (800cd58 <__ieee754_pow+0x758>)
 800ca02:	402b      	ands	r3, r5
 800ca04:	2200      	movs	r2, #0
 800ca06:	b92b      	cbnz	r3, 800ca14 <__ieee754_pow+0x414>
 800ca08:	4bd4      	ldr	r3, [pc, #848]	; (800cd5c <__ieee754_pow+0x75c>)
 800ca0a:	f7f3 fdbf 	bl	800058c <__aeabi_dmul>
 800ca0e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ca12:	460c      	mov	r4, r1
 800ca14:	1523      	asrs	r3, r4, #20
 800ca16:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ca1a:	4413      	add	r3, r2
 800ca1c:	9305      	str	r3, [sp, #20]
 800ca1e:	4bd0      	ldr	r3, [pc, #832]	; (800cd60 <__ieee754_pow+0x760>)
 800ca20:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ca24:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ca28:	429c      	cmp	r4, r3
 800ca2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ca2e:	dd08      	ble.n	800ca42 <__ieee754_pow+0x442>
 800ca30:	4bcc      	ldr	r3, [pc, #816]	; (800cd64 <__ieee754_pow+0x764>)
 800ca32:	429c      	cmp	r4, r3
 800ca34:	f340 8162 	ble.w	800ccfc <__ieee754_pow+0x6fc>
 800ca38:	9b05      	ldr	r3, [sp, #20]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	9305      	str	r3, [sp, #20]
 800ca3e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ca42:	2400      	movs	r4, #0
 800ca44:	00e3      	lsls	r3, r4, #3
 800ca46:	9307      	str	r3, [sp, #28]
 800ca48:	4bc7      	ldr	r3, [pc, #796]	; (800cd68 <__ieee754_pow+0x768>)
 800ca4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca4e:	ed93 7b00 	vldr	d7, [r3]
 800ca52:	4629      	mov	r1, r5
 800ca54:	ec53 2b17 	vmov	r2, r3, d7
 800ca58:	eeb0 9a47 	vmov.f32	s18, s14
 800ca5c:	eef0 9a67 	vmov.f32	s19, s15
 800ca60:	4682      	mov	sl, r0
 800ca62:	f7f3 fbdb 	bl	800021c <__aeabi_dsub>
 800ca66:	4652      	mov	r2, sl
 800ca68:	4606      	mov	r6, r0
 800ca6a:	460f      	mov	r7, r1
 800ca6c:	462b      	mov	r3, r5
 800ca6e:	ec51 0b19 	vmov	r0, r1, d9
 800ca72:	f7f3 fbd5 	bl	8000220 <__adddf3>
 800ca76:	4602      	mov	r2, r0
 800ca78:	460b      	mov	r3, r1
 800ca7a:	2000      	movs	r0, #0
 800ca7c:	49bb      	ldr	r1, [pc, #748]	; (800cd6c <__ieee754_pow+0x76c>)
 800ca7e:	f7f3 feaf 	bl	80007e0 <__aeabi_ddiv>
 800ca82:	ec41 0b1a 	vmov	d10, r0, r1
 800ca86:	4602      	mov	r2, r0
 800ca88:	460b      	mov	r3, r1
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	4639      	mov	r1, r7
 800ca8e:	f7f3 fd7d 	bl	800058c <__aeabi_dmul>
 800ca92:	2300      	movs	r3, #0
 800ca94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca98:	9302      	str	r3, [sp, #8]
 800ca9a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ca9e:	46ab      	mov	fp, r5
 800caa0:	106d      	asrs	r5, r5, #1
 800caa2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800caa6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800caaa:	ec41 0b18 	vmov	d8, r0, r1
 800caae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800cab2:	2200      	movs	r2, #0
 800cab4:	4640      	mov	r0, r8
 800cab6:	4649      	mov	r1, r9
 800cab8:	4614      	mov	r4, r2
 800caba:	461d      	mov	r5, r3
 800cabc:	f7f3 fd66 	bl	800058c <__aeabi_dmul>
 800cac0:	4602      	mov	r2, r0
 800cac2:	460b      	mov	r3, r1
 800cac4:	4630      	mov	r0, r6
 800cac6:	4639      	mov	r1, r7
 800cac8:	f7f3 fba8 	bl	800021c <__aeabi_dsub>
 800cacc:	ec53 2b19 	vmov	r2, r3, d9
 800cad0:	4606      	mov	r6, r0
 800cad2:	460f      	mov	r7, r1
 800cad4:	4620      	mov	r0, r4
 800cad6:	4629      	mov	r1, r5
 800cad8:	f7f3 fba0 	bl	800021c <__aeabi_dsub>
 800cadc:	4602      	mov	r2, r0
 800cade:	460b      	mov	r3, r1
 800cae0:	4650      	mov	r0, sl
 800cae2:	4659      	mov	r1, fp
 800cae4:	f7f3 fb9a 	bl	800021c <__aeabi_dsub>
 800cae8:	4642      	mov	r2, r8
 800caea:	464b      	mov	r3, r9
 800caec:	f7f3 fd4e 	bl	800058c <__aeabi_dmul>
 800caf0:	4602      	mov	r2, r0
 800caf2:	460b      	mov	r3, r1
 800caf4:	4630      	mov	r0, r6
 800caf6:	4639      	mov	r1, r7
 800caf8:	f7f3 fb90 	bl	800021c <__aeabi_dsub>
 800cafc:	ec53 2b1a 	vmov	r2, r3, d10
 800cb00:	f7f3 fd44 	bl	800058c <__aeabi_dmul>
 800cb04:	ec53 2b18 	vmov	r2, r3, d8
 800cb08:	ec41 0b19 	vmov	d9, r0, r1
 800cb0c:	ec51 0b18 	vmov	r0, r1, d8
 800cb10:	f7f3 fd3c 	bl	800058c <__aeabi_dmul>
 800cb14:	a37c      	add	r3, pc, #496	; (adr r3, 800cd08 <__ieee754_pow+0x708>)
 800cb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1a:	4604      	mov	r4, r0
 800cb1c:	460d      	mov	r5, r1
 800cb1e:	f7f3 fd35 	bl	800058c <__aeabi_dmul>
 800cb22:	a37b      	add	r3, pc, #492	; (adr r3, 800cd10 <__ieee754_pow+0x710>)
 800cb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb28:	f7f3 fb7a 	bl	8000220 <__adddf3>
 800cb2c:	4622      	mov	r2, r4
 800cb2e:	462b      	mov	r3, r5
 800cb30:	f7f3 fd2c 	bl	800058c <__aeabi_dmul>
 800cb34:	a378      	add	r3, pc, #480	; (adr r3, 800cd18 <__ieee754_pow+0x718>)
 800cb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3a:	f7f3 fb71 	bl	8000220 <__adddf3>
 800cb3e:	4622      	mov	r2, r4
 800cb40:	462b      	mov	r3, r5
 800cb42:	f7f3 fd23 	bl	800058c <__aeabi_dmul>
 800cb46:	a376      	add	r3, pc, #472	; (adr r3, 800cd20 <__ieee754_pow+0x720>)
 800cb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4c:	f7f3 fb68 	bl	8000220 <__adddf3>
 800cb50:	4622      	mov	r2, r4
 800cb52:	462b      	mov	r3, r5
 800cb54:	f7f3 fd1a 	bl	800058c <__aeabi_dmul>
 800cb58:	a373      	add	r3, pc, #460	; (adr r3, 800cd28 <__ieee754_pow+0x728>)
 800cb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5e:	f7f3 fb5f 	bl	8000220 <__adddf3>
 800cb62:	4622      	mov	r2, r4
 800cb64:	462b      	mov	r3, r5
 800cb66:	f7f3 fd11 	bl	800058c <__aeabi_dmul>
 800cb6a:	a371      	add	r3, pc, #452	; (adr r3, 800cd30 <__ieee754_pow+0x730>)
 800cb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb70:	f7f3 fb56 	bl	8000220 <__adddf3>
 800cb74:	4622      	mov	r2, r4
 800cb76:	4606      	mov	r6, r0
 800cb78:	460f      	mov	r7, r1
 800cb7a:	462b      	mov	r3, r5
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	4629      	mov	r1, r5
 800cb80:	f7f3 fd04 	bl	800058c <__aeabi_dmul>
 800cb84:	4602      	mov	r2, r0
 800cb86:	460b      	mov	r3, r1
 800cb88:	4630      	mov	r0, r6
 800cb8a:	4639      	mov	r1, r7
 800cb8c:	f7f3 fcfe 	bl	800058c <__aeabi_dmul>
 800cb90:	4642      	mov	r2, r8
 800cb92:	4604      	mov	r4, r0
 800cb94:	460d      	mov	r5, r1
 800cb96:	464b      	mov	r3, r9
 800cb98:	ec51 0b18 	vmov	r0, r1, d8
 800cb9c:	f7f3 fb40 	bl	8000220 <__adddf3>
 800cba0:	ec53 2b19 	vmov	r2, r3, d9
 800cba4:	f7f3 fcf2 	bl	800058c <__aeabi_dmul>
 800cba8:	4622      	mov	r2, r4
 800cbaa:	462b      	mov	r3, r5
 800cbac:	f7f3 fb38 	bl	8000220 <__adddf3>
 800cbb0:	4642      	mov	r2, r8
 800cbb2:	4682      	mov	sl, r0
 800cbb4:	468b      	mov	fp, r1
 800cbb6:	464b      	mov	r3, r9
 800cbb8:	4640      	mov	r0, r8
 800cbba:	4649      	mov	r1, r9
 800cbbc:	f7f3 fce6 	bl	800058c <__aeabi_dmul>
 800cbc0:	4b6b      	ldr	r3, [pc, #428]	; (800cd70 <__ieee754_pow+0x770>)
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	4606      	mov	r6, r0
 800cbc6:	460f      	mov	r7, r1
 800cbc8:	f7f3 fb2a 	bl	8000220 <__adddf3>
 800cbcc:	4652      	mov	r2, sl
 800cbce:	465b      	mov	r3, fp
 800cbd0:	f7f3 fb26 	bl	8000220 <__adddf3>
 800cbd4:	2000      	movs	r0, #0
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	460d      	mov	r5, r1
 800cbda:	4602      	mov	r2, r0
 800cbdc:	460b      	mov	r3, r1
 800cbde:	4640      	mov	r0, r8
 800cbe0:	4649      	mov	r1, r9
 800cbe2:	f7f3 fcd3 	bl	800058c <__aeabi_dmul>
 800cbe6:	4b62      	ldr	r3, [pc, #392]	; (800cd70 <__ieee754_pow+0x770>)
 800cbe8:	4680      	mov	r8, r0
 800cbea:	4689      	mov	r9, r1
 800cbec:	2200      	movs	r2, #0
 800cbee:	4620      	mov	r0, r4
 800cbf0:	4629      	mov	r1, r5
 800cbf2:	f7f3 fb13 	bl	800021c <__aeabi_dsub>
 800cbf6:	4632      	mov	r2, r6
 800cbf8:	463b      	mov	r3, r7
 800cbfa:	f7f3 fb0f 	bl	800021c <__aeabi_dsub>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	460b      	mov	r3, r1
 800cc02:	4650      	mov	r0, sl
 800cc04:	4659      	mov	r1, fp
 800cc06:	f7f3 fb09 	bl	800021c <__aeabi_dsub>
 800cc0a:	ec53 2b18 	vmov	r2, r3, d8
 800cc0e:	f7f3 fcbd 	bl	800058c <__aeabi_dmul>
 800cc12:	4622      	mov	r2, r4
 800cc14:	4606      	mov	r6, r0
 800cc16:	460f      	mov	r7, r1
 800cc18:	462b      	mov	r3, r5
 800cc1a:	ec51 0b19 	vmov	r0, r1, d9
 800cc1e:	f7f3 fcb5 	bl	800058c <__aeabi_dmul>
 800cc22:	4602      	mov	r2, r0
 800cc24:	460b      	mov	r3, r1
 800cc26:	4630      	mov	r0, r6
 800cc28:	4639      	mov	r1, r7
 800cc2a:	f7f3 faf9 	bl	8000220 <__adddf3>
 800cc2e:	4606      	mov	r6, r0
 800cc30:	460f      	mov	r7, r1
 800cc32:	4602      	mov	r2, r0
 800cc34:	460b      	mov	r3, r1
 800cc36:	4640      	mov	r0, r8
 800cc38:	4649      	mov	r1, r9
 800cc3a:	f7f3 faf1 	bl	8000220 <__adddf3>
 800cc3e:	a33e      	add	r3, pc, #248	; (adr r3, 800cd38 <__ieee754_pow+0x738>)
 800cc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc44:	2000      	movs	r0, #0
 800cc46:	4604      	mov	r4, r0
 800cc48:	460d      	mov	r5, r1
 800cc4a:	f7f3 fc9f 	bl	800058c <__aeabi_dmul>
 800cc4e:	4642      	mov	r2, r8
 800cc50:	ec41 0b18 	vmov	d8, r0, r1
 800cc54:	464b      	mov	r3, r9
 800cc56:	4620      	mov	r0, r4
 800cc58:	4629      	mov	r1, r5
 800cc5a:	f7f3 fadf 	bl	800021c <__aeabi_dsub>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	460b      	mov	r3, r1
 800cc62:	4630      	mov	r0, r6
 800cc64:	4639      	mov	r1, r7
 800cc66:	f7f3 fad9 	bl	800021c <__aeabi_dsub>
 800cc6a:	a335      	add	r3, pc, #212	; (adr r3, 800cd40 <__ieee754_pow+0x740>)
 800cc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc70:	f7f3 fc8c 	bl	800058c <__aeabi_dmul>
 800cc74:	a334      	add	r3, pc, #208	; (adr r3, 800cd48 <__ieee754_pow+0x748>)
 800cc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7a:	4606      	mov	r6, r0
 800cc7c:	460f      	mov	r7, r1
 800cc7e:	4620      	mov	r0, r4
 800cc80:	4629      	mov	r1, r5
 800cc82:	f7f3 fc83 	bl	800058c <__aeabi_dmul>
 800cc86:	4602      	mov	r2, r0
 800cc88:	460b      	mov	r3, r1
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	4639      	mov	r1, r7
 800cc8e:	f7f3 fac7 	bl	8000220 <__adddf3>
 800cc92:	9a07      	ldr	r2, [sp, #28]
 800cc94:	4b37      	ldr	r3, [pc, #220]	; (800cd74 <__ieee754_pow+0x774>)
 800cc96:	4413      	add	r3, r2
 800cc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9c:	f7f3 fac0 	bl	8000220 <__adddf3>
 800cca0:	4682      	mov	sl, r0
 800cca2:	9805      	ldr	r0, [sp, #20]
 800cca4:	468b      	mov	fp, r1
 800cca6:	f7f3 fc07 	bl	80004b8 <__aeabi_i2d>
 800ccaa:	9a07      	ldr	r2, [sp, #28]
 800ccac:	4b32      	ldr	r3, [pc, #200]	; (800cd78 <__ieee754_pow+0x778>)
 800ccae:	4413      	add	r3, r2
 800ccb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ccb4:	4606      	mov	r6, r0
 800ccb6:	460f      	mov	r7, r1
 800ccb8:	4652      	mov	r2, sl
 800ccba:	465b      	mov	r3, fp
 800ccbc:	ec51 0b18 	vmov	r0, r1, d8
 800ccc0:	f7f3 faae 	bl	8000220 <__adddf3>
 800ccc4:	4642      	mov	r2, r8
 800ccc6:	464b      	mov	r3, r9
 800ccc8:	f7f3 faaa 	bl	8000220 <__adddf3>
 800cccc:	4632      	mov	r2, r6
 800ccce:	463b      	mov	r3, r7
 800ccd0:	f7f3 faa6 	bl	8000220 <__adddf3>
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	4632      	mov	r2, r6
 800ccd8:	463b      	mov	r3, r7
 800ccda:	4604      	mov	r4, r0
 800ccdc:	460d      	mov	r5, r1
 800ccde:	f7f3 fa9d 	bl	800021c <__aeabi_dsub>
 800cce2:	4642      	mov	r2, r8
 800cce4:	464b      	mov	r3, r9
 800cce6:	f7f3 fa99 	bl	800021c <__aeabi_dsub>
 800ccea:	ec53 2b18 	vmov	r2, r3, d8
 800ccee:	f7f3 fa95 	bl	800021c <__aeabi_dsub>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	4650      	mov	r0, sl
 800ccf8:	4659      	mov	r1, fp
 800ccfa:	e610      	b.n	800c91e <__ieee754_pow+0x31e>
 800ccfc:	2401      	movs	r4, #1
 800ccfe:	e6a1      	b.n	800ca44 <__ieee754_pow+0x444>
 800cd00:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800cd50 <__ieee754_pow+0x750>
 800cd04:	e617      	b.n	800c936 <__ieee754_pow+0x336>
 800cd06:	bf00      	nop
 800cd08:	4a454eef 	.word	0x4a454eef
 800cd0c:	3fca7e28 	.word	0x3fca7e28
 800cd10:	93c9db65 	.word	0x93c9db65
 800cd14:	3fcd864a 	.word	0x3fcd864a
 800cd18:	a91d4101 	.word	0xa91d4101
 800cd1c:	3fd17460 	.word	0x3fd17460
 800cd20:	518f264d 	.word	0x518f264d
 800cd24:	3fd55555 	.word	0x3fd55555
 800cd28:	db6fabff 	.word	0xdb6fabff
 800cd2c:	3fdb6db6 	.word	0x3fdb6db6
 800cd30:	33333303 	.word	0x33333303
 800cd34:	3fe33333 	.word	0x3fe33333
 800cd38:	e0000000 	.word	0xe0000000
 800cd3c:	3feec709 	.word	0x3feec709
 800cd40:	dc3a03fd 	.word	0xdc3a03fd
 800cd44:	3feec709 	.word	0x3feec709
 800cd48:	145b01f5 	.word	0x145b01f5
 800cd4c:	be3e2fe0 	.word	0xbe3e2fe0
 800cd50:	00000000 	.word	0x00000000
 800cd54:	3ff00000 	.word	0x3ff00000
 800cd58:	7ff00000 	.word	0x7ff00000
 800cd5c:	43400000 	.word	0x43400000
 800cd60:	0003988e 	.word	0x0003988e
 800cd64:	000bb679 	.word	0x000bb679
 800cd68:	08023af8 	.word	0x08023af8
 800cd6c:	3ff00000 	.word	0x3ff00000
 800cd70:	40080000 	.word	0x40080000
 800cd74:	08023b18 	.word	0x08023b18
 800cd78:	08023b08 	.word	0x08023b08
 800cd7c:	a3b3      	add	r3, pc, #716	; (adr r3, 800d04c <__ieee754_pow+0xa4c>)
 800cd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd82:	4640      	mov	r0, r8
 800cd84:	4649      	mov	r1, r9
 800cd86:	f7f3 fa4b 	bl	8000220 <__adddf3>
 800cd8a:	4622      	mov	r2, r4
 800cd8c:	ec41 0b1a 	vmov	d10, r0, r1
 800cd90:	462b      	mov	r3, r5
 800cd92:	4630      	mov	r0, r6
 800cd94:	4639      	mov	r1, r7
 800cd96:	f7f3 fa41 	bl	800021c <__aeabi_dsub>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	ec51 0b1a 	vmov	r0, r1, d10
 800cda2:	f7f3 fe83 	bl	8000aac <__aeabi_dcmpgt>
 800cda6:	2800      	cmp	r0, #0
 800cda8:	f47f ae04 	bne.w	800c9b4 <__ieee754_pow+0x3b4>
 800cdac:	4aa2      	ldr	r2, [pc, #648]	; (800d038 <__ieee754_pow+0xa38>)
 800cdae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	f340 8107 	ble.w	800cfc6 <__ieee754_pow+0x9c6>
 800cdb8:	151b      	asrs	r3, r3, #20
 800cdba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cdbe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cdc2:	fa4a fa03 	asr.w	sl, sl, r3
 800cdc6:	44da      	add	sl, fp
 800cdc8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800cdcc:	489b      	ldr	r0, [pc, #620]	; (800d03c <__ieee754_pow+0xa3c>)
 800cdce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cdd2:	4108      	asrs	r0, r1
 800cdd4:	ea00 030a 	and.w	r3, r0, sl
 800cdd8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800cddc:	f1c1 0114 	rsb	r1, r1, #20
 800cde0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cde4:	fa4a fa01 	asr.w	sl, sl, r1
 800cde8:	f1bb 0f00 	cmp.w	fp, #0
 800cdec:	f04f 0200 	mov.w	r2, #0
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	4629      	mov	r1, r5
 800cdf4:	bfb8      	it	lt
 800cdf6:	f1ca 0a00 	rsblt	sl, sl, #0
 800cdfa:	f7f3 fa0f 	bl	800021c <__aeabi_dsub>
 800cdfe:	ec41 0b19 	vmov	d9, r0, r1
 800ce02:	4642      	mov	r2, r8
 800ce04:	464b      	mov	r3, r9
 800ce06:	ec51 0b19 	vmov	r0, r1, d9
 800ce0a:	f7f3 fa09 	bl	8000220 <__adddf3>
 800ce0e:	a37a      	add	r3, pc, #488	; (adr r3, 800cff8 <__ieee754_pow+0x9f8>)
 800ce10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce14:	2000      	movs	r0, #0
 800ce16:	4604      	mov	r4, r0
 800ce18:	460d      	mov	r5, r1
 800ce1a:	f7f3 fbb7 	bl	800058c <__aeabi_dmul>
 800ce1e:	ec53 2b19 	vmov	r2, r3, d9
 800ce22:	4606      	mov	r6, r0
 800ce24:	460f      	mov	r7, r1
 800ce26:	4620      	mov	r0, r4
 800ce28:	4629      	mov	r1, r5
 800ce2a:	f7f3 f9f7 	bl	800021c <__aeabi_dsub>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	460b      	mov	r3, r1
 800ce32:	4640      	mov	r0, r8
 800ce34:	4649      	mov	r1, r9
 800ce36:	f7f3 f9f1 	bl	800021c <__aeabi_dsub>
 800ce3a:	a371      	add	r3, pc, #452	; (adr r3, 800d000 <__ieee754_pow+0xa00>)
 800ce3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce40:	f7f3 fba4 	bl	800058c <__aeabi_dmul>
 800ce44:	a370      	add	r3, pc, #448	; (adr r3, 800d008 <__ieee754_pow+0xa08>)
 800ce46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4a:	4680      	mov	r8, r0
 800ce4c:	4689      	mov	r9, r1
 800ce4e:	4620      	mov	r0, r4
 800ce50:	4629      	mov	r1, r5
 800ce52:	f7f3 fb9b 	bl	800058c <__aeabi_dmul>
 800ce56:	4602      	mov	r2, r0
 800ce58:	460b      	mov	r3, r1
 800ce5a:	4640      	mov	r0, r8
 800ce5c:	4649      	mov	r1, r9
 800ce5e:	f7f3 f9df 	bl	8000220 <__adddf3>
 800ce62:	4604      	mov	r4, r0
 800ce64:	460d      	mov	r5, r1
 800ce66:	4602      	mov	r2, r0
 800ce68:	460b      	mov	r3, r1
 800ce6a:	4630      	mov	r0, r6
 800ce6c:	4639      	mov	r1, r7
 800ce6e:	f7f3 f9d7 	bl	8000220 <__adddf3>
 800ce72:	4632      	mov	r2, r6
 800ce74:	463b      	mov	r3, r7
 800ce76:	4680      	mov	r8, r0
 800ce78:	4689      	mov	r9, r1
 800ce7a:	f7f3 f9cf 	bl	800021c <__aeabi_dsub>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	460b      	mov	r3, r1
 800ce82:	4620      	mov	r0, r4
 800ce84:	4629      	mov	r1, r5
 800ce86:	f7f3 f9c9 	bl	800021c <__aeabi_dsub>
 800ce8a:	4642      	mov	r2, r8
 800ce8c:	4606      	mov	r6, r0
 800ce8e:	460f      	mov	r7, r1
 800ce90:	464b      	mov	r3, r9
 800ce92:	4640      	mov	r0, r8
 800ce94:	4649      	mov	r1, r9
 800ce96:	f7f3 fb79 	bl	800058c <__aeabi_dmul>
 800ce9a:	a35d      	add	r3, pc, #372	; (adr r3, 800d010 <__ieee754_pow+0xa10>)
 800ce9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea0:	4604      	mov	r4, r0
 800cea2:	460d      	mov	r5, r1
 800cea4:	f7f3 fb72 	bl	800058c <__aeabi_dmul>
 800cea8:	a35b      	add	r3, pc, #364	; (adr r3, 800d018 <__ieee754_pow+0xa18>)
 800ceaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceae:	f7f3 f9b5 	bl	800021c <__aeabi_dsub>
 800ceb2:	4622      	mov	r2, r4
 800ceb4:	462b      	mov	r3, r5
 800ceb6:	f7f3 fb69 	bl	800058c <__aeabi_dmul>
 800ceba:	a359      	add	r3, pc, #356	; (adr r3, 800d020 <__ieee754_pow+0xa20>)
 800cebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec0:	f7f3 f9ae 	bl	8000220 <__adddf3>
 800cec4:	4622      	mov	r2, r4
 800cec6:	462b      	mov	r3, r5
 800cec8:	f7f3 fb60 	bl	800058c <__aeabi_dmul>
 800cecc:	a356      	add	r3, pc, #344	; (adr r3, 800d028 <__ieee754_pow+0xa28>)
 800cece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced2:	f7f3 f9a3 	bl	800021c <__aeabi_dsub>
 800ced6:	4622      	mov	r2, r4
 800ced8:	462b      	mov	r3, r5
 800ceda:	f7f3 fb57 	bl	800058c <__aeabi_dmul>
 800cede:	a354      	add	r3, pc, #336	; (adr r3, 800d030 <__ieee754_pow+0xa30>)
 800cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee4:	f7f3 f99c 	bl	8000220 <__adddf3>
 800cee8:	4622      	mov	r2, r4
 800ceea:	462b      	mov	r3, r5
 800ceec:	f7f3 fb4e 	bl	800058c <__aeabi_dmul>
 800cef0:	4602      	mov	r2, r0
 800cef2:	460b      	mov	r3, r1
 800cef4:	4640      	mov	r0, r8
 800cef6:	4649      	mov	r1, r9
 800cef8:	f7f3 f990 	bl	800021c <__aeabi_dsub>
 800cefc:	4604      	mov	r4, r0
 800cefe:	460d      	mov	r5, r1
 800cf00:	4602      	mov	r2, r0
 800cf02:	460b      	mov	r3, r1
 800cf04:	4640      	mov	r0, r8
 800cf06:	4649      	mov	r1, r9
 800cf08:	f7f3 fb40 	bl	800058c <__aeabi_dmul>
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	ec41 0b19 	vmov	d9, r0, r1
 800cf12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf16:	4620      	mov	r0, r4
 800cf18:	4629      	mov	r1, r5
 800cf1a:	f7f3 f97f 	bl	800021c <__aeabi_dsub>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	460b      	mov	r3, r1
 800cf22:	ec51 0b19 	vmov	r0, r1, d9
 800cf26:	f7f3 fc5b 	bl	80007e0 <__aeabi_ddiv>
 800cf2a:	4632      	mov	r2, r6
 800cf2c:	4604      	mov	r4, r0
 800cf2e:	460d      	mov	r5, r1
 800cf30:	463b      	mov	r3, r7
 800cf32:	4640      	mov	r0, r8
 800cf34:	4649      	mov	r1, r9
 800cf36:	f7f3 fb29 	bl	800058c <__aeabi_dmul>
 800cf3a:	4632      	mov	r2, r6
 800cf3c:	463b      	mov	r3, r7
 800cf3e:	f7f3 f96f 	bl	8000220 <__adddf3>
 800cf42:	4602      	mov	r2, r0
 800cf44:	460b      	mov	r3, r1
 800cf46:	4620      	mov	r0, r4
 800cf48:	4629      	mov	r1, r5
 800cf4a:	f7f3 f967 	bl	800021c <__aeabi_dsub>
 800cf4e:	4642      	mov	r2, r8
 800cf50:	464b      	mov	r3, r9
 800cf52:	f7f3 f963 	bl	800021c <__aeabi_dsub>
 800cf56:	460b      	mov	r3, r1
 800cf58:	4602      	mov	r2, r0
 800cf5a:	4939      	ldr	r1, [pc, #228]	; (800d040 <__ieee754_pow+0xa40>)
 800cf5c:	2000      	movs	r0, #0
 800cf5e:	f7f3 f95d 	bl	800021c <__aeabi_dsub>
 800cf62:	ec41 0b10 	vmov	d0, r0, r1
 800cf66:	ee10 3a90 	vmov	r3, s1
 800cf6a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cf6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf72:	da2b      	bge.n	800cfcc <__ieee754_pow+0x9cc>
 800cf74:	4650      	mov	r0, sl
 800cf76:	f000 fc5b 	bl	800d830 <scalbn>
 800cf7a:	ec51 0b10 	vmov	r0, r1, d0
 800cf7e:	ec53 2b18 	vmov	r2, r3, d8
 800cf82:	f7ff bbee 	b.w	800c762 <__ieee754_pow+0x162>
 800cf86:	4b2f      	ldr	r3, [pc, #188]	; (800d044 <__ieee754_pow+0xa44>)
 800cf88:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cf8c:	429e      	cmp	r6, r3
 800cf8e:	f77f af0d 	ble.w	800cdac <__ieee754_pow+0x7ac>
 800cf92:	4b2d      	ldr	r3, [pc, #180]	; (800d048 <__ieee754_pow+0xa48>)
 800cf94:	440b      	add	r3, r1
 800cf96:	4303      	orrs	r3, r0
 800cf98:	d009      	beq.n	800cfae <__ieee754_pow+0x9ae>
 800cf9a:	ec51 0b18 	vmov	r0, r1, d8
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	f7f3 fd65 	bl	8000a70 <__aeabi_dcmplt>
 800cfa6:	3800      	subs	r0, #0
 800cfa8:	bf18      	it	ne
 800cfaa:	2001      	movne	r0, #1
 800cfac:	e448      	b.n	800c840 <__ieee754_pow+0x240>
 800cfae:	4622      	mov	r2, r4
 800cfb0:	462b      	mov	r3, r5
 800cfb2:	f7f3 f933 	bl	800021c <__aeabi_dsub>
 800cfb6:	4642      	mov	r2, r8
 800cfb8:	464b      	mov	r3, r9
 800cfba:	f7f3 fd6d 	bl	8000a98 <__aeabi_dcmpge>
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	f43f aef4 	beq.w	800cdac <__ieee754_pow+0x7ac>
 800cfc4:	e7e9      	b.n	800cf9a <__ieee754_pow+0x99a>
 800cfc6:	f04f 0a00 	mov.w	sl, #0
 800cfca:	e71a      	b.n	800ce02 <__ieee754_pow+0x802>
 800cfcc:	ec51 0b10 	vmov	r0, r1, d0
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	e7d4      	b.n	800cf7e <__ieee754_pow+0x97e>
 800cfd4:	491a      	ldr	r1, [pc, #104]	; (800d040 <__ieee754_pow+0xa40>)
 800cfd6:	2000      	movs	r0, #0
 800cfd8:	f7ff bb31 	b.w	800c63e <__ieee754_pow+0x3e>
 800cfdc:	2000      	movs	r0, #0
 800cfde:	2100      	movs	r1, #0
 800cfe0:	f7ff bb2d 	b.w	800c63e <__ieee754_pow+0x3e>
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	4639      	mov	r1, r7
 800cfe8:	f7ff bb29 	b.w	800c63e <__ieee754_pow+0x3e>
 800cfec:	9204      	str	r2, [sp, #16]
 800cfee:	f7ff bb7b 	b.w	800c6e8 <__ieee754_pow+0xe8>
 800cff2:	2300      	movs	r3, #0
 800cff4:	f7ff bb65 	b.w	800c6c2 <__ieee754_pow+0xc2>
 800cff8:	00000000 	.word	0x00000000
 800cffc:	3fe62e43 	.word	0x3fe62e43
 800d000:	fefa39ef 	.word	0xfefa39ef
 800d004:	3fe62e42 	.word	0x3fe62e42
 800d008:	0ca86c39 	.word	0x0ca86c39
 800d00c:	be205c61 	.word	0xbe205c61
 800d010:	72bea4d0 	.word	0x72bea4d0
 800d014:	3e663769 	.word	0x3e663769
 800d018:	c5d26bf1 	.word	0xc5d26bf1
 800d01c:	3ebbbd41 	.word	0x3ebbbd41
 800d020:	af25de2c 	.word	0xaf25de2c
 800d024:	3f11566a 	.word	0x3f11566a
 800d028:	16bebd93 	.word	0x16bebd93
 800d02c:	3f66c16c 	.word	0x3f66c16c
 800d030:	5555553e 	.word	0x5555553e
 800d034:	3fc55555 	.word	0x3fc55555
 800d038:	3fe00000 	.word	0x3fe00000
 800d03c:	fff00000 	.word	0xfff00000
 800d040:	3ff00000 	.word	0x3ff00000
 800d044:	4090cbff 	.word	0x4090cbff
 800d048:	3f6f3400 	.word	0x3f6f3400
 800d04c:	652b82fe 	.word	0x652b82fe
 800d050:	3c971547 	.word	0x3c971547
 800d054:	00000000 	.word	0x00000000

0800d058 <__ieee754_rem_pio2>:
 800d058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d05c:	ed2d 8b02 	vpush	{d8}
 800d060:	ec55 4b10 	vmov	r4, r5, d0
 800d064:	4bca      	ldr	r3, [pc, #808]	; (800d390 <__ieee754_rem_pio2+0x338>)
 800d066:	b08b      	sub	sp, #44	; 0x2c
 800d068:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d06c:	4598      	cmp	r8, r3
 800d06e:	4682      	mov	sl, r0
 800d070:	9502      	str	r5, [sp, #8]
 800d072:	dc08      	bgt.n	800d086 <__ieee754_rem_pio2+0x2e>
 800d074:	2200      	movs	r2, #0
 800d076:	2300      	movs	r3, #0
 800d078:	ed80 0b00 	vstr	d0, [r0]
 800d07c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d080:	f04f 0b00 	mov.w	fp, #0
 800d084:	e028      	b.n	800d0d8 <__ieee754_rem_pio2+0x80>
 800d086:	4bc3      	ldr	r3, [pc, #780]	; (800d394 <__ieee754_rem_pio2+0x33c>)
 800d088:	4598      	cmp	r8, r3
 800d08a:	dc78      	bgt.n	800d17e <__ieee754_rem_pio2+0x126>
 800d08c:	9b02      	ldr	r3, [sp, #8]
 800d08e:	4ec2      	ldr	r6, [pc, #776]	; (800d398 <__ieee754_rem_pio2+0x340>)
 800d090:	2b00      	cmp	r3, #0
 800d092:	ee10 0a10 	vmov	r0, s0
 800d096:	a3b0      	add	r3, pc, #704	; (adr r3, 800d358 <__ieee754_rem_pio2+0x300>)
 800d098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09c:	4629      	mov	r1, r5
 800d09e:	dd39      	ble.n	800d114 <__ieee754_rem_pio2+0xbc>
 800d0a0:	f7f3 f8bc 	bl	800021c <__aeabi_dsub>
 800d0a4:	45b0      	cmp	r8, r6
 800d0a6:	4604      	mov	r4, r0
 800d0a8:	460d      	mov	r5, r1
 800d0aa:	d01b      	beq.n	800d0e4 <__ieee754_rem_pio2+0x8c>
 800d0ac:	a3ac      	add	r3, pc, #688	; (adr r3, 800d360 <__ieee754_rem_pio2+0x308>)
 800d0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b2:	f7f3 f8b3 	bl	800021c <__aeabi_dsub>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	e9ca 2300 	strd	r2, r3, [sl]
 800d0be:	4620      	mov	r0, r4
 800d0c0:	4629      	mov	r1, r5
 800d0c2:	f7f3 f8ab 	bl	800021c <__aeabi_dsub>
 800d0c6:	a3a6      	add	r3, pc, #664	; (adr r3, 800d360 <__ieee754_rem_pio2+0x308>)
 800d0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0cc:	f7f3 f8a6 	bl	800021c <__aeabi_dsub>
 800d0d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d0d4:	f04f 0b01 	mov.w	fp, #1
 800d0d8:	4658      	mov	r0, fp
 800d0da:	b00b      	add	sp, #44	; 0x2c
 800d0dc:	ecbd 8b02 	vpop	{d8}
 800d0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e4:	a3a0      	add	r3, pc, #640	; (adr r3, 800d368 <__ieee754_rem_pio2+0x310>)
 800d0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ea:	f7f3 f897 	bl	800021c <__aeabi_dsub>
 800d0ee:	a3a0      	add	r3, pc, #640	; (adr r3, 800d370 <__ieee754_rem_pio2+0x318>)
 800d0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	460d      	mov	r5, r1
 800d0f8:	f7f3 f890 	bl	800021c <__aeabi_dsub>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	460b      	mov	r3, r1
 800d100:	e9ca 2300 	strd	r2, r3, [sl]
 800d104:	4620      	mov	r0, r4
 800d106:	4629      	mov	r1, r5
 800d108:	f7f3 f888 	bl	800021c <__aeabi_dsub>
 800d10c:	a398      	add	r3, pc, #608	; (adr r3, 800d370 <__ieee754_rem_pio2+0x318>)
 800d10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d112:	e7db      	b.n	800d0cc <__ieee754_rem_pio2+0x74>
 800d114:	f7f3 f884 	bl	8000220 <__adddf3>
 800d118:	45b0      	cmp	r8, r6
 800d11a:	4604      	mov	r4, r0
 800d11c:	460d      	mov	r5, r1
 800d11e:	d016      	beq.n	800d14e <__ieee754_rem_pio2+0xf6>
 800d120:	a38f      	add	r3, pc, #572	; (adr r3, 800d360 <__ieee754_rem_pio2+0x308>)
 800d122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d126:	f7f3 f87b 	bl	8000220 <__adddf3>
 800d12a:	4602      	mov	r2, r0
 800d12c:	460b      	mov	r3, r1
 800d12e:	e9ca 2300 	strd	r2, r3, [sl]
 800d132:	4620      	mov	r0, r4
 800d134:	4629      	mov	r1, r5
 800d136:	f7f3 f871 	bl	800021c <__aeabi_dsub>
 800d13a:	a389      	add	r3, pc, #548	; (adr r3, 800d360 <__ieee754_rem_pio2+0x308>)
 800d13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d140:	f7f3 f86e 	bl	8000220 <__adddf3>
 800d144:	f04f 3bff 	mov.w	fp, #4294967295
 800d148:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d14c:	e7c4      	b.n	800d0d8 <__ieee754_rem_pio2+0x80>
 800d14e:	a386      	add	r3, pc, #536	; (adr r3, 800d368 <__ieee754_rem_pio2+0x310>)
 800d150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d154:	f7f3 f864 	bl	8000220 <__adddf3>
 800d158:	a385      	add	r3, pc, #532	; (adr r3, 800d370 <__ieee754_rem_pio2+0x318>)
 800d15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15e:	4604      	mov	r4, r0
 800d160:	460d      	mov	r5, r1
 800d162:	f7f3 f85d 	bl	8000220 <__adddf3>
 800d166:	4602      	mov	r2, r0
 800d168:	460b      	mov	r3, r1
 800d16a:	e9ca 2300 	strd	r2, r3, [sl]
 800d16e:	4620      	mov	r0, r4
 800d170:	4629      	mov	r1, r5
 800d172:	f7f3 f853 	bl	800021c <__aeabi_dsub>
 800d176:	a37e      	add	r3, pc, #504	; (adr r3, 800d370 <__ieee754_rem_pio2+0x318>)
 800d178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17c:	e7e0      	b.n	800d140 <__ieee754_rem_pio2+0xe8>
 800d17e:	4b87      	ldr	r3, [pc, #540]	; (800d39c <__ieee754_rem_pio2+0x344>)
 800d180:	4598      	cmp	r8, r3
 800d182:	f300 80d8 	bgt.w	800d336 <__ieee754_rem_pio2+0x2de>
 800d186:	f000 f96d 	bl	800d464 <fabs>
 800d18a:	ec55 4b10 	vmov	r4, r5, d0
 800d18e:	ee10 0a10 	vmov	r0, s0
 800d192:	a379      	add	r3, pc, #484	; (adr r3, 800d378 <__ieee754_rem_pio2+0x320>)
 800d194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d198:	4629      	mov	r1, r5
 800d19a:	f7f3 f9f7 	bl	800058c <__aeabi_dmul>
 800d19e:	4b80      	ldr	r3, [pc, #512]	; (800d3a0 <__ieee754_rem_pio2+0x348>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f7f3 f83d 	bl	8000220 <__adddf3>
 800d1a6:	f7f3 fca1 	bl	8000aec <__aeabi_d2iz>
 800d1aa:	4683      	mov	fp, r0
 800d1ac:	f7f3 f984 	bl	80004b8 <__aeabi_i2d>
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	460b      	mov	r3, r1
 800d1b4:	ec43 2b18 	vmov	d8, r2, r3
 800d1b8:	a367      	add	r3, pc, #412	; (adr r3, 800d358 <__ieee754_rem_pio2+0x300>)
 800d1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1be:	f7f3 f9e5 	bl	800058c <__aeabi_dmul>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	4629      	mov	r1, r5
 800d1ca:	f7f3 f827 	bl	800021c <__aeabi_dsub>
 800d1ce:	a364      	add	r3, pc, #400	; (adr r3, 800d360 <__ieee754_rem_pio2+0x308>)
 800d1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d4:	4606      	mov	r6, r0
 800d1d6:	460f      	mov	r7, r1
 800d1d8:	ec51 0b18 	vmov	r0, r1, d8
 800d1dc:	f7f3 f9d6 	bl	800058c <__aeabi_dmul>
 800d1e0:	f1bb 0f1f 	cmp.w	fp, #31
 800d1e4:	4604      	mov	r4, r0
 800d1e6:	460d      	mov	r5, r1
 800d1e8:	dc0d      	bgt.n	800d206 <__ieee754_rem_pio2+0x1ae>
 800d1ea:	4b6e      	ldr	r3, [pc, #440]	; (800d3a4 <__ieee754_rem_pio2+0x34c>)
 800d1ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1f4:	4543      	cmp	r3, r8
 800d1f6:	d006      	beq.n	800d206 <__ieee754_rem_pio2+0x1ae>
 800d1f8:	4622      	mov	r2, r4
 800d1fa:	462b      	mov	r3, r5
 800d1fc:	4630      	mov	r0, r6
 800d1fe:	4639      	mov	r1, r7
 800d200:	f7f3 f80c 	bl	800021c <__aeabi_dsub>
 800d204:	e00e      	b.n	800d224 <__ieee754_rem_pio2+0x1cc>
 800d206:	462b      	mov	r3, r5
 800d208:	4622      	mov	r2, r4
 800d20a:	4630      	mov	r0, r6
 800d20c:	4639      	mov	r1, r7
 800d20e:	f7f3 f805 	bl	800021c <__aeabi_dsub>
 800d212:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d216:	9303      	str	r3, [sp, #12]
 800d218:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d21c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d220:	2b10      	cmp	r3, #16
 800d222:	dc02      	bgt.n	800d22a <__ieee754_rem_pio2+0x1d2>
 800d224:	e9ca 0100 	strd	r0, r1, [sl]
 800d228:	e039      	b.n	800d29e <__ieee754_rem_pio2+0x246>
 800d22a:	a34f      	add	r3, pc, #316	; (adr r3, 800d368 <__ieee754_rem_pio2+0x310>)
 800d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d230:	ec51 0b18 	vmov	r0, r1, d8
 800d234:	f7f3 f9aa 	bl	800058c <__aeabi_dmul>
 800d238:	4604      	mov	r4, r0
 800d23a:	460d      	mov	r5, r1
 800d23c:	4602      	mov	r2, r0
 800d23e:	460b      	mov	r3, r1
 800d240:	4630      	mov	r0, r6
 800d242:	4639      	mov	r1, r7
 800d244:	f7f2 ffea 	bl	800021c <__aeabi_dsub>
 800d248:	4602      	mov	r2, r0
 800d24a:	460b      	mov	r3, r1
 800d24c:	4680      	mov	r8, r0
 800d24e:	4689      	mov	r9, r1
 800d250:	4630      	mov	r0, r6
 800d252:	4639      	mov	r1, r7
 800d254:	f7f2 ffe2 	bl	800021c <__aeabi_dsub>
 800d258:	4622      	mov	r2, r4
 800d25a:	462b      	mov	r3, r5
 800d25c:	f7f2 ffde 	bl	800021c <__aeabi_dsub>
 800d260:	a343      	add	r3, pc, #268	; (adr r3, 800d370 <__ieee754_rem_pio2+0x318>)
 800d262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d266:	4604      	mov	r4, r0
 800d268:	460d      	mov	r5, r1
 800d26a:	ec51 0b18 	vmov	r0, r1, d8
 800d26e:	f7f3 f98d 	bl	800058c <__aeabi_dmul>
 800d272:	4622      	mov	r2, r4
 800d274:	462b      	mov	r3, r5
 800d276:	f7f2 ffd1 	bl	800021c <__aeabi_dsub>
 800d27a:	4602      	mov	r2, r0
 800d27c:	460b      	mov	r3, r1
 800d27e:	4604      	mov	r4, r0
 800d280:	460d      	mov	r5, r1
 800d282:	4640      	mov	r0, r8
 800d284:	4649      	mov	r1, r9
 800d286:	f7f2 ffc9 	bl	800021c <__aeabi_dsub>
 800d28a:	9a03      	ldr	r2, [sp, #12]
 800d28c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d290:	1ad3      	subs	r3, r2, r3
 800d292:	2b31      	cmp	r3, #49	; 0x31
 800d294:	dc24      	bgt.n	800d2e0 <__ieee754_rem_pio2+0x288>
 800d296:	e9ca 0100 	strd	r0, r1, [sl]
 800d29a:	4646      	mov	r6, r8
 800d29c:	464f      	mov	r7, r9
 800d29e:	e9da 8900 	ldrd	r8, r9, [sl]
 800d2a2:	4630      	mov	r0, r6
 800d2a4:	4642      	mov	r2, r8
 800d2a6:	464b      	mov	r3, r9
 800d2a8:	4639      	mov	r1, r7
 800d2aa:	f7f2 ffb7 	bl	800021c <__aeabi_dsub>
 800d2ae:	462b      	mov	r3, r5
 800d2b0:	4622      	mov	r2, r4
 800d2b2:	f7f2 ffb3 	bl	800021c <__aeabi_dsub>
 800d2b6:	9b02      	ldr	r3, [sp, #8]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d2be:	f6bf af0b 	bge.w	800d0d8 <__ieee754_rem_pio2+0x80>
 800d2c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d2c6:	f8ca 3004 	str.w	r3, [sl, #4]
 800d2ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d2ce:	f8ca 8000 	str.w	r8, [sl]
 800d2d2:	f8ca 0008 	str.w	r0, [sl, #8]
 800d2d6:	f8ca 300c 	str.w	r3, [sl, #12]
 800d2da:	f1cb 0b00 	rsb	fp, fp, #0
 800d2de:	e6fb      	b.n	800d0d8 <__ieee754_rem_pio2+0x80>
 800d2e0:	a327      	add	r3, pc, #156	; (adr r3, 800d380 <__ieee754_rem_pio2+0x328>)
 800d2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e6:	ec51 0b18 	vmov	r0, r1, d8
 800d2ea:	f7f3 f94f 	bl	800058c <__aeabi_dmul>
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	460d      	mov	r5, r1
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	4640      	mov	r0, r8
 800d2f8:	4649      	mov	r1, r9
 800d2fa:	f7f2 ff8f 	bl	800021c <__aeabi_dsub>
 800d2fe:	4602      	mov	r2, r0
 800d300:	460b      	mov	r3, r1
 800d302:	4606      	mov	r6, r0
 800d304:	460f      	mov	r7, r1
 800d306:	4640      	mov	r0, r8
 800d308:	4649      	mov	r1, r9
 800d30a:	f7f2 ff87 	bl	800021c <__aeabi_dsub>
 800d30e:	4622      	mov	r2, r4
 800d310:	462b      	mov	r3, r5
 800d312:	f7f2 ff83 	bl	800021c <__aeabi_dsub>
 800d316:	a31c      	add	r3, pc, #112	; (adr r3, 800d388 <__ieee754_rem_pio2+0x330>)
 800d318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31c:	4604      	mov	r4, r0
 800d31e:	460d      	mov	r5, r1
 800d320:	ec51 0b18 	vmov	r0, r1, d8
 800d324:	f7f3 f932 	bl	800058c <__aeabi_dmul>
 800d328:	4622      	mov	r2, r4
 800d32a:	462b      	mov	r3, r5
 800d32c:	f7f2 ff76 	bl	800021c <__aeabi_dsub>
 800d330:	4604      	mov	r4, r0
 800d332:	460d      	mov	r5, r1
 800d334:	e760      	b.n	800d1f8 <__ieee754_rem_pio2+0x1a0>
 800d336:	4b1c      	ldr	r3, [pc, #112]	; (800d3a8 <__ieee754_rem_pio2+0x350>)
 800d338:	4598      	cmp	r8, r3
 800d33a:	dd37      	ble.n	800d3ac <__ieee754_rem_pio2+0x354>
 800d33c:	ee10 2a10 	vmov	r2, s0
 800d340:	462b      	mov	r3, r5
 800d342:	4620      	mov	r0, r4
 800d344:	4629      	mov	r1, r5
 800d346:	f7f2 ff69 	bl	800021c <__aeabi_dsub>
 800d34a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d34e:	e9ca 0100 	strd	r0, r1, [sl]
 800d352:	e695      	b.n	800d080 <__ieee754_rem_pio2+0x28>
 800d354:	f3af 8000 	nop.w
 800d358:	54400000 	.word	0x54400000
 800d35c:	3ff921fb 	.word	0x3ff921fb
 800d360:	1a626331 	.word	0x1a626331
 800d364:	3dd0b461 	.word	0x3dd0b461
 800d368:	1a600000 	.word	0x1a600000
 800d36c:	3dd0b461 	.word	0x3dd0b461
 800d370:	2e037073 	.word	0x2e037073
 800d374:	3ba3198a 	.word	0x3ba3198a
 800d378:	6dc9c883 	.word	0x6dc9c883
 800d37c:	3fe45f30 	.word	0x3fe45f30
 800d380:	2e000000 	.word	0x2e000000
 800d384:	3ba3198a 	.word	0x3ba3198a
 800d388:	252049c1 	.word	0x252049c1
 800d38c:	397b839a 	.word	0x397b839a
 800d390:	3fe921fb 	.word	0x3fe921fb
 800d394:	4002d97b 	.word	0x4002d97b
 800d398:	3ff921fb 	.word	0x3ff921fb
 800d39c:	413921fb 	.word	0x413921fb
 800d3a0:	3fe00000 	.word	0x3fe00000
 800d3a4:	08023b28 	.word	0x08023b28
 800d3a8:	7fefffff 	.word	0x7fefffff
 800d3ac:	ea4f 5628 	mov.w	r6, r8, asr #20
 800d3b0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800d3b4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	460d      	mov	r5, r1
 800d3bc:	f7f3 fb96 	bl	8000aec <__aeabi_d2iz>
 800d3c0:	f7f3 f87a 	bl	80004b8 <__aeabi_i2d>
 800d3c4:	4602      	mov	r2, r0
 800d3c6:	460b      	mov	r3, r1
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	4629      	mov	r1, r5
 800d3cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d3d0:	f7f2 ff24 	bl	800021c <__aeabi_dsub>
 800d3d4:	4b21      	ldr	r3, [pc, #132]	; (800d45c <__ieee754_rem_pio2+0x404>)
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	f7f3 f8d8 	bl	800058c <__aeabi_dmul>
 800d3dc:	460d      	mov	r5, r1
 800d3de:	4604      	mov	r4, r0
 800d3e0:	f7f3 fb84 	bl	8000aec <__aeabi_d2iz>
 800d3e4:	f7f3 f868 	bl	80004b8 <__aeabi_i2d>
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	4629      	mov	r1, r5
 800d3f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d3f4:	f7f2 ff12 	bl	800021c <__aeabi_dsub>
 800d3f8:	4b18      	ldr	r3, [pc, #96]	; (800d45c <__ieee754_rem_pio2+0x404>)
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	f7f3 f8c6 	bl	800058c <__aeabi_dmul>
 800d400:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d404:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800d408:	2703      	movs	r7, #3
 800d40a:	2400      	movs	r4, #0
 800d40c:	2500      	movs	r5, #0
 800d40e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800d412:	4622      	mov	r2, r4
 800d414:	462b      	mov	r3, r5
 800d416:	46b9      	mov	r9, r7
 800d418:	3f01      	subs	r7, #1
 800d41a:	f7f3 fb1f 	bl	8000a5c <__aeabi_dcmpeq>
 800d41e:	2800      	cmp	r0, #0
 800d420:	d1f5      	bne.n	800d40e <__ieee754_rem_pio2+0x3b6>
 800d422:	4b0f      	ldr	r3, [pc, #60]	; (800d460 <__ieee754_rem_pio2+0x408>)
 800d424:	9301      	str	r3, [sp, #4]
 800d426:	2302      	movs	r3, #2
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	4632      	mov	r2, r6
 800d42c:	464b      	mov	r3, r9
 800d42e:	4651      	mov	r1, sl
 800d430:	a804      	add	r0, sp, #16
 800d432:	f000 fb85 	bl	800db40 <__kernel_rem_pio2>
 800d436:	9b02      	ldr	r3, [sp, #8]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	4683      	mov	fp, r0
 800d43c:	f6bf ae4c 	bge.w	800d0d8 <__ieee754_rem_pio2+0x80>
 800d440:	e9da 2100 	ldrd	r2, r1, [sl]
 800d444:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d448:	e9ca 2300 	strd	r2, r3, [sl]
 800d44c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d450:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d454:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d458:	e73f      	b.n	800d2da <__ieee754_rem_pio2+0x282>
 800d45a:	bf00      	nop
 800d45c:	41700000 	.word	0x41700000
 800d460:	08023ba8 	.word	0x08023ba8

0800d464 <fabs>:
 800d464:	ec51 0b10 	vmov	r0, r1, d0
 800d468:	ee10 2a10 	vmov	r2, s0
 800d46c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d470:	ec43 2b10 	vmov	d0, r2, r3
 800d474:	4770      	bx	lr
	...

0800d478 <__kernel_cosf>:
 800d478:	ee10 3a10 	vmov	r3, s0
 800d47c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d480:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d488:	da05      	bge.n	800d496 <__kernel_cosf+0x1e>
 800d48a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d48e:	ee17 2a90 	vmov	r2, s15
 800d492:	2a00      	cmp	r2, #0
 800d494:	d03b      	beq.n	800d50e <__kernel_cosf+0x96>
 800d496:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d49a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800d514 <__kernel_cosf+0x9c>
 800d49e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800d518 <__kernel_cosf+0xa0>
 800d4a2:	4a1e      	ldr	r2, [pc, #120]	; (800d51c <__kernel_cosf+0xa4>)
 800d4a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800d520 <__kernel_cosf+0xa8>
 800d4ae:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d4b2:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800d524 <__kernel_cosf+0xac>
 800d4b6:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d4ba:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800d528 <__kernel_cosf+0xb0>
 800d4be:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d4c2:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800d52c <__kernel_cosf+0xb4>
 800d4c6:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d4ca:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800d4ce:	ee26 6a07 	vmul.f32	s12, s12, s14
 800d4d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d4d6:	eee7 0a06 	vfma.f32	s1, s14, s12
 800d4da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4de:	dc04      	bgt.n	800d4ea <__kernel_cosf+0x72>
 800d4e0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d4e4:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800d4e8:	4770      	bx	lr
 800d4ea:	4a11      	ldr	r2, [pc, #68]	; (800d530 <__kernel_cosf+0xb8>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	bfda      	itte	le
 800d4f0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800d4f4:	ee07 3a10 	vmovle	s14, r3
 800d4f8:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800d4fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d500:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800d504:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d508:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d50c:	4770      	bx	lr
 800d50e:	eeb0 0a66 	vmov.f32	s0, s13
 800d512:	4770      	bx	lr
 800d514:	ad47d74e 	.word	0xad47d74e
 800d518:	310f74f6 	.word	0x310f74f6
 800d51c:	3e999999 	.word	0x3e999999
 800d520:	b493f27c 	.word	0xb493f27c
 800d524:	37d00d01 	.word	0x37d00d01
 800d528:	bab60b61 	.word	0xbab60b61
 800d52c:	3d2aaaab 	.word	0x3d2aaaab
 800d530:	3f480000 	.word	0x3f480000

0800d534 <__kernel_sinf>:
 800d534:	ee10 3a10 	vmov	r3, s0
 800d538:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d53c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d540:	da04      	bge.n	800d54c <__kernel_sinf+0x18>
 800d542:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d546:	ee17 3a90 	vmov	r3, s15
 800d54a:	b35b      	cbz	r3, 800d5a4 <__kernel_sinf+0x70>
 800d54c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d550:	eddf 7a15 	vldr	s15, [pc, #84]	; 800d5a8 <__kernel_sinf+0x74>
 800d554:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800d5ac <__kernel_sinf+0x78>
 800d558:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d55c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800d5b0 <__kernel_sinf+0x7c>
 800d560:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d564:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800d5b4 <__kernel_sinf+0x80>
 800d568:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d56c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800d5b8 <__kernel_sinf+0x84>
 800d570:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d574:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d578:	b930      	cbnz	r0, 800d588 <__kernel_sinf+0x54>
 800d57a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800d5bc <__kernel_sinf+0x88>
 800d57e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d582:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d586:	4770      	bx	lr
 800d588:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d58c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d590:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d594:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d598:	eddf 7a09 	vldr	s15, [pc, #36]	; 800d5c0 <__kernel_sinf+0x8c>
 800d59c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d5a0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop
 800d5a8:	2f2ec9d3 	.word	0x2f2ec9d3
 800d5ac:	b2d72f34 	.word	0xb2d72f34
 800d5b0:	3638ef1b 	.word	0x3638ef1b
 800d5b4:	b9500d01 	.word	0xb9500d01
 800d5b8:	3c088889 	.word	0x3c088889
 800d5bc:	be2aaaab 	.word	0xbe2aaaab
 800d5c0:	3e2aaaab 	.word	0x3e2aaaab

0800d5c4 <__ieee754_rem_pio2f>:
 800d5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5c6:	ee10 6a10 	vmov	r6, s0
 800d5ca:	4b86      	ldr	r3, [pc, #536]	; (800d7e4 <__ieee754_rem_pio2f+0x220>)
 800d5cc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800d5d0:	429d      	cmp	r5, r3
 800d5d2:	b087      	sub	sp, #28
 800d5d4:	4604      	mov	r4, r0
 800d5d6:	dc05      	bgt.n	800d5e4 <__ieee754_rem_pio2f+0x20>
 800d5d8:	2300      	movs	r3, #0
 800d5da:	ed80 0a00 	vstr	s0, [r0]
 800d5de:	6043      	str	r3, [r0, #4]
 800d5e0:	2000      	movs	r0, #0
 800d5e2:	e020      	b.n	800d626 <__ieee754_rem_pio2f+0x62>
 800d5e4:	4b80      	ldr	r3, [pc, #512]	; (800d7e8 <__ieee754_rem_pio2f+0x224>)
 800d5e6:	429d      	cmp	r5, r3
 800d5e8:	dc38      	bgt.n	800d65c <__ieee754_rem_pio2f+0x98>
 800d5ea:	2e00      	cmp	r6, #0
 800d5ec:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800d7ec <__ieee754_rem_pio2f+0x228>
 800d5f0:	4b7f      	ldr	r3, [pc, #508]	; (800d7f0 <__ieee754_rem_pio2f+0x22c>)
 800d5f2:	f025 050f 	bic.w	r5, r5, #15
 800d5f6:	dd18      	ble.n	800d62a <__ieee754_rem_pio2f+0x66>
 800d5f8:	429d      	cmp	r5, r3
 800d5fa:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d5fe:	bf09      	itett	eq
 800d600:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800d7f4 <__ieee754_rem_pio2f+0x230>
 800d604:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800d7f8 <__ieee754_rem_pio2f+0x234>
 800d608:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d60c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800d7fc <__ieee754_rem_pio2f+0x238>
 800d610:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800d614:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d618:	edc0 6a00 	vstr	s13, [r0]
 800d61c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d620:	edc0 7a01 	vstr	s15, [r0, #4]
 800d624:	2001      	movs	r0, #1
 800d626:	b007      	add	sp, #28
 800d628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d62a:	429d      	cmp	r5, r3
 800d62c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d630:	bf09      	itett	eq
 800d632:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800d7f4 <__ieee754_rem_pio2f+0x230>
 800d636:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800d7f8 <__ieee754_rem_pio2f+0x234>
 800d63a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d63e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800d7fc <__ieee754_rem_pio2f+0x238>
 800d642:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d646:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d64a:	edc0 6a00 	vstr	s13, [r0]
 800d64e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d652:	edc0 7a01 	vstr	s15, [r0, #4]
 800d656:	f04f 30ff 	mov.w	r0, #4294967295
 800d65a:	e7e4      	b.n	800d626 <__ieee754_rem_pio2f+0x62>
 800d65c:	4b68      	ldr	r3, [pc, #416]	; (800d800 <__ieee754_rem_pio2f+0x23c>)
 800d65e:	429d      	cmp	r5, r3
 800d660:	dc71      	bgt.n	800d746 <__ieee754_rem_pio2f+0x182>
 800d662:	f000 f8db 	bl	800d81c <fabsf>
 800d666:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800d804 <__ieee754_rem_pio2f+0x240>
 800d66a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d66e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d676:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d67a:	ee17 0a90 	vmov	r0, s15
 800d67e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800d7ec <__ieee754_rem_pio2f+0x228>
 800d682:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d686:	281f      	cmp	r0, #31
 800d688:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800d7f8 <__ieee754_rem_pio2f+0x234>
 800d68c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d690:	eeb1 6a47 	vneg.f32	s12, s14
 800d694:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d698:	ee16 2a90 	vmov	r2, s13
 800d69c:	dc1c      	bgt.n	800d6d8 <__ieee754_rem_pio2f+0x114>
 800d69e:	495a      	ldr	r1, [pc, #360]	; (800d808 <__ieee754_rem_pio2f+0x244>)
 800d6a0:	1e47      	subs	r7, r0, #1
 800d6a2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800d6a6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800d6aa:	428b      	cmp	r3, r1
 800d6ac:	d014      	beq.n	800d6d8 <__ieee754_rem_pio2f+0x114>
 800d6ae:	6022      	str	r2, [r4, #0]
 800d6b0:	ed94 7a00 	vldr	s14, [r4]
 800d6b4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d6b8:	2e00      	cmp	r6, #0
 800d6ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d6be:	ed84 0a01 	vstr	s0, [r4, #4]
 800d6c2:	dab0      	bge.n	800d626 <__ieee754_rem_pio2f+0x62>
 800d6c4:	eeb1 7a47 	vneg.f32	s14, s14
 800d6c8:	eeb1 0a40 	vneg.f32	s0, s0
 800d6cc:	ed84 7a00 	vstr	s14, [r4]
 800d6d0:	ed84 0a01 	vstr	s0, [r4, #4]
 800d6d4:	4240      	negs	r0, r0
 800d6d6:	e7a6      	b.n	800d626 <__ieee754_rem_pio2f+0x62>
 800d6d8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d6dc:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800d6e0:	2908      	cmp	r1, #8
 800d6e2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d6e6:	dde2      	ble.n	800d6ae <__ieee754_rem_pio2f+0xea>
 800d6e8:	eddf 5a42 	vldr	s11, [pc, #264]	; 800d7f4 <__ieee754_rem_pio2f+0x230>
 800d6ec:	eef0 6a40 	vmov.f32	s13, s0
 800d6f0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800d6f4:	ee70 7a66 	vsub.f32	s15, s0, s13
 800d6f8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d6fc:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800d7fc <__ieee754_rem_pio2f+0x238>
 800d700:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d704:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d708:	ee15 2a90 	vmov	r2, s11
 800d70c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d710:	1a5b      	subs	r3, r3, r1
 800d712:	2b19      	cmp	r3, #25
 800d714:	dc04      	bgt.n	800d720 <__ieee754_rem_pio2f+0x15c>
 800d716:	edc4 5a00 	vstr	s11, [r4]
 800d71a:	eeb0 0a66 	vmov.f32	s0, s13
 800d71e:	e7c7      	b.n	800d6b0 <__ieee754_rem_pio2f+0xec>
 800d720:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800d80c <__ieee754_rem_pio2f+0x248>
 800d724:	eeb0 0a66 	vmov.f32	s0, s13
 800d728:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d72c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d730:	eddf 6a37 	vldr	s13, [pc, #220]	; 800d810 <__ieee754_rem_pio2f+0x24c>
 800d734:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d738:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d73c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d740:	ed84 7a00 	vstr	s14, [r4]
 800d744:	e7b4      	b.n	800d6b0 <__ieee754_rem_pio2f+0xec>
 800d746:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d74a:	db06      	blt.n	800d75a <__ieee754_rem_pio2f+0x196>
 800d74c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d750:	edc0 7a01 	vstr	s15, [r0, #4]
 800d754:	edc0 7a00 	vstr	s15, [r0]
 800d758:	e742      	b.n	800d5e0 <__ieee754_rem_pio2f+0x1c>
 800d75a:	15ea      	asrs	r2, r5, #23
 800d75c:	3a86      	subs	r2, #134	; 0x86
 800d75e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d762:	ee07 3a90 	vmov	s15, r3
 800d766:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d76a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800d814 <__ieee754_rem_pio2f+0x250>
 800d76e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d772:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d776:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d77a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d77e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d782:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d786:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d78a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d78e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d792:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d79a:	edcd 7a05 	vstr	s15, [sp, #20]
 800d79e:	d11e      	bne.n	800d7de <__ieee754_rem_pio2f+0x21a>
 800d7a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a8:	bf14      	ite	ne
 800d7aa:	2302      	movne	r3, #2
 800d7ac:	2301      	moveq	r3, #1
 800d7ae:	491a      	ldr	r1, [pc, #104]	; (800d818 <__ieee754_rem_pio2f+0x254>)
 800d7b0:	9101      	str	r1, [sp, #4]
 800d7b2:	2102      	movs	r1, #2
 800d7b4:	9100      	str	r1, [sp, #0]
 800d7b6:	a803      	add	r0, sp, #12
 800d7b8:	4621      	mov	r1, r4
 800d7ba:	f000 fd0f 	bl	800e1dc <__kernel_rem_pio2f>
 800d7be:	2e00      	cmp	r6, #0
 800d7c0:	f6bf af31 	bge.w	800d626 <__ieee754_rem_pio2f+0x62>
 800d7c4:	edd4 7a00 	vldr	s15, [r4]
 800d7c8:	eef1 7a67 	vneg.f32	s15, s15
 800d7cc:	edc4 7a00 	vstr	s15, [r4]
 800d7d0:	edd4 7a01 	vldr	s15, [r4, #4]
 800d7d4:	eef1 7a67 	vneg.f32	s15, s15
 800d7d8:	edc4 7a01 	vstr	s15, [r4, #4]
 800d7dc:	e77a      	b.n	800d6d4 <__ieee754_rem_pio2f+0x110>
 800d7de:	2303      	movs	r3, #3
 800d7e0:	e7e5      	b.n	800d7ae <__ieee754_rem_pio2f+0x1ea>
 800d7e2:	bf00      	nop
 800d7e4:	3f490fd8 	.word	0x3f490fd8
 800d7e8:	4016cbe3 	.word	0x4016cbe3
 800d7ec:	3fc90f80 	.word	0x3fc90f80
 800d7f0:	3fc90fd0 	.word	0x3fc90fd0
 800d7f4:	37354400 	.word	0x37354400
 800d7f8:	37354443 	.word	0x37354443
 800d7fc:	2e85a308 	.word	0x2e85a308
 800d800:	43490f80 	.word	0x43490f80
 800d804:	3f22f984 	.word	0x3f22f984
 800d808:	08023cb0 	.word	0x08023cb0
 800d80c:	2e85a300 	.word	0x2e85a300
 800d810:	248d3132 	.word	0x248d3132
 800d814:	43800000 	.word	0x43800000
 800d818:	08023d30 	.word	0x08023d30

0800d81c <fabsf>:
 800d81c:	ee10 3a10 	vmov	r3, s0
 800d820:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d824:	ee00 3a10 	vmov	s0, r3
 800d828:	4770      	bx	lr
 800d82a:	0000      	movs	r0, r0
 800d82c:	0000      	movs	r0, r0
	...

0800d830 <scalbn>:
 800d830:	b570      	push	{r4, r5, r6, lr}
 800d832:	ec55 4b10 	vmov	r4, r5, d0
 800d836:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d83a:	4606      	mov	r6, r0
 800d83c:	462b      	mov	r3, r5
 800d83e:	b999      	cbnz	r1, 800d868 <scalbn+0x38>
 800d840:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d844:	4323      	orrs	r3, r4
 800d846:	d03f      	beq.n	800d8c8 <scalbn+0x98>
 800d848:	4b35      	ldr	r3, [pc, #212]	; (800d920 <scalbn+0xf0>)
 800d84a:	4629      	mov	r1, r5
 800d84c:	ee10 0a10 	vmov	r0, s0
 800d850:	2200      	movs	r2, #0
 800d852:	f7f2 fe9b 	bl	800058c <__aeabi_dmul>
 800d856:	4b33      	ldr	r3, [pc, #204]	; (800d924 <scalbn+0xf4>)
 800d858:	429e      	cmp	r6, r3
 800d85a:	4604      	mov	r4, r0
 800d85c:	460d      	mov	r5, r1
 800d85e:	da10      	bge.n	800d882 <scalbn+0x52>
 800d860:	a327      	add	r3, pc, #156	; (adr r3, 800d900 <scalbn+0xd0>)
 800d862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d866:	e01f      	b.n	800d8a8 <scalbn+0x78>
 800d868:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d86c:	4291      	cmp	r1, r2
 800d86e:	d10c      	bne.n	800d88a <scalbn+0x5a>
 800d870:	ee10 2a10 	vmov	r2, s0
 800d874:	4620      	mov	r0, r4
 800d876:	4629      	mov	r1, r5
 800d878:	f7f2 fcd2 	bl	8000220 <__adddf3>
 800d87c:	4604      	mov	r4, r0
 800d87e:	460d      	mov	r5, r1
 800d880:	e022      	b.n	800d8c8 <scalbn+0x98>
 800d882:	460b      	mov	r3, r1
 800d884:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d888:	3936      	subs	r1, #54	; 0x36
 800d88a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d88e:	4296      	cmp	r6, r2
 800d890:	dd0d      	ble.n	800d8ae <scalbn+0x7e>
 800d892:	2d00      	cmp	r5, #0
 800d894:	a11c      	add	r1, pc, #112	; (adr r1, 800d908 <scalbn+0xd8>)
 800d896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d89a:	da02      	bge.n	800d8a2 <scalbn+0x72>
 800d89c:	a11c      	add	r1, pc, #112	; (adr r1, 800d910 <scalbn+0xe0>)
 800d89e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8a2:	a319      	add	r3, pc, #100	; (adr r3, 800d908 <scalbn+0xd8>)
 800d8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a8:	f7f2 fe70 	bl	800058c <__aeabi_dmul>
 800d8ac:	e7e6      	b.n	800d87c <scalbn+0x4c>
 800d8ae:	1872      	adds	r2, r6, r1
 800d8b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d8b4:	428a      	cmp	r2, r1
 800d8b6:	dcec      	bgt.n	800d892 <scalbn+0x62>
 800d8b8:	2a00      	cmp	r2, #0
 800d8ba:	dd08      	ble.n	800d8ce <scalbn+0x9e>
 800d8bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d8c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d8c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d8c8:	ec45 4b10 	vmov	d0, r4, r5
 800d8cc:	bd70      	pop	{r4, r5, r6, pc}
 800d8ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d8d2:	da08      	bge.n	800d8e6 <scalbn+0xb6>
 800d8d4:	2d00      	cmp	r5, #0
 800d8d6:	a10a      	add	r1, pc, #40	; (adr r1, 800d900 <scalbn+0xd0>)
 800d8d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8dc:	dac0      	bge.n	800d860 <scalbn+0x30>
 800d8de:	a10e      	add	r1, pc, #56	; (adr r1, 800d918 <scalbn+0xe8>)
 800d8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8e4:	e7bc      	b.n	800d860 <scalbn+0x30>
 800d8e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d8ea:	3236      	adds	r2, #54	; 0x36
 800d8ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d8f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	4b0c      	ldr	r3, [pc, #48]	; (800d928 <scalbn+0xf8>)
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	e7d5      	b.n	800d8a8 <scalbn+0x78>
 800d8fc:	f3af 8000 	nop.w
 800d900:	c2f8f359 	.word	0xc2f8f359
 800d904:	01a56e1f 	.word	0x01a56e1f
 800d908:	8800759c 	.word	0x8800759c
 800d90c:	7e37e43c 	.word	0x7e37e43c
 800d910:	8800759c 	.word	0x8800759c
 800d914:	fe37e43c 	.word	0xfe37e43c
 800d918:	c2f8f359 	.word	0xc2f8f359
 800d91c:	81a56e1f 	.word	0x81a56e1f
 800d920:	43500000 	.word	0x43500000
 800d924:	ffff3cb0 	.word	0xffff3cb0
 800d928:	3c900000 	.word	0x3c900000

0800d92c <with_errno>:
 800d92c:	b570      	push	{r4, r5, r6, lr}
 800d92e:	4604      	mov	r4, r0
 800d930:	460d      	mov	r5, r1
 800d932:	4616      	mov	r6, r2
 800d934:	f7fe fb78 	bl	800c028 <__errno>
 800d938:	4629      	mov	r1, r5
 800d93a:	6006      	str	r6, [r0, #0]
 800d93c:	4620      	mov	r0, r4
 800d93e:	bd70      	pop	{r4, r5, r6, pc}

0800d940 <xflow>:
 800d940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d942:	4614      	mov	r4, r2
 800d944:	461d      	mov	r5, r3
 800d946:	b108      	cbz	r0, 800d94c <xflow+0xc>
 800d948:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d94c:	e9cd 2300 	strd	r2, r3, [sp]
 800d950:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d954:	4620      	mov	r0, r4
 800d956:	4629      	mov	r1, r5
 800d958:	f7f2 fe18 	bl	800058c <__aeabi_dmul>
 800d95c:	2222      	movs	r2, #34	; 0x22
 800d95e:	b003      	add	sp, #12
 800d960:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d964:	f7ff bfe2 	b.w	800d92c <with_errno>

0800d968 <__math_uflow>:
 800d968:	b508      	push	{r3, lr}
 800d96a:	2200      	movs	r2, #0
 800d96c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d970:	f7ff ffe6 	bl	800d940 <xflow>
 800d974:	ec41 0b10 	vmov	d0, r0, r1
 800d978:	bd08      	pop	{r3, pc}

0800d97a <__math_oflow>:
 800d97a:	b508      	push	{r3, lr}
 800d97c:	2200      	movs	r2, #0
 800d97e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d982:	f7ff ffdd 	bl	800d940 <xflow>
 800d986:	ec41 0b10 	vmov	d0, r0, r1
 800d98a:	bd08      	pop	{r3, pc}

0800d98c <__ieee754_sqrt>:
 800d98c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d990:	ec55 4b10 	vmov	r4, r5, d0
 800d994:	4e67      	ldr	r6, [pc, #412]	; (800db34 <__ieee754_sqrt+0x1a8>)
 800d996:	43ae      	bics	r6, r5
 800d998:	ee10 0a10 	vmov	r0, s0
 800d99c:	ee10 2a10 	vmov	r2, s0
 800d9a0:	4629      	mov	r1, r5
 800d9a2:	462b      	mov	r3, r5
 800d9a4:	d10d      	bne.n	800d9c2 <__ieee754_sqrt+0x36>
 800d9a6:	f7f2 fdf1 	bl	800058c <__aeabi_dmul>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	4629      	mov	r1, r5
 800d9b2:	f7f2 fc35 	bl	8000220 <__adddf3>
 800d9b6:	4604      	mov	r4, r0
 800d9b8:	460d      	mov	r5, r1
 800d9ba:	ec45 4b10 	vmov	d0, r4, r5
 800d9be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9c2:	2d00      	cmp	r5, #0
 800d9c4:	dc0b      	bgt.n	800d9de <__ieee754_sqrt+0x52>
 800d9c6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d9ca:	4326      	orrs	r6, r4
 800d9cc:	d0f5      	beq.n	800d9ba <__ieee754_sqrt+0x2e>
 800d9ce:	b135      	cbz	r5, 800d9de <__ieee754_sqrt+0x52>
 800d9d0:	f7f2 fc24 	bl	800021c <__aeabi_dsub>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	f7f2 ff02 	bl	80007e0 <__aeabi_ddiv>
 800d9dc:	e7eb      	b.n	800d9b6 <__ieee754_sqrt+0x2a>
 800d9de:	1509      	asrs	r1, r1, #20
 800d9e0:	f000 808d 	beq.w	800dafe <__ieee754_sqrt+0x172>
 800d9e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9e8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d9ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9f0:	07c9      	lsls	r1, r1, #31
 800d9f2:	bf5c      	itt	pl
 800d9f4:	005b      	lslpl	r3, r3, #1
 800d9f6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d9fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d9fe:	bf58      	it	pl
 800da00:	0052      	lslpl	r2, r2, #1
 800da02:	2500      	movs	r5, #0
 800da04:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800da08:	1076      	asrs	r6, r6, #1
 800da0a:	0052      	lsls	r2, r2, #1
 800da0c:	f04f 0e16 	mov.w	lr, #22
 800da10:	46ac      	mov	ip, r5
 800da12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800da16:	eb0c 0001 	add.w	r0, ip, r1
 800da1a:	4298      	cmp	r0, r3
 800da1c:	bfde      	ittt	le
 800da1e:	1a1b      	suble	r3, r3, r0
 800da20:	eb00 0c01 	addle.w	ip, r0, r1
 800da24:	186d      	addle	r5, r5, r1
 800da26:	005b      	lsls	r3, r3, #1
 800da28:	f1be 0e01 	subs.w	lr, lr, #1
 800da2c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800da30:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800da34:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800da38:	d1ed      	bne.n	800da16 <__ieee754_sqrt+0x8a>
 800da3a:	4674      	mov	r4, lr
 800da3c:	2720      	movs	r7, #32
 800da3e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800da42:	4563      	cmp	r3, ip
 800da44:	eb01 000e 	add.w	r0, r1, lr
 800da48:	dc02      	bgt.n	800da50 <__ieee754_sqrt+0xc4>
 800da4a:	d113      	bne.n	800da74 <__ieee754_sqrt+0xe8>
 800da4c:	4290      	cmp	r0, r2
 800da4e:	d811      	bhi.n	800da74 <__ieee754_sqrt+0xe8>
 800da50:	2800      	cmp	r0, #0
 800da52:	eb00 0e01 	add.w	lr, r0, r1
 800da56:	da57      	bge.n	800db08 <__ieee754_sqrt+0x17c>
 800da58:	f1be 0f00 	cmp.w	lr, #0
 800da5c:	db54      	blt.n	800db08 <__ieee754_sqrt+0x17c>
 800da5e:	f10c 0801 	add.w	r8, ip, #1
 800da62:	eba3 030c 	sub.w	r3, r3, ip
 800da66:	4290      	cmp	r0, r2
 800da68:	bf88      	it	hi
 800da6a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800da6e:	1a12      	subs	r2, r2, r0
 800da70:	440c      	add	r4, r1
 800da72:	46c4      	mov	ip, r8
 800da74:	005b      	lsls	r3, r3, #1
 800da76:	3f01      	subs	r7, #1
 800da78:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800da7c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800da80:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800da84:	d1dd      	bne.n	800da42 <__ieee754_sqrt+0xb6>
 800da86:	4313      	orrs	r3, r2
 800da88:	d01b      	beq.n	800dac2 <__ieee754_sqrt+0x136>
 800da8a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800db38 <__ieee754_sqrt+0x1ac>
 800da8e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800db3c <__ieee754_sqrt+0x1b0>
 800da92:	e9da 0100 	ldrd	r0, r1, [sl]
 800da96:	e9db 2300 	ldrd	r2, r3, [fp]
 800da9a:	f7f2 fbbf 	bl	800021c <__aeabi_dsub>
 800da9e:	e9da 8900 	ldrd	r8, r9, [sl]
 800daa2:	4602      	mov	r2, r0
 800daa4:	460b      	mov	r3, r1
 800daa6:	4640      	mov	r0, r8
 800daa8:	4649      	mov	r1, r9
 800daaa:	f7f2 ffeb 	bl	8000a84 <__aeabi_dcmple>
 800daae:	b140      	cbz	r0, 800dac2 <__ieee754_sqrt+0x136>
 800dab0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dab4:	e9da 0100 	ldrd	r0, r1, [sl]
 800dab8:	e9db 2300 	ldrd	r2, r3, [fp]
 800dabc:	d126      	bne.n	800db0c <__ieee754_sqrt+0x180>
 800dabe:	3501      	adds	r5, #1
 800dac0:	463c      	mov	r4, r7
 800dac2:	106a      	asrs	r2, r5, #1
 800dac4:	0863      	lsrs	r3, r4, #1
 800dac6:	07e9      	lsls	r1, r5, #31
 800dac8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800dacc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800dad0:	bf48      	it	mi
 800dad2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800dad6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800dada:	461c      	mov	r4, r3
 800dadc:	e76d      	b.n	800d9ba <__ieee754_sqrt+0x2e>
 800dade:	0ad3      	lsrs	r3, r2, #11
 800dae0:	3815      	subs	r0, #21
 800dae2:	0552      	lsls	r2, r2, #21
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d0fa      	beq.n	800dade <__ieee754_sqrt+0x152>
 800dae8:	02dc      	lsls	r4, r3, #11
 800daea:	d50a      	bpl.n	800db02 <__ieee754_sqrt+0x176>
 800daec:	f1c1 0420 	rsb	r4, r1, #32
 800daf0:	fa22 f404 	lsr.w	r4, r2, r4
 800daf4:	1e4d      	subs	r5, r1, #1
 800daf6:	408a      	lsls	r2, r1
 800daf8:	4323      	orrs	r3, r4
 800dafa:	1b41      	subs	r1, r0, r5
 800dafc:	e772      	b.n	800d9e4 <__ieee754_sqrt+0x58>
 800dafe:	4608      	mov	r0, r1
 800db00:	e7f0      	b.n	800dae4 <__ieee754_sqrt+0x158>
 800db02:	005b      	lsls	r3, r3, #1
 800db04:	3101      	adds	r1, #1
 800db06:	e7ef      	b.n	800dae8 <__ieee754_sqrt+0x15c>
 800db08:	46e0      	mov	r8, ip
 800db0a:	e7aa      	b.n	800da62 <__ieee754_sqrt+0xd6>
 800db0c:	f7f2 fb88 	bl	8000220 <__adddf3>
 800db10:	e9da 8900 	ldrd	r8, r9, [sl]
 800db14:	4602      	mov	r2, r0
 800db16:	460b      	mov	r3, r1
 800db18:	4640      	mov	r0, r8
 800db1a:	4649      	mov	r1, r9
 800db1c:	f7f2 ffa8 	bl	8000a70 <__aeabi_dcmplt>
 800db20:	b120      	cbz	r0, 800db2c <__ieee754_sqrt+0x1a0>
 800db22:	1ca0      	adds	r0, r4, #2
 800db24:	bf08      	it	eq
 800db26:	3501      	addeq	r5, #1
 800db28:	3402      	adds	r4, #2
 800db2a:	e7ca      	b.n	800dac2 <__ieee754_sqrt+0x136>
 800db2c:	3401      	adds	r4, #1
 800db2e:	f024 0401 	bic.w	r4, r4, #1
 800db32:	e7c6      	b.n	800dac2 <__ieee754_sqrt+0x136>
 800db34:	7ff00000 	.word	0x7ff00000
 800db38:	20000070 	.word	0x20000070
 800db3c:	20000078 	.word	0x20000078

0800db40 <__kernel_rem_pio2>:
 800db40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db44:	ed2d 8b02 	vpush	{d8}
 800db48:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800db4c:	f112 0f14 	cmn.w	r2, #20
 800db50:	9306      	str	r3, [sp, #24]
 800db52:	9104      	str	r1, [sp, #16]
 800db54:	4bc2      	ldr	r3, [pc, #776]	; (800de60 <__kernel_rem_pio2+0x320>)
 800db56:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800db58:	9009      	str	r0, [sp, #36]	; 0x24
 800db5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800db5e:	9300      	str	r3, [sp, #0]
 800db60:	9b06      	ldr	r3, [sp, #24]
 800db62:	f103 33ff 	add.w	r3, r3, #4294967295
 800db66:	bfa8      	it	ge
 800db68:	1ed4      	subge	r4, r2, #3
 800db6a:	9305      	str	r3, [sp, #20]
 800db6c:	bfb2      	itee	lt
 800db6e:	2400      	movlt	r4, #0
 800db70:	2318      	movge	r3, #24
 800db72:	fb94 f4f3 	sdivge	r4, r4, r3
 800db76:	f06f 0317 	mvn.w	r3, #23
 800db7a:	fb04 3303 	mla	r3, r4, r3, r3
 800db7e:	eb03 0a02 	add.w	sl, r3, r2
 800db82:	9b00      	ldr	r3, [sp, #0]
 800db84:	9a05      	ldr	r2, [sp, #20]
 800db86:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800de50 <__kernel_rem_pio2+0x310>
 800db8a:	eb03 0802 	add.w	r8, r3, r2
 800db8e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800db90:	1aa7      	subs	r7, r4, r2
 800db92:	ae20      	add	r6, sp, #128	; 0x80
 800db94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800db98:	2500      	movs	r5, #0
 800db9a:	4545      	cmp	r5, r8
 800db9c:	dd13      	ble.n	800dbc6 <__kernel_rem_pio2+0x86>
 800db9e:	9b06      	ldr	r3, [sp, #24]
 800dba0:	aa20      	add	r2, sp, #128	; 0x80
 800dba2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800dba6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800dbaa:	f04f 0800 	mov.w	r8, #0
 800dbae:	9b00      	ldr	r3, [sp, #0]
 800dbb0:	4598      	cmp	r8, r3
 800dbb2:	dc31      	bgt.n	800dc18 <__kernel_rem_pio2+0xd8>
 800dbb4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800de50 <__kernel_rem_pio2+0x310>
 800dbb8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800dbbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dbc0:	462f      	mov	r7, r5
 800dbc2:	2600      	movs	r6, #0
 800dbc4:	e01b      	b.n	800dbfe <__kernel_rem_pio2+0xbe>
 800dbc6:	42ef      	cmn	r7, r5
 800dbc8:	d407      	bmi.n	800dbda <__kernel_rem_pio2+0x9a>
 800dbca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dbce:	f7f2 fc73 	bl	80004b8 <__aeabi_i2d>
 800dbd2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dbd6:	3501      	adds	r5, #1
 800dbd8:	e7df      	b.n	800db9a <__kernel_rem_pio2+0x5a>
 800dbda:	ec51 0b18 	vmov	r0, r1, d8
 800dbde:	e7f8      	b.n	800dbd2 <__kernel_rem_pio2+0x92>
 800dbe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbe4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dbe8:	f7f2 fcd0 	bl	800058c <__aeabi_dmul>
 800dbec:	4602      	mov	r2, r0
 800dbee:	460b      	mov	r3, r1
 800dbf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbf4:	f7f2 fb14 	bl	8000220 <__adddf3>
 800dbf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbfc:	3601      	adds	r6, #1
 800dbfe:	9b05      	ldr	r3, [sp, #20]
 800dc00:	429e      	cmp	r6, r3
 800dc02:	f1a7 0708 	sub.w	r7, r7, #8
 800dc06:	ddeb      	ble.n	800dbe0 <__kernel_rem_pio2+0xa0>
 800dc08:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc0c:	f108 0801 	add.w	r8, r8, #1
 800dc10:	ecab 7b02 	vstmia	fp!, {d7}
 800dc14:	3508      	adds	r5, #8
 800dc16:	e7ca      	b.n	800dbae <__kernel_rem_pio2+0x6e>
 800dc18:	9b00      	ldr	r3, [sp, #0]
 800dc1a:	aa0c      	add	r2, sp, #48	; 0x30
 800dc1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dc20:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc22:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800dc24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dc28:	9c00      	ldr	r4, [sp, #0]
 800dc2a:	930a      	str	r3, [sp, #40]	; 0x28
 800dc2c:	00e3      	lsls	r3, r4, #3
 800dc2e:	9308      	str	r3, [sp, #32]
 800dc30:	ab98      	add	r3, sp, #608	; 0x260
 800dc32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc36:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800dc3a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800dc3e:	ab70      	add	r3, sp, #448	; 0x1c0
 800dc40:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800dc44:	46c3      	mov	fp, r8
 800dc46:	46a1      	mov	r9, r4
 800dc48:	f1b9 0f00 	cmp.w	r9, #0
 800dc4c:	f1a5 0508 	sub.w	r5, r5, #8
 800dc50:	dc77      	bgt.n	800dd42 <__kernel_rem_pio2+0x202>
 800dc52:	ec47 6b10 	vmov	d0, r6, r7
 800dc56:	4650      	mov	r0, sl
 800dc58:	f7ff fdea 	bl	800d830 <scalbn>
 800dc5c:	ec57 6b10 	vmov	r6, r7, d0
 800dc60:	2200      	movs	r2, #0
 800dc62:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800dc66:	ee10 0a10 	vmov	r0, s0
 800dc6a:	4639      	mov	r1, r7
 800dc6c:	f7f2 fc8e 	bl	800058c <__aeabi_dmul>
 800dc70:	ec41 0b10 	vmov	d0, r0, r1
 800dc74:	f000 fd8c 	bl	800e790 <floor>
 800dc78:	4b7a      	ldr	r3, [pc, #488]	; (800de64 <__kernel_rem_pio2+0x324>)
 800dc7a:	ec51 0b10 	vmov	r0, r1, d0
 800dc7e:	2200      	movs	r2, #0
 800dc80:	f7f2 fc84 	bl	800058c <__aeabi_dmul>
 800dc84:	4602      	mov	r2, r0
 800dc86:	460b      	mov	r3, r1
 800dc88:	4630      	mov	r0, r6
 800dc8a:	4639      	mov	r1, r7
 800dc8c:	f7f2 fac6 	bl	800021c <__aeabi_dsub>
 800dc90:	460f      	mov	r7, r1
 800dc92:	4606      	mov	r6, r0
 800dc94:	f7f2 ff2a 	bl	8000aec <__aeabi_d2iz>
 800dc98:	9002      	str	r0, [sp, #8]
 800dc9a:	f7f2 fc0d 	bl	80004b8 <__aeabi_i2d>
 800dc9e:	4602      	mov	r2, r0
 800dca0:	460b      	mov	r3, r1
 800dca2:	4630      	mov	r0, r6
 800dca4:	4639      	mov	r1, r7
 800dca6:	f7f2 fab9 	bl	800021c <__aeabi_dsub>
 800dcaa:	f1ba 0f00 	cmp.w	sl, #0
 800dcae:	4606      	mov	r6, r0
 800dcb0:	460f      	mov	r7, r1
 800dcb2:	dd6d      	ble.n	800dd90 <__kernel_rem_pio2+0x250>
 800dcb4:	1e61      	subs	r1, r4, #1
 800dcb6:	ab0c      	add	r3, sp, #48	; 0x30
 800dcb8:	9d02      	ldr	r5, [sp, #8]
 800dcba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dcbe:	f1ca 0018 	rsb	r0, sl, #24
 800dcc2:	fa43 f200 	asr.w	r2, r3, r0
 800dcc6:	4415      	add	r5, r2
 800dcc8:	4082      	lsls	r2, r0
 800dcca:	1a9b      	subs	r3, r3, r2
 800dccc:	aa0c      	add	r2, sp, #48	; 0x30
 800dcce:	9502      	str	r5, [sp, #8]
 800dcd0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dcd4:	f1ca 0217 	rsb	r2, sl, #23
 800dcd8:	fa43 fb02 	asr.w	fp, r3, r2
 800dcdc:	f1bb 0f00 	cmp.w	fp, #0
 800dce0:	dd65      	ble.n	800ddae <__kernel_rem_pio2+0x26e>
 800dce2:	9b02      	ldr	r3, [sp, #8]
 800dce4:	2200      	movs	r2, #0
 800dce6:	3301      	adds	r3, #1
 800dce8:	9302      	str	r3, [sp, #8]
 800dcea:	4615      	mov	r5, r2
 800dcec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800dcf0:	4294      	cmp	r4, r2
 800dcf2:	f300 809f 	bgt.w	800de34 <__kernel_rem_pio2+0x2f4>
 800dcf6:	f1ba 0f00 	cmp.w	sl, #0
 800dcfa:	dd07      	ble.n	800dd0c <__kernel_rem_pio2+0x1cc>
 800dcfc:	f1ba 0f01 	cmp.w	sl, #1
 800dd00:	f000 80c1 	beq.w	800de86 <__kernel_rem_pio2+0x346>
 800dd04:	f1ba 0f02 	cmp.w	sl, #2
 800dd08:	f000 80c7 	beq.w	800de9a <__kernel_rem_pio2+0x35a>
 800dd0c:	f1bb 0f02 	cmp.w	fp, #2
 800dd10:	d14d      	bne.n	800ddae <__kernel_rem_pio2+0x26e>
 800dd12:	4632      	mov	r2, r6
 800dd14:	463b      	mov	r3, r7
 800dd16:	4954      	ldr	r1, [pc, #336]	; (800de68 <__kernel_rem_pio2+0x328>)
 800dd18:	2000      	movs	r0, #0
 800dd1a:	f7f2 fa7f 	bl	800021c <__aeabi_dsub>
 800dd1e:	4606      	mov	r6, r0
 800dd20:	460f      	mov	r7, r1
 800dd22:	2d00      	cmp	r5, #0
 800dd24:	d043      	beq.n	800ddae <__kernel_rem_pio2+0x26e>
 800dd26:	4650      	mov	r0, sl
 800dd28:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800de58 <__kernel_rem_pio2+0x318>
 800dd2c:	f7ff fd80 	bl	800d830 <scalbn>
 800dd30:	4630      	mov	r0, r6
 800dd32:	4639      	mov	r1, r7
 800dd34:	ec53 2b10 	vmov	r2, r3, d0
 800dd38:	f7f2 fa70 	bl	800021c <__aeabi_dsub>
 800dd3c:	4606      	mov	r6, r0
 800dd3e:	460f      	mov	r7, r1
 800dd40:	e035      	b.n	800ddae <__kernel_rem_pio2+0x26e>
 800dd42:	4b4a      	ldr	r3, [pc, #296]	; (800de6c <__kernel_rem_pio2+0x32c>)
 800dd44:	2200      	movs	r2, #0
 800dd46:	4630      	mov	r0, r6
 800dd48:	4639      	mov	r1, r7
 800dd4a:	f7f2 fc1f 	bl	800058c <__aeabi_dmul>
 800dd4e:	f7f2 fecd 	bl	8000aec <__aeabi_d2iz>
 800dd52:	f7f2 fbb1 	bl	80004b8 <__aeabi_i2d>
 800dd56:	4602      	mov	r2, r0
 800dd58:	460b      	mov	r3, r1
 800dd5a:	ec43 2b18 	vmov	d8, r2, r3
 800dd5e:	4b44      	ldr	r3, [pc, #272]	; (800de70 <__kernel_rem_pio2+0x330>)
 800dd60:	2200      	movs	r2, #0
 800dd62:	f7f2 fc13 	bl	800058c <__aeabi_dmul>
 800dd66:	4602      	mov	r2, r0
 800dd68:	460b      	mov	r3, r1
 800dd6a:	4630      	mov	r0, r6
 800dd6c:	4639      	mov	r1, r7
 800dd6e:	f7f2 fa55 	bl	800021c <__aeabi_dsub>
 800dd72:	f7f2 febb 	bl	8000aec <__aeabi_d2iz>
 800dd76:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dd7a:	f84b 0b04 	str.w	r0, [fp], #4
 800dd7e:	ec51 0b18 	vmov	r0, r1, d8
 800dd82:	f7f2 fa4d 	bl	8000220 <__adddf3>
 800dd86:	f109 39ff 	add.w	r9, r9, #4294967295
 800dd8a:	4606      	mov	r6, r0
 800dd8c:	460f      	mov	r7, r1
 800dd8e:	e75b      	b.n	800dc48 <__kernel_rem_pio2+0x108>
 800dd90:	d106      	bne.n	800dda0 <__kernel_rem_pio2+0x260>
 800dd92:	1e63      	subs	r3, r4, #1
 800dd94:	aa0c      	add	r2, sp, #48	; 0x30
 800dd96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd9a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800dd9e:	e79d      	b.n	800dcdc <__kernel_rem_pio2+0x19c>
 800dda0:	4b34      	ldr	r3, [pc, #208]	; (800de74 <__kernel_rem_pio2+0x334>)
 800dda2:	2200      	movs	r2, #0
 800dda4:	f7f2 fe78 	bl	8000a98 <__aeabi_dcmpge>
 800dda8:	2800      	cmp	r0, #0
 800ddaa:	d140      	bne.n	800de2e <__kernel_rem_pio2+0x2ee>
 800ddac:	4683      	mov	fp, r0
 800ddae:	2200      	movs	r2, #0
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	4639      	mov	r1, r7
 800ddb6:	f7f2 fe51 	bl	8000a5c <__aeabi_dcmpeq>
 800ddba:	2800      	cmp	r0, #0
 800ddbc:	f000 80c1 	beq.w	800df42 <__kernel_rem_pio2+0x402>
 800ddc0:	1e65      	subs	r5, r4, #1
 800ddc2:	462b      	mov	r3, r5
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	9900      	ldr	r1, [sp, #0]
 800ddc8:	428b      	cmp	r3, r1
 800ddca:	da6d      	bge.n	800dea8 <__kernel_rem_pio2+0x368>
 800ddcc:	2a00      	cmp	r2, #0
 800ddce:	f000 808a 	beq.w	800dee6 <__kernel_rem_pio2+0x3a6>
 800ddd2:	ab0c      	add	r3, sp, #48	; 0x30
 800ddd4:	f1aa 0a18 	sub.w	sl, sl, #24
 800ddd8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	f000 80ae 	beq.w	800df3e <__kernel_rem_pio2+0x3fe>
 800dde2:	4650      	mov	r0, sl
 800dde4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800de58 <__kernel_rem_pio2+0x318>
 800dde8:	f7ff fd22 	bl	800d830 <scalbn>
 800ddec:	1c6b      	adds	r3, r5, #1
 800ddee:	00da      	lsls	r2, r3, #3
 800ddf0:	9205      	str	r2, [sp, #20]
 800ddf2:	ec57 6b10 	vmov	r6, r7, d0
 800ddf6:	aa70      	add	r2, sp, #448	; 0x1c0
 800ddf8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800de6c <__kernel_rem_pio2+0x32c>
 800ddfc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800de00:	462c      	mov	r4, r5
 800de02:	f04f 0800 	mov.w	r8, #0
 800de06:	2c00      	cmp	r4, #0
 800de08:	f280 80d4 	bge.w	800dfb4 <__kernel_rem_pio2+0x474>
 800de0c:	462c      	mov	r4, r5
 800de0e:	2c00      	cmp	r4, #0
 800de10:	f2c0 8102 	blt.w	800e018 <__kernel_rem_pio2+0x4d8>
 800de14:	4b18      	ldr	r3, [pc, #96]	; (800de78 <__kernel_rem_pio2+0x338>)
 800de16:	461e      	mov	r6, r3
 800de18:	ab70      	add	r3, sp, #448	; 0x1c0
 800de1a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800de1e:	1b2b      	subs	r3, r5, r4
 800de20:	f04f 0900 	mov.w	r9, #0
 800de24:	f04f 0a00 	mov.w	sl, #0
 800de28:	2700      	movs	r7, #0
 800de2a:	9306      	str	r3, [sp, #24]
 800de2c:	e0e6      	b.n	800dffc <__kernel_rem_pio2+0x4bc>
 800de2e:	f04f 0b02 	mov.w	fp, #2
 800de32:	e756      	b.n	800dce2 <__kernel_rem_pio2+0x1a2>
 800de34:	f8d8 3000 	ldr.w	r3, [r8]
 800de38:	bb05      	cbnz	r5, 800de7c <__kernel_rem_pio2+0x33c>
 800de3a:	b123      	cbz	r3, 800de46 <__kernel_rem_pio2+0x306>
 800de3c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800de40:	f8c8 3000 	str.w	r3, [r8]
 800de44:	2301      	movs	r3, #1
 800de46:	3201      	adds	r2, #1
 800de48:	f108 0804 	add.w	r8, r8, #4
 800de4c:	461d      	mov	r5, r3
 800de4e:	e74f      	b.n	800dcf0 <__kernel_rem_pio2+0x1b0>
	...
 800de5c:	3ff00000 	.word	0x3ff00000
 800de60:	08024088 	.word	0x08024088
 800de64:	40200000 	.word	0x40200000
 800de68:	3ff00000 	.word	0x3ff00000
 800de6c:	3e700000 	.word	0x3e700000
 800de70:	41700000 	.word	0x41700000
 800de74:	3fe00000 	.word	0x3fe00000
 800de78:	08024048 	.word	0x08024048
 800de7c:	1acb      	subs	r3, r1, r3
 800de7e:	f8c8 3000 	str.w	r3, [r8]
 800de82:	462b      	mov	r3, r5
 800de84:	e7df      	b.n	800de46 <__kernel_rem_pio2+0x306>
 800de86:	1e62      	subs	r2, r4, #1
 800de88:	ab0c      	add	r3, sp, #48	; 0x30
 800de8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de8e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800de92:	a90c      	add	r1, sp, #48	; 0x30
 800de94:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800de98:	e738      	b.n	800dd0c <__kernel_rem_pio2+0x1cc>
 800de9a:	1e62      	subs	r2, r4, #1
 800de9c:	ab0c      	add	r3, sp, #48	; 0x30
 800de9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dea2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dea6:	e7f4      	b.n	800de92 <__kernel_rem_pio2+0x352>
 800dea8:	a90c      	add	r1, sp, #48	; 0x30
 800deaa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800deae:	3b01      	subs	r3, #1
 800deb0:	430a      	orrs	r2, r1
 800deb2:	e788      	b.n	800ddc6 <__kernel_rem_pio2+0x286>
 800deb4:	3301      	adds	r3, #1
 800deb6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800deba:	2900      	cmp	r1, #0
 800debc:	d0fa      	beq.n	800deb4 <__kernel_rem_pio2+0x374>
 800debe:	9a08      	ldr	r2, [sp, #32]
 800dec0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800dec4:	446a      	add	r2, sp
 800dec6:	3a98      	subs	r2, #152	; 0x98
 800dec8:	9208      	str	r2, [sp, #32]
 800deca:	9a06      	ldr	r2, [sp, #24]
 800decc:	a920      	add	r1, sp, #128	; 0x80
 800dece:	18a2      	adds	r2, r4, r2
 800ded0:	18e3      	adds	r3, r4, r3
 800ded2:	f104 0801 	add.w	r8, r4, #1
 800ded6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800deda:	9302      	str	r3, [sp, #8]
 800dedc:	9b02      	ldr	r3, [sp, #8]
 800dede:	4543      	cmp	r3, r8
 800dee0:	da04      	bge.n	800deec <__kernel_rem_pio2+0x3ac>
 800dee2:	461c      	mov	r4, r3
 800dee4:	e6a2      	b.n	800dc2c <__kernel_rem_pio2+0xec>
 800dee6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dee8:	2301      	movs	r3, #1
 800deea:	e7e4      	b.n	800deb6 <__kernel_rem_pio2+0x376>
 800deec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800def2:	f7f2 fae1 	bl	80004b8 <__aeabi_i2d>
 800def6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800defa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800defc:	46ab      	mov	fp, r5
 800defe:	461c      	mov	r4, r3
 800df00:	f04f 0900 	mov.w	r9, #0
 800df04:	2600      	movs	r6, #0
 800df06:	2700      	movs	r7, #0
 800df08:	9b05      	ldr	r3, [sp, #20]
 800df0a:	4599      	cmp	r9, r3
 800df0c:	dd06      	ble.n	800df1c <__kernel_rem_pio2+0x3dc>
 800df0e:	9b08      	ldr	r3, [sp, #32]
 800df10:	e8e3 6702 	strd	r6, r7, [r3], #8
 800df14:	f108 0801 	add.w	r8, r8, #1
 800df18:	9308      	str	r3, [sp, #32]
 800df1a:	e7df      	b.n	800dedc <__kernel_rem_pio2+0x39c>
 800df1c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800df20:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800df24:	f7f2 fb32 	bl	800058c <__aeabi_dmul>
 800df28:	4602      	mov	r2, r0
 800df2a:	460b      	mov	r3, r1
 800df2c:	4630      	mov	r0, r6
 800df2e:	4639      	mov	r1, r7
 800df30:	f7f2 f976 	bl	8000220 <__adddf3>
 800df34:	f109 0901 	add.w	r9, r9, #1
 800df38:	4606      	mov	r6, r0
 800df3a:	460f      	mov	r7, r1
 800df3c:	e7e4      	b.n	800df08 <__kernel_rem_pio2+0x3c8>
 800df3e:	3d01      	subs	r5, #1
 800df40:	e747      	b.n	800ddd2 <__kernel_rem_pio2+0x292>
 800df42:	ec47 6b10 	vmov	d0, r6, r7
 800df46:	f1ca 0000 	rsb	r0, sl, #0
 800df4a:	f7ff fc71 	bl	800d830 <scalbn>
 800df4e:	ec57 6b10 	vmov	r6, r7, d0
 800df52:	4ba0      	ldr	r3, [pc, #640]	; (800e1d4 <__kernel_rem_pio2+0x694>)
 800df54:	ee10 0a10 	vmov	r0, s0
 800df58:	2200      	movs	r2, #0
 800df5a:	4639      	mov	r1, r7
 800df5c:	f7f2 fd9c 	bl	8000a98 <__aeabi_dcmpge>
 800df60:	b1f8      	cbz	r0, 800dfa2 <__kernel_rem_pio2+0x462>
 800df62:	4b9d      	ldr	r3, [pc, #628]	; (800e1d8 <__kernel_rem_pio2+0x698>)
 800df64:	2200      	movs	r2, #0
 800df66:	4630      	mov	r0, r6
 800df68:	4639      	mov	r1, r7
 800df6a:	f7f2 fb0f 	bl	800058c <__aeabi_dmul>
 800df6e:	f7f2 fdbd 	bl	8000aec <__aeabi_d2iz>
 800df72:	4680      	mov	r8, r0
 800df74:	f7f2 faa0 	bl	80004b8 <__aeabi_i2d>
 800df78:	4b96      	ldr	r3, [pc, #600]	; (800e1d4 <__kernel_rem_pio2+0x694>)
 800df7a:	2200      	movs	r2, #0
 800df7c:	f7f2 fb06 	bl	800058c <__aeabi_dmul>
 800df80:	460b      	mov	r3, r1
 800df82:	4602      	mov	r2, r0
 800df84:	4639      	mov	r1, r7
 800df86:	4630      	mov	r0, r6
 800df88:	f7f2 f948 	bl	800021c <__aeabi_dsub>
 800df8c:	f7f2 fdae 	bl	8000aec <__aeabi_d2iz>
 800df90:	1c65      	adds	r5, r4, #1
 800df92:	ab0c      	add	r3, sp, #48	; 0x30
 800df94:	f10a 0a18 	add.w	sl, sl, #24
 800df98:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800df9c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800dfa0:	e71f      	b.n	800dde2 <__kernel_rem_pio2+0x2a2>
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	4639      	mov	r1, r7
 800dfa6:	f7f2 fda1 	bl	8000aec <__aeabi_d2iz>
 800dfaa:	ab0c      	add	r3, sp, #48	; 0x30
 800dfac:	4625      	mov	r5, r4
 800dfae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dfb2:	e716      	b.n	800dde2 <__kernel_rem_pio2+0x2a2>
 800dfb4:	ab0c      	add	r3, sp, #48	; 0x30
 800dfb6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800dfba:	f7f2 fa7d 	bl	80004b8 <__aeabi_i2d>
 800dfbe:	4632      	mov	r2, r6
 800dfc0:	463b      	mov	r3, r7
 800dfc2:	f7f2 fae3 	bl	800058c <__aeabi_dmul>
 800dfc6:	4642      	mov	r2, r8
 800dfc8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800dfcc:	464b      	mov	r3, r9
 800dfce:	4630      	mov	r0, r6
 800dfd0:	4639      	mov	r1, r7
 800dfd2:	f7f2 fadb 	bl	800058c <__aeabi_dmul>
 800dfd6:	3c01      	subs	r4, #1
 800dfd8:	4606      	mov	r6, r0
 800dfda:	460f      	mov	r7, r1
 800dfdc:	e713      	b.n	800de06 <__kernel_rem_pio2+0x2c6>
 800dfde:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800dfe2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800dfe6:	f7f2 fad1 	bl	800058c <__aeabi_dmul>
 800dfea:	4602      	mov	r2, r0
 800dfec:	460b      	mov	r3, r1
 800dfee:	4648      	mov	r0, r9
 800dff0:	4651      	mov	r1, sl
 800dff2:	f7f2 f915 	bl	8000220 <__adddf3>
 800dff6:	3701      	adds	r7, #1
 800dff8:	4681      	mov	r9, r0
 800dffa:	468a      	mov	sl, r1
 800dffc:	9b00      	ldr	r3, [sp, #0]
 800dffe:	429f      	cmp	r7, r3
 800e000:	dc02      	bgt.n	800e008 <__kernel_rem_pio2+0x4c8>
 800e002:	9b06      	ldr	r3, [sp, #24]
 800e004:	429f      	cmp	r7, r3
 800e006:	ddea      	ble.n	800dfde <__kernel_rem_pio2+0x49e>
 800e008:	9a06      	ldr	r2, [sp, #24]
 800e00a:	ab48      	add	r3, sp, #288	; 0x120
 800e00c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800e010:	e9c6 9a00 	strd	r9, sl, [r6]
 800e014:	3c01      	subs	r4, #1
 800e016:	e6fa      	b.n	800de0e <__kernel_rem_pio2+0x2ce>
 800e018:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e01a:	2b02      	cmp	r3, #2
 800e01c:	dc0b      	bgt.n	800e036 <__kernel_rem_pio2+0x4f6>
 800e01e:	2b00      	cmp	r3, #0
 800e020:	dc39      	bgt.n	800e096 <__kernel_rem_pio2+0x556>
 800e022:	d05d      	beq.n	800e0e0 <__kernel_rem_pio2+0x5a0>
 800e024:	9b02      	ldr	r3, [sp, #8]
 800e026:	f003 0007 	and.w	r0, r3, #7
 800e02a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e02e:	ecbd 8b02 	vpop	{d8}
 800e032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e036:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e038:	2b03      	cmp	r3, #3
 800e03a:	d1f3      	bne.n	800e024 <__kernel_rem_pio2+0x4e4>
 800e03c:	9b05      	ldr	r3, [sp, #20]
 800e03e:	9500      	str	r5, [sp, #0]
 800e040:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800e044:	eb0d 0403 	add.w	r4, sp, r3
 800e048:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800e04c:	46a2      	mov	sl, r4
 800e04e:	9b00      	ldr	r3, [sp, #0]
 800e050:	2b00      	cmp	r3, #0
 800e052:	f1aa 0a08 	sub.w	sl, sl, #8
 800e056:	dc69      	bgt.n	800e12c <__kernel_rem_pio2+0x5ec>
 800e058:	46aa      	mov	sl, r5
 800e05a:	f1ba 0f01 	cmp.w	sl, #1
 800e05e:	f1a4 0408 	sub.w	r4, r4, #8
 800e062:	f300 8083 	bgt.w	800e16c <__kernel_rem_pio2+0x62c>
 800e066:	9c05      	ldr	r4, [sp, #20]
 800e068:	ab48      	add	r3, sp, #288	; 0x120
 800e06a:	441c      	add	r4, r3
 800e06c:	2000      	movs	r0, #0
 800e06e:	2100      	movs	r1, #0
 800e070:	2d01      	cmp	r5, #1
 800e072:	f300 809a 	bgt.w	800e1aa <__kernel_rem_pio2+0x66a>
 800e076:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800e07a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e07e:	f1bb 0f00 	cmp.w	fp, #0
 800e082:	f040 8098 	bne.w	800e1b6 <__kernel_rem_pio2+0x676>
 800e086:	9b04      	ldr	r3, [sp, #16]
 800e088:	e9c3 7800 	strd	r7, r8, [r3]
 800e08c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e090:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e094:	e7c6      	b.n	800e024 <__kernel_rem_pio2+0x4e4>
 800e096:	9e05      	ldr	r6, [sp, #20]
 800e098:	ab48      	add	r3, sp, #288	; 0x120
 800e09a:	441e      	add	r6, r3
 800e09c:	462c      	mov	r4, r5
 800e09e:	2000      	movs	r0, #0
 800e0a0:	2100      	movs	r1, #0
 800e0a2:	2c00      	cmp	r4, #0
 800e0a4:	da33      	bge.n	800e10e <__kernel_rem_pio2+0x5ce>
 800e0a6:	f1bb 0f00 	cmp.w	fp, #0
 800e0aa:	d036      	beq.n	800e11a <__kernel_rem_pio2+0x5da>
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0b2:	9c04      	ldr	r4, [sp, #16]
 800e0b4:	e9c4 2300 	strd	r2, r3, [r4]
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e0c0:	f7f2 f8ac 	bl	800021c <__aeabi_dsub>
 800e0c4:	ae4a      	add	r6, sp, #296	; 0x128
 800e0c6:	2401      	movs	r4, #1
 800e0c8:	42a5      	cmp	r5, r4
 800e0ca:	da29      	bge.n	800e120 <__kernel_rem_pio2+0x5e0>
 800e0cc:	f1bb 0f00 	cmp.w	fp, #0
 800e0d0:	d002      	beq.n	800e0d8 <__kernel_rem_pio2+0x598>
 800e0d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	9b04      	ldr	r3, [sp, #16]
 800e0da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e0de:	e7a1      	b.n	800e024 <__kernel_rem_pio2+0x4e4>
 800e0e0:	9c05      	ldr	r4, [sp, #20]
 800e0e2:	ab48      	add	r3, sp, #288	; 0x120
 800e0e4:	441c      	add	r4, r3
 800e0e6:	2000      	movs	r0, #0
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	2d00      	cmp	r5, #0
 800e0ec:	da09      	bge.n	800e102 <__kernel_rem_pio2+0x5c2>
 800e0ee:	f1bb 0f00 	cmp.w	fp, #0
 800e0f2:	d002      	beq.n	800e0fa <__kernel_rem_pio2+0x5ba>
 800e0f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	9b04      	ldr	r3, [sp, #16]
 800e0fc:	e9c3 0100 	strd	r0, r1, [r3]
 800e100:	e790      	b.n	800e024 <__kernel_rem_pio2+0x4e4>
 800e102:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e106:	f7f2 f88b 	bl	8000220 <__adddf3>
 800e10a:	3d01      	subs	r5, #1
 800e10c:	e7ed      	b.n	800e0ea <__kernel_rem_pio2+0x5aa>
 800e10e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e112:	f7f2 f885 	bl	8000220 <__adddf3>
 800e116:	3c01      	subs	r4, #1
 800e118:	e7c3      	b.n	800e0a2 <__kernel_rem_pio2+0x562>
 800e11a:	4602      	mov	r2, r0
 800e11c:	460b      	mov	r3, r1
 800e11e:	e7c8      	b.n	800e0b2 <__kernel_rem_pio2+0x572>
 800e120:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e124:	f7f2 f87c 	bl	8000220 <__adddf3>
 800e128:	3401      	adds	r4, #1
 800e12a:	e7cd      	b.n	800e0c8 <__kernel_rem_pio2+0x588>
 800e12c:	e9da 8900 	ldrd	r8, r9, [sl]
 800e130:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e134:	9b00      	ldr	r3, [sp, #0]
 800e136:	3b01      	subs	r3, #1
 800e138:	9300      	str	r3, [sp, #0]
 800e13a:	4632      	mov	r2, r6
 800e13c:	463b      	mov	r3, r7
 800e13e:	4640      	mov	r0, r8
 800e140:	4649      	mov	r1, r9
 800e142:	f7f2 f86d 	bl	8000220 <__adddf3>
 800e146:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e14a:	4602      	mov	r2, r0
 800e14c:	460b      	mov	r3, r1
 800e14e:	4640      	mov	r0, r8
 800e150:	4649      	mov	r1, r9
 800e152:	f7f2 f863 	bl	800021c <__aeabi_dsub>
 800e156:	4632      	mov	r2, r6
 800e158:	463b      	mov	r3, r7
 800e15a:	f7f2 f861 	bl	8000220 <__adddf3>
 800e15e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e162:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e166:	ed8a 7b00 	vstr	d7, [sl]
 800e16a:	e770      	b.n	800e04e <__kernel_rem_pio2+0x50e>
 800e16c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e170:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e174:	4640      	mov	r0, r8
 800e176:	4632      	mov	r2, r6
 800e178:	463b      	mov	r3, r7
 800e17a:	4649      	mov	r1, r9
 800e17c:	f7f2 f850 	bl	8000220 <__adddf3>
 800e180:	e9cd 0100 	strd	r0, r1, [sp]
 800e184:	4602      	mov	r2, r0
 800e186:	460b      	mov	r3, r1
 800e188:	4640      	mov	r0, r8
 800e18a:	4649      	mov	r1, r9
 800e18c:	f7f2 f846 	bl	800021c <__aeabi_dsub>
 800e190:	4632      	mov	r2, r6
 800e192:	463b      	mov	r3, r7
 800e194:	f7f2 f844 	bl	8000220 <__adddf3>
 800e198:	ed9d 7b00 	vldr	d7, [sp]
 800e19c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e1a0:	ed84 7b00 	vstr	d7, [r4]
 800e1a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e1a8:	e757      	b.n	800e05a <__kernel_rem_pio2+0x51a>
 800e1aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e1ae:	f7f2 f837 	bl	8000220 <__adddf3>
 800e1b2:	3d01      	subs	r5, #1
 800e1b4:	e75c      	b.n	800e070 <__kernel_rem_pio2+0x530>
 800e1b6:	9b04      	ldr	r3, [sp, #16]
 800e1b8:	9a04      	ldr	r2, [sp, #16]
 800e1ba:	601f      	str	r7, [r3, #0]
 800e1bc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e1c0:	605c      	str	r4, [r3, #4]
 800e1c2:	609d      	str	r5, [r3, #8]
 800e1c4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e1c8:	60d3      	str	r3, [r2, #12]
 800e1ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1ce:	6110      	str	r0, [r2, #16]
 800e1d0:	6153      	str	r3, [r2, #20]
 800e1d2:	e727      	b.n	800e024 <__kernel_rem_pio2+0x4e4>
 800e1d4:	41700000 	.word	0x41700000
 800e1d8:	3e700000 	.word	0x3e700000

0800e1dc <__kernel_rem_pio2f>:
 800e1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e0:	ed2d 8b04 	vpush	{d8-d9}
 800e1e4:	b0d9      	sub	sp, #356	; 0x164
 800e1e6:	4688      	mov	r8, r1
 800e1e8:	9002      	str	r0, [sp, #8]
 800e1ea:	49b8      	ldr	r1, [pc, #736]	; (800e4cc <__kernel_rem_pio2f+0x2f0>)
 800e1ec:	9866      	ldr	r0, [sp, #408]	; 0x198
 800e1ee:	9301      	str	r3, [sp, #4]
 800e1f0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800e1f4:	9901      	ldr	r1, [sp, #4]
 800e1f6:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800e1f8:	f101 3bff 	add.w	fp, r1, #4294967295
 800e1fc:	1d11      	adds	r1, r2, #4
 800e1fe:	db25      	blt.n	800e24c <__kernel_rem_pio2f+0x70>
 800e200:	1ed0      	subs	r0, r2, #3
 800e202:	bf48      	it	mi
 800e204:	1d10      	addmi	r0, r2, #4
 800e206:	10c0      	asrs	r0, r0, #3
 800e208:	1c45      	adds	r5, r0, #1
 800e20a:	00e9      	lsls	r1, r5, #3
 800e20c:	eba0 070b 	sub.w	r7, r0, fp
 800e210:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800e4dc <__kernel_rem_pio2f+0x300>
 800e214:	9103      	str	r1, [sp, #12]
 800e216:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800e21a:	eb0a 0c0b 	add.w	ip, sl, fp
 800e21e:	ae1c      	add	r6, sp, #112	; 0x70
 800e220:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800e224:	2400      	movs	r4, #0
 800e226:	4564      	cmp	r4, ip
 800e228:	dd12      	ble.n	800e250 <__kernel_rem_pio2f+0x74>
 800e22a:	9901      	ldr	r1, [sp, #4]
 800e22c:	ac1c      	add	r4, sp, #112	; 0x70
 800e22e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800e232:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800e236:	f04f 0c00 	mov.w	ip, #0
 800e23a:	45d4      	cmp	ip, sl
 800e23c:	dc27      	bgt.n	800e28e <__kernel_rem_pio2f+0xb2>
 800e23e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e242:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800e4dc <__kernel_rem_pio2f+0x300>
 800e246:	4627      	mov	r7, r4
 800e248:	2600      	movs	r6, #0
 800e24a:	e016      	b.n	800e27a <__kernel_rem_pio2f+0x9e>
 800e24c:	2000      	movs	r0, #0
 800e24e:	e7db      	b.n	800e208 <__kernel_rem_pio2f+0x2c>
 800e250:	42e7      	cmn	r7, r4
 800e252:	bf5d      	ittte	pl
 800e254:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800e258:	ee07 1a90 	vmovpl	s15, r1
 800e25c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e260:	eef0 7a47 	vmovmi.f32	s15, s14
 800e264:	ece6 7a01 	vstmia	r6!, {s15}
 800e268:	3401      	adds	r4, #1
 800e26a:	e7dc      	b.n	800e226 <__kernel_rem_pio2f+0x4a>
 800e26c:	ecfe 6a01 	vldmia	lr!, {s13}
 800e270:	ed97 7a00 	vldr	s14, [r7]
 800e274:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e278:	3601      	adds	r6, #1
 800e27a:	455e      	cmp	r6, fp
 800e27c:	f1a7 0704 	sub.w	r7, r7, #4
 800e280:	ddf4      	ble.n	800e26c <__kernel_rem_pio2f+0x90>
 800e282:	ece9 7a01 	vstmia	r9!, {s15}
 800e286:	f10c 0c01 	add.w	ip, ip, #1
 800e28a:	3404      	adds	r4, #4
 800e28c:	e7d5      	b.n	800e23a <__kernel_rem_pio2f+0x5e>
 800e28e:	a908      	add	r1, sp, #32
 800e290:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e294:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800e298:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800e4d8 <__kernel_rem_pio2f+0x2fc>
 800e29c:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800e4d4 <__kernel_rem_pio2f+0x2f8>
 800e2a0:	9105      	str	r1, [sp, #20]
 800e2a2:	9304      	str	r3, [sp, #16]
 800e2a4:	4656      	mov	r6, sl
 800e2a6:	00b3      	lsls	r3, r6, #2
 800e2a8:	9306      	str	r3, [sp, #24]
 800e2aa:	ab58      	add	r3, sp, #352	; 0x160
 800e2ac:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800e2b0:	ac08      	add	r4, sp, #32
 800e2b2:	ab44      	add	r3, sp, #272	; 0x110
 800e2b4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800e2b8:	46a4      	mov	ip, r4
 800e2ba:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800e2be:	4637      	mov	r7, r6
 800e2c0:	2f00      	cmp	r7, #0
 800e2c2:	f1a0 0004 	sub.w	r0, r0, #4
 800e2c6:	dc4a      	bgt.n	800e35e <__kernel_rem_pio2f+0x182>
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	9207      	str	r2, [sp, #28]
 800e2cc:	f000 f9f8 	bl	800e6c0 <scalbnf>
 800e2d0:	eeb0 8a40 	vmov.f32	s16, s0
 800e2d4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800e2d8:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e2dc:	f000 fad8 	bl	800e890 <floorf>
 800e2e0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800e2e4:	eea0 8a67 	vfms.f32	s16, s0, s15
 800e2e8:	2d00      	cmp	r5, #0
 800e2ea:	9a07      	ldr	r2, [sp, #28]
 800e2ec:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e2f0:	ee17 9a90 	vmov	r9, s15
 800e2f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e2f8:	ee38 8a67 	vsub.f32	s16, s16, s15
 800e2fc:	dd41      	ble.n	800e382 <__kernel_rem_pio2f+0x1a6>
 800e2fe:	f106 3cff 	add.w	ip, r6, #4294967295
 800e302:	ab08      	add	r3, sp, #32
 800e304:	f1c5 0e08 	rsb	lr, r5, #8
 800e308:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800e30c:	fa47 f00e 	asr.w	r0, r7, lr
 800e310:	4481      	add	r9, r0
 800e312:	fa00 f00e 	lsl.w	r0, r0, lr
 800e316:	1a3f      	subs	r7, r7, r0
 800e318:	f1c5 0007 	rsb	r0, r5, #7
 800e31c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800e320:	4107      	asrs	r7, r0
 800e322:	2f00      	cmp	r7, #0
 800e324:	dd3c      	ble.n	800e3a0 <__kernel_rem_pio2f+0x1c4>
 800e326:	f04f 0e00 	mov.w	lr, #0
 800e32a:	f109 0901 	add.w	r9, r9, #1
 800e32e:	4671      	mov	r1, lr
 800e330:	4576      	cmp	r6, lr
 800e332:	dc67      	bgt.n	800e404 <__kernel_rem_pio2f+0x228>
 800e334:	2d00      	cmp	r5, #0
 800e336:	dd03      	ble.n	800e340 <__kernel_rem_pio2f+0x164>
 800e338:	2d01      	cmp	r5, #1
 800e33a:	d074      	beq.n	800e426 <__kernel_rem_pio2f+0x24a>
 800e33c:	2d02      	cmp	r5, #2
 800e33e:	d07b      	beq.n	800e438 <__kernel_rem_pio2f+0x25c>
 800e340:	2f02      	cmp	r7, #2
 800e342:	d12d      	bne.n	800e3a0 <__kernel_rem_pio2f+0x1c4>
 800e344:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e348:	ee30 8a48 	vsub.f32	s16, s0, s16
 800e34c:	b341      	cbz	r1, 800e3a0 <__kernel_rem_pio2f+0x1c4>
 800e34e:	4628      	mov	r0, r5
 800e350:	9207      	str	r2, [sp, #28]
 800e352:	f000 f9b5 	bl	800e6c0 <scalbnf>
 800e356:	9a07      	ldr	r2, [sp, #28]
 800e358:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e35c:	e020      	b.n	800e3a0 <__kernel_rem_pio2f+0x1c4>
 800e35e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800e362:	3f01      	subs	r7, #1
 800e364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e36c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800e370:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e374:	ecac 0a01 	vstmia	ip!, {s0}
 800e378:	ed90 0a00 	vldr	s0, [r0]
 800e37c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e380:	e79e      	b.n	800e2c0 <__kernel_rem_pio2f+0xe4>
 800e382:	d105      	bne.n	800e390 <__kernel_rem_pio2f+0x1b4>
 800e384:	1e70      	subs	r0, r6, #1
 800e386:	ab08      	add	r3, sp, #32
 800e388:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800e38c:	11ff      	asrs	r7, r7, #7
 800e38e:	e7c8      	b.n	800e322 <__kernel_rem_pio2f+0x146>
 800e390:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e394:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e39c:	da30      	bge.n	800e400 <__kernel_rem_pio2f+0x224>
 800e39e:	2700      	movs	r7, #0
 800e3a0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e3a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3a8:	f040 809a 	bne.w	800e4e0 <__kernel_rem_pio2f+0x304>
 800e3ac:	1e74      	subs	r4, r6, #1
 800e3ae:	46a4      	mov	ip, r4
 800e3b0:	2100      	movs	r1, #0
 800e3b2:	45d4      	cmp	ip, sl
 800e3b4:	da47      	bge.n	800e446 <__kernel_rem_pio2f+0x26a>
 800e3b6:	2900      	cmp	r1, #0
 800e3b8:	d063      	beq.n	800e482 <__kernel_rem_pio2f+0x2a6>
 800e3ba:	ab08      	add	r3, sp, #32
 800e3bc:	3d08      	subs	r5, #8
 800e3be:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d07f      	beq.n	800e4c6 <__kernel_rem_pio2f+0x2ea>
 800e3c6:	4628      	mov	r0, r5
 800e3c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e3cc:	f000 f978 	bl	800e6c0 <scalbnf>
 800e3d0:	1c63      	adds	r3, r4, #1
 800e3d2:	aa44      	add	r2, sp, #272	; 0x110
 800e3d4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800e4d8 <__kernel_rem_pio2f+0x2fc>
 800e3d8:	0099      	lsls	r1, r3, #2
 800e3da:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e3de:	4623      	mov	r3, r4
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f280 80ad 	bge.w	800e540 <__kernel_rem_pio2f+0x364>
 800e3e6:	4623      	mov	r3, r4
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	f2c0 80cb 	blt.w	800e584 <__kernel_rem_pio2f+0x3a8>
 800e3ee:	aa44      	add	r2, sp, #272	; 0x110
 800e3f0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800e3f4:	4e36      	ldr	r6, [pc, #216]	; (800e4d0 <__kernel_rem_pio2f+0x2f4>)
 800e3f6:	eddf 7a39 	vldr	s15, [pc, #228]	; 800e4dc <__kernel_rem_pio2f+0x300>
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	1ae2      	subs	r2, r4, r3
 800e3fe:	e0b6      	b.n	800e56e <__kernel_rem_pio2f+0x392>
 800e400:	2702      	movs	r7, #2
 800e402:	e790      	b.n	800e326 <__kernel_rem_pio2f+0x14a>
 800e404:	6820      	ldr	r0, [r4, #0]
 800e406:	b949      	cbnz	r1, 800e41c <__kernel_rem_pio2f+0x240>
 800e408:	b118      	cbz	r0, 800e412 <__kernel_rem_pio2f+0x236>
 800e40a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800e40e:	6020      	str	r0, [r4, #0]
 800e410:	2001      	movs	r0, #1
 800e412:	f10e 0e01 	add.w	lr, lr, #1
 800e416:	3404      	adds	r4, #4
 800e418:	4601      	mov	r1, r0
 800e41a:	e789      	b.n	800e330 <__kernel_rem_pio2f+0x154>
 800e41c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800e420:	6020      	str	r0, [r4, #0]
 800e422:	4608      	mov	r0, r1
 800e424:	e7f5      	b.n	800e412 <__kernel_rem_pio2f+0x236>
 800e426:	1e74      	subs	r4, r6, #1
 800e428:	ab08      	add	r3, sp, #32
 800e42a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e42e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e432:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e436:	e783      	b.n	800e340 <__kernel_rem_pio2f+0x164>
 800e438:	1e74      	subs	r4, r6, #1
 800e43a:	ab08      	add	r3, sp, #32
 800e43c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e440:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800e444:	e7f5      	b.n	800e432 <__kernel_rem_pio2f+0x256>
 800e446:	ab08      	add	r3, sp, #32
 800e448:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800e44c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e450:	4301      	orrs	r1, r0
 800e452:	e7ae      	b.n	800e3b2 <__kernel_rem_pio2f+0x1d6>
 800e454:	3001      	adds	r0, #1
 800e456:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800e45a:	2f00      	cmp	r7, #0
 800e45c:	d0fa      	beq.n	800e454 <__kernel_rem_pio2f+0x278>
 800e45e:	9b06      	ldr	r3, [sp, #24]
 800e460:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800e464:	eb0d 0403 	add.w	r4, sp, r3
 800e468:	9b01      	ldr	r3, [sp, #4]
 800e46a:	18f7      	adds	r7, r6, r3
 800e46c:	ab1c      	add	r3, sp, #112	; 0x70
 800e46e:	f106 0c01 	add.w	ip, r6, #1
 800e472:	3c4c      	subs	r4, #76	; 0x4c
 800e474:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e478:	4430      	add	r0, r6
 800e47a:	4560      	cmp	r0, ip
 800e47c:	da04      	bge.n	800e488 <__kernel_rem_pio2f+0x2ac>
 800e47e:	4606      	mov	r6, r0
 800e480:	e711      	b.n	800e2a6 <__kernel_rem_pio2f+0xca>
 800e482:	9c05      	ldr	r4, [sp, #20]
 800e484:	2001      	movs	r0, #1
 800e486:	e7e6      	b.n	800e456 <__kernel_rem_pio2f+0x27a>
 800e488:	9b04      	ldr	r3, [sp, #16]
 800e48a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e48e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800e492:	9306      	str	r3, [sp, #24]
 800e494:	ee07 3a90 	vmov	s15, r3
 800e498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e49c:	2600      	movs	r6, #0
 800e49e:	ece7 7a01 	vstmia	r7!, {s15}
 800e4a2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800e4dc <__kernel_rem_pio2f+0x300>
 800e4a6:	46b9      	mov	r9, r7
 800e4a8:	455e      	cmp	r6, fp
 800e4aa:	dd04      	ble.n	800e4b6 <__kernel_rem_pio2f+0x2da>
 800e4ac:	ece4 7a01 	vstmia	r4!, {s15}
 800e4b0:	f10c 0c01 	add.w	ip, ip, #1
 800e4b4:	e7e1      	b.n	800e47a <__kernel_rem_pio2f+0x29e>
 800e4b6:	ecfe 6a01 	vldmia	lr!, {s13}
 800e4ba:	ed39 7a01 	vldmdb	r9!, {s14}
 800e4be:	3601      	adds	r6, #1
 800e4c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e4c4:	e7f0      	b.n	800e4a8 <__kernel_rem_pio2f+0x2cc>
 800e4c6:	3c01      	subs	r4, #1
 800e4c8:	e777      	b.n	800e3ba <__kernel_rem_pio2f+0x1de>
 800e4ca:	bf00      	nop
 800e4cc:	080240c4 	.word	0x080240c4
 800e4d0:	08024098 	.word	0x08024098
 800e4d4:	43800000 	.word	0x43800000
 800e4d8:	3b800000 	.word	0x3b800000
 800e4dc:	00000000 	.word	0x00000000
 800e4e0:	9b03      	ldr	r3, [sp, #12]
 800e4e2:	eeb0 0a48 	vmov.f32	s0, s16
 800e4e6:	1a98      	subs	r0, r3, r2
 800e4e8:	f000 f8ea 	bl	800e6c0 <scalbnf>
 800e4ec:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800e4d4 <__kernel_rem_pio2f+0x2f8>
 800e4f0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4f8:	db19      	blt.n	800e52e <__kernel_rem_pio2f+0x352>
 800e4fa:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800e4d8 <__kernel_rem_pio2f+0x2fc>
 800e4fe:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e502:	aa08      	add	r2, sp, #32
 800e504:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e508:	1c74      	adds	r4, r6, #1
 800e50a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e50e:	3508      	adds	r5, #8
 800e510:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e514:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e518:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e51c:	ee10 3a10 	vmov	r3, s0
 800e520:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e524:	ee17 3a90 	vmov	r3, s15
 800e528:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e52c:	e74b      	b.n	800e3c6 <__kernel_rem_pio2f+0x1ea>
 800e52e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e532:	aa08      	add	r2, sp, #32
 800e534:	ee10 3a10 	vmov	r3, s0
 800e538:	4634      	mov	r4, r6
 800e53a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e53e:	e742      	b.n	800e3c6 <__kernel_rem_pio2f+0x1ea>
 800e540:	a808      	add	r0, sp, #32
 800e542:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800e546:	9001      	str	r0, [sp, #4]
 800e548:	ee07 0a90 	vmov	s15, r0
 800e54c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e550:	3b01      	subs	r3, #1
 800e552:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e556:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e55a:	ed62 7a01 	vstmdb	r2!, {s15}
 800e55e:	e73f      	b.n	800e3e0 <__kernel_rem_pio2f+0x204>
 800e560:	ecf6 6a01 	vldmia	r6!, {s13}
 800e564:	ecb5 7a01 	vldmia	r5!, {s14}
 800e568:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e56c:	3001      	adds	r0, #1
 800e56e:	4550      	cmp	r0, sl
 800e570:	dc01      	bgt.n	800e576 <__kernel_rem_pio2f+0x39a>
 800e572:	4290      	cmp	r0, r2
 800e574:	ddf4      	ble.n	800e560 <__kernel_rem_pio2f+0x384>
 800e576:	a858      	add	r0, sp, #352	; 0x160
 800e578:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e57c:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800e580:	3b01      	subs	r3, #1
 800e582:	e731      	b.n	800e3e8 <__kernel_rem_pio2f+0x20c>
 800e584:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800e586:	2b02      	cmp	r3, #2
 800e588:	dc09      	bgt.n	800e59e <__kernel_rem_pio2f+0x3c2>
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	dc2b      	bgt.n	800e5e6 <__kernel_rem_pio2f+0x40a>
 800e58e:	d044      	beq.n	800e61a <__kernel_rem_pio2f+0x43e>
 800e590:	f009 0007 	and.w	r0, r9, #7
 800e594:	b059      	add	sp, #356	; 0x164
 800e596:	ecbd 8b04 	vpop	{d8-d9}
 800e59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e59e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800e5a0:	2b03      	cmp	r3, #3
 800e5a2:	d1f5      	bne.n	800e590 <__kernel_rem_pio2f+0x3b4>
 800e5a4:	aa30      	add	r2, sp, #192	; 0xc0
 800e5a6:	1f0b      	subs	r3, r1, #4
 800e5a8:	4413      	add	r3, r2
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	4620      	mov	r0, r4
 800e5ae:	2800      	cmp	r0, #0
 800e5b0:	f1a2 0204 	sub.w	r2, r2, #4
 800e5b4:	dc52      	bgt.n	800e65c <__kernel_rem_pio2f+0x480>
 800e5b6:	4622      	mov	r2, r4
 800e5b8:	2a01      	cmp	r2, #1
 800e5ba:	f1a3 0304 	sub.w	r3, r3, #4
 800e5be:	dc5d      	bgt.n	800e67c <__kernel_rem_pio2f+0x4a0>
 800e5c0:	ab30      	add	r3, sp, #192	; 0xc0
 800e5c2:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800e4dc <__kernel_rem_pio2f+0x300>
 800e5c6:	440b      	add	r3, r1
 800e5c8:	2c01      	cmp	r4, #1
 800e5ca:	dc67      	bgt.n	800e69c <__kernel_rem_pio2f+0x4c0>
 800e5cc:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800e5d0:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800e5d4:	2f00      	cmp	r7, #0
 800e5d6:	d167      	bne.n	800e6a8 <__kernel_rem_pio2f+0x4cc>
 800e5d8:	edc8 6a00 	vstr	s13, [r8]
 800e5dc:	ed88 7a01 	vstr	s14, [r8, #4]
 800e5e0:	edc8 7a02 	vstr	s15, [r8, #8]
 800e5e4:	e7d4      	b.n	800e590 <__kernel_rem_pio2f+0x3b4>
 800e5e6:	ab30      	add	r3, sp, #192	; 0xc0
 800e5e8:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800e4dc <__kernel_rem_pio2f+0x300>
 800e5ec:	440b      	add	r3, r1
 800e5ee:	4622      	mov	r2, r4
 800e5f0:	2a00      	cmp	r2, #0
 800e5f2:	da24      	bge.n	800e63e <__kernel_rem_pio2f+0x462>
 800e5f4:	b34f      	cbz	r7, 800e64a <__kernel_rem_pio2f+0x46e>
 800e5f6:	eef1 7a47 	vneg.f32	s15, s14
 800e5fa:	edc8 7a00 	vstr	s15, [r8]
 800e5fe:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800e602:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e606:	aa31      	add	r2, sp, #196	; 0xc4
 800e608:	2301      	movs	r3, #1
 800e60a:	429c      	cmp	r4, r3
 800e60c:	da20      	bge.n	800e650 <__kernel_rem_pio2f+0x474>
 800e60e:	b10f      	cbz	r7, 800e614 <__kernel_rem_pio2f+0x438>
 800e610:	eef1 7a67 	vneg.f32	s15, s15
 800e614:	edc8 7a01 	vstr	s15, [r8, #4]
 800e618:	e7ba      	b.n	800e590 <__kernel_rem_pio2f+0x3b4>
 800e61a:	ab30      	add	r3, sp, #192	; 0xc0
 800e61c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800e4dc <__kernel_rem_pio2f+0x300>
 800e620:	440b      	add	r3, r1
 800e622:	2c00      	cmp	r4, #0
 800e624:	da05      	bge.n	800e632 <__kernel_rem_pio2f+0x456>
 800e626:	b10f      	cbz	r7, 800e62c <__kernel_rem_pio2f+0x450>
 800e628:	eef1 7a67 	vneg.f32	s15, s15
 800e62c:	edc8 7a00 	vstr	s15, [r8]
 800e630:	e7ae      	b.n	800e590 <__kernel_rem_pio2f+0x3b4>
 800e632:	ed33 7a01 	vldmdb	r3!, {s14}
 800e636:	3c01      	subs	r4, #1
 800e638:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e63c:	e7f1      	b.n	800e622 <__kernel_rem_pio2f+0x446>
 800e63e:	ed73 7a01 	vldmdb	r3!, {s15}
 800e642:	3a01      	subs	r2, #1
 800e644:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e648:	e7d2      	b.n	800e5f0 <__kernel_rem_pio2f+0x414>
 800e64a:	eef0 7a47 	vmov.f32	s15, s14
 800e64e:	e7d4      	b.n	800e5fa <__kernel_rem_pio2f+0x41e>
 800e650:	ecb2 7a01 	vldmia	r2!, {s14}
 800e654:	3301      	adds	r3, #1
 800e656:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e65a:	e7d6      	b.n	800e60a <__kernel_rem_pio2f+0x42e>
 800e65c:	edd2 7a00 	vldr	s15, [r2]
 800e660:	edd2 6a01 	vldr	s13, [r2, #4]
 800e664:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e668:	3801      	subs	r0, #1
 800e66a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e66e:	ed82 7a00 	vstr	s14, [r2]
 800e672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e676:	edc2 7a01 	vstr	s15, [r2, #4]
 800e67a:	e798      	b.n	800e5ae <__kernel_rem_pio2f+0x3d2>
 800e67c:	edd3 7a00 	vldr	s15, [r3]
 800e680:	edd3 6a01 	vldr	s13, [r3, #4]
 800e684:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e688:	3a01      	subs	r2, #1
 800e68a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e68e:	ed83 7a00 	vstr	s14, [r3]
 800e692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e696:	edc3 7a01 	vstr	s15, [r3, #4]
 800e69a:	e78d      	b.n	800e5b8 <__kernel_rem_pio2f+0x3dc>
 800e69c:	ed33 7a01 	vldmdb	r3!, {s14}
 800e6a0:	3c01      	subs	r4, #1
 800e6a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e6a6:	e78f      	b.n	800e5c8 <__kernel_rem_pio2f+0x3ec>
 800e6a8:	eef1 6a66 	vneg.f32	s13, s13
 800e6ac:	eeb1 7a47 	vneg.f32	s14, s14
 800e6b0:	edc8 6a00 	vstr	s13, [r8]
 800e6b4:	ed88 7a01 	vstr	s14, [r8, #4]
 800e6b8:	eef1 7a67 	vneg.f32	s15, s15
 800e6bc:	e790      	b.n	800e5e0 <__kernel_rem_pio2f+0x404>
 800e6be:	bf00      	nop

0800e6c0 <scalbnf>:
 800e6c0:	ee10 3a10 	vmov	r3, s0
 800e6c4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e6c8:	d02b      	beq.n	800e722 <scalbnf+0x62>
 800e6ca:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e6ce:	d302      	bcc.n	800e6d6 <scalbnf+0x16>
 800e6d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e6d4:	4770      	bx	lr
 800e6d6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e6da:	d123      	bne.n	800e724 <scalbnf+0x64>
 800e6dc:	4b24      	ldr	r3, [pc, #144]	; (800e770 <scalbnf+0xb0>)
 800e6de:	eddf 7a25 	vldr	s15, [pc, #148]	; 800e774 <scalbnf+0xb4>
 800e6e2:	4298      	cmp	r0, r3
 800e6e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e6e8:	db17      	blt.n	800e71a <scalbnf+0x5a>
 800e6ea:	ee10 3a10 	vmov	r3, s0
 800e6ee:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e6f2:	3a19      	subs	r2, #25
 800e6f4:	f24c 3150 	movw	r1, #50000	; 0xc350
 800e6f8:	4288      	cmp	r0, r1
 800e6fa:	dd15      	ble.n	800e728 <scalbnf+0x68>
 800e6fc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800e778 <scalbnf+0xb8>
 800e700:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800e77c <scalbnf+0xbc>
 800e704:	ee10 3a10 	vmov	r3, s0
 800e708:	eeb0 7a67 	vmov.f32	s14, s15
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	bfb8      	it	lt
 800e710:	eef0 7a66 	vmovlt.f32	s15, s13
 800e714:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e718:	4770      	bx	lr
 800e71a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800e780 <scalbnf+0xc0>
 800e71e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e722:	4770      	bx	lr
 800e724:	0dd2      	lsrs	r2, r2, #23
 800e726:	e7e5      	b.n	800e6f4 <scalbnf+0x34>
 800e728:	4410      	add	r0, r2
 800e72a:	28fe      	cmp	r0, #254	; 0xfe
 800e72c:	dce6      	bgt.n	800e6fc <scalbnf+0x3c>
 800e72e:	2800      	cmp	r0, #0
 800e730:	dd06      	ble.n	800e740 <scalbnf+0x80>
 800e732:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e736:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e73a:	ee00 3a10 	vmov	s0, r3
 800e73e:	4770      	bx	lr
 800e740:	f110 0f16 	cmn.w	r0, #22
 800e744:	da09      	bge.n	800e75a <scalbnf+0x9a>
 800e746:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800e780 <scalbnf+0xc0>
 800e74a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800e784 <scalbnf+0xc4>
 800e74e:	ee10 3a10 	vmov	r3, s0
 800e752:	eeb0 7a67 	vmov.f32	s14, s15
 800e756:	2b00      	cmp	r3, #0
 800e758:	e7d9      	b.n	800e70e <scalbnf+0x4e>
 800e75a:	3019      	adds	r0, #25
 800e75c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e760:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e764:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800e788 <scalbnf+0xc8>
 800e768:	ee07 3a90 	vmov	s15, r3
 800e76c:	e7d7      	b.n	800e71e <scalbnf+0x5e>
 800e76e:	bf00      	nop
 800e770:	ffff3cb0 	.word	0xffff3cb0
 800e774:	4c000000 	.word	0x4c000000
 800e778:	7149f2ca 	.word	0x7149f2ca
 800e77c:	f149f2ca 	.word	0xf149f2ca
 800e780:	0da24260 	.word	0x0da24260
 800e784:	8da24260 	.word	0x8da24260
 800e788:	33000000 	.word	0x33000000
 800e78c:	00000000 	.word	0x00000000

0800e790 <floor>:
 800e790:	ec51 0b10 	vmov	r0, r1, d0
 800e794:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e79c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800e7a0:	2e13      	cmp	r6, #19
 800e7a2:	ee10 5a10 	vmov	r5, s0
 800e7a6:	ee10 8a10 	vmov	r8, s0
 800e7aa:	460c      	mov	r4, r1
 800e7ac:	dc31      	bgt.n	800e812 <floor+0x82>
 800e7ae:	2e00      	cmp	r6, #0
 800e7b0:	da14      	bge.n	800e7dc <floor+0x4c>
 800e7b2:	a333      	add	r3, pc, #204	; (adr r3, 800e880 <floor+0xf0>)
 800e7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b8:	f7f1 fd32 	bl	8000220 <__adddf3>
 800e7bc:	2200      	movs	r2, #0
 800e7be:	2300      	movs	r3, #0
 800e7c0:	f7f2 f974 	bl	8000aac <__aeabi_dcmpgt>
 800e7c4:	b138      	cbz	r0, 800e7d6 <floor+0x46>
 800e7c6:	2c00      	cmp	r4, #0
 800e7c8:	da53      	bge.n	800e872 <floor+0xe2>
 800e7ca:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800e7ce:	4325      	orrs	r5, r4
 800e7d0:	d052      	beq.n	800e878 <floor+0xe8>
 800e7d2:	4c2d      	ldr	r4, [pc, #180]	; (800e888 <floor+0xf8>)
 800e7d4:	2500      	movs	r5, #0
 800e7d6:	4621      	mov	r1, r4
 800e7d8:	4628      	mov	r0, r5
 800e7da:	e024      	b.n	800e826 <floor+0x96>
 800e7dc:	4f2b      	ldr	r7, [pc, #172]	; (800e88c <floor+0xfc>)
 800e7de:	4137      	asrs	r7, r6
 800e7e0:	ea01 0307 	and.w	r3, r1, r7
 800e7e4:	4303      	orrs	r3, r0
 800e7e6:	d01e      	beq.n	800e826 <floor+0x96>
 800e7e8:	a325      	add	r3, pc, #148	; (adr r3, 800e880 <floor+0xf0>)
 800e7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ee:	f7f1 fd17 	bl	8000220 <__adddf3>
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	f7f2 f959 	bl	8000aac <__aeabi_dcmpgt>
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	d0eb      	beq.n	800e7d6 <floor+0x46>
 800e7fe:	2c00      	cmp	r4, #0
 800e800:	bfbe      	ittt	lt
 800e802:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e806:	4133      	asrlt	r3, r6
 800e808:	18e4      	addlt	r4, r4, r3
 800e80a:	ea24 0407 	bic.w	r4, r4, r7
 800e80e:	2500      	movs	r5, #0
 800e810:	e7e1      	b.n	800e7d6 <floor+0x46>
 800e812:	2e33      	cmp	r6, #51	; 0x33
 800e814:	dd0b      	ble.n	800e82e <floor+0x9e>
 800e816:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e81a:	d104      	bne.n	800e826 <floor+0x96>
 800e81c:	ee10 2a10 	vmov	r2, s0
 800e820:	460b      	mov	r3, r1
 800e822:	f7f1 fcfd 	bl	8000220 <__adddf3>
 800e826:	ec41 0b10 	vmov	d0, r0, r1
 800e82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e82e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800e832:	f04f 37ff 	mov.w	r7, #4294967295
 800e836:	40df      	lsrs	r7, r3
 800e838:	4238      	tst	r0, r7
 800e83a:	d0f4      	beq.n	800e826 <floor+0x96>
 800e83c:	a310      	add	r3, pc, #64	; (adr r3, 800e880 <floor+0xf0>)
 800e83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e842:	f7f1 fced 	bl	8000220 <__adddf3>
 800e846:	2200      	movs	r2, #0
 800e848:	2300      	movs	r3, #0
 800e84a:	f7f2 f92f 	bl	8000aac <__aeabi_dcmpgt>
 800e84e:	2800      	cmp	r0, #0
 800e850:	d0c1      	beq.n	800e7d6 <floor+0x46>
 800e852:	2c00      	cmp	r4, #0
 800e854:	da0a      	bge.n	800e86c <floor+0xdc>
 800e856:	2e14      	cmp	r6, #20
 800e858:	d101      	bne.n	800e85e <floor+0xce>
 800e85a:	3401      	adds	r4, #1
 800e85c:	e006      	b.n	800e86c <floor+0xdc>
 800e85e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e862:	2301      	movs	r3, #1
 800e864:	40b3      	lsls	r3, r6
 800e866:	441d      	add	r5, r3
 800e868:	45a8      	cmp	r8, r5
 800e86a:	d8f6      	bhi.n	800e85a <floor+0xca>
 800e86c:	ea25 0507 	bic.w	r5, r5, r7
 800e870:	e7b1      	b.n	800e7d6 <floor+0x46>
 800e872:	2500      	movs	r5, #0
 800e874:	462c      	mov	r4, r5
 800e876:	e7ae      	b.n	800e7d6 <floor+0x46>
 800e878:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e87c:	e7ab      	b.n	800e7d6 <floor+0x46>
 800e87e:	bf00      	nop
 800e880:	8800759c 	.word	0x8800759c
 800e884:	7e37e43c 	.word	0x7e37e43c
 800e888:	bff00000 	.word	0xbff00000
 800e88c:	000fffff 	.word	0x000fffff

0800e890 <floorf>:
 800e890:	ee10 3a10 	vmov	r3, s0
 800e894:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e898:	3a7f      	subs	r2, #127	; 0x7f
 800e89a:	2a16      	cmp	r2, #22
 800e89c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e8a0:	dc2a      	bgt.n	800e8f8 <floorf+0x68>
 800e8a2:	2a00      	cmp	r2, #0
 800e8a4:	da11      	bge.n	800e8ca <floorf+0x3a>
 800e8a6:	eddf 7a18 	vldr	s15, [pc, #96]	; 800e908 <floorf+0x78>
 800e8aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e8ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b6:	dd05      	ble.n	800e8c4 <floorf+0x34>
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	da23      	bge.n	800e904 <floorf+0x74>
 800e8bc:	4a13      	ldr	r2, [pc, #76]	; (800e90c <floorf+0x7c>)
 800e8be:	2900      	cmp	r1, #0
 800e8c0:	bf18      	it	ne
 800e8c2:	4613      	movne	r3, r2
 800e8c4:	ee00 3a10 	vmov	s0, r3
 800e8c8:	4770      	bx	lr
 800e8ca:	4911      	ldr	r1, [pc, #68]	; (800e910 <floorf+0x80>)
 800e8cc:	4111      	asrs	r1, r2
 800e8ce:	420b      	tst	r3, r1
 800e8d0:	d0fa      	beq.n	800e8c8 <floorf+0x38>
 800e8d2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800e908 <floorf+0x78>
 800e8d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e8da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8e2:	ddef      	ble.n	800e8c4 <floorf+0x34>
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	bfbe      	ittt	lt
 800e8e8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800e8ec:	fa40 f202 	asrlt.w	r2, r0, r2
 800e8f0:	189b      	addlt	r3, r3, r2
 800e8f2:	ea23 0301 	bic.w	r3, r3, r1
 800e8f6:	e7e5      	b.n	800e8c4 <floorf+0x34>
 800e8f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e8fc:	d3e4      	bcc.n	800e8c8 <floorf+0x38>
 800e8fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e902:	4770      	bx	lr
 800e904:	2300      	movs	r3, #0
 800e906:	e7dd      	b.n	800e8c4 <floorf+0x34>
 800e908:	7149f2ca 	.word	0x7149f2ca
 800e90c:	bf800000 	.word	0xbf800000
 800e910:	007fffff 	.word	0x007fffff

0800e914 <_init>:
 800e914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e916:	bf00      	nop
 800e918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e91a:	bc08      	pop	{r3}
 800e91c:	469e      	mov	lr, r3
 800e91e:	4770      	bx	lr

0800e920 <_fini>:
 800e920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e922:	bf00      	nop
 800e924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e926:	bc08      	pop	{r3}
 800e928:	469e      	mov	lr, r3
 800e92a:	4770      	bx	lr
