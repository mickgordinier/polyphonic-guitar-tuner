
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e24c  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015608  0800e410  0800e410  0001e410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023a18  08023a18  00040080  2**0
                  CONTENTS
  4 .ARM          00000008  08023a18  08023a18  00033a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023a20  08023a20  00040080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023a20  08023a20  00033a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023a24  08023a24  00033a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08023a28  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  20000080  08023aa8  00040080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08023aa8  000405d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040080  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000400b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000255b3  00000000  00000000  00040168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045ca  00000000  00000000  0006571b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  00069ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000191d4  00000000  00000000  0006b590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00008360  00000000  00000000  00084764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001239  00000000  00000000  0008cac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00006fcc  00000000  00000000  0008dd00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000076  00000000  00000000  00094ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000035ee  00000000  00000000  00094d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 000000e8  00000000  00000000  00098330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000080 	.word	0x20000080
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e3f4 	.word	0x0800e3f4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000084 	.word	0x20000084
 80001fc:	0800e3f4 	.word	0x0800e3f4

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2iz>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae0:	d215      	bcs.n	8000b0e <__aeabi_d2iz+0x36>
 8000ae2:	d511      	bpl.n	8000b08 <__aeabi_d2iz+0x30>
 8000ae4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aec:	d912      	bls.n	8000b14 <__aeabi_d2iz+0x3c>
 8000aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d105      	bne.n	8000b20 <__aeabi_d2iz+0x48>
 8000b14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	bf08      	it	eq
 8000b1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_d2uiz>:
 8000b28:	004a      	lsls	r2, r1, #1
 8000b2a:	d211      	bcs.n	8000b50 <__aeabi_d2uiz+0x28>
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d211      	bcs.n	8000b56 <__aeabi_d2uiz+0x2e>
 8000b32:	d50d      	bpl.n	8000b50 <__aeabi_d2uiz+0x28>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d40e      	bmi.n	8000b5c <__aeabi_d2uiz+0x34>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_d2uiz+0x3a>
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b970 	b.w	8000f00 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d965      	bls.n	8000d1a <__udivmoddi4+0xe2>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b143      	cbz	r3, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	409c      	lsls	r4, r3
 8000c66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6a:	fa1f f58c 	uxth.w	r5, ip
 8000c6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c72:	0c22      	lsrs	r2, r4, #16
 8000c74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c7c:	fb01 f005 	mul.w	r0, r1, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	f080 811c 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f240 8119 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4462      	add	r2, ip
 8000c9a:	1a12      	subs	r2, r2, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	fb00 f505 	mul.w	r5, r0, r5
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x90>
 8000cb2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x294>
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x294>
 8000cc4:	4464      	add	r4, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11e      	cbz	r6, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40dc      	lsrs	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0xbc>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80ed 	beq.w	8000ec2 <__udivmoddi4+0x28a>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e9c6 0500 	strd	r0, r5, [r6]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	fab3 f183 	clz	r1, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d149      	bne.n	8000d90 <__udivmoddi4+0x158>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	d302      	bcc.n	8000d06 <__udivmoddi4+0xce>
 8000d00:	4282      	cmp	r2, r0
 8000d02:	f200 80f8 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d06:	1a84      	subs	r4, r0, r2
 8000d08:	eb65 0203 	sbc.w	r2, r5, r3
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d0e2      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	e9c6 4700 	strd	r4, r7, [r6]
 8000d18:	e7df      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d1a:	b902      	cbnz	r2, 8000d1e <__udivmoddi4+0xe6>
 8000d1c:	deff      	udf	#255	; 0xff
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8090 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f fe8c 	uxth.w	lr, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d38:	fb07 2015 	mls	r0, r7, r5, r2
 8000d3c:	0c22      	lsrs	r2, r4, #16
 8000d3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d42:	fb0e f005 	mul.w	r0, lr, r5
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4290      	cmp	r0, r2
 8000d56:	f200 80cb 	bhi.w	8000ef0 <__udivmoddi4+0x2b8>
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	1a12      	subs	r2, r2, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x14e>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x14c>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c2>
 8000d84:	4610      	mov	r0, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8e:	e79f      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d90:	f1c1 0720 	rsb	r7, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000da2:	fa20 f307 	lsr.w	r3, r0, r7
 8000da6:	40fd      	lsrs	r5, r7
 8000da8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dac:	4323      	orrs	r3, r4
 8000dae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dba:	0c1c      	lsrs	r4, r3, #16
 8000dbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	fa00 f001 	lsl.w	r0, r0, r1
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd8:	f080 8088 	bcs.w	8000eec <__udivmoddi4+0x2b4>
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	f240 8085 	bls.w	8000eec <__udivmoddi4+0x2b4>
 8000de2:	f1a8 0802 	sub.w	r8, r8, #2
 8000de6:	4464      	add	r4, ip
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	b29d      	uxth	r5, r3
 8000dec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df0:	fb09 4413 	mls	r4, r9, r3, r4
 8000df4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e08:	d26c      	bcs.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	d96a      	bls.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e16:	fba3 9502 	umull	r9, r5, r3, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	46c8      	mov	r8, r9
 8000e22:	46ae      	mov	lr, r5
 8000e24:	d356      	bcc.n	8000ed4 <__udivmoddi4+0x29c>
 8000e26:	d053      	beq.n	8000ed0 <__udivmoddi4+0x298>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x208>
 8000e2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40ca      	lsrs	r2, r1
 8000e38:	40cc      	lsrs	r4, r1
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	f1c3 0120 	rsb	r1, r3, #32
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	fa20 f201 	lsr.w	r2, r0, r1
 8000e54:	fa25 f101 	lsr.w	r1, r5, r1
 8000e58:	409d      	lsls	r5, r3
 8000e5a:	432a      	orrs	r2, r5
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1510 	mls	r5, r7, r0, r1
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e72:	fb00 f50e 	mul.w	r5, r0, lr
 8000e76:	428d      	cmp	r5, r1
 8000e78:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x258>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e86:	d22f      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e88:	428d      	cmp	r5, r1
 8000e8a:	d92d      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1b49      	subs	r1, r1, r5
 8000e92:	b292      	uxth	r2, r2
 8000e94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e98:	fb07 1115 	mls	r1, r7, r5, r1
 8000e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea4:	4291      	cmp	r1, r2
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x282>
 8000ea8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb0:	d216      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	d914      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb6:	3d02      	subs	r5, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	1a52      	subs	r2, r2, r1
 8000ebc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec0:	e738      	b.n	8000d34 <__udivmoddi4+0xfc>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xa2>
 8000ec8:	4639      	mov	r1, r7
 8000eca:	e6e6      	b.n	8000c9a <__udivmoddi4+0x62>
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x90>
 8000ed0:	4548      	cmp	r0, r9
 8000ed2:	d2a9      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000edc:	3b01      	subs	r3, #1
 8000ede:	e7a3      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ee0:	4645      	mov	r5, r8
 8000ee2:	e7ea      	b.n	8000eba <__udivmoddi4+0x282>
 8000ee4:	462b      	mov	r3, r5
 8000ee6:	e794      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x258>
 8000eec:	46d0      	mov	r8, sl
 8000eee:	e77b      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000ef0:	3d02      	subs	r5, #2
 8000ef2:	4462      	add	r2, ip
 8000ef4:	e732      	b.n	8000d5c <__udivmoddi4+0x124>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e70a      	b.n	8000d10 <__udivmoddi4+0xd8>
 8000efa:	4464      	add	r4, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x14e>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <ILI9341_Select>:


#include "stm32l4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f10:	f004 ff9e 	bl	8005e50 <HAL_GPIO_WritePin>
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2110      	movs	r1, #16
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f004 ff94 	bl	8005e50 <HAL_GPIO_WritePin>
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2101      	movs	r1, #1
 8000f34:	4806      	ldr	r0, [pc, #24]	; (8000f50 <ILI9341_Reset+0x24>)
 8000f36:	f004 ff8b 	bl	8005e50 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000f3a:	2005      	movs	r0, #5
 8000f3c:	f003 f980 	bl	8004240 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2101      	movs	r1, #1
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <ILI9341_Reset+0x24>)
 8000f46:	f004 ff83 	bl	8005e50 <HAL_GPIO_WritePin>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	48000400 	.word	0x48000400

08000f54 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2102      	movs	r1, #2
 8000f62:	4807      	ldr	r0, [pc, #28]	; (8000f80 <ILI9341_WriteCommand+0x2c>)
 8000f64:	f004 ff74 	bl	8005e50 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000f68:	1df9      	adds	r1, r7, #7
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <ILI9341_WriteCommand+0x30>)
 8000f72:	f008 f8b6 	bl	80090e2 <HAL_SPI_Transmit>

}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	48000400 	.word	0x48000400
 8000f84:	20000320 	.word	0x20000320

08000f88 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2102      	movs	r1, #2
 8000f96:	4811      	ldr	r0, [pc, #68]	; (8000fdc <ILI9341_WriteData+0x54>)
 8000f98:	f004 ff5a 	bl	8005e50 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000f9c:	e015      	b.n	8000fca <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000fa4:	bf28      	it	cs
 8000fa6:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8000faa:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000fac:	89fa      	ldrh	r2, [r7, #14]
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <ILI9341_WriteData+0x58>)
 8000fb6:	f008 f894 	bl	80090e2 <HAL_SPI_Transmit>

        buff += chunk_size;
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000fc2:	89fb      	ldrh	r3, [r7, #14]
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1e6      	bne.n	8000f9e <ILI9341_WriteData+0x16>
    }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	48000400 	.word	0x48000400
 8000fe0:	20000320 	.word	0x20000320

08000fe4 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4604      	mov	r4, r0
 8000fec:	4608      	mov	r0, r1
 8000fee:	4611      	mov	r1, r2
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	80fb      	strh	r3, [r7, #6]
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80bb      	strh	r3, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	807b      	strh	r3, [r7, #2]
 8000ffe:	4613      	mov	r3, r2
 8001000:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8001002:	202a      	movs	r0, #42	; 0x2a
 8001004:	f7ff ffa6 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	0a1b      	lsrs	r3, r3, #8
 800100c:	b29b      	uxth	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	733b      	strb	r3, [r7, #12]
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	737b      	strb	r3, [r7, #13]
 8001018:	887b      	ldrh	r3, [r7, #2]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	b29b      	uxth	r3, r3
 800101e:	b2db      	uxtb	r3, r3
 8001020:	73bb      	strb	r3, [r7, #14]
 8001022:	887b      	ldrh	r3, [r7, #2]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2104      	movs	r1, #4
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ffaa 	bl	8000f88 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8001034:	202b      	movs	r0, #43	; 0x2b
 8001036:	f7ff ff8d 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800103a:	88bb      	ldrh	r3, [r7, #4]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	b29b      	uxth	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	723b      	strb	r3, [r7, #8]
 8001044:	88bb      	ldrh	r3, [r7, #4]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	727b      	strb	r3, [r7, #9]
 800104a:	883b      	ldrh	r3, [r7, #0]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	b29b      	uxth	r3, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	72bb      	strb	r3, [r7, #10]
 8001054:	883b      	ldrh	r3, [r7, #0]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	2104      	movs	r1, #4
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff91 	bl	8000f88 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8001066:	202c      	movs	r0, #44	; 0x2c
 8001068:	f7ff ff74 	bl	8000f54 <ILI9341_WriteCommand>
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	bd90      	pop	{r4, r7, pc}

08001074 <ILI9341_Init>:

void ILI9341_Init() {
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b09b      	sub	sp, #108	; 0x6c
 8001078:	af00      	add	r7, sp, #0
    ILI9341_Select();
 800107a:	f7ff ff43 	bl	8000f04 <ILI9341_Select>
    ILI9341_Reset();
 800107e:	f7ff ff55 	bl	8000f2c <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff ff66 	bl	8000f54 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8001088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800108c:	f003 f8d8 	bl	8004240 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8001090:	20cb      	movs	r0, #203	; 0xcb
 8001092:	f7ff ff5f 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8001096:	4a87      	ldr	r2, [pc, #540]	; (80012b4 <ILI9341_Init+0x240>)
 8001098:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800109c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010a0:	6018      	str	r0, [r3, #0]
 80010a2:	3304      	adds	r3, #4
 80010a4:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80010a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010aa:	2105      	movs	r1, #5
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff6b 	bl	8000f88 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80010b2:	20cf      	movs	r0, #207	; 0xcf
 80010b4:	f7ff ff4e 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80010b8:	4a7f      	ldr	r2, [pc, #508]	; (80012b8 <ILI9341_Init+0x244>)
 80010ba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	4611      	mov	r1, r2
 80010c2:	8019      	strh	r1, [r3, #0]
 80010c4:	3302      	adds	r3, #2
 80010c6:	0c12      	lsrs	r2, r2, #16
 80010c8:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80010ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010ce:	2103      	movs	r1, #3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff59 	bl	8000f88 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80010d6:	20e8      	movs	r0, #232	; 0xe8
 80010d8:	f7ff ff3c 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80010dc:	4a77      	ldr	r2, [pc, #476]	; (80012bc <ILI9341_Init+0x248>)
 80010de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010e2:	6812      	ldr	r2, [r2, #0]
 80010e4:	4611      	mov	r1, r2
 80010e6:	8019      	strh	r1, [r3, #0]
 80010e8:	3302      	adds	r3, #2
 80010ea:	0c12      	lsrs	r2, r2, #16
 80010ec:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80010ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010f2:	2103      	movs	r1, #3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff47 	bl	8000f88 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 80010fa:	20ea      	movs	r0, #234	; 0xea
 80010fc:	f7ff ff2a 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8001100:	2300      	movs	r3, #0
 8001102:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 8001106:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800110a:	2102      	movs	r1, #2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff3b 	bl	8000f88 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8001112:	20ed      	movs	r0, #237	; 0xed
 8001114:	f7ff ff1e 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8001118:	4b69      	ldr	r3, [pc, #420]	; (80012c0 <ILI9341_Init+0x24c>)
 800111a:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 800111c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001120:	2104      	movs	r1, #4
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff30 	bl	8000f88 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8001128:	20f7      	movs	r0, #247	; 0xf7
 800112a:	f7ff ff13 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 800112e:	2320      	movs	r3, #32
 8001130:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8001134:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001138:	2101      	movs	r1, #1
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff24 	bl	8000f88 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8001140:	20c0      	movs	r0, #192	; 0xc0
 8001142:	f7ff ff07 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8001146:	2323      	movs	r3, #35	; 0x23
 8001148:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 800114c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001150:	2101      	movs	r1, #1
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff18 	bl	8000f88 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8001158:	20c1      	movs	r0, #193	; 0xc1
 800115a:	f7ff fefb 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 800115e:	2310      	movs	r3, #16
 8001160:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8001164:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001168:	2101      	movs	r1, #1
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff0c 	bl	8000f88 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8001170:	20c5      	movs	r0, #197	; 0xc5
 8001172:	f7ff feef 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8001176:	f642 033e 	movw	r3, #10302	; 0x283e
 800117a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 800117e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001182:	2102      	movs	r1, #2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff feff 	bl	8000f88 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 800118a:	20c7      	movs	r0, #199	; 0xc7
 800118c:	f7ff fee2 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8001190:	2386      	movs	r3, #134	; 0x86
 8001192:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8001196:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800119a:	2101      	movs	r1, #1
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fef3 	bl	8000f88 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80011a2:	2036      	movs	r0, #54	; 0x36
 80011a4:	f7ff fed6 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80011a8:	2348      	movs	r3, #72	; 0x48
 80011aa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 80011ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011b2:	2101      	movs	r1, #1
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fee7 	bl	8000f88 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80011ba:	203a      	movs	r0, #58	; 0x3a
 80011bc:	f7ff feca 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80011c0:	2355      	movs	r3, #85	; 0x55
 80011c2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 80011c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011ca:	2101      	movs	r1, #1
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fedb 	bl	8000f88 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80011d2:	20b1      	movs	r0, #177	; 0xb1
 80011d4:	f7ff febe 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80011d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011dc:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 80011de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011e2:	2102      	movs	r1, #2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fecf 	bl	8000f88 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80011ea:	20b6      	movs	r0, #182	; 0xb6
 80011ec:	f7ff feb2 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80011f0:	4a34      	ldr	r2, [pc, #208]	; (80012c4 <ILI9341_Init+0x250>)
 80011f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	4611      	mov	r1, r2
 80011fa:	8019      	strh	r1, [r3, #0]
 80011fc:	3302      	adds	r3, #2
 80011fe:	0c12      	lsrs	r2, r2, #16
 8001200:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001206:	2103      	movs	r1, #3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff febd 	bl	8000f88 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 800120e:	20f2      	movs	r0, #242	; 0xf2
 8001210:	f7ff fea0 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8001214:	2300      	movs	r3, #0
 8001216:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 800121a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121e:	2101      	movs	r1, #1
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff feb1 	bl	8000f88 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8001226:	2026      	movs	r0, #38	; 0x26
 8001228:	f7ff fe94 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 800122c:	2301      	movs	r3, #1
 800122e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	2101      	movs	r1, #1
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fea5 	bl	8000f88 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 800123e:	20e0      	movs	r0, #224	; 0xe0
 8001240:	f7ff fe88 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <ILI9341_Init+0x254>)
 8001246:	f107 0414 	add.w	r4, r7, #20
 800124a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800124c:	c407      	stmia	r4!, {r0, r1, r2}
 800124e:	8023      	strh	r3, [r4, #0]
 8001250:	3402      	adds	r4, #2
 8001252:	0c1b      	lsrs	r3, r3, #16
 8001254:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	210f      	movs	r1, #15
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fe93 	bl	8000f88 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8001262:	20e1      	movs	r0, #225	; 0xe1
 8001264:	f7ff fe76 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <ILI9341_Init+0x258>)
 800126a:	1d3c      	adds	r4, r7, #4
 800126c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800126e:	c407      	stmia	r4!, {r0, r1, r2}
 8001270:	8023      	strh	r3, [r4, #0]
 8001272:	3402      	adds	r4, #2
 8001274:	0c1b      	lsrs	r3, r3, #16
 8001276:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	210f      	movs	r1, #15
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fe83 	bl	8000f88 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8001282:	2011      	movs	r0, #17
 8001284:	f7ff fe66 	bl	8000f54 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8001288:	2078      	movs	r0, #120	; 0x78
 800128a:	f002 ffd9 	bl	8004240 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 800128e:	2029      	movs	r0, #41	; 0x29
 8001290:	f7ff fe60 	bl	8000f54 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8001294:	2036      	movs	r0, #54	; 0x36
 8001296:	f7ff fe5d 	bl	8000f54 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 800129a:	2348      	movs	r3, #72	; 0x48
 800129c:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 800129e:	463b      	mov	r3, r7
 80012a0:	2101      	movs	r1, #1
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fe70 	bl	8000f88 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80012a8:	f7ff fe36 	bl	8000f18 <ILI9341_Unselect>
}
 80012ac:	bf00      	nop
 80012ae:	376c      	adds	r7, #108	; 0x6c
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd90      	pop	{r4, r7, pc}
 80012b4:	0800e410 	.word	0x0800e410
 80012b8:	0800e418 	.word	0x0800e418
 80012bc:	0800e41c 	.word	0x0800e41c
 80012c0:	81120364 	.word	0x81120364
 80012c4:	0800e420 	.word	0x0800e420
 80012c8:	0800e424 	.word	0x0800e424
 80012cc:	0800e434 	.word	0x0800e434

080012d0 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80012d0:	b082      	sub	sp, #8
 80012d2:	b590      	push	{r4, r7, lr}
 80012d4:	b089      	sub	sp, #36	; 0x24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	637b      	str	r3, [r7, #52]	; 0x34
 80012da:	4603      	mov	r3, r0
 80012dc:	80fb      	strh	r3, [r7, #6]
 80012de:	460b      	mov	r3, r1
 80012e0:	80bb      	strh	r3, [r7, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80012e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	4413      	add	r3, r2
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	3b01      	subs	r3, #1
 80012f4:	b29c      	uxth	r4, r3
 80012f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	88bb      	ldrh	r3, [r7, #4]
 80012fe:	4413      	add	r3, r2
 8001300:	b29b      	uxth	r3, r3
 8001302:	3b01      	subs	r3, #1
 8001304:	b29b      	uxth	r3, r3
 8001306:	88b9      	ldrh	r1, [r7, #4]
 8001308:	88f8      	ldrh	r0, [r7, #6]
 800130a:	4622      	mov	r2, r4
 800130c:	f7ff fe6a 	bl	8000fe4 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	e043      	b.n	800139e <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 8001316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	3b20      	subs	r3, #32
 800131c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001320:	fb01 f303 	mul.w	r3, r1, r3
 8001324:	4619      	mov	r1, r3
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	440b      	add	r3, r1
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
 8001336:	e029      	b.n	800138c <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00e      	beq.n	8001366 <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001348:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800134a:	0a1b      	lsrs	r3, r3, #8
 800134c:	b29b      	uxth	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	743b      	strb	r3, [r7, #16]
 8001352:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001354:	b2db      	uxtb	r3, r3
 8001356:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	2102      	movs	r1, #2
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fe12 	bl	8000f88 <ILI9341_WriteData>
 8001364:	e00f      	b.n	8001386 <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001366:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800136a:	0a1b      	lsrs	r3, r3, #8
 800136c:	b29b      	uxth	r3, r3
 800136e:	b2db      	uxtb	r3, r3
 8001370:	733b      	strb	r3, [r7, #12]
 8001372:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001376:	b2db      	uxtb	r3, r3
 8001378:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2102      	movs	r1, #2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fe01 	bl	8000f88 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	3301      	adds	r3, #1
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001390:	461a      	mov	r2, r3
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4293      	cmp	r3, r2
 8001396:	d3cf      	bcc.n	8001338 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	3301      	adds	r3, #1
 800139c:	61fb      	str	r3, [r7, #28]
 800139e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80013a2:	461a      	mov	r2, r3
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d3b5      	bcc.n	8001316 <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	3724      	adds	r7, #36	; 0x24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80013b6:	b002      	add	sp, #8
 80013b8:	4770      	bx	lr

080013ba <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80013ba:	b082      	sub	sp, #8
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af04      	add	r7, sp, #16
 80013c2:	603a      	str	r2, [r7, #0]
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	4603      	mov	r3, r0
 80013c8:	80fb      	strh	r3, [r7, #6]
 80013ca:	460b      	mov	r3, r1
 80013cc:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 80013ce:	f7ff fd99 	bl	8000f04 <ILI9341_Select>

    while(*str) {
 80013d2:	e02e      	b.n	8001432 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	7d3a      	ldrb	r2, [r7, #20]
 80013d8:	4413      	add	r3, r2
 80013da:	2bef      	cmp	r3, #239	; 0xef
 80013dc:	dd14      	ble.n	8001408 <ILI9341_WriteString+0x4e>
            x = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80013e2:	7d7b      	ldrb	r3, [r7, #21]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	88bb      	ldrh	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 80013ec:	88bb      	ldrh	r3, [r7, #4]
 80013ee:	7d7a      	ldrb	r2, [r7, #21]
 80013f0:	4413      	add	r3, r2
 80013f2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80013f6:	da21      	bge.n	800143c <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b20      	cmp	r3, #32
 80013fe:	d103      	bne.n	8001408 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	603b      	str	r3, [r7, #0]
                continue;
 8001406:	e014      	b.n	8001432 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	781a      	ldrb	r2, [r3, #0]
 800140c:	88b9      	ldrh	r1, [r7, #4]
 800140e:	88f8      	ldrh	r0, [r7, #6]
 8001410:	8c3b      	ldrh	r3, [r7, #32]
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	8bbb      	ldrh	r3, [r7, #28]
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f7ff ff57 	bl	80012d0 <ILI9341_WriteChar>
        x += font.width;
 8001422:	7d3b      	ldrb	r3, [r7, #20]
 8001424:	b29a      	uxth	r2, r3
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	4413      	add	r3, r2
 800142a:	80fb      	strh	r3, [r7, #6]
        str++;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1cc      	bne.n	80013d4 <ILI9341_WriteString+0x1a>
 800143a:	e000      	b.n	800143e <ILI9341_WriteString+0x84>
                break;
 800143c:	bf00      	nop
    }

    ILI9341_Unselect();
 800143e:	f7ff fd6b 	bl	8000f18 <ILI9341_Unselect>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800144c:	b002      	add	sp, #8
 800144e:	4770      	bx	lr

08001450 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	4604      	mov	r4, r0
 8001458:	4608      	mov	r0, r1
 800145a:	4611      	mov	r1, r2
 800145c:	461a      	mov	r2, r3
 800145e:	4623      	mov	r3, r4
 8001460:	80fb      	strh	r3, [r7, #6]
 8001462:	4603      	mov	r3, r0
 8001464:	80bb      	strh	r3, [r7, #4]
 8001466:	460b      	mov	r3, r1
 8001468:	807b      	strh	r3, [r7, #2]
 800146a:	4613      	mov	r3, r2
 800146c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	2bef      	cmp	r3, #239	; 0xef
 8001472:	d853      	bhi.n	800151c <ILI9341_FillRectangle+0xcc>
 8001474:	88bb      	ldrh	r3, [r7, #4]
 8001476:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800147a:	d24f      	bcs.n	800151c <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 800147c:	88fa      	ldrh	r2, [r7, #6]
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	4413      	add	r3, r2
 8001482:	2bf0      	cmp	r3, #240	; 0xf0
 8001484:	dd03      	ble.n	800148e <ILI9341_FillRectangle+0x3e>
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800148c:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 800148e:	88ba      	ldrh	r2, [r7, #4]
 8001490:	883b      	ldrh	r3, [r7, #0]
 8001492:	4413      	add	r3, r2
 8001494:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001498:	dd03      	ble.n	80014a2 <ILI9341_FillRectangle+0x52>
 800149a:	88bb      	ldrh	r3, [r7, #4]
 800149c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80014a0:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 80014a2:	f7ff fd2f 	bl	8000f04 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80014a6:	88fa      	ldrh	r2, [r7, #6]
 80014a8:	887b      	ldrh	r3, [r7, #2]
 80014aa:	4413      	add	r3, r2
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b29c      	uxth	r4, r3
 80014b2:	88ba      	ldrh	r2, [r7, #4]
 80014b4:	883b      	ldrh	r3, [r7, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	3b01      	subs	r3, #1
 80014bc:	b29b      	uxth	r3, r3
 80014be:	88b9      	ldrh	r1, [r7, #4]
 80014c0:	88f8      	ldrh	r0, [r7, #6]
 80014c2:	4622      	mov	r2, r4
 80014c4:	f7ff fd8e 	bl	8000fe4 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80014c8:	8c3b      	ldrh	r3, [r7, #32]
 80014ca:	0a1b      	lsrs	r3, r3, #8
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	733b      	strb	r3, [r7, #12]
 80014d2:	8c3b      	ldrh	r3, [r7, #32]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80014d8:	2201      	movs	r2, #1
 80014da:	2102      	movs	r1, #2
 80014dc:	4811      	ldr	r0, [pc, #68]	; (8001524 <ILI9341_FillRectangle+0xd4>)
 80014de:	f004 fcb7 	bl	8005e50 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80014e2:	883b      	ldrh	r3, [r7, #0]
 80014e4:	80bb      	strh	r3, [r7, #4]
 80014e6:	e013      	b.n	8001510 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 80014e8:	887b      	ldrh	r3, [r7, #2]
 80014ea:	80fb      	strh	r3, [r7, #6]
 80014ec:	e00a      	b.n	8001504 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80014ee:	f107 010c 	add.w	r1, r7, #12
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	2202      	movs	r2, #2
 80014f8:	480b      	ldr	r0, [pc, #44]	; (8001528 <ILI9341_FillRectangle+0xd8>)
 80014fa:	f007 fdf2 	bl	80090e2 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	3b01      	subs	r3, #1
 8001502:	80fb      	strh	r3, [r7, #6]
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f1      	bne.n	80014ee <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 800150a:	88bb      	ldrh	r3, [r7, #4]
 800150c:	3b01      	subs	r3, #1
 800150e:	80bb      	strh	r3, [r7, #4]
 8001510:	88bb      	ldrh	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1e8      	bne.n	80014e8 <ILI9341_FillRectangle+0x98>

        }
    }

    ILI9341_Unselect();
 8001516:	f7ff fcff 	bl	8000f18 <ILI9341_Unselect>
 800151a:	e000      	b.n	800151e <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800151c:	bf00      	nop
}
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bd90      	pop	{r4, r7, pc}
 8001524:	48000400 	.word	0x48000400
 8001528:	20000320 	.word	0x20000320

0800152c <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af02      	add	r7, sp, #8
 8001532:	4603      	mov	r3, r0
 8001534:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800153e:	22f0      	movs	r2, #240	; 0xf0
 8001540:	2100      	movs	r1, #0
 8001542:	2000      	movs	r0, #0
 8001544:	f7ff ff84 	bl	8001450 <ILI9341_FillRectangle>
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800155a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155e:	f004 fc77 	bl	8005e50 <HAL_GPIO_WritePin>
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

	convFlag = 1;
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]

}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000468 	.word	0x20000468

08001588 <apply_hanning_window>:


void apply_hanning_window(float32_t * signal, uint32_t length){
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < length; ++i){
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	e033      	b.n	8001600 <apply_hanning_window+0x78>
		float32_t han_value = 0.5f * (1.0f - cosf(2 * PI * i / (length - 1)));
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	ee07 3a90 	vmov	s15, r3
 800159e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001614 <apply_hanning_window+0x8c>
 80015a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015ba:	eeb0 0a66 	vmov.f32	s0, s13
 80015be:	f00b fa93 	bl	800cae8 <cosf>
 80015c2:	eef0 7a40 	vmov.f32	s15, s0
 80015c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d6:	edc7 7a02 	vstr	s15, [r7, #8]
		signal[i] *= han_value;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	ed93 7a00 	vldr	s14, [r3]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80015f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < length; ++i){
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3301      	adds	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d8c7      	bhi.n	8001598 <apply_hanning_window+0x10>
	}
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40c90fdb 	.word	0x40c90fdb

08001618 <set_motor_speed_1>:

    arm_rfft_fast_f32(&fftInstance, power_spectrum, autocorrelation, 1);

    arm_abs_f32(autocorrelation, autocorrelation, BUFFER_LENGTH);
}
void set_motor_speed_1(int motor_speed) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7fe ff3f 	bl	80004a4 <__aeabi_i2d>
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <set_motor_speed_1+0xa0>)
 800162c:	f7ff f8ce 	bl	80007cc <__aeabi_ddiv>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	a319      	add	r3, pc, #100	; (adr r3, 80016a0 <set_motor_speed_1+0x88>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7fe ff9b 	bl	8000578 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	a317      	add	r3, pc, #92	; (adr r3, 80016a8 <set_motor_speed_1+0x90>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe fddc 	bl	800020c <__adddf3>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr1 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b16      	ldr	r3, [pc, #88]	; (80016bc <set_motor_speed_1+0xa4>)
 8001662:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001666:	f7ff f8b1 	bl	80007cc <__aeabi_ddiv>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	a30f      	add	r3, pc, #60	; (adr r3, 80016b0 <set_motor_speed_1+0x98>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ff7e 	bl	8000578 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fa28 	bl	8000ad8 <__aeabi_d2iz>
 8001688:	4603      	mov	r3, r0
 800168a:	60fb      	str	r3, [r7, #12]

  TIM4->CCR1 = temp_ccr1;
 800168c:	4a0c      	ldr	r2, [pc, #48]	; (80016c0 <set_motor_speed_1+0xa8>)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	f3af 8000 	nop.w
 80016a0:	c28f5c29 	.word	0xc28f5c29
 80016a4:	3fdc28f5 	.word	0x3fdc28f5
 80016a8:	47ae147b 	.word	0x47ae147b
 80016ac:	3ff47ae1 	.word	0x3ff47ae1
 80016b0:	00000000 	.word	0x00000000
 80016b4:	412e8480 	.word	0x412e8480
 80016b8:	40590000 	.word	0x40590000
 80016bc:	408f4000 	.word	0x408f4000
 80016c0:	40000800 	.word	0x40000800
 80016c4:	00000000 	.word	0x00000000

080016c8 <set_motor_speed_2>:

void set_motor_speed_2(int motor_speed) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7fe fee7 	bl	80004a4 <__aeabi_i2d>
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <set_motor_speed_2+0xa0>)
 80016dc:	f7ff f876 	bl	80007cc <__aeabi_ddiv>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	a319      	add	r3, pc, #100	; (adr r3, 8001750 <set_motor_speed_2+0x88>)
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	f7fe ff43 	bl	8000578 <__aeabi_dmul>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	a317      	add	r3, pc, #92	; (adr r3, 8001758 <set_motor_speed_2+0x90>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7fe fd84 	bl	800020c <__adddf3>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr2 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <set_motor_speed_2+0xa4>)
 8001712:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001716:	f7ff f859 	bl	80007cc <__aeabi_ddiv>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	a30f      	add	r3, pc, #60	; (adr r3, 8001760 <set_motor_speed_2+0x98>)
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	f7fe ff26 	bl	8000578 <__aeabi_dmul>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff f9d0 	bl	8000ad8 <__aeabi_d2iz>
 8001738:	4603      	mov	r3, r0
 800173a:	60fb      	str	r3, [r7, #12]

  TIM4->CCR2 = temp_ccr2;
 800173c:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <set_motor_speed_2+0xa8>)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	f3af 8000 	nop.w
 8001750:	c28f5c29 	.word	0xc28f5c29
 8001754:	3fdc28f5 	.word	0x3fdc28f5
 8001758:	47ae147b 	.word	0x47ae147b
 800175c:	3ff47ae1 	.word	0x3ff47ae1
 8001760:	00000000 	.word	0x00000000
 8001764:	412e8480 	.word	0x412e8480
 8001768:	40590000 	.word	0x40590000
 800176c:	408f4000 	.word	0x408f4000
 8001770:	40000800 	.word	0x40000800
 8001774:	00000000 	.word	0x00000000

08001778 <set_motor_speed_3>:

void set_motor_speed_3(int motor_speed) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7fe fe8f 	bl	80004a4 <__aeabi_i2d>
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <set_motor_speed_3+0xa0>)
 800178c:	f7ff f81e 	bl	80007cc <__aeabi_ddiv>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	a319      	add	r3, pc, #100	; (adr r3, 8001800 <set_motor_speed_3+0x88>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe feeb 	bl	8000578 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	a317      	add	r3, pc, #92	; (adr r3, 8001808 <set_motor_speed_3+0x90>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f7fe fd2c 	bl	800020c <__adddf3>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr3 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	4b16      	ldr	r3, [pc, #88]	; (800181c <set_motor_speed_3+0xa4>)
 80017c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017c6:	f7ff f801 	bl	80007cc <__aeabi_ddiv>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	a30f      	add	r3, pc, #60	; (adr r3, 8001810 <set_motor_speed_3+0x98>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	f7fe fece 	bl	8000578 <__aeabi_dmul>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff f978 	bl	8000ad8 <__aeabi_d2iz>
 80017e8:	4603      	mov	r3, r0
 80017ea:	60fb      	str	r3, [r7, #12]

  TIM4->CCR3 = temp_ccr3;
 80017ec:	4a0c      	ldr	r2, [pc, #48]	; (8001820 <set_motor_speed_3+0xa8>)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80017f2:	bf00      	nop
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	f3af 8000 	nop.w
 8001800:	c28f5c29 	.word	0xc28f5c29
 8001804:	3fdc28f5 	.word	0x3fdc28f5
 8001808:	47ae147b 	.word	0x47ae147b
 800180c:	3ff47ae1 	.word	0x3ff47ae1
 8001810:	00000000 	.word	0x00000000
 8001814:	412e8480 	.word	0x412e8480
 8001818:	40590000 	.word	0x40590000
 800181c:	408f4000 	.word	0x408f4000
 8001820:	40000800 	.word	0x40000800
 8001824:	00000000 	.word	0x00000000

08001828 <set_motor_speed_4>:

void set_motor_speed_4(int motor_speed) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7fe fe37 	bl	80004a4 <__aeabi_i2d>
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <set_motor_speed_4+0xa0>)
 800183c:	f7fe ffc6 	bl	80007cc <__aeabi_ddiv>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	a319      	add	r3, pc, #100	; (adr r3, 80018b0 <set_motor_speed_4+0x88>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7fe fe93 	bl	8000578 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	a317      	add	r3, pc, #92	; (adr r3, 80018b8 <set_motor_speed_4+0x90>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7fe fcd4 	bl	800020c <__adddf3>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr4 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <set_motor_speed_4+0xa4>)
 8001872:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001876:	f7fe ffa9 	bl	80007cc <__aeabi_ddiv>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	a30f      	add	r3, pc, #60	; (adr r3, 80018c0 <set_motor_speed_4+0x98>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe fe76 	bl	8000578 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	f7ff f920 	bl	8000ad8 <__aeabi_d2iz>
 8001898:	4603      	mov	r3, r0
 800189a:	60fb      	str	r3, [r7, #12]

  TIM4->CCR4 = temp_ccr4;
 800189c:	4a0c      	ldr	r2, [pc, #48]	; (80018d0 <set_motor_speed_4+0xa8>)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80018a2:	bf00      	nop
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	f3af 8000 	nop.w
 80018b0:	c28f5c29 	.word	0xc28f5c29
 80018b4:	3fdc28f5 	.word	0x3fdc28f5
 80018b8:	47ae147b 	.word	0x47ae147b
 80018bc:	3ff47ae1 	.word	0x3ff47ae1
 80018c0:	00000000 	.word	0x00000000
 80018c4:	412e8480 	.word	0x412e8480
 80018c8:	40590000 	.word	0x40590000
 80018cc:	408f4000 	.word	0x408f4000
 80018d0:	40000800 	.word	0x40000800
 80018d4:	00000000 	.word	0x00000000

080018d8 <set_motor_speed_5>:

void set_motor_speed_5(int motor_speed) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7fe fddf 	bl	80004a4 <__aeabi_i2d>
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b23      	ldr	r3, [pc, #140]	; (8001978 <set_motor_speed_5+0xa0>)
 80018ec:	f7fe ff6e 	bl	80007cc <__aeabi_ddiv>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	a319      	add	r3, pc, #100	; (adr r3, 8001960 <set_motor_speed_5+0x88>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fe3b 	bl	8000578 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	a317      	add	r3, pc, #92	; (adr r3, 8001968 <set_motor_speed_5+0x90>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7fe fc7c 	bl	800020c <__adddf3>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr1 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	4b16      	ldr	r3, [pc, #88]	; (800197c <set_motor_speed_5+0xa4>)
 8001922:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001926:	f7fe ff51 	bl	80007cc <__aeabi_ddiv>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	a30f      	add	r3, pc, #60	; (adr r3, 8001970 <set_motor_speed_5+0x98>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe fe1e 	bl	8000578 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f7ff f8c8 	bl	8000ad8 <__aeabi_d2iz>
 8001948:	4603      	mov	r3, r0
 800194a:	60fb      	str	r3, [r7, #12]

  TIM5->CCR1 = temp_ccr1;
 800194c:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <set_motor_speed_5+0xa8>)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	f3af 8000 	nop.w
 8001960:	c28f5c29 	.word	0xc28f5c29
 8001964:	3fdc28f5 	.word	0x3fdc28f5
 8001968:	47ae147b 	.word	0x47ae147b
 800196c:	3ff47ae1 	.word	0x3ff47ae1
 8001970:	00000000 	.word	0x00000000
 8001974:	412e8480 	.word	0x412e8480
 8001978:	40590000 	.word	0x40590000
 800197c:	408f4000 	.word	0x408f4000
 8001980:	40000c00 	.word	0x40000c00
 8001984:	00000000 	.word	0x00000000

08001988 <set_motor_speed_6>:
void set_motor_speed_6(int motor_speed) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7fe fd87 	bl	80004a4 <__aeabi_i2d>
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <set_motor_speed_6+0xa0>)
 800199c:	f7fe ff16 	bl	80007cc <__aeabi_ddiv>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	a319      	add	r3, pc, #100	; (adr r3, 8001a10 <set_motor_speed_6+0x88>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	f7fe fde3 	bl	8000578 <__aeabi_dmul>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	a317      	add	r3, pc, #92	; (adr r3, 8001a18 <set_motor_speed_6+0x90>)
 80019bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c0:	f7fe fc24 	bl	800020c <__adddf3>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr3 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <set_motor_speed_6+0xa4>)
 80019d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019d6:	f7fe fef9 	bl	80007cc <__aeabi_ddiv>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	a30f      	add	r3, pc, #60	; (adr r3, 8001a20 <set_motor_speed_6+0x98>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	f7fe fdc6 	bl	8000578 <__aeabi_dmul>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7ff f870 	bl	8000ad8 <__aeabi_d2iz>
 80019f8:	4603      	mov	r3, r0
 80019fa:	60fb      	str	r3, [r7, #12]

  TIM5->CCR3 = temp_ccr3;
 80019fc:	4a0c      	ldr	r2, [pc, #48]	; (8001a30 <set_motor_speed_6+0xa8>)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	f3af 8000 	nop.w
 8001a10:	c28f5c29 	.word	0xc28f5c29
 8001a14:	3fdc28f5 	.word	0x3fdc28f5
 8001a18:	47ae147b 	.word	0x47ae147b
 8001a1c:	3ff47ae1 	.word	0x3ff47ae1
 8001a20:	00000000 	.word	0x00000000
 8001a24:	412e8480 	.word	0x412e8480
 8001a28:	40590000 	.word	0x40590000
 8001a2c:	408f4000 	.word	0x408f4000
 8001a30:	40000c00 	.word	0x40000c00

08001a34 <screenInit>:

void screenInit () {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	ILI9341_Unselect();
 8001a38:	f7ff fa6e 	bl	8000f18 <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 8001a3c:	f7ff fd88 	bl	8001550 <ILI9341_TouchUnselect>
	ILI9341_Init();
 8001a40:	f7ff fb18 	bl	8001074 <ILI9341_Init>
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <reverse>:

void reverse(char* str, int len)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001a5c:	e018      	b.n	8001a90 <reverse+0x48>
        temp = str[i];
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	441a      	add	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	440b      	add	r3, r1
 8001a74:	7812      	ldrb	r2, [r2, #0]
 8001a76:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	701a      	strb	r2, [r3, #0]
        i++;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3301      	adds	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
        j--;
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	dbe2      	blt.n	8001a5e <reverse+0x16>
    }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	371c      	adds	r7, #28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <intToStr>:

int intToStr(int x, char str[], int d)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
    while (x) {
 8001ab8:	e01d      	b.n	8001af6 <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <intToStr+0x8c>)
 8001abe:	fb83 1302 	smull	r1, r3, r3, r2
 8001ac2:	1099      	asrs	r1, r3, #2
 8001ac4:	17d3      	asrs	r3, r2, #31
 8001ac6:	1ac9      	subs	r1, r1, r3
 8001ac8:	460b      	mov	r3, r1
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	1ad1      	subs	r1, r2, r3
 8001ad2:	b2ca      	uxtb	r2, r1
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	1c59      	adds	r1, r3, #1
 8001ad8:	6179      	str	r1, [r7, #20]
 8001ada:	4619      	mov	r1, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	440b      	add	r3, r1
 8001ae0:	3230      	adds	r2, #48	; 0x30
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <intToStr+0x8c>)
 8001aea:	fb82 1203 	smull	r1, r2, r2, r3
 8001aee:	1092      	asrs	r2, r2, #2
 8001af0:	17db      	asrs	r3, r3, #31
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	60fb      	str	r3, [r7, #12]
    while (x) {
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1de      	bne.n	8001aba <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8001afc:	e007      	b.n	8001b0e <intToStr+0x66>
        str[i++] = '0';
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	617a      	str	r2, [r7, #20]
 8001b04:	461a      	mov	r2, r3
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	4413      	add	r3, r2
 8001b0a:	2230      	movs	r2, #48	; 0x30
 8001b0c:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	dbf3      	blt.n	8001afe <intToStr+0x56>

    reverse(str, i);
 8001b16:	6979      	ldr	r1, [r7, #20]
 8001b18:	68b8      	ldr	r0, [r7, #8]
 8001b1a:	f7ff ff95 	bl	8001a48 <reverse>
    str[i] = '\0';
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	4413      	add	r3, r2
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
    return i;
 8001b28:	697b      	ldr	r3, [r7, #20]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	66666667 	.word	0x66666667

08001b38 <ftoa>:

void ftoa(float n, char* res, int afterpoint)
{
 8001b38:	b5b0      	push	{r4, r5, r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b42:	60b8      	str	r0, [r7, #8]
 8001b44:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8001b46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4e:	ee17 3a90 	vmov	r3, s15
 8001b52:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	ee07 3a90 	vmov	s15, r3
 8001b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b66:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	69f8      	ldr	r0, [r7, #28]
 8001b70:	f7ff ff9a 	bl	8001aa8 <intToStr>
 8001b74:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d030      	beq.n	8001bde <ftoa+0xa6>
        res[i] = '.'; // add dot
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	4413      	add	r3, r2
 8001b82:	222e      	movs	r2, #46	; 0x2e
 8001b84:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8001b86:	69b8      	ldr	r0, [r7, #24]
 8001b88:	f7fe fc9e 	bl	80004c8 <__aeabi_f2d>
 8001b8c:	4604      	mov	r4, r0
 8001b8e:	460d      	mov	r5, r1
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7fe fc87 	bl	80004a4 <__aeabi_i2d>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	ec43 2b11 	vmov	d1, r2, r3
 8001b9e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001be8 <ftoa+0xb0>
 8001ba2:	f00a ff13 	bl	800c9cc <pow>
 8001ba6:	ec53 2b10 	vmov	r2, r3, d0
 8001baa:	4620      	mov	r0, r4
 8001bac:	4629      	mov	r1, r5
 8001bae:	f7fe fce3 	bl	8000578 <__aeabi_dmul>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f7fe ffd5 	bl	8000b68 <__aeabi_d2f>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8001bc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	ee17 0a90 	vmov	r0, s15
 8001bda:	f7ff ff65 	bl	8001aa8 <intToStr>
    }
}
 8001bde:	bf00      	nop
 8001be0:	3720      	adds	r7, #32
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bdb0      	pop	{r4, r5, r7, pc}
 8001be6:	bf00      	nop
 8001be8:	00000000 	.word	0x00000000
 8001bec:	40240000 	.word	0x40240000

08001bf0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af04      	add	r7, sp, #16
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == 64) {
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	2b40      	cmp	r3, #64	; 0x40
 8001bfe:	d10a      	bne.n	8001c16 <HAL_GPIO_EXTI_Callback+0x26>
		if (startFlag) {
 8001c00:	4b62      	ldr	r3, [pc, #392]	; (8001d8c <HAL_GPIO_EXTI_Callback+0x19c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_EXTI_Callback+0x20>
			startFlag = 0;
 8001c08:	4b60      	ldr	r3, [pc, #384]	; (8001d8c <HAL_GPIO_EXTI_Callback+0x19c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	e002      	b.n	8001c16 <HAL_GPIO_EXTI_Callback+0x26>
		} else {
			startFlag = 1;
 8001c10:	4b5e      	ldr	r3, [pc, #376]	; (8001d8c <HAL_GPIO_EXTI_Callback+0x19c>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
		}
	}

	if(startFlag){
 8001c16:	4b5d      	ldr	r3, [pc, #372]	; (8001d8c <HAL_GPIO_EXTI_Callback+0x19c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d043      	beq.n	8001ca6 <HAL_GPIO_EXTI_Callback+0xb6>

		ILI9341_WriteString(35, 30, "PUSH BUTTON", Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
 8001c1e:	4b5c      	ldr	r3, [pc, #368]	; (8001d90 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	9202      	str	r2, [sp, #8]
 8001c24:	2200      	movs	r2, #0
 8001c26:	9201      	str	r2, [sp, #4]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	9200      	str	r2, [sp, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a59      	ldr	r2, [pc, #356]	; (8001d94 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001c30:	211e      	movs	r1, #30
 8001c32:	2023      	movs	r0, #35	; 0x23
 8001c34:	f7ff fbc1 	bl	80013ba <ILI9341_WriteString>
		ILI9341_WriteString(45, 60, "TO START", Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
 8001c38:	4b55      	ldr	r3, [pc, #340]	; (8001d90 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	9202      	str	r2, [sp, #8]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	9201      	str	r2, [sp, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	9200      	str	r2, [sp, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a53      	ldr	r2, [pc, #332]	; (8001d98 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001c4a:	213c      	movs	r1, #60	; 0x3c
 8001c4c:	202d      	movs	r0, #45	; 0x2d
 8001c4e:	f7ff fbb4 	bl	80013ba <ILI9341_WriteString>
		ILI9341_WriteString(10, 0, "String Detected:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001c52:	4b52      	ldr	r3, [pc, #328]	; (8001d9c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	9202      	str	r2, [sp, #8]
 8001c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c5c:	9201      	str	r2, [sp, #4]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	9200      	str	r2, [sp, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a4e      	ldr	r2, [pc, #312]	; (8001da0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001c66:	2100      	movs	r1, #0
 8001c68:	200a      	movs	r0, #10
 8001c6a:	f7ff fba6 	bl	80013ba <ILI9341_WriteString>
		//ILI9341_WriteString(100, 30, detected_string, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
		ILI9341_WriteString(10, 60, "Actual Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001c6e:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	9202      	str	r2, [sp, #8]
 8001c74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c78:	9201      	str	r2, [sp, #4]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	9200      	str	r2, [sp, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a48      	ldr	r2, [pc, #288]	; (8001da4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001c82:	213c      	movs	r1, #60	; 0x3c
 8001c84:	200a      	movs	r0, #10
 8001c86:	f7ff fb98 	bl	80013ba <ILI9341_WriteString>
		//ILI9341_WriteString(100, 90, charFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
		ILI9341_WriteString(10, 120, "Desired Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001c8a:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	9202      	str	r2, [sp, #8]
 8001c90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c94:	9201      	str	r2, [sp, #4]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	9200      	str	r2, [sp, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a42      	ldr	r2, [pc, #264]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001c9e:	2178      	movs	r1, #120	; 0x78
 8001ca0:	200a      	movs	r0, #10
 8001ca2:	f7ff fb8a 	bl	80013ba <ILI9341_WriteString>
		//ILI9341_WriteString(100, 150, desiredFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);

	}

	if(!startFlag){
 8001ca6:	4b39      	ldr	r3, [pc, #228]	; (8001d8c <HAL_GPIO_EXTI_Callback+0x19c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d169      	bne.n	8001d82 <HAL_GPIO_EXTI_Callback+0x192>
		ILI9341_WriteString(10, 0, "String Detected:", Font_11x18, ILI9341_BLACK, ILI9341_BLACK);
 8001cae:	4b3b      	ldr	r3, [pc, #236]	; (8001d9c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	9202      	str	r2, [sp, #8]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	9201      	str	r2, [sp, #4]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	9200      	str	r2, [sp, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a38      	ldr	r2, [pc, #224]	; (8001da0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	200a      	movs	r0, #10
 8001cc4:	f7ff fb79 	bl	80013ba <ILI9341_WriteString>
		ILI9341_WriteString(100, 30, "        ", Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
 8001cc8:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	9202      	str	r2, [sp, #8]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	9201      	str	r2, [sp, #4]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	9200      	str	r2, [sp, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a34      	ldr	r2, [pc, #208]	; (8001dac <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001cda:	211e      	movs	r1, #30
 8001cdc:	2064      	movs	r0, #100	; 0x64
 8001cde:	f7ff fb6c 	bl	80013ba <ILI9341_WriteString>
		ILI9341_WriteString(10, 60, "Actual Frequency:", Font_11x18, ILI9341_BLACK, ILI9341_BLACK);
 8001ce2:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	9202      	str	r2, [sp, #8]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	9201      	str	r2, [sp, #4]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	9200      	str	r2, [sp, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2c      	ldr	r2, [pc, #176]	; (8001da4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001cf4:	213c      	movs	r1, #60	; 0x3c
 8001cf6:	200a      	movs	r0, #10
 8001cf8:	f7ff fb5f 	bl	80013ba <ILI9341_WriteString>
		ILI9341_WriteString(100, 90, "        ", Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
 8001cfc:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	9202      	str	r2, [sp, #8]
 8001d02:	2200      	movs	r2, #0
 8001d04:	9201      	str	r2, [sp, #4]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	9200      	str	r2, [sp, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a27      	ldr	r2, [pc, #156]	; (8001dac <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001d0e:	215a      	movs	r1, #90	; 0x5a
 8001d10:	2064      	movs	r0, #100	; 0x64
 8001d12:	f7ff fb52 	bl	80013ba <ILI9341_WriteString>
		ILI9341_WriteString(10, 120, "Desired Frequency:", Font_11x18, ILI9341_BLACK, ILI9341_BLACK);
 8001d16:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	9202      	str	r2, [sp, #8]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	9201      	str	r2, [sp, #4]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	9200      	str	r2, [sp, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a20      	ldr	r2, [pc, #128]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001d28:	2178      	movs	r1, #120	; 0x78
 8001d2a:	200a      	movs	r0, #10
 8001d2c:	f7ff fb45 	bl	80013ba <ILI9341_WriteString>
		ILI9341_WriteString(100, 150, "        ", Font_16x26, ILI9341_BLACK, ILI9341_BLACK);
 8001d30:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	9202      	str	r2, [sp, #8]
 8001d36:	2200      	movs	r2, #0
 8001d38:	9201      	str	r2, [sp, #4]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	9200      	str	r2, [sp, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a1a      	ldr	r2, [pc, #104]	; (8001dac <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001d42:	2196      	movs	r1, #150	; 0x96
 8001d44:	2064      	movs	r0, #100	; 0x64
 8001d46:	f7ff fb38 	bl	80013ba <ILI9341_WriteString>
		ILI9341_WriteString(35, 30, "PUSH BUTTON", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	9202      	str	r2, [sp, #8]
 8001d50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d54:	9201      	str	r2, [sp, #4]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	9200      	str	r2, [sp, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001d5e:	211e      	movs	r1, #30
 8001d60:	2023      	movs	r0, #35	; 0x23
 8001d62:	f7ff fb2a 	bl	80013ba <ILI9341_WriteString>
		ILI9341_WriteString(45, 60, "TO START", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	9202      	str	r2, [sp, #8]
 8001d6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d70:	9201      	str	r2, [sp, #4]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	9200      	str	r2, [sp, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001d7a:	213c      	movs	r1, #60	; 0x3c
 8001d7c:	202d      	movs	r0, #45	; 0x2d
 8001d7e:	f7ff fb1c 	bl	80013ba <ILI9341_WriteString>
	}



}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000046c 	.word	0x2000046c
 8001d90:	20000008 	.word	0x20000008
 8001d94:	0800e444 	.word	0x0800e444
 8001d98:	0800e450 	.word	0x0800e450
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	0800e45c 	.word	0x0800e45c
 8001da4:	0800e470 	.word	0x0800e470
 8001da8:	0800e484 	.word	0x0800e484
 8001dac:	0800e498 	.word	0x0800e498

08001db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db0:	b5b0      	push	{r4, r5, r7, lr}
 8001db2:	f5ad 3d80 	sub.w	sp, sp, #65536	; 0x10000
 8001db6:	b0bc      	sub	sp, #240	; 0xf0
 8001db8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	convFlag = 0;
 8001dba:	4bc6      	ldr	r3, [pc, #792]	; (80020d4 <main+0x324>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
	//E (low), A, D, G, B, E (high)
	float32_t string_freqs[6] = {82.41, 110.0, 146.83, 196.0, 246.94, 329.63};
 8001dc0:	4bc5      	ldr	r3, [pc, #788]	; (80020d8 <main+0x328>)
 8001dc2:	f507 3480 	add.w	r4, r7, #65536	; 0x10000
 8001dc6:	f104 045c 	add.w	r4, r4, #92	; 0x5c
 8001dca:	461d      	mov	r5, r3
 8001dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001dd4:	e884 0003 	stmia.w	r4, {r0, r1}
	float32_t measured_freq;
	char *strings[] = {"E (low)", "A       ", "D       ", "G       ", "B       ", "E (high)" };
 8001dd8:	4bc0      	ldr	r3, [pc, #768]	; (80020dc <main+0x32c>)
 8001dda:	f507 3480 	add.w	r4, r7, #65536	; 0x10000
 8001dde:	f104 0444 	add.w	r4, r4, #68	; 0x44
 8001de2:	461d      	mov	r5, r3
 8001de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001de8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001dec:	e884 0003 	stmia.w	r4, {r0, r1}
	union Float_as_buffer {
		  float f;
		  uint8_t buf[4];
	 };

	uint16_t key = 0xFFFF;
 8001df0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df4:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001df8:	f102 0242 	add.w	r2, r2, #66	; 0x42
 8001dfc:	8013      	strh	r3, [r2, #0]

	uint8_t start = 0b1;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001e04:	f102 0241 	add.w	r2, r2, #65	; 0x41
 8001e08:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e0a:	f002 f9a4 	bl	8004156 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e0e:	f001 f869 	bl	8002ee4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001e12:	f001 f8ad 	bl	8002f70 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e16:	f001 fc1d 	bl	8003654 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e1a:	f001 fbf1 	bl	8003600 <MX_DMA_Init>
  MX_ADC1_Init();
 8001e1e:	f001 f8d7 	bl	8002fd0 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8001e22:	f001 f93b 	bl	800309c <MX_LPUART1_UART_Init>
  MX_SAI1_Init();
 8001e26:	f001 f9d1 	bl	80031cc <MX_SAI1_Init>
  MX_TIM1_Init();
 8001e2a:	f001 fa43 	bl	80032b4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001e2e:	f001 fb05 	bl	800343c <MX_TIM4_Init>
  MX_SPI1_Init();
 8001e32:	f001 fa01 	bl	8003238 <MX_SPI1_Init>
  MX_TIM5_Init();
 8001e36:	f001 fb7d 	bl	8003534 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001e3a:	f001 f97b 	bl	8003134 <MX_USART1_UART_Init>
  //arm_rfft_fast_init_f32(&fftHandler, BUFFER_LENGTH);

  float32_t signal[BUFFER_LENGTH];
  float32_t autocorrelation[BUFFER_LENGTH];

  uint32_t LOWEST_PERIOD = SAMPLING_RATE / 440; //440hz max
 8001e3e:	2304      	movs	r3, #4
 8001e40:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001e44:	f102 0284 	add.w	r2, r2, #132	; 0x84
 8001e48:	6013      	str	r3, [r2, #0]
  uint32_t HIGHEST_PERIOD = SAMPLING_RATE / 50; //60 Hz min (change to 50)
 8001e4a:	2329      	movs	r3, #41	; 0x29
 8001e4c:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001e50:	f102 0280 	add.w	r2, r2, #128	; 0x80
 8001e54:	6013      	str	r3, [r2, #0]

   volatile uint16_t ADC_BUFFER[BUFFER_LENGTH];

//  float32_t freq_resolution = (float32_t)SAMPLING_RATE / (float32_t)BUFFER_LENGTH;

  HAL_TIM_Base_Start_IT(&htim1);
 8001e56:	48a2      	ldr	r0, [pc, #648]	; (80020e0 <main+0x330>)
 8001e58:	f007 fc74 	bl	8009744 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	48a1      	ldr	r0, [pc, #644]	; (80020e4 <main+0x334>)
 8001e60:	f007 fd38 	bl	80098d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001e64:	2104      	movs	r1, #4
 8001e66:	489f      	ldr	r0, [pc, #636]	; (80020e4 <main+0x334>)
 8001e68:	f007 fd34 	bl	80098d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001e6c:	2108      	movs	r1, #8
 8001e6e:	489d      	ldr	r0, [pc, #628]	; (80020e4 <main+0x334>)
 8001e70:	f007 fd30 	bl	80098d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001e74:	210c      	movs	r1, #12
 8001e76:	489b      	ldr	r0, [pc, #620]	; (80020e4 <main+0x334>)
 8001e78:	f007 fd2c 	bl	80098d4 <HAL_TIM_PWM_Start>


  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	489a      	ldr	r0, [pc, #616]	; (80020e8 <main+0x338>)
 8001e80:	f007 fd28 	bl	80098d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001e84:	2108      	movs	r1, #8
 8001e86:	4898      	ldr	r0, [pc, #608]	; (80020e8 <main+0x338>)
 8001e88:	f007 fd24 	bl	80098d4 <HAL_TIM_PWM_Start>

  screenInit();
 8001e8c:	f7ff fdd2 	bl	8001a34 <screenInit>
  ILI9341_FillScreen(ILI9341_BLACK);
 8001e90:	2000      	movs	r0, #0
 8001e92:	f7ff fb4b 	bl	800152c <ILI9341_FillScreen>
  ILI9341_WriteString(35, 30, "PUSH BUTTON", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001e96:	4b95      	ldr	r3, [pc, #596]	; (80020ec <main+0x33c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	9202      	str	r2, [sp, #8]
 8001e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea0:	9201      	str	r2, [sp, #4]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	9200      	str	r2, [sp, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a91      	ldr	r2, [pc, #580]	; (80020f0 <main+0x340>)
 8001eaa:	211e      	movs	r1, #30
 8001eac:	2023      	movs	r0, #35	; 0x23
 8001eae:	f7ff fa84 	bl	80013ba <ILI9341_WriteString>
  ILI9341_WriteString(45, 60, "TO START", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001eb2:	4b8e      	ldr	r3, [pc, #568]	; (80020ec <main+0x33c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	9202      	str	r2, [sp, #8]
 8001eb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ebc:	9201      	str	r2, [sp, #4]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	9200      	str	r2, [sp, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a8b      	ldr	r2, [pc, #556]	; (80020f4 <main+0x344>)
 8001ec6:	213c      	movs	r1, #60	; 0x3c
 8001ec8:	202d      	movs	r0, #45	; 0x2d
 8001eca:	f7ff fa76 	bl	80013ba <ILI9341_WriteString>
  while (1)
  {



	while (startFlag) {
 8001ece:	f000 bff8 	b.w	8002ec2 <main+0x1112>
	 HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, BUFFER_LENGTH);
 8001ed2:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 8001ed6:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001eda:	3ba0      	subs	r3, #160	; 0xa0
 8001edc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4885      	ldr	r0, [pc, #532]	; (80020f8 <main+0x348>)
 8001ee4:	f002 fcf0 	bl	80048c8 <HAL_ADC_Start_DMA>
//	  }

	 //Calculate average of ADC values over a range, do this for both noise (to get a threshold) and for when the individual strings
	 //are strummed

	  while(convFlag == 0) {;}
 8001ee8:	bf00      	nop
 8001eea:	4b7a      	ldr	r3, [pc, #488]	; (80020d4 <main+0x324>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0fb      	beq.n	8001eea <main+0x13a>

	  float32_t output[BUFFER_LENGTH];
	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001ef8:	f102 02dc 	add.w	r2, r2, #220	; 0xdc
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e031      	b.n	8001f64 <main+0x1b4>
		  signal[i] = (double)(ADC_BUFFER[i]);
 8001f00:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 8001f04:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001f0e:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	f833 3ca0 	ldrh.w	r3, [r3, #-160]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fab0 	bl	8000484 <__aeabi_ui2d>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f7fe fe1c 	bl	8000b68 <__aeabi_d2f>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001f36:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001f40:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	3ba0      	subs	r3, #160	; 0xa0
 8001f4c:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 8001f4e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001f52:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001f5e:	f102 02dc 	add.w	r2, r2, #220	; 0xdc
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001f68:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f72:	dbc5      	blt.n	8001f00 <main+0x150>

	  }

	apply_hanning_window(&signal, BUFFER_LENGTH);
 8001f74:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001f78:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001f7c:	3b20      	subs	r3, #32
 8001f7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fb00 	bl	8001588 <apply_hanning_window>

    arm_rfft_fast_instance_f32 fftInstance;


    // Initialize the FFT instance
    arm_rfft_fast_init_f32(&fftInstance, BUFFER_LENGTH);
 8001f88:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 8001f8c:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001f90:	3bb8      	subs	r3, #184	; 0xb8
 8001f92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f96:	4618      	mov	r0, r3
 8001f98:	f009 fd20 	bl	800b9dc <arm_rfft_fast_init_f32>


    arm_rfft_fast_f32(&fftInstance, signal, output, 0);
 8001f9c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8001fa0:	f102 0220 	add.w	r2, r2, #32
 8001fa4:	3ae0      	subs	r2, #224	; 0xe0
 8001fa6:	f507 4140 	add.w	r1, r7, #49152	; 0xc000
 8001faa:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8001fae:	3920      	subs	r1, #32
 8001fb0:	f507 40c1 	add.w	r0, r7, #24704	; 0x6080
 8001fb4:	f100 0060 	add.w	r0, r0, #96	; 0x60
 8001fb8:	38b8      	subs	r0, #184	; 0xb8
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f009 fdf2 	bl	800bba4 <arm_rfft_fast_f32>

    output[0] = 0;
 8001fc0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8001fc4:	f103 0320 	add.w	r3, r3, #32
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	f842 3ce0 	str.w	r3, [r2, #-224]
    output[1] = 0;
 8001fd2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8001fd6:	f103 0320 	add.w	r3, r3, #32
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	f842 3cdc 	str.w	r3, [r2, #-220]
//	  	    	 continue;
//	  	     }

    // Rest of the frequency bins (upto N/2)
    float32_t HPS[BUFFER_LENGTH / 2];
    for (uint32_t i = 0; i < BUFFER_LENGTH / 2; ++i) {
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001fea:	f102 02d8 	add.w	r2, r2, #216	; 0xd8
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	e061      	b.n	80020b6 <main+0x306>
        HPS[i] = sqrtf(output[2 * i] * output[2 * i] + output[2 * i + 1] * output[2 * i + 1]); // Real part
 8001ff2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001ff6:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8002002:	f102 0220 	add.w	r2, r2, #32
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	3be0      	subs	r3, #224	; 0xe0
 800200c:	ed93 7a00 	vldr	s14, [r3]
 8002010:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002014:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8002020:	f102 0220 	add.w	r2, r2, #32
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	3be0      	subs	r3, #224	; 0xe0
 800202a:	edd3 7a00 	vldr	s15, [r3]
 800202e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002032:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002036:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	3301      	adds	r3, #1
 8002040:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8002044:	f102 0220 	add.w	r2, r2, #32
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	3be0      	subs	r3, #224	; 0xe0
 800204e:	edd3 6a00 	vldr	s13, [r3]
 8002052:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002056:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	3301      	adds	r3, #1
 8002060:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8002064:	f102 0220 	add.w	r2, r2, #32
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	3be0      	subs	r3, #224	; 0xe0
 800206e:	edd3 7a00 	vldr	s15, [r3]
 8002072:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207a:	eeb0 0a67 	vmov.f32	s0, s15
 800207e:	f00a fd15 	bl	800caac <sqrtf>
 8002082:	eef0 7a40 	vmov.f32	s15, s0
 8002086:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800208a:	461a      	mov	r2, r3
 800208c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002090:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	3be0      	subs	r3, #224	; 0xe0
 800209c:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < BUFFER_LENGTH / 2; ++i) {
 80020a0:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80020a4:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	3301      	adds	r3, #1
 80020ac:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80020b0:	f102 02d8 	add.w	r2, r2, #216	; 0xd8
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80020ba:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020c4:	d395      	bcc.n	8001ff2 <main+0x242>
    }
//
    for(int i = 0; i < BUFFER_LENGTH / 4; i++) {
 80020c6:	2300      	movs	r3, #0
 80020c8:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80020cc:	f102 02d4 	add.w	r2, r2, #212	; 0xd4
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e0fc      	b.n	80022ce <main+0x51e>
 80020d4:	20000468 	.word	0x20000468
 80020d8:	0800e4a4 	.word	0x0800e4a4
 80020dc:	0800e500 	.word	0x0800e500
 80020e0:	20000384 	.word	0x20000384
 80020e4:	200003d0 	.word	0x200003d0
 80020e8:	2000041c 	.word	0x2000041c
 80020ec:	20000008 	.word	0x20000008
 80020f0:	0800e444 	.word	0x0800e444
 80020f4:	0800e450 	.word	0x0800e450
 80020f8:	2000009c 	.word	0x2000009c
 80020fc:	442a8000 	.word	0x442a8000
 8002100:	44000000 	.word	0x44000000
 8002104:	43cc8000 	.word	0x43cc8000

      HPS[i] = HPS[i] * HPS[2*i];
 8002108:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800210c:	461a      	mov	r2, r3
 800210e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002112:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	3be0      	subs	r3, #224	; 0xe0
 800211e:	ed93 7a00 	vldr	s14, [r3]
 8002122:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002126:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	3be0      	subs	r3, #224	; 0xe0
 8002138:	edd3 7a00 	vldr	s15, [r3]
 800213c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002140:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002144:	461a      	mov	r2, r3
 8002146:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800214a:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	3be0      	subs	r3, #224	; 0xe0
 8002156:	edc3 7a00 	vstr	s15, [r3]

      if(i < floorf(BUFFER_LENGTH / 6)) {
 800215a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800215e:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	ee07 3a90 	vmov	s15, r3
 8002168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800216c:	ed1f 7a1d 	vldr	s14, [pc, #-116]	; 80020fc <main+0x34c>
 8002170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002178:	d52a      	bpl.n	80021d0 <main+0x420>
        HPS[i] = HPS[i] * HPS[3*i];
 800217a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800217e:	461a      	mov	r2, r3
 8002180:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002184:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	3be0      	subs	r3, #224	; 0xe0
 8002190:	ed93 7a00 	vldr	s14, [r3]
 8002194:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002198:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	4613      	mov	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4413      	add	r3, r2
 80021a4:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	3be0      	subs	r3, #224	; 0xe0
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80021ba:	461a      	mov	r2, r3
 80021bc:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80021c0:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	3be0      	subs	r3, #224	; 0xe0
 80021cc:	edc3 7a00 	vstr	s15, [r3]
      }

      if(i < floorf(BUFFER_LENGTH / 8)) {
 80021d0:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80021d4:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	ee07 3a90 	vmov	s15, r3
 80021de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e2:	ed1f 7a39 	vldr	s14, [pc, #-228]	; 8002100 <main+0x350>
 80021e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ee:	d528      	bpl.n	8002242 <main+0x492>
        HPS[i] = HPS[i] * HPS[4*i];
 80021f0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80021f4:	461a      	mov	r2, r3
 80021f6:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80021fa:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	3be0      	subs	r3, #224	; 0xe0
 8002206:	ed93 7a00 	vldr	s14, [r3]
 800220a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800220e:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	3be0      	subs	r3, #224	; 0xe0
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002228:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800222c:	461a      	mov	r2, r3
 800222e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002232:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	3be0      	subs	r3, #224	; 0xe0
 800223e:	edc3 7a00 	vstr	s15, [r3]
      }

      if(i < floorf(BUFFER_LENGTH / 10)) {
 8002242:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002246:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	ee07 3a90 	vmov	s15, r3
 8002250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002254:	ed1f 7a55 	vldr	s14, [pc, #-340]	; 8002104 <main+0x354>
 8002258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002260:	d52a      	bpl.n	80022b8 <main+0x508>
    	  HPS[i] = HPS[i] * HPS[5*i];
 8002262:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002266:	461a      	mov	r2, r3
 8002268:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800226c:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	3be0      	subs	r3, #224	; 0xe0
 8002278:	ed93 7a00 	vldr	s14, [r3]
 800227c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002280:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	3be0      	subs	r3, #224	; 0xe0
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800229e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022a2:	461a      	mov	r2, r3
 80022a4:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80022a8:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	3be0      	subs	r3, #224	; 0xe0
 80022b4:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < BUFFER_LENGTH / 4; i++) {
 80022b8:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80022bc:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3301      	adds	r3, #1
 80022c4:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80022c8:	f102 02d4 	add.w	r2, r2, #212	; 0xd4
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80022d2:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022dc:	f6ff af14 	blt.w	8002108 <main+0x358>

    }


    //Filter lower and higher frequencies, 30Hz and 450 Hz
    for(int i = 0; i < 50; ++i){
 80022e0:	2300      	movs	r3, #0
 80022e2:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80022e6:	f102 02d0 	add.w	r2, r2, #208	; 0xd0
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	e018      	b.n	8002320 <main+0x570>
    	HPS[i] = 0;
 80022ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022f2:	461a      	mov	r2, r3
 80022f4:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80022f8:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	3be0      	subs	r3, #224	; 0xe0
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 50; ++i){
 800230a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800230e:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3301      	adds	r3, #1
 8002316:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800231a:	f102 02d0 	add.w	r2, r2, #208	; 0xd0
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002324:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b31      	cmp	r3, #49	; 0x31
 800232c:	dddf      	ble.n	80022ee <main+0x53e>
    }
    for(int i = 370; i < BUFFER_LENGTH / 2; ++i){ //370 since likely will never be higher and issues with 3rd string harmonics
 800232e:	f44f 73b9 	mov.w	r3, #370	; 0x172
 8002332:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002336:	f102 02cc 	add.w	r2, r2, #204	; 0xcc
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	e018      	b.n	8002370 <main+0x5c0>
    	HPS[i] = 0;
 800233e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002342:	461a      	mov	r2, r3
 8002344:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002348:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	3be0      	subs	r3, #224	; 0xe0
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
    for(int i = 370; i < BUFFER_LENGTH / 2; ++i){ //370 since likely will never be higher and issues with 3rd string harmonics
 800235a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800235e:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800236a:	f102 02cc 	add.w	r2, r2, #204	; 0xcc
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002374:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800237e:	dbde      	blt.n	800233e <main+0x58e>
    }

    float32_t average;
	arm_mean_f32(HPS, BUFFER_LENGTH/2, &average);
 8002380:	f507 42c1 	add.w	r2, r7, #24704	; 0x6080
 8002384:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8002388:	3abc      	subs	r2, #188	; 0xbc
 800238a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800238e:	3be0      	subs	r3, #224	; 0xe0
 8002390:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002394:	4618      	mov	r0, r3
 8002396:	f009 f9af 	bl	800b6f8 <arm_mean_f32>
	if(average < (1E20)){ //Based on sampled data,see spreadsheet
 800239a:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 800239e:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80023a2:	f853 3cbc 	ldr.w	r3, [r3, #-188]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe f88e 	bl	80004c8 <__aeabi_f2d>
 80023ac:	f20f 538c 	addw	r3, pc, #1420	; 0x58c
 80023b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b4:	f7fe fb52 	bl	8000a5c <__aeabi_dcmplt>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f040 857e 	bne.w	8002ebc <main+0x110c>
		continue;
	}


    int max_peak = 0;
 80023c0:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80023c4:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80023c8:	461a      	mov	r2, r3
 80023ca:	2300      	movs	r3, #0
 80023cc:	f842 3cc0 	str.w	r3, [r2, #-192]
    int max_mag = 0;
 80023d0:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80023d4:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80023d8:	461a      	mov	r2, r3
 80023da:	2300      	movs	r3, #0
 80023dc:	f842 3cc4 	str.w	r3, [r2, #-196]
    arm_max_f32(HPS, BUFFER_LENGTH / 2, &max_mag, &max_peak);
 80023e0:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80023e4:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80023e8:	3bc0      	subs	r3, #192	; 0xc0
 80023ea:	f507 42c1 	add.w	r2, r7, #24704	; 0x6080
 80023ee:	f102 0260 	add.w	r2, r2, #96	; 0x60
 80023f2:	3ac4      	subs	r2, #196	; 0xc4
 80023f4:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80023f8:	38e0      	subs	r0, #224	; 0xe0
 80023fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023fe:	f009 f9b9 	bl	800b774 <arm_max_f32>

    float32_t measured_freq = max_peak * (2* SAMPLING_RATE/(BUFFER_LENGTH));
 8002402:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 8002406:	f103 0360 	add.w	r3, r3, #96	; 0x60
 800240a:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe f848 	bl	80004a4 <__aeabi_i2d>
 8002414:	f20f 532c 	addw	r3, pc, #1324	; 0x52c
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	f7fe f8ac 	bl	8000578 <__aeabi_dmul>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	f7fe fb9e 	bl	8000b68 <__aeabi_d2f>
 800242c:	4603      	mov	r3, r0
 800242e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002432:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8002436:	6013      	str	r3, [r2, #0]

	     //Match frequency to string

	     //find smallest magnitude of distance
	     float32_t min_freqs[6];
	     for(int i = 0; i < 6; ++i){
 8002438:	2300      	movs	r3, #0
 800243a:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800243e:	f102 02c8 	add.w	r2, r2, #200	; 0xc8
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	e02f      	b.n	80024a6 <main+0x6f6>
	    	 min_freqs[i] = string_freqs[i] - measured_freq;
 8002446:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800244a:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002456:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 800245a:	443b      	add	r3, r7
 800245c:	3b84      	subs	r3, #132	; 0x84
 800245e:	ed93 7a00 	vldr	s14, [r3]
 8002462:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002466:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002472:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 8002476:	f103 0360 	add.w	r3, r3, #96	; 0x60
 800247a:	461a      	mov	r2, r3
 800247c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002480:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	3bdc      	subs	r3, #220	; 0xdc
 800248c:	edc3 7a00 	vstr	s15, [r3]
	     for(int i = 0; i < 6; ++i){
 8002490:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002494:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3301      	adds	r3, #1
 800249c:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80024a0:	f102 02c8 	add.w	r2, r2, #200	; 0xc8
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80024aa:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b05      	cmp	r3, #5
 80024b2:	ddc8      	ble.n	8002446 <main+0x696>
	     }

	     arm_abs_f32(min_freqs, min_freqs, 6);
 80024b4:	f507 41c1 	add.w	r1, r7, #24704	; 0x6080
 80024b8:	f101 0160 	add.w	r1, r1, #96	; 0x60
 80024bc:	39dc      	subs	r1, #220	; 0xdc
 80024be:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80024c2:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80024c6:	3bdc      	subs	r3, #220	; 0xdc
 80024c8:	2206      	movs	r2, #6
 80024ca:	4618      	mov	r0, r3
 80024cc:	f009 ff48 	bl	800c360 <arm_abs_f32>

	     //find the argmin
	     float32_t current_min = min_freqs[0];
 80024d0:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80024d4:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80024d8:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 80024dc:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80024e0:	f102 02c4 	add.w	r2, r2, #196	; 0xc4
 80024e4:	6013      	str	r3, [r2, #0]
	     uint8_t index = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80024ec:	f102 02c3 	add.w	r2, r2, #195	; 0xc3
 80024f0:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 80024f2:	2300      	movs	r3, #0
 80024f4:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80024f8:	f102 02bc 	add.w	r2, r2, #188	; 0xbc
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e041      	b.n	8002584 <main+0x7d4>
	    	 if (min_freqs[i] < current_min){
 8002500:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 8002504:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8002508:	461a      	mov	r2, r3
 800250a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800250e:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	3bdc      	subs	r3, #220	; 0xdc
 800251a:	edd3 7a00 	vldr	s15, [r3]
 800251e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002522:	f103 03c4 	add.w	r3, r3, #196	; 0xc4
 8002526:	ed93 7a00 	vldr	s14, [r3]
 800252a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002532:	dd1c      	ble.n	800256e <main+0x7be>
	    		 current_min = min_freqs[i];
 8002534:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 8002538:	f103 0360 	add.w	r3, r3, #96	; 0x60
 800253c:	461a      	mov	r2, r3
 800253e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002542:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	3bdc      	subs	r3, #220	; 0xdc
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002554:	f102 02c4 	add.w	r2, r2, #196	; 0xc4
 8002558:	6013      	str	r3, [r2, #0]
	    		 index = i;
 800255a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800255e:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002568:	f102 02c3 	add.w	r2, r2, #195	; 0xc3
 800256c:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 800256e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002572:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3301      	adds	r3, #1
 800257a:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800257e:	f102 02bc 	add.w	r2, r2, #188	; 0xbc
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002588:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b05      	cmp	r3, #5
 8002590:	ddb6      	ble.n	8002500 <main+0x750>
	    	 }
	     }

	     //assign detected string
	     detected_string = strings[index];
 8002592:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002596:	f103 03c3 	add.w	r3, r3, #195	; 0xc3
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80025a2:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 80025a6:	443b      	add	r3, r7
 80025a8:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80025ac:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80025b0:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80025b4:	6013      	str	r3, [r2, #0]

	     string_offset = measured_freq - string_freqs[index];
 80025b6:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80025ba:	f103 03c3 	add.w	r3, r3, #195	; 0xc3
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80025c6:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 80025ca:	443b      	add	r3, r7
 80025cc:	3b84      	subs	r3, #132	; 0x84
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80025d6:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80025da:	ed93 7a00 	vldr	s14, [r3]
 80025de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80025e6:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80025ea:	edc3 7a00 	vstr	s15, [r3]


	     union Float_as_buffer actual_guitar_freq;
	     actual_guitar_freq.f = measured_freq;
 80025ee:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80025f2:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80025f6:	461a      	mov	r2, r3
 80025f8:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80025fc:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f842 3ce0 	str.w	r3, [r2, #-224]

	 // Transmit the string message
	  for (int i = 0; i < 3; ++i) {
 8002606:	2300      	movs	r3, #0
 8002608:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800260c:	f102 02b8 	add.w	r2, r2, #184	; 0xb8
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e029      	b.n	8002668 <main+0x8b8>
		  HAL_UART_Transmit(&huart1, &key,                 2, HAL_MAX_DELAY);
 8002614:	f507 3180 	add.w	r1, r7, #65536	; 0x10000
 8002618:	f101 0142 	add.w	r1, r1, #66	; 0x42
 800261c:	f04f 33ff 	mov.w	r3, #4294967295
 8002620:	2202      	movs	r2, #2
 8002622:	48bf      	ldr	r0, [pc, #764]	; (8002920 <main+0xb70>)
 8002624:	f008 f9c0 	bl	800a9a8 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &start,               1, HAL_MAX_DELAY);
 8002628:	f507 3180 	add.w	r1, r7, #65536	; 0x10000
 800262c:	f101 0141 	add.w	r1, r1, #65	; 0x41
 8002630:	f04f 33ff 	mov.w	r3, #4294967295
 8002634:	2201      	movs	r2, #1
 8002636:	48ba      	ldr	r0, [pc, #744]	; (8002920 <main+0xb70>)
 8002638:	f008 f9b6 	bl	800a9a8 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &actual_guitar_freq,  4, HAL_MAX_DELAY);
 800263c:	f507 41c1 	add.w	r1, r7, #24704	; 0x6080
 8002640:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8002644:	39e0      	subs	r1, #224	; 0xe0
 8002646:	f04f 33ff 	mov.w	r3, #4294967295
 800264a:	2204      	movs	r2, #4
 800264c:	48b4      	ldr	r0, [pc, #720]	; (8002920 <main+0xb70>)
 800264e:	f008 f9ab 	bl	800a9a8 <HAL_UART_Transmit>
	  for (int i = 0; i < 3; ++i) {
 8002652:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002656:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	3301      	adds	r3, #1
 800265e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002662:	f102 02b8 	add.w	r2, r2, #184	; 0xb8
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800266c:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b02      	cmp	r3, #2
 8002674:	ddce      	ble.n	8002614 <main+0x864>
	  }


	  ftoa(measured_freq, charFreq, 2);
 8002676:	2102      	movs	r1, #2
 8002678:	48aa      	ldr	r0, [pc, #680]	; (8002924 <main+0xb74>)
 800267a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800267e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8002682:	ed93 0a00 	vldr	s0, [r3]
 8002686:	f7ff fa57 	bl	8001b38 <ftoa>
	  ftoa(string_freqs[index], desiredFreq, 2);
 800268a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800268e:	f103 03c3 	add.w	r3, r3, #195	; 0xc3
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800269a:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 800269e:	443b      	add	r3, r7
 80026a0:	3b84      	subs	r3, #132	; 0x84
 80026a2:	edd3 7a00 	vldr	s15, [r3]
 80026a6:	2102      	movs	r1, #2
 80026a8:	489f      	ldr	r0, [pc, #636]	; (8002928 <main+0xb78>)
 80026aa:	eeb0 0a67 	vmov.f32	s0, s15
 80026ae:	f7ff fa43 	bl	8001b38 <ftoa>

	    if(!startFlag){
 80026b2:	4b9e      	ldr	r3, [pc, #632]	; (800292c <main+0xb7c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8402 	beq.w	8002ec0 <main+0x1110>
	     }




		ILI9341_WriteString(100, 30, detected_string, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80026bc:	4b9c      	ldr	r3, [pc, #624]	; (8002930 <main+0xb80>)
 80026be:	2200      	movs	r2, #0
 80026c0:	9202      	str	r2, [sp, #8]
 80026c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026c6:	9201      	str	r2, [sp, #4]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	9200      	str	r2, [sp, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80026d2:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	211e      	movs	r1, #30
 80026da:	2064      	movs	r0, #100	; 0x64
 80026dc:	f7fe fe6d 	bl	80013ba <ILI9341_WriteString>
		ILI9341_WriteString(100, 90, charFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80026e0:	4b93      	ldr	r3, [pc, #588]	; (8002930 <main+0xb80>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	9202      	str	r2, [sp, #8]
 80026e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ea:	9201      	str	r2, [sp, #4]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	9200      	str	r2, [sp, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a8c      	ldr	r2, [pc, #560]	; (8002924 <main+0xb74>)
 80026f4:	215a      	movs	r1, #90	; 0x5a
 80026f6:	2064      	movs	r0, #100	; 0x64
 80026f8:	f7fe fe5f 	bl	80013ba <ILI9341_WriteString>
		ILI9341_WriteString(100, 150, desiredFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 80026fc:	4b8c      	ldr	r3, [pc, #560]	; (8002930 <main+0xb80>)
 80026fe:	2200      	movs	r2, #0
 8002700:	9202      	str	r2, [sp, #8]
 8002702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002706:	9201      	str	r2, [sp, #4]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	9200      	str	r2, [sp, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a86      	ldr	r2, [pc, #536]	; (8002928 <main+0xb78>)
 8002710:	2196      	movs	r1, #150	; 0x96
 8002712:	2064      	movs	r0, #100	; 0x64
 8002714:	f7fe fe51 	bl	80013ba <ILI9341_WriteString>


	     //Tune strings (yeah yeah)
	     switch (index){
 8002718:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800271c:	f103 03c3 	add.w	r3, r3, #195	; 0xc3
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b05      	cmp	r3, #5
 8002724:	f200 83c3 	bhi.w	8002eae <main+0x10fe>
 8002728:	a201      	add	r2, pc, #4	; (adr r2, 8002730 <main+0x980>)
 800272a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272e:	bf00      	nop
 8002730:	08002749 	.word	0x08002749
 8002734:	08002875 	.word	0x08002875
 8002738:	080029e3 	.word	0x080029e3
 800273c:	08002b0f 	.word	0x08002b0f
 8002740:	08002c57 	.word	0x08002c57
 8002744:	08002d83 	.word	0x08002d83
	     	 case 0: //E low
	     		if(string_offset > 0){
 8002748:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800274c:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002750:	edd3 7a00 	vldr	s15, [r3]
 8002754:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275c:	dd3d      	ble.n	80027da <main+0xa2a>
				 uint32_t delay = floor(80 * string_offset);
 800275e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002762:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800295c <main+0xbac>
 800276e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002772:	ee17 0a90 	vmov	r0, s15
 8002776:	f7fd fea7 	bl	80004c8 <__aeabi_f2d>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	ec43 2b10 	vmov	d0, r2, r3
 8002782:	f00a fa05 	bl	800cb90 <floor>
 8002786:	ec53 2b10 	vmov	r2, r3, d0
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	f7fe f9cb 	bl	8000b28 <__aeabi_d2uiz>
 8002792:	4603      	mov	r3, r0
 8002794:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002798:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 800279c:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 800279e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80027a2:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d906      	bls.n	80027be <main+0xa0e>
					delay = MAX_DELAY;
 80027b0:	f240 23ee 	movw	r3, #750	; 0x2ee
 80027b4:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80027b8:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 80027bc:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_1(70);
 80027be:	2046      	movs	r0, #70	; 0x46
 80027c0:	f7fe ff2a 	bl	8001618 <set_motor_speed_1>
				  HAL_Delay(delay);
 80027c4:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80027c8:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	f001 fd37 	bl	8004240 <HAL_Delay>
				  set_motor_speed_1(50);
 80027d2:	2032      	movs	r0, #50	; 0x32
 80027d4:	f7fe ff20 	bl	8001618 <set_motor_speed_1>
				 }
				 set_motor_speed_1(17);
				 HAL_Delay(delay);
				 set_motor_speed_1(50);
				}
	     		 break;
 80027d8:	e369      	b.n	8002eae <main+0x10fe>
				else if(string_offset < 0){
 80027da:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80027de:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ee:	d400      	bmi.n	80027f2 <main+0xa42>
	     		 break;
 80027f0:	e35d      	b.n	8002eae <main+0x10fe>
				 uint32_t delay = floor(-1* (75 * string_offset));
 80027f2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80027f6:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80027fa:	edd3 7a00 	vldr	s15, [r3]
 80027fe:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002934 <main+0xb84>
 8002802:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002806:	eef1 7a67 	vneg.f32	s15, s15
 800280a:	ee17 3a90 	vmov	r3, s15
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd fe5a 	bl	80004c8 <__aeabi_f2d>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	ec43 2b10 	vmov	d0, r2, r3
 800281c:	f00a f9b8 	bl	800cb90 <floor>
 8002820:	ec53 2b10 	vmov	r2, r3, d0
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	f7fe f97e 	bl	8000b28 <__aeabi_d2uiz>
 800282c:	4603      	mov	r3, r0
 800282e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002832:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 8002836:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8002838:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800283c:	f103 03b0 	add.w	r3, r3, #176	; 0xb0
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002846:	4293      	cmp	r3, r2
 8002848:	d906      	bls.n	8002858 <main+0xaa8>
					delay = MAX_DELAY;
 800284a:	f240 23ee 	movw	r3, #750	; 0x2ee
 800284e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002852:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 8002856:	6013      	str	r3, [r2, #0]
				 set_motor_speed_1(17);
 8002858:	2011      	movs	r0, #17
 800285a:	f7fe fedd 	bl	8001618 <set_motor_speed_1>
				 HAL_Delay(delay);
 800285e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002862:	f103 03b0 	add.w	r3, r3, #176	; 0xb0
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	f001 fcea 	bl	8004240 <HAL_Delay>
				 set_motor_speed_1(50);
 800286c:	2032      	movs	r0, #50	; 0x32
 800286e:	f7fe fed3 	bl	8001618 <set_motor_speed_1>
	     		 break;
 8002872:	e31c      	b.n	8002eae <main+0x10fe>

	     	 case 1: //A
	     		if(string_offset > 0){
 8002874:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002878:	f103 0374 	add.w	r3, r3, #116	; 0x74
 800287c:	edd3 7a00 	vldr	s15, [r3]
 8002880:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002888:	dd3d      	ble.n	8002906 <main+0xb56>
				 uint32_t delay = floor(90 * string_offset);
 800288a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800288e:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002892:	edd3 7a00 	vldr	s15, [r3]
 8002896:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002938 <main+0xb88>
 800289a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800289e:	ee17 0a90 	vmov	r0, s15
 80028a2:	f7fd fe11 	bl	80004c8 <__aeabi_f2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	ec43 2b10 	vmov	d0, r2, r3
 80028ae:	f00a f96f 	bl	800cb90 <floor>
 80028b2:	ec53 2b10 	vmov	r2, r3, d0
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	f7fe f935 	bl	8000b28 <__aeabi_d2uiz>
 80028be:	4603      	mov	r3, r0
 80028c0:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80028c4:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 80028c8:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 80028ca:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80028ce:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80028d8:	4293      	cmp	r3, r2
 80028da:	d906      	bls.n	80028ea <main+0xb3a>
					delay = MAX_DELAY;
 80028dc:	f240 23ee 	movw	r3, #750	; 0x2ee
 80028e0:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80028e4:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 80028e8:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_2(72);
 80028ea:	2048      	movs	r0, #72	; 0x48
 80028ec:	f7fe feec 	bl	80016c8 <set_motor_speed_2>
				  HAL_Delay(delay);
 80028f0:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80028f4:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	f001 fca1 	bl	8004240 <HAL_Delay>
				  set_motor_speed_2(50);
 80028fe:	2032      	movs	r0, #50	; 0x32
 8002900:	f7fe fee2 	bl	80016c8 <set_motor_speed_2>
				 }
				 set_motor_speed_2(18);
				 HAL_Delay(delay);
				 set_motor_speed_2(50);
				}
	     		 break;
 8002904:	e2d3      	b.n	8002eae <main+0x10fe>
				else if(string_offset < 0){
 8002906:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800290a:	f103 0374 	add.w	r3, r3, #116	; 0x74
 800290e:	edd3 7a00 	vldr	s15, [r3]
 8002912:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291a:	d421      	bmi.n	8002960 <main+0xbb0>
	     		 break;
 800291c:	e2c7      	b.n	8002eae <main+0x10fe>
 800291e:	bf00      	nop
 8002920:	200001f8 	.word	0x200001f8
 8002924:	20000470 	.word	0x20000470
 8002928:	20000484 	.word	0x20000484
 800292c:	2000046c 	.word	0x2000046c
 8002930:	20000008 	.word	0x20000008
 8002934:	42960000 	.word	0x42960000
 8002938:	42b40000 	.word	0x42b40000
 800293c:	78b58c40 	.word	0x78b58c40
 8002940:	4415af1d 	.word	0x4415af1d
 8002944:	624dd2f2 	.word	0x624dd2f2
 8002948:	3ff00690 	.word	0x3ff00690
 800294c:	42c80000 	.word	0x42c80000
 8002950:	43020000 	.word	0x43020000
 8002954:	42e60000 	.word	0x42e60000
 8002958:	43200000 	.word	0x43200000
 800295c:	42a00000 	.word	0x42a00000
				 uint32_t delay = floor(-1* (100 * string_offset));
 8002960:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002964:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002968:	edd3 7a00 	vldr	s15, [r3]
 800296c:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 800294c <main+0xb9c>
 8002970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002974:	eef1 7a67 	vneg.f32	s15, s15
 8002978:	ee17 3a90 	vmov	r3, s15
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fda3 	bl	80004c8 <__aeabi_f2d>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	ec43 2b10 	vmov	d0, r2, r3
 800298a:	f00a f901 	bl	800cb90 <floor>
 800298e:	ec53 2b10 	vmov	r2, r3, d0
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	f7fe f8c7 	bl	8000b28 <__aeabi_d2uiz>
 800299a:	4603      	mov	r3, r0
 800299c:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80029a0:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 80029a4:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 80029a6:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80029aa:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d906      	bls.n	80029c6 <main+0xc16>
					delay = MAX_DELAY;
 80029b8:	f240 23ee 	movw	r3, #750	; 0x2ee
 80029bc:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80029c0:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 80029c4:	6013      	str	r3, [r2, #0]
				 set_motor_speed_2(18);
 80029c6:	2012      	movs	r0, #18
 80029c8:	f7fe fe7e 	bl	80016c8 <set_motor_speed_2>
				 HAL_Delay(delay);
 80029cc:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80029d0:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	f001 fc33 	bl	8004240 <HAL_Delay>
				 set_motor_speed_2(50);
 80029da:	2032      	movs	r0, #50	; 0x32
 80029dc:	f7fe fe74 	bl	80016c8 <set_motor_speed_2>
	     		 break;
 80029e0:	e265      	b.n	8002eae <main+0x10fe>

	     	 case 2: //D
	     		if(string_offset > 0){
 80029e2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80029e6:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f6:	dd3d      	ble.n	8002a74 <main+0xcc4>
				 uint32_t delay = floor(130 * string_offset); // (500/3 )
 80029f8:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80029fc:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002a00:	edd3 7a00 	vldr	s15, [r3]
 8002a04:	ed1f 7a2e 	vldr	s14, [pc, #-184]	; 8002950 <main+0xba0>
 8002a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a0c:	ee17 0a90 	vmov	r0, s15
 8002a10:	f7fd fd5a 	bl	80004c8 <__aeabi_f2d>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	ec43 2b10 	vmov	d0, r2, r3
 8002a1c:	f00a f8b8 	bl	800cb90 <floor>
 8002a20:	ec53 2b10 	vmov	r2, r3, d0
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	f7fe f87e 	bl	8000b28 <__aeabi_d2uiz>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002a32:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8002a36:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8002a38:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002a3c:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d906      	bls.n	8002a58 <main+0xca8>
					delay = MAX_DELAY;
 8002a4a:	f240 23ee 	movw	r3, #750	; 0x2ee
 8002a4e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002a52:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8002a56:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_3(70);
 8002a58:	2046      	movs	r0, #70	; 0x46
 8002a5a:	f7fe fe8d 	bl	8001778 <set_motor_speed_3>
				  HAL_Delay(delay);
 8002a5e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002a62:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	f001 fbea 	bl	8004240 <HAL_Delay>
				  set_motor_speed_3(50);
 8002a6c:	2032      	movs	r0, #50	; 0x32
 8002a6e:	f7fe fe83 	bl	8001778 <set_motor_speed_3>
				 }
				 set_motor_speed_3(18);
				 HAL_Delay(delay);
				 set_motor_speed_3(50);
	     		}
	     		 break;
 8002a72:	e21c      	b.n	8002eae <main+0x10fe>
				else if(string_offset < 0){
 8002a74:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002a78:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002a7c:	edd3 7a00 	vldr	s15, [r3]
 8002a80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a88:	d400      	bmi.n	8002a8c <main+0xcdc>
	     		 break;
 8002a8a:	e210      	b.n	8002eae <main+0x10fe>
				 uint32_t delay = floor(-1* (130 * string_offset)); // (500/3 )
 8002a8c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002a90:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002a94:	edd3 7a00 	vldr	s15, [r3]
 8002a98:	ed1f 7a53 	vldr	s14, [pc, #-332]	; 8002950 <main+0xba0>
 8002a9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aa0:	eef1 7a67 	vneg.f32	s15, s15
 8002aa4:	ee17 3a90 	vmov	r3, s15
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fd0d 	bl	80004c8 <__aeabi_f2d>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	ec43 2b10 	vmov	d0, r2, r3
 8002ab6:	f00a f86b 	bl	800cb90 <floor>
 8002aba:	ec53 2b10 	vmov	r2, r3, d0
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f7fe f831 	bl	8000b28 <__aeabi_d2uiz>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002acc:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 8002ad0:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8002ad2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002ad6:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d906      	bls.n	8002af2 <main+0xd42>
					delay = MAX_DELAY;
 8002ae4:	f240 23ee 	movw	r3, #750	; 0x2ee
 8002ae8:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002aec:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 8002af0:	6013      	str	r3, [r2, #0]
				 set_motor_speed_3(18);
 8002af2:	2012      	movs	r0, #18
 8002af4:	f7fe fe40 	bl	8001778 <set_motor_speed_3>
				 HAL_Delay(delay);
 8002af8:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002afc:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	f001 fb9d 	bl	8004240 <HAL_Delay>
				 set_motor_speed_3(50);
 8002b06:	2032      	movs	r0, #50	; 0x32
 8002b08:	f7fe fe36 	bl	8001778 <set_motor_speed_3>
	     		 break;
 8002b0c:	e1cf      	b.n	8002eae <main+0x10fe>

	     	 case 3: //G
	     		if(string_offset > 0){
 8002b0e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002b12:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002b16:	edd3 7a00 	vldr	s15, [r3]
 8002b1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b22:	dd3d      	ble.n	8002ba0 <main+0xdf0>
				 uint32_t delay = floor(115 * string_offset);
 8002b24:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002b28:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002b2c:	edd3 7a00 	vldr	s15, [r3]
 8002b30:	ed1f 7a78 	vldr	s14, [pc, #-480]	; 8002954 <main+0xba4>
 8002b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b38:	ee17 0a90 	vmov	r0, s15
 8002b3c:	f7fd fcc4 	bl	80004c8 <__aeabi_f2d>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	ec43 2b10 	vmov	d0, r2, r3
 8002b48:	f00a f822 	bl	800cb90 <floor>
 8002b4c:	ec53 2b10 	vmov	r2, r3, d0
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	f7fd ffe8 	bl	8000b28 <__aeabi_d2uiz>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002b5e:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 8002b62:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8002b64:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002b68:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d906      	bls.n	8002b84 <main+0xdd4>
				 	delay = MAX_DELAY;
 8002b76:	f240 23ee 	movw	r3, #750	; 0x2ee
 8002b7a:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002b7e:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 8002b82:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_4(72);
 8002b84:	2048      	movs	r0, #72	; 0x48
 8002b86:	f7fe fe4f 	bl	8001828 <set_motor_speed_4>
				  HAL_Delay(delay);
 8002b8a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002b8e:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	f001 fb54 	bl	8004240 <HAL_Delay>
				  set_motor_speed_4(50);
 8002b98:	2032      	movs	r0, #50	; 0x32
 8002b9a:	f7fe fe45 	bl	8001828 <set_motor_speed_4>
				 }
				 set_motor_speed_4(20);
				 HAL_Delay(delay);
				 set_motor_speed_4(50);
				}
	     		 break;
 8002b9e:	e186      	b.n	8002eae <main+0x10fe>
				else if(string_offset < 0 && string_offset < -1){
 8002ba0:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002ba4:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb4:	d400      	bmi.n	8002bb8 <main+0xe08>
	     		 break;
 8002bb6:	e17a      	b.n	8002eae <main+0x10fe>
				else if(string_offset < 0 && string_offset < -1){
 8002bb8:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002bbc:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002bc0:	edd3 7a00 	vldr	s15, [r3]
 8002bc4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002bc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd0:	d400      	bmi.n	8002bd4 <main+0xe24>
	     		 break;
 8002bd2:	e16c      	b.n	8002eae <main+0x10fe>
				 uint32_t delay = floor(-1* (160 * string_offset));
 8002bd4:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002bd8:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	ed1f 7aa3 	vldr	s14, [pc, #-652]	; 8002958 <main+0xba8>
 8002be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002be8:	eef1 7a67 	vneg.f32	s15, s15
 8002bec:	ee17 3a90 	vmov	r3, s15
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fd fc69 	bl	80004c8 <__aeabi_f2d>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	ec43 2b10 	vmov	d0, r2, r3
 8002bfe:	f009 ffc7 	bl	800cb90 <floor>
 8002c02:	ec53 2b10 	vmov	r2, r3, d0
 8002c06:	4610      	mov	r0, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f7fd ff8d 	bl	8000b28 <__aeabi_d2uiz>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002c14:	f102 0298 	add.w	r2, r2, #152	; 0x98
 8002c18:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8002c1a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002c1e:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d906      	bls.n	8002c3a <main+0xe8a>
				 	delay = MAX_DELAY;
 8002c2c:	f240 23ee 	movw	r3, #750	; 0x2ee
 8002c30:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002c34:	f102 0298 	add.w	r2, r2, #152	; 0x98
 8002c38:	6013      	str	r3, [r2, #0]
				 set_motor_speed_4(20);
 8002c3a:	2014      	movs	r0, #20
 8002c3c:	f7fe fdf4 	bl	8001828 <set_motor_speed_4>
				 HAL_Delay(delay);
 8002c40:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002c44:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	f001 faf9 	bl	8004240 <HAL_Delay>
				 set_motor_speed_4(50);
 8002c4e:	2032      	movs	r0, #50	; 0x32
 8002c50:	f7fe fdea 	bl	8001828 <set_motor_speed_4>
	     		 break;
 8002c54:	e12b      	b.n	8002eae <main+0x10fe>

	     	 case 4: //B
	     		if(string_offset > 0){ // COULD TEST FOR EXPECTED VALUE (BASED ON 1H range) when in tune
 8002c56:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002c5a:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002c5e:	edd3 7a00 	vldr	s15, [r3]
 8002c62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6a:	dd3d      	ble.n	8002ce8 <main+0xf38>
	     		 uint32_t delay = floor(80 * string_offset);	//OR could just do > 1 and let user decide when good, display in tune or sum
 8002c6c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002c70:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	ed1f 7ac8 	vldr	s14, [pc, #-800]	; 800295c <main+0xbac>
 8002c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c80:	ee17 0a90 	vmov	r0, s15
 8002c84:	f7fd fc20 	bl	80004c8 <__aeabi_f2d>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	ec43 2b10 	vmov	d0, r2, r3
 8002c90:	f009 ff7e 	bl	800cb90 <floor>
 8002c94:	ec53 2b10 	vmov	r2, r3, d0
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f7fd ff44 	bl	8000b28 <__aeabi_d2uiz>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002ca6:	f102 0294 	add.w	r2, r2, #148	; 0x94
 8002caa:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){								//Since it has 1 Hz accuracy might be nice to have it turn small amounts
 8002cac:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002cb0:	f103 0394 	add.w	r3, r3, #148	; 0x94
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d906      	bls.n	8002ccc <main+0xf1c>
				 	delay = MAX_DELAY;
 8002cbe:	f240 23ee 	movw	r3, #750	; 0x2ee
 8002cc2:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002cc6:	f102 0294 	add.w	r2, r2, #148	; 0x94
 8002cca:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_5(65);
 8002ccc:	2041      	movs	r0, #65	; 0x41
 8002cce:	f7fe fe03 	bl	80018d8 <set_motor_speed_5>
				  HAL_Delay(delay);
 8002cd2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002cd6:	f103 0394 	add.w	r3, r3, #148	; 0x94
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	f001 fab0 	bl	8004240 <HAL_Delay>
				  set_motor_speed_5(50);
 8002ce0:	2032      	movs	r0, #50	; 0x32
 8002ce2:	f7fe fdf9 	bl	80018d8 <set_motor_speed_5>
				 }
				 set_motor_speed_5(20);
				 HAL_Delay(delay);
				 set_motor_speed_5(50);
	     		}
	     		 break;
 8002ce6:	e0e2      	b.n	8002eae <main+0x10fe>
	     		else if(string_offset < 0){
 8002ce8:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002cec:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002cf0:	edd3 7a00 	vldr	s15, [r3]
 8002cf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfc:	d400      	bmi.n	8002d00 <main+0xf50>
	     		 break;
 8002cfe:	e0d6      	b.n	8002eae <main+0x10fe>
				 uint32_t delay = floor(-1* (60 * string_offset));
 8002d00:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002d04:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002d08:	edd3 7a00 	vldr	s15, [r3]
 8002d0c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002ed0 <main+0x1120>
 8002d10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d14:	eef1 7a67 	vneg.f32	s15, s15
 8002d18:	ee17 3a90 	vmov	r3, s15
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fd fbd3 	bl	80004c8 <__aeabi_f2d>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	ec43 2b10 	vmov	d0, r2, r3
 8002d2a:	f009 ff31 	bl	800cb90 <floor>
 8002d2e:	ec53 2b10 	vmov	r2, r3, d0
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	f7fd fef7 	bl	8000b28 <__aeabi_d2uiz>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002d40:	f102 0290 	add.w	r2, r2, #144	; 0x90
 8002d44:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8002d46:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002d4a:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d906      	bls.n	8002d66 <main+0xfb6>
				 	delay = MAX_DELAY;
 8002d58:	f240 23ee 	movw	r3, #750	; 0x2ee
 8002d5c:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002d60:	f102 0290 	add.w	r2, r2, #144	; 0x90
 8002d64:	6013      	str	r3, [r2, #0]
				 set_motor_speed_5(20);
 8002d66:	2014      	movs	r0, #20
 8002d68:	f7fe fdb6 	bl	80018d8 <set_motor_speed_5>
				 HAL_Delay(delay);
 8002d6c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002d70:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	f001 fa63 	bl	8004240 <HAL_Delay>
				 set_motor_speed_5(50);
 8002d7a:	2032      	movs	r0, #50	; 0x32
 8002d7c:	f7fe fdac 	bl	80018d8 <set_motor_speed_5>
	     		 break;
 8002d80:	e095      	b.n	8002eae <main+0x10fe>

	     	 case 5: //Low E
	     		if(string_offset > 0){
 8002d82:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002d86:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002d8a:	edd3 7a00 	vldr	s15, [r3]
 8002d8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d96:	dd3d      	ble.n	8002e14 <main+0x1064>
					 uint32_t delay = floor(125 * string_offset);
 8002d98:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002d9c:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002da0:	edd3 7a00 	vldr	s15, [r3]
 8002da4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002ed4 <main+0x1124>
 8002da8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dac:	ee17 0a90 	vmov	r0, s15
 8002db0:	f7fd fb8a 	bl	80004c8 <__aeabi_f2d>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	ec43 2b10 	vmov	d0, r2, r3
 8002dbc:	f009 fee8 	bl	800cb90 <floor>
 8002dc0:	ec53 2b10 	vmov	r2, r3, d0
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f7fd feae 	bl	8000b28 <__aeabi_d2uiz>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002dd2:	f102 028c 	add.w	r2, r2, #140	; 0x8c
 8002dd6:	6013      	str	r3, [r2, #0]
					 if(delay > MAX_DELAY){
 8002dd8:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002ddc:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d906      	bls.n	8002df8 <main+0x1048>
					 	delay = MAX_DELAY;
 8002dea:	f240 23ee 	movw	r3, #750	; 0x2ee
 8002dee:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002df2:	f102 028c 	add.w	r2, r2, #140	; 0x8c
 8002df6:	6013      	str	r3, [r2, #0]
					 }
					  set_motor_speed_6(65);
 8002df8:	2041      	movs	r0, #65	; 0x41
 8002dfa:	f7fe fdc5 	bl	8001988 <set_motor_speed_6>
					  HAL_Delay(delay);
 8002dfe:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002e02:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	f001 fa1a 	bl	8004240 <HAL_Delay>
					  set_motor_speed_6(50);
 8002e0c:	2032      	movs	r0, #50	; 0x32
 8002e0e:	f7fe fdbb 	bl	8001988 <set_motor_speed_6>
					 }
					 set_motor_speed_6(25);
					 HAL_Delay(delay);
					 set_motor_speed_6(50);
				 }
	     		 break;
 8002e12:	e04b      	b.n	8002eac <main+0x10fc>
	     		else if(string_offset < 0){
 8002e14:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002e18:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002e1c:	edd3 7a00 	vldr	s15, [r3]
 8002e20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e28:	d400      	bmi.n	8002e2c <main+0x107c>
	     		 break;
 8002e2a:	e03f      	b.n	8002eac <main+0x10fc>
					 uint32_t delay = floor(-1* (80 * string_offset));
 8002e2c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002e30:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002e34:	edd3 7a00 	vldr	s15, [r3]
 8002e38:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002ed8 <main+0x1128>
 8002e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e40:	eef1 7a67 	vneg.f32	s15, s15
 8002e44:	ee17 3a90 	vmov	r3, s15
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd fb3d 	bl	80004c8 <__aeabi_f2d>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	ec43 2b10 	vmov	d0, r2, r3
 8002e56:	f009 fe9b 	bl	800cb90 <floor>
 8002e5a:	ec53 2b10 	vmov	r2, r3, d0
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	f7fd fe61 	bl	8000b28 <__aeabi_d2uiz>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002e6c:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8002e70:	6013      	str	r3, [r2, #0]
					 if(delay > MAX_DELAY){
 8002e72:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002e76:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d906      	bls.n	8002e92 <main+0x10e2>
					 	delay = MAX_DELAY;
 8002e84:	f240 23ee 	movw	r3, #750	; 0x2ee
 8002e88:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002e8c:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8002e90:	6013      	str	r3, [r2, #0]
					 set_motor_speed_6(25);
 8002e92:	2019      	movs	r0, #25
 8002e94:	f7fe fd78 	bl	8001988 <set_motor_speed_6>
					 HAL_Delay(delay);
 8002e98:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002e9c:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	f001 f9cd 	bl	8004240 <HAL_Delay>
					 set_motor_speed_6(50);
 8002ea6:	2032      	movs	r0, #50	; 0x32
 8002ea8:	f7fe fd6e 	bl	8001988 <set_motor_speed_6>
	     		 break;
 8002eac:	bf00      	nop
	     }



	  //To prevent strum from previous affecting next
	  HAL_Delay(250);
 8002eae:	20fa      	movs	r0, #250	; 0xfa
 8002eb0:	f001 f9c6 	bl	8004240 <HAL_Delay>
	  convFlag = 0;
 8002eb4:	4b09      	ldr	r3, [pc, #36]	; (8002edc <main+0x112c>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	e002      	b.n	8002ec2 <main+0x1112>
		continue;
 8002ebc:	bf00      	nop
 8002ebe:	e000      	b.n	8002ec2 <main+0x1112>
	    	 continue;
 8002ec0:	bf00      	nop
	while (startFlag) {
 8002ec2:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <main+0x1130>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f47f a803 	bne.w	8001ed2 <main+0x122>
 8002ecc:	e7f9      	b.n	8002ec2 <main+0x1112>
 8002ece:	bf00      	nop
 8002ed0:	42700000 	.word	0x42700000
 8002ed4:	42fa0000 	.word	0x42fa0000
 8002ed8:	42a00000 	.word	0x42a00000
 8002edc:	20000468 	.word	0x20000468
 8002ee0:	2000046c 	.word	0x2000046c

08002ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b096      	sub	sp, #88	; 0x58
 8002ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	2244      	movs	r2, #68	; 0x44
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f009 fd38 	bl	800c968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ef8:	463b      	mov	r3, r7
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	609a      	str	r2, [r3, #8]
 8002f02:	60da      	str	r2, [r3, #12]
 8002f04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002f06:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002f0a:	f002 fff1 	bl	8005ef0 <HAL_PWREx_ControlVoltageScaling>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002f14:	f000 fd82 	bl	8003a1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002f18:	2310      	movs	r3, #16
 8002f1a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8002f24:	2370      	movs	r3, #112	; 0x70
 8002f26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	4618      	mov	r0, r3
 8002f32:	f003 f891 	bl	8006058 <HAL_RCC_OscConfig>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002f3c:	f000 fd6e 	bl	8003a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f40:	230f      	movs	r3, #15
 8002f42:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002f44:	2300      	movs	r3, #0
 8002f46:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f50:	2300      	movs	r3, #0
 8002f52:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f54:	463b      	mov	r3, r7
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f003 fc97 	bl	800688c <HAL_RCC_ClockConfig>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002f64:	f000 fd5a 	bl	8003a1c <Error_Handler>
  }
}
 8002f68:	bf00      	nop
 8002f6a:	3758      	adds	r7, #88	; 0x58
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b0a6      	sub	sp, #152	; 0x98
 8002f74:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f76:	1d3b      	adds	r3, r7, #4
 8002f78:	2294      	movs	r2, #148	; 0x94
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f009 fcf3 	bl	800c968 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 8002f82:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002f86:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002f8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002f94:	2301      	movs	r3, #1
 8002f96:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8002fac:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <PeriphCommonClock_Config+0x5c>)
 8002fae:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fb0:	1d3b      	adds	r3, r7, #4
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 ff28 	bl	8006e08 <HAL_RCCEx_PeriphCLKConfig>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8002fbe:	f000 fd2d 	bl	8003a1c <Error_Handler>
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	3798      	adds	r7, #152	; 0x98
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	01010000 	.word	0x01010000

08002fd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002fd6:	463b      	mov	r3, r7
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
 8002fe4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002fe6:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <MX_ADC1_Init+0xc0>)
 8002fe8:	4a2a      	ldr	r2, [pc, #168]	; (8003094 <MX_ADC1_Init+0xc4>)
 8002fea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002fec:	4b28      	ldr	r3, [pc, #160]	; (8003090 <MX_ADC1_Init+0xc0>)
 8002fee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002ff2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ff4:	4b26      	ldr	r3, [pc, #152]	; (8003090 <MX_ADC1_Init+0xc0>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ffa:	4b25      	ldr	r3, [pc, #148]	; (8003090 <MX_ADC1_Init+0xc0>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003000:	4b23      	ldr	r3, [pc, #140]	; (8003090 <MX_ADC1_Init+0xc0>)
 8003002:	2200      	movs	r2, #0
 8003004:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003006:	4b22      	ldr	r3, [pc, #136]	; (8003090 <MX_ADC1_Init+0xc0>)
 8003008:	2204      	movs	r2, #4
 800300a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800300c:	4b20      	ldr	r3, [pc, #128]	; (8003090 <MX_ADC1_Init+0xc0>)
 800300e:	2200      	movs	r2, #0
 8003010:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003012:	4b1f      	ldr	r3, [pc, #124]	; (8003090 <MX_ADC1_Init+0xc0>)
 8003014:	2200      	movs	r2, #0
 8003016:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <MX_ADC1_Init+0xc0>)
 800301a:	2201      	movs	r2, #1
 800301c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800301e:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <MX_ADC1_Init+0xc0>)
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8003026:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <MX_ADC1_Init+0xc0>)
 8003028:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800302c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800302e:	4b18      	ldr	r3, [pc, #96]	; (8003090 <MX_ADC1_Init+0xc0>)
 8003030:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003034:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003036:	4b16      	ldr	r3, [pc, #88]	; (8003090 <MX_ADC1_Init+0xc0>)
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800303e:	4b14      	ldr	r3, [pc, #80]	; (8003090 <MX_ADC1_Init+0xc0>)
 8003040:	2200      	movs	r2, #0
 8003042:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <MX_ADC1_Init+0xc0>)
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800304c:	4810      	ldr	r0, [pc, #64]	; (8003090 <MX_ADC1_Init+0xc0>)
 800304e:	f001 faf5 	bl	800463c <HAL_ADC_Init>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8003058:	f000 fce0 	bl	8003a1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800305c:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <MX_ADC1_Init+0xc8>)
 800305e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003060:	2306      	movs	r3, #6
 8003062:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8003064:	2307      	movs	r3, #7
 8003066:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003068:	237f      	movs	r3, #127	; 0x7f
 800306a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800306c:	2304      	movs	r3, #4
 800306e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003074:	463b      	mov	r3, r7
 8003076:	4619      	mov	r1, r3
 8003078:	4805      	ldr	r0, [pc, #20]	; (8003090 <MX_ADC1_Init+0xc0>)
 800307a:	f001 fcbd 	bl	80049f8 <HAL_ADC_ConfigChannel>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8003084:	f000 fcca 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003088:	bf00      	nop
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	2000009c 	.word	0x2000009c
 8003094:	50040000 	.word	0x50040000
 8003098:	04300002 	.word	0x04300002

0800309c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80030a0:	4b22      	ldr	r3, [pc, #136]	; (800312c <MX_LPUART1_UART_Init+0x90>)
 80030a2:	4a23      	ldr	r2, [pc, #140]	; (8003130 <MX_LPUART1_UART_Init+0x94>)
 80030a4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80030a6:	4b21      	ldr	r3, [pc, #132]	; (800312c <MX_LPUART1_UART_Init+0x90>)
 80030a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030ac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030ae:	4b1f      	ldr	r3, [pc, #124]	; (800312c <MX_LPUART1_UART_Init+0x90>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <MX_LPUART1_UART_Init+0x90>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80030ba:	4b1c      	ldr	r3, [pc, #112]	; (800312c <MX_LPUART1_UART_Init+0x90>)
 80030bc:	2200      	movs	r2, #0
 80030be:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <MX_LPUART1_UART_Init+0x90>)
 80030c2:	220c      	movs	r2, #12
 80030c4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030c6:	4b19      	ldr	r3, [pc, #100]	; (800312c <MX_LPUART1_UART_Init+0x90>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030cc:	4b17      	ldr	r3, [pc, #92]	; (800312c <MX_LPUART1_UART_Init+0x90>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030d2:	4b16      	ldr	r3, [pc, #88]	; (800312c <MX_LPUART1_UART_Init+0x90>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030d8:	4b14      	ldr	r3, [pc, #80]	; (800312c <MX_LPUART1_UART_Init+0x90>)
 80030da:	2200      	movs	r2, #0
 80030dc:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80030de:	4b13      	ldr	r3, [pc, #76]	; (800312c <MX_LPUART1_UART_Init+0x90>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80030e4:	4811      	ldr	r0, [pc, #68]	; (800312c <MX_LPUART1_UART_Init+0x90>)
 80030e6:	f007 fc0f 	bl	800a908 <HAL_UART_Init>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80030f0:	f000 fc94 	bl	8003a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030f4:	2100      	movs	r1, #0
 80030f6:	480d      	ldr	r0, [pc, #52]	; (800312c <MX_LPUART1_UART_Init+0x90>)
 80030f8:	f008 fa34 	bl	800b564 <HAL_UARTEx_SetTxFifoThreshold>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003102:	f000 fc8b 	bl	8003a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003106:	2100      	movs	r1, #0
 8003108:	4808      	ldr	r0, [pc, #32]	; (800312c <MX_LPUART1_UART_Init+0x90>)
 800310a:	f008 fa69 	bl	800b5e0 <HAL_UARTEx_SetRxFifoThreshold>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003114:	f000 fc82 	bl	8003a1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003118:	4804      	ldr	r0, [pc, #16]	; (800312c <MX_LPUART1_UART_Init+0x90>)
 800311a:	f008 f9ea 	bl	800b4f2 <HAL_UARTEx_DisableFifoMode>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003124:	f000 fc7a 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}
 800312c:	20000164 	.word	0x20000164
 8003130:	40008000 	.word	0x40008000

08003134 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003138:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <MX_USART1_UART_Init+0x90>)
 800313a:	4a23      	ldr	r2, [pc, #140]	; (80031c8 <MX_USART1_UART_Init+0x94>)
 800313c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800313e:	4b21      	ldr	r3, [pc, #132]	; (80031c4 <MX_USART1_UART_Init+0x90>)
 8003140:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003144:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003146:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <MX_USART1_UART_Init+0x90>)
 8003148:	2200      	movs	r2, #0
 800314a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800314c:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <MX_USART1_UART_Init+0x90>)
 800314e:	2200      	movs	r2, #0
 8003150:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003152:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <MX_USART1_UART_Init+0x90>)
 8003154:	2200      	movs	r2, #0
 8003156:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8003158:	4b1a      	ldr	r3, [pc, #104]	; (80031c4 <MX_USART1_UART_Init+0x90>)
 800315a:	2208      	movs	r2, #8
 800315c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800315e:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <MX_USART1_UART_Init+0x90>)
 8003160:	2200      	movs	r2, #0
 8003162:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003164:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <MX_USART1_UART_Init+0x90>)
 8003166:	2200      	movs	r2, #0
 8003168:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800316a:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <MX_USART1_UART_Init+0x90>)
 800316c:	2200      	movs	r2, #0
 800316e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003170:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <MX_USART1_UART_Init+0x90>)
 8003172:	2200      	movs	r2, #0
 8003174:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <MX_USART1_UART_Init+0x90>)
 8003178:	2200      	movs	r2, #0
 800317a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800317c:	4811      	ldr	r0, [pc, #68]	; (80031c4 <MX_USART1_UART_Init+0x90>)
 800317e:	f007 fbc3 	bl	800a908 <HAL_UART_Init>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003188:	f000 fc48 	bl	8003a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800318c:	2100      	movs	r1, #0
 800318e:	480d      	ldr	r0, [pc, #52]	; (80031c4 <MX_USART1_UART_Init+0x90>)
 8003190:	f008 f9e8 	bl	800b564 <HAL_UARTEx_SetTxFifoThreshold>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800319a:	f000 fc3f 	bl	8003a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800319e:	2100      	movs	r1, #0
 80031a0:	4808      	ldr	r0, [pc, #32]	; (80031c4 <MX_USART1_UART_Init+0x90>)
 80031a2:	f008 fa1d 	bl	800b5e0 <HAL_UARTEx_SetRxFifoThreshold>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80031ac:	f000 fc36 	bl	8003a1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80031b0:	4804      	ldr	r0, [pc, #16]	; (80031c4 <MX_USART1_UART_Init+0x90>)
 80031b2:	f008 f99e 	bl	800b4f2 <HAL_UARTEx_DisableFifoMode>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80031bc:	f000 fc2e 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	200001f8 	.word	0x200001f8
 80031c8:	40013800 	.word	0x40013800

080031cc <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80031d0:	4b16      	ldr	r3, [pc, #88]	; (800322c <MX_SAI1_Init+0x60>)
 80031d2:	4a17      	ldr	r2, [pc, #92]	; (8003230 <MX_SAI1_Init+0x64>)
 80031d4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80031d6:	4b15      	ldr	r3, [pc, #84]	; (800322c <MX_SAI1_Init+0x60>)
 80031d8:	2200      	movs	r2, #0
 80031da:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80031dc:	4b13      	ldr	r3, [pc, #76]	; (800322c <MX_SAI1_Init+0x60>)
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <MX_SAI1_Init+0x60>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80031e8:	4b10      	ldr	r3, [pc, #64]	; (800322c <MX_SAI1_Init+0x60>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <MX_SAI1_Init+0x60>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80031f4:	4b0d      	ldr	r3, [pc, #52]	; (800322c <MX_SAI1_Init+0x60>)
 80031f6:	4a0f      	ldr	r2, [pc, #60]	; (8003234 <MX_SAI1_Init+0x68>)
 80031f8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <MX_SAI1_Init+0x60>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8003200:	4b0a      	ldr	r3, [pc, #40]	; (800322c <MX_SAI1_Init+0x60>)
 8003202:	2200      	movs	r2, #0
 8003204:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <MX_SAI1_Init+0x60>)
 8003208:	2200      	movs	r2, #0
 800320a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800320c:	4b07      	ldr	r3, [pc, #28]	; (800322c <MX_SAI1_Init+0x60>)
 800320e:	2200      	movs	r2, #0
 8003210:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8003212:	2302      	movs	r3, #2
 8003214:	2200      	movs	r2, #0
 8003216:	2100      	movs	r1, #0
 8003218:	4804      	ldr	r0, [pc, #16]	; (800322c <MX_SAI1_Init+0x60>)
 800321a:	f005 fb41 	bl	80088a0 <HAL_SAI_InitProtocol>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 8003224:	f000 fbfa 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8003228:	bf00      	nop
 800322a:	bd80      	pop	{r7, pc}
 800322c:	2000028c 	.word	0x2000028c
 8003230:	40015404 	.word	0x40015404
 8003234:	0002ee00 	.word	0x0002ee00

08003238 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800323c:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <MX_SPI1_Init+0x74>)
 800323e:	4a1c      	ldr	r2, [pc, #112]	; (80032b0 <MX_SPI1_Init+0x78>)
 8003240:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003242:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <MX_SPI1_Init+0x74>)
 8003244:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003248:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800324a:	4b18      	ldr	r3, [pc, #96]	; (80032ac <MX_SPI1_Init+0x74>)
 800324c:	2200      	movs	r2, #0
 800324e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003250:	4b16      	ldr	r3, [pc, #88]	; (80032ac <MX_SPI1_Init+0x74>)
 8003252:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003256:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003258:	4b14      	ldr	r3, [pc, #80]	; (80032ac <MX_SPI1_Init+0x74>)
 800325a:	2200      	movs	r2, #0
 800325c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800325e:	4b13      	ldr	r3, [pc, #76]	; (80032ac <MX_SPI1_Init+0x74>)
 8003260:	2200      	movs	r2, #0
 8003262:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003264:	4b11      	ldr	r3, [pc, #68]	; (80032ac <MX_SPI1_Init+0x74>)
 8003266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800326a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <MX_SPI1_Init+0x74>)
 800326e:	2228      	movs	r2, #40	; 0x28
 8003270:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <MX_SPI1_Init+0x74>)
 8003274:	2200      	movs	r2, #0
 8003276:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <MX_SPI1_Init+0x74>)
 800327a:	2200      	movs	r2, #0
 800327c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <MX_SPI1_Init+0x74>)
 8003280:	2200      	movs	r2, #0
 8003282:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <MX_SPI1_Init+0x74>)
 8003286:	2207      	movs	r2, #7
 8003288:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <MX_SPI1_Init+0x74>)
 800328c:	2200      	movs	r2, #0
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <MX_SPI1_Init+0x74>)
 8003292:	2208      	movs	r2, #8
 8003294:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003296:	4805      	ldr	r0, [pc, #20]	; (80032ac <MX_SPI1_Init+0x74>)
 8003298:	f005 fe80 	bl	8008f9c <HAL_SPI_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80032a2:	f000 fbbb 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000320 	.word	0x20000320
 80032b0:	40013000 	.word	0x40013000

080032b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b09a      	sub	sp, #104	; 0x68
 80032b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	605a      	str	r2, [r3, #4]
 80032c4:	609a      	str	r2, [r3, #8]
 80032c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
 80032e4:	615a      	str	r2, [r3, #20]
 80032e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032e8:	1d3b      	adds	r3, r7, #4
 80032ea:	222c      	movs	r2, #44	; 0x2c
 80032ec:	2100      	movs	r1, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f009 fb3a 	bl	800c968 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80032f4:	4b4f      	ldr	r3, [pc, #316]	; (8003434 <MX_TIM1_Init+0x180>)
 80032f6:	4a50      	ldr	r2, [pc, #320]	; (8003438 <MX_TIM1_Init+0x184>)
 80032f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 194;
 80032fa:	4b4e      	ldr	r3, [pc, #312]	; (8003434 <MX_TIM1_Init+0x180>)
 80032fc:	22c2      	movs	r2, #194	; 0xc2
 80032fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003300:	4b4c      	ldr	r3, [pc, #304]	; (8003434 <MX_TIM1_Init+0x180>)
 8003302:	2200      	movs	r2, #0
 8003304:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8003306:	4b4b      	ldr	r3, [pc, #300]	; (8003434 <MX_TIM1_Init+0x180>)
 8003308:	2209      	movs	r2, #9
 800330a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800330c:	4b49      	ldr	r3, [pc, #292]	; (8003434 <MX_TIM1_Init+0x180>)
 800330e:	2200      	movs	r2, #0
 8003310:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003312:	4b48      	ldr	r3, [pc, #288]	; (8003434 <MX_TIM1_Init+0x180>)
 8003314:	2200      	movs	r2, #0
 8003316:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003318:	4b46      	ldr	r3, [pc, #280]	; (8003434 <MX_TIM1_Init+0x180>)
 800331a:	2200      	movs	r2, #0
 800331c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800331e:	4845      	ldr	r0, [pc, #276]	; (8003434 <MX_TIM1_Init+0x180>)
 8003320:	f006 f9b8 	bl	8009694 <HAL_TIM_Base_Init>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800332a:	f000 fb77 	bl	8003a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800332e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003332:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003334:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003338:	4619      	mov	r1, r3
 800333a:	483e      	ldr	r0, [pc, #248]	; (8003434 <MX_TIM1_Init+0x180>)
 800333c:	f006 fce4 	bl	8009d08 <HAL_TIM_ConfigClockSource>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003346:	f000 fb69 	bl	8003a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800334a:	483a      	ldr	r0, [pc, #232]	; (8003434 <MX_TIM1_Init+0x180>)
 800334c:	f006 fa6a 	bl	8009824 <HAL_TIM_PWM_Init>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003356:	f000 fb61 	bl	8003a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800335a:	2320      	movs	r3, #32
 800335c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800335e:	2300      	movs	r3, #0
 8003360:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003362:	2300      	movs	r3, #0
 8003364:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003366:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800336a:	4619      	mov	r1, r3
 800336c:	4831      	ldr	r0, [pc, #196]	; (8003434 <MX_TIM1_Init+0x180>)
 800336e:	f007 f9c5 	bl	800a6fc <HAL_TIMEx_MasterConfigSynchronization>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8003378:	f000 fb50 	bl	8003a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800337c:	2360      	movs	r3, #96	; 0x60
 800337e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003380:	2300      	movs	r3, #0
 8003382:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003384:	2300      	movs	r3, #0
 8003386:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003388:	2300      	movs	r3, #0
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800338c:	2300      	movs	r3, #0
 800338e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003390:	2300      	movs	r3, #0
 8003392:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003394:	2300      	movs	r3, #0
 8003396:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003398:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800339c:	2200      	movs	r2, #0
 800339e:	4619      	mov	r1, r3
 80033a0:	4824      	ldr	r0, [pc, #144]	; (8003434 <MX_TIM1_Init+0x180>)
 80033a2:	f006 fb9d 	bl	8009ae0 <HAL_TIM_PWM_ConfigChannel>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80033ac:	f000 fb36 	bl	8003a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80033b4:	2204      	movs	r2, #4
 80033b6:	4619      	mov	r1, r3
 80033b8:	481e      	ldr	r0, [pc, #120]	; (8003434 <MX_TIM1_Init+0x180>)
 80033ba:	f006 fb91 	bl	8009ae0 <HAL_TIM_PWM_ConfigChannel>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80033c4:	f000 fb2a 	bl	8003a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80033cc:	2208      	movs	r2, #8
 80033ce:	4619      	mov	r1, r3
 80033d0:	4818      	ldr	r0, [pc, #96]	; (8003434 <MX_TIM1_Init+0x180>)
 80033d2:	f006 fb85 	bl	8009ae0 <HAL_TIM_PWM_ConfigChannel>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80033dc:	f000 fb1e 	bl	8003a1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80033fe:	2300      	movs	r3, #0
 8003400:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800340c:	2300      	movs	r3, #0
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003410:	1d3b      	adds	r3, r7, #4
 8003412:	4619      	mov	r1, r3
 8003414:	4807      	ldr	r0, [pc, #28]	; (8003434 <MX_TIM1_Init+0x180>)
 8003416:	f007 f9f9 	bl	800a80c <HAL_TIMEx_ConfigBreakDeadTime>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8003420:	f000 fafc 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003424:	4803      	ldr	r0, [pc, #12]	; (8003434 <MX_TIM1_Init+0x180>)
 8003426:	f000 fd3f 	bl	8003ea8 <HAL_TIM_MspPostInit>

}
 800342a:	bf00      	nop
 800342c:	3768      	adds	r7, #104	; 0x68
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20000384 	.word	0x20000384
 8003438:	40012c00 	.word	0x40012c00

0800343c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	; 0x28
 8003440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003442:	f107 031c 	add.w	r3, r7, #28
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	605a      	str	r2, [r3, #4]
 800344c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800344e:	463b      	mov	r3, r7
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	611a      	str	r2, [r3, #16]
 800345c:	615a      	str	r2, [r3, #20]
 800345e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003460:	4b32      	ldr	r3, [pc, #200]	; (800352c <MX_TIM4_Init+0xf0>)
 8003462:	4a33      	ldr	r2, [pc, #204]	; (8003530 <MX_TIM4_Init+0xf4>)
 8003464:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8003466:	4b31      	ldr	r3, [pc, #196]	; (800352c <MX_TIM4_Init+0xf0>)
 8003468:	2207      	movs	r2, #7
 800346a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800346c:	4b2f      	ldr	r3, [pc, #188]	; (800352c <MX_TIM4_Init+0xf0>)
 800346e:	2200      	movs	r2, #0
 8003470:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8003472:	4b2e      	ldr	r3, [pc, #184]	; (800352c <MX_TIM4_Init+0xf0>)
 8003474:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003478:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800347a:	4b2c      	ldr	r3, [pc, #176]	; (800352c <MX_TIM4_Init+0xf0>)
 800347c:	2200      	movs	r2, #0
 800347e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003480:	4b2a      	ldr	r3, [pc, #168]	; (800352c <MX_TIM4_Init+0xf0>)
 8003482:	2200      	movs	r2, #0
 8003484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003486:	4829      	ldr	r0, [pc, #164]	; (800352c <MX_TIM4_Init+0xf0>)
 8003488:	f006 f9cc 	bl	8009824 <HAL_TIM_PWM_Init>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8003492:	f000 fac3 	bl	8003a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800349a:	2300      	movs	r3, #0
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800349e:	f107 031c 	add.w	r3, r7, #28
 80034a2:	4619      	mov	r1, r3
 80034a4:	4821      	ldr	r0, [pc, #132]	; (800352c <MX_TIM4_Init+0xf0>)
 80034a6:	f007 f929 	bl	800a6fc <HAL_TIMEx_MasterConfigSynchronization>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80034b0:	f000 fab4 	bl	8003a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034b4:	2360      	movs	r3, #96	; 0x60
 80034b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 80034b8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80034bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034be:	2300      	movs	r3, #0
 80034c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034c6:	463b      	mov	r3, r7
 80034c8:	2200      	movs	r2, #0
 80034ca:	4619      	mov	r1, r3
 80034cc:	4817      	ldr	r0, [pc, #92]	; (800352c <MX_TIM4_Init+0xf0>)
 80034ce:	f006 fb07 	bl	8009ae0 <HAL_TIM_PWM_ConfigChannel>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80034d8:	f000 faa0 	bl	8003a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034dc:	463b      	mov	r3, r7
 80034de:	2204      	movs	r2, #4
 80034e0:	4619      	mov	r1, r3
 80034e2:	4812      	ldr	r0, [pc, #72]	; (800352c <MX_TIM4_Init+0xf0>)
 80034e4:	f006 fafc 	bl	8009ae0 <HAL_TIM_PWM_ConfigChannel>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 80034ee:	f000 fa95 	bl	8003a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034f2:	463b      	mov	r3, r7
 80034f4:	2208      	movs	r2, #8
 80034f6:	4619      	mov	r1, r3
 80034f8:	480c      	ldr	r0, [pc, #48]	; (800352c <MX_TIM4_Init+0xf0>)
 80034fa:	f006 faf1 	bl	8009ae0 <HAL_TIM_PWM_ConfigChannel>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8003504:	f000 fa8a 	bl	8003a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003508:	463b      	mov	r3, r7
 800350a:	220c      	movs	r2, #12
 800350c:	4619      	mov	r1, r3
 800350e:	4807      	ldr	r0, [pc, #28]	; (800352c <MX_TIM4_Init+0xf0>)
 8003510:	f006 fae6 	bl	8009ae0 <HAL_TIM_PWM_ConfigChannel>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 800351a:	f000 fa7f 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800351e:	4803      	ldr	r0, [pc, #12]	; (800352c <MX_TIM4_Init+0xf0>)
 8003520:	f000 fcc2 	bl	8003ea8 <HAL_TIM_MspPostInit>

}
 8003524:	bf00      	nop
 8003526:	3728      	adds	r7, #40	; 0x28
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	200003d0 	.word	0x200003d0
 8003530:	40000800 	.word	0x40000800

08003534 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	; 0x28
 8003538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800353a:	f107 031c 	add.w	r3, r7, #28
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003546:	463b      	mov	r3, r7
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	60da      	str	r2, [r3, #12]
 8003552:	611a      	str	r2, [r3, #16]
 8003554:	615a      	str	r2, [r3, #20]
 8003556:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003558:	4b27      	ldr	r3, [pc, #156]	; (80035f8 <MX_TIM5_Init+0xc4>)
 800355a:	4a28      	ldr	r2, [pc, #160]	; (80035fc <MX_TIM5_Init+0xc8>)
 800355c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7;
 800355e:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <MX_TIM5_Init+0xc4>)
 8003560:	2207      	movs	r2, #7
 8003562:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003564:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <MX_TIM5_Init+0xc4>)
 8003566:	2200      	movs	r2, #0
 8003568:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000;
 800356a:	4b23      	ldr	r3, [pc, #140]	; (80035f8 <MX_TIM5_Init+0xc4>)
 800356c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003570:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003572:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <MX_TIM5_Init+0xc4>)
 8003574:	2200      	movs	r2, #0
 8003576:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003578:	4b1f      	ldr	r3, [pc, #124]	; (80035f8 <MX_TIM5_Init+0xc4>)
 800357a:	2200      	movs	r2, #0
 800357c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800357e:	481e      	ldr	r0, [pc, #120]	; (80035f8 <MX_TIM5_Init+0xc4>)
 8003580:	f006 f950 	bl	8009824 <HAL_TIM_PWM_Init>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800358a:	f000 fa47 	bl	8003a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003592:	2300      	movs	r3, #0
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003596:	f107 031c 	add.w	r3, r7, #28
 800359a:	4619      	mov	r1, r3
 800359c:	4816      	ldr	r0, [pc, #88]	; (80035f8 <MX_TIM5_Init+0xc4>)
 800359e:	f007 f8ad 	bl	800a6fc <HAL_TIMEx_MasterConfigSynchronization>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80035a8:	f000 fa38 	bl	8003a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035ac:	2360      	movs	r3, #96	; 0x60
 80035ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 80035b0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80035b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035be:	463b      	mov	r3, r7
 80035c0:	2200      	movs	r2, #0
 80035c2:	4619      	mov	r1, r3
 80035c4:	480c      	ldr	r0, [pc, #48]	; (80035f8 <MX_TIM5_Init+0xc4>)
 80035c6:	f006 fa8b 	bl	8009ae0 <HAL_TIM_PWM_ConfigChannel>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 80035d0:	f000 fa24 	bl	8003a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80035d4:	463b      	mov	r3, r7
 80035d6:	2208      	movs	r2, #8
 80035d8:	4619      	mov	r1, r3
 80035da:	4807      	ldr	r0, [pc, #28]	; (80035f8 <MX_TIM5_Init+0xc4>)
 80035dc:	f006 fa80 	bl	8009ae0 <HAL_TIM_PWM_ConfigChannel>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <MX_TIM5_Init+0xb6>
  {
    Error_Handler();
 80035e6:	f000 fa19 	bl	8003a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80035ea:	4803      	ldr	r0, [pc, #12]	; (80035f8 <MX_TIM5_Init+0xc4>)
 80035ec:	f000 fc5c 	bl	8003ea8 <HAL_TIM_MspPostInit>

}
 80035f0:	bf00      	nop
 80035f2:	3728      	adds	r7, #40	; 0x28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	2000041c 	.word	0x2000041c
 80035fc:	40000c00 	.word	0x40000c00

08003600 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003606:	4b12      	ldr	r3, [pc, #72]	; (8003650 <MX_DMA_Init+0x50>)
 8003608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360a:	4a11      	ldr	r2, [pc, #68]	; (8003650 <MX_DMA_Init+0x50>)
 800360c:	f043 0304 	orr.w	r3, r3, #4
 8003610:	6493      	str	r3, [r2, #72]	; 0x48
 8003612:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <MX_DMA_Init+0x50>)
 8003614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	607b      	str	r3, [r7, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800361e:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <MX_DMA_Init+0x50>)
 8003620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003622:	4a0b      	ldr	r2, [pc, #44]	; (8003650 <MX_DMA_Init+0x50>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6493      	str	r3, [r2, #72]	; 0x48
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <MX_DMA_Init+0x50>)
 800362c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003636:	2200      	movs	r2, #0
 8003638:	2100      	movs	r1, #0
 800363a:	200b      	movs	r0, #11
 800363c:	f001 ffcd 	bl	80055da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003640:	200b      	movs	r0, #11
 8003642:	f001 ffe6 	bl	8005612 <HAL_NVIC_EnableIRQ>

}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000

08003654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08e      	sub	sp, #56	; 0x38
 8003658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	605a      	str	r2, [r3, #4]
 8003664:	609a      	str	r2, [r3, #8]
 8003666:	60da      	str	r2, [r3, #12]
 8003668:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800366a:	4bb4      	ldr	r3, [pc, #720]	; (800393c <MX_GPIO_Init+0x2e8>)
 800366c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366e:	4ab3      	ldr	r2, [pc, #716]	; (800393c <MX_GPIO_Init+0x2e8>)
 8003670:	f043 0310 	orr.w	r3, r3, #16
 8003674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003676:	4bb1      	ldr	r3, [pc, #708]	; (800393c <MX_GPIO_Init+0x2e8>)
 8003678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	623b      	str	r3, [r7, #32]
 8003680:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003682:	4bae      	ldr	r3, [pc, #696]	; (800393c <MX_GPIO_Init+0x2e8>)
 8003684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003686:	4aad      	ldr	r2, [pc, #692]	; (800393c <MX_GPIO_Init+0x2e8>)
 8003688:	f043 0304 	orr.w	r3, r3, #4
 800368c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800368e:	4bab      	ldr	r3, [pc, #684]	; (800393c <MX_GPIO_Init+0x2e8>)
 8003690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800369a:	4ba8      	ldr	r3, [pc, #672]	; (800393c <MX_GPIO_Init+0x2e8>)
 800369c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369e:	4aa7      	ldr	r2, [pc, #668]	; (800393c <MX_GPIO_Init+0x2e8>)
 80036a0:	f043 0320 	orr.w	r3, r3, #32
 80036a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036a6:	4ba5      	ldr	r3, [pc, #660]	; (800393c <MX_GPIO_Init+0x2e8>)
 80036a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	61bb      	str	r3, [r7, #24]
 80036b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80036b2:	4ba2      	ldr	r3, [pc, #648]	; (800393c <MX_GPIO_Init+0x2e8>)
 80036b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b6:	4aa1      	ldr	r2, [pc, #644]	; (800393c <MX_GPIO_Init+0x2e8>)
 80036b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036be:	4b9f      	ldr	r3, [pc, #636]	; (800393c <MX_GPIO_Init+0x2e8>)
 80036c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ca:	4b9c      	ldr	r3, [pc, #624]	; (800393c <MX_GPIO_Init+0x2e8>)
 80036cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ce:	4a9b      	ldr	r2, [pc, #620]	; (800393c <MX_GPIO_Init+0x2e8>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036d6:	4b99      	ldr	r3, [pc, #612]	; (800393c <MX_GPIO_Init+0x2e8>)
 80036d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e2:	4b96      	ldr	r3, [pc, #600]	; (800393c <MX_GPIO_Init+0x2e8>)
 80036e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e6:	4a95      	ldr	r2, [pc, #596]	; (800393c <MX_GPIO_Init+0x2e8>)
 80036e8:	f043 0302 	orr.w	r3, r3, #2
 80036ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036ee:	4b93      	ldr	r3, [pc, #588]	; (800393c <MX_GPIO_Init+0x2e8>)
 80036f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036fa:	4b90      	ldr	r3, [pc, #576]	; (800393c <MX_GPIO_Init+0x2e8>)
 80036fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fe:	4a8f      	ldr	r2, [pc, #572]	; (800393c <MX_GPIO_Init+0x2e8>)
 8003700:	f043 0308 	orr.w	r3, r3, #8
 8003704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003706:	4b8d      	ldr	r3, [pc, #564]	; (800393c <MX_GPIO_Init+0x2e8>)
 8003708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	60bb      	str	r3, [r7, #8]
 8003710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003712:	4b8a      	ldr	r3, [pc, #552]	; (800393c <MX_GPIO_Init+0x2e8>)
 8003714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003716:	4a89      	ldr	r2, [pc, #548]	; (800393c <MX_GPIO_Init+0x2e8>)
 8003718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800371c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800371e:	4b87      	ldr	r3, [pc, #540]	; (800393c <MX_GPIO_Init+0x2e8>)
 8003720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003726:	607b      	str	r3, [r7, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800372a:	f002 fc85 	bl	8006038 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800372e:	2200      	movs	r2, #0
 8003730:	2110      	movs	r1, #16
 8003732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003736:	f002 fb8b 	bl	8005e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 800373a:	2200      	movs	r2, #0
 800373c:	f244 0187 	movw	r1, #16519	; 0x4087
 8003740:	487f      	ldr	r0, [pc, #508]	; (8003940 <MX_GPIO_Init+0x2ec>)
 8003742:	f002 fb85 	bl	8005e50 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8003746:	2200      	movs	r2, #0
 8003748:	2140      	movs	r1, #64	; 0x40
 800374a:	487e      	ldr	r0, [pc, #504]	; (8003944 <MX_GPIO_Init+0x2f0>)
 800374c:	f002 fb80 	bl	8005e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003750:	2307      	movs	r3, #7
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003754:	2312      	movs	r3, #18
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003758:	2300      	movs	r3, #0
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800375c:	2303      	movs	r3, #3
 800375e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003760:	2304      	movs	r3, #4
 8003762:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003768:	4619      	mov	r1, r3
 800376a:	4877      	ldr	r0, [pc, #476]	; (8003948 <MX_GPIO_Init+0x2f4>)
 800376c:	f002 f9de 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003770:	2301      	movs	r3, #1
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003774:	2302      	movs	r3, #2
 8003776:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003778:	2300      	movs	r3, #0
 800377a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377c:	2300      	movs	r3, #0
 800377e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003780:	2301      	movs	r3, #1
 8003782:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003788:	4619      	mov	r1, r3
 800378a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800378e:	f002 f9cd 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003792:	2310      	movs	r3, #16
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003796:	2301      	movs	r3, #1
 8003798:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379a:	2300      	movs	r3, #0
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379e:	2300      	movs	r3, #0
 80037a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037a6:	4619      	mov	r1, r3
 80037a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037ac:	f002 f9be 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80037b0:	2340      	movs	r3, #64	; 0x40
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80037b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80037b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037c2:	4619      	mov	r1, r3
 80037c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037c8:	f002 f9b0 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB14
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 80037cc:	f244 0387 	movw	r3, #16519	; 0x4087
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037d2:	2301      	movs	r3, #1
 80037d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037da:	2300      	movs	r3, #0
 80037dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e2:	4619      	mov	r1, r3
 80037e4:	4856      	ldr	r0, [pc, #344]	; (8003940 <MX_GPIO_Init+0x2ec>)
 80037e6:	f002 f9a1 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f0:	2302      	movs	r3, #2
 80037f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f8:	2300      	movs	r3, #0
 80037fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037fc:	2301      	movs	r3, #1
 80037fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003804:	4619      	mov	r1, r3
 8003806:	484e      	ldr	r0, [pc, #312]	; (8003940 <MX_GPIO_Init+0x2ec>)
 8003808:	f002 f990 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800380c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003812:	2302      	movs	r3, #2
 8003814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003816:	2300      	movs	r3, #0
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381a:	2300      	movs	r3, #0
 800381c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800381e:	230d      	movs	r3, #13
 8003820:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003826:	4619      	mov	r1, r3
 8003828:	4845      	ldr	r0, [pc, #276]	; (8003940 <MX_GPIO_Init+0x2ec>)
 800382a:	f002 f97f 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800382e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003834:	2302      	movs	r3, #2
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003838:	2300      	movs	r3, #0
 800383a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383c:	2303      	movs	r3, #3
 800383e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003840:	2307      	movs	r3, #7
 8003842:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003848:	4619      	mov	r1, r3
 800384a:	4840      	ldr	r0, [pc, #256]	; (800394c <MX_GPIO_Init+0x2f8>)
 800384c:	f002 f96e 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003850:	2320      	movs	r3, #32
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003854:	2300      	movs	r3, #0
 8003856:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003858:	2300      	movs	r3, #0
 800385a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800385c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003860:	4619      	mov	r1, r3
 8003862:	4838      	ldr	r0, [pc, #224]	; (8003944 <MX_GPIO_Init+0x2f0>)
 8003864:	f002 f962 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003868:	2340      	movs	r3, #64	; 0x40
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800386c:	2301      	movs	r3, #1
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003870:	2300      	movs	r3, #0
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003874:	2300      	movs	r3, #0
 8003876:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800387c:	4619      	mov	r1, r3
 800387e:	4831      	ldr	r0, [pc, #196]	; (8003944 <MX_GPIO_Init+0x2f0>)
 8003880:	f002 f954 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003884:	2340      	movs	r3, #64	; 0x40
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003888:	2302      	movs	r3, #2
 800388a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388c:	2300      	movs	r3, #0
 800388e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003890:	2300      	movs	r3, #0
 8003892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003894:	230d      	movs	r3, #13
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800389c:	4619      	mov	r1, r3
 800389e:	482c      	ldr	r0, [pc, #176]	; (8003950 <MX_GPIO_Init+0x2fc>)
 80038a0:	f002 f944 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a8:	2302      	movs	r3, #2
 80038aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ac:	2300      	movs	r3, #0
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b0:	2300      	movs	r3, #0
 80038b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038b4:	2302      	movs	r3, #2
 80038b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038bc:	4619      	mov	r1, r3
 80038be:	4824      	ldr	r0, [pc, #144]	; (8003950 <MX_GPIO_Init+0x2fc>)
 80038c0:	f002 f934 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80038c4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ca:	2302      	movs	r3, #2
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d2:	2303      	movs	r3, #3
 80038d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80038d6:	230c      	movs	r3, #12
 80038d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038de:	4619      	mov	r1, r3
 80038e0:	481b      	ldr	r0, [pc, #108]	; (8003950 <MX_GPIO_Init+0x2fc>)
 80038e2:	f002 f923 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80038e6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ec:	2302      	movs	r3, #2
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f4:	2303      	movs	r3, #3
 80038f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80038f8:	230a      	movs	r3, #10
 80038fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003900:	4619      	mov	r1, r3
 8003902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003906:	f002 f911 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800390a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003910:	2300      	movs	r3, #0
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003914:	2300      	movs	r3, #0
 8003916:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800391c:	4619      	mov	r1, r3
 800391e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003922:	f002 f903 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003926:	2301      	movs	r3, #1
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392a:	2302      	movs	r3, #2
 800392c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392e:	2300      	movs	r3, #0
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003932:	2303      	movs	r3, #3
 8003934:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003936:	2309      	movs	r3, #9
 8003938:	637b      	str	r3, [r7, #52]	; 0x34
 800393a:	e00b      	b.n	8003954 <MX_GPIO_Init+0x300>
 800393c:	40021000 	.word	0x40021000
 8003940:	48000400 	.word	0x48000400
 8003944:	48001800 	.word	0x48001800
 8003948:	48001400 	.word	0x48001400
 800394c:	48000c00 	.word	0x48000c00
 8003950:	48000800 	.word	0x48000800
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003958:	4619      	mov	r1, r3
 800395a:	482e      	ldr	r0, [pc, #184]	; (8003a14 <MX_GPIO_Init+0x3c0>)
 800395c:	f002 f8e6 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003960:	2304      	movs	r3, #4
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003964:	2302      	movs	r3, #2
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003968:	2300      	movs	r3, #0
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800396c:	2303      	movs	r3, #3
 800396e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003970:	230c      	movs	r3, #12
 8003972:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003978:	4619      	mov	r1, r3
 800397a:	4826      	ldr	r0, [pc, #152]	; (8003a14 <MX_GPIO_Init+0x3c0>)
 800397c:	f002 f8d6 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003980:	2378      	movs	r3, #120	; 0x78
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003984:	2302      	movs	r3, #2
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003988:	2300      	movs	r3, #0
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800398c:	2303      	movs	r3, #3
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003990:	2307      	movs	r3, #7
 8003992:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003998:	4619      	mov	r1, r3
 800399a:	481e      	ldr	r0, [pc, #120]	; (8003a14 <MX_GPIO_Init+0x3c0>)
 800399c:	f002 f8c6 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80039a0:	2330      	movs	r3, #48	; 0x30
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a4:	2302      	movs	r3, #2
 80039a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ac:	2303      	movs	r3, #3
 80039ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80039b0:	2306      	movs	r3, #6
 80039b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039b8:	4619      	mov	r1, r3
 80039ba:	4817      	ldr	r0, [pc, #92]	; (8003a18 <MX_GPIO_Init+0x3c4>)
 80039bc:	f002 f8b6 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80039c0:	2340      	movs	r3, #64	; 0x40
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039c4:	2303      	movs	r3, #3
 80039c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d0:	4619      	mov	r1, r3
 80039d2:	4811      	ldr	r0, [pc, #68]	; (8003a18 <MX_GPIO_Init+0x3c4>)
 80039d4:	f002 f8aa 	bl	8005b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80039d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039de:	2312      	movs	r3, #18
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e6:	2303      	movs	r3, #3
 80039e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039ea:	2304      	movs	r3, #4
 80039ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039f2:	4619      	mov	r1, r3
 80039f4:	4808      	ldr	r0, [pc, #32]	; (8003a18 <MX_GPIO_Init+0x3c4>)
 80039f6:	f002 f899 	bl	8005b2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80039fa:	2200      	movs	r2, #0
 80039fc:	2100      	movs	r1, #0
 80039fe:	2017      	movs	r0, #23
 8003a00:	f001 fdeb 	bl	80055da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003a04:	2017      	movs	r0, #23
 8003a06:	f001 fe04 	bl	8005612 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a0a:	bf00      	nop
 8003a0c:	3738      	adds	r7, #56	; 0x38
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	48000c00 	.word	0x48000c00
 8003a18:	48000400 	.word	0x48000400

08003a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a20:	b672      	cpsid	i
}
 8003a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a24:	e7fe      	b.n	8003a24 <Error_Handler+0x8>
	...

08003a28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2e:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <HAL_MspInit+0x44>)
 8003a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a32:	4a0e      	ldr	r2, [pc, #56]	; (8003a6c <HAL_MspInit+0x44>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	6613      	str	r3, [r2, #96]	; 0x60
 8003a3a:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <HAL_MspInit+0x44>)
 8003a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	607b      	str	r3, [r7, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_MspInit+0x44>)
 8003a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4a:	4a08      	ldr	r2, [pc, #32]	; (8003a6c <HAL_MspInit+0x44>)
 8003a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a50:	6593      	str	r3, [r2, #88]	; 0x58
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <HAL_MspInit+0x44>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40021000 	.word	0x40021000

08003a70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08a      	sub	sp, #40	; 0x28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a78:	f107 0314 	add.w	r3, r7, #20
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	60da      	str	r2, [r3, #12]
 8003a86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a37      	ldr	r2, [pc, #220]	; (8003b6c <HAL_ADC_MspInit+0xfc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d168      	bne.n	8003b64 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003a92:	4b37      	ldr	r3, [pc, #220]	; (8003b70 <HAL_ADC_MspInit+0x100>)
 8003a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a96:	4a36      	ldr	r2, [pc, #216]	; (8003b70 <HAL_ADC_MspInit+0x100>)
 8003a98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a9e:	4b34      	ldr	r3, [pc, #208]	; (8003b70 <HAL_ADC_MspInit+0x100>)
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aaa:	4b31      	ldr	r3, [pc, #196]	; (8003b70 <HAL_ADC_MspInit+0x100>)
 8003aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aae:	4a30      	ldr	r2, [pc, #192]	; (8003b70 <HAL_ADC_MspInit+0x100>)
 8003ab0:	f043 0304 	orr.w	r3, r3, #4
 8003ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ab6:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <HAL_ADC_MspInit+0x100>)
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac2:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <HAL_ADC_MspInit+0x100>)
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac6:	4a2a      	ldr	r2, [pc, #168]	; (8003b70 <HAL_ADC_MspInit+0x100>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ace:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <HAL_ADC_MspInit+0x100>)
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	60bb      	str	r3, [r7, #8]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003ada:	233f      	movs	r3, #63	; 0x3f
 8003adc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003ade:	230b      	movs	r3, #11
 8003ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ae6:	f107 0314 	add.w	r3, r7, #20
 8003aea:	4619      	mov	r1, r3
 8003aec:	4821      	ldr	r0, [pc, #132]	; (8003b74 <HAL_ADC_MspInit+0x104>)
 8003aee:	f002 f81d 	bl	8005b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8003af2:	230a      	movs	r3, #10
 8003af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003af6:	230b      	movs	r3, #11
 8003af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afe:	f107 0314 	add.w	r3, r7, #20
 8003b02:	4619      	mov	r1, r3
 8003b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b08:	f002 f810 	bl	8005b2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003b0c:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <HAL_ADC_MspInit+0x108>)
 8003b0e:	4a1b      	ldr	r2, [pc, #108]	; (8003b7c <HAL_ADC_MspInit+0x10c>)
 8003b10:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003b12:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <HAL_ADC_MspInit+0x108>)
 8003b14:	2205      	movs	r2, #5
 8003b16:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b18:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <HAL_ADC_MspInit+0x108>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b1e:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <HAL_ADC_MspInit+0x108>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b24:	4b14      	ldr	r3, [pc, #80]	; (8003b78 <HAL_ADC_MspInit+0x108>)
 8003b26:	2280      	movs	r2, #128	; 0x80
 8003b28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b2a:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_ADC_MspInit+0x108>)
 8003b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <HAL_ADC_MspInit+0x108>)
 8003b34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003b3a:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <HAL_ADC_MspInit+0x108>)
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003b40:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <HAL_ADC_MspInit+0x108>)
 8003b42:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003b46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b48:	480b      	ldr	r0, [pc, #44]	; (8003b78 <HAL_ADC_MspInit+0x108>)
 8003b4a:	f001 fd7d 	bl	8005648 <HAL_DMA_Init>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 8003b54:	f7ff ff62 	bl	8003a1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a07      	ldr	r2, [pc, #28]	; (8003b78 <HAL_ADC_MspInit+0x108>)
 8003b5c:	651a      	str	r2, [r3, #80]	; 0x50
 8003b5e:	4a06      	ldr	r2, [pc, #24]	; (8003b78 <HAL_ADC_MspInit+0x108>)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b64:	bf00      	nop
 8003b66:	3728      	adds	r7, #40	; 0x28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	50040000 	.word	0x50040000
 8003b70:	40021000 	.word	0x40021000
 8003b74:	48000800 	.word	0x48000800
 8003b78:	20000104 	.word	0x20000104
 8003b7c:	40020008 	.word	0x40020008

08003b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b0b0      	sub	sp, #192	; 0xc0
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b88:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b98:	f107 0318 	add.w	r3, r7, #24
 8003b9c:	2294      	movs	r2, #148	; 0x94
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f008 fee1 	bl	800c968 <memset>
  if(huart->Instance==LPUART1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a44      	ldr	r2, [pc, #272]	; (8003cbc <HAL_UART_MspInit+0x13c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d13e      	bne.n	8003c2e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bb8:	f107 0318 	add.w	r3, r7, #24
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f003 f923 	bl	8006e08 <HAL_RCCEx_PeriphCLKConfig>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003bc8:	f7ff ff28 	bl	8003a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003bcc:	4b3c      	ldr	r3, [pc, #240]	; (8003cc0 <HAL_UART_MspInit+0x140>)
 8003bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd0:	4a3b      	ldr	r2, [pc, #236]	; (8003cc0 <HAL_UART_MspInit+0x140>)
 8003bd2:	f043 0301 	orr.w	r3, r3, #1
 8003bd6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003bd8:	4b39      	ldr	r3, [pc, #228]	; (8003cc0 <HAL_UART_MspInit+0x140>)
 8003bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003be4:	4b36      	ldr	r3, [pc, #216]	; (8003cc0 <HAL_UART_MspInit+0x140>)
 8003be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be8:	4a35      	ldr	r2, [pc, #212]	; (8003cc0 <HAL_UART_MspInit+0x140>)
 8003bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bf0:	4b33      	ldr	r3, [pc, #204]	; (8003cc0 <HAL_UART_MspInit+0x140>)
 8003bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8003bfc:	f002 fa1c 	bl	8006038 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003c00:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003c04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c14:	2303      	movs	r3, #3
 8003c16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c20:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003c24:	4619      	mov	r1, r3
 8003c26:	4827      	ldr	r0, [pc, #156]	; (8003cc4 <HAL_UART_MspInit+0x144>)
 8003c28:	f001 ff80 	bl	8005b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c2c:	e042      	b.n	8003cb4 <HAL_UART_MspInit+0x134>
  else if(huart->Instance==USART1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a25      	ldr	r2, [pc, #148]	; (8003cc8 <HAL_UART_MspInit+0x148>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d13d      	bne.n	8003cb4 <HAL_UART_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c40:	f107 0318 	add.w	r3, r7, #24
 8003c44:	4618      	mov	r0, r3
 8003c46:	f003 f8df 	bl	8006e08 <HAL_RCCEx_PeriphCLKConfig>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8003c50:	f7ff fee4 	bl	8003a1c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c54:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <HAL_UART_MspInit+0x140>)
 8003c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c58:	4a19      	ldr	r2, [pc, #100]	; (8003cc0 <HAL_UART_MspInit+0x140>)
 8003c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c5e:	6613      	str	r3, [r2, #96]	; 0x60
 8003c60:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <HAL_UART_MspInit+0x140>)
 8003c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c6c:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <HAL_UART_MspInit+0x140>)
 8003c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c70:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <HAL_UART_MspInit+0x140>)
 8003c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <HAL_UART_MspInit+0x140>)
 8003c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8003c84:	f002 f9d8 	bl	8006038 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c90:	2302      	movs	r3, #2
 8003c92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ca2:	2307      	movs	r3, #7
 8003ca4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ca8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003cac:	4619      	mov	r1, r3
 8003cae:	4805      	ldr	r0, [pc, #20]	; (8003cc4 <HAL_UART_MspInit+0x144>)
 8003cb0:	f001 ff3c 	bl	8005b2c <HAL_GPIO_Init>
}
 8003cb4:	bf00      	nop
 8003cb6:	37c0      	adds	r7, #192	; 0xc0
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40008000 	.word	0x40008000
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	48001800 	.word	0x48001800
 8003cc8:	40013800 	.word	0x40013800

08003ccc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd4:	f107 0314 	add.w	r3, r7, #20
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a17      	ldr	r2, [pc, #92]	; (8003d48 <HAL_SPI_MspInit+0x7c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d128      	bne.n	8003d40 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003cee:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <HAL_SPI_MspInit+0x80>)
 8003cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf2:	4a16      	ldr	r2, [pc, #88]	; (8003d4c <HAL_SPI_MspInit+0x80>)
 8003cf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cf8:	6613      	str	r3, [r2, #96]	; 0x60
 8003cfa:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <HAL_SPI_MspInit+0x80>)
 8003cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d06:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <HAL_SPI_MspInit+0x80>)
 8003d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0a:	4a10      	ldr	r2, [pc, #64]	; (8003d4c <HAL_SPI_MspInit+0x80>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d12:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <HAL_SPI_MspInit+0x80>)
 8003d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003d1e:	23a0      	movs	r3, #160	; 0xa0
 8003d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d22:	2302      	movs	r3, #2
 8003d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d2e:	2305      	movs	r3, #5
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d32:	f107 0314 	add.w	r3, r7, #20
 8003d36:	4619      	mov	r1, r3
 8003d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d3c:	f001 fef6 	bl	8005b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003d40:	bf00      	nop
 8003d42:	3728      	adds	r7, #40	; 0x28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40013000 	.word	0x40013000
 8003d4c:	40021000 	.word	0x40021000

08003d50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08a      	sub	sp, #40	; 0x28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d58:	f107 0314 	add.w	r3, r7, #20
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	605a      	str	r2, [r3, #4]
 8003d62:	609a      	str	r2, [r3, #8]
 8003d64:	60da      	str	r2, [r3, #12]
 8003d66:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1f      	ldr	r2, [pc, #124]	; (8003dec <HAL_TIM_Base_MspInit+0x9c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d138      	bne.n	8003de4 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d72:	4b1f      	ldr	r3, [pc, #124]	; (8003df0 <HAL_TIM_Base_MspInit+0xa0>)
 8003d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d76:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <HAL_TIM_Base_MspInit+0xa0>)
 8003d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d7c:	6613      	str	r3, [r2, #96]	; 0x60
 8003d7e:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <HAL_TIM_Base_MspInit+0xa0>)
 8003d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d8a:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <HAL_TIM_Base_MspInit+0xa0>)
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8e:	4a18      	ldr	r2, [pc, #96]	; (8003df0 <HAL_TIM_Base_MspInit+0xa0>)
 8003d90:	f043 0310 	orr.w	r3, r3, #16
 8003d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d96:	4b16      	ldr	r3, [pc, #88]	; (8003df0 <HAL_TIM_Base_MspInit+0xa0>)
 8003d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003da2:	2380      	movs	r3, #128	; 0x80
 8003da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da6:	2302      	movs	r3, #2
 8003da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dae:	2300      	movs	r3, #0
 8003db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003db2:	2301      	movs	r3, #1
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003db6:	f107 0314 	add.w	r3, r7, #20
 8003dba:	4619      	mov	r1, r3
 8003dbc:	480d      	ldr	r0, [pc, #52]	; (8003df4 <HAL_TIM_Base_MspInit+0xa4>)
 8003dbe:	f001 feb5 	bl	8005b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003dc2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003dd8:	f107 0314 	add.w	r3, r7, #20
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4805      	ldr	r0, [pc, #20]	; (8003df4 <HAL_TIM_Base_MspInit+0xa4>)
 8003de0:	f001 fea4 	bl	8005b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003de4:	bf00      	nop
 8003de6:	3728      	adds	r7, #40	; 0x28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40012c00 	.word	0x40012c00
 8003df0:	40021000 	.word	0x40021000
 8003df4:	48001000 	.word	0x48001000

08003df8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08a      	sub	sp, #40	; 0x28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e00:	f107 0314 	add.w	r3, r7, #20
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM4)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a20      	ldr	r2, [pc, #128]	; (8003e98 <HAL_TIM_PWM_MspInit+0xa0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d128      	bne.n	8003e6c <HAL_TIM_PWM_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e1a:	4b20      	ldr	r3, [pc, #128]	; (8003e9c <HAL_TIM_PWM_MspInit+0xa4>)
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1e:	4a1f      	ldr	r2, [pc, #124]	; (8003e9c <HAL_TIM_PWM_MspInit+0xa4>)
 8003e20:	f043 0304 	orr.w	r3, r3, #4
 8003e24:	6593      	str	r3, [r2, #88]	; 0x58
 8003e26:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <HAL_TIM_PWM_MspInit+0xa4>)
 8003e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e32:	4b1a      	ldr	r3, [pc, #104]	; (8003e9c <HAL_TIM_PWM_MspInit+0xa4>)
 8003e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e36:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <HAL_TIM_PWM_MspInit+0xa4>)
 8003e38:	f043 0310 	orr.w	r3, r3, #16
 8003e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e3e:	4b17      	ldr	r3, [pc, #92]	; (8003e9c <HAL_TIM_PWM_MspInit+0xa4>)
 8003e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e56:	2300      	movs	r3, #0
 8003e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e5e:	f107 0314 	add.w	r3, r7, #20
 8003e62:	4619      	mov	r1, r3
 8003e64:	480e      	ldr	r0, [pc, #56]	; (8003ea0 <HAL_TIM_PWM_MspInit+0xa8>)
 8003e66:	f001 fe61 	bl	8005b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003e6a:	e010      	b.n	8003e8e <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM5)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0c      	ldr	r2, [pc, #48]	; (8003ea4 <HAL_TIM_PWM_MspInit+0xac>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d10b      	bne.n	8003e8e <HAL_TIM_PWM_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003e76:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <HAL_TIM_PWM_MspInit+0xa4>)
 8003e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7a:	4a08      	ldr	r2, [pc, #32]	; (8003e9c <HAL_TIM_PWM_MspInit+0xa4>)
 8003e7c:	f043 0308 	orr.w	r3, r3, #8
 8003e80:	6593      	str	r3, [r2, #88]	; 0x58
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_TIM_PWM_MspInit+0xa4>)
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
}
 8003e8e:	bf00      	nop
 8003e90:	3728      	adds	r7, #40	; 0x28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40000800 	.word	0x40000800
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	48001000 	.word	0x48001000
 8003ea4:	40000c00 	.word	0x40000c00

08003ea8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	; 0x28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb0:	f107 0314 	add.w	r3, r7, #20
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	60da      	str	r2, [r3, #12]
 8003ebe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a34      	ldr	r2, [pc, #208]	; (8003f98 <HAL_TIM_MspPostInit+0xf0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d11d      	bne.n	8003f06 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003eca:	4b34      	ldr	r3, [pc, #208]	; (8003f9c <HAL_TIM_MspPostInit+0xf4>)
 8003ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ece:	4a33      	ldr	r2, [pc, #204]	; (8003f9c <HAL_TIM_MspPostInit+0xf4>)
 8003ed0:	f043 0310 	orr.w	r3, r3, #16
 8003ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ed6:	4b31      	ldr	r3, [pc, #196]	; (8003f9c <HAL_TIM_MspPostInit+0xf4>)
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eda:	f003 0310 	and.w	r3, r3, #16
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003ee2:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8003ee6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ef8:	f107 0314 	add.w	r3, r7, #20
 8003efc:	4619      	mov	r1, r3
 8003efe:	4828      	ldr	r0, [pc, #160]	; (8003fa0 <HAL_TIM_MspPostInit+0xf8>)
 8003f00:	f001 fe14 	bl	8005b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003f04:	e044      	b.n	8003f90 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a26      	ldr	r2, [pc, #152]	; (8003fa4 <HAL_TIM_MspPostInit+0xfc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d11d      	bne.n	8003f4c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f10:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <HAL_TIM_MspPostInit+0xf4>)
 8003f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f14:	4a21      	ldr	r2, [pc, #132]	; (8003f9c <HAL_TIM_MspPostInit+0xf4>)
 8003f16:	f043 0308 	orr.w	r3, r3, #8
 8003f1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f1c:	4b1f      	ldr	r3, [pc, #124]	; (8003f9c <HAL_TIM_MspPostInit+0xf4>)
 8003f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003f28:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f2e:	2302      	movs	r3, #2
 8003f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f36:	2300      	movs	r3, #0
 8003f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f3e:	f107 0314 	add.w	r3, r7, #20
 8003f42:	4619      	mov	r1, r3
 8003f44:	4818      	ldr	r0, [pc, #96]	; (8003fa8 <HAL_TIM_MspPostInit+0x100>)
 8003f46:	f001 fdf1 	bl	8005b2c <HAL_GPIO_Init>
}
 8003f4a:	e021      	b.n	8003f90 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM5)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a16      	ldr	r2, [pc, #88]	; (8003fac <HAL_TIM_MspPostInit+0x104>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d11c      	bne.n	8003f90 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f56:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <HAL_TIM_MspPostInit+0xf4>)
 8003f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5a:	4a10      	ldr	r2, [pc, #64]	; (8003f9c <HAL_TIM_MspPostInit+0xf4>)
 8003f5c:	f043 0320 	orr.w	r3, r3, #32
 8003f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f62:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <HAL_TIM_MspPostInit+0xf4>)
 8003f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8003f6e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f74:	2302      	movs	r3, #2
 8003f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003f80:	2302      	movs	r3, #2
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f84:	f107 0314 	add.w	r3, r7, #20
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4809      	ldr	r0, [pc, #36]	; (8003fb0 <HAL_TIM_MspPostInit+0x108>)
 8003f8c:	f001 fdce 	bl	8005b2c <HAL_GPIO_Init>
}
 8003f90:	bf00      	nop
 8003f92:	3728      	adds	r7, #40	; 0x28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40012c00 	.word	0x40012c00
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	48001000 	.word	0x48001000
 8003fa4:	40000800 	.word	0x40000800
 8003fa8:	48000c00 	.word	0x48000c00
 8003fac:	40000c00 	.word	0x40000c00
 8003fb0:	48001400 	.word	0x48001400

08003fb4 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <HAL_SAI_MspInit+0x84>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d134      	bne.n	8004030 <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8003fc6:	4b1d      	ldr	r3, [pc, #116]	; (800403c <HAL_SAI_MspInit+0x88>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10b      	bne.n	8003fe6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003fce:	4b1c      	ldr	r3, [pc, #112]	; (8004040 <HAL_SAI_MspInit+0x8c>)
 8003fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd2:	4a1b      	ldr	r2, [pc, #108]	; (8004040 <HAL_SAI_MspInit+0x8c>)
 8003fd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8003fda:	4b19      	ldr	r3, [pc, #100]	; (8004040 <HAL_SAI_MspInit+0x8c>)
 8003fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe2:	60bb      	str	r3, [r7, #8]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8003fe6:	4b15      	ldr	r3, [pc, #84]	; (800403c <HAL_SAI_MspInit+0x88>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3301      	adds	r3, #1
 8003fec:	4a13      	ldr	r2, [pc, #76]	; (800403c <HAL_SAI_MspInit+0x88>)
 8003fee:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PF7     ------> SAI1_MCLK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8003ff0:	237c      	movs	r3, #124	; 0x7c
 8003ff2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004000:	230d      	movs	r3, #13
 8004002:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004004:	f107 030c 	add.w	r3, r7, #12
 8004008:	4619      	mov	r1, r3
 800400a:	480e      	ldr	r0, [pc, #56]	; (8004044 <HAL_SAI_MspInit+0x90>)
 800400c:	f001 fd8e 	bl	8005b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004014:	2302      	movs	r3, #2
 8004016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800401c:	2300      	movs	r3, #0
 800401e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004020:	230d      	movs	r3, #13
 8004022:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004024:	f107 030c 	add.w	r3, r7, #12
 8004028:	4619      	mov	r1, r3
 800402a:	4807      	ldr	r0, [pc, #28]	; (8004048 <HAL_SAI_MspInit+0x94>)
 800402c:	f001 fd7e 	bl	8005b2c <HAL_GPIO_Init>

    }
}
 8004030:	bf00      	nop
 8004032:	3720      	adds	r7, #32
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40015404 	.word	0x40015404
 800403c:	20000498 	.word	0x20000498
 8004040:	40021000 	.word	0x40021000
 8004044:	48001000 	.word	0x48001000
 8004048:	48001400 	.word	0x48001400

0800404c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004050:	e7fe      	b.n	8004050 <NMI_Handler+0x4>

08004052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004052:	b480      	push	{r7}
 8004054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004056:	e7fe      	b.n	8004056 <HardFault_Handler+0x4>

08004058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800405c:	e7fe      	b.n	800405c <MemManage_Handler+0x4>

0800405e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800405e:	b480      	push	{r7}
 8004060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004062:	e7fe      	b.n	8004062 <BusFault_Handler+0x4>

08004064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004068:	e7fe      	b.n	8004068 <UsageFault_Handler+0x4>

0800406a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800406a:	b480      	push	{r7}
 800406c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800407c:	bf00      	nop
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004086:	b480      	push	{r7}
 8004088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800408a:	bf00      	nop
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004098:	f000 f8b2 	bl	8004200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800409c:	bf00      	nop
 800409e:	bd80      	pop	{r7, pc}

080040a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80040a4:	4802      	ldr	r0, [pc, #8]	; (80040b0 <DMA1_Channel1_IRQHandler+0x10>)
 80040a6:	f001 fbf2 	bl	800588e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000104 	.word	0x20000104

080040b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	for (int i = 0; i < 1000000; i++);
 80040ba:	2300      	movs	r3, #0
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	e002      	b.n	80040c6 <EXTI9_5_IRQHandler+0x12>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3301      	adds	r3, #1
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a04      	ldr	r2, [pc, #16]	; (80040dc <EXTI9_5_IRQHandler+0x28>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	ddf8      	ble.n	80040c0 <EXTI9_5_IRQHandler+0xc>
	//HAL_Delay(250);
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80040ce:	2040      	movs	r0, #64	; 0x40
 80040d0:	f001 fed6 	bl	8005e80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	000f423f 	.word	0x000f423f

080040e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80040e4:	4b06      	ldr	r3, [pc, #24]	; (8004100 <SystemInit+0x20>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ea:	4a05      	ldr	r2, [pc, #20]	; (8004100 <SystemInit+0x20>)
 80040ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80040f4:	bf00      	nop
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	e000ed00 	.word	0xe000ed00

08004104 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800413c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004108:	f7ff ffea 	bl	80040e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800410c:	480c      	ldr	r0, [pc, #48]	; (8004140 <LoopForever+0x6>)
  ldr r1, =_edata
 800410e:	490d      	ldr	r1, [pc, #52]	; (8004144 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004110:	4a0d      	ldr	r2, [pc, #52]	; (8004148 <LoopForever+0xe>)
  movs r3, #0
 8004112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004114:	e002      	b.n	800411c <LoopCopyDataInit>

08004116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800411a:	3304      	adds	r3, #4

0800411c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800411c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800411e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004120:	d3f9      	bcc.n	8004116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004122:	4a0a      	ldr	r2, [pc, #40]	; (800414c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004124:	4c0a      	ldr	r4, [pc, #40]	; (8004150 <LoopForever+0x16>)
  movs r3, #0
 8004126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004128:	e001      	b.n	800412e <LoopFillZerobss>

0800412a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800412a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800412c:	3204      	adds	r2, #4

0800412e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800412e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004130:	d3fb      	bcc.n	800412a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004132:	f008 fc27 	bl	800c984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004136:	f7fd fe3b 	bl	8001db0 <main>

0800413a <LoopForever>:

LoopForever:
    b LoopForever
 800413a:	e7fe      	b.n	800413a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800413c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004144:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8004148:	08023a28 	.word	0x08023a28
  ldr r2, =_sbss
 800414c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8004150:	200005d8 	.word	0x200005d8

08004154 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004154:	e7fe      	b.n	8004154 <ADC1_IRQHandler>

08004156 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800415c:	2300      	movs	r3, #0
 800415e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004160:	2003      	movs	r0, #3
 8004162:	f001 fa2f 	bl	80055c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004166:	2000      	movs	r0, #0
 8004168:	f000 f80e 	bl	8004188 <HAL_InitTick>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	71fb      	strb	r3, [r7, #7]
 8004176:	e001      	b.n	800417c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004178:	f7ff fc56 	bl	8003a28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800417c:	79fb      	ldrb	r3, [r7, #7]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004194:	4b17      	ldr	r3, [pc, #92]	; (80041f4 <HAL_InitTick+0x6c>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d023      	beq.n	80041e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800419c:	4b16      	ldr	r3, [pc, #88]	; (80041f8 <HAL_InitTick+0x70>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4b14      	ldr	r3, [pc, #80]	; (80041f4 <HAL_InitTick+0x6c>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	4619      	mov	r1, r3
 80041a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80041ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 fa3b 	bl	800562e <HAL_SYSTICK_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10f      	bne.n	80041de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b0f      	cmp	r3, #15
 80041c2:	d809      	bhi.n	80041d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041c4:	2200      	movs	r2, #0
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	f04f 30ff 	mov.w	r0, #4294967295
 80041cc:	f001 fa05 	bl	80055da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80041d0:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <HAL_InitTick+0x74>)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e007      	b.n	80041e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
 80041dc:	e004      	b.n	80041e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
 80041e2:	e001      	b.n	80041e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000018 	.word	0x20000018
 80041f8:	20000010 	.word	0x20000010
 80041fc:	20000014 	.word	0x20000014

08004200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_IncTick+0x20>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	4b06      	ldr	r3, [pc, #24]	; (8004224 <HAL_IncTick+0x24>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4413      	add	r3, r2
 8004210:	4a04      	ldr	r2, [pc, #16]	; (8004224 <HAL_IncTick+0x24>)
 8004212:	6013      	str	r3, [r2, #0]
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20000018 	.word	0x20000018
 8004224:	2000049c 	.word	0x2000049c

08004228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return uwTick;
 800422c:	4b03      	ldr	r3, [pc, #12]	; (800423c <HAL_GetTick+0x14>)
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	2000049c 	.word	0x2000049c

08004240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004248:	f7ff ffee 	bl	8004228 <HAL_GetTick>
 800424c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d005      	beq.n	8004266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <HAL_Delay+0x44>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4413      	add	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004266:	bf00      	nop
 8004268:	f7ff ffde 	bl	8004228 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	429a      	cmp	r2, r3
 8004276:	d8f7      	bhi.n	8004268 <HAL_Delay+0x28>
  {
  }
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20000018 	.word	0x20000018

08004288 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	431a      	orrs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	609a      	str	r2, [r3, #8]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	609a      	str	r2, [r3, #8]
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3360      	adds	r3, #96	; 0x60
 8004302:	461a      	mov	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4b08      	ldr	r3, [pc, #32]	; (8004334 <LL_ADC_SetOffset+0x44>)
 8004312:	4013      	ands	r3, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	4313      	orrs	r3, r2
 8004320:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004328:	bf00      	nop
 800432a:	371c      	adds	r7, #28
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	03fff000 	.word	0x03fff000

08004338 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3360      	adds	r3, #96	; 0x60
 8004346:	461a      	mov	r2, r3
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3360      	adds	r3, #96	; 0x60
 8004374:	461a      	mov	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	431a      	orrs	r2, r3
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	615a      	str	r2, [r3, #20]
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80043d4:	2301      	movs	r3, #1
 80043d6:	e000      	b.n	80043da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b087      	sub	sp, #28
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3330      	adds	r3, #48	; 0x30
 80043f6:	461a      	mov	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	0a1b      	lsrs	r3, r3, #8
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	4413      	add	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	211f      	movs	r1, #31
 8004412:	fa01 f303 	lsl.w	r3, r1, r3
 8004416:	43db      	mvns	r3, r3
 8004418:	401a      	ands	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	0e9b      	lsrs	r3, r3, #26
 800441e:	f003 011f 	and.w	r1, r3, #31
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	fa01 f303 	lsl.w	r3, r1, r3
 800442c:	431a      	orrs	r2, r3
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004432:	bf00      	nop
 8004434:	371c      	adds	r7, #28
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800443e:	b480      	push	{r7}
 8004440:	b087      	sub	sp, #28
 8004442:	af00      	add	r7, sp, #0
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3314      	adds	r3, #20
 800444e:	461a      	mov	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	0e5b      	lsrs	r3, r3, #25
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	4413      	add	r3, r2
 800445c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	0d1b      	lsrs	r3, r3, #20
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	2107      	movs	r1, #7
 800446c:	fa01 f303 	lsl.w	r3, r1, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	401a      	ands	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	0d1b      	lsrs	r3, r3, #20
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	fa01 f303 	lsl.w	r3, r1, r3
 8004482:	431a      	orrs	r2, r3
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004488:	bf00      	nop
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ac:	43db      	mvns	r3, r3
 80044ae:	401a      	ands	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f003 0318 	and.w	r3, r3, #24
 80044b6:	4908      	ldr	r1, [pc, #32]	; (80044d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80044b8:	40d9      	lsrs	r1, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	400b      	ands	r3, r1
 80044be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c2:	431a      	orrs	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80044ca:	bf00      	nop
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	0007ffff 	.word	0x0007ffff

080044dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80044ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6093      	str	r3, [r2, #8]
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004514:	d101      	bne.n	800451a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004538:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800453c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004560:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004564:	d101      	bne.n	800456a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004588:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800458c:	f043 0201 	orr.w	r2, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <LL_ADC_IsEnabled+0x18>
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <LL_ADC_IsEnabled+0x1a>
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045da:	f043 0204 	orr.w	r2, r3, #4
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d101      	bne.n	8004606 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b08      	cmp	r3, #8
 8004626:	d101      	bne.n	800462c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004628:	2301      	movs	r3, #1
 800462a:	e000      	b.n	800462e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b088      	sub	sp, #32
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004648:	2300      	movs	r3, #0
 800464a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e129      	b.n	80048aa <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004660:	2b00      	cmp	r3, #0
 8004662:	d109      	bne.n	8004678 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff fa03 	bl	8003a70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ff3f 	bl	8004500 <LL_ADC_IsDeepPowerDownEnabled>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d004      	beq.n	8004692 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff ff25 	bl	80044dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff ff5a 	bl	8004550 <LL_ADC_IsInternalRegulatorEnabled>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d115      	bne.n	80046ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff ff3e 	bl	8004528 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046ac:	4b81      	ldr	r3, [pc, #516]	; (80048b4 <HAL_ADC_Init+0x278>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	099b      	lsrs	r3, r3, #6
 80046b2:	4a81      	ldr	r2, [pc, #516]	; (80048b8 <HAL_ADC_Init+0x27c>)
 80046b4:	fba2 2303 	umull	r2, r3, r2, r3
 80046b8:	099b      	lsrs	r3, r3, #6
 80046ba:	3301      	adds	r3, #1
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80046c0:	e002      	b.n	80046c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f9      	bne.n	80046c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff ff3c 	bl	8004550 <LL_ADC_IsInternalRegulatorEnabled>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10d      	bne.n	80046fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e2:	f043 0210 	orr.w	r2, r3, #16
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ee:	f043 0201 	orr.w	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff ff75 	bl	80045ee <LL_ADC_REG_IsConversionOngoing>
 8004704:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b00      	cmp	r3, #0
 8004710:	f040 80c2 	bne.w	8004898 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2b00      	cmp	r3, #0
 8004718:	f040 80be 	bne.w	8004898 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004720:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004724:	f043 0202 	orr.w	r2, r3, #2
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff ff35 	bl	80045a0 <LL_ADC_IsEnabled>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800473c:	485f      	ldr	r0, [pc, #380]	; (80048bc <HAL_ADC_Init+0x280>)
 800473e:	f7ff ff2f 	bl	80045a0 <LL_ADC_IsEnabled>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d105      	bne.n	8004754 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	4619      	mov	r1, r3
 800474e:	485c      	ldr	r0, [pc, #368]	; (80048c0 <HAL_ADC_Init+0x284>)
 8004750:	f7ff fd9a 	bl	8004288 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	7e5b      	ldrb	r3, [r3, #25]
 8004758:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800475e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004764:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800476a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004772:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004774:	4313      	orrs	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d106      	bne.n	8004790 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	3b01      	subs	r3, #1
 8004788:	045b      	lsls	r3, r3, #17
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4313      	orrs	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	2b00      	cmp	r3, #0
 8004796:	d009      	beq.n	80047ac <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	4b44      	ldr	r3, [pc, #272]	; (80048c4 <HAL_ADC_Init+0x288>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6812      	ldr	r2, [r2, #0]
 80047ba:	69b9      	ldr	r1, [r7, #24]
 80047bc:	430b      	orrs	r3, r1
 80047be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff ff25 	bl	8004614 <LL_ADC_INJ_IsConversionOngoing>
 80047ca:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d140      	bne.n	8004854 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d13d      	bne.n	8004854 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	7e1b      	ldrb	r3, [r3, #24]
 80047e0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80047e2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047ea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047fa:	f023 0306 	bic.w	r3, r3, #6
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6812      	ldr	r2, [r2, #0]
 8004802:	69b9      	ldr	r1, [r7, #24]
 8004804:	430b      	orrs	r3, r1
 8004806:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800480e:	2b01      	cmp	r3, #1
 8004810:	d118      	bne.n	8004844 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800481c:	f023 0304 	bic.w	r3, r3, #4
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004828:	4311      	orrs	r1, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800482e:	4311      	orrs	r1, r2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004834:	430a      	orrs	r2, r1
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0201 	orr.w	r2, r2, #1
 8004840:	611a      	str	r2, [r3, #16]
 8004842:	e007      	b.n	8004854 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0201 	bic.w	r2, r2, #1
 8004852:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d10c      	bne.n	8004876 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	f023 010f 	bic.w	r1, r3, #15
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	1e5a      	subs	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
 8004874:	e007      	b.n	8004886 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 020f 	bic.w	r2, r2, #15
 8004884:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488a:	f023 0303 	bic.w	r3, r3, #3
 800488e:	f043 0201 	orr.w	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	659a      	str	r2, [r3, #88]	; 0x58
 8004896:	e007      	b.n	80048a8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489c:	f043 0210 	orr.w	r2, r3, #16
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80048a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3720      	adds	r7, #32
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000010 	.word	0x20000010
 80048b8:	053e2d63 	.word	0x053e2d63
 80048bc:	50040000 	.word	0x50040000
 80048c0:	50040300 	.word	0x50040300
 80048c4:	fff0c007 	.word	0xfff0c007

080048c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff fe88 	bl	80045ee <LL_ADC_REG_IsConversionOngoing>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d167      	bne.n	80049b4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_ADC_Start_DMA+0x2a>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e063      	b.n	80049ba <HAL_ADC_Start_DMA+0xf2>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fc78 	bl	80051f0 <ADC_Enable>
 8004900:	4603      	mov	r3, r0
 8004902:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004904:	7dfb      	ldrb	r3, [r7, #23]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d14f      	bne.n	80049aa <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d006      	beq.n	8004938 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492e:	f023 0206 	bic.w	r2, r3, #6
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	65da      	str	r2, [r3, #92]	; 0x5c
 8004936:	e002      	b.n	800493e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004942:	4a20      	ldr	r2, [pc, #128]	; (80049c4 <HAL_ADC_Start_DMA+0xfc>)
 8004944:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494a:	4a1f      	ldr	r2, [pc, #124]	; (80049c8 <HAL_ADC_Start_DMA+0x100>)
 800494c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004952:	4a1e      	ldr	r2, [pc, #120]	; (80049cc <HAL_ADC_Start_DMA+0x104>)
 8004954:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	221c      	movs	r2, #28
 800495c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f042 0210 	orr.w	r2, r2, #16
 8004974:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0201 	orr.w	r2, r2, #1
 8004984:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3340      	adds	r3, #64	; 0x40
 8004990:	4619      	mov	r1, r3
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f000 feff 	bl	8005798 <HAL_DMA_Start_IT>
 800499a:	4603      	mov	r3, r0
 800499c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff fe0f 	bl	80045c6 <LL_ADC_REG_StartConversion>
 80049a8:	e006      	b.n	80049b8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80049b2:	e001      	b.n	80049b8 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80049b4:	2302      	movs	r3, #2
 80049b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80049b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	080052fd 	.word	0x080052fd
 80049c8:	080053d5 	.word	0x080053d5
 80049cc:	080053f1 	.word	0x080053f1

080049d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b0b6      	sub	sp, #216	; 0xd8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_ADC_ConfigChannel+0x22>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e3d5      	b.n	80051c6 <HAL_ADC_ConfigChannel+0x7ce>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff fde1 	bl	80045ee <LL_ADC_REG_IsConversionOngoing>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f040 83ba 	bne.w	80051a8 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b05      	cmp	r3, #5
 8004a42:	d824      	bhi.n	8004a8e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	3b02      	subs	r3, #2
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d81b      	bhi.n	8004a86 <HAL_ADC_ConfigChannel+0x8e>
 8004a4e:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <HAL_ADC_ConfigChannel+0x5c>)
 8004a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a54:	08004a65 	.word	0x08004a65
 8004a58:	08004a6d 	.word	0x08004a6d
 8004a5c:	08004a75 	.word	0x08004a75
 8004a60:	08004a7d 	.word	0x08004a7d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004a64:	230c      	movs	r3, #12
 8004a66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a6a:	e010      	b.n	8004a8e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004a6c:	2312      	movs	r3, #18
 8004a6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a72:	e00c      	b.n	8004a8e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004a74:	2318      	movs	r3, #24
 8004a76:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a7a:	e008      	b.n	8004a8e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a84:	e003      	b.n	8004a8e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004a86:	2306      	movs	r3, #6
 8004a88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a8c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004a9c:	f7ff fca3 	bl	80043e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff fda2 	bl	80045ee <LL_ADC_REG_IsConversionOngoing>
 8004aaa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff fdae 	bl	8004614 <LL_ADC_INJ_IsConversionOngoing>
 8004ab8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f040 81bf 	bne.w	8004e44 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ac6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f040 81ba 	bne.w	8004e44 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ad8:	d10f      	bne.n	8004afa <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	f7ff fcaa 	bl	800443e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fc51 	bl	800439a <LL_ADC_SetSamplingTimeCommonConfig>
 8004af8:	e00e      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	6819      	ldr	r1, [r3, #0]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	461a      	mov	r2, r3
 8004b08:	f7ff fc99 	bl	800443e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2100      	movs	r1, #0
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff fc41 	bl	800439a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	695a      	ldr	r2, [r3, #20]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	08db      	lsrs	r3, r3, #3
 8004b24:	f003 0303 	and.w	r3, r3, #3
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d00a      	beq.n	8004b50 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	6919      	ldr	r1, [r3, #16]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b4a:	f7ff fbd1 	bl	80042f0 <LL_ADC_SetOffset>
 8004b4e:	e179      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2100      	movs	r1, #0
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff fbee 	bl	8004338 <LL_ADC_GetOffsetChannel>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <HAL_ADC_ConfigChannel+0x184>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff fbe3 	bl	8004338 <LL_ADC_GetOffsetChannel>
 8004b72:	4603      	mov	r3, r0
 8004b74:	0e9b      	lsrs	r3, r3, #26
 8004b76:	f003 021f 	and.w	r2, r3, #31
 8004b7a:	e01e      	b.n	8004bba <HAL_ADC_ConfigChannel+0x1c2>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2100      	movs	r1, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fbd8 	bl	8004338 <LL_ADC_GetOffsetChannel>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b92:	fa93 f3a3 	rbit	r3, r3
 8004b96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004ba2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8004baa:	2320      	movs	r3, #32
 8004bac:	e004      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8004bae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004bb2:	fab3 f383 	clz	r3, r3
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d105      	bne.n	8004bd2 <HAL_ADC_ConfigChannel+0x1da>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	0e9b      	lsrs	r3, r3, #26
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	e018      	b.n	8004c04 <HAL_ADC_ConfigChannel+0x20c>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bde:	fa93 f3a3 	rbit	r3, r3
 8004be2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004be6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004bee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8004bf6:	2320      	movs	r3, #32
 8004bf8:	e004      	b.n	8004c04 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8004bfa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004bfe:	fab3 f383 	clz	r3, r3
 8004c02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d106      	bne.n	8004c16 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2100      	movs	r1, #0
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff fba7 	bl	8004364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff fb8b 	bl	8004338 <LL_ADC_GetOffsetChannel>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <HAL_ADC_ConfigChannel+0x24a>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2101      	movs	r1, #1
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7ff fb80 	bl	8004338 <LL_ADC_GetOffsetChannel>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	0e9b      	lsrs	r3, r3, #26
 8004c3c:	f003 021f 	and.w	r2, r3, #31
 8004c40:	e01e      	b.n	8004c80 <HAL_ADC_ConfigChannel+0x288>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2101      	movs	r1, #1
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff fb75 	bl	8004338 <LL_ADC_GetOffsetChannel>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c58:	fa93 f3a3 	rbit	r3, r3
 8004c5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004c68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8004c70:	2320      	movs	r3, #32
 8004c72:	e004      	b.n	8004c7e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004c74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c78:	fab3 f383 	clz	r3, r3
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <HAL_ADC_ConfigChannel+0x2a0>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	0e9b      	lsrs	r3, r3, #26
 8004c92:	f003 031f 	and.w	r3, r3, #31
 8004c96:	e018      	b.n	8004cca <HAL_ADC_ConfigChannel+0x2d2>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ca4:	fa93 f3a3 	rbit	r3, r3
 8004ca8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004cac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8004cbc:	2320      	movs	r3, #32
 8004cbe:	e004      	b.n	8004cca <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8004cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cc4:	fab3 f383 	clz	r3, r3
 8004cc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d106      	bne.n	8004cdc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff fb44 	bl	8004364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2102      	movs	r1, #2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff fb28 	bl	8004338 <LL_ADC_GetOffsetChannel>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10a      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x310>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2102      	movs	r1, #2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff fb1d 	bl	8004338 <LL_ADC_GetOffsetChannel>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	0e9b      	lsrs	r3, r3, #26
 8004d02:	f003 021f 	and.w	r2, r3, #31
 8004d06:	e01e      	b.n	8004d46 <HAL_ADC_ConfigChannel+0x34e>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2102      	movs	r1, #2
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff fb12 	bl	8004338 <LL_ADC_GetOffsetChannel>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d1e:	fa93 f3a3 	rbit	r3, r3
 8004d22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004d26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8004d36:	2320      	movs	r3, #32
 8004d38:	e004      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8004d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d3e:	fab3 f383 	clz	r3, r3
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d105      	bne.n	8004d5e <HAL_ADC_ConfigChannel+0x366>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	0e9b      	lsrs	r3, r3, #26
 8004d58:	f003 031f 	and.w	r3, r3, #31
 8004d5c:	e014      	b.n	8004d88 <HAL_ADC_ConfigChannel+0x390>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d66:	fa93 f3a3 	rbit	r3, r3
 8004d6a:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004d72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8004d7a:	2320      	movs	r3, #32
 8004d7c:	e004      	b.n	8004d88 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8004d7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d82:	fab3 f383 	clz	r3, r3
 8004d86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d106      	bne.n	8004d9a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2200      	movs	r2, #0
 8004d92:	2102      	movs	r1, #2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fae5 	bl	8004364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2103      	movs	r1, #3
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff fac9 	bl	8004338 <LL_ADC_GetOffsetChannel>
 8004da6:	4603      	mov	r3, r0
 8004da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <HAL_ADC_ConfigChannel+0x3ce>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2103      	movs	r1, #3
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff fabe 	bl	8004338 <LL_ADC_GetOffsetChannel>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	0e9b      	lsrs	r3, r3, #26
 8004dc0:	f003 021f 	and.w	r2, r3, #31
 8004dc4:	e017      	b.n	8004df6 <HAL_ADC_ConfigChannel+0x3fe>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2103      	movs	r1, #3
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff fab3 	bl	8004338 <LL_ADC_GetOffsetChannel>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dd8:	fa93 f3a3 	rbit	r3, r3
 8004ddc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de0:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8004de8:	2320      	movs	r3, #32
 8004dea:	e003      	b.n	8004df4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8004dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dee:	fab3 f383 	clz	r3, r3
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d105      	bne.n	8004e0e <HAL_ADC_ConfigChannel+0x416>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	0e9b      	lsrs	r3, r3, #26
 8004e08:	f003 031f 	and.w	r3, r3, #31
 8004e0c:	e011      	b.n	8004e32 <HAL_ADC_ConfigChannel+0x43a>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e16:	fa93 f3a3 	rbit	r3, r3
 8004e1a:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004e1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e1e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004e20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8004e26:	2320      	movs	r3, #32
 8004e28:	e003      	b.n	8004e32 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8004e2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e2c:	fab3 f383 	clz	r3, r3
 8004e30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d106      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2103      	movs	r1, #3
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7ff fa90 	bl	8004364 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff fba9 	bl	80045a0 <LL_ADC_IsEnabled>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f040 813f 	bne.w	80050d4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6819      	ldr	r1, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	461a      	mov	r2, r3
 8004e64:	f7ff fb16 	bl	8004494 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	4a8e      	ldr	r2, [pc, #568]	; (80050a8 <HAL_ADC_ConfigChannel+0x6b0>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	f040 8130 	bne.w	80050d4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10b      	bne.n	8004e9c <HAL_ADC_ConfigChannel+0x4a4>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	0e9b      	lsrs	r3, r3, #26
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	2b09      	cmp	r3, #9
 8004e92:	bf94      	ite	ls
 8004e94:	2301      	movls	r3, #1
 8004e96:	2300      	movhi	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	e019      	b.n	8004ed0 <HAL_ADC_ConfigChannel+0x4d8>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ea4:	fa93 f3a3 	rbit	r3, r3
 8004ea8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004eb4:	2320      	movs	r3, #32
 8004eb6:	e003      	b.n	8004ec0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eba:	fab3 f383 	clz	r3, r3
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	f003 031f 	and.w	r3, r3, #31
 8004ec6:	2b09      	cmp	r3, #9
 8004ec8:	bf94      	ite	ls
 8004eca:	2301      	movls	r3, #1
 8004ecc:	2300      	movhi	r3, #0
 8004ece:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d079      	beq.n	8004fc8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d107      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x4f8>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	0e9b      	lsrs	r3, r3, #26
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	069b      	lsls	r3, r3, #26
 8004eea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004eee:	e015      	b.n	8004f1c <HAL_ADC_ConfigChannel+0x524>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef8:	fa93 f3a3 	rbit	r3, r3
 8004efc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f00:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8004f08:	2320      	movs	r3, #32
 8004f0a:	e003      	b.n	8004f14 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f0e:	fab3 f383 	clz	r3, r3
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	3301      	adds	r3, #1
 8004f16:	069b      	lsls	r3, r3, #26
 8004f18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d109      	bne.n	8004f3c <HAL_ADC_ConfigChannel+0x544>
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	0e9b      	lsrs	r3, r3, #26
 8004f2e:	3301      	adds	r3, #1
 8004f30:	f003 031f 	and.w	r3, r3, #31
 8004f34:	2101      	movs	r1, #1
 8004f36:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3a:	e017      	b.n	8004f6c <HAL_ADC_ConfigChannel+0x574>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f44:	fa93 f3a3 	rbit	r3, r3
 8004f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f4c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004f54:	2320      	movs	r3, #32
 8004f56:	e003      	b.n	8004f60 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5a:	fab3 f383 	clz	r3, r3
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	3301      	adds	r3, #1
 8004f62:	f003 031f 	and.w	r3, r3, #31
 8004f66:	2101      	movs	r1, #1
 8004f68:	fa01 f303 	lsl.w	r3, r1, r3
 8004f6c:	ea42 0103 	orr.w	r1, r2, r3
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10a      	bne.n	8004f92 <HAL_ADC_ConfigChannel+0x59a>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	0e9b      	lsrs	r3, r3, #26
 8004f82:	3301      	adds	r3, #1
 8004f84:	f003 021f 	and.w	r2, r3, #31
 8004f88:	4613      	mov	r3, r2
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	4413      	add	r3, r2
 8004f8e:	051b      	lsls	r3, r3, #20
 8004f90:	e018      	b.n	8004fc4 <HAL_ADC_ConfigChannel+0x5cc>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9a:	fa93 f3a3 	rbit	r3, r3
 8004f9e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004faa:	2320      	movs	r3, #32
 8004fac:	e003      	b.n	8004fb6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8004fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb0:	fab3 f383 	clz	r3, r3
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	f003 021f 	and.w	r2, r3, #31
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	4413      	add	r3, r2
 8004fc2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	e080      	b.n	80050ca <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d107      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x5ec>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	0e9b      	lsrs	r3, r3, #26
 8004fda:	3301      	adds	r3, #1
 8004fdc:	069b      	lsls	r3, r3, #26
 8004fde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fe2:	e015      	b.n	8005010 <HAL_ADC_ConfigChannel+0x618>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	fa93 f3a3 	rbit	r3, r3
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004ffc:	2320      	movs	r3, #32
 8004ffe:	e003      	b.n	8005008 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8005000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005002:	fab3 f383 	clz	r3, r3
 8005006:	b2db      	uxtb	r3, r3
 8005008:	3301      	adds	r3, #1
 800500a:	069b      	lsls	r3, r3, #26
 800500c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005018:	2b00      	cmp	r3, #0
 800501a:	d109      	bne.n	8005030 <HAL_ADC_ConfigChannel+0x638>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	0e9b      	lsrs	r3, r3, #26
 8005022:	3301      	adds	r3, #1
 8005024:	f003 031f 	and.w	r3, r3, #31
 8005028:	2101      	movs	r1, #1
 800502a:	fa01 f303 	lsl.w	r3, r1, r3
 800502e:	e017      	b.n	8005060 <HAL_ADC_ConfigChannel+0x668>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	fa93 f3a3 	rbit	r3, r3
 800503c:	61bb      	str	r3, [r7, #24]
  return result;
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8005048:	2320      	movs	r3, #32
 800504a:	e003      	b.n	8005054 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	fab3 f383 	clz	r3, r3
 8005052:	b2db      	uxtb	r3, r3
 8005054:	3301      	adds	r3, #1
 8005056:	f003 031f 	and.w	r3, r3, #31
 800505a:	2101      	movs	r1, #1
 800505c:	fa01 f303 	lsl.w	r3, r1, r3
 8005060:	ea42 0103 	orr.w	r1, r2, r3
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10d      	bne.n	800508c <HAL_ADC_ConfigChannel+0x694>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	0e9b      	lsrs	r3, r3, #26
 8005076:	3301      	adds	r3, #1
 8005078:	f003 021f 	and.w	r2, r3, #31
 800507c:	4613      	mov	r3, r2
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	4413      	add	r3, r2
 8005082:	3b1e      	subs	r3, #30
 8005084:	051b      	lsls	r3, r3, #20
 8005086:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800508a:	e01d      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x6d0>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	fa93 f3a3 	rbit	r3, r3
 8005098:	60fb      	str	r3, [r7, #12]
  return result;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d103      	bne.n	80050ac <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80050a4:	2320      	movs	r3, #32
 80050a6:	e005      	b.n	80050b4 <HAL_ADC_ConfigChannel+0x6bc>
 80050a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	fab3 f383 	clz	r3, r3
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	3301      	adds	r3, #1
 80050b6:	f003 021f 	and.w	r2, r3, #31
 80050ba:	4613      	mov	r3, r2
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	4413      	add	r3, r2
 80050c0:	3b1e      	subs	r3, #30
 80050c2:	051b      	lsls	r3, r3, #20
 80050c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050c8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050ce:	4619      	mov	r1, r3
 80050d0:	f7ff f9b5 	bl	800443e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	4b3d      	ldr	r3, [pc, #244]	; (80051d0 <HAL_ADC_ConfigChannel+0x7d8>)
 80050da:	4013      	ands	r3, r2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d06c      	beq.n	80051ba <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050e0:	483c      	ldr	r0, [pc, #240]	; (80051d4 <HAL_ADC_ConfigChannel+0x7dc>)
 80050e2:	f7ff f8f7 	bl	80042d4 <LL_ADC_GetCommonPathInternalCh>
 80050e6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a3a      	ldr	r2, [pc, #232]	; (80051d8 <HAL_ADC_ConfigChannel+0x7e0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d127      	bne.n	8005144 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d121      	bne.n	8005144 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a35      	ldr	r2, [pc, #212]	; (80051dc <HAL_ADC_ConfigChannel+0x7e4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d157      	bne.n	80051ba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800510a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800510e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005112:	4619      	mov	r1, r3
 8005114:	482f      	ldr	r0, [pc, #188]	; (80051d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8005116:	f7ff f8ca 	bl	80042ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800511a:	4b31      	ldr	r3, [pc, #196]	; (80051e0 <HAL_ADC_ConfigChannel+0x7e8>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	099b      	lsrs	r3, r3, #6
 8005120:	4a30      	ldr	r2, [pc, #192]	; (80051e4 <HAL_ADC_ConfigChannel+0x7ec>)
 8005122:	fba2 2303 	umull	r2, r3, r2, r3
 8005126:	099b      	lsrs	r3, r3, #6
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	4613      	mov	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005134:	e002      	b.n	800513c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	3b01      	subs	r3, #1
 800513a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f9      	bne.n	8005136 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005142:	e03a      	b.n	80051ba <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a27      	ldr	r2, [pc, #156]	; (80051e8 <HAL_ADC_ConfigChannel+0x7f0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d113      	bne.n	8005176 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800514e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10d      	bne.n	8005176 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1f      	ldr	r2, [pc, #124]	; (80051dc <HAL_ADC_ConfigChannel+0x7e4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d12a      	bne.n	80051ba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005164:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005168:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800516c:	4619      	mov	r1, r3
 800516e:	4819      	ldr	r0, [pc, #100]	; (80051d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8005170:	f7ff f89d 	bl	80042ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005174:	e021      	b.n	80051ba <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1c      	ldr	r2, [pc, #112]	; (80051ec <HAL_ADC_ConfigChannel+0x7f4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d11c      	bne.n	80051ba <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005180:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d116      	bne.n	80051ba <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a12      	ldr	r2, [pc, #72]	; (80051dc <HAL_ADC_ConfigChannel+0x7e4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d111      	bne.n	80051ba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005196:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800519a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800519e:	4619      	mov	r1, r3
 80051a0:	480c      	ldr	r0, [pc, #48]	; (80051d4 <HAL_ADC_ConfigChannel+0x7dc>)
 80051a2:	f7ff f884 	bl	80042ae <LL_ADC_SetCommonPathInternalCh>
 80051a6:	e008      	b.n	80051ba <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ac:	f043 0220 	orr.w	r2, r3, #32
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80051c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	37d8      	adds	r7, #216	; 0xd8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	80080000 	.word	0x80080000
 80051d4:	50040300 	.word	0x50040300
 80051d8:	c7520000 	.word	0xc7520000
 80051dc:	50040000 	.word	0x50040000
 80051e0:	20000010 	.word	0x20000010
 80051e4:	053e2d63 	.word	0x053e2d63
 80051e8:	cb840000 	.word	0xcb840000
 80051ec:	80000001 	.word	0x80000001

080051f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff f9cd 	bl	80045a0 <LL_ADC_IsEnabled>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d169      	bne.n	80052e0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	4b36      	ldr	r3, [pc, #216]	; (80052ec <ADC_Enable+0xfc>)
 8005214:	4013      	ands	r3, r2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00d      	beq.n	8005236 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521e:	f043 0210 	orr.w	r2, r3, #16
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522a:	f043 0201 	orr.w	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e055      	b.n	80052e2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff f99c 	bl	8004578 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005240:	482b      	ldr	r0, [pc, #172]	; (80052f0 <ADC_Enable+0x100>)
 8005242:	f7ff f847 	bl	80042d4 <LL_ADC_GetCommonPathInternalCh>
 8005246:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005248:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800524c:	2b00      	cmp	r3, #0
 800524e:	d013      	beq.n	8005278 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005250:	4b28      	ldr	r3, [pc, #160]	; (80052f4 <ADC_Enable+0x104>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	099b      	lsrs	r3, r3, #6
 8005256:	4a28      	ldr	r2, [pc, #160]	; (80052f8 <ADC_Enable+0x108>)
 8005258:	fba2 2303 	umull	r2, r3, r2, r3
 800525c:	099b      	lsrs	r3, r3, #6
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	4613      	mov	r3, r2
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800526a:	e002      	b.n	8005272 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	3b01      	subs	r3, #1
 8005270:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f9      	bne.n	800526c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005278:	f7fe ffd6 	bl	8004228 <HAL_GetTick>
 800527c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800527e:	e028      	b.n	80052d2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff f98b 	bl	80045a0 <LL_ADC_IsEnabled>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d104      	bne.n	800529a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff f96f 	bl	8004578 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800529a:	f7fe ffc5 	bl	8004228 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d914      	bls.n	80052d2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d00d      	beq.n	80052d2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ba:	f043 0210 	orr.w	r2, r3, #16
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c6:	f043 0201 	orr.w	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e007      	b.n	80052e2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d1cf      	bne.n	8005280 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	8000003f 	.word	0x8000003f
 80052f0:	50040300 	.word	0x50040300
 80052f4:	20000010 	.word	0x20000010
 80052f8:	053e2d63 	.word	0x053e2d63

080052fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005312:	2b00      	cmp	r3, #0
 8005314:	d14b      	bne.n	80053ae <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800531a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d021      	beq.n	8005374 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff f843 	bl	80043c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d032      	beq.n	80053a6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d12b      	bne.n	80053a6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d11f      	bne.n	80053a6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536a:	f043 0201 	orr.w	r2, r3, #1
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	659a      	str	r2, [r3, #88]	; 0x58
 8005372:	e018      	b.n	80053a6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d111      	bne.n	80053a6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d105      	bne.n	80053a6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539e:	f043 0201 	orr.w	r2, r3, #1
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7fc f8de 	bl	8001568 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80053ac:	e00e      	b.n	80053cc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f7ff fb12 	bl	80049e4 <HAL_ADC_ErrorCallback>
}
 80053c0:	e004      	b.n	80053cc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	4798      	blx	r3
}
 80053cc:	bf00      	nop
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f7ff faf4 	bl	80049d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005402:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540e:	f043 0204 	orr.w	r2, r3, #4
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f7ff fae4 	bl	80049e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800541c:	bf00      	nop
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005434:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <__NVIC_SetPriorityGrouping+0x44>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005440:	4013      	ands	r3, r2
 8005442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800544c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005456:	4a04      	ldr	r2, [pc, #16]	; (8005468 <__NVIC_SetPriorityGrouping+0x44>)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	60d3      	str	r3, [r2, #12]
}
 800545c:	bf00      	nop
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	e000ed00 	.word	0xe000ed00

0800546c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005470:	4b04      	ldr	r3, [pc, #16]	; (8005484 <__NVIC_GetPriorityGrouping+0x18>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	0a1b      	lsrs	r3, r3, #8
 8005476:	f003 0307 	and.w	r3, r3, #7
}
 800547a:	4618      	mov	r0, r3
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	e000ed00 	.word	0xe000ed00

08005488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	4603      	mov	r3, r0
 8005490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005496:	2b00      	cmp	r3, #0
 8005498:	db0b      	blt.n	80054b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800549a:	79fb      	ldrb	r3, [r7, #7]
 800549c:	f003 021f 	and.w	r2, r3, #31
 80054a0:	4907      	ldr	r1, [pc, #28]	; (80054c0 <__NVIC_EnableIRQ+0x38>)
 80054a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a6:	095b      	lsrs	r3, r3, #5
 80054a8:	2001      	movs	r0, #1
 80054aa:	fa00 f202 	lsl.w	r2, r0, r2
 80054ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	e000e100 	.word	0xe000e100

080054c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	4603      	mov	r3, r0
 80054cc:	6039      	str	r1, [r7, #0]
 80054ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	db0a      	blt.n	80054ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	490c      	ldr	r1, [pc, #48]	; (8005510 <__NVIC_SetPriority+0x4c>)
 80054de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e2:	0112      	lsls	r2, r2, #4
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	440b      	add	r3, r1
 80054e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054ec:	e00a      	b.n	8005504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	4908      	ldr	r1, [pc, #32]	; (8005514 <__NVIC_SetPriority+0x50>)
 80054f4:	79fb      	ldrb	r3, [r7, #7]
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	3b04      	subs	r3, #4
 80054fc:	0112      	lsls	r2, r2, #4
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	440b      	add	r3, r1
 8005502:	761a      	strb	r2, [r3, #24]
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	e000e100 	.word	0xe000e100
 8005514:	e000ed00 	.word	0xe000ed00

08005518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005518:	b480      	push	{r7}
 800551a:	b089      	sub	sp, #36	; 0x24
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	f1c3 0307 	rsb	r3, r3, #7
 8005532:	2b04      	cmp	r3, #4
 8005534:	bf28      	it	cs
 8005536:	2304      	movcs	r3, #4
 8005538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	3304      	adds	r3, #4
 800553e:	2b06      	cmp	r3, #6
 8005540:	d902      	bls.n	8005548 <NVIC_EncodePriority+0x30>
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	3b03      	subs	r3, #3
 8005546:	e000      	b.n	800554a <NVIC_EncodePriority+0x32>
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800554c:	f04f 32ff 	mov.w	r2, #4294967295
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	43da      	mvns	r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	401a      	ands	r2, r3
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005560:	f04f 31ff 	mov.w	r1, #4294967295
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	fa01 f303 	lsl.w	r3, r1, r3
 800556a:	43d9      	mvns	r1, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005570:	4313      	orrs	r3, r2
         );
}
 8005572:	4618      	mov	r0, r3
 8005574:	3724      	adds	r7, #36	; 0x24
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
	...

08005580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3b01      	subs	r3, #1
 800558c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005590:	d301      	bcc.n	8005596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005592:	2301      	movs	r3, #1
 8005594:	e00f      	b.n	80055b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005596:	4a0a      	ldr	r2, [pc, #40]	; (80055c0 <SysTick_Config+0x40>)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3b01      	subs	r3, #1
 800559c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800559e:	210f      	movs	r1, #15
 80055a0:	f04f 30ff 	mov.w	r0, #4294967295
 80055a4:	f7ff ff8e 	bl	80054c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055a8:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <SysTick_Config+0x40>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055ae:	4b04      	ldr	r3, [pc, #16]	; (80055c0 <SysTick_Config+0x40>)
 80055b0:	2207      	movs	r2, #7
 80055b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	e000e010 	.word	0xe000e010

080055c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7ff ff29 	bl	8005424 <__NVIC_SetPriorityGrouping>
}
 80055d2:	bf00      	nop
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b086      	sub	sp, #24
 80055de:	af00      	add	r7, sp, #0
 80055e0:	4603      	mov	r3, r0
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
 80055e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80055e8:	2300      	movs	r3, #0
 80055ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80055ec:	f7ff ff3e 	bl	800546c <__NVIC_GetPriorityGrouping>
 80055f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	6978      	ldr	r0, [r7, #20]
 80055f8:	f7ff ff8e 	bl	8005518 <NVIC_EncodePriority>
 80055fc:	4602      	mov	r2, r0
 80055fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005602:	4611      	mov	r1, r2
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff ff5d 	bl	80054c4 <__NVIC_SetPriority>
}
 800560a:	bf00      	nop
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b082      	sub	sp, #8
 8005616:	af00      	add	r7, sp, #0
 8005618:	4603      	mov	r3, r0
 800561a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800561c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff ff31 	bl	8005488 <__NVIC_EnableIRQ>
}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b082      	sub	sp, #8
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7ff ffa2 	bl	8005580 <SysTick_Config>
 800563c:	4603      	mov	r3, r0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e08d      	b.n	8005776 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	4b47      	ldr	r3, [pc, #284]	; (8005780 <HAL_DMA_Init+0x138>)
 8005662:	429a      	cmp	r2, r3
 8005664:	d80f      	bhi.n	8005686 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	4b45      	ldr	r3, [pc, #276]	; (8005784 <HAL_DMA_Init+0x13c>)
 800566e:	4413      	add	r3, r2
 8005670:	4a45      	ldr	r2, [pc, #276]	; (8005788 <HAL_DMA_Init+0x140>)
 8005672:	fba2 2303 	umull	r2, r3, r2, r3
 8005676:	091b      	lsrs	r3, r3, #4
 8005678:	009a      	lsls	r2, r3, #2
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a42      	ldr	r2, [pc, #264]	; (800578c <HAL_DMA_Init+0x144>)
 8005682:	641a      	str	r2, [r3, #64]	; 0x40
 8005684:	e00e      	b.n	80056a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	4b40      	ldr	r3, [pc, #256]	; (8005790 <HAL_DMA_Init+0x148>)
 800568e:	4413      	add	r3, r2
 8005690:	4a3d      	ldr	r2, [pc, #244]	; (8005788 <HAL_DMA_Init+0x140>)
 8005692:	fba2 2303 	umull	r2, r3, r2, r3
 8005696:	091b      	lsrs	r3, r3, #4
 8005698:	009a      	lsls	r2, r3, #2
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a3c      	ldr	r2, [pc, #240]	; (8005794 <HAL_DMA_Init+0x14c>)
 80056a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80056ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80056c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f9b6 	bl	8005a68 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005704:	d102      	bne.n	800570c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005720:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d010      	beq.n	800574c <HAL_DMA_Init+0x104>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2b04      	cmp	r3, #4
 8005730:	d80c      	bhi.n	800574c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f9d6 	bl	8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005748:	605a      	str	r2, [r3, #4]
 800574a:	e008      	b.n	800575e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	40020407 	.word	0x40020407
 8005784:	bffdfff8 	.word	0xbffdfff8
 8005788:	cccccccd 	.word	0xcccccccd
 800578c:	40020000 	.word	0x40020000
 8005790:	bffdfbf8 	.word	0xbffdfbf8
 8005794:	40020400 	.word	0x40020400

08005798 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_DMA_Start_IT+0x20>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e066      	b.n	8005886 <HAL_DMA_Start_IT+0xee>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d155      	bne.n	8005878 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0201 	bic.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 f8fb 	bl	80059ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d008      	beq.n	8005810 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 020e 	orr.w	r2, r2, #14
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	e00f      	b.n	8005830 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0204 	bic.w	r2, r2, #4
 800581e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 020a 	orr.w	r2, r2, #10
 800582e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d007      	beq.n	800584e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800584c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005852:	2b00      	cmp	r3, #0
 8005854:	d007      	beq.n	8005866 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005864:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0201 	orr.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	e005      	b.n	8005884 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005880:	2302      	movs	r3, #2
 8005882:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005884:	7dfb      	ldrb	r3, [r7, #23]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058aa:	f003 031c 	and.w	r3, r3, #28
 80058ae:	2204      	movs	r2, #4
 80058b0:	409a      	lsls	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4013      	ands	r3, r2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d026      	beq.n	8005908 <HAL_DMA_IRQHandler+0x7a>
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d021      	beq.n	8005908 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d107      	bne.n	80058e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0204 	bic.w	r2, r2, #4
 80058e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e6:	f003 021c 	and.w	r2, r3, #28
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	2104      	movs	r1, #4
 80058f0:	fa01 f202 	lsl.w	r2, r1, r2
 80058f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d071      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005906:	e06c      	b.n	80059e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590c:	f003 031c 	and.w	r3, r3, #28
 8005910:	2202      	movs	r2, #2
 8005912:	409a      	lsls	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4013      	ands	r3, r2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d02e      	beq.n	800597a <HAL_DMA_IRQHandler+0xec>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d029      	beq.n	800597a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0320 	and.w	r3, r3, #32
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10b      	bne.n	800594c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 020a 	bic.w	r2, r2, #10
 8005942:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005950:	f003 021c 	and.w	r2, r3, #28
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	2102      	movs	r1, #2
 800595a:	fa01 f202 	lsl.w	r2, r1, r2
 800595e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d038      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005978:	e033      	b.n	80059e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597e:	f003 031c 	and.w	r3, r3, #28
 8005982:	2208      	movs	r2, #8
 8005984:	409a      	lsls	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4013      	ands	r3, r2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d02a      	beq.n	80059e4 <HAL_DMA_IRQHandler+0x156>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d025      	beq.n	80059e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 020e 	bic.w	r2, r2, #14
 80059a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ac:	f003 021c 	and.w	r2, r3, #28
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	2101      	movs	r1, #1
 80059b6:	fa01 f202 	lsl.w	r2, r1, r2
 80059ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d004      	beq.n	80059e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80059e2:	bf00      	nop
 80059e4:	bf00      	nop
}
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a02:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d004      	beq.n	8005a16 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005a14:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1a:	f003 021c 	and.w	r2, r3, #28
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	2101      	movs	r1, #1
 8005a24:	fa01 f202 	lsl.w	r2, r1, r2
 8005a28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b10      	cmp	r3, #16
 8005a38:	d108      	bne.n	8005a4c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a4a:	e007      	b.n	8005a5c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	60da      	str	r2, [r3, #12]
}
 8005a5c:	bf00      	nop
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	461a      	mov	r2, r3
 8005a76:	4b17      	ldr	r3, [pc, #92]	; (8005ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d80a      	bhi.n	8005a92 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a80:	089b      	lsrs	r3, r3, #2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a88:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6493      	str	r3, [r2, #72]	; 0x48
 8005a90:	e007      	b.n	8005aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a96:	089b      	lsrs	r3, r3, #2
 8005a98:	009a      	lsls	r2, r3, #2
 8005a9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005a9c:	4413      	add	r3, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	3b08      	subs	r3, #8
 8005aaa:	4a0c      	ldr	r2, [pc, #48]	; (8005adc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005aac:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab0:	091b      	lsrs	r3, r3, #4
 8005ab2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a0a      	ldr	r2, [pc, #40]	; (8005ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005ab8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f003 031f 	and.w	r3, r3, #31
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	409a      	lsls	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005ac8:	bf00      	nop
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	40020407 	.word	0x40020407
 8005ad8:	4002081c 	.word	0x4002081c
 8005adc:	cccccccd 	.word	0xcccccccd
 8005ae0:	40020880 	.word	0x40020880

08005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4b0b      	ldr	r3, [pc, #44]	; (8005b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	461a      	mov	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a08      	ldr	r2, [pc, #32]	; (8005b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005b06:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	f003 0303 	and.w	r3, r3, #3
 8005b10:	2201      	movs	r2, #1
 8005b12:	409a      	lsls	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005b18:	bf00      	nop
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	1000823f 	.word	0x1000823f
 8005b28:	40020940 	.word	0x40020940

08005b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b3a:	e166      	b.n	8005e0a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	2101      	movs	r1, #1
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	fa01 f303 	lsl.w	r3, r1, r3
 8005b48:	4013      	ands	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 8158 	beq.w	8005e04 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f003 0303 	and.w	r3, r3, #3
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d005      	beq.n	8005b6c <HAL_GPIO_Init+0x40>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f003 0303 	and.w	r3, r3, #3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d130      	bne.n	8005bce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	2203      	movs	r2, #3
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4013      	ands	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8005baa:	43db      	mvns	r3, r3
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4013      	ands	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	091b      	lsrs	r3, r3, #4
 8005bb8:	f003 0201 	and.w	r2, r3, #1
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d017      	beq.n	8005c0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	2203      	movs	r2, #3
 8005be6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bea:	43db      	mvns	r3, r3
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d123      	bne.n	8005c5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	08da      	lsrs	r2, r3, #3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3208      	adds	r2, #8
 8005c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	220f      	movs	r2, #15
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	43db      	mvns	r3, r3
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4013      	ands	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	08da      	lsrs	r2, r3, #3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3208      	adds	r2, #8
 8005c58:	6939      	ldr	r1, [r7, #16]
 8005c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	2203      	movs	r2, #3
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	43db      	mvns	r3, r3
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4013      	ands	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f003 0203 	and.w	r2, r3, #3
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 80b2 	beq.w	8005e04 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ca0:	4b61      	ldr	r3, [pc, #388]	; (8005e28 <HAL_GPIO_Init+0x2fc>)
 8005ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca4:	4a60      	ldr	r2, [pc, #384]	; (8005e28 <HAL_GPIO_Init+0x2fc>)
 8005ca6:	f043 0301 	orr.w	r3, r3, #1
 8005caa:	6613      	str	r3, [r2, #96]	; 0x60
 8005cac:	4b5e      	ldr	r3, [pc, #376]	; (8005e28 <HAL_GPIO_Init+0x2fc>)
 8005cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	60bb      	str	r3, [r7, #8]
 8005cb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005cb8:	4a5c      	ldr	r2, [pc, #368]	; (8005e2c <HAL_GPIO_Init+0x300>)
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	089b      	lsrs	r3, r3, #2
 8005cbe:	3302      	adds	r3, #2
 8005cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f003 0303 	and.w	r3, r3, #3
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	220f      	movs	r2, #15
 8005cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005ce2:	d02b      	beq.n	8005d3c <HAL_GPIO_Init+0x210>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a52      	ldr	r2, [pc, #328]	; (8005e30 <HAL_GPIO_Init+0x304>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d025      	beq.n	8005d38 <HAL_GPIO_Init+0x20c>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a51      	ldr	r2, [pc, #324]	; (8005e34 <HAL_GPIO_Init+0x308>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d01f      	beq.n	8005d34 <HAL_GPIO_Init+0x208>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a50      	ldr	r2, [pc, #320]	; (8005e38 <HAL_GPIO_Init+0x30c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d019      	beq.n	8005d30 <HAL_GPIO_Init+0x204>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a4f      	ldr	r2, [pc, #316]	; (8005e3c <HAL_GPIO_Init+0x310>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d013      	beq.n	8005d2c <HAL_GPIO_Init+0x200>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a4e      	ldr	r2, [pc, #312]	; (8005e40 <HAL_GPIO_Init+0x314>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00d      	beq.n	8005d28 <HAL_GPIO_Init+0x1fc>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a4d      	ldr	r2, [pc, #308]	; (8005e44 <HAL_GPIO_Init+0x318>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d007      	beq.n	8005d24 <HAL_GPIO_Init+0x1f8>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a4c      	ldr	r2, [pc, #304]	; (8005e48 <HAL_GPIO_Init+0x31c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d101      	bne.n	8005d20 <HAL_GPIO_Init+0x1f4>
 8005d1c:	2307      	movs	r3, #7
 8005d1e:	e00e      	b.n	8005d3e <HAL_GPIO_Init+0x212>
 8005d20:	2308      	movs	r3, #8
 8005d22:	e00c      	b.n	8005d3e <HAL_GPIO_Init+0x212>
 8005d24:	2306      	movs	r3, #6
 8005d26:	e00a      	b.n	8005d3e <HAL_GPIO_Init+0x212>
 8005d28:	2305      	movs	r3, #5
 8005d2a:	e008      	b.n	8005d3e <HAL_GPIO_Init+0x212>
 8005d2c:	2304      	movs	r3, #4
 8005d2e:	e006      	b.n	8005d3e <HAL_GPIO_Init+0x212>
 8005d30:	2303      	movs	r3, #3
 8005d32:	e004      	b.n	8005d3e <HAL_GPIO_Init+0x212>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e002      	b.n	8005d3e <HAL_GPIO_Init+0x212>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <HAL_GPIO_Init+0x212>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	f002 0203 	and.w	r2, r2, #3
 8005d44:	0092      	lsls	r2, r2, #2
 8005d46:	4093      	lsls	r3, r2
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005d4e:	4937      	ldr	r1, [pc, #220]	; (8005e2c <HAL_GPIO_Init+0x300>)
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	089b      	lsrs	r3, r3, #2
 8005d54:	3302      	adds	r3, #2
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d5c:	4b3b      	ldr	r3, [pc, #236]	; (8005e4c <HAL_GPIO_Init+0x320>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	43db      	mvns	r3, r3
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d003      	beq.n	8005d80 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005d80:	4a32      	ldr	r2, [pc, #200]	; (8005e4c <HAL_GPIO_Init+0x320>)
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005d86:	4b31      	ldr	r3, [pc, #196]	; (8005e4c <HAL_GPIO_Init+0x320>)
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	43db      	mvns	r3, r3
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4013      	ands	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005daa:	4a28      	ldr	r2, [pc, #160]	; (8005e4c <HAL_GPIO_Init+0x320>)
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005db0:	4b26      	ldr	r3, [pc, #152]	; (8005e4c <HAL_GPIO_Init+0x320>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	43db      	mvns	r3, r3
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005dd4:	4a1d      	ldr	r2, [pc, #116]	; (8005e4c <HAL_GPIO_Init+0x320>)
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005dda:	4b1c      	ldr	r3, [pc, #112]	; (8005e4c <HAL_GPIO_Init+0x320>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	43db      	mvns	r3, r3
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4013      	ands	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005dfe:	4a13      	ldr	r2, [pc, #76]	; (8005e4c <HAL_GPIO_Init+0x320>)
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	3301      	adds	r3, #1
 8005e08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	fa22 f303 	lsr.w	r3, r2, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f47f ae91 	bne.w	8005b3c <HAL_GPIO_Init+0x10>
  }
}
 8005e1a:	bf00      	nop
 8005e1c:	bf00      	nop
 8005e1e:	371c      	adds	r7, #28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	40010000 	.word	0x40010000
 8005e30:	48000400 	.word	0x48000400
 8005e34:	48000800 	.word	0x48000800
 8005e38:	48000c00 	.word	0x48000c00
 8005e3c:	48001000 	.word	0x48001000
 8005e40:	48001400 	.word	0x48001400
 8005e44:	48001800 	.word	0x48001800
 8005e48:	48001c00 	.word	0x48001c00
 8005e4c:	40010400 	.word	0x40010400

08005e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	807b      	strh	r3, [r7, #2]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e60:	787b      	ldrb	r3, [r7, #1]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e66:	887a      	ldrh	r2, [r7, #2]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e6c:	e002      	b.n	8005e74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e6e:	887a      	ldrh	r2, [r7, #2]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	4603      	mov	r3, r0
 8005e88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005e8a:	4b08      	ldr	r3, [pc, #32]	; (8005eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e8c:	695a      	ldr	r2, [r3, #20]
 8005e8e:	88fb      	ldrh	r3, [r7, #6]
 8005e90:	4013      	ands	r3, r2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d006      	beq.n	8005ea4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e96:	4a05      	ldr	r2, [pc, #20]	; (8005eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e98:	88fb      	ldrh	r3, [r7, #6]
 8005e9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e9c:	88fb      	ldrh	r3, [r7, #6]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fb fea6 	bl	8001bf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ea4:	bf00      	nop
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40010400 	.word	0x40010400

08005eb0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005eb4:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <HAL_PWREx_GetVoltageRange+0x3c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec0:	d102      	bne.n	8005ec8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ec6:	e00b      	b.n	8005ee0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005ec8:	4b08      	ldr	r3, [pc, #32]	; (8005eec <HAL_PWREx_GetVoltageRange+0x3c>)
 8005eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ed6:	d102      	bne.n	8005ede <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005edc:	e000      	b.n	8005ee0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005ede:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40007000 	.word	0x40007000

08005ef0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d141      	bne.n	8005f82 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005efe:	4b4b      	ldr	r3, [pc, #300]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f0a:	d131      	bne.n	8005f70 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f0c:	4b47      	ldr	r3, [pc, #284]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f12:	4a46      	ldr	r2, [pc, #280]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f1c:	4b43      	ldr	r3, [pc, #268]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f24:	4a41      	ldr	r2, [pc, #260]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005f2c:	4b40      	ldr	r3, [pc, #256]	; (8006030 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2232      	movs	r2, #50	; 0x32
 8005f32:	fb02 f303 	mul.w	r3, r2, r3
 8005f36:	4a3f      	ldr	r2, [pc, #252]	; (8006034 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f38:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3c:	0c9b      	lsrs	r3, r3, #18
 8005f3e:	3301      	adds	r3, #1
 8005f40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f42:	e002      	b.n	8005f4a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f4a:	4b38      	ldr	r3, [pc, #224]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f56:	d102      	bne.n	8005f5e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1f2      	bne.n	8005f44 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f5e:	4b33      	ldr	r3, [pc, #204]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f6a:	d158      	bne.n	800601e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e057      	b.n	8006020 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f70:	4b2e      	ldr	r3, [pc, #184]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f76:	4a2d      	ldr	r2, [pc, #180]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005f80:	e04d      	b.n	800601e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f88:	d141      	bne.n	800600e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f8a:	4b28      	ldr	r3, [pc, #160]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f96:	d131      	bne.n	8005ffc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f98:	4b24      	ldr	r3, [pc, #144]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f9e:	4a23      	ldr	r2, [pc, #140]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005fa8:	4b20      	ldr	r3, [pc, #128]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005fb0:	4a1e      	ldr	r2, [pc, #120]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005fb8:	4b1d      	ldr	r3, [pc, #116]	; (8006030 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2232      	movs	r2, #50	; 0x32
 8005fbe:	fb02 f303 	mul.w	r3, r2, r3
 8005fc2:	4a1c      	ldr	r2, [pc, #112]	; (8006034 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc8:	0c9b      	lsrs	r3, r3, #18
 8005fca:	3301      	adds	r3, #1
 8005fcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fce:	e002      	b.n	8005fd6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fd6:	4b15      	ldr	r3, [pc, #84]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe2:	d102      	bne.n	8005fea <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f2      	bne.n	8005fd0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fea:	4b10      	ldr	r3, [pc, #64]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff6:	d112      	bne.n	800601e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e011      	b.n	8006020 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ffc:	4b0b      	ldr	r3, [pc, #44]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006002:	4a0a      	ldr	r2, [pc, #40]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006008:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800600c:	e007      	b.n	800601e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800600e:	4b07      	ldr	r3, [pc, #28]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006016:	4a05      	ldr	r2, [pc, #20]	; (800602c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006018:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800601c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	40007000 	.word	0x40007000
 8006030:	20000010 	.word	0x20000010
 8006034:	431bde83 	.word	0x431bde83

08006038 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800603c:	4b05      	ldr	r3, [pc, #20]	; (8006054 <HAL_PWREx_EnableVddIO2+0x1c>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	4a04      	ldr	r2, [pc, #16]	; (8006054 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006046:	6053      	str	r3, [r2, #4]
}
 8006048:	bf00      	nop
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40007000 	.word	0x40007000

08006058 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d102      	bne.n	800606c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	f000 bc08 	b.w	800687c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800606c:	4b96      	ldr	r3, [pc, #600]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 030c 	and.w	r3, r3, #12
 8006074:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006076:	4b94      	ldr	r3, [pc, #592]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0310 	and.w	r3, r3, #16
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 80e4 	beq.w	8006256 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d007      	beq.n	80060a4 <HAL_RCC_OscConfig+0x4c>
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	2b0c      	cmp	r3, #12
 8006098:	f040 808b 	bne.w	80061b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	f040 8087 	bne.w	80061b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060a4:	4b88      	ldr	r3, [pc, #544]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <HAL_RCC_OscConfig+0x64>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e3df      	b.n	800687c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1a      	ldr	r2, [r3, #32]
 80060c0:	4b81      	ldr	r3, [pc, #516]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0308 	and.w	r3, r3, #8
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d004      	beq.n	80060d6 <HAL_RCC_OscConfig+0x7e>
 80060cc:	4b7e      	ldr	r3, [pc, #504]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060d4:	e005      	b.n	80060e2 <HAL_RCC_OscConfig+0x8a>
 80060d6:	4b7c      	ldr	r3, [pc, #496]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 80060d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060dc:	091b      	lsrs	r3, r3, #4
 80060de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d223      	bcs.n	800612e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fdcc 	bl	8006c88 <RCC_SetFlashLatencyFromMSIRange>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e3c0      	b.n	800687c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060fa:	4b73      	ldr	r3, [pc, #460]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a72      	ldr	r2, [pc, #456]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 8006100:	f043 0308 	orr.w	r3, r3, #8
 8006104:	6013      	str	r3, [r2, #0]
 8006106:	4b70      	ldr	r3, [pc, #448]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	496d      	ldr	r1, [pc, #436]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 8006114:	4313      	orrs	r3, r2
 8006116:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006118:	4b6b      	ldr	r3, [pc, #428]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	021b      	lsls	r3, r3, #8
 8006126:	4968      	ldr	r1, [pc, #416]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 8006128:	4313      	orrs	r3, r2
 800612a:	604b      	str	r3, [r1, #4]
 800612c:	e025      	b.n	800617a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800612e:	4b66      	ldr	r3, [pc, #408]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a65      	ldr	r2, [pc, #404]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 8006134:	f043 0308 	orr.w	r3, r3, #8
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	4b63      	ldr	r3, [pc, #396]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	4960      	ldr	r1, [pc, #384]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 8006148:	4313      	orrs	r3, r2
 800614a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800614c:	4b5e      	ldr	r3, [pc, #376]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	021b      	lsls	r3, r3, #8
 800615a:	495b      	ldr	r1, [pc, #364]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 800615c:	4313      	orrs	r3, r2
 800615e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d109      	bne.n	800617a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fd8c 	bl	8006c88 <RCC_SetFlashLatencyFromMSIRange>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e380      	b.n	800687c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800617a:	f000 fcc1 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 800617e:	4602      	mov	r2, r0
 8006180:	4b51      	ldr	r3, [pc, #324]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	091b      	lsrs	r3, r3, #4
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	4950      	ldr	r1, [pc, #320]	; (80062cc <HAL_RCC_OscConfig+0x274>)
 800618c:	5ccb      	ldrb	r3, [r1, r3]
 800618e:	f003 031f 	and.w	r3, r3, #31
 8006192:	fa22 f303 	lsr.w	r3, r2, r3
 8006196:	4a4e      	ldr	r2, [pc, #312]	; (80062d0 <HAL_RCC_OscConfig+0x278>)
 8006198:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800619a:	4b4e      	ldr	r3, [pc, #312]	; (80062d4 <HAL_RCC_OscConfig+0x27c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fd fff2 	bl	8004188 <HAL_InitTick>
 80061a4:	4603      	mov	r3, r0
 80061a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d052      	beq.n	8006254 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	e364      	b.n	800687c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d032      	beq.n	8006220 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80061ba:	4b43      	ldr	r3, [pc, #268]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a42      	ldr	r2, [pc, #264]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 80061c0:	f043 0301 	orr.w	r3, r3, #1
 80061c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061c6:	f7fe f82f 	bl	8004228 <HAL_GetTick>
 80061ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061ce:	f7fe f82b 	bl	8004228 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e34d      	b.n	800687c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80061e0:	4b39      	ldr	r3, [pc, #228]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0f0      	beq.n	80061ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061ec:	4b36      	ldr	r3, [pc, #216]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a35      	ldr	r2, [pc, #212]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 80061f2:	f043 0308 	orr.w	r3, r3, #8
 80061f6:	6013      	str	r3, [r2, #0]
 80061f8:	4b33      	ldr	r3, [pc, #204]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	4930      	ldr	r1, [pc, #192]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 8006206:	4313      	orrs	r3, r2
 8006208:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800620a:	4b2f      	ldr	r3, [pc, #188]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	021b      	lsls	r3, r3, #8
 8006218:	492b      	ldr	r1, [pc, #172]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 800621a:	4313      	orrs	r3, r2
 800621c:	604b      	str	r3, [r1, #4]
 800621e:	e01a      	b.n	8006256 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006220:	4b29      	ldr	r3, [pc, #164]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a28      	ldr	r2, [pc, #160]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 8006226:	f023 0301 	bic.w	r3, r3, #1
 800622a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800622c:	f7fd fffc 	bl	8004228 <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006234:	f7fd fff8 	bl	8004228 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e31a      	b.n	800687c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006246:	4b20      	ldr	r3, [pc, #128]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1f0      	bne.n	8006234 <HAL_RCC_OscConfig+0x1dc>
 8006252:	e000      	b.n	8006256 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006254:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d073      	beq.n	800634a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	2b08      	cmp	r3, #8
 8006266:	d005      	beq.n	8006274 <HAL_RCC_OscConfig+0x21c>
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	2b0c      	cmp	r3, #12
 800626c:	d10e      	bne.n	800628c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2b03      	cmp	r3, #3
 8006272:	d10b      	bne.n	800628c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006274:	4b14      	ldr	r3, [pc, #80]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d063      	beq.n	8006348 <HAL_RCC_OscConfig+0x2f0>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d15f      	bne.n	8006348 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e2f7      	b.n	800687c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006294:	d106      	bne.n	80062a4 <HAL_RCC_OscConfig+0x24c>
 8006296:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a0b      	ldr	r2, [pc, #44]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 800629c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a0:	6013      	str	r3, [r2, #0]
 80062a2:	e025      	b.n	80062f0 <HAL_RCC_OscConfig+0x298>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062ac:	d114      	bne.n	80062d8 <HAL_RCC_OscConfig+0x280>
 80062ae:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a05      	ldr	r2, [pc, #20]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 80062b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	4b03      	ldr	r3, [pc, #12]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a02      	ldr	r2, [pc, #8]	; (80062c8 <HAL_RCC_OscConfig+0x270>)
 80062c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	e013      	b.n	80062f0 <HAL_RCC_OscConfig+0x298>
 80062c8:	40021000 	.word	0x40021000
 80062cc:	080105c0 	.word	0x080105c0
 80062d0:	20000010 	.word	0x20000010
 80062d4:	20000014 	.word	0x20000014
 80062d8:	4ba0      	ldr	r3, [pc, #640]	; (800655c <HAL_RCC_OscConfig+0x504>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a9f      	ldr	r2, [pc, #636]	; (800655c <HAL_RCC_OscConfig+0x504>)
 80062de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	4b9d      	ldr	r3, [pc, #628]	; (800655c <HAL_RCC_OscConfig+0x504>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a9c      	ldr	r2, [pc, #624]	; (800655c <HAL_RCC_OscConfig+0x504>)
 80062ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d013      	beq.n	8006320 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f8:	f7fd ff96 	bl	8004228 <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062fe:	e008      	b.n	8006312 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006300:	f7fd ff92 	bl	8004228 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b64      	cmp	r3, #100	; 0x64
 800630c:	d901      	bls.n	8006312 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e2b4      	b.n	800687c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006312:	4b92      	ldr	r3, [pc, #584]	; (800655c <HAL_RCC_OscConfig+0x504>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0f0      	beq.n	8006300 <HAL_RCC_OscConfig+0x2a8>
 800631e:	e014      	b.n	800634a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006320:	f7fd ff82 	bl	8004228 <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006328:	f7fd ff7e 	bl	8004228 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b64      	cmp	r3, #100	; 0x64
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e2a0      	b.n	800687c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800633a:	4b88      	ldr	r3, [pc, #544]	; (800655c <HAL_RCC_OscConfig+0x504>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1f0      	bne.n	8006328 <HAL_RCC_OscConfig+0x2d0>
 8006346:	e000      	b.n	800634a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d060      	beq.n	8006418 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	2b04      	cmp	r3, #4
 800635a:	d005      	beq.n	8006368 <HAL_RCC_OscConfig+0x310>
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	2b0c      	cmp	r3, #12
 8006360:	d119      	bne.n	8006396 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2b02      	cmp	r3, #2
 8006366:	d116      	bne.n	8006396 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006368:	4b7c      	ldr	r3, [pc, #496]	; (800655c <HAL_RCC_OscConfig+0x504>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <HAL_RCC_OscConfig+0x328>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e27d      	b.n	800687c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006380:	4b76      	ldr	r3, [pc, #472]	; (800655c <HAL_RCC_OscConfig+0x504>)
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	061b      	lsls	r3, r3, #24
 800638e:	4973      	ldr	r1, [pc, #460]	; (800655c <HAL_RCC_OscConfig+0x504>)
 8006390:	4313      	orrs	r3, r2
 8006392:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006394:	e040      	b.n	8006418 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d023      	beq.n	80063e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800639e:	4b6f      	ldr	r3, [pc, #444]	; (800655c <HAL_RCC_OscConfig+0x504>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a6e      	ldr	r2, [pc, #440]	; (800655c <HAL_RCC_OscConfig+0x504>)
 80063a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063aa:	f7fd ff3d 	bl	8004228 <HAL_GetTick>
 80063ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063b0:	e008      	b.n	80063c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063b2:	f7fd ff39 	bl	8004228 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d901      	bls.n	80063c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e25b      	b.n	800687c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063c4:	4b65      	ldr	r3, [pc, #404]	; (800655c <HAL_RCC_OscConfig+0x504>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0f0      	beq.n	80063b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063d0:	4b62      	ldr	r3, [pc, #392]	; (800655c <HAL_RCC_OscConfig+0x504>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	061b      	lsls	r3, r3, #24
 80063de:	495f      	ldr	r1, [pc, #380]	; (800655c <HAL_RCC_OscConfig+0x504>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	604b      	str	r3, [r1, #4]
 80063e4:	e018      	b.n	8006418 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063e6:	4b5d      	ldr	r3, [pc, #372]	; (800655c <HAL_RCC_OscConfig+0x504>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a5c      	ldr	r2, [pc, #368]	; (800655c <HAL_RCC_OscConfig+0x504>)
 80063ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f2:	f7fd ff19 	bl	8004228 <HAL_GetTick>
 80063f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063fa:	f7fd ff15 	bl	8004228 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e237      	b.n	800687c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800640c:	4b53      	ldr	r3, [pc, #332]	; (800655c <HAL_RCC_OscConfig+0x504>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1f0      	bne.n	80063fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0308 	and.w	r3, r3, #8
 8006420:	2b00      	cmp	r3, #0
 8006422:	d03c      	beq.n	800649e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d01c      	beq.n	8006466 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800642c:	4b4b      	ldr	r3, [pc, #300]	; (800655c <HAL_RCC_OscConfig+0x504>)
 800642e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006432:	4a4a      	ldr	r2, [pc, #296]	; (800655c <HAL_RCC_OscConfig+0x504>)
 8006434:	f043 0301 	orr.w	r3, r3, #1
 8006438:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800643c:	f7fd fef4 	bl	8004228 <HAL_GetTick>
 8006440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006444:	f7fd fef0 	bl	8004228 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b02      	cmp	r3, #2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e212      	b.n	800687c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006456:	4b41      	ldr	r3, [pc, #260]	; (800655c <HAL_RCC_OscConfig+0x504>)
 8006458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0ef      	beq.n	8006444 <HAL_RCC_OscConfig+0x3ec>
 8006464:	e01b      	b.n	800649e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006466:	4b3d      	ldr	r3, [pc, #244]	; (800655c <HAL_RCC_OscConfig+0x504>)
 8006468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800646c:	4a3b      	ldr	r2, [pc, #236]	; (800655c <HAL_RCC_OscConfig+0x504>)
 800646e:	f023 0301 	bic.w	r3, r3, #1
 8006472:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006476:	f7fd fed7 	bl	8004228 <HAL_GetTick>
 800647a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800647c:	e008      	b.n	8006490 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800647e:	f7fd fed3 	bl	8004228 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	2b02      	cmp	r3, #2
 800648a:	d901      	bls.n	8006490 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e1f5      	b.n	800687c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006490:	4b32      	ldr	r3, [pc, #200]	; (800655c <HAL_RCC_OscConfig+0x504>)
 8006492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1ef      	bne.n	800647e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0304 	and.w	r3, r3, #4
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 80a6 	beq.w	80065f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064ac:	2300      	movs	r3, #0
 80064ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80064b0:	4b2a      	ldr	r3, [pc, #168]	; (800655c <HAL_RCC_OscConfig+0x504>)
 80064b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10d      	bne.n	80064d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064bc:	4b27      	ldr	r3, [pc, #156]	; (800655c <HAL_RCC_OscConfig+0x504>)
 80064be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c0:	4a26      	ldr	r2, [pc, #152]	; (800655c <HAL_RCC_OscConfig+0x504>)
 80064c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c6:	6593      	str	r3, [r2, #88]	; 0x58
 80064c8:	4b24      	ldr	r3, [pc, #144]	; (800655c <HAL_RCC_OscConfig+0x504>)
 80064ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064d0:	60bb      	str	r3, [r7, #8]
 80064d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064d4:	2301      	movs	r3, #1
 80064d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064d8:	4b21      	ldr	r3, [pc, #132]	; (8006560 <HAL_RCC_OscConfig+0x508>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d118      	bne.n	8006516 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064e4:	4b1e      	ldr	r3, [pc, #120]	; (8006560 <HAL_RCC_OscConfig+0x508>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a1d      	ldr	r2, [pc, #116]	; (8006560 <HAL_RCC_OscConfig+0x508>)
 80064ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064f0:	f7fd fe9a 	bl	8004228 <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064f6:	e008      	b.n	800650a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064f8:	f7fd fe96 	bl	8004228 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e1b8      	b.n	800687c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800650a:	4b15      	ldr	r3, [pc, #84]	; (8006560 <HAL_RCC_OscConfig+0x508>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0f0      	beq.n	80064f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d108      	bne.n	8006530 <HAL_RCC_OscConfig+0x4d8>
 800651e:	4b0f      	ldr	r3, [pc, #60]	; (800655c <HAL_RCC_OscConfig+0x504>)
 8006520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006524:	4a0d      	ldr	r2, [pc, #52]	; (800655c <HAL_RCC_OscConfig+0x504>)
 8006526:	f043 0301 	orr.w	r3, r3, #1
 800652a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800652e:	e029      	b.n	8006584 <HAL_RCC_OscConfig+0x52c>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	2b05      	cmp	r3, #5
 8006536:	d115      	bne.n	8006564 <HAL_RCC_OscConfig+0x50c>
 8006538:	4b08      	ldr	r3, [pc, #32]	; (800655c <HAL_RCC_OscConfig+0x504>)
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653e:	4a07      	ldr	r2, [pc, #28]	; (800655c <HAL_RCC_OscConfig+0x504>)
 8006540:	f043 0304 	orr.w	r3, r3, #4
 8006544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006548:	4b04      	ldr	r3, [pc, #16]	; (800655c <HAL_RCC_OscConfig+0x504>)
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654e:	4a03      	ldr	r2, [pc, #12]	; (800655c <HAL_RCC_OscConfig+0x504>)
 8006550:	f043 0301 	orr.w	r3, r3, #1
 8006554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006558:	e014      	b.n	8006584 <HAL_RCC_OscConfig+0x52c>
 800655a:	bf00      	nop
 800655c:	40021000 	.word	0x40021000
 8006560:	40007000 	.word	0x40007000
 8006564:	4b9d      	ldr	r3, [pc, #628]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 8006566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800656a:	4a9c      	ldr	r2, [pc, #624]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 800656c:	f023 0301 	bic.w	r3, r3, #1
 8006570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006574:	4b99      	ldr	r3, [pc, #612]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 8006576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657a:	4a98      	ldr	r2, [pc, #608]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 800657c:	f023 0304 	bic.w	r3, r3, #4
 8006580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d016      	beq.n	80065ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800658c:	f7fd fe4c 	bl	8004228 <HAL_GetTick>
 8006590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006592:	e00a      	b.n	80065aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006594:	f7fd fe48 	bl	8004228 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e168      	b.n	800687c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065aa:	4b8c      	ldr	r3, [pc, #560]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 80065ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0ed      	beq.n	8006594 <HAL_RCC_OscConfig+0x53c>
 80065b8:	e015      	b.n	80065e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ba:	f7fd fe35 	bl	8004228 <HAL_GetTick>
 80065be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065c0:	e00a      	b.n	80065d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065c2:	f7fd fe31 	bl	8004228 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e151      	b.n	800687c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065d8:	4b80      	ldr	r3, [pc, #512]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 80065da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1ed      	bne.n	80065c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065e6:	7ffb      	ldrb	r3, [r7, #31]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d105      	bne.n	80065f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065ec:	4b7b      	ldr	r3, [pc, #492]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 80065ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f0:	4a7a      	ldr	r2, [pc, #488]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 80065f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0320 	and.w	r3, r3, #32
 8006600:	2b00      	cmp	r3, #0
 8006602:	d03c      	beq.n	800667e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	2b00      	cmp	r3, #0
 800660a:	d01c      	beq.n	8006646 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800660c:	4b73      	ldr	r3, [pc, #460]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 800660e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006612:	4a72      	ldr	r2, [pc, #456]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 8006614:	f043 0301 	orr.w	r3, r3, #1
 8006618:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800661c:	f7fd fe04 	bl	8004228 <HAL_GetTick>
 8006620:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006624:	f7fd fe00 	bl	8004228 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e122      	b.n	800687c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006636:	4b69      	ldr	r3, [pc, #420]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 8006638:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0ef      	beq.n	8006624 <HAL_RCC_OscConfig+0x5cc>
 8006644:	e01b      	b.n	800667e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006646:	4b65      	ldr	r3, [pc, #404]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 8006648:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800664c:	4a63      	ldr	r2, [pc, #396]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 800664e:	f023 0301 	bic.w	r3, r3, #1
 8006652:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006656:	f7fd fde7 	bl	8004228 <HAL_GetTick>
 800665a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800665c:	e008      	b.n	8006670 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800665e:	f7fd fde3 	bl	8004228 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d901      	bls.n	8006670 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e105      	b.n	800687c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006670:	4b5a      	ldr	r3, [pc, #360]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 8006672:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1ef      	bne.n	800665e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 80f9 	beq.w	800687a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668c:	2b02      	cmp	r3, #2
 800668e:	f040 80cf 	bne.w	8006830 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006692:	4b52      	ldr	r3, [pc, #328]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f003 0203 	and.w	r2, r3, #3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d12c      	bne.n	8006700 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b0:	3b01      	subs	r3, #1
 80066b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d123      	bne.n	8006700 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d11b      	bne.n	8006700 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d113      	bne.n	8006700 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e2:	085b      	lsrs	r3, r3, #1
 80066e4:	3b01      	subs	r3, #1
 80066e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d109      	bne.n	8006700 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	085b      	lsrs	r3, r3, #1
 80066f8:	3b01      	subs	r3, #1
 80066fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d071      	beq.n	80067e4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	2b0c      	cmp	r3, #12
 8006704:	d068      	beq.n	80067d8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006706:	4b35      	ldr	r3, [pc, #212]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d105      	bne.n	800671e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006712:	4b32      	ldr	r3, [pc, #200]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e0ac      	b.n	800687c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006722:	4b2e      	ldr	r3, [pc, #184]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a2d      	ldr	r2, [pc, #180]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 8006728:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800672c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800672e:	f7fd fd7b 	bl	8004228 <HAL_GetTick>
 8006732:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006734:	e008      	b.n	8006748 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006736:	f7fd fd77 	bl	8004228 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d901      	bls.n	8006748 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e099      	b.n	800687c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006748:	4b24      	ldr	r3, [pc, #144]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1f0      	bne.n	8006736 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006754:	4b21      	ldr	r3, [pc, #132]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 8006756:	68da      	ldr	r2, [r3, #12]
 8006758:	4b21      	ldr	r3, [pc, #132]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 800675a:	4013      	ands	r3, r2
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006764:	3a01      	subs	r2, #1
 8006766:	0112      	lsls	r2, r2, #4
 8006768:	4311      	orrs	r1, r2
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800676e:	0212      	lsls	r2, r2, #8
 8006770:	4311      	orrs	r1, r2
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006776:	0852      	lsrs	r2, r2, #1
 8006778:	3a01      	subs	r2, #1
 800677a:	0552      	lsls	r2, r2, #21
 800677c:	4311      	orrs	r1, r2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006782:	0852      	lsrs	r2, r2, #1
 8006784:	3a01      	subs	r2, #1
 8006786:	0652      	lsls	r2, r2, #25
 8006788:	4311      	orrs	r1, r2
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800678e:	06d2      	lsls	r2, r2, #27
 8006790:	430a      	orrs	r2, r1
 8006792:	4912      	ldr	r1, [pc, #72]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 8006794:	4313      	orrs	r3, r2
 8006796:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006798:	4b10      	ldr	r3, [pc, #64]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a0f      	ldr	r2, [pc, #60]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 800679e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067a4:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	4a0c      	ldr	r2, [pc, #48]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 80067aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80067b0:	f7fd fd3a 	bl	8004228 <HAL_GetTick>
 80067b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067b6:	e008      	b.n	80067ca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b8:	f7fd fd36 	bl	8004228 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e058      	b.n	800687c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067ca:	4b04      	ldr	r3, [pc, #16]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0f0      	beq.n	80067b8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067d6:	e050      	b.n	800687a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e04f      	b.n	800687c <HAL_RCC_OscConfig+0x824>
 80067dc:	40021000 	.word	0x40021000
 80067e0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067e4:	4b27      	ldr	r3, [pc, #156]	; (8006884 <HAL_RCC_OscConfig+0x82c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d144      	bne.n	800687a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80067f0:	4b24      	ldr	r3, [pc, #144]	; (8006884 <HAL_RCC_OscConfig+0x82c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a23      	ldr	r2, [pc, #140]	; (8006884 <HAL_RCC_OscConfig+0x82c>)
 80067f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067fc:	4b21      	ldr	r3, [pc, #132]	; (8006884 <HAL_RCC_OscConfig+0x82c>)
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	4a20      	ldr	r2, [pc, #128]	; (8006884 <HAL_RCC_OscConfig+0x82c>)
 8006802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006806:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006808:	f7fd fd0e 	bl	8004228 <HAL_GetTick>
 800680c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800680e:	e008      	b.n	8006822 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006810:	f7fd fd0a 	bl	8004228 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b02      	cmp	r3, #2
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e02c      	b.n	800687c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006822:	4b18      	ldr	r3, [pc, #96]	; (8006884 <HAL_RCC_OscConfig+0x82c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0f0      	beq.n	8006810 <HAL_RCC_OscConfig+0x7b8>
 800682e:	e024      	b.n	800687a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	2b0c      	cmp	r3, #12
 8006834:	d01f      	beq.n	8006876 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006836:	4b13      	ldr	r3, [pc, #76]	; (8006884 <HAL_RCC_OscConfig+0x82c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a12      	ldr	r2, [pc, #72]	; (8006884 <HAL_RCC_OscConfig+0x82c>)
 800683c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006842:	f7fd fcf1 	bl	8004228 <HAL_GetTick>
 8006846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006848:	e008      	b.n	800685c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800684a:	f7fd fced 	bl	8004228 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d901      	bls.n	800685c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e00f      	b.n	800687c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800685c:	4b09      	ldr	r3, [pc, #36]	; (8006884 <HAL_RCC_OscConfig+0x82c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1f0      	bne.n	800684a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006868:	4b06      	ldr	r3, [pc, #24]	; (8006884 <HAL_RCC_OscConfig+0x82c>)
 800686a:	68da      	ldr	r2, [r3, #12]
 800686c:	4905      	ldr	r1, [pc, #20]	; (8006884 <HAL_RCC_OscConfig+0x82c>)
 800686e:	4b06      	ldr	r3, [pc, #24]	; (8006888 <HAL_RCC_OscConfig+0x830>)
 8006870:	4013      	ands	r3, r2
 8006872:	60cb      	str	r3, [r1, #12]
 8006874:	e001      	b.n	800687a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3720      	adds	r7, #32
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	40021000 	.word	0x40021000
 8006888:	feeefffc 	.word	0xfeeefffc

0800688c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e11d      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068a4:	4b90      	ldr	r3, [pc, #576]	; (8006ae8 <HAL_RCC_ClockConfig+0x25c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 030f 	and.w	r3, r3, #15
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d910      	bls.n	80068d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b2:	4b8d      	ldr	r3, [pc, #564]	; (8006ae8 <HAL_RCC_ClockConfig+0x25c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f023 020f 	bic.w	r2, r3, #15
 80068ba:	498b      	ldr	r1, [pc, #556]	; (8006ae8 <HAL_RCC_ClockConfig+0x25c>)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	4313      	orrs	r3, r2
 80068c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068c2:	4b89      	ldr	r3, [pc, #548]	; (8006ae8 <HAL_RCC_ClockConfig+0x25c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 030f 	and.w	r3, r3, #15
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d001      	beq.n	80068d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e105      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d010      	beq.n	8006902 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	4b81      	ldr	r3, [pc, #516]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d908      	bls.n	8006902 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068f0:	4b7e      	ldr	r3, [pc, #504]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	497b      	ldr	r1, [pc, #492]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d079      	beq.n	8006a02 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	2b03      	cmp	r3, #3
 8006914:	d11e      	bne.n	8006954 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006916:	4b75      	ldr	r3, [pc, #468]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e0dc      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006926:	f000 fa09 	bl	8006d3c <RCC_GetSysClockFreqFromPLLSource>
 800692a:	4603      	mov	r3, r0
 800692c:	4a70      	ldr	r2, [pc, #448]	; (8006af0 <HAL_RCC_ClockConfig+0x264>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d946      	bls.n	80069c0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006932:	4b6e      	ldr	r3, [pc, #440]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d140      	bne.n	80069c0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800693e:	4b6b      	ldr	r3, [pc, #428]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006946:	4a69      	ldr	r2, [pc, #420]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 8006948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800694e:	2380      	movs	r3, #128	; 0x80
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	e035      	b.n	80069c0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	2b02      	cmp	r3, #2
 800695a:	d107      	bne.n	800696c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800695c:	4b63      	ldr	r3, [pc, #396]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d115      	bne.n	8006994 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e0b9      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d107      	bne.n	8006984 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006974:	4b5d      	ldr	r3, [pc, #372]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d109      	bne.n	8006994 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e0ad      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006984:	4b59      	ldr	r3, [pc, #356]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e0a5      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006994:	f000 f8b4 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 8006998:	4603      	mov	r3, r0
 800699a:	4a55      	ldr	r2, [pc, #340]	; (8006af0 <HAL_RCC_ClockConfig+0x264>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d90f      	bls.n	80069c0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80069a0:	4b52      	ldr	r3, [pc, #328]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d109      	bne.n	80069c0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80069ac:	4b4f      	ldr	r3, [pc, #316]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069b4:	4a4d      	ldr	r2, [pc, #308]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 80069b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ba:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80069bc:	2380      	movs	r3, #128	; 0x80
 80069be:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069c0:	4b4a      	ldr	r3, [pc, #296]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f023 0203 	bic.w	r2, r3, #3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	4947      	ldr	r1, [pc, #284]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069d2:	f7fd fc29 	bl	8004228 <HAL_GetTick>
 80069d6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069d8:	e00a      	b.n	80069f0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069da:	f7fd fc25 	bl	8004228 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d901      	bls.n	80069f0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e077      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069f0:	4b3e      	ldr	r3, [pc, #248]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f003 020c 	and.w	r2, r3, #12
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d1eb      	bne.n	80069da <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2b80      	cmp	r3, #128	; 0x80
 8006a06:	d105      	bne.n	8006a14 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006a08:	4b38      	ldr	r3, [pc, #224]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	4a37      	ldr	r2, [pc, #220]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 8006a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a12:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0302 	and.w	r3, r3, #2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d010      	beq.n	8006a42 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	4b31      	ldr	r3, [pc, #196]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d208      	bcs.n	8006a42 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a30:	4b2e      	ldr	r3, [pc, #184]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	492b      	ldr	r1, [pc, #172]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a42:	4b29      	ldr	r3, [pc, #164]	; (8006ae8 <HAL_RCC_ClockConfig+0x25c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 030f 	and.w	r3, r3, #15
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d210      	bcs.n	8006a72 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a50:	4b25      	ldr	r3, [pc, #148]	; (8006ae8 <HAL_RCC_ClockConfig+0x25c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f023 020f 	bic.w	r2, r3, #15
 8006a58:	4923      	ldr	r1, [pc, #140]	; (8006ae8 <HAL_RCC_ClockConfig+0x25c>)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a60:	4b21      	ldr	r3, [pc, #132]	; (8006ae8 <HAL_RCC_ClockConfig+0x25c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d001      	beq.n	8006a72 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e036      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0304 	and.w	r3, r3, #4
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d008      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a7e:	4b1b      	ldr	r3, [pc, #108]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	4918      	ldr	r1, [pc, #96]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0308 	and.w	r3, r3, #8
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d009      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a9c:	4b13      	ldr	r3, [pc, #76]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	4910      	ldr	r1, [pc, #64]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ab0:	f000 f826 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <HAL_RCC_ClockConfig+0x260>)
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	091b      	lsrs	r3, r3, #4
 8006abc:	f003 030f 	and.w	r3, r3, #15
 8006ac0:	490c      	ldr	r1, [pc, #48]	; (8006af4 <HAL_RCC_ClockConfig+0x268>)
 8006ac2:	5ccb      	ldrb	r3, [r1, r3]
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8006acc:	4a0a      	ldr	r2, [pc, #40]	; (8006af8 <HAL_RCC_ClockConfig+0x26c>)
 8006ace:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006ad0:	4b0a      	ldr	r3, [pc, #40]	; (8006afc <HAL_RCC_ClockConfig+0x270>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fd fb57 	bl	8004188 <HAL_InitTick>
 8006ada:	4603      	mov	r3, r0
 8006adc:	73fb      	strb	r3, [r7, #15]

  return status;
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	40022000 	.word	0x40022000
 8006aec:	40021000 	.word	0x40021000
 8006af0:	04c4b400 	.word	0x04c4b400
 8006af4:	080105c0 	.word	0x080105c0
 8006af8:	20000010 	.word	0x20000010
 8006afc:	20000014 	.word	0x20000014

08006b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b089      	sub	sp, #36	; 0x24
 8006b04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	61fb      	str	r3, [r7, #28]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b0e:	4b3e      	ldr	r3, [pc, #248]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 030c 	and.w	r3, r3, #12
 8006b16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b18:	4b3b      	ldr	r3, [pc, #236]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f003 0303 	and.w	r3, r3, #3
 8006b20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d005      	beq.n	8006b34 <HAL_RCC_GetSysClockFreq+0x34>
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	2b0c      	cmp	r3, #12
 8006b2c:	d121      	bne.n	8006b72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d11e      	bne.n	8006b72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006b34:	4b34      	ldr	r3, [pc, #208]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0308 	and.w	r3, r3, #8
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d107      	bne.n	8006b50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006b40:	4b31      	ldr	r3, [pc, #196]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b46:	0a1b      	lsrs	r3, r3, #8
 8006b48:	f003 030f 	and.w	r3, r3, #15
 8006b4c:	61fb      	str	r3, [r7, #28]
 8006b4e:	e005      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006b50:	4b2d      	ldr	r3, [pc, #180]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	091b      	lsrs	r3, r3, #4
 8006b56:	f003 030f 	and.w	r3, r3, #15
 8006b5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006b5c:	4a2b      	ldr	r2, [pc, #172]	; (8006c0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10d      	bne.n	8006b88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b70:	e00a      	b.n	8006b88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2b04      	cmp	r3, #4
 8006b76:	d102      	bne.n	8006b7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b78:	4b25      	ldr	r3, [pc, #148]	; (8006c10 <HAL_RCC_GetSysClockFreq+0x110>)
 8006b7a:	61bb      	str	r3, [r7, #24]
 8006b7c:	e004      	b.n	8006b88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	d101      	bne.n	8006b88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b84:	4b23      	ldr	r3, [pc, #140]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x114>)
 8006b86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2b0c      	cmp	r3, #12
 8006b8c:	d134      	bne.n	8006bf8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b8e:	4b1e      	ldr	r3, [pc, #120]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f003 0303 	and.w	r3, r3, #3
 8006b96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d003      	beq.n	8006ba6 <HAL_RCC_GetSysClockFreq+0xa6>
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	d003      	beq.n	8006bac <HAL_RCC_GetSysClockFreq+0xac>
 8006ba4:	e005      	b.n	8006bb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006ba6:	4b1a      	ldr	r3, [pc, #104]	; (8006c10 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ba8:	617b      	str	r3, [r7, #20]
      break;
 8006baa:	e005      	b.n	8006bb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006bac:	4b19      	ldr	r3, [pc, #100]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x114>)
 8006bae:	617b      	str	r3, [r7, #20]
      break;
 8006bb0:	e002      	b.n	8006bb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	617b      	str	r3, [r7, #20]
      break;
 8006bb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006bb8:	4b13      	ldr	r3, [pc, #76]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	091b      	lsrs	r3, r3, #4
 8006bbe:	f003 030f 	and.w	r3, r3, #15
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006bc6:	4b10      	ldr	r3, [pc, #64]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	0a1b      	lsrs	r3, r3, #8
 8006bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	fb03 f202 	mul.w	r2, r3, r2
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006bde:	4b0a      	ldr	r3, [pc, #40]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	0e5b      	lsrs	r3, r3, #25
 8006be4:	f003 0303 	and.w	r3, r3, #3
 8006be8:	3301      	adds	r3, #1
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006bf8:	69bb      	ldr	r3, [r7, #24]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3724      	adds	r7, #36	; 0x24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	080105d8 	.word	0x080105d8
 8006c10:	00f42400 	.word	0x00f42400
 8006c14:	007a1200 	.word	0x007a1200

08006c18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c1c:	4b03      	ldr	r3, [pc, #12]	; (8006c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	20000010 	.word	0x20000010

08006c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006c34:	f7ff fff0 	bl	8006c18 <HAL_RCC_GetHCLKFreq>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	0a1b      	lsrs	r3, r3, #8
 8006c40:	f003 0307 	and.w	r3, r3, #7
 8006c44:	4904      	ldr	r1, [pc, #16]	; (8006c58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c46:	5ccb      	ldrb	r3, [r1, r3]
 8006c48:	f003 031f 	and.w	r3, r3, #31
 8006c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	40021000 	.word	0x40021000
 8006c58:	080105d0 	.word	0x080105d0

08006c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006c60:	f7ff ffda 	bl	8006c18 <HAL_RCC_GetHCLKFreq>
 8006c64:	4602      	mov	r2, r0
 8006c66:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	0adb      	lsrs	r3, r3, #11
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	4904      	ldr	r1, [pc, #16]	; (8006c84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c72:	5ccb      	ldrb	r3, [r1, r3]
 8006c74:	f003 031f 	and.w	r3, r3, #31
 8006c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	40021000 	.word	0x40021000
 8006c84:	080105d0 	.word	0x080105d0

08006c88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006c90:	2300      	movs	r3, #0
 8006c92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006c94:	4b27      	ldr	r3, [pc, #156]	; (8006d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d003      	beq.n	8006ca8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006ca0:	f7ff f906 	bl	8005eb0 <HAL_PWREx_GetVoltageRange>
 8006ca4:	6178      	str	r0, [r7, #20]
 8006ca6:	e014      	b.n	8006cd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ca8:	4b22      	ldr	r3, [pc, #136]	; (8006d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cac:	4a21      	ldr	r2, [pc, #132]	; (8006d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8006cb4:	4b1f      	ldr	r3, [pc, #124]	; (8006d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006cc0:	f7ff f8f6 	bl	8005eb0 <HAL_PWREx_GetVoltageRange>
 8006cc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006cc6:	4b1b      	ldr	r3, [pc, #108]	; (8006d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cca:	4a1a      	ldr	r2, [pc, #104]	; (8006d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cd0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd8:	d10b      	bne.n	8006cf2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b80      	cmp	r3, #128	; 0x80
 8006cde:	d913      	bls.n	8006d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2ba0      	cmp	r3, #160	; 0xa0
 8006ce4:	d902      	bls.n	8006cec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	613b      	str	r3, [r7, #16]
 8006cea:	e00d      	b.n	8006d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006cec:	2301      	movs	r3, #1
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	e00a      	b.n	8006d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cf6:	d902      	bls.n	8006cfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	e004      	b.n	8006d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b70      	cmp	r3, #112	; 0x70
 8006d02:	d101      	bne.n	8006d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006d04:	2301      	movs	r3, #1
 8006d06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006d08:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f023 020f 	bic.w	r2, r3, #15
 8006d10:	4909      	ldr	r1, [pc, #36]	; (8006d38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006d18:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 030f 	and.w	r3, r3, #15
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d001      	beq.n	8006d2a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e000      	b.n	8006d2c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	40021000 	.word	0x40021000
 8006d38:	40022000 	.word	0x40022000

08006d3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d42:	4b2d      	ldr	r3, [pc, #180]	; (8006df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d00b      	beq.n	8006d6a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d825      	bhi.n	8006da4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d008      	beq.n	8006d70 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d11f      	bne.n	8006da4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006d64:	4b25      	ldr	r3, [pc, #148]	; (8006dfc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006d66:	613b      	str	r3, [r7, #16]
    break;
 8006d68:	e01f      	b.n	8006daa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006d6a:	4b25      	ldr	r3, [pc, #148]	; (8006e00 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006d6c:	613b      	str	r3, [r7, #16]
    break;
 8006d6e:	e01c      	b.n	8006daa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006d70:	4b21      	ldr	r3, [pc, #132]	; (8006df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0308 	and.w	r3, r3, #8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d107      	bne.n	8006d8c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006d7c:	4b1e      	ldr	r3, [pc, #120]	; (8006df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d82:	0a1b      	lsrs	r3, r3, #8
 8006d84:	f003 030f 	and.w	r3, r3, #15
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	e005      	b.n	8006d98 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006d8c:	4b1a      	ldr	r3, [pc, #104]	; (8006df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	091b      	lsrs	r3, r3, #4
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006d98:	4a1a      	ldr	r2, [pc, #104]	; (8006e04 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006da0:	613b      	str	r3, [r7, #16]
    break;
 8006da2:	e002      	b.n	8006daa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	613b      	str	r3, [r7, #16]
    break;
 8006da8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006daa:	4b13      	ldr	r3, [pc, #76]	; (8006df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	091b      	lsrs	r3, r3, #4
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	3301      	adds	r3, #1
 8006db6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006db8:	4b0f      	ldr	r3, [pc, #60]	; (8006df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	0a1b      	lsrs	r3, r3, #8
 8006dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	fb03 f202 	mul.w	r2, r3, r2
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dce:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006dd0:	4b09      	ldr	r3, [pc, #36]	; (8006df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	0e5b      	lsrs	r3, r3, #25
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	3301      	adds	r3, #1
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006dea:	683b      	ldr	r3, [r7, #0]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	00f42400 	.word	0x00f42400
 8006e00:	007a1200 	.word	0x007a1200
 8006e04:	080105d8 	.word	0x080105d8

08006e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e10:	2300      	movs	r3, #0
 8006e12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e14:	2300      	movs	r3, #0
 8006e16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d040      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e28:	2b80      	cmp	r3, #128	; 0x80
 8006e2a:	d02a      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006e2c:	2b80      	cmp	r3, #128	; 0x80
 8006e2e:	d825      	bhi.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006e30:	2b60      	cmp	r3, #96	; 0x60
 8006e32:	d026      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006e34:	2b60      	cmp	r3, #96	; 0x60
 8006e36:	d821      	bhi.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006e38:	2b40      	cmp	r3, #64	; 0x40
 8006e3a:	d006      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006e3c:	2b40      	cmp	r3, #64	; 0x40
 8006e3e:	d81d      	bhi.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d009      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006e44:	2b20      	cmp	r3, #32
 8006e46:	d010      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006e48:	e018      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006e4a:	4b89      	ldr	r3, [pc, #548]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	4a88      	ldr	r2, [pc, #544]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e54:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e56:	e015      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f001 fa24 	bl	80082ac <RCCEx_PLLSAI1_Config>
 8006e64:	4603      	mov	r3, r0
 8006e66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e68:	e00c      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3320      	adds	r3, #32
 8006e6e:	2100      	movs	r1, #0
 8006e70:	4618      	mov	r0, r3
 8006e72:	f001 fb0f 	bl	8008494 <RCCEx_PLLSAI2_Config>
 8006e76:	4603      	mov	r3, r0
 8006e78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e7a:	e003      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	74fb      	strb	r3, [r7, #19]
      break;
 8006e80:	e000      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006e82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e84:	7cfb      	ldrb	r3, [r7, #19]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10b      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e8a:	4b79      	ldr	r3, [pc, #484]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e90:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e98:	4975      	ldr	r1, [pc, #468]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006ea0:	e001      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea2:	7cfb      	ldrb	r3, [r7, #19]
 8006ea4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d047      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eba:	d030      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec0:	d82a      	bhi.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ec6:	d02a      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006ec8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ecc:	d824      	bhi.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed2:	d008      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed8:	d81e      	bhi.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ee2:	d010      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006ee4:	e018      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006ee6:	4b62      	ldr	r3, [pc, #392]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	4a61      	ldr	r2, [pc, #388]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ef0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006ef2:	e015      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	2100      	movs	r1, #0
 8006efa:	4618      	mov	r0, r3
 8006efc:	f001 f9d6 	bl	80082ac <RCCEx_PLLSAI1_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f04:	e00c      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3320      	adds	r3, #32
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f001 fac1 	bl	8008494 <RCCEx_PLLSAI2_Config>
 8006f12:	4603      	mov	r3, r0
 8006f14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f16:	e003      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	74fb      	strb	r3, [r7, #19]
      break;
 8006f1c:	e000      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f20:	7cfb      	ldrb	r3, [r7, #19]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10b      	bne.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f26:	4b52      	ldr	r3, [pc, #328]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f34:	494e      	ldr	r1, [pc, #312]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006f3c:	e001      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3e:	7cfb      	ldrb	r3, [r7, #19]
 8006f40:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 809f 	beq.w	800708e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f50:	2300      	movs	r3, #0
 8006f52:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f54:	4b46      	ldr	r3, [pc, #280]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006f60:	2301      	movs	r3, #1
 8006f62:	e000      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006f64:	2300      	movs	r3, #0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00d      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f6a:	4b41      	ldr	r3, [pc, #260]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6e:	4a40      	ldr	r2, [pc, #256]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f74:	6593      	str	r3, [r2, #88]	; 0x58
 8006f76:	4b3e      	ldr	r3, [pc, #248]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f7e:	60bb      	str	r3, [r7, #8]
 8006f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f82:	2301      	movs	r3, #1
 8006f84:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f86:	4b3b      	ldr	r3, [pc, #236]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a3a      	ldr	r2, [pc, #232]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f92:	f7fd f949 	bl	8004228 <HAL_GetTick>
 8006f96:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f98:	e009      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f9a:	f7fd f945 	bl	8004228 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d902      	bls.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	74fb      	strb	r3, [r7, #19]
        break;
 8006fac:	e005      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006fae:	4b31      	ldr	r3, [pc, #196]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0ef      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006fba:	7cfb      	ldrb	r3, [r7, #19]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d15b      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006fc0:	4b2b      	ldr	r3, [pc, #172]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fca:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d01f      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d019      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fde:	4b24      	ldr	r3, [pc, #144]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fea:	4b21      	ldr	r3, [pc, #132]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff0:	4a1f      	ldr	r2, [pc, #124]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ffa:	4b1d      	ldr	r3, [pc, #116]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007000:	4a1b      	ldr	r2, [pc, #108]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800700a:	4a19      	ldr	r2, [pc, #100]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	2b00      	cmp	r3, #0
 800701a:	d016      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800701c:	f7fd f904 	bl	8004228 <HAL_GetTick>
 8007020:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007022:	e00b      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007024:	f7fd f900 	bl	8004228 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007032:	4293      	cmp	r3, r2
 8007034:	d902      	bls.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	74fb      	strb	r3, [r7, #19]
            break;
 800703a:	e006      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800703c:	4b0c      	ldr	r3, [pc, #48]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800703e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0ec      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800704a:	7cfb      	ldrb	r3, [r7, #19]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10c      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007050:	4b07      	ldr	r3, [pc, #28]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007056:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007060:	4903      	ldr	r1, [pc, #12]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007062:	4313      	orrs	r3, r2
 8007064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007068:	e008      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800706a:	7cfb      	ldrb	r3, [r7, #19]
 800706c:	74bb      	strb	r3, [r7, #18]
 800706e:	e005      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007070:	40021000 	.word	0x40021000
 8007074:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007078:	7cfb      	ldrb	r3, [r7, #19]
 800707a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800707c:	7c7b      	ldrb	r3, [r7, #17]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d105      	bne.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007082:	4ba0      	ldr	r3, [pc, #640]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007086:	4a9f      	ldr	r2, [pc, #636]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800708c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800709a:	4b9a      	ldr	r3, [pc, #616]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800709c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a0:	f023 0203 	bic.w	r2, r3, #3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a8:	4996      	ldr	r1, [pc, #600]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00a      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070bc:	4b91      	ldr	r3, [pc, #580]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c2:	f023 020c 	bic.w	r2, r3, #12
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	498e      	ldr	r1, [pc, #568]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0304 	and.w	r3, r3, #4
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00a      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070de:	4b89      	ldr	r3, [pc, #548]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ec:	4985      	ldr	r1, [pc, #532]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0308 	and.w	r3, r3, #8
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00a      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007100:	4b80      	ldr	r3, [pc, #512]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007106:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800710e:	497d      	ldr	r1, [pc, #500]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007110:	4313      	orrs	r3, r2
 8007112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0310 	and.w	r3, r3, #16
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00a      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007122:	4b78      	ldr	r3, [pc, #480]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007130:	4974      	ldr	r1, [pc, #464]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007132:	4313      	orrs	r3, r2
 8007134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0320 	and.w	r3, r3, #32
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00a      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007144:	4b6f      	ldr	r3, [pc, #444]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800714a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007152:	496c      	ldr	r1, [pc, #432]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007154:	4313      	orrs	r3, r2
 8007156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00a      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007166:	4b67      	ldr	r3, [pc, #412]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800716c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007174:	4963      	ldr	r1, [pc, #396]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007176:	4313      	orrs	r3, r2
 8007178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00a      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007188:	4b5e      	ldr	r3, [pc, #376]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800718a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007196:	495b      	ldr	r1, [pc, #364]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007198:	4313      	orrs	r3, r2
 800719a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071aa:	4b56      	ldr	r3, [pc, #344]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b8:	4952      	ldr	r1, [pc, #328]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00a      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071cc:	4b4d      	ldr	r3, [pc, #308]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071da:	494a      	ldr	r1, [pc, #296]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00a      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071ee:	4b45      	ldr	r3, [pc, #276]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071fc:	4941      	ldr	r1, [pc, #260]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00a      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007210:	4b3c      	ldr	r3, [pc, #240]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007212:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007216:	f023 0203 	bic.w	r2, r3, #3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800721e:	4939      	ldr	r1, [pc, #228]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007220:	4313      	orrs	r3, r2
 8007222:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d028      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007232:	4b34      	ldr	r3, [pc, #208]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007238:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007240:	4930      	ldr	r1, [pc, #192]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007242:	4313      	orrs	r3, r2
 8007244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800724c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007250:	d106      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007252:	4b2c      	ldr	r3, [pc, #176]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	4a2b      	ldr	r2, [pc, #172]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800725c:	60d3      	str	r3, [r2, #12]
 800725e:	e011      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007264:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007268:	d10c      	bne.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	3304      	adds	r3, #4
 800726e:	2101      	movs	r1, #1
 8007270:	4618      	mov	r0, r3
 8007272:	f001 f81b 	bl	80082ac <RCCEx_PLLSAI1_Config>
 8007276:	4603      	mov	r3, r0
 8007278:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800727a:	7cfb      	ldrb	r3, [r7, #19]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007280:	7cfb      	ldrb	r3, [r7, #19]
 8007282:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d04d      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007298:	d108      	bne.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800729a:	4b1a      	ldr	r3, [pc, #104]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800729c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072a0:	4a18      	ldr	r2, [pc, #96]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072a6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80072aa:	e012      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80072ac:	4b15      	ldr	r3, [pc, #84]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072b2:	4a14      	ldr	r2, [pc, #80]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072b8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80072bc:	4b11      	ldr	r3, [pc, #68]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072ca:	490e      	ldr	r1, [pc, #56]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072da:	d106      	bne.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072dc:	4b09      	ldr	r3, [pc, #36]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	4a08      	ldr	r2, [pc, #32]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072e6:	60d3      	str	r3, [r2, #12]
 80072e8:	e020      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072f2:	d109      	bne.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80072f4:	4b03      	ldr	r3, [pc, #12]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	4a02      	ldr	r2, [pc, #8]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072fe:	60d3      	str	r3, [r2, #12]
 8007300:	e014      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007302:	bf00      	nop
 8007304:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800730c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007310:	d10c      	bne.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3304      	adds	r3, #4
 8007316:	2101      	movs	r1, #1
 8007318:	4618      	mov	r0, r3
 800731a:	f000 ffc7 	bl	80082ac <RCCEx_PLLSAI1_Config>
 800731e:	4603      	mov	r3, r0
 8007320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007322:	7cfb      	ldrb	r3, [r7, #19]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007328:	7cfb      	ldrb	r3, [r7, #19]
 800732a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d028      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007338:	4b4a      	ldr	r3, [pc, #296]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800733a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800733e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007346:	4947      	ldr	r1, [pc, #284]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007348:	4313      	orrs	r3, r2
 800734a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007352:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007356:	d106      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007358:	4b42      	ldr	r3, [pc, #264]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	4a41      	ldr	r2, [pc, #260]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800735e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007362:	60d3      	str	r3, [r2, #12]
 8007364:	e011      	b.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800736a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800736e:	d10c      	bne.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3304      	adds	r3, #4
 8007374:	2101      	movs	r1, #1
 8007376:	4618      	mov	r0, r3
 8007378:	f000 ff98 	bl	80082ac <RCCEx_PLLSAI1_Config>
 800737c:	4603      	mov	r3, r0
 800737e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007380:	7cfb      	ldrb	r3, [r7, #19]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007386:	7cfb      	ldrb	r3, [r7, #19]
 8007388:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d01e      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007396:	4b33      	ldr	r3, [pc, #204]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800739c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073a6:	492f      	ldr	r1, [pc, #188]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073b8:	d10c      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3304      	adds	r3, #4
 80073be:	2102      	movs	r1, #2
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 ff73 	bl	80082ac <RCCEx_PLLSAI1_Config>
 80073c6:	4603      	mov	r3, r0
 80073c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073ca:	7cfb      	ldrb	r3, [r7, #19]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80073d0:	7cfb      	ldrb	r3, [r7, #19]
 80073d2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00b      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80073e0:	4b20      	ldr	r3, [pc, #128]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073e6:	f023 0204 	bic.w	r2, r3, #4
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f0:	491c      	ldr	r1, [pc, #112]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00b      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007404:	4b17      	ldr	r3, [pc, #92]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007406:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800740a:	f023 0218 	bic.w	r2, r3, #24
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007414:	4913      	ldr	r1, [pc, #76]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007416:	4313      	orrs	r3, r2
 8007418:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d017      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007428:	4b0e      	ldr	r3, [pc, #56]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800742a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800742e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007438:	490a      	ldr	r1, [pc, #40]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800743a:	4313      	orrs	r3, r2
 800743c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800744a:	d105      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800744c:	4b05      	ldr	r3, [pc, #20]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	4a04      	ldr	r2, [pc, #16]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007456:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007458:	7cbb      	ldrb	r3, [r7, #18]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	40021000 	.word	0x40021000

08007468 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800747a:	d13e      	bne.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800747c:	4bb6      	ldr	r3, [pc, #728]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800747e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007486:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800748e:	d028      	beq.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007496:	f200 86f4 	bhi.w	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074a0:	d005      	beq.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074a8:	d00e      	beq.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80074aa:	f000 beea 	b.w	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80074ae:	4baa      	ldr	r3, [pc, #680]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80074b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b4:	f003 0302 	and.w	r3, r3, #2
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	f040 86e4 	bne.w	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 80074be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074c2:	61fb      	str	r3, [r7, #28]
      break;
 80074c4:	f000 bedf 	b.w	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80074c8:	4ba3      	ldr	r3, [pc, #652]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80074ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	f040 86d9 	bne.w	800828a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80074d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80074dc:	61fb      	str	r3, [r7, #28]
      break;
 80074de:	f000 bed4 	b.w	800828a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80074e2:	4b9d      	ldr	r3, [pc, #628]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074ee:	f040 86ce 	bne.w	800828e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 80074f2:	4b9a      	ldr	r3, [pc, #616]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80074f4:	61fb      	str	r3, [r7, #28]
      break;
 80074f6:	f000 beca 	b.w	800828e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074fa:	4b97      	ldr	r3, [pc, #604]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	2b03      	cmp	r3, #3
 8007508:	d036      	beq.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	2b03      	cmp	r3, #3
 800750e:	d840      	bhi.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d003      	beq.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	2b02      	cmp	r3, #2
 800751a:	d020      	beq.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800751c:	e039      	b.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800751e:	4b8e      	ldr	r3, [pc, #568]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0302 	and.w	r3, r3, #2
 8007526:	2b02      	cmp	r3, #2
 8007528:	d116      	bne.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800752a:	4b8b      	ldr	r3, [pc, #556]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0308 	and.w	r3, r3, #8
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8007536:	4b88      	ldr	r3, [pc, #544]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	091b      	lsrs	r3, r3, #4
 800753c:	f003 030f 	and.w	r3, r3, #15
 8007540:	e005      	b.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8007542:	4b85      	ldr	r3, [pc, #532]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007548:	0a1b      	lsrs	r3, r3, #8
 800754a:	f003 030f 	and.w	r3, r3, #15
 800754e:	4a84      	ldr	r2, [pc, #528]	; (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007554:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007556:	e01f      	b.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	61bb      	str	r3, [r7, #24]
      break;
 800755c:	e01c      	b.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800755e:	4b7e      	ldr	r3, [pc, #504]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800756a:	d102      	bne.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800756c:	4b7d      	ldr	r3, [pc, #500]	; (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800756e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007570:	e012      	b.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	61bb      	str	r3, [r7, #24]
      break;
 8007576:	e00f      	b.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007578:	4b77      	ldr	r3, [pc, #476]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007580:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007584:	d102      	bne.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8007586:	4b78      	ldr	r3, [pc, #480]	; (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8007588:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800758a:	e005      	b.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800758c:	2300      	movs	r3, #0
 800758e:	61bb      	str	r3, [r7, #24]
      break;
 8007590:	e002      	b.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8007592:	2300      	movs	r3, #0
 8007594:	61bb      	str	r3, [r7, #24]
      break;
 8007596:	bf00      	nop
    }

    switch(PeriphClk)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800759e:	f000 8606 	beq.w	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075a8:	f200 8673 	bhi.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075b2:	f000 8469 	beq.w	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075bc:	f200 8669 	bhi.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075c6:	f000 8531 	beq.w	800802c <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075d0:	f200 865f 	bhi.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80075da:	f000 8187 	beq.w	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80075e4:	f200 8655 	bhi.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075ee:	f000 80cd 	beq.w	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075f8:	f200 864b 	bhi.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007602:	f000 8430 	beq.w	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800760c:	f200 8641 	bhi.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007616:	f000 83e4 	beq.w	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007620:	f200 8637 	bhi.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800762a:	f000 80af 	beq.w	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007634:	f200 862d 	bhi.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800763e:	f000 809d 	beq.w	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007648:	f200 8623 	bhi.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007652:	f000 808b 	beq.w	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800765c:	f200 8619 	bhi.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007666:	f000 8554 	beq.w	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007670:	f200 860f 	bhi.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800767a:	f000 8500 	beq.w	800807e <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007684:	f200 8605 	bhi.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800768e:	f000 84a1 	beq.w	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007698:	f200 85fb 	bhi.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b80      	cmp	r3, #128	; 0x80
 80076a0:	f000 846c 	beq.w	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b80      	cmp	r3, #128	; 0x80
 80076a8:	f200 85f3 	bhi.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b20      	cmp	r3, #32
 80076b0:	d84c      	bhi.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 85ec 	beq.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3b01      	subs	r3, #1
 80076be:	2b1f      	cmp	r3, #31
 80076c0:	f200 85e7 	bhi.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80076c4:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80076c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ca:	bf00      	nop
 80076cc:	08007ae1 	.word	0x08007ae1
 80076d0:	08007b4f 	.word	0x08007b4f
 80076d4:	08008293 	.word	0x08008293
 80076d8:	08007be3 	.word	0x08007be3
 80076dc:	08008293 	.word	0x08008293
 80076e0:	08008293 	.word	0x08008293
 80076e4:	08008293 	.word	0x08008293
 80076e8:	08007c5b 	.word	0x08007c5b
 80076ec:	08008293 	.word	0x08008293
 80076f0:	08008293 	.word	0x08008293
 80076f4:	08008293 	.word	0x08008293
 80076f8:	08008293 	.word	0x08008293
 80076fc:	08008293 	.word	0x08008293
 8007700:	08008293 	.word	0x08008293
 8007704:	08008293 	.word	0x08008293
 8007708:	08007cdf 	.word	0x08007cdf
 800770c:	08008293 	.word	0x08008293
 8007710:	08008293 	.word	0x08008293
 8007714:	08008293 	.word	0x08008293
 8007718:	08008293 	.word	0x08008293
 800771c:	08008293 	.word	0x08008293
 8007720:	08008293 	.word	0x08008293
 8007724:	08008293 	.word	0x08008293
 8007728:	08008293 	.word	0x08008293
 800772c:	08008293 	.word	0x08008293
 8007730:	08008293 	.word	0x08008293
 8007734:	08008293 	.word	0x08008293
 8007738:	08008293 	.word	0x08008293
 800773c:	08008293 	.word	0x08008293
 8007740:	08008293 	.word	0x08008293
 8007744:	08008293 	.word	0x08008293
 8007748:	08007d61 	.word	0x08007d61
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b40      	cmp	r3, #64	; 0x40
 8007750:	f000 83e8 	beq.w	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8007754:	f000 bd9d 	b.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007758:	40021000 	.word	0x40021000
 800775c:	0003d090 	.word	0x0003d090
 8007760:	080105d8 	.word	0x080105d8
 8007764:	00f42400 	.word	0x00f42400
 8007768:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800776c:	69b9      	ldr	r1, [r7, #24]
 800776e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007772:	f000 ff83 	bl	800867c <RCCEx_GetSAIxPeriphCLKFreq>
 8007776:	61f8      	str	r0, [r7, #28]
      break;
 8007778:	f000 bd8e 	b.w	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800777c:	69b9      	ldr	r1, [r7, #24]
 800777e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007782:	f000 ff7b 	bl	800867c <RCCEx_GetSAIxPeriphCLKFreq>
 8007786:	61f8      	str	r0, [r7, #28]
      break;
 8007788:	f000 bd86 	b.w	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800778c:	4b9a      	ldr	r3, [pc, #616]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800778e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007792:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800779e:	d015      	beq.n	80077cc <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80077a6:	f200 8092 	bhi.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077b0:	d029      	beq.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077b8:	f200 8089 	bhi.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d07b      	beq.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077c8:	d04a      	beq.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 80077ca:	e080      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80077cc:	4b8a      	ldr	r3, [pc, #552]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d17d      	bne.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80077d8:	4b87      	ldr	r3, [pc, #540]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0308 	and.w	r3, r3, #8
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d005      	beq.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80077e4:	4b84      	ldr	r3, [pc, #528]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	091b      	lsrs	r3, r3, #4
 80077ea:	f003 030f 	and.w	r3, r3, #15
 80077ee:	e005      	b.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80077f0:	4b81      	ldr	r3, [pc, #516]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80077f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077f6:	0a1b      	lsrs	r3, r3, #8
 80077f8:	f003 030f 	and.w	r3, r3, #15
 80077fc:	4a7f      	ldr	r2, [pc, #508]	; (80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80077fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007802:	61fb      	str	r3, [r7, #28]
          break;
 8007804:	e066      	b.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007806:	4b7c      	ldr	r3, [pc, #496]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800780e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007812:	d162      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007814:	4b78      	ldr	r3, [pc, #480]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800781c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007820:	d15b      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007822:	4b75      	ldr	r3, [pc, #468]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	0a1b      	lsrs	r3, r3, #8
 8007828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800782c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	fb03 f202 	mul.w	r2, r3, r2
 8007836:	4b70      	ldr	r3, [pc, #448]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	091b      	lsrs	r3, r3, #4
 800783c:	f003 030f 	and.w	r3, r3, #15
 8007840:	3301      	adds	r3, #1
 8007842:	fbb2 f3f3 	udiv	r3, r2, r3
 8007846:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007848:	4b6b      	ldr	r3, [pc, #428]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	0d5b      	lsrs	r3, r3, #21
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	3301      	adds	r3, #1
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	fbb2 f3f3 	udiv	r3, r2, r3
 800785c:	61fb      	str	r3, [r7, #28]
          break;
 800785e:	e03c      	b.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007860:	4b65      	ldr	r3, [pc, #404]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007868:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800786c:	d138      	bne.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800786e:	4b62      	ldr	r3, [pc, #392]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800787a:	d131      	bne.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800787c:	4b5e      	ldr	r3, [pc, #376]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	0a1b      	lsrs	r3, r3, #8
 8007882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007886:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	fb03 f202 	mul.w	r2, r3, r2
 8007890:	4b59      	ldr	r3, [pc, #356]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	091b      	lsrs	r3, r3, #4
 8007896:	f003 030f 	and.w	r3, r3, #15
 800789a:	3301      	adds	r3, #1
 800789c:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80078a2:	4b55      	ldr	r3, [pc, #340]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	0d5b      	lsrs	r3, r3, #21
 80078a8:	f003 0303 	and.w	r3, r3, #3
 80078ac:	3301      	adds	r3, #1
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b6:	61fb      	str	r3, [r7, #28]
          break;
 80078b8:	e012      	b.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80078ba:	4b4f      	ldr	r3, [pc, #316]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80078bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d10e      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 80078c8:	4b4d      	ldr	r3, [pc, #308]	; (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80078ca:	61fb      	str	r3, [r7, #28]
          break;
 80078cc:	e00b      	b.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80078ce:	bf00      	nop
 80078d0:	f000 bce2 	b.w	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80078d4:	bf00      	nop
 80078d6:	f000 bcdf 	b.w	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80078da:	bf00      	nop
 80078dc:	f000 bcdc 	b.w	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80078e0:	bf00      	nop
 80078e2:	f000 bcd9 	b.w	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80078e6:	bf00      	nop
        break;
 80078e8:	f000 bcd6 	b.w	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80078ec:	4b42      	ldr	r3, [pc, #264]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80078ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078fa:	d13d      	bne.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80078fc:	4b3e      	ldr	r3, [pc, #248]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007904:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007908:	f040 84c5 	bne.w	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800790c:	4b3a      	ldr	r3, [pc, #232]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007918:	f040 84bd 	bne.w	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800791c:	4b36      	ldr	r3, [pc, #216]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	0a1b      	lsrs	r3, r3, #8
 8007922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007926:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	fb03 f202 	mul.w	r2, r3, r2
 8007930:	4b31      	ldr	r3, [pc, #196]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	091b      	lsrs	r3, r3, #4
 8007936:	f003 030f 	and.w	r3, r3, #15
 800793a:	3301      	adds	r3, #1
 800793c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007940:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007942:	4b2d      	ldr	r3, [pc, #180]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	0edb      	lsrs	r3, r3, #27
 8007948:	f003 031f 	and.w	r3, r3, #31
 800794c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10a      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007954:	4b28      	ldr	r3, [pc, #160]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8007960:	2311      	movs	r3, #17
 8007962:	617b      	str	r3, [r7, #20]
 8007964:	e001      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8007966:	2307      	movs	r3, #7
 8007968:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007972:	61fb      	str	r3, [r7, #28]
      break;
 8007974:	f000 bc8f 	b.w	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007978:	4b1f      	ldr	r3, [pc, #124]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800797a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800797e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800798a:	d016      	beq.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007992:	f200 809b 	bhi.w	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800799c:	d032      	beq.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079a4:	f200 8092 	bhi.w	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 8084 	beq.w	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079b6:	d052      	beq.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 80079b8:	e088      	b.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80079ba:	4b0f      	ldr	r3, [pc, #60]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	f040 8084 	bne.w	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80079c8:	4b0b      	ldr	r3, [pc, #44]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0308 	and.w	r3, r3, #8
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d005      	beq.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80079d4:	4b08      	ldr	r3, [pc, #32]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	091b      	lsrs	r3, r3, #4
 80079da:	f003 030f 	and.w	r3, r3, #15
 80079de:	e005      	b.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 80079e0:	4b05      	ldr	r3, [pc, #20]	; (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80079e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079e6:	0a1b      	lsrs	r3, r3, #8
 80079e8:	f003 030f 	and.w	r3, r3, #15
 80079ec:	4a03      	ldr	r2, [pc, #12]	; (80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80079ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079f2:	61fb      	str	r3, [r7, #28]
          break;
 80079f4:	e06c      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80079f6:	bf00      	nop
 80079f8:	40021000 	.word	0x40021000
 80079fc:	080105d8 	.word	0x080105d8
 8007a00:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007a04:	4ba5      	ldr	r3, [pc, #660]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a10:	d160      	bne.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007a12:	4ba2      	ldr	r3, [pc, #648]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a1e:	d159      	bne.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007a20:	4b9e      	ldr	r3, [pc, #632]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	0a1b      	lsrs	r3, r3, #8
 8007a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a2a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	fb03 f202 	mul.w	r2, r3, r2
 8007a34:	4b99      	ldr	r3, [pc, #612]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	091b      	lsrs	r3, r3, #4
 8007a3a:	f003 030f 	and.w	r3, r3, #15
 8007a3e:	3301      	adds	r3, #1
 8007a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a44:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007a46:	4b95      	ldr	r3, [pc, #596]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	0d5b      	lsrs	r3, r3, #21
 8007a4c:	f003 0303 	and.w	r3, r3, #3
 8007a50:	3301      	adds	r3, #1
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a5a:	61fb      	str	r3, [r7, #28]
          break;
 8007a5c:	e03a      	b.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007a5e:	4b8f      	ldr	r3, [pc, #572]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a6a:	d135      	bne.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007a6c:	4b8b      	ldr	r3, [pc, #556]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a78:	d12e      	bne.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007a7a:	4b88      	ldr	r3, [pc, #544]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	0a1b      	lsrs	r3, r3, #8
 8007a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a84:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	fb03 f202 	mul.w	r2, r3, r2
 8007a8e:	4b83      	ldr	r3, [pc, #524]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	091b      	lsrs	r3, r3, #4
 8007a94:	f003 030f 	and.w	r3, r3, #15
 8007a98:	3301      	adds	r3, #1
 8007a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a9e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007aa0:	4b7e      	ldr	r3, [pc, #504]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	0d5b      	lsrs	r3, r3, #21
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	3301      	adds	r3, #1
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	69ba      	ldr	r2, [r7, #24]
 8007ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab4:	61fb      	str	r3, [r7, #28]
          break;
 8007ab6:	e00f      	b.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007ab8:	4b78      	ldr	r3, [pc, #480]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007aba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d10a      	bne.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8007ac6:	4b76      	ldr	r3, [pc, #472]	; (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007ac8:	61fb      	str	r3, [r7, #28]
          break;
 8007aca:	e007      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8007acc:	bf00      	nop
 8007ace:	e3e2      	b.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007ad0:	bf00      	nop
 8007ad2:	e3e0      	b.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007ad4:	bf00      	nop
 8007ad6:	e3de      	b.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007ad8:	bf00      	nop
 8007ada:	e3dc      	b.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007adc:	bf00      	nop
      break;
 8007ade:	e3da      	b.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007ae0:	4b6e      	ldr	r3, [pc, #440]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae6:	f003 0303 	and.w	r3, r3, #3
 8007aea:	60fb      	str	r3, [r7, #12]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d827      	bhi.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8007af2:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b09 	.word	0x08007b09
 8007afc:	08007b11 	.word	0x08007b11
 8007b00:	08007b19 	.word	0x08007b19
 8007b04:	08007b2d 	.word	0x08007b2d
          frequency = HAL_RCC_GetPCLK2Freq();
 8007b08:	f7ff f8a8 	bl	8006c5c <HAL_RCC_GetPCLK2Freq>
 8007b0c:	61f8      	str	r0, [r7, #28]
          break;
 8007b0e:	e01d      	b.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8007b10:	f7fe fff6 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 8007b14:	61f8      	str	r0, [r7, #28]
          break;
 8007b16:	e019      	b.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b18:	4b60      	ldr	r3, [pc, #384]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b24:	d10f      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8007b26:	4b5f      	ldr	r3, [pc, #380]	; (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b28:	61fb      	str	r3, [r7, #28]
          break;
 8007b2a:	e00c      	b.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007b2c:	4b5b      	ldr	r3, [pc, #364]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d107      	bne.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8007b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b3e:	61fb      	str	r3, [r7, #28]
          break;
 8007b40:	e003      	b.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8007b42:	bf00      	nop
 8007b44:	e3a8      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007b46:	bf00      	nop
 8007b48:	e3a6      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007b4a:	bf00      	nop
        break;
 8007b4c:	e3a4      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007b4e:	4b53      	ldr	r3, [pc, #332]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b54:	f003 030c 	and.w	r3, r3, #12
 8007b58:	60fb      	str	r3, [r7, #12]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b0c      	cmp	r3, #12
 8007b5e:	d83a      	bhi.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007b60:	a201      	add	r2, pc, #4	; (adr r2, 8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8007b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b66:	bf00      	nop
 8007b68:	08007b9d 	.word	0x08007b9d
 8007b6c:	08007bd7 	.word	0x08007bd7
 8007b70:	08007bd7 	.word	0x08007bd7
 8007b74:	08007bd7 	.word	0x08007bd7
 8007b78:	08007ba5 	.word	0x08007ba5
 8007b7c:	08007bd7 	.word	0x08007bd7
 8007b80:	08007bd7 	.word	0x08007bd7
 8007b84:	08007bd7 	.word	0x08007bd7
 8007b88:	08007bad 	.word	0x08007bad
 8007b8c:	08007bd7 	.word	0x08007bd7
 8007b90:	08007bd7 	.word	0x08007bd7
 8007b94:	08007bd7 	.word	0x08007bd7
 8007b98:	08007bc1 	.word	0x08007bc1
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b9c:	f7ff f848 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8007ba0:	61f8      	str	r0, [r7, #28]
          break;
 8007ba2:	e01d      	b.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8007ba4:	f7fe ffac 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 8007ba8:	61f8      	str	r0, [r7, #28]
          break;
 8007baa:	e019      	b.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007bac:	4b3b      	ldr	r3, [pc, #236]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bb8:	d10f      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8007bba:	4b3a      	ldr	r3, [pc, #232]	; (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007bbc:	61fb      	str	r3, [r7, #28]
          break;
 8007bbe:	e00c      	b.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007bc0:	4b36      	ldr	r3, [pc, #216]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc6:	f003 0302 	and.w	r3, r3, #2
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d107      	bne.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8007bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bd2:	61fb      	str	r3, [r7, #28]
          break;
 8007bd4:	e003      	b.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8007bd6:	bf00      	nop
 8007bd8:	e35e      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007bda:	bf00      	nop
 8007bdc:	e35c      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007bde:	bf00      	nop
        break;
 8007be0:	e35a      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007be2:	4b2e      	ldr	r3, [pc, #184]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007bec:	60fb      	str	r3, [r7, #12]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2b30      	cmp	r3, #48	; 0x30
 8007bf2:	d021      	beq.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2b30      	cmp	r3, #48	; 0x30
 8007bf8:	d829      	bhi.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2b20      	cmp	r3, #32
 8007bfe:	d011      	beq.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b20      	cmp	r3, #32
 8007c04:	d823      	bhi.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b10      	cmp	r3, #16
 8007c10:	d004      	beq.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8007c12:	e01c      	b.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c14:	f7ff f80c 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8007c18:	61f8      	str	r0, [r7, #28]
          break;
 8007c1a:	e01d      	b.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8007c1c:	f7fe ff70 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 8007c20:	61f8      	str	r0, [r7, #28]
          break;
 8007c22:	e019      	b.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c24:	4b1d      	ldr	r3, [pc, #116]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c30:	d10f      	bne.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8007c32:	4b1c      	ldr	r3, [pc, #112]	; (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007c34:	61fb      	str	r3, [r7, #28]
          break;
 8007c36:	e00c      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007c38:	4b18      	ldr	r3, [pc, #96]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d107      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8007c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c4a:	61fb      	str	r3, [r7, #28]
          break;
 8007c4c:	e003      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8007c4e:	bf00      	nop
 8007c50:	e322      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007c52:	bf00      	nop
 8007c54:	e320      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007c56:	bf00      	nop
        break;
 8007c58:	e31e      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007c5a:	4b10      	ldr	r3, [pc, #64]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c64:	60fb      	str	r3, [r7, #12]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2bc0      	cmp	r3, #192	; 0xc0
 8007c6a:	d027      	beq.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2bc0      	cmp	r3, #192	; 0xc0
 8007c70:	d82f      	bhi.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b80      	cmp	r3, #128	; 0x80
 8007c76:	d017      	beq.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2b80      	cmp	r3, #128	; 0x80
 8007c7c:	d829      	bhi.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2b40      	cmp	r3, #64	; 0x40
 8007c88:	d004      	beq.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8007c8a:	e022      	b.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c8c:	f7fe ffd0 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8007c90:	61f8      	str	r0, [r7, #28]
          break;
 8007c92:	e023      	b.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8007c94:	f7fe ff34 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 8007c98:	61f8      	str	r0, [r7, #28]
          break;
 8007c9a:	e01f      	b.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8007c9c:	40021000 	.word	0x40021000
 8007ca0:	02dc6c00 	.word	0x02dc6c00
 8007ca4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ca8:	4b9b      	ldr	r3, [pc, #620]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cb4:	d10f      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8007cb6:	4b99      	ldr	r3, [pc, #612]	; (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007cb8:	61fb      	str	r3, [r7, #28]
          break;
 8007cba:	e00c      	b.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007cbc:	4b96      	ldr	r3, [pc, #600]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d107      	bne.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8007cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cce:	61fb      	str	r3, [r7, #28]
          break;
 8007cd0:	e003      	b.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8007cd2:	bf00      	nop
 8007cd4:	e2e0      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007cd6:	bf00      	nop
 8007cd8:	e2de      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007cda:	bf00      	nop
        break;
 8007cdc:	e2dc      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007cde:	4b8e      	ldr	r3, [pc, #568]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ce8:	60fb      	str	r3, [r7, #12]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cf0:	d025      	beq.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cf8:	d82c      	bhi.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d00:	d013      	beq.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d08:	d824      	bhi.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d004      	beq.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d16:	d004      	beq.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8007d18:	e01c      	b.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d1a:	f7fe ff89 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8007d1e:	61f8      	str	r0, [r7, #28]
          break;
 8007d20:	e01d      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8007d22:	f7fe feed 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 8007d26:	61f8      	str	r0, [r7, #28]
          break;
 8007d28:	e019      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d2a:	4b7b      	ldr	r3, [pc, #492]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d36:	d10f      	bne.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8007d38:	4b78      	ldr	r3, [pc, #480]	; (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007d3a:	61fb      	str	r3, [r7, #28]
          break;
 8007d3c:	e00c      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007d3e:	4b76      	ldr	r3, [pc, #472]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d107      	bne.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8007d4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d50:	61fb      	str	r3, [r7, #28]
          break;
 8007d52:	e003      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8007d54:	bf00      	nop
 8007d56:	e29f      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007d58:	bf00      	nop
 8007d5a:	e29d      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007d5c:	bf00      	nop
        break;
 8007d5e:	e29b      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007d60:	4b6d      	ldr	r3, [pc, #436]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d72:	d025      	beq.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d7a:	d82c      	bhi.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d82:	d013      	beq.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d8a:	d824      	bhi.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d004      	beq.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d98:	d004      	beq.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8007d9a:	e01c      	b.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d9c:	f7fe ff48 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8007da0:	61f8      	str	r0, [r7, #28]
          break;
 8007da2:	e01d      	b.n	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8007da4:	f7fe feac 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 8007da8:	61f8      	str	r0, [r7, #28]
          break;
 8007daa:	e019      	b.n	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007dac:	4b5a      	ldr	r3, [pc, #360]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007db8:	d10f      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8007dba:	4b58      	ldr	r3, [pc, #352]	; (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007dbc:	61fb      	str	r3, [r7, #28]
          break;
 8007dbe:	e00c      	b.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007dc0:	4b55      	ldr	r3, [pc, #340]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d107      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8007dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dd2:	61fb      	str	r3, [r7, #28]
          break;
 8007dd4:	e003      	b.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8007dd6:	bf00      	nop
 8007dd8:	e25e      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007dda:	bf00      	nop
 8007ddc:	e25c      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007dde:	bf00      	nop
        break;
 8007de0:	e25a      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007de2:	4b4d      	ldr	r3, [pc, #308]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007dec:	60fb      	str	r3, [r7, #12]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007df4:	d007      	beq.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007dfc:	d12f      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8007dfe:	f7fe fe7f 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 8007e02:	61f8      	str	r0, [r7, #28]
          break;
 8007e04:	e02e      	b.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8007e06:	4b44      	ldr	r3, [pc, #272]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e12:	d126      	bne.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8007e14:	4b40      	ldr	r3, [pc, #256]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d020      	beq.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007e20:	4b3d      	ldr	r3, [pc, #244]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	0a1b      	lsrs	r3, r3, #8
 8007e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e2a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	fb03 f202 	mul.w	r2, r3, r2
 8007e34:	4b38      	ldr	r3, [pc, #224]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	091b      	lsrs	r3, r3, #4
 8007e3a:	f003 030f 	and.w	r3, r3, #15
 8007e3e:	3301      	adds	r3, #1
 8007e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e44:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8007e46:	4b34      	ldr	r3, [pc, #208]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	0e5b      	lsrs	r3, r3, #25
 8007e4c:	f003 0303 	and.w	r3, r3, #3
 8007e50:	3301      	adds	r3, #1
 8007e52:	005b      	lsls	r3, r3, #1
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e5a:	61fb      	str	r3, [r7, #28]
          break;
 8007e5c:	e001      	b.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8007e5e:	bf00      	nop
 8007e60:	e21a      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007e62:	bf00      	nop
        break;
 8007e64:	e218      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8007e66:	4b2c      	ldr	r3, [pc, #176]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007e68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d103      	bne.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8007e78:	f7fe fef0 	bl	8006c5c <HAL_RCC_GetPCLK2Freq>
 8007e7c:	61f8      	str	r0, [r7, #28]
        break;
 8007e7e:	e20b      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8007e80:	f7fe fe3e 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 8007e84:	61f8      	str	r0, [r7, #28]
        break;
 8007e86:	e207      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8007e88:	4b23      	ldr	r3, [pc, #140]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e8e:	f003 0318 	and.w	r3, r3, #24
 8007e92:	60fb      	str	r3, [r7, #12]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b10      	cmp	r3, #16
 8007e98:	d010      	beq.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b10      	cmp	r3, #16
 8007e9e:	d834      	bhi.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	d024      	beq.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8007eac:	e02d      	b.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007eae:	69b9      	ldr	r1, [r7, #24]
 8007eb0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007eb4:	f000 fbe2 	bl	800867c <RCCEx_GetSAIxPeriphCLKFreq>
 8007eb8:	61f8      	str	r0, [r7, #28]
          break;
 8007eba:	e02b      	b.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007ebc:	4b16      	ldr	r3, [pc, #88]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d122      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007ec8:	4b13      	ldr	r3, [pc, #76]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0308 	and.w	r3, r3, #8
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8007ed4:	4b10      	ldr	r3, [pc, #64]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	091b      	lsrs	r3, r3, #4
 8007eda:	f003 030f 	and.w	r3, r3, #15
 8007ede:	e005      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8007ee0:	4b0d      	ldr	r3, [pc, #52]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ee6:	0a1b      	lsrs	r3, r3, #8
 8007ee8:	f003 030f 	and.w	r3, r3, #15
 8007eec:	4a0c      	ldr	r2, [pc, #48]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef2:	61fb      	str	r3, [r7, #28]
          break;
 8007ef4:	e00b      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ef6:	4b08      	ldr	r3, [pc, #32]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f02:	d106      	bne.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8007f04:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007f06:	61fb      	str	r3, [r7, #28]
          break;
 8007f08:	e003      	b.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8007f0a:	bf00      	nop
 8007f0c:	e1c4      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007f0e:	bf00      	nop
 8007f10:	e1c2      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007f12:	bf00      	nop
        break;
 8007f14:	e1c0      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8007f16:	bf00      	nop
 8007f18:	40021000 	.word	0x40021000
 8007f1c:	00f42400 	.word	0x00f42400
 8007f20:	080105d8 	.word	0x080105d8
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007f24:	4b96      	ldr	r3, [pc, #600]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007f2e:	60fb      	str	r3, [r7, #12]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f36:	d013      	beq.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f3e:	d819      	bhi.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d004      	beq.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f4c:	d004      	beq.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8007f4e:	e011      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f50:	f7fe fe6e 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8007f54:	61f8      	str	r0, [r7, #28]
          break;
 8007f56:	e010      	b.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8007f58:	f7fe fdd2 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 8007f5c:	61f8      	str	r0, [r7, #28]
          break;
 8007f5e:	e00c      	b.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f60:	4b87      	ldr	r3, [pc, #540]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f6c:	d104      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8007f6e:	4b85      	ldr	r3, [pc, #532]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007f70:	61fb      	str	r3, [r7, #28]
          break;
 8007f72:	e001      	b.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8007f74:	bf00      	nop
 8007f76:	e18f      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007f78:	bf00      	nop
        break;
 8007f7a:	e18d      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007f7c:	4b80      	ldr	r3, [pc, #512]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f86:	60fb      	str	r3, [r7, #12]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f8e:	d013      	beq.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f96:	d819      	bhi.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d004      	beq.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fa4:	d004      	beq.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8007fa6:	e011      	b.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007fa8:	f7fe fe42 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8007fac:	61f8      	str	r0, [r7, #28]
          break;
 8007fae:	e010      	b.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8007fb0:	f7fe fda6 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 8007fb4:	61f8      	str	r0, [r7, #28]
          break;
 8007fb6:	e00c      	b.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007fb8:	4b71      	ldr	r3, [pc, #452]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fc4:	d104      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8007fc6:	4b6f      	ldr	r3, [pc, #444]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007fc8:	61fb      	str	r3, [r7, #28]
          break;
 8007fca:	e001      	b.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8007fcc:	bf00      	nop
 8007fce:	e163      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007fd0:	bf00      	nop
        break;
 8007fd2:	e161      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007fd4:	4b6a      	ldr	r3, [pc, #424]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fe6:	d013      	beq.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fee:	d819      	bhi.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d004      	beq.n	8008000 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ffc:	d004      	beq.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8007ffe:	e011      	b.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008000:	f7fe fe16 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8008004:	61f8      	str	r0, [r7, #28]
          break;
 8008006:	e010      	b.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8008008:	f7fe fd7a 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 800800c:	61f8      	str	r0, [r7, #28]
          break;
 800800e:	e00c      	b.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008010:	4b5b      	ldr	r3, [pc, #364]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800801c:	d104      	bne.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800801e:	4b59      	ldr	r3, [pc, #356]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8008020:	61fb      	str	r3, [r7, #28]
          break;
 8008022:	e001      	b.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8008024:	bf00      	nop
 8008026:	e137      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008028:	bf00      	nop
        break;
 800802a:	e135      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800802c:	4b54      	ldr	r3, [pc, #336]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800802e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008032:	f003 0303 	and.w	r3, r3, #3
 8008036:	60fb      	str	r3, [r7, #12]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b02      	cmp	r3, #2
 800803c:	d011      	beq.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2b02      	cmp	r3, #2
 8008042:	d818      	bhi.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d004      	beq.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8008050:	e011      	b.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008052:	f7fe fded 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8008056:	61f8      	str	r0, [r7, #28]
          break;
 8008058:	e010      	b.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800805a:	f7fe fd51 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 800805e:	61f8      	str	r0, [r7, #28]
          break;
 8008060:	e00c      	b.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008062:	4b47      	ldr	r3, [pc, #284]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800806a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800806e:	d104      	bne.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8008070:	4b44      	ldr	r3, [pc, #272]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8008072:	61fb      	str	r3, [r7, #28]
          break;
 8008074:	e001      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8008076:	bf00      	nop
 8008078:	e10e      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800807a:	bf00      	nop
        break;
 800807c:	e10c      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800807e:	4b40      	ldr	r3, [pc, #256]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008084:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008088:	60fb      	str	r3, [r7, #12]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008090:	d02c      	beq.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008098:	d833      	bhi.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080a0:	d01a      	beq.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080a8:	d82b      	bhi.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d004      	beq.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080b6:	d004      	beq.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 80080b8:	e023      	b.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80080ba:	f7fe fdb9 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 80080be:	61f8      	str	r0, [r7, #28]
          break;
 80080c0:	e026      	b.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80080c2:	4b2f      	ldr	r3, [pc, #188]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80080c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080c8:	f003 0302 	and.w	r3, r3, #2
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d11a      	bne.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 80080d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80080d4:	61fb      	str	r3, [r7, #28]
          break;
 80080d6:	e016      	b.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080d8:	4b29      	ldr	r3, [pc, #164]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080e4:	d111      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 80080e6:	4b27      	ldr	r3, [pc, #156]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80080e8:	61fb      	str	r3, [r7, #28]
          break;
 80080ea:	e00e      	b.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80080ec:	4b24      	ldr	r3, [pc, #144]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80080ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d109      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 80080fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080fe:	61fb      	str	r3, [r7, #28]
          break;
 8008100:	e005      	b.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8008102:	bf00      	nop
 8008104:	e0c8      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008106:	bf00      	nop
 8008108:	e0c6      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800810a:	bf00      	nop
 800810c:	e0c4      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800810e:	bf00      	nop
        break;
 8008110:	e0c2      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008112:	4b1b      	ldr	r3, [pc, #108]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008118:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008124:	d030      	beq.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800812c:	d837      	bhi.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008134:	d01a      	beq.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800813c:	d82f      	bhi.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d004      	beq.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800814a:	d004      	beq.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800814c:	e027      	b.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800814e:	f7fe fd6f 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8008152:	61f8      	str	r0, [r7, #28]
          break;
 8008154:	e02a      	b.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008156:	4b0a      	ldr	r3, [pc, #40]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800815c:	f003 0302 	and.w	r3, r3, #2
 8008160:	2b02      	cmp	r3, #2
 8008162:	d11e      	bne.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8008164:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008168:	61fb      	str	r3, [r7, #28]
          break;
 800816a:	e01a      	b.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800816c:	4b04      	ldr	r3, [pc, #16]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008178:	d115      	bne.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800817a:	4b02      	ldr	r3, [pc, #8]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800817c:	61fb      	str	r3, [r7, #28]
          break;
 800817e:	e012      	b.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8008180:	40021000 	.word	0x40021000
 8008184:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008188:	4b46      	ldr	r3, [pc, #280]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800818a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b02      	cmp	r3, #2
 8008194:	d109      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8008196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800819a:	61fb      	str	r3, [r7, #28]
          break;
 800819c:	e005      	b.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800819e:	bf00      	nop
 80081a0:	e07a      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80081a2:	bf00      	nop
 80081a4:	e078      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80081a6:	bf00      	nop
 80081a8:	e076      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80081aa:	bf00      	nop
        break;
 80081ac:	e074      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80081ae:	4b3d      	ldr	r3, [pc, #244]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80081b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80081b8:	60fb      	str	r3, [r7, #12]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081c0:	d02c      	beq.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081c8:	d855      	bhi.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d004      	beq.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081d6:	d004      	beq.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 80081d8:	e04d      	b.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80081da:	f7fe fc91 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 80081de:	61f8      	str	r0, [r7, #28]
          break;
 80081e0:	e04e      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80081e2:	4b30      	ldr	r3, [pc, #192]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0302 	and.w	r3, r3, #2
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d145      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80081ee:	4b2d      	ldr	r3, [pc, #180]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0308 	and.w	r3, r3, #8
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d005      	beq.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80081fa:	4b2a      	ldr	r3, [pc, #168]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	091b      	lsrs	r3, r3, #4
 8008200:	f003 030f 	and.w	r3, r3, #15
 8008204:	e005      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8008206:	4b27      	ldr	r3, [pc, #156]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800820c:	0a1b      	lsrs	r3, r3, #8
 800820e:	f003 030f 	and.w	r3, r3, #15
 8008212:	4a25      	ldr	r2, [pc, #148]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8008214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008218:	61fb      	str	r3, [r7, #28]
          break;
 800821a:	e02e      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800821c:	4b21      	ldr	r3, [pc, #132]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008224:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008228:	d129      	bne.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800822a:	4b1e      	ldr	r3, [pc, #120]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008236:	d122      	bne.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008238:	4b1a      	ldr	r3, [pc, #104]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	0a1b      	lsrs	r3, r3, #8
 800823e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008242:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	fb03 f202 	mul.w	r2, r3, r2
 800824c:	4b15      	ldr	r3, [pc, #84]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	091b      	lsrs	r3, r3, #4
 8008252:	f003 030f 	and.w	r3, r3, #15
 8008256:	3301      	adds	r3, #1
 8008258:	fbb2 f3f3 	udiv	r3, r2, r3
 800825c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800825e:	4b11      	ldr	r3, [pc, #68]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	0d5b      	lsrs	r3, r3, #21
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	3301      	adds	r3, #1
 800826a:	005b      	lsls	r3, r3, #1
 800826c:	69ba      	ldr	r2, [r7, #24]
 800826e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008272:	61fb      	str	r3, [r7, #28]
          break;
 8008274:	e003      	b.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8008276:	bf00      	nop
 8008278:	e00e      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800827a:	bf00      	nop
 800827c:	e00c      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800827e:	bf00      	nop
        break;
 8008280:	e00a      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8008282:	bf00      	nop
 8008284:	e008      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8008286:	bf00      	nop
 8008288:	e006      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800828a:	bf00      	nop
 800828c:	e004      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800828e:	bf00      	nop
 8008290:	e002      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8008292:	bf00      	nop
 8008294:	e000      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8008296:	bf00      	nop
    }
  }

  return(frequency);
 8008298:	69fb      	ldr	r3, [r7, #28]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3720      	adds	r7, #32
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	40021000 	.word	0x40021000
 80082a8:	080105d8 	.word	0x080105d8

080082ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80082ba:	4b72      	ldr	r3, [pc, #456]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f003 0303 	and.w	r3, r3, #3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00e      	beq.n	80082e4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80082c6:	4b6f      	ldr	r3, [pc, #444]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	f003 0203 	and.w	r2, r3, #3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d103      	bne.n	80082de <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
       ||
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d142      	bne.n	8008364 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	73fb      	strb	r3, [r7, #15]
 80082e2:	e03f      	b.n	8008364 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b03      	cmp	r3, #3
 80082ea:	d018      	beq.n	800831e <RCCEx_PLLSAI1_Config+0x72>
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	d825      	bhi.n	800833c <RCCEx_PLLSAI1_Config+0x90>
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d002      	beq.n	80082fa <RCCEx_PLLSAI1_Config+0x4e>
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d009      	beq.n	800830c <RCCEx_PLLSAI1_Config+0x60>
 80082f8:	e020      	b.n	800833c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80082fa:	4b62      	ldr	r3, [pc, #392]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d11d      	bne.n	8008342 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800830a:	e01a      	b.n	8008342 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800830c:	4b5d      	ldr	r3, [pc, #372]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008314:	2b00      	cmp	r3, #0
 8008316:	d116      	bne.n	8008346 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800831c:	e013      	b.n	8008346 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800831e:	4b59      	ldr	r3, [pc, #356]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10f      	bne.n	800834a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800832a:	4b56      	ldr	r3, [pc, #344]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d109      	bne.n	800834a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800833a:	e006      	b.n	800834a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	73fb      	strb	r3, [r7, #15]
      break;
 8008340:	e004      	b.n	800834c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008342:	bf00      	nop
 8008344:	e002      	b.n	800834c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008346:	bf00      	nop
 8008348:	e000      	b.n	800834c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800834a:	bf00      	nop
    }

    if(status == HAL_OK)
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d108      	bne.n	8008364 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8008352:	4b4c      	ldr	r3, [pc, #304]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	f023 0203 	bic.w	r2, r3, #3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4949      	ldr	r1, [pc, #292]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008360:	4313      	orrs	r3, r2
 8008362:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	2b00      	cmp	r3, #0
 8008368:	f040 8086 	bne.w	8008478 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800836c:	4b45      	ldr	r3, [pc, #276]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a44      	ldr	r2, [pc, #272]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008372:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008378:	f7fb ff56 	bl	8004228 <HAL_GetTick>
 800837c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800837e:	e009      	b.n	8008394 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008380:	f7fb ff52 	bl	8004228 <HAL_GetTick>
 8008384:	4602      	mov	r2, r0
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	2b02      	cmp	r3, #2
 800838c:	d902      	bls.n	8008394 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	73fb      	strb	r3, [r7, #15]
        break;
 8008392:	e005      	b.n	80083a0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008394:	4b3b      	ldr	r3, [pc, #236]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1ef      	bne.n	8008380 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d168      	bne.n	8008478 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d113      	bne.n	80083d4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80083ac:	4b35      	ldr	r3, [pc, #212]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 80083ae:	691a      	ldr	r2, [r3, #16]
 80083b0:	4b35      	ldr	r3, [pc, #212]	; (8008488 <RCCEx_PLLSAI1_Config+0x1dc>)
 80083b2:	4013      	ands	r3, r2
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	6892      	ldr	r2, [r2, #8]
 80083b8:	0211      	lsls	r1, r2, #8
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	68d2      	ldr	r2, [r2, #12]
 80083be:	06d2      	lsls	r2, r2, #27
 80083c0:	4311      	orrs	r1, r2
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	6852      	ldr	r2, [r2, #4]
 80083c6:	3a01      	subs	r2, #1
 80083c8:	0112      	lsls	r2, r2, #4
 80083ca:	430a      	orrs	r2, r1
 80083cc:	492d      	ldr	r1, [pc, #180]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	610b      	str	r3, [r1, #16]
 80083d2:	e02d      	b.n	8008430 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d115      	bne.n	8008406 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80083da:	4b2a      	ldr	r3, [pc, #168]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 80083dc:	691a      	ldr	r2, [r3, #16]
 80083de:	4b2b      	ldr	r3, [pc, #172]	; (800848c <RCCEx_PLLSAI1_Config+0x1e0>)
 80083e0:	4013      	ands	r3, r2
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	6892      	ldr	r2, [r2, #8]
 80083e6:	0211      	lsls	r1, r2, #8
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	6912      	ldr	r2, [r2, #16]
 80083ec:	0852      	lsrs	r2, r2, #1
 80083ee:	3a01      	subs	r2, #1
 80083f0:	0552      	lsls	r2, r2, #21
 80083f2:	4311      	orrs	r1, r2
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	6852      	ldr	r2, [r2, #4]
 80083f8:	3a01      	subs	r2, #1
 80083fa:	0112      	lsls	r2, r2, #4
 80083fc:	430a      	orrs	r2, r1
 80083fe:	4921      	ldr	r1, [pc, #132]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008400:	4313      	orrs	r3, r2
 8008402:	610b      	str	r3, [r1, #16]
 8008404:	e014      	b.n	8008430 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008406:	4b1f      	ldr	r3, [pc, #124]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008408:	691a      	ldr	r2, [r3, #16]
 800840a:	4b21      	ldr	r3, [pc, #132]	; (8008490 <RCCEx_PLLSAI1_Config+0x1e4>)
 800840c:	4013      	ands	r3, r2
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	6892      	ldr	r2, [r2, #8]
 8008412:	0211      	lsls	r1, r2, #8
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	6952      	ldr	r2, [r2, #20]
 8008418:	0852      	lsrs	r2, r2, #1
 800841a:	3a01      	subs	r2, #1
 800841c:	0652      	lsls	r2, r2, #25
 800841e:	4311      	orrs	r1, r2
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	6852      	ldr	r2, [r2, #4]
 8008424:	3a01      	subs	r2, #1
 8008426:	0112      	lsls	r2, r2, #4
 8008428:	430a      	orrs	r2, r1
 800842a:	4916      	ldr	r1, [pc, #88]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 800842c:	4313      	orrs	r3, r2
 800842e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008430:	4b14      	ldr	r3, [pc, #80]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a13      	ldr	r2, [pc, #76]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008436:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800843a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800843c:	f7fb fef4 	bl	8004228 <HAL_GetTick>
 8008440:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008442:	e009      	b.n	8008458 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008444:	f7fb fef0 	bl	8004228 <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	2b02      	cmp	r3, #2
 8008450:	d902      	bls.n	8008458 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	73fb      	strb	r3, [r7, #15]
          break;
 8008456:	e005      	b.n	8008464 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008458:	4b0a      	ldr	r3, [pc, #40]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d0ef      	beq.n	8008444 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008464:	7bfb      	ldrb	r3, [r7, #15]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d106      	bne.n	8008478 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800846a:	4b06      	ldr	r3, [pc, #24]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 800846c:	691a      	ldr	r2, [r3, #16]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	4904      	ldr	r1, [pc, #16]	; (8008484 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008474:	4313      	orrs	r3, r2
 8008476:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008478:	7bfb      	ldrb	r3, [r7, #15]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	40021000 	.word	0x40021000
 8008488:	07ff800f 	.word	0x07ff800f
 800848c:	ff9f800f 	.word	0xff9f800f
 8008490:	f9ff800f 	.word	0xf9ff800f

08008494 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80084a2:	4b72      	ldr	r3, [pc, #456]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	f003 0303 	and.w	r3, r3, #3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00e      	beq.n	80084cc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80084ae:	4b6f      	ldr	r3, [pc, #444]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	f003 0203 	and.w	r2, r3, #3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d103      	bne.n	80084c6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
       ||
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d142      	bne.n	800854c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	73fb      	strb	r3, [r7, #15]
 80084ca:	e03f      	b.n	800854c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d018      	beq.n	8008506 <RCCEx_PLLSAI2_Config+0x72>
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d825      	bhi.n	8008524 <RCCEx_PLLSAI2_Config+0x90>
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d002      	beq.n	80084e2 <RCCEx_PLLSAI2_Config+0x4e>
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d009      	beq.n	80084f4 <RCCEx_PLLSAI2_Config+0x60>
 80084e0:	e020      	b.n	8008524 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80084e2:	4b62      	ldr	r3, [pc, #392]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d11d      	bne.n	800852a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084f2:	e01a      	b.n	800852a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80084f4:	4b5d      	ldr	r3, [pc, #372]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d116      	bne.n	800852e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008504:	e013      	b.n	800852e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008506:	4b59      	ldr	r3, [pc, #356]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10f      	bne.n	8008532 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008512:	4b56      	ldr	r3, [pc, #344]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d109      	bne.n	8008532 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008522:	e006      	b.n	8008532 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	73fb      	strb	r3, [r7, #15]
      break;
 8008528:	e004      	b.n	8008534 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800852a:	bf00      	nop
 800852c:	e002      	b.n	8008534 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800852e:	bf00      	nop
 8008530:	e000      	b.n	8008534 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008532:	bf00      	nop
    }

    if(status == HAL_OK)
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d108      	bne.n	800854c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800853a:	4b4c      	ldr	r3, [pc, #304]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	f023 0203 	bic.w	r2, r3, #3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4949      	ldr	r1, [pc, #292]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008548:	4313      	orrs	r3, r2
 800854a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	2b00      	cmp	r3, #0
 8008550:	f040 8086 	bne.w	8008660 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008554:	4b45      	ldr	r3, [pc, #276]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a44      	ldr	r2, [pc, #272]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 800855a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800855e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008560:	f7fb fe62 	bl	8004228 <HAL_GetTick>
 8008564:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008566:	e009      	b.n	800857c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008568:	f7fb fe5e 	bl	8004228 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	2b02      	cmp	r3, #2
 8008574:	d902      	bls.n	800857c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	73fb      	strb	r3, [r7, #15]
        break;
 800857a:	e005      	b.n	8008588 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800857c:	4b3b      	ldr	r3, [pc, #236]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1ef      	bne.n	8008568 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d168      	bne.n	8008660 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d113      	bne.n	80085bc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008594:	4b35      	ldr	r3, [pc, #212]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008596:	695a      	ldr	r2, [r3, #20]
 8008598:	4b35      	ldr	r3, [pc, #212]	; (8008670 <RCCEx_PLLSAI2_Config+0x1dc>)
 800859a:	4013      	ands	r3, r2
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	6892      	ldr	r2, [r2, #8]
 80085a0:	0211      	lsls	r1, r2, #8
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	68d2      	ldr	r2, [r2, #12]
 80085a6:	06d2      	lsls	r2, r2, #27
 80085a8:	4311      	orrs	r1, r2
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	6852      	ldr	r2, [r2, #4]
 80085ae:	3a01      	subs	r2, #1
 80085b0:	0112      	lsls	r2, r2, #4
 80085b2:	430a      	orrs	r2, r1
 80085b4:	492d      	ldr	r1, [pc, #180]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	614b      	str	r3, [r1, #20]
 80085ba:	e02d      	b.n	8008618 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d115      	bne.n	80085ee <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80085c2:	4b2a      	ldr	r3, [pc, #168]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 80085c4:	695a      	ldr	r2, [r3, #20]
 80085c6:	4b2b      	ldr	r3, [pc, #172]	; (8008674 <RCCEx_PLLSAI2_Config+0x1e0>)
 80085c8:	4013      	ands	r3, r2
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	6892      	ldr	r2, [r2, #8]
 80085ce:	0211      	lsls	r1, r2, #8
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	6912      	ldr	r2, [r2, #16]
 80085d4:	0852      	lsrs	r2, r2, #1
 80085d6:	3a01      	subs	r2, #1
 80085d8:	0552      	lsls	r2, r2, #21
 80085da:	4311      	orrs	r1, r2
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	6852      	ldr	r2, [r2, #4]
 80085e0:	3a01      	subs	r2, #1
 80085e2:	0112      	lsls	r2, r2, #4
 80085e4:	430a      	orrs	r2, r1
 80085e6:	4921      	ldr	r1, [pc, #132]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	614b      	str	r3, [r1, #20]
 80085ec:	e014      	b.n	8008618 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80085ee:	4b1f      	ldr	r3, [pc, #124]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 80085f0:	695a      	ldr	r2, [r3, #20]
 80085f2:	4b21      	ldr	r3, [pc, #132]	; (8008678 <RCCEx_PLLSAI2_Config+0x1e4>)
 80085f4:	4013      	ands	r3, r2
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	6892      	ldr	r2, [r2, #8]
 80085fa:	0211      	lsls	r1, r2, #8
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	6952      	ldr	r2, [r2, #20]
 8008600:	0852      	lsrs	r2, r2, #1
 8008602:	3a01      	subs	r2, #1
 8008604:	0652      	lsls	r2, r2, #25
 8008606:	4311      	orrs	r1, r2
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	6852      	ldr	r2, [r2, #4]
 800860c:	3a01      	subs	r2, #1
 800860e:	0112      	lsls	r2, r2, #4
 8008610:	430a      	orrs	r2, r1
 8008612:	4916      	ldr	r1, [pc, #88]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008614:	4313      	orrs	r3, r2
 8008616:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008618:	4b14      	ldr	r3, [pc, #80]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a13      	ldr	r2, [pc, #76]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 800861e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008622:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008624:	f7fb fe00 	bl	8004228 <HAL_GetTick>
 8008628:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800862a:	e009      	b.n	8008640 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800862c:	f7fb fdfc 	bl	8004228 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	2b02      	cmp	r3, #2
 8008638:	d902      	bls.n	8008640 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	73fb      	strb	r3, [r7, #15]
          break;
 800863e:	e005      	b.n	800864c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008640:	4b0a      	ldr	r3, [pc, #40]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d0ef      	beq.n	800862c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d106      	bne.n	8008660 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008652:	4b06      	ldr	r3, [pc, #24]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008654:	695a      	ldr	r2, [r3, #20]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	4904      	ldr	r1, [pc, #16]	; (800866c <RCCEx_PLLSAI2_Config+0x1d8>)
 800865c:	4313      	orrs	r3, r2
 800865e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008660:	7bfb      	ldrb	r3, [r7, #15]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	40021000 	.word	0x40021000
 8008670:	07ff800f 	.word	0x07ff800f
 8008674:	ff9f800f 	.word	0xff9f800f
 8008678:	f9ff800f 	.word	0xf9ff800f

0800867c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800867c:	b480      	push	{r7}
 800867e:	b089      	sub	sp, #36	; 0x24
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800868a:	2300      	movs	r3, #0
 800868c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800868e:	2300      	movs	r3, #0
 8008690:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008698:	d10b      	bne.n	80086b2 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800869a:	4b7e      	ldr	r3, [pc, #504]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800869c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086a0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80086a4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	2b60      	cmp	r3, #96	; 0x60
 80086aa:	d112      	bne.n	80086d2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80086ac:	4b7a      	ldr	r3, [pc, #488]	; (8008898 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80086ae:	61fb      	str	r3, [r7, #28]
 80086b0:	e00f      	b.n	80086d2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b8:	d10b      	bne.n	80086d2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80086ba:	4b76      	ldr	r3, [pc, #472]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80086bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086c4:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086cc:	d101      	bne.n	80086d2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80086ce:	4b72      	ldr	r3, [pc, #456]	; (8008898 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80086d0:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f040 80d6 	bne.w	8008886 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	2b40      	cmp	r3, #64	; 0x40
 80086e2:	d003      	beq.n	80086ec <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086ea:	d13b      	bne.n	8008764 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80086ec:	4b69      	ldr	r3, [pc, #420]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086f8:	f040 80c4 	bne.w	8008884 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80086fc:	4b65      	ldr	r3, [pc, #404]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 80bd 	beq.w	8008884 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800870a:	4b62      	ldr	r3, [pc, #392]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	091b      	lsrs	r3, r3, #4
 8008710:	f003 030f 	and.w	r3, r3, #15
 8008714:	3301      	adds	r3, #1
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	fbb2 f3f3 	udiv	r3, r2, r3
 800871c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800871e:	4b5d      	ldr	r3, [pc, #372]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	0a1b      	lsrs	r3, r3, #8
 8008724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008728:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800872a:	4b5a      	ldr	r3, [pc, #360]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	0edb      	lsrs	r3, r3, #27
 8008730:	f003 031f 	and.w	r3, r3, #31
 8008734:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10a      	bne.n	8008752 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800873c:	4b55      	ldr	r3, [pc, #340]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8008748:	2311      	movs	r3, #17
 800874a:	617b      	str	r3, [r7, #20]
 800874c:	e001      	b.n	8008752 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800874e:	2307      	movs	r3, #7
 8008750:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	fb03 f202 	mul.w	r2, r3, r2
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008760:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008762:	e08f      	b.n	8008884 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d13a      	bne.n	80087e0 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800876a:	4b4a      	ldr	r3, [pc, #296]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008776:	f040 8086 	bne.w	8008886 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800877a:	4b46      	ldr	r3, [pc, #280]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d07f      	beq.n	8008886 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8008786:	4b43      	ldr	r3, [pc, #268]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	091b      	lsrs	r3, r3, #4
 800878c:	f003 030f 	and.w	r3, r3, #15
 8008790:	3301      	adds	r3, #1
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	fbb2 f3f3 	udiv	r3, r2, r3
 8008798:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800879a:	4b3e      	ldr	r3, [pc, #248]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	0a1b      	lsrs	r3, r3, #8
 80087a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80087a6:	4b3b      	ldr	r3, [pc, #236]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	0edb      	lsrs	r3, r3, #27
 80087ac:	f003 031f 	and.w	r3, r3, #31
 80087b0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10a      	bne.n	80087ce <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80087b8:	4b36      	ldr	r3, [pc, #216]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80087c4:	2311      	movs	r3, #17
 80087c6:	617b      	str	r3, [r7, #20]
 80087c8:	e001      	b.n	80087ce <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80087ca:	2307      	movs	r3, #7
 80087cc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	fb03 f202 	mul.w	r2, r3, r2
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087dc:	61fb      	str	r3, [r7, #28]
 80087de:	e052      	b.n	8008886 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	2b80      	cmp	r3, #128	; 0x80
 80087e4:	d003      	beq.n	80087ee <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087ec:	d109      	bne.n	8008802 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087ee:	4b29      	ldr	r3, [pc, #164]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087fa:	d144      	bne.n	8008886 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80087fc:	4b27      	ldr	r3, [pc, #156]	; (800889c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80087fe:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008800:	e041      	b.n	8008886 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	2b20      	cmp	r3, #32
 8008806:	d003      	beq.n	8008810 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800880e:	d13a      	bne.n	8008886 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8008810:	4b20      	ldr	r3, [pc, #128]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800881c:	d133      	bne.n	8008886 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800881e:	4b1d      	ldr	r3, [pc, #116]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d02d      	beq.n	8008886 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800882a:	4b1a      	ldr	r3, [pc, #104]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	091b      	lsrs	r3, r3, #4
 8008830:	f003 030f 	and.w	r3, r3, #15
 8008834:	3301      	adds	r3, #1
 8008836:	693a      	ldr	r2, [r7, #16]
 8008838:	fbb2 f3f3 	udiv	r3, r2, r3
 800883c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800883e:	4b15      	ldr	r3, [pc, #84]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	0a1b      	lsrs	r3, r3, #8
 8008844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008848:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800884a:	4b12      	ldr	r3, [pc, #72]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	0edb      	lsrs	r3, r3, #27
 8008850:	f003 031f 	and.w	r3, r3, #31
 8008854:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10a      	bne.n	8008872 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800885c:	4b0d      	ldr	r3, [pc, #52]	; (8008894 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800885e:	695b      	ldr	r3, [r3, #20]
 8008860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8008868:	2311      	movs	r3, #17
 800886a:	617b      	str	r3, [r7, #20]
 800886c:	e001      	b.n	8008872 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800886e:	2307      	movs	r3, #7
 8008870:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	fb03 f202 	mul.w	r2, r3, r2
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008880:	61fb      	str	r3, [r7, #28]
 8008882:	e000      	b.n	8008886 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008884:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8008886:	69fb      	ldr	r3, [r7, #28]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3724      	adds	r7, #36	; 0x24
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	40021000 	.word	0x40021000
 8008898:	001fff68 	.word	0x001fff68
 800889c:	00f42400 	.word	0x00f42400

080088a0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
 80088ac:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d904      	bls.n	80088be <HAL_SAI_InitProtocol+0x1e>
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	3b03      	subs	r3, #3
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d812      	bhi.n	80088e2 <HAL_SAI_InitProtocol+0x42>
 80088bc:	e008      	b.n	80088d0 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	68b9      	ldr	r1, [r7, #8]
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f000 f9fb 	bl	8008cc0 <SAI_InitI2S>
 80088ca:	4603      	mov	r3, r0
 80088cc:	75fb      	strb	r3, [r7, #23]
      break;
 80088ce:	e00b      	b.n	80088e8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	68b9      	ldr	r1, [r7, #8]
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 faa4 	bl	8008e24 <SAI_InitPCM>
 80088dc:	4603      	mov	r3, r0
 80088de:	75fb      	strb	r3, [r7, #23]
      break;
 80088e0:	e002      	b.n	80088e8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	75fb      	strb	r3, [r7, #23]
      break;
 80088e6:	bf00      	nop
  }

  if (status == HAL_OK)
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d104      	bne.n	80088f8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f000 f808 	bl	8008904 <HAL_SAI_Init>
 80088f4:	4603      	mov	r3, r0
 80088f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80088f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08a      	sub	sp, #40	; 0x28
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e1c7      	b.n	8008ca6 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800891c:	2b01      	cmp	r3, #1
 800891e:	d10e      	bne.n	800893e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a81      	ldr	r2, [pc, #516]	; (8008b2c <HAL_SAI_Init+0x228>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d107      	bne.n	800893a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800892e:	2b01      	cmp	r3, #1
 8008930:	d103      	bne.n	800893a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008936:	2b00      	cmp	r3, #0
 8008938:	d001      	beq.n	800893e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e1b3      	b.n	8008ca6 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b00      	cmp	r3, #0
 8008948:	d106      	bne.n	8008958 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7fb fb2e 	bl	8003fb4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fae5 	bl	8008f28 <SAI_Disable>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e19e      	b.n	8008ca6 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2202      	movs	r2, #2
 800896c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	2b02      	cmp	r3, #2
 8008976:	d00c      	beq.n	8008992 <HAL_SAI_Init+0x8e>
 8008978:	2b02      	cmp	r3, #2
 800897a:	d80d      	bhi.n	8008998 <HAL_SAI_Init+0x94>
 800897c:	2b00      	cmp	r3, #0
 800897e:	d002      	beq.n	8008986 <HAL_SAI_Init+0x82>
 8008980:	2b01      	cmp	r3, #1
 8008982:	d003      	beq.n	800898c <HAL_SAI_Init+0x88>
 8008984:	e008      	b.n	8008998 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800898a:	e008      	b.n	800899e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800898c:	2310      	movs	r3, #16
 800898e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008990:	e005      	b.n	800899e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008992:	2320      	movs	r3, #32
 8008994:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008996:	e002      	b.n	800899e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8008998:	2300      	movs	r3, #0
 800899a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800899c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d81d      	bhi.n	80089e2 <HAL_SAI_Init+0xde>
 80089a6:	a201      	add	r2, pc, #4	; (adr r2, 80089ac <HAL_SAI_Init+0xa8>)
 80089a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ac:	080089bd 	.word	0x080089bd
 80089b0:	080089c3 	.word	0x080089c3
 80089b4:	080089cb 	.word	0x080089cb
 80089b8:	080089d3 	.word	0x080089d3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80089bc:	2300      	movs	r3, #0
 80089be:	61fb      	str	r3, [r7, #28]
      break;
 80089c0:	e012      	b.n	80089e8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80089c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089c6:	61fb      	str	r3, [r7, #28]
      break;
 80089c8:	e00e      	b.n	80089e8 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80089ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089ce:	61fb      	str	r3, [r7, #28]
      break;
 80089d0:	e00a      	b.n	80089e8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80089d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089d6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	f043 0301 	orr.w	r3, r3, #1
 80089de:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80089e0:	e002      	b.n	80089e8 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	61fb      	str	r3, [r7, #28]
      break;
 80089e6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a4f      	ldr	r2, [pc, #316]	; (8008b2c <HAL_SAI_Init+0x228>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d004      	beq.n	80089fc <HAL_SAI_Init+0xf8>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a4e      	ldr	r2, [pc, #312]	; (8008b30 <HAL_SAI_Init+0x22c>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d103      	bne.n	8008a04 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 80089fc:	4a4d      	ldr	r2, [pc, #308]	; (8008b34 <HAL_SAI_Init+0x230>)
 80089fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a00:	6013      	str	r3, [r2, #0]
 8008a02:	e002      	b.n	8008a0a <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008a04:	4a4c      	ldr	r2, [pc, #304]	; (8008b38 <HAL_SAI_Init+0x234>)
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	69db      	ldr	r3, [r3, #28]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d073      	beq.n	8008afa <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a45      	ldr	r2, [pc, #276]	; (8008b2c <HAL_SAI_Init+0x228>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d004      	beq.n	8008a26 <HAL_SAI_Init+0x122>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a43      	ldr	r2, [pc, #268]	; (8008b30 <HAL_SAI_Init+0x22c>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d105      	bne.n	8008a32 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008a26:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008a2a:	f7fe fd1d 	bl	8007468 <HAL_RCCEx_GetPeriphCLKFreq>
 8008a2e:	61b8      	str	r0, [r7, #24]
 8008a30:	e004      	b.n	8008a3c <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008a32:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008a36:	f7fe fd17 	bl	8007468 <HAL_RCCEx_GetPeriphCLKFreq>
 8008a3a:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a44:	d120      	bne.n	8008a88 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4a:	2b04      	cmp	r3, #4
 8008a4c:	d102      	bne.n	8008a54 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8008a4e:	2340      	movs	r3, #64	; 0x40
 8008a50:	613b      	str	r3, [r7, #16]
 8008a52:	e00a      	b.n	8008a6a <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a58:	2b08      	cmp	r3, #8
 8008a5a:	d103      	bne.n	8008a64 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8008a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a60:	613b      	str	r3, [r7, #16]
 8008a62:	e002      	b.n	8008a6a <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a68:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	4619      	mov	r1, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	fb02 f303 	mul.w	r3, r2, r3
 8008a80:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a84:	617b      	str	r3, [r7, #20]
 8008a86:	e017      	b.n	8008ab8 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a90:	d101      	bne.n	8008a96 <HAL_SAI_Init+0x192>
 8008a92:	2302      	movs	r3, #2
 8008a94:	e000      	b.n	8008a98 <HAL_SAI_Init+0x194>
 8008a96:	2301      	movs	r3, #1
 8008a98:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	fb02 f303 	mul.w	r3, r2, r3
 8008ab0:	021b      	lsls	r3, r3, #8
 8008ab2:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ab6:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	4a20      	ldr	r2, [pc, #128]	; (8008b3c <HAL_SAI_Init+0x238>)
 8008abc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac0:	08da      	lsrs	r2, r3, #3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008ac6:	6979      	ldr	r1, [r7, #20]
 8008ac8:	4b1c      	ldr	r3, [pc, #112]	; (8008b3c <HAL_SAI_Init+0x238>)
 8008aca:	fba3 2301 	umull	r2, r3, r3, r1
 8008ace:	08da      	lsrs	r2, r3, #3
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	1aca      	subs	r2, r1, r3
 8008ada:	2a08      	cmp	r2, #8
 8008adc:	d904      	bls.n	8008ae8 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	1c5a      	adds	r2, r3, #1
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d104      	bne.n	8008afa <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a1b      	ldr	r3, [r3, #32]
 8008af4:	085a      	lsrs	r2, r3, #1
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <HAL_SAI_Init+0x206>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d109      	bne.n	8008b1e <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d101      	bne.n	8008b16 <HAL_SAI_Init+0x212>
 8008b12:	2300      	movs	r3, #0
 8008b14:	e001      	b.n	8008b1a <HAL_SAI_Init+0x216>
 8008b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b1a:	623b      	str	r3, [r7, #32]
 8008b1c:	e012      	b.n	8008b44 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d10c      	bne.n	8008b40 <HAL_SAI_Init+0x23c>
 8008b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b2a:	e00a      	b.n	8008b42 <HAL_SAI_Init+0x23e>
 8008b2c:	40015404 	.word	0x40015404
 8008b30:	40015424 	.word	0x40015424
 8008b34:	40015400 	.word	0x40015400
 8008b38:	40015800 	.word	0x40015800
 8008b3c:	cccccccd 	.word	0xcccccccd
 8008b40:	2300      	movs	r3, #0
 8008b42:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6819      	ldr	r1, [r3, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	4b58      	ldr	r3, [pc, #352]	; (8008cb0 <HAL_SAI_Init+0x3ac>)
 8008b50:	400b      	ands	r3, r1
 8008b52:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6819      	ldr	r1, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b62:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008b68:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b6e:	431a      	orrs	r2, r3
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8008b7c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008b88:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	051b      	lsls	r3, r3, #20
 8008b90:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008b96:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	430a      	orrs	r2, r1
 8008b9e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	6812      	ldr	r2, [r2, #0]
 8008baa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008bae:	f023 030f 	bic.w	r3, r3, #15
 8008bb2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	6859      	ldr	r1, [r3, #4]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	699a      	ldr	r2, [r3, #24]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc2:	431a      	orrs	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc8:	431a      	orrs	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6899      	ldr	r1, [r3, #8]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	4b35      	ldr	r3, [pc, #212]	; (8008cb4 <HAL_SAI_Init+0x3b0>)
 8008bde:	400b      	ands	r3, r1
 8008be0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	6899      	ldr	r1, [r3, #8]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bec:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008bf2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8008bf8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8008bfe:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c04:	3b01      	subs	r3, #1
 8008c06:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008c08:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	430a      	orrs	r2, r1
 8008c10:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68d9      	ldr	r1, [r3, #12]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008c20:	400b      	ands	r3, r1
 8008c22:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68d9      	ldr	r1, [r3, #12]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c32:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c38:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008c3a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c40:	3b01      	subs	r3, #1
 8008c42:	021b      	lsls	r3, r3, #8
 8008c44:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a19      	ldr	r2, [pc, #100]	; (8008cb8 <HAL_SAI_Init+0x3b4>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d119      	bne.n	8008c8c <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008c58:	4b18      	ldr	r3, [pc, #96]	; (8008cbc <HAL_SAI_Init+0x3b8>)
 8008c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5c:	4a17      	ldr	r2, [pc, #92]	; (8008cbc <HAL_SAI_Init+0x3b8>)
 8008c5e:	f023 0301 	bic.w	r3, r3, #1
 8008c62:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d10e      	bne.n	8008c8c <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c76:	3b01      	subs	r3, #1
 8008c78:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008c7a:	4910      	ldr	r1, [pc, #64]	; (8008cbc <HAL_SAI_Init+0x3b8>)
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8008c80:	4b0e      	ldr	r3, [pc, #56]	; (8008cbc <HAL_SAI_Init+0x3b8>)
 8008c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c84:	4a0d      	ldr	r2, [pc, #52]	; (8008cbc <HAL_SAI_Init+0x3b8>)
 8008c86:	f043 0301 	orr.w	r3, r3, #1
 8008c8a:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3728      	adds	r7, #40	; 0x28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	f805c010 	.word	0xf805c010
 8008cb4:	fff88000 	.word	0xfff88000
 8008cb8:	40015404 	.word	0x40015404
 8008cbc:	40015400 	.word	0x40015400

08008cc0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
 8008ccc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <SAI_InitI2S+0x2e>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d103      	bne.n	8008cf6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	64da      	str	r2, [r3, #76]	; 0x4c
 8008cf4:	e002      	b.n	8008cfc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008d02:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d0a:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	683a      	ldr	r2, [r7, #0]
 8008d16:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e077      	b.n	8008e16 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d107      	bne.n	8008d3c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008d38:	661a      	str	r2, [r3, #96]	; 0x60
 8008d3a:	e006      	b.n	8008d4a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008d42:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2200      	movs	r2, #0
 8008d48:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d84f      	bhi.n	8008df0 <SAI_InitI2S+0x130>
 8008d50:	a201      	add	r2, pc, #4	; (adr r2, 8008d58 <SAI_InitI2S+0x98>)
 8008d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d56:	bf00      	nop
 8008d58:	08008d69 	.word	0x08008d69
 8008d5c:	08008d8b 	.word	0x08008d8b
 8008d60:	08008dad 	.word	0x08008dad
 8008d64:	08008dcf 	.word	0x08008dcf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2280      	movs	r2, #128	; 0x80
 8008d6c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	085b      	lsrs	r3, r3, #1
 8008d72:	015a      	lsls	r2, r3, #5
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	085b      	lsrs	r3, r3, #1
 8008d7c:	011a      	lsls	r2, r3, #4
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2240      	movs	r2, #64	; 0x40
 8008d86:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008d88:	e035      	b.n	8008df6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2280      	movs	r2, #128	; 0x80
 8008d8e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	085b      	lsrs	r3, r3, #1
 8008d94:	019a      	lsls	r2, r3, #6
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	085b      	lsrs	r3, r3, #1
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2280      	movs	r2, #128	; 0x80
 8008da8:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008daa:	e024      	b.n	8008df6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	22c0      	movs	r2, #192	; 0xc0
 8008db0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	085b      	lsrs	r3, r3, #1
 8008db6:	019a      	lsls	r2, r3, #6
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	085b      	lsrs	r3, r3, #1
 8008dc0:	015a      	lsls	r2, r3, #5
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2280      	movs	r2, #128	; 0x80
 8008dca:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008dcc:	e013      	b.n	8008df6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	22e0      	movs	r2, #224	; 0xe0
 8008dd2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	085b      	lsrs	r3, r3, #1
 8008dd8:	019a      	lsls	r2, r3, #6
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	085b      	lsrs	r3, r3, #1
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2280      	movs	r2, #128	; 0x80
 8008dec:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008dee:	e002      	b.n	8008df6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	75fb      	strb	r3, [r7, #23]
      break;
 8008df4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d10b      	bne.n	8008e14 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d102      	bne.n	8008e08 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2210      	movs	r2, #16
 8008e06:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d102      	bne.n	8008e14 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2208      	movs	r2, #8
 8008e12:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 8008e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	371c      	adds	r7, #28
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop

08008e24 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
 8008e30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <SAI_InitPCM+0x2e>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d103      	bne.n	8008e5a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2201      	movs	r2, #1
 8008e56:	64da      	str	r2, [r3, #76]	; 0x4c
 8008e58:	e002      	b.n	8008e60 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008e6c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008e74:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e88:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	2b04      	cmp	r3, #4
 8008e8e:	d103      	bne.n	8008e98 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2201      	movs	r2, #1
 8008e94:	655a      	str	r2, [r3, #84]	; 0x54
 8008e96:	e002      	b.n	8008e9e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	220d      	movs	r2, #13
 8008e9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b03      	cmp	r3, #3
 8008ea2:	d837      	bhi.n	8008f14 <SAI_InitPCM+0xf0>
 8008ea4:	a201      	add	r2, pc, #4	; (adr r2, 8008eac <SAI_InitPCM+0x88>)
 8008ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eaa:	bf00      	nop
 8008eac:	08008ebd 	.word	0x08008ebd
 8008eb0:	08008ed3 	.word	0x08008ed3
 8008eb4:	08008ee9 	.word	0x08008ee9
 8008eb8:	08008eff 	.word	0x08008eff
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2280      	movs	r2, #128	; 0x80
 8008ec0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	011a      	lsls	r2, r3, #4
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2240      	movs	r2, #64	; 0x40
 8008ece:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008ed0:	e023      	b.n	8008f1a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2280      	movs	r2, #128	; 0x80
 8008ed6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2280      	movs	r2, #128	; 0x80
 8008ee4:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008ee6:	e018      	b.n	8008f1a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	22c0      	movs	r2, #192	; 0xc0
 8008eec:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2280      	movs	r2, #128	; 0x80
 8008efa:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008efc:	e00d      	b.n	8008f1a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	22e0      	movs	r2, #224	; 0xe0
 8008f02:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2280      	movs	r2, #128	; 0x80
 8008f10:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008f12:	e002      	b.n	8008f1a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	75fb      	strb	r3, [r7, #23]
      break;
 8008f18:	bf00      	nop
  }

  return status;
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	371c      	adds	r7, #28
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008f30:	4b18      	ldr	r3, [pc, #96]	; (8008f94 <SAI_Disable+0x6c>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a18      	ldr	r2, [pc, #96]	; (8008f98 <SAI_Disable+0x70>)
 8008f36:	fba2 2303 	umull	r2, r3, r2, r3
 8008f3a:	0b1b      	lsrs	r3, r3, #12
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008f52:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10a      	bne.n	8008f70 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	72fb      	strb	r3, [r7, #11]
      break;
 8008f6e:	e009      	b.n	8008f84 <SAI_Disable+0x5c>
    }
    count--;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	3b01      	subs	r3, #1
 8008f74:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e7      	bne.n	8008f54 <SAI_Disable+0x2c>

  return status;
 8008f84:	7afb      	ldrb	r3, [r7, #11]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	20000010 	.word	0x20000010
 8008f98:	95cbec1b 	.word	0x95cbec1b

08008f9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d101      	bne.n	8008fae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e095      	b.n	80090da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d108      	bne.n	8008fc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fbe:	d009      	beq.n	8008fd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	61da      	str	r2, [r3, #28]
 8008fc6:	e005      	b.n	8008fd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d106      	bne.n	8008ff4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7fa fe6c 	bl	8003ccc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800900a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009014:	d902      	bls.n	800901c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009016:	2300      	movs	r3, #0
 8009018:	60fb      	str	r3, [r7, #12]
 800901a:	e002      	b.n	8009022 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800901c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009020:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800902a:	d007      	beq.n	800903c <HAL_SPI_Init+0xa0>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009034:	d002      	beq.n	800903c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800904c:	431a      	orrs	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	f003 0302 	and.w	r3, r3, #2
 8009056:	431a      	orrs	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	695b      	ldr	r3, [r3, #20]
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	431a      	orrs	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800906a:	431a      	orrs	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009074:	431a      	orrs	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a1b      	ldr	r3, [r3, #32]
 800907a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800907e:	ea42 0103 	orr.w	r1, r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009086:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	430a      	orrs	r2, r1
 8009090:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	0c1b      	lsrs	r3, r3, #16
 8009098:	f003 0204 	and.w	r2, r3, #4
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a0:	f003 0310 	and.w	r3, r3, #16
 80090a4:	431a      	orrs	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090aa:	f003 0308 	and.w	r3, r3, #8
 80090ae:	431a      	orrs	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80090b8:	ea42 0103 	orr.w	r1, r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b088      	sub	sp, #32
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	60f8      	str	r0, [r7, #12]
 80090ea:	60b9      	str	r1, [r7, #8]
 80090ec:	603b      	str	r3, [r7, #0]
 80090ee:	4613      	mov	r3, r2
 80090f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d101      	bne.n	8009104 <HAL_SPI_Transmit+0x22>
 8009100:	2302      	movs	r3, #2
 8009102:	e15f      	b.n	80093c4 <HAL_SPI_Transmit+0x2e2>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800910c:	f7fb f88c 	bl	8004228 <HAL_GetTick>
 8009110:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009112:	88fb      	ldrh	r3, [r7, #6]
 8009114:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b01      	cmp	r3, #1
 8009120:	d002      	beq.n	8009128 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009122:	2302      	movs	r3, #2
 8009124:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009126:	e148      	b.n	80093ba <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d002      	beq.n	8009134 <HAL_SPI_Transmit+0x52>
 800912e:	88fb      	ldrh	r3, [r7, #6]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d102      	bne.n	800913a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009138:	e13f      	b.n	80093ba <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2203      	movs	r2, #3
 800913e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	88fa      	ldrh	r2, [r7, #6]
 8009152:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	88fa      	ldrh	r2, [r7, #6]
 8009158:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2200      	movs	r2, #0
 8009164:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009184:	d10f      	bne.n	80091a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009194:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80091a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b0:	2b40      	cmp	r3, #64	; 0x40
 80091b2:	d007      	beq.n	80091c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091cc:	d94f      	bls.n	800926e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <HAL_SPI_Transmit+0xfa>
 80091d6:	8afb      	ldrh	r3, [r7, #22]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d142      	bne.n	8009262 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e0:	881a      	ldrh	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ec:	1c9a      	adds	r2, r3, #2
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	3b01      	subs	r3, #1
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009200:	e02f      	b.n	8009262 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f003 0302 	and.w	r3, r3, #2
 800920c:	2b02      	cmp	r3, #2
 800920e:	d112      	bne.n	8009236 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009214:	881a      	ldrh	r2, [r3, #0]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009220:	1c9a      	adds	r2, r3, #2
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800922a:	b29b      	uxth	r3, r3
 800922c:	3b01      	subs	r3, #1
 800922e:	b29a      	uxth	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009234:	e015      	b.n	8009262 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009236:	f7fa fff7 	bl	8004228 <HAL_GetTick>
 800923a:	4602      	mov	r2, r0
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	429a      	cmp	r2, r3
 8009244:	d803      	bhi.n	800924e <HAL_SPI_Transmit+0x16c>
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924c:	d102      	bne.n	8009254 <HAL_SPI_Transmit+0x172>
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d106      	bne.n	8009262 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8009260:	e0ab      	b.n	80093ba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009266:	b29b      	uxth	r3, r3
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1ca      	bne.n	8009202 <HAL_SPI_Transmit+0x120>
 800926c:	e080      	b.n	8009370 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d002      	beq.n	800927c <HAL_SPI_Transmit+0x19a>
 8009276:	8afb      	ldrh	r3, [r7, #22]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d174      	bne.n	8009366 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009280:	b29b      	uxth	r3, r3
 8009282:	2b01      	cmp	r3, #1
 8009284:	d912      	bls.n	80092ac <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928a:	881a      	ldrh	r2, [r3, #0]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009296:	1c9a      	adds	r2, r3, #2
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	3b02      	subs	r3, #2
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092aa:	e05c      	b.n	8009366 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	330c      	adds	r3, #12
 80092b6:	7812      	ldrb	r2, [r2, #0]
 80092b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	3b01      	subs	r3, #1
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80092d2:	e048      	b.n	8009366 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f003 0302 	and.w	r3, r3, #2
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d12b      	bne.n	800933a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d912      	bls.n	8009312 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f0:	881a      	ldrh	r2, [r3, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fc:	1c9a      	adds	r2, r3, #2
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009306:	b29b      	uxth	r3, r3
 8009308:	3b02      	subs	r3, #2
 800930a:	b29a      	uxth	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009310:	e029      	b.n	8009366 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	330c      	adds	r3, #12
 800931c:	7812      	ldrb	r2, [r2, #0]
 800931e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800932e:	b29b      	uxth	r3, r3
 8009330:	3b01      	subs	r3, #1
 8009332:	b29a      	uxth	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009338:	e015      	b.n	8009366 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800933a:	f7fa ff75 	bl	8004228 <HAL_GetTick>
 800933e:	4602      	mov	r2, r0
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	683a      	ldr	r2, [r7, #0]
 8009346:	429a      	cmp	r2, r3
 8009348:	d803      	bhi.n	8009352 <HAL_SPI_Transmit+0x270>
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009350:	d102      	bne.n	8009358 <HAL_SPI_Transmit+0x276>
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d106      	bne.n	8009366 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8009358:	2303      	movs	r3, #3
 800935a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8009364:	e029      	b.n	80093ba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800936a:	b29b      	uxth	r3, r3
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1b1      	bne.n	80092d4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f000 f947 	bl	8009608 <SPI_EndRxTxTransaction>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2220      	movs	r2, #32
 8009384:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10a      	bne.n	80093a4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800938e:	2300      	movs	r3, #0
 8009390:	613b      	str	r3, [r7, #16]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	613b      	str	r3, [r7, #16]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	613b      	str	r3, [r7, #16]
 80093a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d002      	beq.n	80093b2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	77fb      	strb	r3, [r7, #31]
 80093b0:	e003      	b.n	80093ba <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80093c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3720      	adds	r7, #32
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b088      	sub	sp, #32
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	603b      	str	r3, [r7, #0]
 80093d8:	4613      	mov	r3, r2
 80093da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80093dc:	f7fa ff24 	bl	8004228 <HAL_GetTick>
 80093e0:	4602      	mov	r2, r0
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	1a9b      	subs	r3, r3, r2
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	4413      	add	r3, r2
 80093ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80093ec:	f7fa ff1c 	bl	8004228 <HAL_GetTick>
 80093f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80093f2:	4b39      	ldr	r3, [pc, #228]	; (80094d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	015b      	lsls	r3, r3, #5
 80093f8:	0d1b      	lsrs	r3, r3, #20
 80093fa:	69fa      	ldr	r2, [r7, #28]
 80093fc:	fb02 f303 	mul.w	r3, r2, r3
 8009400:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009402:	e054      	b.n	80094ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940a:	d050      	beq.n	80094ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800940c:	f7fa ff0c 	bl	8004228 <HAL_GetTick>
 8009410:	4602      	mov	r2, r0
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	69fa      	ldr	r2, [r7, #28]
 8009418:	429a      	cmp	r2, r3
 800941a:	d902      	bls.n	8009422 <SPI_WaitFlagStateUntilTimeout+0x56>
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d13d      	bne.n	800949e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	685a      	ldr	r2, [r3, #4]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009430:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800943a:	d111      	bne.n	8009460 <SPI_WaitFlagStateUntilTimeout+0x94>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009444:	d004      	beq.n	8009450 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800944e:	d107      	bne.n	8009460 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800945e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009468:	d10f      	bne.n	800948a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009478:	601a      	str	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009488:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800949a:	2303      	movs	r3, #3
 800949c:	e017      	b.n	80094ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80094a4:	2300      	movs	r3, #0
 80094a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	3b01      	subs	r3, #1
 80094ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	4013      	ands	r3, r2
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	bf0c      	ite	eq
 80094be:	2301      	moveq	r3, #1
 80094c0:	2300      	movne	r3, #0
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	461a      	mov	r2, r3
 80094c6:	79fb      	ldrb	r3, [r7, #7]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d19b      	bne.n	8009404 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3720      	adds	r7, #32
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20000010 	.word	0x20000010

080094dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b08a      	sub	sp, #40	; 0x28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	607a      	str	r2, [r7, #4]
 80094e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80094ea:	2300      	movs	r3, #0
 80094ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80094ee:	f7fa fe9b 	bl	8004228 <HAL_GetTick>
 80094f2:	4602      	mov	r2, r0
 80094f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f6:	1a9b      	subs	r3, r3, r2
 80094f8:	683a      	ldr	r2, [r7, #0]
 80094fa:	4413      	add	r3, r2
 80094fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80094fe:	f7fa fe93 	bl	8004228 <HAL_GetTick>
 8009502:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	330c      	adds	r3, #12
 800950a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800950c:	4b3d      	ldr	r3, [pc, #244]	; (8009604 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	4613      	mov	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	00da      	lsls	r2, r3, #3
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	0d1b      	lsrs	r3, r3, #20
 800951c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800951e:	fb02 f303 	mul.w	r3, r2, r3
 8009522:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009524:	e060      	b.n	80095e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800952c:	d107      	bne.n	800953e <SPI_WaitFifoStateUntilTimeout+0x62>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d104      	bne.n	800953e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	b2db      	uxtb	r3, r3
 800953a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800953c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009544:	d050      	beq.n	80095e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009546:	f7fa fe6f 	bl	8004228 <HAL_GetTick>
 800954a:	4602      	mov	r2, r0
 800954c:	6a3b      	ldr	r3, [r7, #32]
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009552:	429a      	cmp	r2, r3
 8009554:	d902      	bls.n	800955c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009558:	2b00      	cmp	r3, #0
 800955a:	d13d      	bne.n	80095d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800956a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009574:	d111      	bne.n	800959a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800957e:	d004      	beq.n	800958a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009588:	d107      	bne.n	800959a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009598:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800959e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095a2:	d10f      	bne.n	80095c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	e010      	b.n	80095fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80095de:	2300      	movs	r3, #0
 80095e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	3b01      	subs	r3, #1
 80095e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689a      	ldr	r2, [r3, #8]
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	4013      	ands	r3, r2
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d196      	bne.n	8009526 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3728      	adds	r7, #40	; 0x28
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	20000010 	.word	0x20000010

08009608 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af02      	add	r7, sp, #8
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	2200      	movs	r2, #0
 800961c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f7ff ff5b 	bl	80094dc <SPI_WaitFifoStateUntilTimeout>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d007      	beq.n	800963c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009630:	f043 0220 	orr.w	r2, r3, #32
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009638:	2303      	movs	r3, #3
 800963a:	e027      	b.n	800968c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2200      	movs	r2, #0
 8009644:	2180      	movs	r1, #128	; 0x80
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f7ff fec0 	bl	80093cc <SPI_WaitFlagStateUntilTimeout>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d007      	beq.n	8009662 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009656:	f043 0220 	orr.w	r2, r3, #32
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800965e:	2303      	movs	r3, #3
 8009660:	e014      	b.n	800968c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	2200      	movs	r2, #0
 800966a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f7ff ff34 	bl	80094dc <SPI_WaitFifoStateUntilTimeout>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d007      	beq.n	800968a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800967e:	f043 0220 	orr.w	r2, r3, #32
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009686:	2303      	movs	r3, #3
 8009688:	e000      	b.n	800968c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e049      	b.n	800973a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d106      	bne.n	80096c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7fa fb48 	bl	8003d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2202      	movs	r2, #2
 80096c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	3304      	adds	r3, #4
 80096d0:	4619      	mov	r1, r3
 80096d2:	4610      	mov	r0, r2
 80096d4:	f000 fbe2 	bl	8009e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
	...

08009744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009752:	b2db      	uxtb	r3, r3
 8009754:	2b01      	cmp	r3, #1
 8009756:	d001      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	e04f      	b.n	80097fc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2202      	movs	r2, #2
 8009760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68da      	ldr	r2, [r3, #12]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0201 	orr.w	r2, r2, #1
 8009772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a23      	ldr	r2, [pc, #140]	; (8009808 <HAL_TIM_Base_Start_IT+0xc4>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d01d      	beq.n	80097ba <HAL_TIM_Base_Start_IT+0x76>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009786:	d018      	beq.n	80097ba <HAL_TIM_Base_Start_IT+0x76>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a1f      	ldr	r2, [pc, #124]	; (800980c <HAL_TIM_Base_Start_IT+0xc8>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d013      	beq.n	80097ba <HAL_TIM_Base_Start_IT+0x76>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a1e      	ldr	r2, [pc, #120]	; (8009810 <HAL_TIM_Base_Start_IT+0xcc>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d00e      	beq.n	80097ba <HAL_TIM_Base_Start_IT+0x76>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a1c      	ldr	r2, [pc, #112]	; (8009814 <HAL_TIM_Base_Start_IT+0xd0>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d009      	beq.n	80097ba <HAL_TIM_Base_Start_IT+0x76>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a1b      	ldr	r2, [pc, #108]	; (8009818 <HAL_TIM_Base_Start_IT+0xd4>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d004      	beq.n	80097ba <HAL_TIM_Base_Start_IT+0x76>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a19      	ldr	r2, [pc, #100]	; (800981c <HAL_TIM_Base_Start_IT+0xd8>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d115      	bne.n	80097e6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689a      	ldr	r2, [r3, #8]
 80097c0:	4b17      	ldr	r3, [pc, #92]	; (8009820 <HAL_TIM_Base_Start_IT+0xdc>)
 80097c2:	4013      	ands	r3, r2
 80097c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b06      	cmp	r3, #6
 80097ca:	d015      	beq.n	80097f8 <HAL_TIM_Base_Start_IT+0xb4>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097d2:	d011      	beq.n	80097f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f042 0201 	orr.w	r2, r2, #1
 80097e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097e4:	e008      	b.n	80097f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f042 0201 	orr.w	r2, r2, #1
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	e000      	b.n	80097fa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr
 8009808:	40012c00 	.word	0x40012c00
 800980c:	40000400 	.word	0x40000400
 8009810:	40000800 	.word	0x40000800
 8009814:	40000c00 	.word	0x40000c00
 8009818:	40013400 	.word	0x40013400
 800981c:	40014000 	.word	0x40014000
 8009820:	00010007 	.word	0x00010007

08009824 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d101      	bne.n	8009836 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	e049      	b.n	80098ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2b00      	cmp	r3, #0
 8009840:	d106      	bne.n	8009850 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7fa fad4 	bl	8003df8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2202      	movs	r2, #2
 8009854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3304      	adds	r3, #4
 8009860:	4619      	mov	r1, r3
 8009862:	4610      	mov	r0, r2
 8009864:	f000 fb1a 	bl	8009e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
	...

080098d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d109      	bne.n	80098f8 <HAL_TIM_PWM_Start+0x24>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	bf14      	ite	ne
 80098f0:	2301      	movne	r3, #1
 80098f2:	2300      	moveq	r3, #0
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	e03c      	b.n	8009972 <HAL_TIM_PWM_Start+0x9e>
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	2b04      	cmp	r3, #4
 80098fc:	d109      	bne.n	8009912 <HAL_TIM_PWM_Start+0x3e>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009904:	b2db      	uxtb	r3, r3
 8009906:	2b01      	cmp	r3, #1
 8009908:	bf14      	ite	ne
 800990a:	2301      	movne	r3, #1
 800990c:	2300      	moveq	r3, #0
 800990e:	b2db      	uxtb	r3, r3
 8009910:	e02f      	b.n	8009972 <HAL_TIM_PWM_Start+0x9e>
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	2b08      	cmp	r3, #8
 8009916:	d109      	bne.n	800992c <HAL_TIM_PWM_Start+0x58>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800991e:	b2db      	uxtb	r3, r3
 8009920:	2b01      	cmp	r3, #1
 8009922:	bf14      	ite	ne
 8009924:	2301      	movne	r3, #1
 8009926:	2300      	moveq	r3, #0
 8009928:	b2db      	uxtb	r3, r3
 800992a:	e022      	b.n	8009972 <HAL_TIM_PWM_Start+0x9e>
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	2b0c      	cmp	r3, #12
 8009930:	d109      	bne.n	8009946 <HAL_TIM_PWM_Start+0x72>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b01      	cmp	r3, #1
 800993c:	bf14      	ite	ne
 800993e:	2301      	movne	r3, #1
 8009940:	2300      	moveq	r3, #0
 8009942:	b2db      	uxtb	r3, r3
 8009944:	e015      	b.n	8009972 <HAL_TIM_PWM_Start+0x9e>
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	2b10      	cmp	r3, #16
 800994a:	d109      	bne.n	8009960 <HAL_TIM_PWM_Start+0x8c>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b01      	cmp	r3, #1
 8009956:	bf14      	ite	ne
 8009958:	2301      	movne	r3, #1
 800995a:	2300      	moveq	r3, #0
 800995c:	b2db      	uxtb	r3, r3
 800995e:	e008      	b.n	8009972 <HAL_TIM_PWM_Start+0x9e>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009966:	b2db      	uxtb	r3, r3
 8009968:	2b01      	cmp	r3, #1
 800996a:	bf14      	ite	ne
 800996c:	2301      	movne	r3, #1
 800996e:	2300      	moveq	r3, #0
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b00      	cmp	r3, #0
 8009974:	d001      	beq.n	800997a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e09c      	b.n	8009ab4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d104      	bne.n	800998a <HAL_TIM_PWM_Start+0xb6>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2202      	movs	r2, #2
 8009984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009988:	e023      	b.n	80099d2 <HAL_TIM_PWM_Start+0xfe>
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2b04      	cmp	r3, #4
 800998e:	d104      	bne.n	800999a <HAL_TIM_PWM_Start+0xc6>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2202      	movs	r2, #2
 8009994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009998:	e01b      	b.n	80099d2 <HAL_TIM_PWM_Start+0xfe>
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	2b08      	cmp	r3, #8
 800999e:	d104      	bne.n	80099aa <HAL_TIM_PWM_Start+0xd6>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2202      	movs	r2, #2
 80099a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099a8:	e013      	b.n	80099d2 <HAL_TIM_PWM_Start+0xfe>
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	2b0c      	cmp	r3, #12
 80099ae:	d104      	bne.n	80099ba <HAL_TIM_PWM_Start+0xe6>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2202      	movs	r2, #2
 80099b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099b8:	e00b      	b.n	80099d2 <HAL_TIM_PWM_Start+0xfe>
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	2b10      	cmp	r3, #16
 80099be:	d104      	bne.n	80099ca <HAL_TIM_PWM_Start+0xf6>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2202      	movs	r2, #2
 80099c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099c8:	e003      	b.n	80099d2 <HAL_TIM_PWM_Start+0xfe>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2202      	movs	r2, #2
 80099ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2201      	movs	r2, #1
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 fe68 	bl	800a6b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a35      	ldr	r2, [pc, #212]	; (8009abc <HAL_TIM_PWM_Start+0x1e8>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d013      	beq.n	8009a12 <HAL_TIM_PWM_Start+0x13e>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a34      	ldr	r2, [pc, #208]	; (8009ac0 <HAL_TIM_PWM_Start+0x1ec>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d00e      	beq.n	8009a12 <HAL_TIM_PWM_Start+0x13e>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a32      	ldr	r2, [pc, #200]	; (8009ac4 <HAL_TIM_PWM_Start+0x1f0>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d009      	beq.n	8009a12 <HAL_TIM_PWM_Start+0x13e>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a31      	ldr	r2, [pc, #196]	; (8009ac8 <HAL_TIM_PWM_Start+0x1f4>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d004      	beq.n	8009a12 <HAL_TIM_PWM_Start+0x13e>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a2f      	ldr	r2, [pc, #188]	; (8009acc <HAL_TIM_PWM_Start+0x1f8>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d101      	bne.n	8009a16 <HAL_TIM_PWM_Start+0x142>
 8009a12:	2301      	movs	r3, #1
 8009a14:	e000      	b.n	8009a18 <HAL_TIM_PWM_Start+0x144>
 8009a16:	2300      	movs	r3, #0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d007      	beq.n	8009a2c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a2a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a22      	ldr	r2, [pc, #136]	; (8009abc <HAL_TIM_PWM_Start+0x1e8>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d01d      	beq.n	8009a72 <HAL_TIM_PWM_Start+0x19e>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a3e:	d018      	beq.n	8009a72 <HAL_TIM_PWM_Start+0x19e>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a22      	ldr	r2, [pc, #136]	; (8009ad0 <HAL_TIM_PWM_Start+0x1fc>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d013      	beq.n	8009a72 <HAL_TIM_PWM_Start+0x19e>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a21      	ldr	r2, [pc, #132]	; (8009ad4 <HAL_TIM_PWM_Start+0x200>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d00e      	beq.n	8009a72 <HAL_TIM_PWM_Start+0x19e>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a1f      	ldr	r2, [pc, #124]	; (8009ad8 <HAL_TIM_PWM_Start+0x204>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d009      	beq.n	8009a72 <HAL_TIM_PWM_Start+0x19e>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a17      	ldr	r2, [pc, #92]	; (8009ac0 <HAL_TIM_PWM_Start+0x1ec>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d004      	beq.n	8009a72 <HAL_TIM_PWM_Start+0x19e>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a15      	ldr	r2, [pc, #84]	; (8009ac4 <HAL_TIM_PWM_Start+0x1f0>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d115      	bne.n	8009a9e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	689a      	ldr	r2, [r3, #8]
 8009a78:	4b18      	ldr	r3, [pc, #96]	; (8009adc <HAL_TIM_PWM_Start+0x208>)
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2b06      	cmp	r3, #6
 8009a82:	d015      	beq.n	8009ab0 <HAL_TIM_PWM_Start+0x1dc>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a8a:	d011      	beq.n	8009ab0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f042 0201 	orr.w	r2, r2, #1
 8009a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a9c:	e008      	b.n	8009ab0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f042 0201 	orr.w	r2, r2, #1
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	e000      	b.n	8009ab2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ab0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	40012c00 	.word	0x40012c00
 8009ac0:	40013400 	.word	0x40013400
 8009ac4:	40014000 	.word	0x40014000
 8009ac8:	40014400 	.word	0x40014400
 8009acc:	40014800 	.word	0x40014800
 8009ad0:	40000400 	.word	0x40000400
 8009ad4:	40000800 	.word	0x40000800
 8009ad8:	40000c00 	.word	0x40000c00
 8009adc:	00010007 	.word	0x00010007

08009ae0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009aec:	2300      	movs	r3, #0
 8009aee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d101      	bne.n	8009afe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009afa:	2302      	movs	r3, #2
 8009afc:	e0ff      	b.n	8009cfe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b14      	cmp	r3, #20
 8009b0a:	f200 80f0 	bhi.w	8009cee <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009b0e:	a201      	add	r2, pc, #4	; (adr r2, 8009b14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b14:	08009b69 	.word	0x08009b69
 8009b18:	08009cef 	.word	0x08009cef
 8009b1c:	08009cef 	.word	0x08009cef
 8009b20:	08009cef 	.word	0x08009cef
 8009b24:	08009ba9 	.word	0x08009ba9
 8009b28:	08009cef 	.word	0x08009cef
 8009b2c:	08009cef 	.word	0x08009cef
 8009b30:	08009cef 	.word	0x08009cef
 8009b34:	08009beb 	.word	0x08009beb
 8009b38:	08009cef 	.word	0x08009cef
 8009b3c:	08009cef 	.word	0x08009cef
 8009b40:	08009cef 	.word	0x08009cef
 8009b44:	08009c2b 	.word	0x08009c2b
 8009b48:	08009cef 	.word	0x08009cef
 8009b4c:	08009cef 	.word	0x08009cef
 8009b50:	08009cef 	.word	0x08009cef
 8009b54:	08009c6d 	.word	0x08009c6d
 8009b58:	08009cef 	.word	0x08009cef
 8009b5c:	08009cef 	.word	0x08009cef
 8009b60:	08009cef 	.word	0x08009cef
 8009b64:	08009cad 	.word	0x08009cad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68b9      	ldr	r1, [r7, #8]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 fa2e 	bl	8009fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	699a      	ldr	r2, [r3, #24]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f042 0208 	orr.w	r2, r2, #8
 8009b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	699a      	ldr	r2, [r3, #24]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f022 0204 	bic.w	r2, r2, #4
 8009b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6999      	ldr	r1, [r3, #24]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	691a      	ldr	r2, [r3, #16]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	619a      	str	r2, [r3, #24]
      break;
 8009ba6:	e0a5      	b.n	8009cf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68b9      	ldr	r1, [r7, #8]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 fa9e 	bl	800a0f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	699a      	ldr	r2, [r3, #24]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	699a      	ldr	r2, [r3, #24]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6999      	ldr	r1, [r3, #24]
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	021a      	lsls	r2, r3, #8
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	430a      	orrs	r2, r1
 8009be6:	619a      	str	r2, [r3, #24]
      break;
 8009be8:	e084      	b.n	8009cf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68b9      	ldr	r1, [r7, #8]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 fb07 	bl	800a204 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	69da      	ldr	r2, [r3, #28]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f042 0208 	orr.w	r2, r2, #8
 8009c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	69da      	ldr	r2, [r3, #28]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f022 0204 	bic.w	r2, r2, #4
 8009c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	69d9      	ldr	r1, [r3, #28]
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	691a      	ldr	r2, [r3, #16]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	61da      	str	r2, [r3, #28]
      break;
 8009c28:	e064      	b.n	8009cf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68b9      	ldr	r1, [r7, #8]
 8009c30:	4618      	mov	r0, r3
 8009c32:	f000 fb6f 	bl	800a314 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	69da      	ldr	r2, [r3, #28]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	69da      	ldr	r2, [r3, #28]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	69d9      	ldr	r1, [r3, #28]
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	691b      	ldr	r3, [r3, #16]
 8009c60:	021a      	lsls	r2, r3, #8
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	430a      	orrs	r2, r1
 8009c68:	61da      	str	r2, [r3, #28]
      break;
 8009c6a:	e043      	b.n	8009cf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68b9      	ldr	r1, [r7, #8]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 fbb8 	bl	800a3e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f042 0208 	orr.w	r2, r2, #8
 8009c86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f022 0204 	bic.w	r2, r2, #4
 8009c96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	691a      	ldr	r2, [r3, #16]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009caa:	e023      	b.n	8009cf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68b9      	ldr	r1, [r7, #8]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f000 fbfc 	bl	800a4b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	021a      	lsls	r2, r3, #8
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	430a      	orrs	r2, r1
 8009cea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009cec:	e002      	b.n	8009cf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8009cf2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3718      	adds	r7, #24
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop

08009d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d101      	bne.n	8009d24 <HAL_TIM_ConfigClockSource+0x1c>
 8009d20:	2302      	movs	r3, #2
 8009d22:	e0b6      	b.n	8009e92 <HAL_TIM_ConfigClockSource+0x18a>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2202      	movs	r2, #2
 8009d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d60:	d03e      	beq.n	8009de0 <HAL_TIM_ConfigClockSource+0xd8>
 8009d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d66:	f200 8087 	bhi.w	8009e78 <HAL_TIM_ConfigClockSource+0x170>
 8009d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d6e:	f000 8086 	beq.w	8009e7e <HAL_TIM_ConfigClockSource+0x176>
 8009d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d76:	d87f      	bhi.n	8009e78 <HAL_TIM_ConfigClockSource+0x170>
 8009d78:	2b70      	cmp	r3, #112	; 0x70
 8009d7a:	d01a      	beq.n	8009db2 <HAL_TIM_ConfigClockSource+0xaa>
 8009d7c:	2b70      	cmp	r3, #112	; 0x70
 8009d7e:	d87b      	bhi.n	8009e78 <HAL_TIM_ConfigClockSource+0x170>
 8009d80:	2b60      	cmp	r3, #96	; 0x60
 8009d82:	d050      	beq.n	8009e26 <HAL_TIM_ConfigClockSource+0x11e>
 8009d84:	2b60      	cmp	r3, #96	; 0x60
 8009d86:	d877      	bhi.n	8009e78 <HAL_TIM_ConfigClockSource+0x170>
 8009d88:	2b50      	cmp	r3, #80	; 0x50
 8009d8a:	d03c      	beq.n	8009e06 <HAL_TIM_ConfigClockSource+0xfe>
 8009d8c:	2b50      	cmp	r3, #80	; 0x50
 8009d8e:	d873      	bhi.n	8009e78 <HAL_TIM_ConfigClockSource+0x170>
 8009d90:	2b40      	cmp	r3, #64	; 0x40
 8009d92:	d058      	beq.n	8009e46 <HAL_TIM_ConfigClockSource+0x13e>
 8009d94:	2b40      	cmp	r3, #64	; 0x40
 8009d96:	d86f      	bhi.n	8009e78 <HAL_TIM_ConfigClockSource+0x170>
 8009d98:	2b30      	cmp	r3, #48	; 0x30
 8009d9a:	d064      	beq.n	8009e66 <HAL_TIM_ConfigClockSource+0x15e>
 8009d9c:	2b30      	cmp	r3, #48	; 0x30
 8009d9e:	d86b      	bhi.n	8009e78 <HAL_TIM_ConfigClockSource+0x170>
 8009da0:	2b20      	cmp	r3, #32
 8009da2:	d060      	beq.n	8009e66 <HAL_TIM_ConfigClockSource+0x15e>
 8009da4:	2b20      	cmp	r3, #32
 8009da6:	d867      	bhi.n	8009e78 <HAL_TIM_ConfigClockSource+0x170>
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d05c      	beq.n	8009e66 <HAL_TIM_ConfigClockSource+0x15e>
 8009dac:	2b10      	cmp	r3, #16
 8009dae:	d05a      	beq.n	8009e66 <HAL_TIM_ConfigClockSource+0x15e>
 8009db0:	e062      	b.n	8009e78 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009dc2:	f000 fc55 	bl	800a670 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009dd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	609a      	str	r2, [r3, #8]
      break;
 8009dde:	e04f      	b.n	8009e80 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009df0:	f000 fc3e 	bl	800a670 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	689a      	ldr	r2, [r3, #8]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e02:	609a      	str	r2, [r3, #8]
      break;
 8009e04:	e03c      	b.n	8009e80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e12:	461a      	mov	r2, r3
 8009e14:	f000 fbb2 	bl	800a57c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2150      	movs	r1, #80	; 0x50
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 fc0b 	bl	800a63a <TIM_ITRx_SetConfig>
      break;
 8009e24:	e02c      	b.n	8009e80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e32:	461a      	mov	r2, r3
 8009e34:	f000 fbd1 	bl	800a5da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2160      	movs	r1, #96	; 0x60
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 fbfb 	bl	800a63a <TIM_ITRx_SetConfig>
      break;
 8009e44:	e01c      	b.n	8009e80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e52:	461a      	mov	r2, r3
 8009e54:	f000 fb92 	bl	800a57c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2140      	movs	r1, #64	; 0x40
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 fbeb 	bl	800a63a <TIM_ITRx_SetConfig>
      break;
 8009e64:	e00c      	b.n	8009e80 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4619      	mov	r1, r3
 8009e70:	4610      	mov	r0, r2
 8009e72:	f000 fbe2 	bl	800a63a <TIM_ITRx_SetConfig>
      break;
 8009e76:	e003      	b.n	8009e80 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e7c:	e000      	b.n	8009e80 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009e7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
	...

08009e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a40      	ldr	r2, [pc, #256]	; (8009fb0 <TIM_Base_SetConfig+0x114>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d013      	beq.n	8009edc <TIM_Base_SetConfig+0x40>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eba:	d00f      	beq.n	8009edc <TIM_Base_SetConfig+0x40>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a3d      	ldr	r2, [pc, #244]	; (8009fb4 <TIM_Base_SetConfig+0x118>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d00b      	beq.n	8009edc <TIM_Base_SetConfig+0x40>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a3c      	ldr	r2, [pc, #240]	; (8009fb8 <TIM_Base_SetConfig+0x11c>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d007      	beq.n	8009edc <TIM_Base_SetConfig+0x40>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a3b      	ldr	r2, [pc, #236]	; (8009fbc <TIM_Base_SetConfig+0x120>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d003      	beq.n	8009edc <TIM_Base_SetConfig+0x40>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a3a      	ldr	r2, [pc, #232]	; (8009fc0 <TIM_Base_SetConfig+0x124>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d108      	bne.n	8009eee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a2f      	ldr	r2, [pc, #188]	; (8009fb0 <TIM_Base_SetConfig+0x114>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d01f      	beq.n	8009f36 <TIM_Base_SetConfig+0x9a>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009efc:	d01b      	beq.n	8009f36 <TIM_Base_SetConfig+0x9a>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a2c      	ldr	r2, [pc, #176]	; (8009fb4 <TIM_Base_SetConfig+0x118>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d017      	beq.n	8009f36 <TIM_Base_SetConfig+0x9a>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a2b      	ldr	r2, [pc, #172]	; (8009fb8 <TIM_Base_SetConfig+0x11c>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d013      	beq.n	8009f36 <TIM_Base_SetConfig+0x9a>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a2a      	ldr	r2, [pc, #168]	; (8009fbc <TIM_Base_SetConfig+0x120>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d00f      	beq.n	8009f36 <TIM_Base_SetConfig+0x9a>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a29      	ldr	r2, [pc, #164]	; (8009fc0 <TIM_Base_SetConfig+0x124>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d00b      	beq.n	8009f36 <TIM_Base_SetConfig+0x9a>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a28      	ldr	r2, [pc, #160]	; (8009fc4 <TIM_Base_SetConfig+0x128>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d007      	beq.n	8009f36 <TIM_Base_SetConfig+0x9a>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a27      	ldr	r2, [pc, #156]	; (8009fc8 <TIM_Base_SetConfig+0x12c>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d003      	beq.n	8009f36 <TIM_Base_SetConfig+0x9a>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a26      	ldr	r2, [pc, #152]	; (8009fcc <TIM_Base_SetConfig+0x130>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d108      	bne.n	8009f48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	695b      	ldr	r3, [r3, #20]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	689a      	ldr	r2, [r3, #8]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a10      	ldr	r2, [pc, #64]	; (8009fb0 <TIM_Base_SetConfig+0x114>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d00f      	beq.n	8009f94 <TIM_Base_SetConfig+0xf8>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a12      	ldr	r2, [pc, #72]	; (8009fc0 <TIM_Base_SetConfig+0x124>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d00b      	beq.n	8009f94 <TIM_Base_SetConfig+0xf8>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a11      	ldr	r2, [pc, #68]	; (8009fc4 <TIM_Base_SetConfig+0x128>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d007      	beq.n	8009f94 <TIM_Base_SetConfig+0xf8>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a10      	ldr	r2, [pc, #64]	; (8009fc8 <TIM_Base_SetConfig+0x12c>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d003      	beq.n	8009f94 <TIM_Base_SetConfig+0xf8>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a0f      	ldr	r2, [pc, #60]	; (8009fcc <TIM_Base_SetConfig+0x130>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d103      	bne.n	8009f9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	691a      	ldr	r2, [r3, #16]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	615a      	str	r2, [r3, #20]
}
 8009fa2:	bf00      	nop
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	40012c00 	.word	0x40012c00
 8009fb4:	40000400 	.word	0x40000400
 8009fb8:	40000800 	.word	0x40000800
 8009fbc:	40000c00 	.word	0x40000c00
 8009fc0:	40013400 	.word	0x40013400
 8009fc4:	40014000 	.word	0x40014000
 8009fc8:	40014400 	.word	0x40014400
 8009fcc:	40014800 	.word	0x40014800

08009fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b087      	sub	sp, #28
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a1b      	ldr	r3, [r3, #32]
 8009fe4:	f023 0201 	bic.w	r2, r3, #1
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f023 0303 	bic.w	r3, r3, #3
 800a00a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	4313      	orrs	r3, r2
 800a014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f023 0302 	bic.w	r3, r3, #2
 800a01c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	4313      	orrs	r3, r2
 800a026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a2c      	ldr	r2, [pc, #176]	; (800a0dc <TIM_OC1_SetConfig+0x10c>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d00f      	beq.n	800a050 <TIM_OC1_SetConfig+0x80>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a2b      	ldr	r2, [pc, #172]	; (800a0e0 <TIM_OC1_SetConfig+0x110>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d00b      	beq.n	800a050 <TIM_OC1_SetConfig+0x80>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4a2a      	ldr	r2, [pc, #168]	; (800a0e4 <TIM_OC1_SetConfig+0x114>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d007      	beq.n	800a050 <TIM_OC1_SetConfig+0x80>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a29      	ldr	r2, [pc, #164]	; (800a0e8 <TIM_OC1_SetConfig+0x118>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d003      	beq.n	800a050 <TIM_OC1_SetConfig+0x80>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a28      	ldr	r2, [pc, #160]	; (800a0ec <TIM_OC1_SetConfig+0x11c>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d10c      	bne.n	800a06a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	f023 0308 	bic.w	r3, r3, #8
 800a056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	697a      	ldr	r2, [r7, #20]
 800a05e:	4313      	orrs	r3, r2
 800a060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f023 0304 	bic.w	r3, r3, #4
 800a068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a1b      	ldr	r2, [pc, #108]	; (800a0dc <TIM_OC1_SetConfig+0x10c>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d00f      	beq.n	800a092 <TIM_OC1_SetConfig+0xc2>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a1a      	ldr	r2, [pc, #104]	; (800a0e0 <TIM_OC1_SetConfig+0x110>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d00b      	beq.n	800a092 <TIM_OC1_SetConfig+0xc2>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a19      	ldr	r2, [pc, #100]	; (800a0e4 <TIM_OC1_SetConfig+0x114>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d007      	beq.n	800a092 <TIM_OC1_SetConfig+0xc2>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4a18      	ldr	r2, [pc, #96]	; (800a0e8 <TIM_OC1_SetConfig+0x118>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d003      	beq.n	800a092 <TIM_OC1_SetConfig+0xc2>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a17      	ldr	r2, [pc, #92]	; (800a0ec <TIM_OC1_SetConfig+0x11c>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d111      	bne.n	800a0b6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	695b      	ldr	r3, [r3, #20]
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	693a      	ldr	r2, [r7, #16]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	693a      	ldr	r2, [r7, #16]
 800a0ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	685a      	ldr	r2, [r3, #4]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	697a      	ldr	r2, [r7, #20]
 800a0ce:	621a      	str	r2, [r3, #32]
}
 800a0d0:	bf00      	nop
 800a0d2:	371c      	adds	r7, #28
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	40012c00 	.word	0x40012c00
 800a0e0:	40013400 	.word	0x40013400
 800a0e4:	40014000 	.word	0x40014000
 800a0e8:	40014400 	.word	0x40014400
 800a0ec:	40014800 	.word	0x40014800

0800a0f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b087      	sub	sp, #28
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a1b      	ldr	r3, [r3, #32]
 800a0fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a1b      	ldr	r3, [r3, #32]
 800a104:	f023 0210 	bic.w	r2, r3, #16
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a11e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a12a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	021b      	lsls	r3, r3, #8
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	4313      	orrs	r3, r2
 800a136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	f023 0320 	bic.w	r3, r3, #32
 800a13e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	011b      	lsls	r3, r3, #4
 800a146:	697a      	ldr	r2, [r7, #20]
 800a148:	4313      	orrs	r3, r2
 800a14a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a28      	ldr	r2, [pc, #160]	; (800a1f0 <TIM_OC2_SetConfig+0x100>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d003      	beq.n	800a15c <TIM_OC2_SetConfig+0x6c>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a27      	ldr	r2, [pc, #156]	; (800a1f4 <TIM_OC2_SetConfig+0x104>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d10d      	bne.n	800a178 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	011b      	lsls	r3, r3, #4
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a176:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a1d      	ldr	r2, [pc, #116]	; (800a1f0 <TIM_OC2_SetConfig+0x100>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d00f      	beq.n	800a1a0 <TIM_OC2_SetConfig+0xb0>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a1c      	ldr	r2, [pc, #112]	; (800a1f4 <TIM_OC2_SetConfig+0x104>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d00b      	beq.n	800a1a0 <TIM_OC2_SetConfig+0xb0>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a1b      	ldr	r2, [pc, #108]	; (800a1f8 <TIM_OC2_SetConfig+0x108>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d007      	beq.n	800a1a0 <TIM_OC2_SetConfig+0xb0>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a1a      	ldr	r2, [pc, #104]	; (800a1fc <TIM_OC2_SetConfig+0x10c>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d003      	beq.n	800a1a0 <TIM_OC2_SetConfig+0xb0>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a19      	ldr	r2, [pc, #100]	; (800a200 <TIM_OC2_SetConfig+0x110>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d113      	bne.n	800a1c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	695b      	ldr	r3, [r3, #20]
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	693a      	ldr	r2, [r7, #16]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	693a      	ldr	r2, [r7, #16]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	697a      	ldr	r2, [r7, #20]
 800a1e0:	621a      	str	r2, [r3, #32]
}
 800a1e2:	bf00      	nop
 800a1e4:	371c      	adds	r7, #28
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	40012c00 	.word	0x40012c00
 800a1f4:	40013400 	.word	0x40013400
 800a1f8:	40014000 	.word	0x40014000
 800a1fc:	40014400 	.word	0x40014400
 800a200:	40014800 	.word	0x40014800

0800a204 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a204:	b480      	push	{r7}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a1b      	ldr	r3, [r3, #32]
 800a218:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	69db      	ldr	r3, [r3, #28]
 800a22a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f023 0303 	bic.w	r3, r3, #3
 800a23e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	021b      	lsls	r3, r3, #8
 800a258:	697a      	ldr	r2, [r7, #20]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4a27      	ldr	r2, [pc, #156]	; (800a300 <TIM_OC3_SetConfig+0xfc>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d003      	beq.n	800a26e <TIM_OC3_SetConfig+0x6a>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4a26      	ldr	r2, [pc, #152]	; (800a304 <TIM_OC3_SetConfig+0x100>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d10d      	bne.n	800a28a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	021b      	lsls	r3, r3, #8
 800a27c:	697a      	ldr	r2, [r7, #20]
 800a27e:	4313      	orrs	r3, r2
 800a280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a1c      	ldr	r2, [pc, #112]	; (800a300 <TIM_OC3_SetConfig+0xfc>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d00f      	beq.n	800a2b2 <TIM_OC3_SetConfig+0xae>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a1b      	ldr	r2, [pc, #108]	; (800a304 <TIM_OC3_SetConfig+0x100>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d00b      	beq.n	800a2b2 <TIM_OC3_SetConfig+0xae>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4a1a      	ldr	r2, [pc, #104]	; (800a308 <TIM_OC3_SetConfig+0x104>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d007      	beq.n	800a2b2 <TIM_OC3_SetConfig+0xae>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a19      	ldr	r2, [pc, #100]	; (800a30c <TIM_OC3_SetConfig+0x108>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d003      	beq.n	800a2b2 <TIM_OC3_SetConfig+0xae>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4a18      	ldr	r2, [pc, #96]	; (800a310 <TIM_OC3_SetConfig+0x10c>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d113      	bne.n	800a2da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	695b      	ldr	r3, [r3, #20]
 800a2c6:	011b      	lsls	r3, r3, #4
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	011b      	lsls	r3, r3, #4
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	685a      	ldr	r2, [r3, #4]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	697a      	ldr	r2, [r7, #20]
 800a2f2:	621a      	str	r2, [r3, #32]
}
 800a2f4:	bf00      	nop
 800a2f6:	371c      	adds	r7, #28
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	40012c00 	.word	0x40012c00
 800a304:	40013400 	.word	0x40013400
 800a308:	40014000 	.word	0x40014000
 800a30c:	40014400 	.word	0x40014400
 800a310:	40014800 	.word	0x40014800

0800a314 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a314:	b480      	push	{r7}
 800a316:	b087      	sub	sp, #28
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a1b      	ldr	r3, [r3, #32]
 800a328:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	69db      	ldr	r3, [r3, #28]
 800a33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a34e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	021b      	lsls	r3, r3, #8
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	4313      	orrs	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	031b      	lsls	r3, r3, #12
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a18      	ldr	r2, [pc, #96]	; (800a3d4 <TIM_OC4_SetConfig+0xc0>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d00f      	beq.n	800a398 <TIM_OC4_SetConfig+0x84>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a17      	ldr	r2, [pc, #92]	; (800a3d8 <TIM_OC4_SetConfig+0xc4>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d00b      	beq.n	800a398 <TIM_OC4_SetConfig+0x84>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a16      	ldr	r2, [pc, #88]	; (800a3dc <TIM_OC4_SetConfig+0xc8>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d007      	beq.n	800a398 <TIM_OC4_SetConfig+0x84>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a15      	ldr	r2, [pc, #84]	; (800a3e0 <TIM_OC4_SetConfig+0xcc>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d003      	beq.n	800a398 <TIM_OC4_SetConfig+0x84>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a14      	ldr	r2, [pc, #80]	; (800a3e4 <TIM_OC4_SetConfig+0xd0>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d109      	bne.n	800a3ac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a39e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	695b      	ldr	r3, [r3, #20]
 800a3a4:	019b      	lsls	r3, r3, #6
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	697a      	ldr	r2, [r7, #20]
 800a3b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	68fa      	ldr	r2, [r7, #12]
 800a3b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	693a      	ldr	r2, [r7, #16]
 800a3c4:	621a      	str	r2, [r3, #32]
}
 800a3c6:	bf00      	nop
 800a3c8:	371c      	adds	r7, #28
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	40012c00 	.word	0x40012c00
 800a3d8:	40013400 	.word	0x40013400
 800a3dc:	40014000 	.word	0x40014000
 800a3e0:	40014400 	.word	0x40014400
 800a3e4:	40014800 	.word	0x40014800

0800a3e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a1b      	ldr	r3, [r3, #32]
 800a3fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a40e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a41a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	4313      	orrs	r3, r2
 800a424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a42c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	041b      	lsls	r3, r3, #16
 800a434:	693a      	ldr	r2, [r7, #16]
 800a436:	4313      	orrs	r3, r2
 800a438:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a17      	ldr	r2, [pc, #92]	; (800a49c <TIM_OC5_SetConfig+0xb4>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d00f      	beq.n	800a462 <TIM_OC5_SetConfig+0x7a>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a16      	ldr	r2, [pc, #88]	; (800a4a0 <TIM_OC5_SetConfig+0xb8>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d00b      	beq.n	800a462 <TIM_OC5_SetConfig+0x7a>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a15      	ldr	r2, [pc, #84]	; (800a4a4 <TIM_OC5_SetConfig+0xbc>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d007      	beq.n	800a462 <TIM_OC5_SetConfig+0x7a>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a14      	ldr	r2, [pc, #80]	; (800a4a8 <TIM_OC5_SetConfig+0xc0>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d003      	beq.n	800a462 <TIM_OC5_SetConfig+0x7a>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a13      	ldr	r2, [pc, #76]	; (800a4ac <TIM_OC5_SetConfig+0xc4>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d109      	bne.n	800a476 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a468:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	021b      	lsls	r3, r3, #8
 800a470:	697a      	ldr	r2, [r7, #20]
 800a472:	4313      	orrs	r3, r2
 800a474:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	685a      	ldr	r2, [r3, #4]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	621a      	str	r2, [r3, #32]
}
 800a490:	bf00      	nop
 800a492:	371c      	adds	r7, #28
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr
 800a49c:	40012c00 	.word	0x40012c00
 800a4a0:	40013400 	.word	0x40013400
 800a4a4:	40014000 	.word	0x40014000
 800a4a8:	40014400 	.word	0x40014400
 800a4ac:	40014800 	.word	0x40014800

0800a4b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b087      	sub	sp, #28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a1b      	ldr	r3, [r3, #32]
 800a4be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a1b      	ldr	r3, [r3, #32]
 800a4c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a4de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	021b      	lsls	r3, r3, #8
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a4f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	051b      	lsls	r3, r3, #20
 800a4fe:	693a      	ldr	r2, [r7, #16]
 800a500:	4313      	orrs	r3, r2
 800a502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a18      	ldr	r2, [pc, #96]	; (800a568 <TIM_OC6_SetConfig+0xb8>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d00f      	beq.n	800a52c <TIM_OC6_SetConfig+0x7c>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a17      	ldr	r2, [pc, #92]	; (800a56c <TIM_OC6_SetConfig+0xbc>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d00b      	beq.n	800a52c <TIM_OC6_SetConfig+0x7c>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a16      	ldr	r2, [pc, #88]	; (800a570 <TIM_OC6_SetConfig+0xc0>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d007      	beq.n	800a52c <TIM_OC6_SetConfig+0x7c>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a15      	ldr	r2, [pc, #84]	; (800a574 <TIM_OC6_SetConfig+0xc4>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d003      	beq.n	800a52c <TIM_OC6_SetConfig+0x7c>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a14      	ldr	r2, [pc, #80]	; (800a578 <TIM_OC6_SetConfig+0xc8>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d109      	bne.n	800a540 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a532:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	029b      	lsls	r3, r3, #10
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	685a      	ldr	r2, [r3, #4]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	621a      	str	r2, [r3, #32]
}
 800a55a:	bf00      	nop
 800a55c:	371c      	adds	r7, #28
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	40012c00 	.word	0x40012c00
 800a56c:	40013400 	.word	0x40013400
 800a570:	40014000 	.word	0x40014000
 800a574:	40014400 	.word	0x40014400
 800a578:	40014800 	.word	0x40014800

0800a57c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b087      	sub	sp, #28
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6a1b      	ldr	r3, [r3, #32]
 800a58c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6a1b      	ldr	r3, [r3, #32]
 800a592:	f023 0201 	bic.w	r2, r3, #1
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	699b      	ldr	r3, [r3, #24]
 800a59e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	011b      	lsls	r3, r3, #4
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f023 030a 	bic.w	r3, r3, #10
 800a5b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	697a      	ldr	r2, [r7, #20]
 800a5cc:	621a      	str	r2, [r3, #32]
}
 800a5ce:	bf00      	nop
 800a5d0:	371c      	adds	r7, #28
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr

0800a5da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5da:	b480      	push	{r7}
 800a5dc:	b087      	sub	sp, #28
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	60f8      	str	r0, [r7, #12]
 800a5e2:	60b9      	str	r1, [r7, #8]
 800a5e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6a1b      	ldr	r3, [r3, #32]
 800a5f0:	f023 0210 	bic.w	r2, r3, #16
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	699b      	ldr	r3, [r3, #24]
 800a5fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a604:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	031b      	lsls	r3, r3, #12
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a616:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	011b      	lsls	r3, r3, #4
 800a61c:	697a      	ldr	r2, [r7, #20]
 800a61e:	4313      	orrs	r3, r2
 800a620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	693a      	ldr	r2, [r7, #16]
 800a626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	621a      	str	r2, [r3, #32]
}
 800a62e:	bf00      	nop
 800a630:	371c      	adds	r7, #28
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a63a:	b480      	push	{r7}
 800a63c:	b085      	sub	sp, #20
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
 800a642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	4313      	orrs	r3, r2
 800a658:	f043 0307 	orr.w	r3, r3, #7
 800a65c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	609a      	str	r2, [r3, #8]
}
 800a664:	bf00      	nop
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a670:	b480      	push	{r7}
 800a672:	b087      	sub	sp, #28
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]
 800a67c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a68a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	021a      	lsls	r2, r3, #8
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	431a      	orrs	r2, r3
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	4313      	orrs	r3, r2
 800a698:	697a      	ldr	r2, [r7, #20]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	697a      	ldr	r2, [r7, #20]
 800a6a2:	609a      	str	r2, [r3, #8]
}
 800a6a4:	bf00      	nop
 800a6a6:	371c      	adds	r7, #28
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b087      	sub	sp, #28
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	f003 031f 	and.w	r3, r3, #31
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6a1a      	ldr	r2, [r3, #32]
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	43db      	mvns	r3, r3
 800a6d2:	401a      	ands	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6a1a      	ldr	r2, [r3, #32]
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	f003 031f 	and.w	r3, r3, #31
 800a6e2:	6879      	ldr	r1, [r7, #4]
 800a6e4:	fa01 f303 	lsl.w	r3, r1, r3
 800a6e8:	431a      	orrs	r2, r3
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	621a      	str	r2, [r3, #32]
}
 800a6ee:	bf00      	nop
 800a6f0:	371c      	adds	r7, #28
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
	...

0800a6fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d101      	bne.n	800a714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a710:	2302      	movs	r3, #2
 800a712:	e068      	b.n	800a7e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2202      	movs	r2, #2
 800a720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a2e      	ldr	r2, [pc, #184]	; (800a7f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d004      	beq.n	800a748 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a2d      	ldr	r2, [pc, #180]	; (800a7f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d108      	bne.n	800a75a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a74e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	4313      	orrs	r3, r2
 800a758:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a760:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	4313      	orrs	r3, r2
 800a76a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a1e      	ldr	r2, [pc, #120]	; (800a7f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d01d      	beq.n	800a7ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a786:	d018      	beq.n	800a7ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a1b      	ldr	r2, [pc, #108]	; (800a7fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d013      	beq.n	800a7ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a1a      	ldr	r2, [pc, #104]	; (800a800 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d00e      	beq.n	800a7ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a18      	ldr	r2, [pc, #96]	; (800a804 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d009      	beq.n	800a7ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a13      	ldr	r2, [pc, #76]	; (800a7f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d004      	beq.n	800a7ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a14      	ldr	r2, [pc, #80]	; (800a808 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d10c      	bne.n	800a7d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3714      	adds	r7, #20
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	40012c00 	.word	0x40012c00
 800a7f8:	40013400 	.word	0x40013400
 800a7fc:	40000400 	.word	0x40000400
 800a800:	40000800 	.word	0x40000800
 800a804:	40000c00 	.word	0x40000c00
 800a808:	40014000 	.word	0x40014000

0800a80c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a816:	2300      	movs	r3, #0
 800a818:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a820:	2b01      	cmp	r3, #1
 800a822:	d101      	bne.n	800a828 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a824:	2302      	movs	r3, #2
 800a826:	e065      	b.n	800a8f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	4313      	orrs	r3, r2
 800a83c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	4313      	orrs	r3, r2
 800a84a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	4313      	orrs	r3, r2
 800a858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4313      	orrs	r3, r2
 800a866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	691b      	ldr	r3, [r3, #16]
 800a872:	4313      	orrs	r3, r2
 800a874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	695b      	ldr	r3, [r3, #20]
 800a880:	4313      	orrs	r3, r2
 800a882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a88e:	4313      	orrs	r3, r2
 800a890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	699b      	ldr	r3, [r3, #24]
 800a89c:	041b      	lsls	r3, r3, #16
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a16      	ldr	r2, [pc, #88]	; (800a900 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d004      	beq.n	800a8b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a14      	ldr	r2, [pc, #80]	; (800a904 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d115      	bne.n	800a8e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c0:	051b      	lsls	r3, r3, #20
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	69db      	ldr	r3, [r3, #28]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3714      	adds	r7, #20
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	40012c00 	.word	0x40012c00
 800a904:	40013400 	.word	0x40013400

0800a908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d101      	bne.n	800a91a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e042      	b.n	800a9a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a920:	2b00      	cmp	r3, #0
 800a922:	d106      	bne.n	800a932 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7f9 f927 	bl	8003b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2224      	movs	r2, #36	; 0x24
 800a936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f022 0201 	bic.w	r2, r2, #1
 800a948:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d002      	beq.n	800a958 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fbb4 	bl	800b0c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 f8b5 	bl	800aac8 <UART_SetConfig>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b01      	cmp	r3, #1
 800a962:	d101      	bne.n	800a968 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	e01b      	b.n	800a9a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	685a      	ldr	r2, [r3, #4]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689a      	ldr	r2, [r3, #8]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f042 0201 	orr.w	r2, r2, #1
 800a996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 fc33 	bl	800b204 <UART_CheckIdleState>
 800a99e:	4603      	mov	r3, r0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3708      	adds	r7, #8
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b08a      	sub	sp, #40	; 0x28
 800a9ac:	af02      	add	r7, sp, #8
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	603b      	str	r3, [r7, #0]
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9be:	2b20      	cmp	r3, #32
 800a9c0:	d17c      	bne.n	800aabc <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d002      	beq.n	800a9ce <HAL_UART_Transmit+0x26>
 800a9c8:	88fb      	ldrh	r3, [r7, #6]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d101      	bne.n	800a9d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e075      	b.n	800aabe <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2221      	movs	r2, #33	; 0x21
 800a9de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a9e2:	f7f9 fc21 	bl	8004228 <HAL_GetTick>
 800a9e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	88fa      	ldrh	r2, [r7, #6]
 800a9ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	88fa      	ldrh	r2, [r7, #6]
 800a9f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa00:	d108      	bne.n	800aa14 <HAL_UART_Transmit+0x6c>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d104      	bne.n	800aa14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	61bb      	str	r3, [r7, #24]
 800aa12:	e003      	b.n	800aa1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aa1c:	e031      	b.n	800aa82 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	2200      	movs	r2, #0
 800aa26:	2180      	movs	r1, #128	; 0x80
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f000 fc95 	bl	800b358 <UART_WaitOnFlagUntilTimeout>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d005      	beq.n	800aa40 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2220      	movs	r2, #32
 800aa38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	e03e      	b.n	800aabe <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d10b      	bne.n	800aa5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	881a      	ldrh	r2, [r3, #0]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa52:	b292      	uxth	r2, r2
 800aa54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	3302      	adds	r3, #2
 800aa5a:	61bb      	str	r3, [r7, #24]
 800aa5c:	e008      	b.n	800aa70 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	781a      	ldrb	r2, [r3, #0]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	b292      	uxth	r2, r2
 800aa68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d1c7      	bne.n	800aa1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	9300      	str	r3, [sp, #0]
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	2200      	movs	r2, #0
 800aa96:	2140      	movs	r1, #64	; 0x40
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f000 fc5d 	bl	800b358 <UART_WaitOnFlagUntilTimeout>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d005      	beq.n	800aab0 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2220      	movs	r2, #32
 800aaa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800aaac:	2303      	movs	r3, #3
 800aaae:	e006      	b.n	800aabe <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2220      	movs	r2, #32
 800aab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800aab8:	2300      	movs	r3, #0
 800aaba:	e000      	b.n	800aabe <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800aabc:	2302      	movs	r3, #2
  }
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3720      	adds	r7, #32
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
	...

0800aac8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aacc:	b08c      	sub	sp, #48	; 0x30
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	689a      	ldr	r2, [r3, #8]
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	691b      	ldr	r3, [r3, #16]
 800aae0:	431a      	orrs	r2, r3
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	695b      	ldr	r3, [r3, #20]
 800aae6:	431a      	orrs	r2, r3
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	69db      	ldr	r3, [r3, #28]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	4baa      	ldr	r3, [pc, #680]	; (800ada0 <UART_SetConfig+0x2d8>)
 800aaf8:	4013      	ands	r3, r2
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	6812      	ldr	r2, [r2, #0]
 800aafe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab00:	430b      	orrs	r3, r1
 800ab02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	68da      	ldr	r2, [r3, #12]
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	430a      	orrs	r2, r1
 800ab18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	699b      	ldr	r3, [r3, #24]
 800ab1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a9f      	ldr	r2, [pc, #636]	; (800ada4 <UART_SetConfig+0x2dc>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d004      	beq.n	800ab34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab30:	4313      	orrs	r3, r2
 800ab32:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ab3e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ab42:	697a      	ldr	r2, [r7, #20]
 800ab44:	6812      	ldr	r2, [r2, #0]
 800ab46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab48:	430b      	orrs	r3, r1
 800ab4a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab52:	f023 010f 	bic.w	r1, r3, #15
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	430a      	orrs	r2, r1
 800ab60:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a90      	ldr	r2, [pc, #576]	; (800ada8 <UART_SetConfig+0x2e0>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d125      	bne.n	800abb8 <UART_SetConfig+0xf0>
 800ab6c:	4b8f      	ldr	r3, [pc, #572]	; (800adac <UART_SetConfig+0x2e4>)
 800ab6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab72:	f003 0303 	and.w	r3, r3, #3
 800ab76:	2b03      	cmp	r3, #3
 800ab78:	d81a      	bhi.n	800abb0 <UART_SetConfig+0xe8>
 800ab7a:	a201      	add	r2, pc, #4	; (adr r2, 800ab80 <UART_SetConfig+0xb8>)
 800ab7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab80:	0800ab91 	.word	0x0800ab91
 800ab84:	0800aba1 	.word	0x0800aba1
 800ab88:	0800ab99 	.word	0x0800ab99
 800ab8c:	0800aba9 	.word	0x0800aba9
 800ab90:	2301      	movs	r3, #1
 800ab92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab96:	e116      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ab98:	2302      	movs	r3, #2
 800ab9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab9e:	e112      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800aba0:	2304      	movs	r3, #4
 800aba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aba6:	e10e      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800aba8:	2308      	movs	r3, #8
 800abaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abae:	e10a      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800abb0:	2310      	movs	r3, #16
 800abb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abb6:	e106      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a7c      	ldr	r2, [pc, #496]	; (800adb0 <UART_SetConfig+0x2e8>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d138      	bne.n	800ac34 <UART_SetConfig+0x16c>
 800abc2:	4b7a      	ldr	r3, [pc, #488]	; (800adac <UART_SetConfig+0x2e4>)
 800abc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abc8:	f003 030c 	and.w	r3, r3, #12
 800abcc:	2b0c      	cmp	r3, #12
 800abce:	d82d      	bhi.n	800ac2c <UART_SetConfig+0x164>
 800abd0:	a201      	add	r2, pc, #4	; (adr r2, 800abd8 <UART_SetConfig+0x110>)
 800abd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd6:	bf00      	nop
 800abd8:	0800ac0d 	.word	0x0800ac0d
 800abdc:	0800ac2d 	.word	0x0800ac2d
 800abe0:	0800ac2d 	.word	0x0800ac2d
 800abe4:	0800ac2d 	.word	0x0800ac2d
 800abe8:	0800ac1d 	.word	0x0800ac1d
 800abec:	0800ac2d 	.word	0x0800ac2d
 800abf0:	0800ac2d 	.word	0x0800ac2d
 800abf4:	0800ac2d 	.word	0x0800ac2d
 800abf8:	0800ac15 	.word	0x0800ac15
 800abfc:	0800ac2d 	.word	0x0800ac2d
 800ac00:	0800ac2d 	.word	0x0800ac2d
 800ac04:	0800ac2d 	.word	0x0800ac2d
 800ac08:	0800ac25 	.word	0x0800ac25
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac12:	e0d8      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ac14:	2302      	movs	r3, #2
 800ac16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac1a:	e0d4      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ac1c:	2304      	movs	r3, #4
 800ac1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac22:	e0d0      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ac24:	2308      	movs	r3, #8
 800ac26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac2a:	e0cc      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ac2c:	2310      	movs	r3, #16
 800ac2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac32:	e0c8      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a5e      	ldr	r2, [pc, #376]	; (800adb4 <UART_SetConfig+0x2ec>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d125      	bne.n	800ac8a <UART_SetConfig+0x1c2>
 800ac3e:	4b5b      	ldr	r3, [pc, #364]	; (800adac <UART_SetConfig+0x2e4>)
 800ac40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ac48:	2b30      	cmp	r3, #48	; 0x30
 800ac4a:	d016      	beq.n	800ac7a <UART_SetConfig+0x1b2>
 800ac4c:	2b30      	cmp	r3, #48	; 0x30
 800ac4e:	d818      	bhi.n	800ac82 <UART_SetConfig+0x1ba>
 800ac50:	2b20      	cmp	r3, #32
 800ac52:	d00a      	beq.n	800ac6a <UART_SetConfig+0x1a2>
 800ac54:	2b20      	cmp	r3, #32
 800ac56:	d814      	bhi.n	800ac82 <UART_SetConfig+0x1ba>
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d002      	beq.n	800ac62 <UART_SetConfig+0x19a>
 800ac5c:	2b10      	cmp	r3, #16
 800ac5e:	d008      	beq.n	800ac72 <UART_SetConfig+0x1aa>
 800ac60:	e00f      	b.n	800ac82 <UART_SetConfig+0x1ba>
 800ac62:	2300      	movs	r3, #0
 800ac64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac68:	e0ad      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ac6a:	2302      	movs	r3, #2
 800ac6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac70:	e0a9      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ac72:	2304      	movs	r3, #4
 800ac74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac78:	e0a5      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ac7a:	2308      	movs	r3, #8
 800ac7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac80:	e0a1      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ac82:	2310      	movs	r3, #16
 800ac84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac88:	e09d      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a4a      	ldr	r2, [pc, #296]	; (800adb8 <UART_SetConfig+0x2f0>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d125      	bne.n	800ace0 <UART_SetConfig+0x218>
 800ac94:	4b45      	ldr	r3, [pc, #276]	; (800adac <UART_SetConfig+0x2e4>)
 800ac96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ac9e:	2bc0      	cmp	r3, #192	; 0xc0
 800aca0:	d016      	beq.n	800acd0 <UART_SetConfig+0x208>
 800aca2:	2bc0      	cmp	r3, #192	; 0xc0
 800aca4:	d818      	bhi.n	800acd8 <UART_SetConfig+0x210>
 800aca6:	2b80      	cmp	r3, #128	; 0x80
 800aca8:	d00a      	beq.n	800acc0 <UART_SetConfig+0x1f8>
 800acaa:	2b80      	cmp	r3, #128	; 0x80
 800acac:	d814      	bhi.n	800acd8 <UART_SetConfig+0x210>
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d002      	beq.n	800acb8 <UART_SetConfig+0x1f0>
 800acb2:	2b40      	cmp	r3, #64	; 0x40
 800acb4:	d008      	beq.n	800acc8 <UART_SetConfig+0x200>
 800acb6:	e00f      	b.n	800acd8 <UART_SetConfig+0x210>
 800acb8:	2300      	movs	r3, #0
 800acba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acbe:	e082      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800acc0:	2302      	movs	r3, #2
 800acc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acc6:	e07e      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800acc8:	2304      	movs	r3, #4
 800acca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acce:	e07a      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800acd0:	2308      	movs	r3, #8
 800acd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acd6:	e076      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800acd8:	2310      	movs	r3, #16
 800acda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acde:	e072      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a35      	ldr	r2, [pc, #212]	; (800adbc <UART_SetConfig+0x2f4>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d12a      	bne.n	800ad40 <UART_SetConfig+0x278>
 800acea:	4b30      	ldr	r3, [pc, #192]	; (800adac <UART_SetConfig+0x2e4>)
 800acec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acf8:	d01a      	beq.n	800ad30 <UART_SetConfig+0x268>
 800acfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acfe:	d81b      	bhi.n	800ad38 <UART_SetConfig+0x270>
 800ad00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad04:	d00c      	beq.n	800ad20 <UART_SetConfig+0x258>
 800ad06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad0a:	d815      	bhi.n	800ad38 <UART_SetConfig+0x270>
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d003      	beq.n	800ad18 <UART_SetConfig+0x250>
 800ad10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad14:	d008      	beq.n	800ad28 <UART_SetConfig+0x260>
 800ad16:	e00f      	b.n	800ad38 <UART_SetConfig+0x270>
 800ad18:	2300      	movs	r3, #0
 800ad1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad1e:	e052      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ad20:	2302      	movs	r3, #2
 800ad22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad26:	e04e      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ad28:	2304      	movs	r3, #4
 800ad2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad2e:	e04a      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ad30:	2308      	movs	r3, #8
 800ad32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad36:	e046      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ad38:	2310      	movs	r3, #16
 800ad3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad3e:	e042      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a17      	ldr	r2, [pc, #92]	; (800ada4 <UART_SetConfig+0x2dc>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d13a      	bne.n	800adc0 <UART_SetConfig+0x2f8>
 800ad4a:	4b18      	ldr	r3, [pc, #96]	; (800adac <UART_SetConfig+0x2e4>)
 800ad4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ad54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad58:	d01a      	beq.n	800ad90 <UART_SetConfig+0x2c8>
 800ad5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad5e:	d81b      	bhi.n	800ad98 <UART_SetConfig+0x2d0>
 800ad60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad64:	d00c      	beq.n	800ad80 <UART_SetConfig+0x2b8>
 800ad66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad6a:	d815      	bhi.n	800ad98 <UART_SetConfig+0x2d0>
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d003      	beq.n	800ad78 <UART_SetConfig+0x2b0>
 800ad70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad74:	d008      	beq.n	800ad88 <UART_SetConfig+0x2c0>
 800ad76:	e00f      	b.n	800ad98 <UART_SetConfig+0x2d0>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad7e:	e022      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ad80:	2302      	movs	r3, #2
 800ad82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad86:	e01e      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ad88:	2304      	movs	r3, #4
 800ad8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad8e:	e01a      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ad90:	2308      	movs	r3, #8
 800ad92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad96:	e016      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ad98:	2310      	movs	r3, #16
 800ad9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad9e:	e012      	b.n	800adc6 <UART_SetConfig+0x2fe>
 800ada0:	cfff69f3 	.word	0xcfff69f3
 800ada4:	40008000 	.word	0x40008000
 800ada8:	40013800 	.word	0x40013800
 800adac:	40021000 	.word	0x40021000
 800adb0:	40004400 	.word	0x40004400
 800adb4:	40004800 	.word	0x40004800
 800adb8:	40004c00 	.word	0x40004c00
 800adbc:	40005000 	.word	0x40005000
 800adc0:	2310      	movs	r3, #16
 800adc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4aae      	ldr	r2, [pc, #696]	; (800b084 <UART_SetConfig+0x5bc>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	f040 8097 	bne.w	800af00 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800add2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800add6:	2b08      	cmp	r3, #8
 800add8:	d823      	bhi.n	800ae22 <UART_SetConfig+0x35a>
 800adda:	a201      	add	r2, pc, #4	; (adr r2, 800ade0 <UART_SetConfig+0x318>)
 800addc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade0:	0800ae05 	.word	0x0800ae05
 800ade4:	0800ae23 	.word	0x0800ae23
 800ade8:	0800ae0d 	.word	0x0800ae0d
 800adec:	0800ae23 	.word	0x0800ae23
 800adf0:	0800ae13 	.word	0x0800ae13
 800adf4:	0800ae23 	.word	0x0800ae23
 800adf8:	0800ae23 	.word	0x0800ae23
 800adfc:	0800ae23 	.word	0x0800ae23
 800ae00:	0800ae1b 	.word	0x0800ae1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae04:	f7fb ff14 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 800ae08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae0a:	e010      	b.n	800ae2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae0c:	4b9e      	ldr	r3, [pc, #632]	; (800b088 <UART_SetConfig+0x5c0>)
 800ae0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae10:	e00d      	b.n	800ae2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae12:	f7fb fe75 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 800ae16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae18:	e009      	b.n	800ae2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae20:	e005      	b.n	800ae2e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ae22:	2300      	movs	r3, #0
 800ae24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ae2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 8130 	beq.w	800b096 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3a:	4a94      	ldr	r2, [pc, #592]	; (800b08c <UART_SetConfig+0x5c4>)
 800ae3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae40:	461a      	mov	r2, r3
 800ae42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae44:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae48:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	685a      	ldr	r2, [r3, #4]
 800ae4e:	4613      	mov	r3, r2
 800ae50:	005b      	lsls	r3, r3, #1
 800ae52:	4413      	add	r3, r2
 800ae54:	69ba      	ldr	r2, [r7, #24]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d305      	bcc.n	800ae66 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae60:	69ba      	ldr	r2, [r7, #24]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d903      	bls.n	800ae6e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ae6c:	e113      	b.n	800b096 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae70:	2200      	movs	r2, #0
 800ae72:	60bb      	str	r3, [r7, #8]
 800ae74:	60fa      	str	r2, [r7, #12]
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7a:	4a84      	ldr	r2, [pc, #528]	; (800b08c <UART_SetConfig+0x5c4>)
 800ae7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	2200      	movs	r2, #0
 800ae84:	603b      	str	r3, [r7, #0]
 800ae86:	607a      	str	r2, [r7, #4]
 800ae88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae90:	f7f5 feba 	bl	8000c08 <__aeabi_uldivmod>
 800ae94:	4602      	mov	r2, r0
 800ae96:	460b      	mov	r3, r1
 800ae98:	4610      	mov	r0, r2
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	f04f 0200 	mov.w	r2, #0
 800aea0:	f04f 0300 	mov.w	r3, #0
 800aea4:	020b      	lsls	r3, r1, #8
 800aea6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aeaa:	0202      	lsls	r2, r0, #8
 800aeac:	6979      	ldr	r1, [r7, #20]
 800aeae:	6849      	ldr	r1, [r1, #4]
 800aeb0:	0849      	lsrs	r1, r1, #1
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	460c      	mov	r4, r1
 800aeb6:	4605      	mov	r5, r0
 800aeb8:	eb12 0804 	adds.w	r8, r2, r4
 800aebc:	eb43 0905 	adc.w	r9, r3, r5
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	469a      	mov	sl, r3
 800aec8:	4693      	mov	fp, r2
 800aeca:	4652      	mov	r2, sl
 800aecc:	465b      	mov	r3, fp
 800aece:	4640      	mov	r0, r8
 800aed0:	4649      	mov	r1, r9
 800aed2:	f7f5 fe99 	bl	8000c08 <__aeabi_uldivmod>
 800aed6:	4602      	mov	r2, r0
 800aed8:	460b      	mov	r3, r1
 800aeda:	4613      	mov	r3, r2
 800aedc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aede:	6a3b      	ldr	r3, [r7, #32]
 800aee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aee4:	d308      	bcc.n	800aef8 <UART_SetConfig+0x430>
 800aee6:	6a3b      	ldr	r3, [r7, #32]
 800aee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aeec:	d204      	bcs.n	800aef8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	6a3a      	ldr	r2, [r7, #32]
 800aef4:	60da      	str	r2, [r3, #12]
 800aef6:	e0ce      	b.n	800b096 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aefe:	e0ca      	b.n	800b096 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	69db      	ldr	r3, [r3, #28]
 800af04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af08:	d166      	bne.n	800afd8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800af0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af0e:	2b08      	cmp	r3, #8
 800af10:	d827      	bhi.n	800af62 <UART_SetConfig+0x49a>
 800af12:	a201      	add	r2, pc, #4	; (adr r2, 800af18 <UART_SetConfig+0x450>)
 800af14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af18:	0800af3d 	.word	0x0800af3d
 800af1c:	0800af45 	.word	0x0800af45
 800af20:	0800af4d 	.word	0x0800af4d
 800af24:	0800af63 	.word	0x0800af63
 800af28:	0800af53 	.word	0x0800af53
 800af2c:	0800af63 	.word	0x0800af63
 800af30:	0800af63 	.word	0x0800af63
 800af34:	0800af63 	.word	0x0800af63
 800af38:	0800af5b 	.word	0x0800af5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af3c:	f7fb fe78 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 800af40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af42:	e014      	b.n	800af6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af44:	f7fb fe8a 	bl	8006c5c <HAL_RCC_GetPCLK2Freq>
 800af48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af4a:	e010      	b.n	800af6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af4c:	4b4e      	ldr	r3, [pc, #312]	; (800b088 <UART_SetConfig+0x5c0>)
 800af4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af50:	e00d      	b.n	800af6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af52:	f7fb fdd5 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 800af56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af58:	e009      	b.n	800af6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af60:	e005      	b.n	800af6e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800af62:	2300      	movs	r3, #0
 800af64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800af6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af70:	2b00      	cmp	r3, #0
 800af72:	f000 8090 	beq.w	800b096 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7a:	4a44      	ldr	r2, [pc, #272]	; (800b08c <UART_SetConfig+0x5c4>)
 800af7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af80:	461a      	mov	r2, r3
 800af82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af84:	fbb3 f3f2 	udiv	r3, r3, r2
 800af88:	005a      	lsls	r2, r3, #1
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	085b      	lsrs	r3, r3, #1
 800af90:	441a      	add	r2, r3
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	fbb2 f3f3 	udiv	r3, r2, r3
 800af9a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af9c:	6a3b      	ldr	r3, [r7, #32]
 800af9e:	2b0f      	cmp	r3, #15
 800afa0:	d916      	bls.n	800afd0 <UART_SetConfig+0x508>
 800afa2:	6a3b      	ldr	r3, [r7, #32]
 800afa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afa8:	d212      	bcs.n	800afd0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800afaa:	6a3b      	ldr	r3, [r7, #32]
 800afac:	b29b      	uxth	r3, r3
 800afae:	f023 030f 	bic.w	r3, r3, #15
 800afb2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800afb4:	6a3b      	ldr	r3, [r7, #32]
 800afb6:	085b      	lsrs	r3, r3, #1
 800afb8:	b29b      	uxth	r3, r3
 800afba:	f003 0307 	and.w	r3, r3, #7
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	8bfb      	ldrh	r3, [r7, #30]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	8bfa      	ldrh	r2, [r7, #30]
 800afcc:	60da      	str	r2, [r3, #12]
 800afce:	e062      	b.n	800b096 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800afd6:	e05e      	b.n	800b096 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800afd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800afdc:	2b08      	cmp	r3, #8
 800afde:	d828      	bhi.n	800b032 <UART_SetConfig+0x56a>
 800afe0:	a201      	add	r2, pc, #4	; (adr r2, 800afe8 <UART_SetConfig+0x520>)
 800afe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe6:	bf00      	nop
 800afe8:	0800b00d 	.word	0x0800b00d
 800afec:	0800b015 	.word	0x0800b015
 800aff0:	0800b01d 	.word	0x0800b01d
 800aff4:	0800b033 	.word	0x0800b033
 800aff8:	0800b023 	.word	0x0800b023
 800affc:	0800b033 	.word	0x0800b033
 800b000:	0800b033 	.word	0x0800b033
 800b004:	0800b033 	.word	0x0800b033
 800b008:	0800b02b 	.word	0x0800b02b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b00c:	f7fb fe10 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 800b010:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b012:	e014      	b.n	800b03e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b014:	f7fb fe22 	bl	8006c5c <HAL_RCC_GetPCLK2Freq>
 800b018:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b01a:	e010      	b.n	800b03e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b01c:	4b1a      	ldr	r3, [pc, #104]	; (800b088 <UART_SetConfig+0x5c0>)
 800b01e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b020:	e00d      	b.n	800b03e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b022:	f7fb fd6d 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 800b026:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b028:	e009      	b.n	800b03e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b02a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b02e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b030:	e005      	b.n	800b03e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b032:	2300      	movs	r3, #0
 800b034:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b036:	2301      	movs	r3, #1
 800b038:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b03c:	bf00      	nop
    }

    if (pclk != 0U)
 800b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b040:	2b00      	cmp	r3, #0
 800b042:	d028      	beq.n	800b096 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b048:	4a10      	ldr	r2, [pc, #64]	; (800b08c <UART_SetConfig+0x5c4>)
 800b04a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b04e:	461a      	mov	r2, r3
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	fbb3 f2f2 	udiv	r2, r3, r2
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	085b      	lsrs	r3, r3, #1
 800b05c:	441a      	add	r2, r3
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	fbb2 f3f3 	udiv	r3, r2, r3
 800b066:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b068:	6a3b      	ldr	r3, [r7, #32]
 800b06a:	2b0f      	cmp	r3, #15
 800b06c:	d910      	bls.n	800b090 <UART_SetConfig+0x5c8>
 800b06e:	6a3b      	ldr	r3, [r7, #32]
 800b070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b074:	d20c      	bcs.n	800b090 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b076:	6a3b      	ldr	r3, [r7, #32]
 800b078:	b29a      	uxth	r2, r3
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	60da      	str	r2, [r3, #12]
 800b080:	e009      	b.n	800b096 <UART_SetConfig+0x5ce>
 800b082:	bf00      	nop
 800b084:	40008000 	.word	0x40008000
 800b088:	00f42400 	.word	0x00f42400
 800b08c:	08010608 	.word	0x08010608
      }
      else
      {
        ret = HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	2201      	movs	r2, #1
 800b09a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b0b2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3730      	adds	r7, #48	; 0x30
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b0c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0cc:	f003 0308 	and.w	r3, r3, #8
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00a      	beq.n	800b0ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	430a      	orrs	r2, r1
 800b0e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ee:	f003 0301 	and.w	r3, r3, #1
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00a      	beq.n	800b10c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	430a      	orrs	r2, r1
 800b10a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b110:	f003 0302 	and.w	r3, r3, #2
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00a      	beq.n	800b12e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	430a      	orrs	r2, r1
 800b12c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b132:	f003 0304 	and.w	r3, r3, #4
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00a      	beq.n	800b150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	430a      	orrs	r2, r1
 800b14e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b154:	f003 0310 	and.w	r3, r3, #16
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00a      	beq.n	800b172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	430a      	orrs	r2, r1
 800b170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b176:	f003 0320 	and.w	r3, r3, #32
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00a      	beq.n	800b194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	430a      	orrs	r2, r1
 800b192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d01a      	beq.n	800b1d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	430a      	orrs	r2, r1
 800b1b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1be:	d10a      	bne.n	800b1d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	430a      	orrs	r2, r1
 800b1d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00a      	beq.n	800b1f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	430a      	orrs	r2, r1
 800b1f6:	605a      	str	r2, [r3, #4]
  }
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b098      	sub	sp, #96	; 0x60
 800b208:	af02      	add	r7, sp, #8
 800b20a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b214:	f7f9 f808 	bl	8004228 <HAL_GetTick>
 800b218:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 0308 	and.w	r3, r3, #8
 800b224:	2b08      	cmp	r3, #8
 800b226:	d12f      	bne.n	800b288 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b230:	2200      	movs	r2, #0
 800b232:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f88e 	bl	800b358 <UART_WaitOnFlagUntilTimeout>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d022      	beq.n	800b288 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24a:	e853 3f00 	ldrex	r3, [r3]
 800b24e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b256:	653b      	str	r3, [r7, #80]	; 0x50
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	461a      	mov	r2, r3
 800b25e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b260:	647b      	str	r3, [r7, #68]	; 0x44
 800b262:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b264:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b268:	e841 2300 	strex	r3, r2, [r1]
 800b26c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b270:	2b00      	cmp	r3, #0
 800b272:	d1e6      	bne.n	800b242 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2220      	movs	r2, #32
 800b278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b284:	2303      	movs	r3, #3
 800b286:	e063      	b.n	800b350 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f003 0304 	and.w	r3, r3, #4
 800b292:	2b04      	cmp	r3, #4
 800b294:	d149      	bne.n	800b32a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b296:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f857 	bl	800b358 <UART_WaitOnFlagUntilTimeout>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d03c      	beq.n	800b32a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b8:	e853 3f00 	ldrex	r3, [r3]
 800b2bc:	623b      	str	r3, [r7, #32]
   return(result);
 800b2be:	6a3b      	ldr	r3, [r7, #32]
 800b2c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2ce:	633b      	str	r3, [r7, #48]	; 0x30
 800b2d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2d6:	e841 2300 	strex	r3, r2, [r1]
 800b2da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1e6      	bne.n	800b2b0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	3308      	adds	r3, #8
 800b2e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	e853 3f00 	ldrex	r3, [r3]
 800b2f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f023 0301 	bic.w	r3, r3, #1
 800b2f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	3308      	adds	r3, #8
 800b300:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b302:	61fa      	str	r2, [r7, #28]
 800b304:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b306:	69b9      	ldr	r1, [r7, #24]
 800b308:	69fa      	ldr	r2, [r7, #28]
 800b30a:	e841 2300 	strex	r3, r2, [r1]
 800b30e:	617b      	str	r3, [r7, #20]
   return(result);
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1e5      	bne.n	800b2e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2220      	movs	r2, #32
 800b31a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b326:	2303      	movs	r3, #3
 800b328:	e012      	b.n	800b350 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2220      	movs	r2, #32
 800b32e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2220      	movs	r2, #32
 800b336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b34e:	2300      	movs	r3, #0
}
 800b350:	4618      	mov	r0, r3
 800b352:	3758      	adds	r7, #88	; 0x58
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	603b      	str	r3, [r7, #0]
 800b364:	4613      	mov	r3, r2
 800b366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b368:	e049      	b.n	800b3fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b370:	d045      	beq.n	800b3fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b372:	f7f8 ff59 	bl	8004228 <HAL_GetTick>
 800b376:	4602      	mov	r2, r0
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	69ba      	ldr	r2, [r7, #24]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d302      	bcc.n	800b388 <UART_WaitOnFlagUntilTimeout+0x30>
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d101      	bne.n	800b38c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b388:	2303      	movs	r3, #3
 800b38a:	e048      	b.n	800b41e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f003 0304 	and.w	r3, r3, #4
 800b396:	2b00      	cmp	r3, #0
 800b398:	d031      	beq.n	800b3fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	69db      	ldr	r3, [r3, #28]
 800b3a0:	f003 0308 	and.w	r3, r3, #8
 800b3a4:	2b08      	cmp	r3, #8
 800b3a6:	d110      	bne.n	800b3ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2208      	movs	r2, #8
 800b3ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f000 f838 	bl	800b426 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2208      	movs	r2, #8
 800b3ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e029      	b.n	800b41e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	69db      	ldr	r3, [r3, #28]
 800b3d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3d8:	d111      	bne.n	800b3fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b3e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f000 f81e 	bl	800b426 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2220      	movs	r2, #32
 800b3ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b3fa:	2303      	movs	r3, #3
 800b3fc:	e00f      	b.n	800b41e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	69da      	ldr	r2, [r3, #28]
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	4013      	ands	r3, r2
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	bf0c      	ite	eq
 800b40e:	2301      	moveq	r3, #1
 800b410:	2300      	movne	r3, #0
 800b412:	b2db      	uxtb	r3, r3
 800b414:	461a      	mov	r2, r3
 800b416:	79fb      	ldrb	r3, [r7, #7]
 800b418:	429a      	cmp	r2, r3
 800b41a:	d0a6      	beq.n	800b36a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b41c:	2300      	movs	r3, #0
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b426:	b480      	push	{r7}
 800b428:	b095      	sub	sp, #84	; 0x54
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b436:	e853 3f00 	ldrex	r3, [r3]
 800b43a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b442:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	461a      	mov	r2, r3
 800b44a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b44c:	643b      	str	r3, [r7, #64]	; 0x40
 800b44e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b450:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b452:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b454:	e841 2300 	strex	r3, r2, [r1]
 800b458:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1e6      	bne.n	800b42e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	3308      	adds	r3, #8
 800b466:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b468:	6a3b      	ldr	r3, [r7, #32]
 800b46a:	e853 3f00 	ldrex	r3, [r3]
 800b46e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b476:	f023 0301 	bic.w	r3, r3, #1
 800b47a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	3308      	adds	r3, #8
 800b482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b484:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b48a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b48c:	e841 2300 	strex	r3, r2, [r1]
 800b490:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1e3      	bne.n	800b460 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d118      	bne.n	800b4d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	e853 3f00 	ldrex	r3, [r3]
 800b4ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	f023 0310 	bic.w	r3, r3, #16
 800b4b4:	647b      	str	r3, [r7, #68]	; 0x44
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4be:	61bb      	str	r3, [r7, #24]
 800b4c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c2:	6979      	ldr	r1, [r7, #20]
 800b4c4:	69ba      	ldr	r2, [r7, #24]
 800b4c6:	e841 2300 	strex	r3, r2, [r1]
 800b4ca:	613b      	str	r3, [r7, #16]
   return(result);
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1e6      	bne.n	800b4a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2220      	movs	r2, #32
 800b4d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b4e6:	bf00      	nop
 800b4e8:	3754      	adds	r7, #84	; 0x54
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr

0800b4f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b4f2:	b480      	push	{r7}
 800b4f4:	b085      	sub	sp, #20
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b500:	2b01      	cmp	r3, #1
 800b502:	d101      	bne.n	800b508 <HAL_UARTEx_DisableFifoMode+0x16>
 800b504:	2302      	movs	r3, #2
 800b506:	e027      	b.n	800b558 <HAL_UARTEx_DisableFifoMode+0x66>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2224      	movs	r2, #36	; 0x24
 800b514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f022 0201 	bic.w	r2, r2, #1
 800b52e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b536:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2220      	movs	r2, #32
 800b54a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b574:	2b01      	cmp	r3, #1
 800b576:	d101      	bne.n	800b57c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b578:	2302      	movs	r3, #2
 800b57a:	e02d      	b.n	800b5d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2224      	movs	r2, #36	; 0x24
 800b588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f022 0201 	bic.w	r2, r2, #1
 800b5a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	683a      	ldr	r2, [r7, #0]
 800b5b4:	430a      	orrs	r2, r1
 800b5b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f84f 	bl	800b65c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2220      	movs	r2, #32
 800b5ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d101      	bne.n	800b5f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	e02d      	b.n	800b654 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2224      	movs	r2, #36	; 0x24
 800b604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f022 0201 	bic.w	r2, r2, #1
 800b61e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	683a      	ldr	r2, [r7, #0]
 800b630:	430a      	orrs	r2, r1
 800b632:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 f811 	bl	800b65c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68fa      	ldr	r2, [r7, #12]
 800b640:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2220      	movs	r2, #32
 800b646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b085      	sub	sp, #20
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d108      	bne.n	800b67e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2201      	movs	r2, #1
 800b678:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b67c:	e031      	b.n	800b6e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b67e:	2308      	movs	r3, #8
 800b680:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b682:	2308      	movs	r3, #8
 800b684:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	0e5b      	lsrs	r3, r3, #25
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	f003 0307 	and.w	r3, r3, #7
 800b694:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	0f5b      	lsrs	r3, r3, #29
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	f003 0307 	and.w	r3, r3, #7
 800b6a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6a6:	7bbb      	ldrb	r3, [r7, #14]
 800b6a8:	7b3a      	ldrb	r2, [r7, #12]
 800b6aa:	4911      	ldr	r1, [pc, #68]	; (800b6f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b6ac:	5c8a      	ldrb	r2, [r1, r2]
 800b6ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b6b2:	7b3a      	ldrb	r2, [r7, #12]
 800b6b4:	490f      	ldr	r1, [pc, #60]	; (800b6f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b6b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6c4:	7bfb      	ldrb	r3, [r7, #15]
 800b6c6:	7b7a      	ldrb	r2, [r7, #13]
 800b6c8:	4909      	ldr	r1, [pc, #36]	; (800b6f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b6ca:	5c8a      	ldrb	r2, [r1, r2]
 800b6cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b6d0:	7b7a      	ldrb	r2, [r7, #13]
 800b6d2:	4908      	ldr	r1, [pc, #32]	; (800b6f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b6d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b6e2:	bf00      	nop
 800b6e4:	3714      	adds	r7, #20
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	08010620 	.word	0x08010620
 800b6f4:	08010628 	.word	0x08010628

0800b6f8 <arm_mean_f32>:
 800b6f8:	b430      	push	{r4, r5}
 800b6fa:	088d      	lsrs	r5, r1, #2
 800b6fc:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800b770 <arm_mean_f32+0x78>
 800b700:	d018      	beq.n	800b734 <arm_mean_f32+0x3c>
 800b702:	f100 0310 	add.w	r3, r0, #16
 800b706:	462c      	mov	r4, r5
 800b708:	ed53 5a04 	vldr	s11, [r3, #-16]
 800b70c:	ed13 6a03 	vldr	s12, [r3, #-12]
 800b710:	ed53 6a02 	vldr	s13, [r3, #-8]
 800b714:	ed13 7a01 	vldr	s14, [r3, #-4]
 800b718:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b71c:	3c01      	subs	r4, #1
 800b71e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b722:	f103 0310 	add.w	r3, r3, #16
 800b726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b72a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b72e:	d1eb      	bne.n	800b708 <arm_mean_f32+0x10>
 800b730:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b734:	f011 0303 	ands.w	r3, r1, #3
 800b738:	d00f      	beq.n	800b75a <arm_mean_f32+0x62>
 800b73a:	ed90 7a00 	vldr	s14, [r0]
 800b73e:	3b01      	subs	r3, #1
 800b740:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b744:	d009      	beq.n	800b75a <arm_mean_f32+0x62>
 800b746:	ed90 7a01 	vldr	s14, [r0, #4]
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b750:	bf1c      	itt	ne
 800b752:	ed90 7a02 	vldrne	s14, [r0, #8]
 800b756:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800b75a:	ee07 1a10 	vmov	s14, r1
 800b75e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b762:	bc30      	pop	{r4, r5}
 800b764:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b768:	edc2 6a00 	vstr	s13, [r2]
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	00000000 	.word	0x00000000

0800b774 <arm_max_f32>:
 800b774:	f101 3cff 	add.w	ip, r1, #4294967295
 800b778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b77a:	4607      	mov	r7, r0
 800b77c:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800b780:	ecf7 7a01 	vldmia	r7!, {s15}
 800b784:	d060      	beq.n	800b848 <arm_max_f32+0xd4>
 800b786:	2400      	movs	r4, #0
 800b788:	3014      	adds	r0, #20
 800b78a:	4625      	mov	r5, r4
 800b78c:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800b790:	ed10 7a04 	vldr	s14, [r0, #-16]
 800b794:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b79c:	bf48      	it	mi
 800b79e:	eef0 7a47 	vmovmi.f32	s15, s14
 800b7a2:	ed10 7a03 	vldr	s14, [r0, #-12]
 800b7a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7aa:	bf48      	it	mi
 800b7ac:	1c65      	addmi	r5, r4, #1
 800b7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b2:	bf48      	it	mi
 800b7b4:	eef0 7a47 	vmovmi.f32	s15, s14
 800b7b8:	ed10 7a02 	vldr	s14, [r0, #-8]
 800b7bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7c0:	bf48      	it	mi
 800b7c2:	1ca5      	addmi	r5, r4, #2
 800b7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c8:	bf48      	it	mi
 800b7ca:	eef0 7a47 	vmovmi.f32	s15, s14
 800b7ce:	ed10 7a01 	vldr	s14, [r0, #-4]
 800b7d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7d6:	bf48      	it	mi
 800b7d8:	1ce5      	addmi	r5, r4, #3
 800b7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7de:	f104 0404 	add.w	r4, r4, #4
 800b7e2:	bf44      	itt	mi
 800b7e4:	eef0 7a47 	vmovmi.f32	s15, s14
 800b7e8:	4625      	movmi	r5, r4
 800b7ea:	42a6      	cmp	r6, r4
 800b7ec:	f100 0010 	add.w	r0, r0, #16
 800b7f0:	d1ce      	bne.n	800b790 <arm_max_f32+0x1c>
 800b7f2:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800b7f6:	f01c 0003 	ands.w	r0, ip, #3
 800b7fa:	d021      	beq.n	800b840 <arm_max_f32+0xcc>
 800b7fc:	ed97 7a00 	vldr	s14, [r7]
 800b800:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b808:	bfc4      	itt	gt
 800b80a:	eef0 7a47 	vmovgt.f32	s15, s14
 800b80e:	1a0d      	subgt	r5, r1, r0
 800b810:	3801      	subs	r0, #1
 800b812:	d015      	beq.n	800b840 <arm_max_f32+0xcc>
 800b814:	ed97 7a01 	vldr	s14, [r7, #4]
 800b818:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b820:	bf44      	itt	mi
 800b822:	eef0 7a47 	vmovmi.f32	s15, s14
 800b826:	1a0d      	submi	r5, r1, r0
 800b828:	2801      	cmp	r0, #1
 800b82a:	d009      	beq.n	800b840 <arm_max_f32+0xcc>
 800b82c:	ed97 7a02 	vldr	s14, [r7, #8]
 800b830:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b838:	bfc4      	itt	gt
 800b83a:	eef0 7a47 	vmovgt.f32	s15, s14
 800b83e:	4665      	movgt	r5, ip
 800b840:	edc2 7a00 	vstr	s15, [r2]
 800b844:	601d      	str	r5, [r3, #0]
 800b846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b848:	4675      	mov	r5, lr
 800b84a:	e7d4      	b.n	800b7f6 <arm_max_f32+0x82>

0800b84c <arm_rfft_32_fast_init_f32>:
 800b84c:	b178      	cbz	r0, 800b86e <arm_rfft_32_fast_init_f32+0x22>
 800b84e:	b430      	push	{r4, r5}
 800b850:	4908      	ldr	r1, [pc, #32]	; (800b874 <arm_rfft_32_fast_init_f32+0x28>)
 800b852:	4a09      	ldr	r2, [pc, #36]	; (800b878 <arm_rfft_32_fast_init_f32+0x2c>)
 800b854:	2310      	movs	r3, #16
 800b856:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b85a:	8003      	strh	r3, [r0, #0]
 800b85c:	2520      	movs	r5, #32
 800b85e:	2414      	movs	r4, #20
 800b860:	4b06      	ldr	r3, [pc, #24]	; (800b87c <arm_rfft_32_fast_init_f32+0x30>)
 800b862:	8205      	strh	r5, [r0, #16]
 800b864:	8184      	strh	r4, [r0, #12]
 800b866:	6143      	str	r3, [r0, #20]
 800b868:	bc30      	pop	{r4, r5}
 800b86a:	2000      	movs	r0, #0
 800b86c:	4770      	bx	lr
 800b86e:	f04f 30ff 	mov.w	r0, #4294967295
 800b872:	4770      	bx	lr
 800b874:	080115e0 	.word	0x080115e0
 800b878:	08015f18 	.word	0x08015f18
 800b87c:	0801ec98 	.word	0x0801ec98

0800b880 <arm_rfft_64_fast_init_f32>:
 800b880:	b178      	cbz	r0, 800b8a2 <arm_rfft_64_fast_init_f32+0x22>
 800b882:	b430      	push	{r4, r5}
 800b884:	4908      	ldr	r1, [pc, #32]	; (800b8a8 <arm_rfft_64_fast_init_f32+0x28>)
 800b886:	4a09      	ldr	r2, [pc, #36]	; (800b8ac <arm_rfft_64_fast_init_f32+0x2c>)
 800b888:	2320      	movs	r3, #32
 800b88a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b88e:	8003      	strh	r3, [r0, #0]
 800b890:	2540      	movs	r5, #64	; 0x40
 800b892:	2430      	movs	r4, #48	; 0x30
 800b894:	4b06      	ldr	r3, [pc, #24]	; (800b8b0 <arm_rfft_64_fast_init_f32+0x30>)
 800b896:	8205      	strh	r5, [r0, #16]
 800b898:	8184      	strh	r4, [r0, #12]
 800b89a:	6143      	str	r3, [r0, #20]
 800b89c:	bc30      	pop	{r4, r5}
 800b89e:	2000      	movs	r0, #0
 800b8a0:	4770      	bx	lr
 800b8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a6:	4770      	bx	lr
 800b8a8:	08013738 	.word	0x08013738
 800b8ac:	0801a798 	.word	0x0801a798
 800b8b0:	08023518 	.word	0x08023518

0800b8b4 <arm_rfft_256_fast_init_f32>:
 800b8b4:	b180      	cbz	r0, 800b8d8 <arm_rfft_256_fast_init_f32+0x24>
 800b8b6:	b430      	push	{r4, r5}
 800b8b8:	4909      	ldr	r1, [pc, #36]	; (800b8e0 <arm_rfft_256_fast_init_f32+0x2c>)
 800b8ba:	4a0a      	ldr	r2, [pc, #40]	; (800b8e4 <arm_rfft_256_fast_init_f32+0x30>)
 800b8bc:	2380      	movs	r3, #128	; 0x80
 800b8be:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b8c2:	8003      	strh	r3, [r0, #0]
 800b8c4:	f44f 7580 	mov.w	r5, #256	; 0x100
 800b8c8:	24d0      	movs	r4, #208	; 0xd0
 800b8ca:	4b07      	ldr	r3, [pc, #28]	; (800b8e8 <arm_rfft_256_fast_init_f32+0x34>)
 800b8cc:	8205      	strh	r5, [r0, #16]
 800b8ce:	8184      	strh	r4, [r0, #12]
 800b8d0:	6143      	str	r3, [r0, #20]
 800b8d2:	bc30      	pop	{r4, r5}
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	4770      	bx	lr
 800b8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	08011440 	.word	0x08011440
 800b8e4:	08015b18 	.word	0x08015b18
 800b8e8:	0801e898 	.word	0x0801e898

0800b8ec <arm_rfft_512_fast_init_f32>:
 800b8ec:	b190      	cbz	r0, 800b914 <arm_rfft_512_fast_init_f32+0x28>
 800b8ee:	b430      	push	{r4, r5}
 800b8f0:	490a      	ldr	r1, [pc, #40]	; (800b91c <arm_rfft_512_fast_init_f32+0x30>)
 800b8f2:	4a0b      	ldr	r2, [pc, #44]	; (800b920 <arm_rfft_512_fast_init_f32+0x34>)
 800b8f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8f8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b8fc:	8003      	strh	r3, [r0, #0]
 800b8fe:	f44f 7500 	mov.w	r5, #512	; 0x200
 800b902:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800b906:	4b07      	ldr	r3, [pc, #28]	; (800b924 <arm_rfft_512_fast_init_f32+0x38>)
 800b908:	8205      	strh	r5, [r0, #16]
 800b90a:	8184      	strh	r4, [r0, #12]
 800b90c:	6143      	str	r3, [r0, #20]
 800b90e:	bc30      	pop	{r4, r5}
 800b910:	2000      	movs	r0, #0
 800b912:	4770      	bx	lr
 800b914:	f04f 30ff 	mov.w	r0, #4294967295
 800b918:	4770      	bx	lr
 800b91a:	bf00      	nop
 800b91c:	080133c8 	.word	0x080133c8
 800b920:	08019f98 	.word	0x08019f98
 800b924:	08022d18 	.word	0x08022d18

0800b928 <arm_rfft_1024_fast_init_f32>:
 800b928:	b190      	cbz	r0, 800b950 <arm_rfft_1024_fast_init_f32+0x28>
 800b92a:	b430      	push	{r4, r5}
 800b92c:	490a      	ldr	r1, [pc, #40]	; (800b958 <arm_rfft_1024_fast_init_f32+0x30>)
 800b92e:	4a0b      	ldr	r2, [pc, #44]	; (800b95c <arm_rfft_1024_fast_init_f32+0x34>)
 800b930:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b934:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b938:	8003      	strh	r3, [r0, #0]
 800b93a:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800b93e:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800b942:	4b07      	ldr	r3, [pc, #28]	; (800b960 <arm_rfft_1024_fast_init_f32+0x38>)
 800b944:	8205      	strh	r5, [r0, #16]
 800b946:	8184      	strh	r4, [r0, #12]
 800b948:	6143      	str	r3, [r0, #20]
 800b94a:	bc30      	pop	{r4, r5}
 800b94c:	2000      	movs	r0, #0
 800b94e:	4770      	bx	lr
 800b950:	f04f 30ff 	mov.w	r0, #4294967295
 800b954:	4770      	bx	lr
 800b956:	bf00      	nop
 800b958:	08013798 	.word	0x08013798
 800b95c:	0801a898 	.word	0x0801a898
 800b960:	0801b898 	.word	0x0801b898

0800b964 <arm_rfft_2048_fast_init_f32>:
 800b964:	b190      	cbz	r0, 800b98c <arm_rfft_2048_fast_init_f32+0x28>
 800b966:	b430      	push	{r4, r5}
 800b968:	490a      	ldr	r1, [pc, #40]	; (800b994 <arm_rfft_2048_fast_init_f32+0x30>)
 800b96a:	4a0b      	ldr	r2, [pc, #44]	; (800b998 <arm_rfft_2048_fast_init_f32+0x34>)
 800b96c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b970:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b974:	8003      	strh	r3, [r0, #0]
 800b976:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800b97a:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800b97e:	4b07      	ldr	r3, [pc, #28]	; (800b99c <arm_rfft_2048_fast_init_f32+0x38>)
 800b980:	8205      	strh	r5, [r0, #16]
 800b982:	8184      	strh	r4, [r0, #12]
 800b984:	6143      	str	r3, [r0, #20]
 800b986:	bc30      	pop	{r4, r5}
 800b988:	2000      	movs	r0, #0
 800b98a:	4770      	bx	lr
 800b98c:	f04f 30ff 	mov.w	r0, #4294967295
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	08010630 	.word	0x08010630
 800b998:	08013b18 	.word	0x08013b18
 800b99c:	0801c898 	.word	0x0801c898

0800b9a0 <arm_rfft_4096_fast_init_f32>:
 800b9a0:	b190      	cbz	r0, 800b9c8 <arm_rfft_4096_fast_init_f32+0x28>
 800b9a2:	b430      	push	{r4, r5}
 800b9a4:	490a      	ldr	r1, [pc, #40]	; (800b9d0 <arm_rfft_4096_fast_init_f32+0x30>)
 800b9a6:	4a0b      	ldr	r2, [pc, #44]	; (800b9d4 <arm_rfft_4096_fast_init_f32+0x34>)
 800b9a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b9ac:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b9b0:	8003      	strh	r3, [r0, #0]
 800b9b2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800b9b6:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800b9ba:	4b07      	ldr	r3, [pc, #28]	; (800b9d8 <arm_rfft_4096_fast_init_f32+0x38>)
 800b9bc:	8205      	strh	r5, [r0, #16]
 800b9be:	8184      	strh	r4, [r0, #12]
 800b9c0:	6143      	str	r3, [r0, #20]
 800b9c2:	bc30      	pop	{r4, r5}
 800b9c4:	2000      	movs	r0, #0
 800b9c6:	4770      	bx	lr
 800b9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	08011608 	.word	0x08011608
 800b9d4:	08015f98 	.word	0x08015f98
 800b9d8:	0801ed18 	.word	0x0801ed18

0800b9dc <arm_rfft_fast_init_f32>:
 800b9dc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b9e0:	d01f      	beq.n	800ba22 <arm_rfft_fast_init_f32+0x46>
 800b9e2:	d90b      	bls.n	800b9fc <arm_rfft_fast_init_f32+0x20>
 800b9e4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800b9e8:	d019      	beq.n	800ba1e <arm_rfft_fast_init_f32+0x42>
 800b9ea:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800b9ee:	d012      	beq.n	800ba16 <arm_rfft_fast_init_f32+0x3a>
 800b9f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b9f4:	d00d      	beq.n	800ba12 <arm_rfft_fast_init_f32+0x36>
 800b9f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9fa:	4770      	bx	lr
 800b9fc:	2940      	cmp	r1, #64	; 0x40
 800b9fe:	d00c      	beq.n	800ba1a <arm_rfft_fast_init_f32+0x3e>
 800ba00:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ba04:	d003      	beq.n	800ba0e <arm_rfft_fast_init_f32+0x32>
 800ba06:	2920      	cmp	r1, #32
 800ba08:	d1f5      	bne.n	800b9f6 <arm_rfft_fast_init_f32+0x1a>
 800ba0a:	4b07      	ldr	r3, [pc, #28]	; (800ba28 <arm_rfft_fast_init_f32+0x4c>)
 800ba0c:	4718      	bx	r3
 800ba0e:	4b07      	ldr	r3, [pc, #28]	; (800ba2c <arm_rfft_fast_init_f32+0x50>)
 800ba10:	4718      	bx	r3
 800ba12:	4b07      	ldr	r3, [pc, #28]	; (800ba30 <arm_rfft_fast_init_f32+0x54>)
 800ba14:	4718      	bx	r3
 800ba16:	4b07      	ldr	r3, [pc, #28]	; (800ba34 <arm_rfft_fast_init_f32+0x58>)
 800ba18:	4718      	bx	r3
 800ba1a:	4b07      	ldr	r3, [pc, #28]	; (800ba38 <arm_rfft_fast_init_f32+0x5c>)
 800ba1c:	e7f6      	b.n	800ba0c <arm_rfft_fast_init_f32+0x30>
 800ba1e:	4b07      	ldr	r3, [pc, #28]	; (800ba3c <arm_rfft_fast_init_f32+0x60>)
 800ba20:	e7f4      	b.n	800ba0c <arm_rfft_fast_init_f32+0x30>
 800ba22:	4b07      	ldr	r3, [pc, #28]	; (800ba40 <arm_rfft_fast_init_f32+0x64>)
 800ba24:	e7f2      	b.n	800ba0c <arm_rfft_fast_init_f32+0x30>
 800ba26:	bf00      	nop
 800ba28:	0800b84d 	.word	0x0800b84d
 800ba2c:	0800b8b5 	.word	0x0800b8b5
 800ba30:	0800b929 	.word	0x0800b929
 800ba34:	0800b9a1 	.word	0x0800b9a1
 800ba38:	0800b881 	.word	0x0800b881
 800ba3c:	0800b965 	.word	0x0800b965
 800ba40:	0800b8ed 	.word	0x0800b8ed

0800ba44 <stage_rfft_f32>:
 800ba44:	b410      	push	{r4}
 800ba46:	edd1 7a00 	vldr	s15, [r1]
 800ba4a:	ed91 7a01 	vldr	s14, [r1, #4]
 800ba4e:	8804      	ldrh	r4, [r0, #0]
 800ba50:	6940      	ldr	r0, [r0, #20]
 800ba52:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ba56:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ba5a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800ba5e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ba62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba66:	3c01      	subs	r4, #1
 800ba68:	ee26 7a84 	vmul.f32	s14, s13, s8
 800ba6c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ba70:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800ba74:	ed82 7a00 	vstr	s14, [r2]
 800ba78:	edc2 7a01 	vstr	s15, [r2, #4]
 800ba7c:	3010      	adds	r0, #16
 800ba7e:	3210      	adds	r2, #16
 800ba80:	3b08      	subs	r3, #8
 800ba82:	3110      	adds	r1, #16
 800ba84:	ed11 5a02 	vldr	s10, [r1, #-8]
 800ba88:	ed93 7a02 	vldr	s14, [r3, #8]
 800ba8c:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ba90:	edd3 4a03 	vldr	s9, [r3, #12]
 800ba94:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ba98:	ed10 6a01 	vldr	s12, [r0, #-4]
 800ba9c:	ee77 5a45 	vsub.f32	s11, s14, s10
 800baa0:	ee37 7a05 	vadd.f32	s14, s14, s10
 800baa4:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800baa8:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800baac:	ee66 5a25 	vmul.f32	s11, s12, s11
 800bab0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800bab4:	ee37 7a23 	vadd.f32	s14, s14, s7
 800bab8:	ee66 6a85 	vmul.f32	s13, s13, s10
 800babc:	ee26 6a05 	vmul.f32	s12, s12, s10
 800bac0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800bac4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bac8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bacc:	ee27 7a04 	vmul.f32	s14, s14, s8
 800bad0:	ee67 7a84 	vmul.f32	s15, s15, s8
 800bad4:	3c01      	subs	r4, #1
 800bad6:	ed02 7a02 	vstr	s14, [r2, #-8]
 800bada:	ed42 7a01 	vstr	s15, [r2, #-4]
 800bade:	f1a3 0308 	sub.w	r3, r3, #8
 800bae2:	f101 0108 	add.w	r1, r1, #8
 800bae6:	f100 0008 	add.w	r0, r0, #8
 800baea:	f102 0208 	add.w	r2, r2, #8
 800baee:	d1c9      	bne.n	800ba84 <stage_rfft_f32+0x40>
 800baf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baf4:	4770      	bx	lr
 800baf6:	bf00      	nop

0800baf8 <merge_rfft_f32>:
 800baf8:	b410      	push	{r4}
 800bafa:	edd1 7a00 	vldr	s15, [r1]
 800bafe:	edd1 6a01 	vldr	s13, [r1, #4]
 800bb02:	8804      	ldrh	r4, [r0, #0]
 800bb04:	6940      	ldr	r0, [r0, #20]
 800bb06:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb0a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb0e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800bb12:	ee27 7a04 	vmul.f32	s14, s14, s8
 800bb16:	ee67 7a84 	vmul.f32	s15, s15, s8
 800bb1a:	3c01      	subs	r4, #1
 800bb1c:	ed82 7a00 	vstr	s14, [r2]
 800bb20:	edc2 7a01 	vstr	s15, [r2, #4]
 800bb24:	b3dc      	cbz	r4, 800bb9e <merge_rfft_f32+0xa6>
 800bb26:	00e3      	lsls	r3, r4, #3
 800bb28:	3b08      	subs	r3, #8
 800bb2a:	440b      	add	r3, r1
 800bb2c:	3010      	adds	r0, #16
 800bb2e:	3210      	adds	r2, #16
 800bb30:	3110      	adds	r1, #16
 800bb32:	ed11 5a02 	vldr	s10, [r1, #-8]
 800bb36:	ed93 7a02 	vldr	s14, [r3, #8]
 800bb3a:	ed50 6a02 	vldr	s13, [r0, #-8]
 800bb3e:	edd3 4a03 	vldr	s9, [r3, #12]
 800bb42:	ed51 7a01 	vldr	s15, [r1, #-4]
 800bb46:	ed10 6a01 	vldr	s12, [r0, #-4]
 800bb4a:	ee75 5a47 	vsub.f32	s11, s10, s14
 800bb4e:	ee37 7a05 	vadd.f32	s14, s14, s10
 800bb52:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800bb56:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800bb5a:	ee66 5a25 	vmul.f32	s11, s12, s11
 800bb5e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800bb62:	ee37 7a63 	vsub.f32	s14, s14, s7
 800bb66:	ee66 6a85 	vmul.f32	s13, s13, s10
 800bb6a:	ee26 6a05 	vmul.f32	s12, s12, s10
 800bb6e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800bb72:	ee37 7a46 	vsub.f32	s14, s14, s12
 800bb76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb7a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800bb7e:	ee67 7a84 	vmul.f32	s15, s15, s8
 800bb82:	3c01      	subs	r4, #1
 800bb84:	ed02 7a02 	vstr	s14, [r2, #-8]
 800bb88:	ed42 7a01 	vstr	s15, [r2, #-4]
 800bb8c:	f1a3 0308 	sub.w	r3, r3, #8
 800bb90:	f101 0108 	add.w	r1, r1, #8
 800bb94:	f100 0008 	add.w	r0, r0, #8
 800bb98:	f102 0208 	add.w	r2, r2, #8
 800bb9c:	d1c9      	bne.n	800bb32 <merge_rfft_f32+0x3a>
 800bb9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <arm_rfft_fast_f32>:
 800bba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba8:	8a05      	ldrh	r5, [r0, #16]
 800bbaa:	086d      	lsrs	r5, r5, #1
 800bbac:	8005      	strh	r5, [r0, #0]
 800bbae:	4604      	mov	r4, r0
 800bbb0:	4616      	mov	r6, r2
 800bbb2:	461d      	mov	r5, r3
 800bbb4:	b14b      	cbz	r3, 800bbca <arm_rfft_fast_f32+0x26>
 800bbb6:	f7ff ff9f 	bl	800baf8 <merge_rfft_f32>
 800bbba:	462a      	mov	r2, r5
 800bbbc:	4631      	mov	r1, r6
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbc6:	f000 bb33 	b.w	800c230 <arm_cfft_f32>
 800bbca:	460f      	mov	r7, r1
 800bbcc:	461a      	mov	r2, r3
 800bbce:	2301      	movs	r3, #1
 800bbd0:	f000 fb2e 	bl	800c230 <arm_cfft_f32>
 800bbd4:	4632      	mov	r2, r6
 800bbd6:	4639      	mov	r1, r7
 800bbd8:	4620      	mov	r0, r4
 800bbda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbde:	f7ff bf31 	b.w	800ba44 <stage_rfft_f32>
 800bbe2:	bf00      	nop

0800bbe4 <arm_cfft_radix8by2_f32>:
 800bbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe8:	ed2d 8b08 	vpush	{d8-d11}
 800bbec:	4607      	mov	r7, r0
 800bbee:	4608      	mov	r0, r1
 800bbf0:	f8b7 c000 	ldrh.w	ip, [r7]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800bbfa:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800bbfe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800bc02:	f000 80b0 	beq.w	800bd66 <arm_cfft_radix8by2_f32+0x182>
 800bc06:	008c      	lsls	r4, r1, #2
 800bc08:	3410      	adds	r4, #16
 800bc0a:	f100 0310 	add.w	r3, r0, #16
 800bc0e:	1906      	adds	r6, r0, r4
 800bc10:	3210      	adds	r2, #16
 800bc12:	4444      	add	r4, r8
 800bc14:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800bc18:	f108 0510 	add.w	r5, r8, #16
 800bc1c:	ed15 2a04 	vldr	s4, [r5, #-16]
 800bc20:	ed55 2a03 	vldr	s5, [r5, #-12]
 800bc24:	ed54 4a04 	vldr	s9, [r4, #-16]
 800bc28:	ed14 4a03 	vldr	s8, [r4, #-12]
 800bc2c:	ed14 6a02 	vldr	s12, [r4, #-8]
 800bc30:	ed54 5a01 	vldr	s11, [r4, #-4]
 800bc34:	ed53 3a04 	vldr	s7, [r3, #-16]
 800bc38:	ed15 0a02 	vldr	s0, [r5, #-8]
 800bc3c:	ed55 0a01 	vldr	s1, [r5, #-4]
 800bc40:	ed56 6a04 	vldr	s13, [r6, #-16]
 800bc44:	ed16 3a03 	vldr	s6, [r6, #-12]
 800bc48:	ed13 7a03 	vldr	s14, [r3, #-12]
 800bc4c:	ed13 5a02 	vldr	s10, [r3, #-8]
 800bc50:	ed53 7a01 	vldr	s15, [r3, #-4]
 800bc54:	ed16 1a02 	vldr	s2, [r6, #-8]
 800bc58:	ed56 1a01 	vldr	s3, [r6, #-4]
 800bc5c:	ee73 ba82 	vadd.f32	s23, s7, s4
 800bc60:	ee37 ba22 	vadd.f32	s22, s14, s5
 800bc64:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800bc68:	ee33 9a04 	vadd.f32	s18, s6, s8
 800bc6c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800bc70:	ee75 aa00 	vadd.f32	s21, s10, s0
 800bc74:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800bc78:	ee71 8a06 	vadd.f32	s17, s2, s12
 800bc7c:	ed43 ba04 	vstr	s23, [r3, #-16]
 800bc80:	ed03 ba03 	vstr	s22, [r3, #-12]
 800bc84:	ed43 aa02 	vstr	s21, [r3, #-8]
 800bc88:	ed03 aa01 	vstr	s20, [r3, #-4]
 800bc8c:	ed06 8a01 	vstr	s16, [r6, #-4]
 800bc90:	ed46 9a04 	vstr	s19, [r6, #-16]
 800bc94:	ed06 9a03 	vstr	s18, [r6, #-12]
 800bc98:	ed46 8a02 	vstr	s17, [r6, #-8]
 800bc9c:	ee37 7a62 	vsub.f32	s14, s14, s5
 800bca0:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800bca4:	ee34 4a43 	vsub.f32	s8, s8, s6
 800bca8:	ed52 6a03 	vldr	s13, [r2, #-12]
 800bcac:	ed12 3a04 	vldr	s6, [r2, #-16]
 800bcb0:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800bcb4:	ee27 8a26 	vmul.f32	s16, s14, s13
 800bcb8:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800bcbc:	ee23 2a83 	vmul.f32	s4, s7, s6
 800bcc0:	ee64 4a83 	vmul.f32	s9, s9, s6
 800bcc4:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800bcc8:	ee27 7a03 	vmul.f32	s14, s14, s6
 800bccc:	ee64 6a26 	vmul.f32	s13, s8, s13
 800bcd0:	ee24 4a03 	vmul.f32	s8, s8, s6
 800bcd4:	ee37 7a63 	vsub.f32	s14, s14, s7
 800bcd8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800bcdc:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800bce0:	ee32 3a08 	vadd.f32	s6, s4, s16
 800bce4:	ed05 7a03 	vstr	s14, [r5, #-12]
 800bce8:	ed05 3a04 	vstr	s6, [r5, #-16]
 800bcec:	ed04 4a04 	vstr	s8, [r4, #-16]
 800bcf0:	ed44 6a03 	vstr	s13, [r4, #-12]
 800bcf4:	ed12 7a01 	vldr	s14, [r2, #-4]
 800bcf8:	ee76 6a41 	vsub.f32	s13, s12, s2
 800bcfc:	ee35 5a40 	vsub.f32	s10, s10, s0
 800bd00:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800bd04:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bd08:	ed52 5a02 	vldr	s11, [r2, #-8]
 800bd0c:	ee67 3a87 	vmul.f32	s7, s15, s14
 800bd10:	ee66 4a87 	vmul.f32	s9, s13, s14
 800bd14:	ee25 4a25 	vmul.f32	s8, s10, s11
 800bd18:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bd1c:	ee25 5a07 	vmul.f32	s10, s10, s14
 800bd20:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800bd24:	ee26 7a07 	vmul.f32	s14, s12, s14
 800bd28:	ee26 6a25 	vmul.f32	s12, s12, s11
 800bd2c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800bd30:	ee74 5a23 	vadd.f32	s11, s8, s7
 800bd34:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800bd38:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bd3c:	3310      	adds	r3, #16
 800bd3e:	4563      	cmp	r3, ip
 800bd40:	ed45 5a02 	vstr	s11, [r5, #-8]
 800bd44:	f106 0610 	add.w	r6, r6, #16
 800bd48:	ed45 7a01 	vstr	s15, [r5, #-4]
 800bd4c:	f102 0210 	add.w	r2, r2, #16
 800bd50:	ed04 6a02 	vstr	s12, [r4, #-8]
 800bd54:	ed04 7a01 	vstr	s14, [r4, #-4]
 800bd58:	f105 0510 	add.w	r5, r5, #16
 800bd5c:	f104 0410 	add.w	r4, r4, #16
 800bd60:	f47f af5c 	bne.w	800bc1c <arm_cfft_radix8by2_f32+0x38>
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	b28c      	uxth	r4, r1
 800bd68:	4621      	mov	r1, r4
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	f000 fb3c 	bl	800c3e8 <arm_radix8_butterfly_f32>
 800bd70:	ecbd 8b08 	vpop	{d8-d11}
 800bd74:	4621      	mov	r1, r4
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	4640      	mov	r0, r8
 800bd7a:	2302      	movs	r3, #2
 800bd7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd80:	f000 bb32 	b.w	800c3e8 <arm_radix8_butterfly_f32>

0800bd84 <arm_cfft_radix8by4_f32>:
 800bd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd88:	ed2d 8b0a 	vpush	{d8-d12}
 800bd8c:	b08d      	sub	sp, #52	; 0x34
 800bd8e:	460d      	mov	r5, r1
 800bd90:	910b      	str	r1, [sp, #44]	; 0x2c
 800bd92:	8801      	ldrh	r1, [r0, #0]
 800bd94:	6842      	ldr	r2, [r0, #4]
 800bd96:	900a      	str	r0, [sp, #40]	; 0x28
 800bd98:	0849      	lsrs	r1, r1, #1
 800bd9a:	008b      	lsls	r3, r1, #2
 800bd9c:	18ee      	adds	r6, r5, r3
 800bd9e:	18f0      	adds	r0, r6, r3
 800bda0:	edd0 5a00 	vldr	s11, [r0]
 800bda4:	edd5 7a00 	vldr	s15, [r5]
 800bda8:	ed96 7a00 	vldr	s14, [r6]
 800bdac:	edd0 3a01 	vldr	s7, [r0, #4]
 800bdb0:	ed96 4a01 	vldr	s8, [r6, #4]
 800bdb4:	ed95 5a01 	vldr	s10, [r5, #4]
 800bdb8:	9008      	str	r0, [sp, #32]
 800bdba:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800bdbe:	18c7      	adds	r7, r0, r3
 800bdc0:	edd7 4a00 	vldr	s9, [r7]
 800bdc4:	ed97 3a01 	vldr	s6, [r7, #4]
 800bdc8:	9701      	str	r7, [sp, #4]
 800bdca:	ee77 6a06 	vadd.f32	s13, s14, s12
 800bdce:	462c      	mov	r4, r5
 800bdd0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800bdd4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800bdd8:	ee16 ca90 	vmov	ip, s13
 800bddc:	f844 cb08 	str.w	ip, [r4], #8
 800bde0:	ee75 6a23 	vadd.f32	s13, s10, s7
 800bde4:	edd6 5a01 	vldr	s11, [r6, #4]
 800bde8:	edd7 2a01 	vldr	s5, [r7, #4]
 800bdec:	9404      	str	r4, [sp, #16]
 800bdee:	ee35 5a63 	vsub.f32	s10, s10, s7
 800bdf2:	ee74 3a27 	vadd.f32	s7, s8, s15
 800bdf6:	ee36 6a47 	vsub.f32	s12, s12, s14
 800bdfa:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800bdfe:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800be02:	0849      	lsrs	r1, r1, #1
 800be04:	f102 0e08 	add.w	lr, r2, #8
 800be08:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800be0c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800be10:	9109      	str	r1, [sp, #36]	; 0x24
 800be12:	ee35 4a47 	vsub.f32	s8, s10, s14
 800be16:	f1a1 0902 	sub.w	r9, r1, #2
 800be1a:	f8cd e00c 	str.w	lr, [sp, #12]
 800be1e:	4631      	mov	r1, r6
 800be20:	ee13 ea90 	vmov	lr, s7
 800be24:	ee36 6a64 	vsub.f32	s12, s12, s9
 800be28:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800be2c:	4604      	mov	r4, r0
 800be2e:	edc5 5a01 	vstr	s11, [r5, #4]
 800be32:	ee37 7a05 	vadd.f32	s14, s14, s10
 800be36:	f841 eb08 	str.w	lr, [r1], #8
 800be3a:	ee34 5a24 	vadd.f32	s10, s8, s9
 800be3e:	ee16 ea10 	vmov	lr, s12
 800be42:	ed86 5a01 	vstr	s10, [r6, #4]
 800be46:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800be4a:	f844 eb08 	str.w	lr, [r4], #8
 800be4e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800be52:	edc0 6a01 	vstr	s13, [r0, #4]
 800be56:	9405      	str	r4, [sp, #20]
 800be58:	4604      	mov	r4, r0
 800be5a:	ee17 0a90 	vmov	r0, s15
 800be5e:	9106      	str	r1, [sp, #24]
 800be60:	ee37 7a64 	vsub.f32	s14, s14, s9
 800be64:	f102 0110 	add.w	r1, r2, #16
 800be68:	46bc      	mov	ip, r7
 800be6a:	9100      	str	r1, [sp, #0]
 800be6c:	f847 0b08 	str.w	r0, [r7], #8
 800be70:	f102 0118 	add.w	r1, r2, #24
 800be74:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800be78:	9102      	str	r1, [sp, #8]
 800be7a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800be7e:	9007      	str	r0, [sp, #28]
 800be80:	f000 8134 	beq.w	800c0ec <arm_cfft_radix8by4_f32+0x368>
 800be84:	f102 0920 	add.w	r9, r2, #32
 800be88:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800be8c:	9a01      	ldr	r2, [sp, #4]
 800be8e:	f8dd a000 	ldr.w	sl, [sp]
 800be92:	3b0c      	subs	r3, #12
 800be94:	4683      	mov	fp, r0
 800be96:	4463      	add	r3, ip
 800be98:	f105 0e10 	add.w	lr, r5, #16
 800be9c:	f1a4 010c 	sub.w	r1, r4, #12
 800bea0:	f104 0510 	add.w	r5, r4, #16
 800bea4:	f1a6 0c0c 	sub.w	ip, r6, #12
 800bea8:	f1a2 040c 	sub.w	r4, r2, #12
 800beac:	f106 0010 	add.w	r0, r6, #16
 800beb0:	3210      	adds	r2, #16
 800beb2:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800beb6:	ed55 5a02 	vldr	s11, [r5, #-8]
 800beba:	ed50 7a02 	vldr	s15, [r0, #-8]
 800bebe:	ed52 1a02 	vldr	s3, [r2, #-8]
 800bec2:	ed55 6a01 	vldr	s13, [r5, #-4]
 800bec6:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800beca:	ed12 1a01 	vldr	s2, [r2, #-4]
 800bece:	ed10 8a01 	vldr	s16, [r0, #-4]
 800bed2:	ee35 4a25 	vadd.f32	s8, s10, s11
 800bed6:	ee30 6a26 	vadd.f32	s12, s0, s13
 800beda:	ee37 7a84 	vadd.f32	s14, s15, s8
 800bede:	ee30 0a66 	vsub.f32	s0, s0, s13
 800bee2:	ee37 7a21 	vadd.f32	s14, s14, s3
 800bee6:	ee75 5a65 	vsub.f32	s11, s10, s11
 800beea:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800beee:	ed10 7a01 	vldr	s14, [r0, #-4]
 800bef2:	ed52 6a01 	vldr	s13, [r2, #-4]
 800bef6:	ee36 7a07 	vadd.f32	s14, s12, s14
 800befa:	ee78 aa25 	vadd.f32	s21, s16, s11
 800befe:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bf02:	ee70 3a67 	vsub.f32	s7, s0, s15
 800bf06:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800bf0a:	ed94 7a02 	vldr	s14, [r4, #8]
 800bf0e:	ed9c 2a02 	vldr	s4, [ip, #8]
 800bf12:	ed91 ba02 	vldr	s22, [r1, #8]
 800bf16:	edd3 9a02 	vldr	s19, [r3, #8]
 800bf1a:	edd4 2a01 	vldr	s5, [r4, #4]
 800bf1e:	ed9c 9a01 	vldr	s18, [ip, #4]
 800bf22:	ed93 5a01 	vldr	s10, [r3, #4]
 800bf26:	edd1 0a01 	vldr	s1, [r1, #4]
 800bf2a:	ee72 6a07 	vadd.f32	s13, s4, s14
 800bf2e:	ee32 2a47 	vsub.f32	s4, s4, s14
 800bf32:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800bf36:	ee79 4a22 	vadd.f32	s9, s18, s5
 800bf3a:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800bf3e:	ee79 2a62 	vsub.f32	s5, s18, s5
 800bf42:	ed8c 7a02 	vstr	s14, [ip, #8]
 800bf46:	ed91 7a01 	vldr	s14, [r1, #4]
 800bf4a:	edd3 8a01 	vldr	s17, [r3, #4]
 800bf4e:	ee34 7a87 	vadd.f32	s14, s9, s14
 800bf52:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800bf56:	ee37 7a28 	vadd.f32	s14, s14, s17
 800bf5a:	ee32 9a60 	vsub.f32	s18, s4, s1
 800bf5e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800bf62:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800bf66:	ed1a aa02 	vldr	s20, [sl, #-8]
 800bf6a:	ee73 8a22 	vadd.f32	s17, s6, s5
 800bf6e:	ee39 9a05 	vadd.f32	s18, s18, s10
 800bf72:	ee7a aac1 	vsub.f32	s21, s21, s2
 800bf76:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800bf7a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800bf7e:	ee69 ba07 	vmul.f32	s23, s18, s14
 800bf82:	ee6a aa87 	vmul.f32	s21, s21, s14
 800bf86:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800bf8a:	ee63 ca87 	vmul.f32	s25, s7, s14
 800bf8e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800bf92:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800bf96:	ee68 8a87 	vmul.f32	s17, s17, s14
 800bf9a:	ee73 3aea 	vsub.f32	s7, s7, s21
 800bf9e:	ee78 8a89 	vadd.f32	s17, s17, s18
 800bfa2:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800bfa6:	ee3b aaca 	vsub.f32	s20, s23, s20
 800bfaa:	ee34 4a67 	vsub.f32	s8, s8, s15
 800bfae:	ee76 6acb 	vsub.f32	s13, s13, s22
 800bfb2:	ee36 6a48 	vsub.f32	s12, s12, s16
 800bfb6:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800bfba:	ed00 7a02 	vstr	s14, [r0, #-8]
 800bfbe:	ed40 3a01 	vstr	s7, [r0, #-4]
 800bfc2:	edc1 8a01 	vstr	s17, [r1, #4]
 800bfc6:	ed81 aa02 	vstr	s20, [r1, #8]
 800bfca:	ed59 3a04 	vldr	s7, [r9, #-16]
 800bfce:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800bfd2:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800bfd6:	ed59 6a03 	vldr	s13, [r9, #-12]
 800bfda:	ee34 4a61 	vsub.f32	s8, s8, s3
 800bfde:	ee36 6a41 	vsub.f32	s12, s12, s2
 800bfe2:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800bfe6:	ee66 9a26 	vmul.f32	s19, s12, s13
 800bfea:	ee24 9a23 	vmul.f32	s18, s8, s7
 800bfee:	ee26 6a23 	vmul.f32	s12, s12, s7
 800bff2:	ee24 4a26 	vmul.f32	s8, s8, s13
 800bff6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bffa:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800bffe:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800c002:	ee36 6a44 	vsub.f32	s12, s12, s8
 800c006:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c00a:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800c00e:	ee79 3a29 	vadd.f32	s7, s18, s19
 800c012:	ee75 6a60 	vsub.f32	s13, s10, s1
 800c016:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800c01a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c01e:	ed45 3a02 	vstr	s7, [r5, #-8]
 800c022:	ed05 6a01 	vstr	s12, [r5, #-4]
 800c026:	ed84 7a01 	vstr	s14, [r4, #4]
 800c02a:	ed84 4a02 	vstr	s8, [r4, #8]
 800c02e:	ee35 6a81 	vadd.f32	s12, s11, s2
 800c032:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800c036:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800c03a:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800c03e:	ee33 3a62 	vsub.f32	s6, s6, s5
 800c042:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800c046:	ee67 2a26 	vmul.f32	s5, s14, s13
 800c04a:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800c04e:	ee26 5a25 	vmul.f32	s10, s12, s11
 800c052:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c056:	ee26 6a26 	vmul.f32	s12, s12, s13
 800c05a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c05e:	ee63 6a26 	vmul.f32	s13, s6, s13
 800c062:	ee23 3a25 	vmul.f32	s6, s6, s11
 800c066:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c06a:	ee75 5a24 	vadd.f32	s11, s10, s9
 800c06e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800c072:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c076:	f1bb 0b01 	subs.w	fp, fp, #1
 800c07a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800c07e:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c082:	f10e 0e08 	add.w	lr, lr, #8
 800c086:	ed83 3a02 	vstr	s6, [r3, #8]
 800c08a:	ed83 7a01 	vstr	s14, [r3, #4]
 800c08e:	f1ac 0c08 	sub.w	ip, ip, #8
 800c092:	f10a 0a08 	add.w	sl, sl, #8
 800c096:	f100 0008 	add.w	r0, r0, #8
 800c09a:	f1a1 0108 	sub.w	r1, r1, #8
 800c09e:	f109 0910 	add.w	r9, r9, #16
 800c0a2:	f105 0508 	add.w	r5, r5, #8
 800c0a6:	f1a4 0408 	sub.w	r4, r4, #8
 800c0aa:	f108 0818 	add.w	r8, r8, #24
 800c0ae:	f102 0208 	add.w	r2, r2, #8
 800c0b2:	f1a3 0308 	sub.w	r3, r3, #8
 800c0b6:	f47f aefc 	bne.w	800beb2 <arm_cfft_radix8by4_f32+0x12e>
 800c0ba:	9907      	ldr	r1, [sp, #28]
 800c0bc:	9800      	ldr	r0, [sp, #0]
 800c0be:	00cb      	lsls	r3, r1, #3
 800c0c0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800c0c4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800c0c8:	9100      	str	r1, [sp, #0]
 800c0ca:	9904      	ldr	r1, [sp, #16]
 800c0cc:	4419      	add	r1, r3
 800c0ce:	9104      	str	r1, [sp, #16]
 800c0d0:	9903      	ldr	r1, [sp, #12]
 800c0d2:	4419      	add	r1, r3
 800c0d4:	9103      	str	r1, [sp, #12]
 800c0d6:	9906      	ldr	r1, [sp, #24]
 800c0d8:	4419      	add	r1, r3
 800c0da:	9106      	str	r1, [sp, #24]
 800c0dc:	9905      	ldr	r1, [sp, #20]
 800c0de:	441f      	add	r7, r3
 800c0e0:	4419      	add	r1, r3
 800c0e2:	9b02      	ldr	r3, [sp, #8]
 800c0e4:	9105      	str	r1, [sp, #20]
 800c0e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0ea:	9302      	str	r3, [sp, #8]
 800c0ec:	9904      	ldr	r1, [sp, #16]
 800c0ee:	9805      	ldr	r0, [sp, #20]
 800c0f0:	ed91 4a00 	vldr	s8, [r1]
 800c0f4:	edd0 6a00 	vldr	s13, [r0]
 800c0f8:	9b06      	ldr	r3, [sp, #24]
 800c0fa:	ed97 3a00 	vldr	s6, [r7]
 800c0fe:	edd3 7a00 	vldr	s15, [r3]
 800c102:	edd0 4a01 	vldr	s9, [r0, #4]
 800c106:	edd1 3a01 	vldr	s7, [r1, #4]
 800c10a:	ed97 2a01 	vldr	s4, [r7, #4]
 800c10e:	ed93 7a01 	vldr	s14, [r3, #4]
 800c112:	9a03      	ldr	r2, [sp, #12]
 800c114:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800c118:	ee34 6a26 	vadd.f32	s12, s8, s13
 800c11c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800c120:	ee37 5a86 	vadd.f32	s10, s15, s12
 800c124:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800c128:	ee35 5a03 	vadd.f32	s10, s10, s6
 800c12c:	ee74 6a66 	vsub.f32	s13, s8, s13
 800c130:	ed81 5a00 	vstr	s10, [r1]
 800c134:	ed93 5a01 	vldr	s10, [r3, #4]
 800c138:	edd7 4a01 	vldr	s9, [r7, #4]
 800c13c:	ee35 5a85 	vadd.f32	s10, s11, s10
 800c140:	ee37 4a26 	vadd.f32	s8, s14, s13
 800c144:	ee35 5a24 	vadd.f32	s10, s10, s9
 800c148:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800c14c:	ed81 5a01 	vstr	s10, [r1, #4]
 800c150:	edd2 1a00 	vldr	s3, [r2]
 800c154:	edd2 2a01 	vldr	s5, [r2, #4]
 800c158:	ee34 5a83 	vadd.f32	s10, s9, s6
 800c15c:	ee34 4a42 	vsub.f32	s8, s8, s4
 800c160:	ee36 6a67 	vsub.f32	s12, s12, s15
 800c164:	ee64 4a21 	vmul.f32	s9, s8, s3
 800c168:	ee24 4a22 	vmul.f32	s8, s8, s5
 800c16c:	ee65 2a22 	vmul.f32	s5, s10, s5
 800c170:	ee25 5a21 	vmul.f32	s10, s10, s3
 800c174:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800c178:	ee35 5a44 	vsub.f32	s10, s10, s8
 800c17c:	edc3 2a00 	vstr	s5, [r3]
 800c180:	ed83 5a01 	vstr	s10, [r3, #4]
 800c184:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800c188:	9b00      	ldr	r3, [sp, #0]
 800c18a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800c18e:	ed93 4a01 	vldr	s8, [r3, #4]
 800c192:	ed93 5a00 	vldr	s10, [r3]
 800c196:	9b02      	ldr	r3, [sp, #8]
 800c198:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800c19c:	ee66 4a05 	vmul.f32	s9, s12, s10
 800c1a0:	ee25 5a85 	vmul.f32	s10, s11, s10
 800c1a4:	ee26 6a04 	vmul.f32	s12, s12, s8
 800c1a8:	ee65 5a84 	vmul.f32	s11, s11, s8
 800c1ac:	ee35 6a46 	vsub.f32	s12, s10, s12
 800c1b0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800c1b4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800c1b8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c1bc:	ed80 6a01 	vstr	s12, [r0, #4]
 800c1c0:	edc0 5a00 	vstr	s11, [r0]
 800c1c4:	edd3 5a01 	vldr	s11, [r3, #4]
 800c1c8:	edd3 6a00 	vldr	s13, [r3]
 800c1cc:	ee37 7a02 	vadd.f32	s14, s14, s4
 800c1d0:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800c1d4:	ee27 6a26 	vmul.f32	s12, s14, s13
 800c1d8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c1dc:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c1e0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c1e4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c1e8:	ee76 7a27 	vadd.f32	s15, s12, s15
 800c1ec:	ed87 7a01 	vstr	s14, [r7, #4]
 800c1f0:	edc7 7a00 	vstr	s15, [r7]
 800c1f4:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800c1f8:	4621      	mov	r1, r4
 800c1fa:	686a      	ldr	r2, [r5, #4]
 800c1fc:	2304      	movs	r3, #4
 800c1fe:	f000 f8f3 	bl	800c3e8 <arm_radix8_butterfly_f32>
 800c202:	4630      	mov	r0, r6
 800c204:	4621      	mov	r1, r4
 800c206:	686a      	ldr	r2, [r5, #4]
 800c208:	2304      	movs	r3, #4
 800c20a:	f000 f8ed 	bl	800c3e8 <arm_radix8_butterfly_f32>
 800c20e:	9808      	ldr	r0, [sp, #32]
 800c210:	686a      	ldr	r2, [r5, #4]
 800c212:	4621      	mov	r1, r4
 800c214:	2304      	movs	r3, #4
 800c216:	f000 f8e7 	bl	800c3e8 <arm_radix8_butterfly_f32>
 800c21a:	686a      	ldr	r2, [r5, #4]
 800c21c:	9801      	ldr	r0, [sp, #4]
 800c21e:	4621      	mov	r1, r4
 800c220:	2304      	movs	r3, #4
 800c222:	b00d      	add	sp, #52	; 0x34
 800c224:	ecbd 8b0a 	vpop	{d8-d12}
 800c228:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22c:	f000 b8dc 	b.w	800c3e8 <arm_radix8_butterfly_f32>

0800c230 <arm_cfft_f32>:
 800c230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c234:	2a01      	cmp	r2, #1
 800c236:	4606      	mov	r6, r0
 800c238:	4617      	mov	r7, r2
 800c23a:	460c      	mov	r4, r1
 800c23c:	4698      	mov	r8, r3
 800c23e:	8805      	ldrh	r5, [r0, #0]
 800c240:	d056      	beq.n	800c2f0 <arm_cfft_f32+0xc0>
 800c242:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800c246:	d063      	beq.n	800c310 <arm_cfft_f32+0xe0>
 800c248:	d916      	bls.n	800c278 <arm_cfft_f32+0x48>
 800c24a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800c24e:	d01a      	beq.n	800c286 <arm_cfft_f32+0x56>
 800c250:	d947      	bls.n	800c2e2 <arm_cfft_f32+0xb2>
 800c252:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800c256:	d05b      	beq.n	800c310 <arm_cfft_f32+0xe0>
 800c258:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800c25c:	d105      	bne.n	800c26a <arm_cfft_f32+0x3a>
 800c25e:	2301      	movs	r3, #1
 800c260:	6872      	ldr	r2, [r6, #4]
 800c262:	4629      	mov	r1, r5
 800c264:	4620      	mov	r0, r4
 800c266:	f000 f8bf 	bl	800c3e8 <arm_radix8_butterfly_f32>
 800c26a:	f1b8 0f00 	cmp.w	r8, #0
 800c26e:	d111      	bne.n	800c294 <arm_cfft_f32+0x64>
 800c270:	2f01      	cmp	r7, #1
 800c272:	d016      	beq.n	800c2a2 <arm_cfft_f32+0x72>
 800c274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c278:	2d20      	cmp	r5, #32
 800c27a:	d049      	beq.n	800c310 <arm_cfft_f32+0xe0>
 800c27c:	d935      	bls.n	800c2ea <arm_cfft_f32+0xba>
 800c27e:	2d40      	cmp	r5, #64	; 0x40
 800c280:	d0ed      	beq.n	800c25e <arm_cfft_f32+0x2e>
 800c282:	2d80      	cmp	r5, #128	; 0x80
 800c284:	d1f1      	bne.n	800c26a <arm_cfft_f32+0x3a>
 800c286:	4621      	mov	r1, r4
 800c288:	4630      	mov	r0, r6
 800c28a:	f7ff fcab 	bl	800bbe4 <arm_cfft_radix8by2_f32>
 800c28e:	f1b8 0f00 	cmp.w	r8, #0
 800c292:	d0ed      	beq.n	800c270 <arm_cfft_f32+0x40>
 800c294:	68b2      	ldr	r2, [r6, #8]
 800c296:	89b1      	ldrh	r1, [r6, #12]
 800c298:	4620      	mov	r0, r4
 800c29a:	f000 f841 	bl	800c320 <arm_bitreversal_32>
 800c29e:	2f01      	cmp	r7, #1
 800c2a0:	d1e8      	bne.n	800c274 <arm_cfft_f32+0x44>
 800c2a2:	ee07 5a90 	vmov	s15, r5
 800c2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c2b2:	2d00      	cmp	r5, #0
 800c2b4:	d0de      	beq.n	800c274 <arm_cfft_f32+0x44>
 800c2b6:	f104 0108 	add.w	r1, r4, #8
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	3301      	adds	r3, #1
 800c2be:	429d      	cmp	r5, r3
 800c2c0:	f101 0108 	add.w	r1, r1, #8
 800c2c4:	ed11 7a04 	vldr	s14, [r1, #-16]
 800c2c8:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c2cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c2d0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c2d4:	ed01 7a04 	vstr	s14, [r1, #-16]
 800c2d8:	ed41 7a03 	vstr	s15, [r1, #-12]
 800c2dc:	d1ee      	bne.n	800c2bc <arm_cfft_f32+0x8c>
 800c2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2e2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800c2e6:	d0ba      	beq.n	800c25e <arm_cfft_f32+0x2e>
 800c2e8:	e7bf      	b.n	800c26a <arm_cfft_f32+0x3a>
 800c2ea:	2d10      	cmp	r5, #16
 800c2ec:	d0cb      	beq.n	800c286 <arm_cfft_f32+0x56>
 800c2ee:	e7bc      	b.n	800c26a <arm_cfft_f32+0x3a>
 800c2f0:	b19d      	cbz	r5, 800c31a <arm_cfft_f32+0xea>
 800c2f2:	f101 030c 	add.w	r3, r1, #12
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	ed53 7a02 	vldr	s15, [r3, #-8]
 800c2fc:	3201      	adds	r2, #1
 800c2fe:	eef1 7a67 	vneg.f32	s15, s15
 800c302:	4295      	cmp	r5, r2
 800c304:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c308:	f103 0308 	add.w	r3, r3, #8
 800c30c:	d1f4      	bne.n	800c2f8 <arm_cfft_f32+0xc8>
 800c30e:	e798      	b.n	800c242 <arm_cfft_f32+0x12>
 800c310:	4621      	mov	r1, r4
 800c312:	4630      	mov	r0, r6
 800c314:	f7ff fd36 	bl	800bd84 <arm_cfft_radix8by4_f32>
 800c318:	e7a7      	b.n	800c26a <arm_cfft_f32+0x3a>
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d0aa      	beq.n	800c274 <arm_cfft_f32+0x44>
 800c31e:	e7b9      	b.n	800c294 <arm_cfft_f32+0x64>

0800c320 <arm_bitreversal_32>:
 800c320:	b1e9      	cbz	r1, 800c35e <arm_bitreversal_32+0x3e>
 800c322:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c324:	2500      	movs	r5, #0
 800c326:	f102 0e02 	add.w	lr, r2, #2
 800c32a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800c32e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800c332:	08a4      	lsrs	r4, r4, #2
 800c334:	089b      	lsrs	r3, r3, #2
 800c336:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800c33a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800c33e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800c342:	00a6      	lsls	r6, r4, #2
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800c34a:	3304      	adds	r3, #4
 800c34c:	1d34      	adds	r4, r6, #4
 800c34e:	3502      	adds	r5, #2
 800c350:	58c6      	ldr	r6, [r0, r3]
 800c352:	5907      	ldr	r7, [r0, r4]
 800c354:	50c7      	str	r7, [r0, r3]
 800c356:	428d      	cmp	r5, r1
 800c358:	5106      	str	r6, [r0, r4]
 800c35a:	d3e6      	bcc.n	800c32a <arm_bitreversal_32+0xa>
 800c35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c35e:	4770      	bx	lr

0800c360 <arm_abs_f32>:
 800c360:	b470      	push	{r4, r5, r6}
 800c362:	0896      	lsrs	r6, r2, #2
 800c364:	d025      	beq.n	800c3b2 <arm_abs_f32+0x52>
 800c366:	f100 0410 	add.w	r4, r0, #16
 800c36a:	f101 0310 	add.w	r3, r1, #16
 800c36e:	4635      	mov	r5, r6
 800c370:	ed54 7a04 	vldr	s15, [r4, #-16]
 800c374:	eef0 7ae7 	vabs.f32	s15, s15
 800c378:	ed43 7a04 	vstr	s15, [r3, #-16]
 800c37c:	ed54 7a03 	vldr	s15, [r4, #-12]
 800c380:	eef0 7ae7 	vabs.f32	s15, s15
 800c384:	ed43 7a03 	vstr	s15, [r3, #-12]
 800c388:	ed54 7a02 	vldr	s15, [r4, #-8]
 800c38c:	eef0 7ae7 	vabs.f32	s15, s15
 800c390:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c394:	ed54 7a01 	vldr	s15, [r4, #-4]
 800c398:	3d01      	subs	r5, #1
 800c39a:	eef0 7ae7 	vabs.f32	s15, s15
 800c39e:	ed43 7a01 	vstr	s15, [r3, #-4]
 800c3a2:	f104 0410 	add.w	r4, r4, #16
 800c3a6:	f103 0310 	add.w	r3, r3, #16
 800c3aa:	d1e1      	bne.n	800c370 <arm_abs_f32+0x10>
 800c3ac:	0136      	lsls	r6, r6, #4
 800c3ae:	4430      	add	r0, r6
 800c3b0:	4431      	add	r1, r6
 800c3b2:	f012 0203 	ands.w	r2, r2, #3
 800c3b6:	d015      	beq.n	800c3e4 <arm_abs_f32+0x84>
 800c3b8:	edd0 7a00 	vldr	s15, [r0]
 800c3bc:	3a01      	subs	r2, #1
 800c3be:	eef0 7ae7 	vabs.f32	s15, s15
 800c3c2:	edc1 7a00 	vstr	s15, [r1]
 800c3c6:	d00d      	beq.n	800c3e4 <arm_abs_f32+0x84>
 800c3c8:	edd0 7a01 	vldr	s15, [r0, #4]
 800c3cc:	2a01      	cmp	r2, #1
 800c3ce:	eef0 7ae7 	vabs.f32	s15, s15
 800c3d2:	edc1 7a01 	vstr	s15, [r1, #4]
 800c3d6:	d005      	beq.n	800c3e4 <arm_abs_f32+0x84>
 800c3d8:	edd0 7a02 	vldr	s15, [r0, #8]
 800c3dc:	eef0 7ae7 	vabs.f32	s15, s15
 800c3e0:	edc1 7a02 	vstr	s15, [r1, #8]
 800c3e4:	bc70      	pop	{r4, r5, r6}
 800c3e6:	4770      	bx	lr

0800c3e8 <arm_radix8_butterfly_f32>:
 800c3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ec:	ed2d 8b10 	vpush	{d8-d15}
 800c3f0:	b095      	sub	sp, #84	; 0x54
 800c3f2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	ed9f bab9 	vldr	s22, [pc, #740]	; 800c6e0 <arm_radix8_butterfly_f32+0x2f8>
 800c3fe:	9012      	str	r0, [sp, #72]	; 0x48
 800c400:	468b      	mov	fp, r1
 800c402:	9313      	str	r3, [sp, #76]	; 0x4c
 800c404:	4689      	mov	r9, r1
 800c406:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800c40a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c40c:	960f      	str	r6, [sp, #60]	; 0x3c
 800c40e:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800c412:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800c416:	eb03 0508 	add.w	r5, r3, r8
 800c41a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800c41e:	eb05 040e 	add.w	r4, r5, lr
 800c422:	0137      	lsls	r7, r6, #4
 800c424:	eba6 030a 	sub.w	r3, r6, sl
 800c428:	eb04 000e 	add.w	r0, r4, lr
 800c42c:	44b2      	add	sl, r6
 800c42e:	1d3a      	adds	r2, r7, #4
 800c430:	9702      	str	r7, [sp, #8]
 800c432:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800c436:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800c43a:	ebae 0c06 	sub.w	ip, lr, r6
 800c43e:	9703      	str	r7, [sp, #12]
 800c440:	eb03 0708 	add.w	r7, r3, r8
 800c444:	9701      	str	r7, [sp, #4]
 800c446:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800c44a:	9706      	str	r7, [sp, #24]
 800c44c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800c44e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800c452:	f10e 0104 	add.w	r1, lr, #4
 800c456:	4439      	add	r1, r7
 800c458:	443a      	add	r2, r7
 800c45a:	0137      	lsls	r7, r6, #4
 800c45c:	00f6      	lsls	r6, r6, #3
 800c45e:	9704      	str	r7, [sp, #16]
 800c460:	9605      	str	r6, [sp, #20]
 800c462:	9f01      	ldr	r7, [sp, #4]
 800c464:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800c466:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800c46a:	f04f 0c00 	mov.w	ip, #0
 800c46e:	edd4 6a00 	vldr	s13, [r4]
 800c472:	edd7 1a00 	vldr	s3, [r7]
 800c476:	ed16 aa01 	vldr	s20, [r6, #-4]
 800c47a:	edd5 5a00 	vldr	s11, [r5]
 800c47e:	ed52 9a01 	vldr	s19, [r2, #-4]
 800c482:	ed90 6a00 	vldr	s12, [r0]
 800c486:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c48a:	ed93 3a00 	vldr	s6, [r3]
 800c48e:	ee39 0a86 	vadd.f32	s0, s19, s12
 800c492:	ee33 2a21 	vadd.f32	s4, s6, s3
 800c496:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800c49a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800c49e:	ee35 7a02 	vadd.f32	s14, s10, s4
 800c4a2:	ee34 4a80 	vadd.f32	s8, s9, s0
 800c4a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c4aa:	ee74 6a07 	vadd.f32	s13, s8, s14
 800c4ae:	ee34 4a47 	vsub.f32	s8, s8, s14
 800c4b2:	ed46 6a01 	vstr	s13, [r6, #-4]
 800c4b6:	ed85 4a00 	vstr	s8, [r5]
 800c4ba:	edd1 6a00 	vldr	s13, [r1]
 800c4be:	ed94 9a01 	vldr	s18, [r4, #4]
 800c4c2:	edd3 2a01 	vldr	s5, [r3, #4]
 800c4c6:	edd7 8a01 	vldr	s17, [r7, #4]
 800c4ca:	edd6 0a00 	vldr	s1, [r6]
 800c4ce:	edd5 3a01 	vldr	s7, [r5, #4]
 800c4d2:	ed90 8a01 	vldr	s16, [r0, #4]
 800c4d6:	ed92 7a00 	vldr	s14, [r2]
 800c4da:	ee33 3a61 	vsub.f32	s6, s6, s3
 800c4de:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800c4e2:	ee72 aae8 	vsub.f32	s21, s5, s17
 800c4e6:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800c4ea:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800c4ee:	ee77 7a83 	vadd.f32	s15, s15, s6
 800c4f2:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800c4f6:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800c4fa:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800c4fe:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800c502:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800c506:	ee77 0a08 	vadd.f32	s1, s14, s16
 800c50a:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800c50e:	ee37 7a48 	vsub.f32	s14, s14, s16
 800c512:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800c516:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800c51a:	ee76 6a89 	vadd.f32	s13, s13, s18
 800c51e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800c522:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800c526:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800c52a:	ee35 5a42 	vsub.f32	s10, s10, s4
 800c52e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800c532:	ee33 2a20 	vadd.f32	s4, s6, s1
 800c536:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800c53a:	ee33 3a60 	vsub.f32	s6, s6, s1
 800c53e:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800c542:	ee77 0a01 	vadd.f32	s1, s14, s2
 800c546:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800c54a:	ee37 7a41 	vsub.f32	s14, s14, s2
 800c54e:	ee73 1a84 	vadd.f32	s3, s7, s8
 800c552:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800c556:	ee76 3a27 	vadd.f32	s7, s12, s15
 800c55a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800c55e:	ee32 8a00 	vadd.f32	s16, s4, s0
 800c562:	ee33 1a45 	vsub.f32	s2, s6, s10
 800c566:	ee32 2a40 	vsub.f32	s4, s4, s0
 800c56a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800c56e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800c572:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800c576:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800c57a:	ee34 6a67 	vsub.f32	s12, s8, s15
 800c57e:	ee75 4a87 	vadd.f32	s9, s11, s14
 800c582:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800c586:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800c58a:	ee77 7a84 	vadd.f32	s15, s15, s8
 800c58e:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800c592:	44dc      	add	ip, fp
 800c594:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800c598:	45e1      	cmp	r9, ip
 800c59a:	ed86 8a00 	vstr	s16, [r6]
 800c59e:	ed85 2a01 	vstr	s4, [r5, #4]
 800c5a2:	4456      	add	r6, sl
 800c5a4:	ed02 0a01 	vstr	s0, [r2, #-4]
 800c5a8:	4455      	add	r5, sl
 800c5aa:	edc0 6a00 	vstr	s13, [r0]
 800c5ae:	ed82 1a00 	vstr	s2, [r2]
 800c5b2:	ed80 5a01 	vstr	s10, [r0, #4]
 800c5b6:	4452      	add	r2, sl
 800c5b8:	ed01 3a01 	vstr	s6, [r1, #-4]
 800c5bc:	4450      	add	r0, sl
 800c5be:	edc7 2a00 	vstr	s5, [r7]
 800c5c2:	edc4 4a00 	vstr	s9, [r4]
 800c5c6:	ed83 7a00 	vstr	s14, [r3]
 800c5ca:	edc1 5a00 	vstr	s11, [r1]
 800c5ce:	edc7 3a01 	vstr	s7, [r7, #4]
 800c5d2:	4451      	add	r1, sl
 800c5d4:	ed84 6a01 	vstr	s12, [r4, #4]
 800c5d8:	4457      	add	r7, sl
 800c5da:	edc3 7a01 	vstr	s15, [r3, #4]
 800c5de:	4454      	add	r4, sl
 800c5e0:	4453      	add	r3, sl
 800c5e2:	f63f af44 	bhi.w	800c46e <arm_radix8_butterfly_f32+0x86>
 800c5e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5e8:	2b07      	cmp	r3, #7
 800c5ea:	f240 81b7 	bls.w	800c95c <arm_radix8_butterfly_f32+0x574>
 800c5ee:	9b06      	ldr	r3, [sp, #24]
 800c5f0:	9903      	ldr	r1, [sp, #12]
 800c5f2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c5f4:	9e05      	ldr	r6, [sp, #20]
 800c5f6:	9a04      	ldr	r2, [sp, #16]
 800c5f8:	f103 0c08 	add.w	ip, r3, #8
 800c5fc:	9b02      	ldr	r3, [sp, #8]
 800c5fe:	3108      	adds	r1, #8
 800c600:	f108 0808 	add.w	r8, r8, #8
 800c604:	1841      	adds	r1, r0, r1
 800c606:	3608      	adds	r6, #8
 800c608:	330c      	adds	r3, #12
 800c60a:	4604      	mov	r4, r0
 800c60c:	4444      	add	r4, r8
 800c60e:	18c3      	adds	r3, r0, r3
 800c610:	9109      	str	r1, [sp, #36]	; 0x24
 800c612:	1981      	adds	r1, r0, r6
 800c614:	f10e 0e08 	add.w	lr, lr, #8
 800c618:	3208      	adds	r2, #8
 800c61a:	940b      	str	r4, [sp, #44]	; 0x2c
 800c61c:	9107      	str	r1, [sp, #28]
 800c61e:	4604      	mov	r4, r0
 800c620:	4601      	mov	r1, r0
 800c622:	9304      	str	r3, [sp, #16]
 800c624:	f100 030c 	add.w	r3, r0, #12
 800c628:	4474      	add	r4, lr
 800c62a:	f04f 0801 	mov.w	r8, #1
 800c62e:	1882      	adds	r2, r0, r2
 800c630:	4461      	add	r1, ip
 800c632:	9305      	str	r3, [sp, #20]
 800c634:	464b      	mov	r3, r9
 800c636:	940a      	str	r4, [sp, #40]	; 0x28
 800c638:	46c1      	mov	r9, r8
 800c63a:	9208      	str	r2, [sp, #32]
 800c63c:	46d8      	mov	r8, fp
 800c63e:	9106      	str	r1, [sp, #24]
 800c640:	f04f 0e00 	mov.w	lr, #0
 800c644:	469b      	mov	fp, r3
 800c646:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c648:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c64a:	449e      	add	lr, r3
 800c64c:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800c650:	441a      	add	r2, r3
 800c652:	920e      	str	r2, [sp, #56]	; 0x38
 800c654:	441a      	add	r2, r3
 800c656:	18d4      	adds	r4, r2, r3
 800c658:	18e5      	adds	r5, r4, r3
 800c65a:	18ee      	adds	r6, r5, r3
 800c65c:	18f7      	adds	r7, r6, r3
 800c65e:	eb07 0c03 	add.w	ip, r7, r3
 800c662:	920d      	str	r2, [sp, #52]	; 0x34
 800c664:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800c668:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800c66c:	910c      	str	r1, [sp, #48]	; 0x30
 800c66e:	4419      	add	r1, r3
 800c670:	9103      	str	r1, [sp, #12]
 800c672:	4419      	add	r1, r3
 800c674:	18ca      	adds	r2, r1, r3
 800c676:	9202      	str	r2, [sp, #8]
 800c678:	441a      	add	r2, r3
 800c67a:	18d0      	adds	r0, r2, r3
 800c67c:	ed92 ea01 	vldr	s28, [r2, #4]
 800c680:	9a02      	ldr	r2, [sp, #8]
 800c682:	edd4 7a00 	vldr	s15, [r4]
 800c686:	edd2 da01 	vldr	s27, [r2, #4]
 800c68a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c68c:	ed91 da01 	vldr	s26, [r1, #4]
 800c690:	ed92 ca01 	vldr	s24, [r2, #4]
 800c694:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c696:	9903      	ldr	r1, [sp, #12]
 800c698:	edcd 7a03 	vstr	s15, [sp, #12]
 800c69c:	edd2 7a00 	vldr	s15, [r2]
 800c6a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6a2:	edcd 7a02 	vstr	s15, [sp, #8]
 800c6a6:	edd2 7a00 	vldr	s15, [r2]
 800c6aa:	edd0 ea01 	vldr	s29, [r0, #4]
 800c6ae:	edd1 ca01 	vldr	s25, [r1, #4]
 800c6b2:	eddc ba00 	vldr	s23, [ip]
 800c6b6:	edd7 aa00 	vldr	s21, [r7]
 800c6ba:	ed96 aa00 	vldr	s20, [r6]
 800c6be:	edd5 9a00 	vldr	s19, [r5]
 800c6c2:	edcd 7a01 	vstr	s15, [sp, #4]
 800c6c6:	4403      	add	r3, r0
 800c6c8:	ed93 fa01 	vldr	s30, [r3, #4]
 800c6cc:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800c6d0:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800c6d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c6d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c6dc:	46cc      	mov	ip, r9
 800c6de:	e001      	b.n	800c6e4 <arm_radix8_butterfly_f32+0x2fc>
 800c6e0:	3f3504f3 	.word	0x3f3504f3
 800c6e4:	ed91 6a00 	vldr	s12, [r1]
 800c6e8:	ed93 5a00 	vldr	s10, [r3]
 800c6ec:	edd0 fa00 	vldr	s31, [r0]
 800c6f0:	edd4 7a00 	vldr	s15, [r4]
 800c6f4:	ed95 7a00 	vldr	s14, [r5]
 800c6f8:	ed56 3a01 	vldr	s7, [r6, #-4]
 800c6fc:	ed17 3a01 	vldr	s6, [r7, #-4]
 800c700:	ed92 2a00 	vldr	s4, [r2]
 800c704:	ed96 0a00 	vldr	s0, [r6]
 800c708:	ee33 8a85 	vadd.f32	s16, s7, s10
 800c70c:	ee32 1a06 	vadd.f32	s2, s4, s12
 800c710:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800c714:	ee77 4a87 	vadd.f32	s9, s15, s14
 800c718:	ee78 1a04 	vadd.f32	s3, s16, s8
 800c71c:	ee71 6a24 	vadd.f32	s13, s2, s9
 800c720:	ee32 2a46 	vsub.f32	s4, s4, s12
 800c724:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800c728:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c72c:	ed06 6a01 	vstr	s12, [r6, #-4]
 800c730:	edd4 8a01 	vldr	s17, [r4, #4]
 800c734:	ed92 9a01 	vldr	s18, [r2, #4]
 800c738:	edd7 0a00 	vldr	s1, [r7]
 800c73c:	edd1 2a01 	vldr	s5, [r1, #4]
 800c740:	ed95 7a01 	vldr	s14, [r5, #4]
 800c744:	ed93 6a01 	vldr	s12, [r3, #4]
 800c748:	edd0 5a01 	vldr	s11, [r0, #4]
 800c74c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800c750:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800c754:	ee39 5a62 	vsub.f32	s10, s18, s5
 800c758:	ee78 fac7 	vsub.f32	s31, s17, s14
 800c75c:	ee38 4a44 	vsub.f32	s8, s16, s8
 800c760:	ee38 7a87 	vadd.f32	s14, s17, s14
 800c764:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800c768:	ee79 2a22 	vadd.f32	s5, s18, s5
 800c76c:	ee32 9a27 	vadd.f32	s18, s4, s15
 800c770:	ee72 7a67 	vsub.f32	s15, s4, s15
 800c774:	ee30 2a06 	vadd.f32	s4, s0, s12
 800c778:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800c77c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800c780:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800c784:	ee32 1a08 	vadd.f32	s2, s4, s16
 800c788:	ee72 fa87 	vadd.f32	s31, s5, s14
 800c78c:	ee32 2a48 	vsub.f32	s4, s4, s16
 800c790:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800c794:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800c798:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800c79c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800c7a0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800c7a4:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800c7a8:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800c7ac:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800c7b0:	ee30 6a46 	vsub.f32	s12, s0, s12
 800c7b4:	ee74 0a22 	vadd.f32	s1, s8, s5
 800c7b8:	ee36 0a28 	vadd.f32	s0, s12, s17
 800c7bc:	ee74 2a62 	vsub.f32	s5, s8, s5
 800c7c0:	ee36 6a68 	vsub.f32	s12, s12, s17
 800c7c4:	ee32 4a64 	vsub.f32	s8, s4, s9
 800c7c8:	ee73 8a09 	vadd.f32	s17, s6, s18
 800c7cc:	ee74 4a82 	vadd.f32	s9, s9, s4
 800c7d0:	ee33 9a49 	vsub.f32	s18, s6, s18
 800c7d4:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800c7d8:	ee35 3a85 	vadd.f32	s6, s11, s10
 800c7dc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800c7e0:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800c7e4:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800c7e8:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800c7ec:	ee30 7a68 	vsub.f32	s14, s0, s17
 800c7f0:	ee35 8a03 	vadd.f32	s16, s10, s6
 800c7f4:	ee38 0a80 	vadd.f32	s0, s17, s0
 800c7f8:	ee73 3a82 	vadd.f32	s7, s7, s4
 800c7fc:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800c800:	ed9d 2a01 	vldr	s4, [sp, #4]
 800c804:	eddd 1a02 	vldr	s3, [sp, #8]
 800c808:	ee35 5a43 	vsub.f32	s10, s10, s6
 800c80c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800c810:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800c814:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800c818:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c81c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800c820:	ee76 5a49 	vsub.f32	s11, s12, s18
 800c824:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800c828:	ee39 6a06 	vadd.f32	s12, s18, s12
 800c82c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800c830:	ee21 4a84 	vmul.f32	s8, s3, s8
 800c834:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800c838:	ee22 7a07 	vmul.f32	s14, s4, s14
 800c83c:	ee22 2a08 	vmul.f32	s4, s4, s16
 800c840:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800c844:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800c848:	ee31 1a09 	vadd.f32	s2, s2, s18
 800c84c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800c850:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800c854:	ee74 0a60 	vsub.f32	s1, s8, s1
 800c858:	ee37 7a48 	vsub.f32	s14, s14, s16
 800c85c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800c860:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800c864:	ee72 1a21 	vadd.f32	s3, s4, s3
 800c868:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800c86c:	ee38 2a89 	vadd.f32	s4, s17, s18
 800c870:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800c874:	ee38 8a04 	vadd.f32	s16, s16, s8
 800c878:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800c87c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800c880:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800c884:	eddd 5a03 	vldr	s11, [sp, #12]
 800c888:	edc6 fa00 	vstr	s31, [r6]
 800c88c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800c890:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800c894:	ee30 0a45 	vsub.f32	s0, s0, s10
 800c898:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800c89c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800c8a0:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800c8a4:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800c8a8:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800c8ac:	ee25 6a86 	vmul.f32	s12, s11, s12
 800c8b0:	ee74 4a89 	vadd.f32	s9, s9, s18
 800c8b4:	ee34 3a43 	vsub.f32	s6, s8, s6
 800c8b8:	ee78 8a85 	vadd.f32	s17, s17, s10
 800c8bc:	ee36 6a67 	vsub.f32	s12, s12, s15
 800c8c0:	44c4      	add	ip, r8
 800c8c2:	45e3      	cmp	fp, ip
 800c8c4:	edc3 3a00 	vstr	s7, [r3]
 800c8c8:	edc3 6a01 	vstr	s13, [r3, #4]
 800c8cc:	4456      	add	r6, sl
 800c8ce:	ed07 1a01 	vstr	s2, [r7, #-4]
 800c8d2:	edc7 0a00 	vstr	s1, [r7]
 800c8d6:	4453      	add	r3, sl
 800c8d8:	ed80 2a00 	vstr	s4, [r0]
 800c8dc:	edc0 2a01 	vstr	s5, [r0, #4]
 800c8e0:	4457      	add	r7, sl
 800c8e2:	edc2 1a00 	vstr	s3, [r2]
 800c8e6:	ed82 7a01 	vstr	s14, [r2, #4]
 800c8ea:	4450      	add	r0, sl
 800c8ec:	ed85 8a00 	vstr	s16, [r5]
 800c8f0:	ed85 0a01 	vstr	s0, [r5, #4]
 800c8f4:	4452      	add	r2, sl
 800c8f6:	edc1 4a00 	vstr	s9, [r1]
 800c8fa:	4455      	add	r5, sl
 800c8fc:	ed81 3a01 	vstr	s6, [r1, #4]
 800c900:	edc4 8a00 	vstr	s17, [r4]
 800c904:	ed84 6a01 	vstr	s12, [r4, #4]
 800c908:	4451      	add	r1, sl
 800c90a:	4454      	add	r4, sl
 800c90c:	f63f aeea 	bhi.w	800c6e4 <arm_radix8_butterfly_f32+0x2fc>
 800c910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c912:	3308      	adds	r3, #8
 800c914:	930b      	str	r3, [sp, #44]	; 0x2c
 800c916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c918:	3308      	adds	r3, #8
 800c91a:	930a      	str	r3, [sp, #40]	; 0x28
 800c91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c91e:	3308      	adds	r3, #8
 800c920:	9309      	str	r3, [sp, #36]	; 0x24
 800c922:	9b08      	ldr	r3, [sp, #32]
 800c924:	3308      	adds	r3, #8
 800c926:	9308      	str	r3, [sp, #32]
 800c928:	9b07      	ldr	r3, [sp, #28]
 800c92a:	3308      	adds	r3, #8
 800c92c:	9307      	str	r3, [sp, #28]
 800c92e:	9b06      	ldr	r3, [sp, #24]
 800c930:	3308      	adds	r3, #8
 800c932:	9306      	str	r3, [sp, #24]
 800c934:	9b05      	ldr	r3, [sp, #20]
 800c936:	3308      	adds	r3, #8
 800c938:	9305      	str	r3, [sp, #20]
 800c93a:	9b04      	ldr	r3, [sp, #16]
 800c93c:	3308      	adds	r3, #8
 800c93e:	9304      	str	r3, [sp, #16]
 800c940:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c942:	f109 0901 	add.w	r9, r9, #1
 800c946:	454b      	cmp	r3, r9
 800c948:	f47f ae7d 	bne.w	800c646 <arm_radix8_butterfly_f32+0x25e>
 800c94c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c94e:	00db      	lsls	r3, r3, #3
 800c950:	b29b      	uxth	r3, r3
 800c952:	46d9      	mov	r9, fp
 800c954:	9310      	str	r3, [sp, #64]	; 0x40
 800c956:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800c95a:	e554      	b.n	800c406 <arm_radix8_butterfly_f32+0x1e>
 800c95c:	b015      	add	sp, #84	; 0x54
 800c95e:	ecbd 8b10 	vpop	{d8-d15}
 800c962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c966:	bf00      	nop

0800c968 <memset>:
 800c968:	4402      	add	r2, r0
 800c96a:	4603      	mov	r3, r0
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d100      	bne.n	800c972 <memset+0xa>
 800c970:	4770      	bx	lr
 800c972:	f803 1b01 	strb.w	r1, [r3], #1
 800c976:	e7f9      	b.n	800c96c <memset+0x4>

0800c978 <__errno>:
 800c978:	4b01      	ldr	r3, [pc, #4]	; (800c980 <__errno+0x8>)
 800c97a:	6818      	ldr	r0, [r3, #0]
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop
 800c980:	20000068 	.word	0x20000068

0800c984 <__libc_init_array>:
 800c984:	b570      	push	{r4, r5, r6, lr}
 800c986:	4d0d      	ldr	r5, [pc, #52]	; (800c9bc <__libc_init_array+0x38>)
 800c988:	4c0d      	ldr	r4, [pc, #52]	; (800c9c0 <__libc_init_array+0x3c>)
 800c98a:	1b64      	subs	r4, r4, r5
 800c98c:	10a4      	asrs	r4, r4, #2
 800c98e:	2600      	movs	r6, #0
 800c990:	42a6      	cmp	r6, r4
 800c992:	d109      	bne.n	800c9a8 <__libc_init_array+0x24>
 800c994:	4d0b      	ldr	r5, [pc, #44]	; (800c9c4 <__libc_init_array+0x40>)
 800c996:	4c0c      	ldr	r4, [pc, #48]	; (800c9c8 <__libc_init_array+0x44>)
 800c998:	f001 fd2c 	bl	800e3f4 <_init>
 800c99c:	1b64      	subs	r4, r4, r5
 800c99e:	10a4      	asrs	r4, r4, #2
 800c9a0:	2600      	movs	r6, #0
 800c9a2:	42a6      	cmp	r6, r4
 800c9a4:	d105      	bne.n	800c9b2 <__libc_init_array+0x2e>
 800c9a6:	bd70      	pop	{r4, r5, r6, pc}
 800c9a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9ac:	4798      	blx	r3
 800c9ae:	3601      	adds	r6, #1
 800c9b0:	e7ee      	b.n	800c990 <__libc_init_array+0xc>
 800c9b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9b6:	4798      	blx	r3
 800c9b8:	3601      	adds	r6, #1
 800c9ba:	e7f2      	b.n	800c9a2 <__libc_init_array+0x1e>
 800c9bc:	08023a20 	.word	0x08023a20
 800c9c0:	08023a20 	.word	0x08023a20
 800c9c4:	08023a20 	.word	0x08023a20
 800c9c8:	08023a24 	.word	0x08023a24

0800c9cc <pow>:
 800c9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ce:	ed2d 8b02 	vpush	{d8}
 800c9d2:	eeb0 8a40 	vmov.f32	s16, s0
 800c9d6:	eef0 8a60 	vmov.f32	s17, s1
 800c9da:	ec55 4b11 	vmov	r4, r5, d1
 800c9de:	f000 f957 	bl	800cc90 <__ieee754_pow>
 800c9e2:	4622      	mov	r2, r4
 800c9e4:	462b      	mov	r3, r5
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	4629      	mov	r1, r5
 800c9ea:	ec57 6b10 	vmov	r6, r7, d0
 800c9ee:	f7f4 f85d 	bl	8000aac <__aeabi_dcmpun>
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	d13b      	bne.n	800ca6e <pow+0xa2>
 800c9f6:	ec51 0b18 	vmov	r0, r1, d8
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	f7f4 f823 	bl	8000a48 <__aeabi_dcmpeq>
 800ca02:	b1b8      	cbz	r0, 800ca34 <pow+0x68>
 800ca04:	2200      	movs	r2, #0
 800ca06:	2300      	movs	r3, #0
 800ca08:	4620      	mov	r0, r4
 800ca0a:	4629      	mov	r1, r5
 800ca0c:	f7f4 f81c 	bl	8000a48 <__aeabi_dcmpeq>
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d146      	bne.n	800caa2 <pow+0xd6>
 800ca14:	ec45 4b10 	vmov	d0, r4, r5
 800ca18:	f000 f8aa 	bl	800cb70 <finite>
 800ca1c:	b338      	cbz	r0, 800ca6e <pow+0xa2>
 800ca1e:	2200      	movs	r2, #0
 800ca20:	2300      	movs	r3, #0
 800ca22:	4620      	mov	r0, r4
 800ca24:	4629      	mov	r1, r5
 800ca26:	f7f4 f819 	bl	8000a5c <__aeabi_dcmplt>
 800ca2a:	b300      	cbz	r0, 800ca6e <pow+0xa2>
 800ca2c:	f7ff ffa4 	bl	800c978 <__errno>
 800ca30:	2322      	movs	r3, #34	; 0x22
 800ca32:	e01b      	b.n	800ca6c <pow+0xa0>
 800ca34:	ec47 6b10 	vmov	d0, r6, r7
 800ca38:	f000 f89a 	bl	800cb70 <finite>
 800ca3c:	b9e0      	cbnz	r0, 800ca78 <pow+0xac>
 800ca3e:	eeb0 0a48 	vmov.f32	s0, s16
 800ca42:	eef0 0a68 	vmov.f32	s1, s17
 800ca46:	f000 f893 	bl	800cb70 <finite>
 800ca4a:	b1a8      	cbz	r0, 800ca78 <pow+0xac>
 800ca4c:	ec45 4b10 	vmov	d0, r4, r5
 800ca50:	f000 f88e 	bl	800cb70 <finite>
 800ca54:	b180      	cbz	r0, 800ca78 <pow+0xac>
 800ca56:	4632      	mov	r2, r6
 800ca58:	463b      	mov	r3, r7
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	4639      	mov	r1, r7
 800ca5e:	f7f4 f825 	bl	8000aac <__aeabi_dcmpun>
 800ca62:	2800      	cmp	r0, #0
 800ca64:	d0e2      	beq.n	800ca2c <pow+0x60>
 800ca66:	f7ff ff87 	bl	800c978 <__errno>
 800ca6a:	2321      	movs	r3, #33	; 0x21
 800ca6c:	6003      	str	r3, [r0, #0]
 800ca6e:	ecbd 8b02 	vpop	{d8}
 800ca72:	ec47 6b10 	vmov	d0, r6, r7
 800ca76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca78:	2200      	movs	r2, #0
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	4639      	mov	r1, r7
 800ca80:	f7f3 ffe2 	bl	8000a48 <__aeabi_dcmpeq>
 800ca84:	2800      	cmp	r0, #0
 800ca86:	d0f2      	beq.n	800ca6e <pow+0xa2>
 800ca88:	eeb0 0a48 	vmov.f32	s0, s16
 800ca8c:	eef0 0a68 	vmov.f32	s1, s17
 800ca90:	f000 f86e 	bl	800cb70 <finite>
 800ca94:	2800      	cmp	r0, #0
 800ca96:	d0ea      	beq.n	800ca6e <pow+0xa2>
 800ca98:	ec45 4b10 	vmov	d0, r4, r5
 800ca9c:	f000 f868 	bl	800cb70 <finite>
 800caa0:	e7c3      	b.n	800ca2a <pow+0x5e>
 800caa2:	4f01      	ldr	r7, [pc, #4]	; (800caa8 <pow+0xdc>)
 800caa4:	2600      	movs	r6, #0
 800caa6:	e7e2      	b.n	800ca6e <pow+0xa2>
 800caa8:	3ff00000 	.word	0x3ff00000

0800caac <sqrtf>:
 800caac:	b508      	push	{r3, lr}
 800caae:	ed2d 8b02 	vpush	{d8}
 800cab2:	eeb0 8a40 	vmov.f32	s16, s0
 800cab6:	f000 f866 	bl	800cb86 <__ieee754_sqrtf>
 800caba:	eeb4 8a48 	vcmp.f32	s16, s16
 800cabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac2:	d60c      	bvs.n	800cade <sqrtf+0x32>
 800cac4:	eddf 8a07 	vldr	s17, [pc, #28]	; 800cae4 <sqrtf+0x38>
 800cac8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad0:	d505      	bpl.n	800cade <sqrtf+0x32>
 800cad2:	f7ff ff51 	bl	800c978 <__errno>
 800cad6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cada:	2321      	movs	r3, #33	; 0x21
 800cadc:	6003      	str	r3, [r0, #0]
 800cade:	ecbd 8b02 	vpop	{d8}
 800cae2:	bd08      	pop	{r3, pc}
 800cae4:	00000000 	.word	0x00000000

0800cae8 <cosf>:
 800cae8:	ee10 3a10 	vmov	r3, s0
 800caec:	b507      	push	{r0, r1, r2, lr}
 800caee:	4a1e      	ldr	r2, [pc, #120]	; (800cb68 <cosf+0x80>)
 800caf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800caf4:	4293      	cmp	r3, r2
 800caf6:	dc06      	bgt.n	800cb06 <cosf+0x1e>
 800caf8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800cb6c <cosf+0x84>
 800cafc:	b003      	add	sp, #12
 800cafe:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb02:	f000 bdf9 	b.w	800d6f8 <__kernel_cosf>
 800cb06:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cb0a:	db04      	blt.n	800cb16 <cosf+0x2e>
 800cb0c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800cb10:	b003      	add	sp, #12
 800cb12:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb16:	4668      	mov	r0, sp
 800cb18:	f000 fe94 	bl	800d844 <__ieee754_rem_pio2f>
 800cb1c:	f000 0003 	and.w	r0, r0, #3
 800cb20:	2801      	cmp	r0, #1
 800cb22:	d009      	beq.n	800cb38 <cosf+0x50>
 800cb24:	2802      	cmp	r0, #2
 800cb26:	d010      	beq.n	800cb4a <cosf+0x62>
 800cb28:	b9b0      	cbnz	r0, 800cb58 <cosf+0x70>
 800cb2a:	eddd 0a01 	vldr	s1, [sp, #4]
 800cb2e:	ed9d 0a00 	vldr	s0, [sp]
 800cb32:	f000 fde1 	bl	800d6f8 <__kernel_cosf>
 800cb36:	e7eb      	b.n	800cb10 <cosf+0x28>
 800cb38:	eddd 0a01 	vldr	s1, [sp, #4]
 800cb3c:	ed9d 0a00 	vldr	s0, [sp]
 800cb40:	f000 fe38 	bl	800d7b4 <__kernel_sinf>
 800cb44:	eeb1 0a40 	vneg.f32	s0, s0
 800cb48:	e7e2      	b.n	800cb10 <cosf+0x28>
 800cb4a:	eddd 0a01 	vldr	s1, [sp, #4]
 800cb4e:	ed9d 0a00 	vldr	s0, [sp]
 800cb52:	f000 fdd1 	bl	800d6f8 <__kernel_cosf>
 800cb56:	e7f5      	b.n	800cb44 <cosf+0x5c>
 800cb58:	eddd 0a01 	vldr	s1, [sp, #4]
 800cb5c:	ed9d 0a00 	vldr	s0, [sp]
 800cb60:	2001      	movs	r0, #1
 800cb62:	f000 fe27 	bl	800d7b4 <__kernel_sinf>
 800cb66:	e7d3      	b.n	800cb10 <cosf+0x28>
 800cb68:	3f490fd8 	.word	0x3f490fd8
 800cb6c:	00000000 	.word	0x00000000

0800cb70 <finite>:
 800cb70:	b082      	sub	sp, #8
 800cb72:	ed8d 0b00 	vstr	d0, [sp]
 800cb76:	9801      	ldr	r0, [sp, #4]
 800cb78:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cb7c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cb80:	0fc0      	lsrs	r0, r0, #31
 800cb82:	b002      	add	sp, #8
 800cb84:	4770      	bx	lr

0800cb86 <__ieee754_sqrtf>:
 800cb86:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cb8a:	4770      	bx	lr
 800cb8c:	0000      	movs	r0, r0
	...

0800cb90 <floor>:
 800cb90:	ec51 0b10 	vmov	r0, r1, d0
 800cb94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb9c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800cba0:	2e13      	cmp	r6, #19
 800cba2:	ee10 5a10 	vmov	r5, s0
 800cba6:	ee10 8a10 	vmov	r8, s0
 800cbaa:	460c      	mov	r4, r1
 800cbac:	dc31      	bgt.n	800cc12 <floor+0x82>
 800cbae:	2e00      	cmp	r6, #0
 800cbb0:	da14      	bge.n	800cbdc <floor+0x4c>
 800cbb2:	a333      	add	r3, pc, #204	; (adr r3, 800cc80 <floor+0xf0>)
 800cbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb8:	f7f3 fb28 	bl	800020c <__adddf3>
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	f7f3 ff6a 	bl	8000a98 <__aeabi_dcmpgt>
 800cbc4:	b138      	cbz	r0, 800cbd6 <floor+0x46>
 800cbc6:	2c00      	cmp	r4, #0
 800cbc8:	da53      	bge.n	800cc72 <floor+0xe2>
 800cbca:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800cbce:	4325      	orrs	r5, r4
 800cbd0:	d052      	beq.n	800cc78 <floor+0xe8>
 800cbd2:	4c2d      	ldr	r4, [pc, #180]	; (800cc88 <floor+0xf8>)
 800cbd4:	2500      	movs	r5, #0
 800cbd6:	4621      	mov	r1, r4
 800cbd8:	4628      	mov	r0, r5
 800cbda:	e024      	b.n	800cc26 <floor+0x96>
 800cbdc:	4f2b      	ldr	r7, [pc, #172]	; (800cc8c <floor+0xfc>)
 800cbde:	4137      	asrs	r7, r6
 800cbe0:	ea01 0307 	and.w	r3, r1, r7
 800cbe4:	4303      	orrs	r3, r0
 800cbe6:	d01e      	beq.n	800cc26 <floor+0x96>
 800cbe8:	a325      	add	r3, pc, #148	; (adr r3, 800cc80 <floor+0xf0>)
 800cbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbee:	f7f3 fb0d 	bl	800020c <__adddf3>
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	f7f3 ff4f 	bl	8000a98 <__aeabi_dcmpgt>
 800cbfa:	2800      	cmp	r0, #0
 800cbfc:	d0eb      	beq.n	800cbd6 <floor+0x46>
 800cbfe:	2c00      	cmp	r4, #0
 800cc00:	bfbe      	ittt	lt
 800cc02:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cc06:	4133      	asrlt	r3, r6
 800cc08:	18e4      	addlt	r4, r4, r3
 800cc0a:	ea24 0407 	bic.w	r4, r4, r7
 800cc0e:	2500      	movs	r5, #0
 800cc10:	e7e1      	b.n	800cbd6 <floor+0x46>
 800cc12:	2e33      	cmp	r6, #51	; 0x33
 800cc14:	dd0b      	ble.n	800cc2e <floor+0x9e>
 800cc16:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cc1a:	d104      	bne.n	800cc26 <floor+0x96>
 800cc1c:	ee10 2a10 	vmov	r2, s0
 800cc20:	460b      	mov	r3, r1
 800cc22:	f7f3 faf3 	bl	800020c <__adddf3>
 800cc26:	ec41 0b10 	vmov	d0, r0, r1
 800cc2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc2e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800cc32:	f04f 37ff 	mov.w	r7, #4294967295
 800cc36:	40df      	lsrs	r7, r3
 800cc38:	4238      	tst	r0, r7
 800cc3a:	d0f4      	beq.n	800cc26 <floor+0x96>
 800cc3c:	a310      	add	r3, pc, #64	; (adr r3, 800cc80 <floor+0xf0>)
 800cc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc42:	f7f3 fae3 	bl	800020c <__adddf3>
 800cc46:	2200      	movs	r2, #0
 800cc48:	2300      	movs	r3, #0
 800cc4a:	f7f3 ff25 	bl	8000a98 <__aeabi_dcmpgt>
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	d0c1      	beq.n	800cbd6 <floor+0x46>
 800cc52:	2c00      	cmp	r4, #0
 800cc54:	da0a      	bge.n	800cc6c <floor+0xdc>
 800cc56:	2e14      	cmp	r6, #20
 800cc58:	d101      	bne.n	800cc5e <floor+0xce>
 800cc5a:	3401      	adds	r4, #1
 800cc5c:	e006      	b.n	800cc6c <floor+0xdc>
 800cc5e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cc62:	2301      	movs	r3, #1
 800cc64:	40b3      	lsls	r3, r6
 800cc66:	441d      	add	r5, r3
 800cc68:	45a8      	cmp	r8, r5
 800cc6a:	d8f6      	bhi.n	800cc5a <floor+0xca>
 800cc6c:	ea25 0507 	bic.w	r5, r5, r7
 800cc70:	e7b1      	b.n	800cbd6 <floor+0x46>
 800cc72:	2500      	movs	r5, #0
 800cc74:	462c      	mov	r4, r5
 800cc76:	e7ae      	b.n	800cbd6 <floor+0x46>
 800cc78:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cc7c:	e7ab      	b.n	800cbd6 <floor+0x46>
 800cc7e:	bf00      	nop
 800cc80:	8800759c 	.word	0x8800759c
 800cc84:	7e37e43c 	.word	0x7e37e43c
 800cc88:	bff00000 	.word	0xbff00000
 800cc8c:	000fffff 	.word	0x000fffff

0800cc90 <__ieee754_pow>:
 800cc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc94:	ed2d 8b06 	vpush	{d8-d10}
 800cc98:	b089      	sub	sp, #36	; 0x24
 800cc9a:	ed8d 1b00 	vstr	d1, [sp]
 800cc9e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800cca2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800cca6:	ea58 0102 	orrs.w	r1, r8, r2
 800ccaa:	ec57 6b10 	vmov	r6, r7, d0
 800ccae:	d115      	bne.n	800ccdc <__ieee754_pow+0x4c>
 800ccb0:	19b3      	adds	r3, r6, r6
 800ccb2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ccb6:	4152      	adcs	r2, r2
 800ccb8:	4299      	cmp	r1, r3
 800ccba:	4b89      	ldr	r3, [pc, #548]	; (800cee0 <__ieee754_pow+0x250>)
 800ccbc:	4193      	sbcs	r3, r2
 800ccbe:	f080 84d1 	bcs.w	800d664 <__ieee754_pow+0x9d4>
 800ccc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	4639      	mov	r1, r7
 800ccca:	f7f3 fa9f 	bl	800020c <__adddf3>
 800ccce:	ec41 0b10 	vmov	d0, r0, r1
 800ccd2:	b009      	add	sp, #36	; 0x24
 800ccd4:	ecbd 8b06 	vpop	{d8-d10}
 800ccd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccdc:	4b81      	ldr	r3, [pc, #516]	; (800cee4 <__ieee754_pow+0x254>)
 800ccde:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800cce2:	429c      	cmp	r4, r3
 800cce4:	ee10 aa10 	vmov	sl, s0
 800cce8:	463d      	mov	r5, r7
 800ccea:	dc06      	bgt.n	800ccfa <__ieee754_pow+0x6a>
 800ccec:	d101      	bne.n	800ccf2 <__ieee754_pow+0x62>
 800ccee:	2e00      	cmp	r6, #0
 800ccf0:	d1e7      	bne.n	800ccc2 <__ieee754_pow+0x32>
 800ccf2:	4598      	cmp	r8, r3
 800ccf4:	dc01      	bgt.n	800ccfa <__ieee754_pow+0x6a>
 800ccf6:	d10f      	bne.n	800cd18 <__ieee754_pow+0x88>
 800ccf8:	b172      	cbz	r2, 800cd18 <__ieee754_pow+0x88>
 800ccfa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ccfe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800cd02:	ea55 050a 	orrs.w	r5, r5, sl
 800cd06:	d1dc      	bne.n	800ccc2 <__ieee754_pow+0x32>
 800cd08:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cd0c:	18db      	adds	r3, r3, r3
 800cd0e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800cd12:	4152      	adcs	r2, r2
 800cd14:	429d      	cmp	r5, r3
 800cd16:	e7d0      	b.n	800ccba <__ieee754_pow+0x2a>
 800cd18:	2d00      	cmp	r5, #0
 800cd1a:	da3b      	bge.n	800cd94 <__ieee754_pow+0x104>
 800cd1c:	4b72      	ldr	r3, [pc, #456]	; (800cee8 <__ieee754_pow+0x258>)
 800cd1e:	4598      	cmp	r8, r3
 800cd20:	dc51      	bgt.n	800cdc6 <__ieee754_pow+0x136>
 800cd22:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cd26:	4598      	cmp	r8, r3
 800cd28:	f340 84ab 	ble.w	800d682 <__ieee754_pow+0x9f2>
 800cd2c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cd30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cd34:	2b14      	cmp	r3, #20
 800cd36:	dd0f      	ble.n	800cd58 <__ieee754_pow+0xc8>
 800cd38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cd3c:	fa22 f103 	lsr.w	r1, r2, r3
 800cd40:	fa01 f303 	lsl.w	r3, r1, r3
 800cd44:	4293      	cmp	r3, r2
 800cd46:	f040 849c 	bne.w	800d682 <__ieee754_pow+0x9f2>
 800cd4a:	f001 0101 	and.w	r1, r1, #1
 800cd4e:	f1c1 0302 	rsb	r3, r1, #2
 800cd52:	9304      	str	r3, [sp, #16]
 800cd54:	b182      	cbz	r2, 800cd78 <__ieee754_pow+0xe8>
 800cd56:	e05f      	b.n	800ce18 <__ieee754_pow+0x188>
 800cd58:	2a00      	cmp	r2, #0
 800cd5a:	d15b      	bne.n	800ce14 <__ieee754_pow+0x184>
 800cd5c:	f1c3 0314 	rsb	r3, r3, #20
 800cd60:	fa48 f103 	asr.w	r1, r8, r3
 800cd64:	fa01 f303 	lsl.w	r3, r1, r3
 800cd68:	4543      	cmp	r3, r8
 800cd6a:	f040 8487 	bne.w	800d67c <__ieee754_pow+0x9ec>
 800cd6e:	f001 0101 	and.w	r1, r1, #1
 800cd72:	f1c1 0302 	rsb	r3, r1, #2
 800cd76:	9304      	str	r3, [sp, #16]
 800cd78:	4b5c      	ldr	r3, [pc, #368]	; (800ceec <__ieee754_pow+0x25c>)
 800cd7a:	4598      	cmp	r8, r3
 800cd7c:	d132      	bne.n	800cde4 <__ieee754_pow+0x154>
 800cd7e:	f1b9 0f00 	cmp.w	r9, #0
 800cd82:	f280 8477 	bge.w	800d674 <__ieee754_pow+0x9e4>
 800cd86:	4959      	ldr	r1, [pc, #356]	; (800ceec <__ieee754_pow+0x25c>)
 800cd88:	4632      	mov	r2, r6
 800cd8a:	463b      	mov	r3, r7
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	f7f3 fd1d 	bl	80007cc <__aeabi_ddiv>
 800cd92:	e79c      	b.n	800ccce <__ieee754_pow+0x3e>
 800cd94:	2300      	movs	r3, #0
 800cd96:	9304      	str	r3, [sp, #16]
 800cd98:	2a00      	cmp	r2, #0
 800cd9a:	d13d      	bne.n	800ce18 <__ieee754_pow+0x188>
 800cd9c:	4b51      	ldr	r3, [pc, #324]	; (800cee4 <__ieee754_pow+0x254>)
 800cd9e:	4598      	cmp	r8, r3
 800cda0:	d1ea      	bne.n	800cd78 <__ieee754_pow+0xe8>
 800cda2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cda6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cdaa:	ea53 030a 	orrs.w	r3, r3, sl
 800cdae:	f000 8459 	beq.w	800d664 <__ieee754_pow+0x9d4>
 800cdb2:	4b4f      	ldr	r3, [pc, #316]	; (800cef0 <__ieee754_pow+0x260>)
 800cdb4:	429c      	cmp	r4, r3
 800cdb6:	dd08      	ble.n	800cdca <__ieee754_pow+0x13a>
 800cdb8:	f1b9 0f00 	cmp.w	r9, #0
 800cdbc:	f2c0 8456 	blt.w	800d66c <__ieee754_pow+0x9dc>
 800cdc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdc4:	e783      	b.n	800ccce <__ieee754_pow+0x3e>
 800cdc6:	2302      	movs	r3, #2
 800cdc8:	e7e5      	b.n	800cd96 <__ieee754_pow+0x106>
 800cdca:	f1b9 0f00 	cmp.w	r9, #0
 800cdce:	f04f 0000 	mov.w	r0, #0
 800cdd2:	f04f 0100 	mov.w	r1, #0
 800cdd6:	f6bf af7a 	bge.w	800ccce <__ieee754_pow+0x3e>
 800cdda:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cdde:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cde2:	e774      	b.n	800ccce <__ieee754_pow+0x3e>
 800cde4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800cde8:	d106      	bne.n	800cdf8 <__ieee754_pow+0x168>
 800cdea:	4632      	mov	r2, r6
 800cdec:	463b      	mov	r3, r7
 800cdee:	4630      	mov	r0, r6
 800cdf0:	4639      	mov	r1, r7
 800cdf2:	f7f3 fbc1 	bl	8000578 <__aeabi_dmul>
 800cdf6:	e76a      	b.n	800ccce <__ieee754_pow+0x3e>
 800cdf8:	4b3e      	ldr	r3, [pc, #248]	; (800cef4 <__ieee754_pow+0x264>)
 800cdfa:	4599      	cmp	r9, r3
 800cdfc:	d10c      	bne.n	800ce18 <__ieee754_pow+0x188>
 800cdfe:	2d00      	cmp	r5, #0
 800ce00:	db0a      	blt.n	800ce18 <__ieee754_pow+0x188>
 800ce02:	ec47 6b10 	vmov	d0, r6, r7
 800ce06:	b009      	add	sp, #36	; 0x24
 800ce08:	ecbd 8b06 	vpop	{d8-d10}
 800ce0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce10:	f000 befc 	b.w	800dc0c <__ieee754_sqrt>
 800ce14:	2300      	movs	r3, #0
 800ce16:	9304      	str	r3, [sp, #16]
 800ce18:	ec47 6b10 	vmov	d0, r6, r7
 800ce1c:	f000 fc62 	bl	800d6e4 <fabs>
 800ce20:	ec51 0b10 	vmov	r0, r1, d0
 800ce24:	f1ba 0f00 	cmp.w	sl, #0
 800ce28:	d129      	bne.n	800ce7e <__ieee754_pow+0x1ee>
 800ce2a:	b124      	cbz	r4, 800ce36 <__ieee754_pow+0x1a6>
 800ce2c:	4b2f      	ldr	r3, [pc, #188]	; (800ceec <__ieee754_pow+0x25c>)
 800ce2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d123      	bne.n	800ce7e <__ieee754_pow+0x1ee>
 800ce36:	f1b9 0f00 	cmp.w	r9, #0
 800ce3a:	da05      	bge.n	800ce48 <__ieee754_pow+0x1b8>
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	460b      	mov	r3, r1
 800ce40:	2000      	movs	r0, #0
 800ce42:	492a      	ldr	r1, [pc, #168]	; (800ceec <__ieee754_pow+0x25c>)
 800ce44:	f7f3 fcc2 	bl	80007cc <__aeabi_ddiv>
 800ce48:	2d00      	cmp	r5, #0
 800ce4a:	f6bf af40 	bge.w	800ccce <__ieee754_pow+0x3e>
 800ce4e:	9b04      	ldr	r3, [sp, #16]
 800ce50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ce54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ce58:	431c      	orrs	r4, r3
 800ce5a:	d108      	bne.n	800ce6e <__ieee754_pow+0x1de>
 800ce5c:	4602      	mov	r2, r0
 800ce5e:	460b      	mov	r3, r1
 800ce60:	4610      	mov	r0, r2
 800ce62:	4619      	mov	r1, r3
 800ce64:	f7f3 f9d0 	bl	8000208 <__aeabi_dsub>
 800ce68:	4602      	mov	r2, r0
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	e78f      	b.n	800cd8e <__ieee754_pow+0xfe>
 800ce6e:	9b04      	ldr	r3, [sp, #16]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	f47f af2c 	bne.w	800ccce <__ieee754_pow+0x3e>
 800ce76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	e727      	b.n	800ccce <__ieee754_pow+0x3e>
 800ce7e:	0feb      	lsrs	r3, r5, #31
 800ce80:	3b01      	subs	r3, #1
 800ce82:	9306      	str	r3, [sp, #24]
 800ce84:	9a06      	ldr	r2, [sp, #24]
 800ce86:	9b04      	ldr	r3, [sp, #16]
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	d102      	bne.n	800ce92 <__ieee754_pow+0x202>
 800ce8c:	4632      	mov	r2, r6
 800ce8e:	463b      	mov	r3, r7
 800ce90:	e7e6      	b.n	800ce60 <__ieee754_pow+0x1d0>
 800ce92:	4b19      	ldr	r3, [pc, #100]	; (800cef8 <__ieee754_pow+0x268>)
 800ce94:	4598      	cmp	r8, r3
 800ce96:	f340 80fb 	ble.w	800d090 <__ieee754_pow+0x400>
 800ce9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ce9e:	4598      	cmp	r8, r3
 800cea0:	4b13      	ldr	r3, [pc, #76]	; (800cef0 <__ieee754_pow+0x260>)
 800cea2:	dd0c      	ble.n	800cebe <__ieee754_pow+0x22e>
 800cea4:	429c      	cmp	r4, r3
 800cea6:	dc0f      	bgt.n	800cec8 <__ieee754_pow+0x238>
 800cea8:	f1b9 0f00 	cmp.w	r9, #0
 800ceac:	da0f      	bge.n	800cece <__ieee754_pow+0x23e>
 800ceae:	2000      	movs	r0, #0
 800ceb0:	b009      	add	sp, #36	; 0x24
 800ceb2:	ecbd 8b06 	vpop	{d8-d10}
 800ceb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceba:	f000 be9e 	b.w	800dbfa <__math_oflow>
 800cebe:	429c      	cmp	r4, r3
 800cec0:	dbf2      	blt.n	800cea8 <__ieee754_pow+0x218>
 800cec2:	4b0a      	ldr	r3, [pc, #40]	; (800ceec <__ieee754_pow+0x25c>)
 800cec4:	429c      	cmp	r4, r3
 800cec6:	dd19      	ble.n	800cefc <__ieee754_pow+0x26c>
 800cec8:	f1b9 0f00 	cmp.w	r9, #0
 800cecc:	dcef      	bgt.n	800ceae <__ieee754_pow+0x21e>
 800cece:	2000      	movs	r0, #0
 800ced0:	b009      	add	sp, #36	; 0x24
 800ced2:	ecbd 8b06 	vpop	{d8-d10}
 800ced6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceda:	f000 be85 	b.w	800dbe8 <__math_uflow>
 800cede:	bf00      	nop
 800cee0:	fff00000 	.word	0xfff00000
 800cee4:	7ff00000 	.word	0x7ff00000
 800cee8:	433fffff 	.word	0x433fffff
 800ceec:	3ff00000 	.word	0x3ff00000
 800cef0:	3fefffff 	.word	0x3fefffff
 800cef4:	3fe00000 	.word	0x3fe00000
 800cef8:	41e00000 	.word	0x41e00000
 800cefc:	4b60      	ldr	r3, [pc, #384]	; (800d080 <__ieee754_pow+0x3f0>)
 800cefe:	2200      	movs	r2, #0
 800cf00:	f7f3 f982 	bl	8000208 <__aeabi_dsub>
 800cf04:	a354      	add	r3, pc, #336	; (adr r3, 800d058 <__ieee754_pow+0x3c8>)
 800cf06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	460d      	mov	r5, r1
 800cf0e:	f7f3 fb33 	bl	8000578 <__aeabi_dmul>
 800cf12:	a353      	add	r3, pc, #332	; (adr r3, 800d060 <__ieee754_pow+0x3d0>)
 800cf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf18:	4606      	mov	r6, r0
 800cf1a:	460f      	mov	r7, r1
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	4629      	mov	r1, r5
 800cf20:	f7f3 fb2a 	bl	8000578 <__aeabi_dmul>
 800cf24:	4b57      	ldr	r3, [pc, #348]	; (800d084 <__ieee754_pow+0x3f4>)
 800cf26:	4682      	mov	sl, r0
 800cf28:	468b      	mov	fp, r1
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	4629      	mov	r1, r5
 800cf30:	f7f3 fb22 	bl	8000578 <__aeabi_dmul>
 800cf34:	4602      	mov	r2, r0
 800cf36:	460b      	mov	r3, r1
 800cf38:	a14b      	add	r1, pc, #300	; (adr r1, 800d068 <__ieee754_pow+0x3d8>)
 800cf3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf3e:	f7f3 f963 	bl	8000208 <__aeabi_dsub>
 800cf42:	4622      	mov	r2, r4
 800cf44:	462b      	mov	r3, r5
 800cf46:	f7f3 fb17 	bl	8000578 <__aeabi_dmul>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	2000      	movs	r0, #0
 800cf50:	494d      	ldr	r1, [pc, #308]	; (800d088 <__ieee754_pow+0x3f8>)
 800cf52:	f7f3 f959 	bl	8000208 <__aeabi_dsub>
 800cf56:	4622      	mov	r2, r4
 800cf58:	4680      	mov	r8, r0
 800cf5a:	4689      	mov	r9, r1
 800cf5c:	462b      	mov	r3, r5
 800cf5e:	4620      	mov	r0, r4
 800cf60:	4629      	mov	r1, r5
 800cf62:	f7f3 fb09 	bl	8000578 <__aeabi_dmul>
 800cf66:	4602      	mov	r2, r0
 800cf68:	460b      	mov	r3, r1
 800cf6a:	4640      	mov	r0, r8
 800cf6c:	4649      	mov	r1, r9
 800cf6e:	f7f3 fb03 	bl	8000578 <__aeabi_dmul>
 800cf72:	a33f      	add	r3, pc, #252	; (adr r3, 800d070 <__ieee754_pow+0x3e0>)
 800cf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf78:	f7f3 fafe 	bl	8000578 <__aeabi_dmul>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	460b      	mov	r3, r1
 800cf80:	4650      	mov	r0, sl
 800cf82:	4659      	mov	r1, fp
 800cf84:	f7f3 f940 	bl	8000208 <__aeabi_dsub>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	4680      	mov	r8, r0
 800cf8e:	4689      	mov	r9, r1
 800cf90:	4630      	mov	r0, r6
 800cf92:	4639      	mov	r1, r7
 800cf94:	f7f3 f93a 	bl	800020c <__adddf3>
 800cf98:	2000      	movs	r0, #0
 800cf9a:	4632      	mov	r2, r6
 800cf9c:	463b      	mov	r3, r7
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	460d      	mov	r5, r1
 800cfa2:	f7f3 f931 	bl	8000208 <__aeabi_dsub>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	4640      	mov	r0, r8
 800cfac:	4649      	mov	r1, r9
 800cfae:	f7f3 f92b 	bl	8000208 <__aeabi_dsub>
 800cfb2:	9b04      	ldr	r3, [sp, #16]
 800cfb4:	9a06      	ldr	r2, [sp, #24]
 800cfb6:	3b01      	subs	r3, #1
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	4682      	mov	sl, r0
 800cfbc:	468b      	mov	fp, r1
 800cfbe:	f040 81e7 	bne.w	800d390 <__ieee754_pow+0x700>
 800cfc2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d078 <__ieee754_pow+0x3e8>
 800cfc6:	eeb0 8a47 	vmov.f32	s16, s14
 800cfca:	eef0 8a67 	vmov.f32	s17, s15
 800cfce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cfd2:	2600      	movs	r6, #0
 800cfd4:	4632      	mov	r2, r6
 800cfd6:	463b      	mov	r3, r7
 800cfd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfdc:	f7f3 f914 	bl	8000208 <__aeabi_dsub>
 800cfe0:	4622      	mov	r2, r4
 800cfe2:	462b      	mov	r3, r5
 800cfe4:	f7f3 fac8 	bl	8000578 <__aeabi_dmul>
 800cfe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfec:	4680      	mov	r8, r0
 800cfee:	4689      	mov	r9, r1
 800cff0:	4650      	mov	r0, sl
 800cff2:	4659      	mov	r1, fp
 800cff4:	f7f3 fac0 	bl	8000578 <__aeabi_dmul>
 800cff8:	4602      	mov	r2, r0
 800cffa:	460b      	mov	r3, r1
 800cffc:	4640      	mov	r0, r8
 800cffe:	4649      	mov	r1, r9
 800d000:	f7f3 f904 	bl	800020c <__adddf3>
 800d004:	4632      	mov	r2, r6
 800d006:	463b      	mov	r3, r7
 800d008:	4680      	mov	r8, r0
 800d00a:	4689      	mov	r9, r1
 800d00c:	4620      	mov	r0, r4
 800d00e:	4629      	mov	r1, r5
 800d010:	f7f3 fab2 	bl	8000578 <__aeabi_dmul>
 800d014:	460b      	mov	r3, r1
 800d016:	4604      	mov	r4, r0
 800d018:	460d      	mov	r5, r1
 800d01a:	4602      	mov	r2, r0
 800d01c:	4649      	mov	r1, r9
 800d01e:	4640      	mov	r0, r8
 800d020:	f7f3 f8f4 	bl	800020c <__adddf3>
 800d024:	4b19      	ldr	r3, [pc, #100]	; (800d08c <__ieee754_pow+0x3fc>)
 800d026:	4299      	cmp	r1, r3
 800d028:	ec45 4b19 	vmov	d9, r4, r5
 800d02c:	4606      	mov	r6, r0
 800d02e:	460f      	mov	r7, r1
 800d030:	468b      	mov	fp, r1
 800d032:	f340 82f0 	ble.w	800d616 <__ieee754_pow+0x986>
 800d036:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d03a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d03e:	4303      	orrs	r3, r0
 800d040:	f000 81e4 	beq.w	800d40c <__ieee754_pow+0x77c>
 800d044:	ec51 0b18 	vmov	r0, r1, d8
 800d048:	2200      	movs	r2, #0
 800d04a:	2300      	movs	r3, #0
 800d04c:	f7f3 fd06 	bl	8000a5c <__aeabi_dcmplt>
 800d050:	3800      	subs	r0, #0
 800d052:	bf18      	it	ne
 800d054:	2001      	movne	r0, #1
 800d056:	e72b      	b.n	800ceb0 <__ieee754_pow+0x220>
 800d058:	60000000 	.word	0x60000000
 800d05c:	3ff71547 	.word	0x3ff71547
 800d060:	f85ddf44 	.word	0xf85ddf44
 800d064:	3e54ae0b 	.word	0x3e54ae0b
 800d068:	55555555 	.word	0x55555555
 800d06c:	3fd55555 	.word	0x3fd55555
 800d070:	652b82fe 	.word	0x652b82fe
 800d074:	3ff71547 	.word	0x3ff71547
 800d078:	00000000 	.word	0x00000000
 800d07c:	bff00000 	.word	0xbff00000
 800d080:	3ff00000 	.word	0x3ff00000
 800d084:	3fd00000 	.word	0x3fd00000
 800d088:	3fe00000 	.word	0x3fe00000
 800d08c:	408fffff 	.word	0x408fffff
 800d090:	4bd5      	ldr	r3, [pc, #852]	; (800d3e8 <__ieee754_pow+0x758>)
 800d092:	402b      	ands	r3, r5
 800d094:	2200      	movs	r2, #0
 800d096:	b92b      	cbnz	r3, 800d0a4 <__ieee754_pow+0x414>
 800d098:	4bd4      	ldr	r3, [pc, #848]	; (800d3ec <__ieee754_pow+0x75c>)
 800d09a:	f7f3 fa6d 	bl	8000578 <__aeabi_dmul>
 800d09e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d0a2:	460c      	mov	r4, r1
 800d0a4:	1523      	asrs	r3, r4, #20
 800d0a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d0aa:	4413      	add	r3, r2
 800d0ac:	9305      	str	r3, [sp, #20]
 800d0ae:	4bd0      	ldr	r3, [pc, #832]	; (800d3f0 <__ieee754_pow+0x760>)
 800d0b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d0b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d0b8:	429c      	cmp	r4, r3
 800d0ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d0be:	dd08      	ble.n	800d0d2 <__ieee754_pow+0x442>
 800d0c0:	4bcc      	ldr	r3, [pc, #816]	; (800d3f4 <__ieee754_pow+0x764>)
 800d0c2:	429c      	cmp	r4, r3
 800d0c4:	f340 8162 	ble.w	800d38c <__ieee754_pow+0x6fc>
 800d0c8:	9b05      	ldr	r3, [sp, #20]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	9305      	str	r3, [sp, #20]
 800d0ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d0d2:	2400      	movs	r4, #0
 800d0d4:	00e3      	lsls	r3, r4, #3
 800d0d6:	9307      	str	r3, [sp, #28]
 800d0d8:	4bc7      	ldr	r3, [pc, #796]	; (800d3f8 <__ieee754_pow+0x768>)
 800d0da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d0de:	ed93 7b00 	vldr	d7, [r3]
 800d0e2:	4629      	mov	r1, r5
 800d0e4:	ec53 2b17 	vmov	r2, r3, d7
 800d0e8:	eeb0 9a47 	vmov.f32	s18, s14
 800d0ec:	eef0 9a67 	vmov.f32	s19, s15
 800d0f0:	4682      	mov	sl, r0
 800d0f2:	f7f3 f889 	bl	8000208 <__aeabi_dsub>
 800d0f6:	4652      	mov	r2, sl
 800d0f8:	4606      	mov	r6, r0
 800d0fa:	460f      	mov	r7, r1
 800d0fc:	462b      	mov	r3, r5
 800d0fe:	ec51 0b19 	vmov	r0, r1, d9
 800d102:	f7f3 f883 	bl	800020c <__adddf3>
 800d106:	4602      	mov	r2, r0
 800d108:	460b      	mov	r3, r1
 800d10a:	2000      	movs	r0, #0
 800d10c:	49bb      	ldr	r1, [pc, #748]	; (800d3fc <__ieee754_pow+0x76c>)
 800d10e:	f7f3 fb5d 	bl	80007cc <__aeabi_ddiv>
 800d112:	ec41 0b1a 	vmov	d10, r0, r1
 800d116:	4602      	mov	r2, r0
 800d118:	460b      	mov	r3, r1
 800d11a:	4630      	mov	r0, r6
 800d11c:	4639      	mov	r1, r7
 800d11e:	f7f3 fa2b 	bl	8000578 <__aeabi_dmul>
 800d122:	2300      	movs	r3, #0
 800d124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d128:	9302      	str	r3, [sp, #8]
 800d12a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d12e:	46ab      	mov	fp, r5
 800d130:	106d      	asrs	r5, r5, #1
 800d132:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d136:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d13a:	ec41 0b18 	vmov	d8, r0, r1
 800d13e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d142:	2200      	movs	r2, #0
 800d144:	4640      	mov	r0, r8
 800d146:	4649      	mov	r1, r9
 800d148:	4614      	mov	r4, r2
 800d14a:	461d      	mov	r5, r3
 800d14c:	f7f3 fa14 	bl	8000578 <__aeabi_dmul>
 800d150:	4602      	mov	r2, r0
 800d152:	460b      	mov	r3, r1
 800d154:	4630      	mov	r0, r6
 800d156:	4639      	mov	r1, r7
 800d158:	f7f3 f856 	bl	8000208 <__aeabi_dsub>
 800d15c:	ec53 2b19 	vmov	r2, r3, d9
 800d160:	4606      	mov	r6, r0
 800d162:	460f      	mov	r7, r1
 800d164:	4620      	mov	r0, r4
 800d166:	4629      	mov	r1, r5
 800d168:	f7f3 f84e 	bl	8000208 <__aeabi_dsub>
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	4650      	mov	r0, sl
 800d172:	4659      	mov	r1, fp
 800d174:	f7f3 f848 	bl	8000208 <__aeabi_dsub>
 800d178:	4642      	mov	r2, r8
 800d17a:	464b      	mov	r3, r9
 800d17c:	f7f3 f9fc 	bl	8000578 <__aeabi_dmul>
 800d180:	4602      	mov	r2, r0
 800d182:	460b      	mov	r3, r1
 800d184:	4630      	mov	r0, r6
 800d186:	4639      	mov	r1, r7
 800d188:	f7f3 f83e 	bl	8000208 <__aeabi_dsub>
 800d18c:	ec53 2b1a 	vmov	r2, r3, d10
 800d190:	f7f3 f9f2 	bl	8000578 <__aeabi_dmul>
 800d194:	ec53 2b18 	vmov	r2, r3, d8
 800d198:	ec41 0b19 	vmov	d9, r0, r1
 800d19c:	ec51 0b18 	vmov	r0, r1, d8
 800d1a0:	f7f3 f9ea 	bl	8000578 <__aeabi_dmul>
 800d1a4:	a37c      	add	r3, pc, #496	; (adr r3, 800d398 <__ieee754_pow+0x708>)
 800d1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	460d      	mov	r5, r1
 800d1ae:	f7f3 f9e3 	bl	8000578 <__aeabi_dmul>
 800d1b2:	a37b      	add	r3, pc, #492	; (adr r3, 800d3a0 <__ieee754_pow+0x710>)
 800d1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b8:	f7f3 f828 	bl	800020c <__adddf3>
 800d1bc:	4622      	mov	r2, r4
 800d1be:	462b      	mov	r3, r5
 800d1c0:	f7f3 f9da 	bl	8000578 <__aeabi_dmul>
 800d1c4:	a378      	add	r3, pc, #480	; (adr r3, 800d3a8 <__ieee754_pow+0x718>)
 800d1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ca:	f7f3 f81f 	bl	800020c <__adddf3>
 800d1ce:	4622      	mov	r2, r4
 800d1d0:	462b      	mov	r3, r5
 800d1d2:	f7f3 f9d1 	bl	8000578 <__aeabi_dmul>
 800d1d6:	a376      	add	r3, pc, #472	; (adr r3, 800d3b0 <__ieee754_pow+0x720>)
 800d1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1dc:	f7f3 f816 	bl	800020c <__adddf3>
 800d1e0:	4622      	mov	r2, r4
 800d1e2:	462b      	mov	r3, r5
 800d1e4:	f7f3 f9c8 	bl	8000578 <__aeabi_dmul>
 800d1e8:	a373      	add	r3, pc, #460	; (adr r3, 800d3b8 <__ieee754_pow+0x728>)
 800d1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ee:	f7f3 f80d 	bl	800020c <__adddf3>
 800d1f2:	4622      	mov	r2, r4
 800d1f4:	462b      	mov	r3, r5
 800d1f6:	f7f3 f9bf 	bl	8000578 <__aeabi_dmul>
 800d1fa:	a371      	add	r3, pc, #452	; (adr r3, 800d3c0 <__ieee754_pow+0x730>)
 800d1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d200:	f7f3 f804 	bl	800020c <__adddf3>
 800d204:	4622      	mov	r2, r4
 800d206:	4606      	mov	r6, r0
 800d208:	460f      	mov	r7, r1
 800d20a:	462b      	mov	r3, r5
 800d20c:	4620      	mov	r0, r4
 800d20e:	4629      	mov	r1, r5
 800d210:	f7f3 f9b2 	bl	8000578 <__aeabi_dmul>
 800d214:	4602      	mov	r2, r0
 800d216:	460b      	mov	r3, r1
 800d218:	4630      	mov	r0, r6
 800d21a:	4639      	mov	r1, r7
 800d21c:	f7f3 f9ac 	bl	8000578 <__aeabi_dmul>
 800d220:	4642      	mov	r2, r8
 800d222:	4604      	mov	r4, r0
 800d224:	460d      	mov	r5, r1
 800d226:	464b      	mov	r3, r9
 800d228:	ec51 0b18 	vmov	r0, r1, d8
 800d22c:	f7f2 ffee 	bl	800020c <__adddf3>
 800d230:	ec53 2b19 	vmov	r2, r3, d9
 800d234:	f7f3 f9a0 	bl	8000578 <__aeabi_dmul>
 800d238:	4622      	mov	r2, r4
 800d23a:	462b      	mov	r3, r5
 800d23c:	f7f2 ffe6 	bl	800020c <__adddf3>
 800d240:	4642      	mov	r2, r8
 800d242:	4682      	mov	sl, r0
 800d244:	468b      	mov	fp, r1
 800d246:	464b      	mov	r3, r9
 800d248:	4640      	mov	r0, r8
 800d24a:	4649      	mov	r1, r9
 800d24c:	f7f3 f994 	bl	8000578 <__aeabi_dmul>
 800d250:	4b6b      	ldr	r3, [pc, #428]	; (800d400 <__ieee754_pow+0x770>)
 800d252:	2200      	movs	r2, #0
 800d254:	4606      	mov	r6, r0
 800d256:	460f      	mov	r7, r1
 800d258:	f7f2 ffd8 	bl	800020c <__adddf3>
 800d25c:	4652      	mov	r2, sl
 800d25e:	465b      	mov	r3, fp
 800d260:	f7f2 ffd4 	bl	800020c <__adddf3>
 800d264:	2000      	movs	r0, #0
 800d266:	4604      	mov	r4, r0
 800d268:	460d      	mov	r5, r1
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	4640      	mov	r0, r8
 800d270:	4649      	mov	r1, r9
 800d272:	f7f3 f981 	bl	8000578 <__aeabi_dmul>
 800d276:	4b62      	ldr	r3, [pc, #392]	; (800d400 <__ieee754_pow+0x770>)
 800d278:	4680      	mov	r8, r0
 800d27a:	4689      	mov	r9, r1
 800d27c:	2200      	movs	r2, #0
 800d27e:	4620      	mov	r0, r4
 800d280:	4629      	mov	r1, r5
 800d282:	f7f2 ffc1 	bl	8000208 <__aeabi_dsub>
 800d286:	4632      	mov	r2, r6
 800d288:	463b      	mov	r3, r7
 800d28a:	f7f2 ffbd 	bl	8000208 <__aeabi_dsub>
 800d28e:	4602      	mov	r2, r0
 800d290:	460b      	mov	r3, r1
 800d292:	4650      	mov	r0, sl
 800d294:	4659      	mov	r1, fp
 800d296:	f7f2 ffb7 	bl	8000208 <__aeabi_dsub>
 800d29a:	ec53 2b18 	vmov	r2, r3, d8
 800d29e:	f7f3 f96b 	bl	8000578 <__aeabi_dmul>
 800d2a2:	4622      	mov	r2, r4
 800d2a4:	4606      	mov	r6, r0
 800d2a6:	460f      	mov	r7, r1
 800d2a8:	462b      	mov	r3, r5
 800d2aa:	ec51 0b19 	vmov	r0, r1, d9
 800d2ae:	f7f3 f963 	bl	8000578 <__aeabi_dmul>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	4630      	mov	r0, r6
 800d2b8:	4639      	mov	r1, r7
 800d2ba:	f7f2 ffa7 	bl	800020c <__adddf3>
 800d2be:	4606      	mov	r6, r0
 800d2c0:	460f      	mov	r7, r1
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	4640      	mov	r0, r8
 800d2c8:	4649      	mov	r1, r9
 800d2ca:	f7f2 ff9f 	bl	800020c <__adddf3>
 800d2ce:	a33e      	add	r3, pc, #248	; (adr r3, 800d3c8 <__ieee754_pow+0x738>)
 800d2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	460d      	mov	r5, r1
 800d2da:	f7f3 f94d 	bl	8000578 <__aeabi_dmul>
 800d2de:	4642      	mov	r2, r8
 800d2e0:	ec41 0b18 	vmov	d8, r0, r1
 800d2e4:	464b      	mov	r3, r9
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	4629      	mov	r1, r5
 800d2ea:	f7f2 ff8d 	bl	8000208 <__aeabi_dsub>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	4639      	mov	r1, r7
 800d2f6:	f7f2 ff87 	bl	8000208 <__aeabi_dsub>
 800d2fa:	a335      	add	r3, pc, #212	; (adr r3, 800d3d0 <__ieee754_pow+0x740>)
 800d2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d300:	f7f3 f93a 	bl	8000578 <__aeabi_dmul>
 800d304:	a334      	add	r3, pc, #208	; (adr r3, 800d3d8 <__ieee754_pow+0x748>)
 800d306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30a:	4606      	mov	r6, r0
 800d30c:	460f      	mov	r7, r1
 800d30e:	4620      	mov	r0, r4
 800d310:	4629      	mov	r1, r5
 800d312:	f7f3 f931 	bl	8000578 <__aeabi_dmul>
 800d316:	4602      	mov	r2, r0
 800d318:	460b      	mov	r3, r1
 800d31a:	4630      	mov	r0, r6
 800d31c:	4639      	mov	r1, r7
 800d31e:	f7f2 ff75 	bl	800020c <__adddf3>
 800d322:	9a07      	ldr	r2, [sp, #28]
 800d324:	4b37      	ldr	r3, [pc, #220]	; (800d404 <__ieee754_pow+0x774>)
 800d326:	4413      	add	r3, r2
 800d328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32c:	f7f2 ff6e 	bl	800020c <__adddf3>
 800d330:	4682      	mov	sl, r0
 800d332:	9805      	ldr	r0, [sp, #20]
 800d334:	468b      	mov	fp, r1
 800d336:	f7f3 f8b5 	bl	80004a4 <__aeabi_i2d>
 800d33a:	9a07      	ldr	r2, [sp, #28]
 800d33c:	4b32      	ldr	r3, [pc, #200]	; (800d408 <__ieee754_pow+0x778>)
 800d33e:	4413      	add	r3, r2
 800d340:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d344:	4606      	mov	r6, r0
 800d346:	460f      	mov	r7, r1
 800d348:	4652      	mov	r2, sl
 800d34a:	465b      	mov	r3, fp
 800d34c:	ec51 0b18 	vmov	r0, r1, d8
 800d350:	f7f2 ff5c 	bl	800020c <__adddf3>
 800d354:	4642      	mov	r2, r8
 800d356:	464b      	mov	r3, r9
 800d358:	f7f2 ff58 	bl	800020c <__adddf3>
 800d35c:	4632      	mov	r2, r6
 800d35e:	463b      	mov	r3, r7
 800d360:	f7f2 ff54 	bl	800020c <__adddf3>
 800d364:	2000      	movs	r0, #0
 800d366:	4632      	mov	r2, r6
 800d368:	463b      	mov	r3, r7
 800d36a:	4604      	mov	r4, r0
 800d36c:	460d      	mov	r5, r1
 800d36e:	f7f2 ff4b 	bl	8000208 <__aeabi_dsub>
 800d372:	4642      	mov	r2, r8
 800d374:	464b      	mov	r3, r9
 800d376:	f7f2 ff47 	bl	8000208 <__aeabi_dsub>
 800d37a:	ec53 2b18 	vmov	r2, r3, d8
 800d37e:	f7f2 ff43 	bl	8000208 <__aeabi_dsub>
 800d382:	4602      	mov	r2, r0
 800d384:	460b      	mov	r3, r1
 800d386:	4650      	mov	r0, sl
 800d388:	4659      	mov	r1, fp
 800d38a:	e610      	b.n	800cfae <__ieee754_pow+0x31e>
 800d38c:	2401      	movs	r4, #1
 800d38e:	e6a1      	b.n	800d0d4 <__ieee754_pow+0x444>
 800d390:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d3e0 <__ieee754_pow+0x750>
 800d394:	e617      	b.n	800cfc6 <__ieee754_pow+0x336>
 800d396:	bf00      	nop
 800d398:	4a454eef 	.word	0x4a454eef
 800d39c:	3fca7e28 	.word	0x3fca7e28
 800d3a0:	93c9db65 	.word	0x93c9db65
 800d3a4:	3fcd864a 	.word	0x3fcd864a
 800d3a8:	a91d4101 	.word	0xa91d4101
 800d3ac:	3fd17460 	.word	0x3fd17460
 800d3b0:	518f264d 	.word	0x518f264d
 800d3b4:	3fd55555 	.word	0x3fd55555
 800d3b8:	db6fabff 	.word	0xdb6fabff
 800d3bc:	3fdb6db6 	.word	0x3fdb6db6
 800d3c0:	33333303 	.word	0x33333303
 800d3c4:	3fe33333 	.word	0x3fe33333
 800d3c8:	e0000000 	.word	0xe0000000
 800d3cc:	3feec709 	.word	0x3feec709
 800d3d0:	dc3a03fd 	.word	0xdc3a03fd
 800d3d4:	3feec709 	.word	0x3feec709
 800d3d8:	145b01f5 	.word	0x145b01f5
 800d3dc:	be3e2fe0 	.word	0xbe3e2fe0
 800d3e0:	00000000 	.word	0x00000000
 800d3e4:	3ff00000 	.word	0x3ff00000
 800d3e8:	7ff00000 	.word	0x7ff00000
 800d3ec:	43400000 	.word	0x43400000
 800d3f0:	0003988e 	.word	0x0003988e
 800d3f4:	000bb679 	.word	0x000bb679
 800d3f8:	08023618 	.word	0x08023618
 800d3fc:	3ff00000 	.word	0x3ff00000
 800d400:	40080000 	.word	0x40080000
 800d404:	08023638 	.word	0x08023638
 800d408:	08023628 	.word	0x08023628
 800d40c:	a3b3      	add	r3, pc, #716	; (adr r3, 800d6dc <__ieee754_pow+0xa4c>)
 800d40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d412:	4640      	mov	r0, r8
 800d414:	4649      	mov	r1, r9
 800d416:	f7f2 fef9 	bl	800020c <__adddf3>
 800d41a:	4622      	mov	r2, r4
 800d41c:	ec41 0b1a 	vmov	d10, r0, r1
 800d420:	462b      	mov	r3, r5
 800d422:	4630      	mov	r0, r6
 800d424:	4639      	mov	r1, r7
 800d426:	f7f2 feef 	bl	8000208 <__aeabi_dsub>
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	ec51 0b1a 	vmov	r0, r1, d10
 800d432:	f7f3 fb31 	bl	8000a98 <__aeabi_dcmpgt>
 800d436:	2800      	cmp	r0, #0
 800d438:	f47f ae04 	bne.w	800d044 <__ieee754_pow+0x3b4>
 800d43c:	4aa2      	ldr	r2, [pc, #648]	; (800d6c8 <__ieee754_pow+0xa38>)
 800d43e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d442:	4293      	cmp	r3, r2
 800d444:	f340 8107 	ble.w	800d656 <__ieee754_pow+0x9c6>
 800d448:	151b      	asrs	r3, r3, #20
 800d44a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d44e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d452:	fa4a fa03 	asr.w	sl, sl, r3
 800d456:	44da      	add	sl, fp
 800d458:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d45c:	489b      	ldr	r0, [pc, #620]	; (800d6cc <__ieee754_pow+0xa3c>)
 800d45e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d462:	4108      	asrs	r0, r1
 800d464:	ea00 030a 	and.w	r3, r0, sl
 800d468:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d46c:	f1c1 0114 	rsb	r1, r1, #20
 800d470:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d474:	fa4a fa01 	asr.w	sl, sl, r1
 800d478:	f1bb 0f00 	cmp.w	fp, #0
 800d47c:	f04f 0200 	mov.w	r2, #0
 800d480:	4620      	mov	r0, r4
 800d482:	4629      	mov	r1, r5
 800d484:	bfb8      	it	lt
 800d486:	f1ca 0a00 	rsblt	sl, sl, #0
 800d48a:	f7f2 febd 	bl	8000208 <__aeabi_dsub>
 800d48e:	ec41 0b19 	vmov	d9, r0, r1
 800d492:	4642      	mov	r2, r8
 800d494:	464b      	mov	r3, r9
 800d496:	ec51 0b19 	vmov	r0, r1, d9
 800d49a:	f7f2 feb7 	bl	800020c <__adddf3>
 800d49e:	a37a      	add	r3, pc, #488	; (adr r3, 800d688 <__ieee754_pow+0x9f8>)
 800d4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a4:	2000      	movs	r0, #0
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	460d      	mov	r5, r1
 800d4aa:	f7f3 f865 	bl	8000578 <__aeabi_dmul>
 800d4ae:	ec53 2b19 	vmov	r2, r3, d9
 800d4b2:	4606      	mov	r6, r0
 800d4b4:	460f      	mov	r7, r1
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	4629      	mov	r1, r5
 800d4ba:	f7f2 fea5 	bl	8000208 <__aeabi_dsub>
 800d4be:	4602      	mov	r2, r0
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	4640      	mov	r0, r8
 800d4c4:	4649      	mov	r1, r9
 800d4c6:	f7f2 fe9f 	bl	8000208 <__aeabi_dsub>
 800d4ca:	a371      	add	r3, pc, #452	; (adr r3, 800d690 <__ieee754_pow+0xa00>)
 800d4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d0:	f7f3 f852 	bl	8000578 <__aeabi_dmul>
 800d4d4:	a370      	add	r3, pc, #448	; (adr r3, 800d698 <__ieee754_pow+0xa08>)
 800d4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4da:	4680      	mov	r8, r0
 800d4dc:	4689      	mov	r9, r1
 800d4de:	4620      	mov	r0, r4
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	f7f3 f849 	bl	8000578 <__aeabi_dmul>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	4640      	mov	r0, r8
 800d4ec:	4649      	mov	r1, r9
 800d4ee:	f7f2 fe8d 	bl	800020c <__adddf3>
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	460d      	mov	r5, r1
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	4639      	mov	r1, r7
 800d4fe:	f7f2 fe85 	bl	800020c <__adddf3>
 800d502:	4632      	mov	r2, r6
 800d504:	463b      	mov	r3, r7
 800d506:	4680      	mov	r8, r0
 800d508:	4689      	mov	r9, r1
 800d50a:	f7f2 fe7d 	bl	8000208 <__aeabi_dsub>
 800d50e:	4602      	mov	r2, r0
 800d510:	460b      	mov	r3, r1
 800d512:	4620      	mov	r0, r4
 800d514:	4629      	mov	r1, r5
 800d516:	f7f2 fe77 	bl	8000208 <__aeabi_dsub>
 800d51a:	4642      	mov	r2, r8
 800d51c:	4606      	mov	r6, r0
 800d51e:	460f      	mov	r7, r1
 800d520:	464b      	mov	r3, r9
 800d522:	4640      	mov	r0, r8
 800d524:	4649      	mov	r1, r9
 800d526:	f7f3 f827 	bl	8000578 <__aeabi_dmul>
 800d52a:	a35d      	add	r3, pc, #372	; (adr r3, 800d6a0 <__ieee754_pow+0xa10>)
 800d52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d530:	4604      	mov	r4, r0
 800d532:	460d      	mov	r5, r1
 800d534:	f7f3 f820 	bl	8000578 <__aeabi_dmul>
 800d538:	a35b      	add	r3, pc, #364	; (adr r3, 800d6a8 <__ieee754_pow+0xa18>)
 800d53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53e:	f7f2 fe63 	bl	8000208 <__aeabi_dsub>
 800d542:	4622      	mov	r2, r4
 800d544:	462b      	mov	r3, r5
 800d546:	f7f3 f817 	bl	8000578 <__aeabi_dmul>
 800d54a:	a359      	add	r3, pc, #356	; (adr r3, 800d6b0 <__ieee754_pow+0xa20>)
 800d54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d550:	f7f2 fe5c 	bl	800020c <__adddf3>
 800d554:	4622      	mov	r2, r4
 800d556:	462b      	mov	r3, r5
 800d558:	f7f3 f80e 	bl	8000578 <__aeabi_dmul>
 800d55c:	a356      	add	r3, pc, #344	; (adr r3, 800d6b8 <__ieee754_pow+0xa28>)
 800d55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d562:	f7f2 fe51 	bl	8000208 <__aeabi_dsub>
 800d566:	4622      	mov	r2, r4
 800d568:	462b      	mov	r3, r5
 800d56a:	f7f3 f805 	bl	8000578 <__aeabi_dmul>
 800d56e:	a354      	add	r3, pc, #336	; (adr r3, 800d6c0 <__ieee754_pow+0xa30>)
 800d570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d574:	f7f2 fe4a 	bl	800020c <__adddf3>
 800d578:	4622      	mov	r2, r4
 800d57a:	462b      	mov	r3, r5
 800d57c:	f7f2 fffc 	bl	8000578 <__aeabi_dmul>
 800d580:	4602      	mov	r2, r0
 800d582:	460b      	mov	r3, r1
 800d584:	4640      	mov	r0, r8
 800d586:	4649      	mov	r1, r9
 800d588:	f7f2 fe3e 	bl	8000208 <__aeabi_dsub>
 800d58c:	4604      	mov	r4, r0
 800d58e:	460d      	mov	r5, r1
 800d590:	4602      	mov	r2, r0
 800d592:	460b      	mov	r3, r1
 800d594:	4640      	mov	r0, r8
 800d596:	4649      	mov	r1, r9
 800d598:	f7f2 ffee 	bl	8000578 <__aeabi_dmul>
 800d59c:	2200      	movs	r2, #0
 800d59e:	ec41 0b19 	vmov	d9, r0, r1
 800d5a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	4629      	mov	r1, r5
 800d5aa:	f7f2 fe2d 	bl	8000208 <__aeabi_dsub>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	ec51 0b19 	vmov	r0, r1, d9
 800d5b6:	f7f3 f909 	bl	80007cc <__aeabi_ddiv>
 800d5ba:	4632      	mov	r2, r6
 800d5bc:	4604      	mov	r4, r0
 800d5be:	460d      	mov	r5, r1
 800d5c0:	463b      	mov	r3, r7
 800d5c2:	4640      	mov	r0, r8
 800d5c4:	4649      	mov	r1, r9
 800d5c6:	f7f2 ffd7 	bl	8000578 <__aeabi_dmul>
 800d5ca:	4632      	mov	r2, r6
 800d5cc:	463b      	mov	r3, r7
 800d5ce:	f7f2 fe1d 	bl	800020c <__adddf3>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	4629      	mov	r1, r5
 800d5da:	f7f2 fe15 	bl	8000208 <__aeabi_dsub>
 800d5de:	4642      	mov	r2, r8
 800d5e0:	464b      	mov	r3, r9
 800d5e2:	f7f2 fe11 	bl	8000208 <__aeabi_dsub>
 800d5e6:	460b      	mov	r3, r1
 800d5e8:	4602      	mov	r2, r0
 800d5ea:	4939      	ldr	r1, [pc, #228]	; (800d6d0 <__ieee754_pow+0xa40>)
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	f7f2 fe0b 	bl	8000208 <__aeabi_dsub>
 800d5f2:	ec41 0b10 	vmov	d0, r0, r1
 800d5f6:	ee10 3a90 	vmov	r3, s1
 800d5fa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d5fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d602:	da2b      	bge.n	800d65c <__ieee754_pow+0x9cc>
 800d604:	4650      	mov	r0, sl
 800d606:	f000 fa53 	bl	800dab0 <scalbn>
 800d60a:	ec51 0b10 	vmov	r0, r1, d0
 800d60e:	ec53 2b18 	vmov	r2, r3, d8
 800d612:	f7ff bbee 	b.w	800cdf2 <__ieee754_pow+0x162>
 800d616:	4b2f      	ldr	r3, [pc, #188]	; (800d6d4 <__ieee754_pow+0xa44>)
 800d618:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d61c:	429e      	cmp	r6, r3
 800d61e:	f77f af0d 	ble.w	800d43c <__ieee754_pow+0x7ac>
 800d622:	4b2d      	ldr	r3, [pc, #180]	; (800d6d8 <__ieee754_pow+0xa48>)
 800d624:	440b      	add	r3, r1
 800d626:	4303      	orrs	r3, r0
 800d628:	d009      	beq.n	800d63e <__ieee754_pow+0x9ae>
 800d62a:	ec51 0b18 	vmov	r0, r1, d8
 800d62e:	2200      	movs	r2, #0
 800d630:	2300      	movs	r3, #0
 800d632:	f7f3 fa13 	bl	8000a5c <__aeabi_dcmplt>
 800d636:	3800      	subs	r0, #0
 800d638:	bf18      	it	ne
 800d63a:	2001      	movne	r0, #1
 800d63c:	e448      	b.n	800ced0 <__ieee754_pow+0x240>
 800d63e:	4622      	mov	r2, r4
 800d640:	462b      	mov	r3, r5
 800d642:	f7f2 fde1 	bl	8000208 <__aeabi_dsub>
 800d646:	4642      	mov	r2, r8
 800d648:	464b      	mov	r3, r9
 800d64a:	f7f3 fa1b 	bl	8000a84 <__aeabi_dcmpge>
 800d64e:	2800      	cmp	r0, #0
 800d650:	f43f aef4 	beq.w	800d43c <__ieee754_pow+0x7ac>
 800d654:	e7e9      	b.n	800d62a <__ieee754_pow+0x99a>
 800d656:	f04f 0a00 	mov.w	sl, #0
 800d65a:	e71a      	b.n	800d492 <__ieee754_pow+0x802>
 800d65c:	ec51 0b10 	vmov	r0, r1, d0
 800d660:	4619      	mov	r1, r3
 800d662:	e7d4      	b.n	800d60e <__ieee754_pow+0x97e>
 800d664:	491a      	ldr	r1, [pc, #104]	; (800d6d0 <__ieee754_pow+0xa40>)
 800d666:	2000      	movs	r0, #0
 800d668:	f7ff bb31 	b.w	800ccce <__ieee754_pow+0x3e>
 800d66c:	2000      	movs	r0, #0
 800d66e:	2100      	movs	r1, #0
 800d670:	f7ff bb2d 	b.w	800ccce <__ieee754_pow+0x3e>
 800d674:	4630      	mov	r0, r6
 800d676:	4639      	mov	r1, r7
 800d678:	f7ff bb29 	b.w	800ccce <__ieee754_pow+0x3e>
 800d67c:	9204      	str	r2, [sp, #16]
 800d67e:	f7ff bb7b 	b.w	800cd78 <__ieee754_pow+0xe8>
 800d682:	2300      	movs	r3, #0
 800d684:	f7ff bb65 	b.w	800cd52 <__ieee754_pow+0xc2>
 800d688:	00000000 	.word	0x00000000
 800d68c:	3fe62e43 	.word	0x3fe62e43
 800d690:	fefa39ef 	.word	0xfefa39ef
 800d694:	3fe62e42 	.word	0x3fe62e42
 800d698:	0ca86c39 	.word	0x0ca86c39
 800d69c:	be205c61 	.word	0xbe205c61
 800d6a0:	72bea4d0 	.word	0x72bea4d0
 800d6a4:	3e663769 	.word	0x3e663769
 800d6a8:	c5d26bf1 	.word	0xc5d26bf1
 800d6ac:	3ebbbd41 	.word	0x3ebbbd41
 800d6b0:	af25de2c 	.word	0xaf25de2c
 800d6b4:	3f11566a 	.word	0x3f11566a
 800d6b8:	16bebd93 	.word	0x16bebd93
 800d6bc:	3f66c16c 	.word	0x3f66c16c
 800d6c0:	5555553e 	.word	0x5555553e
 800d6c4:	3fc55555 	.word	0x3fc55555
 800d6c8:	3fe00000 	.word	0x3fe00000
 800d6cc:	fff00000 	.word	0xfff00000
 800d6d0:	3ff00000 	.word	0x3ff00000
 800d6d4:	4090cbff 	.word	0x4090cbff
 800d6d8:	3f6f3400 	.word	0x3f6f3400
 800d6dc:	652b82fe 	.word	0x652b82fe
 800d6e0:	3c971547 	.word	0x3c971547

0800d6e4 <fabs>:
 800d6e4:	ec51 0b10 	vmov	r0, r1, d0
 800d6e8:	ee10 2a10 	vmov	r2, s0
 800d6ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d6f0:	ec43 2b10 	vmov	d0, r2, r3
 800d6f4:	4770      	bx	lr
	...

0800d6f8 <__kernel_cosf>:
 800d6f8:	ee10 3a10 	vmov	r3, s0
 800d6fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d700:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d708:	da05      	bge.n	800d716 <__kernel_cosf+0x1e>
 800d70a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d70e:	ee17 2a90 	vmov	r2, s15
 800d712:	2a00      	cmp	r2, #0
 800d714:	d03b      	beq.n	800d78e <__kernel_cosf+0x96>
 800d716:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d71a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800d794 <__kernel_cosf+0x9c>
 800d71e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800d798 <__kernel_cosf+0xa0>
 800d722:	4a1e      	ldr	r2, [pc, #120]	; (800d79c <__kernel_cosf+0xa4>)
 800d724:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d728:	4293      	cmp	r3, r2
 800d72a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800d7a0 <__kernel_cosf+0xa8>
 800d72e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d732:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800d7a4 <__kernel_cosf+0xac>
 800d736:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d73a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800d7a8 <__kernel_cosf+0xb0>
 800d73e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d742:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800d7ac <__kernel_cosf+0xb4>
 800d746:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d74a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800d74e:	ee26 6a07 	vmul.f32	s12, s12, s14
 800d752:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d756:	eee7 0a06 	vfma.f32	s1, s14, s12
 800d75a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d75e:	dc04      	bgt.n	800d76a <__kernel_cosf+0x72>
 800d760:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d764:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800d768:	4770      	bx	lr
 800d76a:	4a11      	ldr	r2, [pc, #68]	; (800d7b0 <__kernel_cosf+0xb8>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	bfda      	itte	le
 800d770:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800d774:	ee07 3a10 	vmovle	s14, r3
 800d778:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800d77c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d780:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800d784:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d788:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d78c:	4770      	bx	lr
 800d78e:	eeb0 0a66 	vmov.f32	s0, s13
 800d792:	4770      	bx	lr
 800d794:	ad47d74e 	.word	0xad47d74e
 800d798:	310f74f6 	.word	0x310f74f6
 800d79c:	3e999999 	.word	0x3e999999
 800d7a0:	b493f27c 	.word	0xb493f27c
 800d7a4:	37d00d01 	.word	0x37d00d01
 800d7a8:	bab60b61 	.word	0xbab60b61
 800d7ac:	3d2aaaab 	.word	0x3d2aaaab
 800d7b0:	3f480000 	.word	0x3f480000

0800d7b4 <__kernel_sinf>:
 800d7b4:	ee10 3a10 	vmov	r3, s0
 800d7b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d7bc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d7c0:	da04      	bge.n	800d7cc <__kernel_sinf+0x18>
 800d7c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d7c6:	ee17 3a90 	vmov	r3, s15
 800d7ca:	b35b      	cbz	r3, 800d824 <__kernel_sinf+0x70>
 800d7cc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d7d0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800d828 <__kernel_sinf+0x74>
 800d7d4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800d82c <__kernel_sinf+0x78>
 800d7d8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d7dc:	eddf 7a14 	vldr	s15, [pc, #80]	; 800d830 <__kernel_sinf+0x7c>
 800d7e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d7e4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800d834 <__kernel_sinf+0x80>
 800d7e8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d7ec:	eddf 7a12 	vldr	s15, [pc, #72]	; 800d838 <__kernel_sinf+0x84>
 800d7f0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d7f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d7f8:	b930      	cbnz	r0, 800d808 <__kernel_sinf+0x54>
 800d7fa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800d83c <__kernel_sinf+0x88>
 800d7fe:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d802:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d806:	4770      	bx	lr
 800d808:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d80c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d810:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d814:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d818:	eddf 7a09 	vldr	s15, [pc, #36]	; 800d840 <__kernel_sinf+0x8c>
 800d81c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d820:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop
 800d828:	2f2ec9d3 	.word	0x2f2ec9d3
 800d82c:	b2d72f34 	.word	0xb2d72f34
 800d830:	3638ef1b 	.word	0x3638ef1b
 800d834:	b9500d01 	.word	0xb9500d01
 800d838:	3c088889 	.word	0x3c088889
 800d83c:	be2aaaab 	.word	0xbe2aaaab
 800d840:	3e2aaaab 	.word	0x3e2aaaab

0800d844 <__ieee754_rem_pio2f>:
 800d844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d846:	ee10 6a10 	vmov	r6, s0
 800d84a:	4b86      	ldr	r3, [pc, #536]	; (800da64 <__ieee754_rem_pio2f+0x220>)
 800d84c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800d850:	429d      	cmp	r5, r3
 800d852:	b087      	sub	sp, #28
 800d854:	4604      	mov	r4, r0
 800d856:	dc05      	bgt.n	800d864 <__ieee754_rem_pio2f+0x20>
 800d858:	2300      	movs	r3, #0
 800d85a:	ed80 0a00 	vstr	s0, [r0]
 800d85e:	6043      	str	r3, [r0, #4]
 800d860:	2000      	movs	r0, #0
 800d862:	e020      	b.n	800d8a6 <__ieee754_rem_pio2f+0x62>
 800d864:	4b80      	ldr	r3, [pc, #512]	; (800da68 <__ieee754_rem_pio2f+0x224>)
 800d866:	429d      	cmp	r5, r3
 800d868:	dc38      	bgt.n	800d8dc <__ieee754_rem_pio2f+0x98>
 800d86a:	2e00      	cmp	r6, #0
 800d86c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800da6c <__ieee754_rem_pio2f+0x228>
 800d870:	4b7f      	ldr	r3, [pc, #508]	; (800da70 <__ieee754_rem_pio2f+0x22c>)
 800d872:	f025 050f 	bic.w	r5, r5, #15
 800d876:	dd18      	ble.n	800d8aa <__ieee754_rem_pio2f+0x66>
 800d878:	429d      	cmp	r5, r3
 800d87a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d87e:	bf09      	itett	eq
 800d880:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800da74 <__ieee754_rem_pio2f+0x230>
 800d884:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800da78 <__ieee754_rem_pio2f+0x234>
 800d888:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d88c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800da7c <__ieee754_rem_pio2f+0x238>
 800d890:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800d894:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d898:	edc0 6a00 	vstr	s13, [r0]
 800d89c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d8a0:	edc0 7a01 	vstr	s15, [r0, #4]
 800d8a4:	2001      	movs	r0, #1
 800d8a6:	b007      	add	sp, #28
 800d8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8aa:	429d      	cmp	r5, r3
 800d8ac:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d8b0:	bf09      	itett	eq
 800d8b2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800da74 <__ieee754_rem_pio2f+0x230>
 800d8b6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800da78 <__ieee754_rem_pio2f+0x234>
 800d8ba:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d8be:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800da7c <__ieee754_rem_pio2f+0x238>
 800d8c2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d8c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d8ca:	edc0 6a00 	vstr	s13, [r0]
 800d8ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8d2:	edc0 7a01 	vstr	s15, [r0, #4]
 800d8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8da:	e7e4      	b.n	800d8a6 <__ieee754_rem_pio2f+0x62>
 800d8dc:	4b68      	ldr	r3, [pc, #416]	; (800da80 <__ieee754_rem_pio2f+0x23c>)
 800d8de:	429d      	cmp	r5, r3
 800d8e0:	dc71      	bgt.n	800d9c6 <__ieee754_rem_pio2f+0x182>
 800d8e2:	f000 f8db 	bl	800da9c <fabsf>
 800d8e6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800da84 <__ieee754_rem_pio2f+0x240>
 800d8ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d8ee:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d8f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d8fa:	ee17 0a90 	vmov	r0, s15
 800d8fe:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800da6c <__ieee754_rem_pio2f+0x228>
 800d902:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d906:	281f      	cmp	r0, #31
 800d908:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800da78 <__ieee754_rem_pio2f+0x234>
 800d90c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d910:	eeb1 6a47 	vneg.f32	s12, s14
 800d914:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d918:	ee16 2a90 	vmov	r2, s13
 800d91c:	dc1c      	bgt.n	800d958 <__ieee754_rem_pio2f+0x114>
 800d91e:	495a      	ldr	r1, [pc, #360]	; (800da88 <__ieee754_rem_pio2f+0x244>)
 800d920:	1e47      	subs	r7, r0, #1
 800d922:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800d926:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800d92a:	428b      	cmp	r3, r1
 800d92c:	d014      	beq.n	800d958 <__ieee754_rem_pio2f+0x114>
 800d92e:	6022      	str	r2, [r4, #0]
 800d930:	ed94 7a00 	vldr	s14, [r4]
 800d934:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d938:	2e00      	cmp	r6, #0
 800d93a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d93e:	ed84 0a01 	vstr	s0, [r4, #4]
 800d942:	dab0      	bge.n	800d8a6 <__ieee754_rem_pio2f+0x62>
 800d944:	eeb1 7a47 	vneg.f32	s14, s14
 800d948:	eeb1 0a40 	vneg.f32	s0, s0
 800d94c:	ed84 7a00 	vstr	s14, [r4]
 800d950:	ed84 0a01 	vstr	s0, [r4, #4]
 800d954:	4240      	negs	r0, r0
 800d956:	e7a6      	b.n	800d8a6 <__ieee754_rem_pio2f+0x62>
 800d958:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d95c:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800d960:	2908      	cmp	r1, #8
 800d962:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d966:	dde2      	ble.n	800d92e <__ieee754_rem_pio2f+0xea>
 800d968:	eddf 5a42 	vldr	s11, [pc, #264]	; 800da74 <__ieee754_rem_pio2f+0x230>
 800d96c:	eef0 6a40 	vmov.f32	s13, s0
 800d970:	eee6 6a25 	vfma.f32	s13, s12, s11
 800d974:	ee70 7a66 	vsub.f32	s15, s0, s13
 800d978:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d97c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800da7c <__ieee754_rem_pio2f+0x238>
 800d980:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d984:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d988:	ee15 2a90 	vmov	r2, s11
 800d98c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d990:	1a5b      	subs	r3, r3, r1
 800d992:	2b19      	cmp	r3, #25
 800d994:	dc04      	bgt.n	800d9a0 <__ieee754_rem_pio2f+0x15c>
 800d996:	edc4 5a00 	vstr	s11, [r4]
 800d99a:	eeb0 0a66 	vmov.f32	s0, s13
 800d99e:	e7c7      	b.n	800d930 <__ieee754_rem_pio2f+0xec>
 800d9a0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800da8c <__ieee754_rem_pio2f+0x248>
 800d9a4:	eeb0 0a66 	vmov.f32	s0, s13
 800d9a8:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d9ac:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d9b0:	eddf 6a37 	vldr	s13, [pc, #220]	; 800da90 <__ieee754_rem_pio2f+0x24c>
 800d9b4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d9b8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d9bc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d9c0:	ed84 7a00 	vstr	s14, [r4]
 800d9c4:	e7b4      	b.n	800d930 <__ieee754_rem_pio2f+0xec>
 800d9c6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d9ca:	db06      	blt.n	800d9da <__ieee754_rem_pio2f+0x196>
 800d9cc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d9d0:	edc0 7a01 	vstr	s15, [r0, #4]
 800d9d4:	edc0 7a00 	vstr	s15, [r0]
 800d9d8:	e742      	b.n	800d860 <__ieee754_rem_pio2f+0x1c>
 800d9da:	15ea      	asrs	r2, r5, #23
 800d9dc:	3a86      	subs	r2, #134	; 0x86
 800d9de:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d9e2:	ee07 3a90 	vmov	s15, r3
 800d9e6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d9ea:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800da94 <__ieee754_rem_pio2f+0x250>
 800d9ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d9f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9f6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d9fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d9fe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800da02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800da06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da0a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800da0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800da12:	eef5 7a40 	vcmp.f32	s15, #0.0
 800da16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da1a:	edcd 7a05 	vstr	s15, [sp, #20]
 800da1e:	d11e      	bne.n	800da5e <__ieee754_rem_pio2f+0x21a>
 800da20:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800da24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da28:	bf14      	ite	ne
 800da2a:	2302      	movne	r3, #2
 800da2c:	2301      	moveq	r3, #1
 800da2e:	491a      	ldr	r1, [pc, #104]	; (800da98 <__ieee754_rem_pio2f+0x254>)
 800da30:	9101      	str	r1, [sp, #4]
 800da32:	2102      	movs	r1, #2
 800da34:	9100      	str	r1, [sp, #0]
 800da36:	a803      	add	r0, sp, #12
 800da38:	4621      	mov	r1, r4
 800da3a:	f000 f9c1 	bl	800ddc0 <__kernel_rem_pio2f>
 800da3e:	2e00      	cmp	r6, #0
 800da40:	f6bf af31 	bge.w	800d8a6 <__ieee754_rem_pio2f+0x62>
 800da44:	edd4 7a00 	vldr	s15, [r4]
 800da48:	eef1 7a67 	vneg.f32	s15, s15
 800da4c:	edc4 7a00 	vstr	s15, [r4]
 800da50:	edd4 7a01 	vldr	s15, [r4, #4]
 800da54:	eef1 7a67 	vneg.f32	s15, s15
 800da58:	edc4 7a01 	vstr	s15, [r4, #4]
 800da5c:	e77a      	b.n	800d954 <__ieee754_rem_pio2f+0x110>
 800da5e:	2303      	movs	r3, #3
 800da60:	e7e5      	b.n	800da2e <__ieee754_rem_pio2f+0x1ea>
 800da62:	bf00      	nop
 800da64:	3f490fd8 	.word	0x3f490fd8
 800da68:	4016cbe3 	.word	0x4016cbe3
 800da6c:	3fc90f80 	.word	0x3fc90f80
 800da70:	3fc90fd0 	.word	0x3fc90fd0
 800da74:	37354400 	.word	0x37354400
 800da78:	37354443 	.word	0x37354443
 800da7c:	2e85a308 	.word	0x2e85a308
 800da80:	43490f80 	.word	0x43490f80
 800da84:	3f22f984 	.word	0x3f22f984
 800da88:	08023648 	.word	0x08023648
 800da8c:	2e85a300 	.word	0x2e85a300
 800da90:	248d3132 	.word	0x248d3132
 800da94:	43800000 	.word	0x43800000
 800da98:	080236c8 	.word	0x080236c8

0800da9c <fabsf>:
 800da9c:	ee10 3a10 	vmov	r3, s0
 800daa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800daa4:	ee00 3a10 	vmov	s0, r3
 800daa8:	4770      	bx	lr
 800daaa:	0000      	movs	r0, r0
 800daac:	0000      	movs	r0, r0
	...

0800dab0 <scalbn>:
 800dab0:	b570      	push	{r4, r5, r6, lr}
 800dab2:	ec55 4b10 	vmov	r4, r5, d0
 800dab6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800daba:	4606      	mov	r6, r0
 800dabc:	462b      	mov	r3, r5
 800dabe:	b999      	cbnz	r1, 800dae8 <scalbn+0x38>
 800dac0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dac4:	4323      	orrs	r3, r4
 800dac6:	d03f      	beq.n	800db48 <scalbn+0x98>
 800dac8:	4b35      	ldr	r3, [pc, #212]	; (800dba0 <scalbn+0xf0>)
 800daca:	4629      	mov	r1, r5
 800dacc:	ee10 0a10 	vmov	r0, s0
 800dad0:	2200      	movs	r2, #0
 800dad2:	f7f2 fd51 	bl	8000578 <__aeabi_dmul>
 800dad6:	4b33      	ldr	r3, [pc, #204]	; (800dba4 <scalbn+0xf4>)
 800dad8:	429e      	cmp	r6, r3
 800dada:	4604      	mov	r4, r0
 800dadc:	460d      	mov	r5, r1
 800dade:	da10      	bge.n	800db02 <scalbn+0x52>
 800dae0:	a327      	add	r3, pc, #156	; (adr r3, 800db80 <scalbn+0xd0>)
 800dae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae6:	e01f      	b.n	800db28 <scalbn+0x78>
 800dae8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800daec:	4291      	cmp	r1, r2
 800daee:	d10c      	bne.n	800db0a <scalbn+0x5a>
 800daf0:	ee10 2a10 	vmov	r2, s0
 800daf4:	4620      	mov	r0, r4
 800daf6:	4629      	mov	r1, r5
 800daf8:	f7f2 fb88 	bl	800020c <__adddf3>
 800dafc:	4604      	mov	r4, r0
 800dafe:	460d      	mov	r5, r1
 800db00:	e022      	b.n	800db48 <scalbn+0x98>
 800db02:	460b      	mov	r3, r1
 800db04:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800db08:	3936      	subs	r1, #54	; 0x36
 800db0a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800db0e:	4296      	cmp	r6, r2
 800db10:	dd0d      	ble.n	800db2e <scalbn+0x7e>
 800db12:	2d00      	cmp	r5, #0
 800db14:	a11c      	add	r1, pc, #112	; (adr r1, 800db88 <scalbn+0xd8>)
 800db16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db1a:	da02      	bge.n	800db22 <scalbn+0x72>
 800db1c:	a11c      	add	r1, pc, #112	; (adr r1, 800db90 <scalbn+0xe0>)
 800db1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db22:	a319      	add	r3, pc, #100	; (adr r3, 800db88 <scalbn+0xd8>)
 800db24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db28:	f7f2 fd26 	bl	8000578 <__aeabi_dmul>
 800db2c:	e7e6      	b.n	800dafc <scalbn+0x4c>
 800db2e:	1872      	adds	r2, r6, r1
 800db30:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800db34:	428a      	cmp	r2, r1
 800db36:	dcec      	bgt.n	800db12 <scalbn+0x62>
 800db38:	2a00      	cmp	r2, #0
 800db3a:	dd08      	ble.n	800db4e <scalbn+0x9e>
 800db3c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800db40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800db44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800db48:	ec45 4b10 	vmov	d0, r4, r5
 800db4c:	bd70      	pop	{r4, r5, r6, pc}
 800db4e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800db52:	da08      	bge.n	800db66 <scalbn+0xb6>
 800db54:	2d00      	cmp	r5, #0
 800db56:	a10a      	add	r1, pc, #40	; (adr r1, 800db80 <scalbn+0xd0>)
 800db58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db5c:	dac0      	bge.n	800dae0 <scalbn+0x30>
 800db5e:	a10e      	add	r1, pc, #56	; (adr r1, 800db98 <scalbn+0xe8>)
 800db60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db64:	e7bc      	b.n	800dae0 <scalbn+0x30>
 800db66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800db6a:	3236      	adds	r2, #54	; 0x36
 800db6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800db70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800db74:	4620      	mov	r0, r4
 800db76:	4b0c      	ldr	r3, [pc, #48]	; (800dba8 <scalbn+0xf8>)
 800db78:	2200      	movs	r2, #0
 800db7a:	e7d5      	b.n	800db28 <scalbn+0x78>
 800db7c:	f3af 8000 	nop.w
 800db80:	c2f8f359 	.word	0xc2f8f359
 800db84:	01a56e1f 	.word	0x01a56e1f
 800db88:	8800759c 	.word	0x8800759c
 800db8c:	7e37e43c 	.word	0x7e37e43c
 800db90:	8800759c 	.word	0x8800759c
 800db94:	fe37e43c 	.word	0xfe37e43c
 800db98:	c2f8f359 	.word	0xc2f8f359
 800db9c:	81a56e1f 	.word	0x81a56e1f
 800dba0:	43500000 	.word	0x43500000
 800dba4:	ffff3cb0 	.word	0xffff3cb0
 800dba8:	3c900000 	.word	0x3c900000

0800dbac <with_errno>:
 800dbac:	b570      	push	{r4, r5, r6, lr}
 800dbae:	4604      	mov	r4, r0
 800dbb0:	460d      	mov	r5, r1
 800dbb2:	4616      	mov	r6, r2
 800dbb4:	f7fe fee0 	bl	800c978 <__errno>
 800dbb8:	4629      	mov	r1, r5
 800dbba:	6006      	str	r6, [r0, #0]
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	bd70      	pop	{r4, r5, r6, pc}

0800dbc0 <xflow>:
 800dbc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbc2:	4614      	mov	r4, r2
 800dbc4:	461d      	mov	r5, r3
 800dbc6:	b108      	cbz	r0, 800dbcc <xflow+0xc>
 800dbc8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dbcc:	e9cd 2300 	strd	r2, r3, [sp]
 800dbd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	4629      	mov	r1, r5
 800dbd8:	f7f2 fcce 	bl	8000578 <__aeabi_dmul>
 800dbdc:	2222      	movs	r2, #34	; 0x22
 800dbde:	b003      	add	sp, #12
 800dbe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbe4:	f7ff bfe2 	b.w	800dbac <with_errno>

0800dbe8 <__math_uflow>:
 800dbe8:	b508      	push	{r3, lr}
 800dbea:	2200      	movs	r2, #0
 800dbec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dbf0:	f7ff ffe6 	bl	800dbc0 <xflow>
 800dbf4:	ec41 0b10 	vmov	d0, r0, r1
 800dbf8:	bd08      	pop	{r3, pc}

0800dbfa <__math_oflow>:
 800dbfa:	b508      	push	{r3, lr}
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800dc02:	f7ff ffdd 	bl	800dbc0 <xflow>
 800dc06:	ec41 0b10 	vmov	d0, r0, r1
 800dc0a:	bd08      	pop	{r3, pc}

0800dc0c <__ieee754_sqrt>:
 800dc0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc10:	ec55 4b10 	vmov	r4, r5, d0
 800dc14:	4e67      	ldr	r6, [pc, #412]	; (800ddb4 <__ieee754_sqrt+0x1a8>)
 800dc16:	43ae      	bics	r6, r5
 800dc18:	ee10 0a10 	vmov	r0, s0
 800dc1c:	ee10 2a10 	vmov	r2, s0
 800dc20:	4629      	mov	r1, r5
 800dc22:	462b      	mov	r3, r5
 800dc24:	d10d      	bne.n	800dc42 <__ieee754_sqrt+0x36>
 800dc26:	f7f2 fca7 	bl	8000578 <__aeabi_dmul>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	4620      	mov	r0, r4
 800dc30:	4629      	mov	r1, r5
 800dc32:	f7f2 faeb 	bl	800020c <__adddf3>
 800dc36:	4604      	mov	r4, r0
 800dc38:	460d      	mov	r5, r1
 800dc3a:	ec45 4b10 	vmov	d0, r4, r5
 800dc3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc42:	2d00      	cmp	r5, #0
 800dc44:	dc0b      	bgt.n	800dc5e <__ieee754_sqrt+0x52>
 800dc46:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dc4a:	4326      	orrs	r6, r4
 800dc4c:	d0f5      	beq.n	800dc3a <__ieee754_sqrt+0x2e>
 800dc4e:	b135      	cbz	r5, 800dc5e <__ieee754_sqrt+0x52>
 800dc50:	f7f2 fada 	bl	8000208 <__aeabi_dsub>
 800dc54:	4602      	mov	r2, r0
 800dc56:	460b      	mov	r3, r1
 800dc58:	f7f2 fdb8 	bl	80007cc <__aeabi_ddiv>
 800dc5c:	e7eb      	b.n	800dc36 <__ieee754_sqrt+0x2a>
 800dc5e:	1509      	asrs	r1, r1, #20
 800dc60:	f000 808d 	beq.w	800dd7e <__ieee754_sqrt+0x172>
 800dc64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc68:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800dc6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc70:	07c9      	lsls	r1, r1, #31
 800dc72:	bf5c      	itt	pl
 800dc74:	005b      	lslpl	r3, r3, #1
 800dc76:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800dc7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dc7e:	bf58      	it	pl
 800dc80:	0052      	lslpl	r2, r2, #1
 800dc82:	2500      	movs	r5, #0
 800dc84:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dc88:	1076      	asrs	r6, r6, #1
 800dc8a:	0052      	lsls	r2, r2, #1
 800dc8c:	f04f 0e16 	mov.w	lr, #22
 800dc90:	46ac      	mov	ip, r5
 800dc92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dc96:	eb0c 0001 	add.w	r0, ip, r1
 800dc9a:	4298      	cmp	r0, r3
 800dc9c:	bfde      	ittt	le
 800dc9e:	1a1b      	suble	r3, r3, r0
 800dca0:	eb00 0c01 	addle.w	ip, r0, r1
 800dca4:	186d      	addle	r5, r5, r1
 800dca6:	005b      	lsls	r3, r3, #1
 800dca8:	f1be 0e01 	subs.w	lr, lr, #1
 800dcac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dcb0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dcb4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800dcb8:	d1ed      	bne.n	800dc96 <__ieee754_sqrt+0x8a>
 800dcba:	4674      	mov	r4, lr
 800dcbc:	2720      	movs	r7, #32
 800dcbe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800dcc2:	4563      	cmp	r3, ip
 800dcc4:	eb01 000e 	add.w	r0, r1, lr
 800dcc8:	dc02      	bgt.n	800dcd0 <__ieee754_sqrt+0xc4>
 800dcca:	d113      	bne.n	800dcf4 <__ieee754_sqrt+0xe8>
 800dccc:	4290      	cmp	r0, r2
 800dcce:	d811      	bhi.n	800dcf4 <__ieee754_sqrt+0xe8>
 800dcd0:	2800      	cmp	r0, #0
 800dcd2:	eb00 0e01 	add.w	lr, r0, r1
 800dcd6:	da57      	bge.n	800dd88 <__ieee754_sqrt+0x17c>
 800dcd8:	f1be 0f00 	cmp.w	lr, #0
 800dcdc:	db54      	blt.n	800dd88 <__ieee754_sqrt+0x17c>
 800dcde:	f10c 0801 	add.w	r8, ip, #1
 800dce2:	eba3 030c 	sub.w	r3, r3, ip
 800dce6:	4290      	cmp	r0, r2
 800dce8:	bf88      	it	hi
 800dcea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dcee:	1a12      	subs	r2, r2, r0
 800dcf0:	440c      	add	r4, r1
 800dcf2:	46c4      	mov	ip, r8
 800dcf4:	005b      	lsls	r3, r3, #1
 800dcf6:	3f01      	subs	r7, #1
 800dcf8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dcfc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dd00:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800dd04:	d1dd      	bne.n	800dcc2 <__ieee754_sqrt+0xb6>
 800dd06:	4313      	orrs	r3, r2
 800dd08:	d01b      	beq.n	800dd42 <__ieee754_sqrt+0x136>
 800dd0a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800ddb8 <__ieee754_sqrt+0x1ac>
 800dd0e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800ddbc <__ieee754_sqrt+0x1b0>
 800dd12:	e9da 0100 	ldrd	r0, r1, [sl]
 800dd16:	e9db 2300 	ldrd	r2, r3, [fp]
 800dd1a:	f7f2 fa75 	bl	8000208 <__aeabi_dsub>
 800dd1e:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd22:	4602      	mov	r2, r0
 800dd24:	460b      	mov	r3, r1
 800dd26:	4640      	mov	r0, r8
 800dd28:	4649      	mov	r1, r9
 800dd2a:	f7f2 fea1 	bl	8000a70 <__aeabi_dcmple>
 800dd2e:	b140      	cbz	r0, 800dd42 <__ieee754_sqrt+0x136>
 800dd30:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dd34:	e9da 0100 	ldrd	r0, r1, [sl]
 800dd38:	e9db 2300 	ldrd	r2, r3, [fp]
 800dd3c:	d126      	bne.n	800dd8c <__ieee754_sqrt+0x180>
 800dd3e:	3501      	adds	r5, #1
 800dd40:	463c      	mov	r4, r7
 800dd42:	106a      	asrs	r2, r5, #1
 800dd44:	0863      	lsrs	r3, r4, #1
 800dd46:	07e9      	lsls	r1, r5, #31
 800dd48:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800dd4c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800dd50:	bf48      	it	mi
 800dd52:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800dd56:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800dd5a:	461c      	mov	r4, r3
 800dd5c:	e76d      	b.n	800dc3a <__ieee754_sqrt+0x2e>
 800dd5e:	0ad3      	lsrs	r3, r2, #11
 800dd60:	3815      	subs	r0, #21
 800dd62:	0552      	lsls	r2, r2, #21
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d0fa      	beq.n	800dd5e <__ieee754_sqrt+0x152>
 800dd68:	02dc      	lsls	r4, r3, #11
 800dd6a:	d50a      	bpl.n	800dd82 <__ieee754_sqrt+0x176>
 800dd6c:	f1c1 0420 	rsb	r4, r1, #32
 800dd70:	fa22 f404 	lsr.w	r4, r2, r4
 800dd74:	1e4d      	subs	r5, r1, #1
 800dd76:	408a      	lsls	r2, r1
 800dd78:	4323      	orrs	r3, r4
 800dd7a:	1b41      	subs	r1, r0, r5
 800dd7c:	e772      	b.n	800dc64 <__ieee754_sqrt+0x58>
 800dd7e:	4608      	mov	r0, r1
 800dd80:	e7f0      	b.n	800dd64 <__ieee754_sqrt+0x158>
 800dd82:	005b      	lsls	r3, r3, #1
 800dd84:	3101      	adds	r1, #1
 800dd86:	e7ef      	b.n	800dd68 <__ieee754_sqrt+0x15c>
 800dd88:	46e0      	mov	r8, ip
 800dd8a:	e7aa      	b.n	800dce2 <__ieee754_sqrt+0xd6>
 800dd8c:	f7f2 fa3e 	bl	800020c <__adddf3>
 800dd90:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd94:	4602      	mov	r2, r0
 800dd96:	460b      	mov	r3, r1
 800dd98:	4640      	mov	r0, r8
 800dd9a:	4649      	mov	r1, r9
 800dd9c:	f7f2 fe5e 	bl	8000a5c <__aeabi_dcmplt>
 800dda0:	b120      	cbz	r0, 800ddac <__ieee754_sqrt+0x1a0>
 800dda2:	1ca0      	adds	r0, r4, #2
 800dda4:	bf08      	it	eq
 800dda6:	3501      	addeq	r5, #1
 800dda8:	3402      	adds	r4, #2
 800ddaa:	e7ca      	b.n	800dd42 <__ieee754_sqrt+0x136>
 800ddac:	3401      	adds	r4, #1
 800ddae:	f024 0401 	bic.w	r4, r4, #1
 800ddb2:	e7c6      	b.n	800dd42 <__ieee754_sqrt+0x136>
 800ddb4:	7ff00000 	.word	0x7ff00000
 800ddb8:	20000070 	.word	0x20000070
 800ddbc:	20000078 	.word	0x20000078

0800ddc0 <__kernel_rem_pio2f>:
 800ddc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc4:	ed2d 8b04 	vpush	{d8-d9}
 800ddc8:	b0d9      	sub	sp, #356	; 0x164
 800ddca:	4688      	mov	r8, r1
 800ddcc:	9002      	str	r0, [sp, #8]
 800ddce:	49b8      	ldr	r1, [pc, #736]	; (800e0b0 <__kernel_rem_pio2f+0x2f0>)
 800ddd0:	9866      	ldr	r0, [sp, #408]	; 0x198
 800ddd2:	9301      	str	r3, [sp, #4]
 800ddd4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800ddd8:	9901      	ldr	r1, [sp, #4]
 800ddda:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800dddc:	f101 3bff 	add.w	fp, r1, #4294967295
 800dde0:	1d11      	adds	r1, r2, #4
 800dde2:	db25      	blt.n	800de30 <__kernel_rem_pio2f+0x70>
 800dde4:	1ed0      	subs	r0, r2, #3
 800dde6:	bf48      	it	mi
 800dde8:	1d10      	addmi	r0, r2, #4
 800ddea:	10c0      	asrs	r0, r0, #3
 800ddec:	1c45      	adds	r5, r0, #1
 800ddee:	00e9      	lsls	r1, r5, #3
 800ddf0:	eba0 070b 	sub.w	r7, r0, fp
 800ddf4:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800e0c0 <__kernel_rem_pio2f+0x300>
 800ddf8:	9103      	str	r1, [sp, #12]
 800ddfa:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800ddfe:	eb0a 0c0b 	add.w	ip, sl, fp
 800de02:	ae1c      	add	r6, sp, #112	; 0x70
 800de04:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800de08:	2400      	movs	r4, #0
 800de0a:	4564      	cmp	r4, ip
 800de0c:	dd12      	ble.n	800de34 <__kernel_rem_pio2f+0x74>
 800de0e:	9901      	ldr	r1, [sp, #4]
 800de10:	ac1c      	add	r4, sp, #112	; 0x70
 800de12:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800de16:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800de1a:	f04f 0c00 	mov.w	ip, #0
 800de1e:	45d4      	cmp	ip, sl
 800de20:	dc27      	bgt.n	800de72 <__kernel_rem_pio2f+0xb2>
 800de22:	f8dd e008 	ldr.w	lr, [sp, #8]
 800de26:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800e0c0 <__kernel_rem_pio2f+0x300>
 800de2a:	4627      	mov	r7, r4
 800de2c:	2600      	movs	r6, #0
 800de2e:	e016      	b.n	800de5e <__kernel_rem_pio2f+0x9e>
 800de30:	2000      	movs	r0, #0
 800de32:	e7db      	b.n	800ddec <__kernel_rem_pio2f+0x2c>
 800de34:	42e7      	cmn	r7, r4
 800de36:	bf5d      	ittte	pl
 800de38:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800de3c:	ee07 1a90 	vmovpl	s15, r1
 800de40:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800de44:	eef0 7a47 	vmovmi.f32	s15, s14
 800de48:	ece6 7a01 	vstmia	r6!, {s15}
 800de4c:	3401      	adds	r4, #1
 800de4e:	e7dc      	b.n	800de0a <__kernel_rem_pio2f+0x4a>
 800de50:	ecfe 6a01 	vldmia	lr!, {s13}
 800de54:	ed97 7a00 	vldr	s14, [r7]
 800de58:	eee6 7a87 	vfma.f32	s15, s13, s14
 800de5c:	3601      	adds	r6, #1
 800de5e:	455e      	cmp	r6, fp
 800de60:	f1a7 0704 	sub.w	r7, r7, #4
 800de64:	ddf4      	ble.n	800de50 <__kernel_rem_pio2f+0x90>
 800de66:	ece9 7a01 	vstmia	r9!, {s15}
 800de6a:	f10c 0c01 	add.w	ip, ip, #1
 800de6e:	3404      	adds	r4, #4
 800de70:	e7d5      	b.n	800de1e <__kernel_rem_pio2f+0x5e>
 800de72:	a908      	add	r1, sp, #32
 800de74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de78:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800de7c:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800e0bc <__kernel_rem_pio2f+0x2fc>
 800de80:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800e0b8 <__kernel_rem_pio2f+0x2f8>
 800de84:	9105      	str	r1, [sp, #20]
 800de86:	9304      	str	r3, [sp, #16]
 800de88:	4656      	mov	r6, sl
 800de8a:	00b3      	lsls	r3, r6, #2
 800de8c:	9306      	str	r3, [sp, #24]
 800de8e:	ab58      	add	r3, sp, #352	; 0x160
 800de90:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800de94:	ac08      	add	r4, sp, #32
 800de96:	ab44      	add	r3, sp, #272	; 0x110
 800de98:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800de9c:	46a4      	mov	ip, r4
 800de9e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800dea2:	4637      	mov	r7, r6
 800dea4:	2f00      	cmp	r7, #0
 800dea6:	f1a0 0004 	sub.w	r0, r0, #4
 800deaa:	dc4a      	bgt.n	800df42 <__kernel_rem_pio2f+0x182>
 800deac:	4628      	mov	r0, r5
 800deae:	9207      	str	r2, [sp, #28]
 800deb0:	f000 f9f8 	bl	800e2a4 <scalbnf>
 800deb4:	eeb0 8a40 	vmov.f32	s16, s0
 800deb8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800debc:	ee28 0a00 	vmul.f32	s0, s16, s0
 800dec0:	f000 fa56 	bl	800e370 <floorf>
 800dec4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800dec8:	eea0 8a67 	vfms.f32	s16, s0, s15
 800decc:	2d00      	cmp	r5, #0
 800dece:	9a07      	ldr	r2, [sp, #28]
 800ded0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ded4:	ee17 9a90 	vmov	r9, s15
 800ded8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dedc:	ee38 8a67 	vsub.f32	s16, s16, s15
 800dee0:	dd41      	ble.n	800df66 <__kernel_rem_pio2f+0x1a6>
 800dee2:	f106 3cff 	add.w	ip, r6, #4294967295
 800dee6:	ab08      	add	r3, sp, #32
 800dee8:	f1c5 0e08 	rsb	lr, r5, #8
 800deec:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800def0:	fa47 f00e 	asr.w	r0, r7, lr
 800def4:	4481      	add	r9, r0
 800def6:	fa00 f00e 	lsl.w	r0, r0, lr
 800defa:	1a3f      	subs	r7, r7, r0
 800defc:	f1c5 0007 	rsb	r0, r5, #7
 800df00:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800df04:	4107      	asrs	r7, r0
 800df06:	2f00      	cmp	r7, #0
 800df08:	dd3c      	ble.n	800df84 <__kernel_rem_pio2f+0x1c4>
 800df0a:	f04f 0e00 	mov.w	lr, #0
 800df0e:	f109 0901 	add.w	r9, r9, #1
 800df12:	4671      	mov	r1, lr
 800df14:	4576      	cmp	r6, lr
 800df16:	dc67      	bgt.n	800dfe8 <__kernel_rem_pio2f+0x228>
 800df18:	2d00      	cmp	r5, #0
 800df1a:	dd03      	ble.n	800df24 <__kernel_rem_pio2f+0x164>
 800df1c:	2d01      	cmp	r5, #1
 800df1e:	d074      	beq.n	800e00a <__kernel_rem_pio2f+0x24a>
 800df20:	2d02      	cmp	r5, #2
 800df22:	d07b      	beq.n	800e01c <__kernel_rem_pio2f+0x25c>
 800df24:	2f02      	cmp	r7, #2
 800df26:	d12d      	bne.n	800df84 <__kernel_rem_pio2f+0x1c4>
 800df28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800df2c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800df30:	b341      	cbz	r1, 800df84 <__kernel_rem_pio2f+0x1c4>
 800df32:	4628      	mov	r0, r5
 800df34:	9207      	str	r2, [sp, #28]
 800df36:	f000 f9b5 	bl	800e2a4 <scalbnf>
 800df3a:	9a07      	ldr	r2, [sp, #28]
 800df3c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800df40:	e020      	b.n	800df84 <__kernel_rem_pio2f+0x1c4>
 800df42:	ee60 7a28 	vmul.f32	s15, s0, s17
 800df46:	3f01      	subs	r7, #1
 800df48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df50:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800df54:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800df58:	ecac 0a01 	vstmia	ip!, {s0}
 800df5c:	ed90 0a00 	vldr	s0, [r0]
 800df60:	ee37 0a80 	vadd.f32	s0, s15, s0
 800df64:	e79e      	b.n	800dea4 <__kernel_rem_pio2f+0xe4>
 800df66:	d105      	bne.n	800df74 <__kernel_rem_pio2f+0x1b4>
 800df68:	1e70      	subs	r0, r6, #1
 800df6a:	ab08      	add	r3, sp, #32
 800df6c:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800df70:	11ff      	asrs	r7, r7, #7
 800df72:	e7c8      	b.n	800df06 <__kernel_rem_pio2f+0x146>
 800df74:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800df78:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800df7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df80:	da30      	bge.n	800dfe4 <__kernel_rem_pio2f+0x224>
 800df82:	2700      	movs	r7, #0
 800df84:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800df88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df8c:	f040 809a 	bne.w	800e0c4 <__kernel_rem_pio2f+0x304>
 800df90:	1e74      	subs	r4, r6, #1
 800df92:	46a4      	mov	ip, r4
 800df94:	2100      	movs	r1, #0
 800df96:	45d4      	cmp	ip, sl
 800df98:	da47      	bge.n	800e02a <__kernel_rem_pio2f+0x26a>
 800df9a:	2900      	cmp	r1, #0
 800df9c:	d063      	beq.n	800e066 <__kernel_rem_pio2f+0x2a6>
 800df9e:	ab08      	add	r3, sp, #32
 800dfa0:	3d08      	subs	r5, #8
 800dfa2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d07f      	beq.n	800e0aa <__kernel_rem_pio2f+0x2ea>
 800dfaa:	4628      	mov	r0, r5
 800dfac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800dfb0:	f000 f978 	bl	800e2a4 <scalbnf>
 800dfb4:	1c63      	adds	r3, r4, #1
 800dfb6:	aa44      	add	r2, sp, #272	; 0x110
 800dfb8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800e0bc <__kernel_rem_pio2f+0x2fc>
 800dfbc:	0099      	lsls	r1, r3, #2
 800dfbe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800dfc2:	4623      	mov	r3, r4
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	f280 80ad 	bge.w	800e124 <__kernel_rem_pio2f+0x364>
 800dfca:	4623      	mov	r3, r4
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	f2c0 80cb 	blt.w	800e168 <__kernel_rem_pio2f+0x3a8>
 800dfd2:	aa44      	add	r2, sp, #272	; 0x110
 800dfd4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800dfd8:	4e36      	ldr	r6, [pc, #216]	; (800e0b4 <__kernel_rem_pio2f+0x2f4>)
 800dfda:	eddf 7a39 	vldr	s15, [pc, #228]	; 800e0c0 <__kernel_rem_pio2f+0x300>
 800dfde:	2000      	movs	r0, #0
 800dfe0:	1ae2      	subs	r2, r4, r3
 800dfe2:	e0b6      	b.n	800e152 <__kernel_rem_pio2f+0x392>
 800dfe4:	2702      	movs	r7, #2
 800dfe6:	e790      	b.n	800df0a <__kernel_rem_pio2f+0x14a>
 800dfe8:	6820      	ldr	r0, [r4, #0]
 800dfea:	b949      	cbnz	r1, 800e000 <__kernel_rem_pio2f+0x240>
 800dfec:	b118      	cbz	r0, 800dff6 <__kernel_rem_pio2f+0x236>
 800dfee:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800dff2:	6020      	str	r0, [r4, #0]
 800dff4:	2001      	movs	r0, #1
 800dff6:	f10e 0e01 	add.w	lr, lr, #1
 800dffa:	3404      	adds	r4, #4
 800dffc:	4601      	mov	r1, r0
 800dffe:	e789      	b.n	800df14 <__kernel_rem_pio2f+0x154>
 800e000:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800e004:	6020      	str	r0, [r4, #0]
 800e006:	4608      	mov	r0, r1
 800e008:	e7f5      	b.n	800dff6 <__kernel_rem_pio2f+0x236>
 800e00a:	1e74      	subs	r4, r6, #1
 800e00c:	ab08      	add	r3, sp, #32
 800e00e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e012:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e016:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e01a:	e783      	b.n	800df24 <__kernel_rem_pio2f+0x164>
 800e01c:	1e74      	subs	r4, r6, #1
 800e01e:	ab08      	add	r3, sp, #32
 800e020:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e024:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800e028:	e7f5      	b.n	800e016 <__kernel_rem_pio2f+0x256>
 800e02a:	ab08      	add	r3, sp, #32
 800e02c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800e030:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e034:	4301      	orrs	r1, r0
 800e036:	e7ae      	b.n	800df96 <__kernel_rem_pio2f+0x1d6>
 800e038:	3001      	adds	r0, #1
 800e03a:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800e03e:	2f00      	cmp	r7, #0
 800e040:	d0fa      	beq.n	800e038 <__kernel_rem_pio2f+0x278>
 800e042:	9b06      	ldr	r3, [sp, #24]
 800e044:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800e048:	eb0d 0403 	add.w	r4, sp, r3
 800e04c:	9b01      	ldr	r3, [sp, #4]
 800e04e:	18f7      	adds	r7, r6, r3
 800e050:	ab1c      	add	r3, sp, #112	; 0x70
 800e052:	f106 0c01 	add.w	ip, r6, #1
 800e056:	3c4c      	subs	r4, #76	; 0x4c
 800e058:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e05c:	4430      	add	r0, r6
 800e05e:	4560      	cmp	r0, ip
 800e060:	da04      	bge.n	800e06c <__kernel_rem_pio2f+0x2ac>
 800e062:	4606      	mov	r6, r0
 800e064:	e711      	b.n	800de8a <__kernel_rem_pio2f+0xca>
 800e066:	9c05      	ldr	r4, [sp, #20]
 800e068:	2001      	movs	r0, #1
 800e06a:	e7e6      	b.n	800e03a <__kernel_rem_pio2f+0x27a>
 800e06c:	9b04      	ldr	r3, [sp, #16]
 800e06e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e072:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800e076:	9306      	str	r3, [sp, #24]
 800e078:	ee07 3a90 	vmov	s15, r3
 800e07c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e080:	2600      	movs	r6, #0
 800e082:	ece7 7a01 	vstmia	r7!, {s15}
 800e086:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800e0c0 <__kernel_rem_pio2f+0x300>
 800e08a:	46b9      	mov	r9, r7
 800e08c:	455e      	cmp	r6, fp
 800e08e:	dd04      	ble.n	800e09a <__kernel_rem_pio2f+0x2da>
 800e090:	ece4 7a01 	vstmia	r4!, {s15}
 800e094:	f10c 0c01 	add.w	ip, ip, #1
 800e098:	e7e1      	b.n	800e05e <__kernel_rem_pio2f+0x29e>
 800e09a:	ecfe 6a01 	vldmia	lr!, {s13}
 800e09e:	ed39 7a01 	vldmdb	r9!, {s14}
 800e0a2:	3601      	adds	r6, #1
 800e0a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e0a8:	e7f0      	b.n	800e08c <__kernel_rem_pio2f+0x2cc>
 800e0aa:	3c01      	subs	r4, #1
 800e0ac:	e777      	b.n	800df9e <__kernel_rem_pio2f+0x1de>
 800e0ae:	bf00      	nop
 800e0b0:	08023a0c 	.word	0x08023a0c
 800e0b4:	080239e0 	.word	0x080239e0
 800e0b8:	43800000 	.word	0x43800000
 800e0bc:	3b800000 	.word	0x3b800000
 800e0c0:	00000000 	.word	0x00000000
 800e0c4:	9b03      	ldr	r3, [sp, #12]
 800e0c6:	eeb0 0a48 	vmov.f32	s0, s16
 800e0ca:	1a98      	subs	r0, r3, r2
 800e0cc:	f000 f8ea 	bl	800e2a4 <scalbnf>
 800e0d0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800e0b8 <__kernel_rem_pio2f+0x2f8>
 800e0d4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0dc:	db19      	blt.n	800e112 <__kernel_rem_pio2f+0x352>
 800e0de:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800e0bc <__kernel_rem_pio2f+0x2fc>
 800e0e2:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e0e6:	aa08      	add	r2, sp, #32
 800e0e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0ec:	1c74      	adds	r4, r6, #1
 800e0ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0f2:	3508      	adds	r5, #8
 800e0f4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e0f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e100:	ee10 3a10 	vmov	r3, s0
 800e104:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e108:	ee17 3a90 	vmov	r3, s15
 800e10c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e110:	e74b      	b.n	800dfaa <__kernel_rem_pio2f+0x1ea>
 800e112:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e116:	aa08      	add	r2, sp, #32
 800e118:	ee10 3a10 	vmov	r3, s0
 800e11c:	4634      	mov	r4, r6
 800e11e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e122:	e742      	b.n	800dfaa <__kernel_rem_pio2f+0x1ea>
 800e124:	a808      	add	r0, sp, #32
 800e126:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800e12a:	9001      	str	r0, [sp, #4]
 800e12c:	ee07 0a90 	vmov	s15, r0
 800e130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e134:	3b01      	subs	r3, #1
 800e136:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e13a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e13e:	ed62 7a01 	vstmdb	r2!, {s15}
 800e142:	e73f      	b.n	800dfc4 <__kernel_rem_pio2f+0x204>
 800e144:	ecf6 6a01 	vldmia	r6!, {s13}
 800e148:	ecb5 7a01 	vldmia	r5!, {s14}
 800e14c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e150:	3001      	adds	r0, #1
 800e152:	4550      	cmp	r0, sl
 800e154:	dc01      	bgt.n	800e15a <__kernel_rem_pio2f+0x39a>
 800e156:	4290      	cmp	r0, r2
 800e158:	ddf4      	ble.n	800e144 <__kernel_rem_pio2f+0x384>
 800e15a:	a858      	add	r0, sp, #352	; 0x160
 800e15c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e160:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800e164:	3b01      	subs	r3, #1
 800e166:	e731      	b.n	800dfcc <__kernel_rem_pio2f+0x20c>
 800e168:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800e16a:	2b02      	cmp	r3, #2
 800e16c:	dc09      	bgt.n	800e182 <__kernel_rem_pio2f+0x3c2>
 800e16e:	2b00      	cmp	r3, #0
 800e170:	dc2b      	bgt.n	800e1ca <__kernel_rem_pio2f+0x40a>
 800e172:	d044      	beq.n	800e1fe <__kernel_rem_pio2f+0x43e>
 800e174:	f009 0007 	and.w	r0, r9, #7
 800e178:	b059      	add	sp, #356	; 0x164
 800e17a:	ecbd 8b04 	vpop	{d8-d9}
 800e17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e182:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800e184:	2b03      	cmp	r3, #3
 800e186:	d1f5      	bne.n	800e174 <__kernel_rem_pio2f+0x3b4>
 800e188:	aa30      	add	r2, sp, #192	; 0xc0
 800e18a:	1f0b      	subs	r3, r1, #4
 800e18c:	4413      	add	r3, r2
 800e18e:	461a      	mov	r2, r3
 800e190:	4620      	mov	r0, r4
 800e192:	2800      	cmp	r0, #0
 800e194:	f1a2 0204 	sub.w	r2, r2, #4
 800e198:	dc52      	bgt.n	800e240 <__kernel_rem_pio2f+0x480>
 800e19a:	4622      	mov	r2, r4
 800e19c:	2a01      	cmp	r2, #1
 800e19e:	f1a3 0304 	sub.w	r3, r3, #4
 800e1a2:	dc5d      	bgt.n	800e260 <__kernel_rem_pio2f+0x4a0>
 800e1a4:	ab30      	add	r3, sp, #192	; 0xc0
 800e1a6:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800e0c0 <__kernel_rem_pio2f+0x300>
 800e1aa:	440b      	add	r3, r1
 800e1ac:	2c01      	cmp	r4, #1
 800e1ae:	dc67      	bgt.n	800e280 <__kernel_rem_pio2f+0x4c0>
 800e1b0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800e1b4:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800e1b8:	2f00      	cmp	r7, #0
 800e1ba:	d167      	bne.n	800e28c <__kernel_rem_pio2f+0x4cc>
 800e1bc:	edc8 6a00 	vstr	s13, [r8]
 800e1c0:	ed88 7a01 	vstr	s14, [r8, #4]
 800e1c4:	edc8 7a02 	vstr	s15, [r8, #8]
 800e1c8:	e7d4      	b.n	800e174 <__kernel_rem_pio2f+0x3b4>
 800e1ca:	ab30      	add	r3, sp, #192	; 0xc0
 800e1cc:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800e0c0 <__kernel_rem_pio2f+0x300>
 800e1d0:	440b      	add	r3, r1
 800e1d2:	4622      	mov	r2, r4
 800e1d4:	2a00      	cmp	r2, #0
 800e1d6:	da24      	bge.n	800e222 <__kernel_rem_pio2f+0x462>
 800e1d8:	b34f      	cbz	r7, 800e22e <__kernel_rem_pio2f+0x46e>
 800e1da:	eef1 7a47 	vneg.f32	s15, s14
 800e1de:	edc8 7a00 	vstr	s15, [r8]
 800e1e2:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800e1e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1ea:	aa31      	add	r2, sp, #196	; 0xc4
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	429c      	cmp	r4, r3
 800e1f0:	da20      	bge.n	800e234 <__kernel_rem_pio2f+0x474>
 800e1f2:	b10f      	cbz	r7, 800e1f8 <__kernel_rem_pio2f+0x438>
 800e1f4:	eef1 7a67 	vneg.f32	s15, s15
 800e1f8:	edc8 7a01 	vstr	s15, [r8, #4]
 800e1fc:	e7ba      	b.n	800e174 <__kernel_rem_pio2f+0x3b4>
 800e1fe:	ab30      	add	r3, sp, #192	; 0xc0
 800e200:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800e0c0 <__kernel_rem_pio2f+0x300>
 800e204:	440b      	add	r3, r1
 800e206:	2c00      	cmp	r4, #0
 800e208:	da05      	bge.n	800e216 <__kernel_rem_pio2f+0x456>
 800e20a:	b10f      	cbz	r7, 800e210 <__kernel_rem_pio2f+0x450>
 800e20c:	eef1 7a67 	vneg.f32	s15, s15
 800e210:	edc8 7a00 	vstr	s15, [r8]
 800e214:	e7ae      	b.n	800e174 <__kernel_rem_pio2f+0x3b4>
 800e216:	ed33 7a01 	vldmdb	r3!, {s14}
 800e21a:	3c01      	subs	r4, #1
 800e21c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e220:	e7f1      	b.n	800e206 <__kernel_rem_pio2f+0x446>
 800e222:	ed73 7a01 	vldmdb	r3!, {s15}
 800e226:	3a01      	subs	r2, #1
 800e228:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e22c:	e7d2      	b.n	800e1d4 <__kernel_rem_pio2f+0x414>
 800e22e:	eef0 7a47 	vmov.f32	s15, s14
 800e232:	e7d4      	b.n	800e1de <__kernel_rem_pio2f+0x41e>
 800e234:	ecb2 7a01 	vldmia	r2!, {s14}
 800e238:	3301      	adds	r3, #1
 800e23a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e23e:	e7d6      	b.n	800e1ee <__kernel_rem_pio2f+0x42e>
 800e240:	edd2 7a00 	vldr	s15, [r2]
 800e244:	edd2 6a01 	vldr	s13, [r2, #4]
 800e248:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e24c:	3801      	subs	r0, #1
 800e24e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e252:	ed82 7a00 	vstr	s14, [r2]
 800e256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e25a:	edc2 7a01 	vstr	s15, [r2, #4]
 800e25e:	e798      	b.n	800e192 <__kernel_rem_pio2f+0x3d2>
 800e260:	edd3 7a00 	vldr	s15, [r3]
 800e264:	edd3 6a01 	vldr	s13, [r3, #4]
 800e268:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e26c:	3a01      	subs	r2, #1
 800e26e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e272:	ed83 7a00 	vstr	s14, [r3]
 800e276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e27a:	edc3 7a01 	vstr	s15, [r3, #4]
 800e27e:	e78d      	b.n	800e19c <__kernel_rem_pio2f+0x3dc>
 800e280:	ed33 7a01 	vldmdb	r3!, {s14}
 800e284:	3c01      	subs	r4, #1
 800e286:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e28a:	e78f      	b.n	800e1ac <__kernel_rem_pio2f+0x3ec>
 800e28c:	eef1 6a66 	vneg.f32	s13, s13
 800e290:	eeb1 7a47 	vneg.f32	s14, s14
 800e294:	edc8 6a00 	vstr	s13, [r8]
 800e298:	ed88 7a01 	vstr	s14, [r8, #4]
 800e29c:	eef1 7a67 	vneg.f32	s15, s15
 800e2a0:	e790      	b.n	800e1c4 <__kernel_rem_pio2f+0x404>
 800e2a2:	bf00      	nop

0800e2a4 <scalbnf>:
 800e2a4:	ee10 3a10 	vmov	r3, s0
 800e2a8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e2ac:	d02b      	beq.n	800e306 <scalbnf+0x62>
 800e2ae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e2b2:	d302      	bcc.n	800e2ba <scalbnf+0x16>
 800e2b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e2b8:	4770      	bx	lr
 800e2ba:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e2be:	d123      	bne.n	800e308 <scalbnf+0x64>
 800e2c0:	4b24      	ldr	r3, [pc, #144]	; (800e354 <scalbnf+0xb0>)
 800e2c2:	eddf 7a25 	vldr	s15, [pc, #148]	; 800e358 <scalbnf+0xb4>
 800e2c6:	4298      	cmp	r0, r3
 800e2c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e2cc:	db17      	blt.n	800e2fe <scalbnf+0x5a>
 800e2ce:	ee10 3a10 	vmov	r3, s0
 800e2d2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e2d6:	3a19      	subs	r2, #25
 800e2d8:	f24c 3150 	movw	r1, #50000	; 0xc350
 800e2dc:	4288      	cmp	r0, r1
 800e2de:	dd15      	ble.n	800e30c <scalbnf+0x68>
 800e2e0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800e35c <scalbnf+0xb8>
 800e2e4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800e360 <scalbnf+0xbc>
 800e2e8:	ee10 3a10 	vmov	r3, s0
 800e2ec:	eeb0 7a67 	vmov.f32	s14, s15
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	bfb8      	it	lt
 800e2f4:	eef0 7a66 	vmovlt.f32	s15, s13
 800e2f8:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e2fc:	4770      	bx	lr
 800e2fe:	eddf 7a19 	vldr	s15, [pc, #100]	; 800e364 <scalbnf+0xc0>
 800e302:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e306:	4770      	bx	lr
 800e308:	0dd2      	lsrs	r2, r2, #23
 800e30a:	e7e5      	b.n	800e2d8 <scalbnf+0x34>
 800e30c:	4410      	add	r0, r2
 800e30e:	28fe      	cmp	r0, #254	; 0xfe
 800e310:	dce6      	bgt.n	800e2e0 <scalbnf+0x3c>
 800e312:	2800      	cmp	r0, #0
 800e314:	dd06      	ble.n	800e324 <scalbnf+0x80>
 800e316:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e31a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e31e:	ee00 3a10 	vmov	s0, r3
 800e322:	4770      	bx	lr
 800e324:	f110 0f16 	cmn.w	r0, #22
 800e328:	da09      	bge.n	800e33e <scalbnf+0x9a>
 800e32a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800e364 <scalbnf+0xc0>
 800e32e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800e368 <scalbnf+0xc4>
 800e332:	ee10 3a10 	vmov	r3, s0
 800e336:	eeb0 7a67 	vmov.f32	s14, s15
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	e7d9      	b.n	800e2f2 <scalbnf+0x4e>
 800e33e:	3019      	adds	r0, #25
 800e340:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e344:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e348:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800e36c <scalbnf+0xc8>
 800e34c:	ee07 3a90 	vmov	s15, r3
 800e350:	e7d7      	b.n	800e302 <scalbnf+0x5e>
 800e352:	bf00      	nop
 800e354:	ffff3cb0 	.word	0xffff3cb0
 800e358:	4c000000 	.word	0x4c000000
 800e35c:	7149f2ca 	.word	0x7149f2ca
 800e360:	f149f2ca 	.word	0xf149f2ca
 800e364:	0da24260 	.word	0x0da24260
 800e368:	8da24260 	.word	0x8da24260
 800e36c:	33000000 	.word	0x33000000

0800e370 <floorf>:
 800e370:	ee10 3a10 	vmov	r3, s0
 800e374:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e378:	3a7f      	subs	r2, #127	; 0x7f
 800e37a:	2a16      	cmp	r2, #22
 800e37c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e380:	dc2a      	bgt.n	800e3d8 <floorf+0x68>
 800e382:	2a00      	cmp	r2, #0
 800e384:	da11      	bge.n	800e3aa <floorf+0x3a>
 800e386:	eddf 7a18 	vldr	s15, [pc, #96]	; 800e3e8 <floorf+0x78>
 800e38a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e38e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e396:	dd05      	ble.n	800e3a4 <floorf+0x34>
 800e398:	2b00      	cmp	r3, #0
 800e39a:	da23      	bge.n	800e3e4 <floorf+0x74>
 800e39c:	4a13      	ldr	r2, [pc, #76]	; (800e3ec <floorf+0x7c>)
 800e39e:	2900      	cmp	r1, #0
 800e3a0:	bf18      	it	ne
 800e3a2:	4613      	movne	r3, r2
 800e3a4:	ee00 3a10 	vmov	s0, r3
 800e3a8:	4770      	bx	lr
 800e3aa:	4911      	ldr	r1, [pc, #68]	; (800e3f0 <floorf+0x80>)
 800e3ac:	4111      	asrs	r1, r2
 800e3ae:	420b      	tst	r3, r1
 800e3b0:	d0fa      	beq.n	800e3a8 <floorf+0x38>
 800e3b2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800e3e8 <floorf+0x78>
 800e3b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e3ba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c2:	ddef      	ble.n	800e3a4 <floorf+0x34>
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	bfbe      	ittt	lt
 800e3c8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800e3cc:	fa40 f202 	asrlt.w	r2, r0, r2
 800e3d0:	189b      	addlt	r3, r3, r2
 800e3d2:	ea23 0301 	bic.w	r3, r3, r1
 800e3d6:	e7e5      	b.n	800e3a4 <floorf+0x34>
 800e3d8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e3dc:	d3e4      	bcc.n	800e3a8 <floorf+0x38>
 800e3de:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e3e2:	4770      	bx	lr
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	e7dd      	b.n	800e3a4 <floorf+0x34>
 800e3e8:	7149f2ca 	.word	0x7149f2ca
 800e3ec:	bf800000 	.word	0xbf800000
 800e3f0:	007fffff 	.word	0x007fffff

0800e3f4 <_init>:
 800e3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3f6:	bf00      	nop
 800e3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3fa:	bc08      	pop	{r3}
 800e3fc:	469e      	mov	lr, r3
 800e3fe:	4770      	bx	lr

0800e400 <_fini>:
 800e400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e402:	bf00      	nop
 800e404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e406:	bc08      	pop	{r3}
 800e408:	469e      	mov	lr, r3
 800e40a:	4770      	bx	lr
