
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a618  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001347c  0800a7d4  0800a7d4  0001a7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dc50  0801dc50  0003000c  2**0
                  CONTENTS
  4 .ARM          00000008  0801dc50  0801dc50  0002dc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dc58  0801dc58  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dc58  0801dc58  0002dc58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dc5c  0801dc5c  0002dc5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0801dc60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000000c  0801dc6c  0003000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  0801dc6c  00030284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000210ea  00000000  00000000  000300f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b4e  00000000  00000000  000511de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  00054d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001041  00000000  00000000  00056320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162cb  00000000  00000000  00057361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007c5b  00000000  00000000  0006d62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00005f34  00000000  00000000  00075288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000076  00000000  00000000  0007b1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003114  00000000  00000000  0007b232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 000000c8  00000000  00000000  0007e346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800a7bc 	.word	0x0800a7bc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	0800a7bc 	.word	0x0800a7bc

080001fc <strcmp>:
 80001fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000204:	2a01      	cmp	r2, #1
 8000206:	bf28      	it	cs
 8000208:	429a      	cmpcs	r2, r3
 800020a:	d0f7      	beq.n	80001fc <strcmp>
 800020c:	1ad0      	subs	r0, r2, r3
 800020e:	4770      	bx	lr

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_d2f>:
 8000588:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800058c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000590:	bf24      	itt	cs
 8000592:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000596:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800059a:	d90d      	bls.n	80005b8 <__aeabi_d2f+0x30>
 800059c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005b0:	bf08      	it	eq
 80005b2:	f020 0001 	biceq.w	r0, r0, #1
 80005b6:	4770      	bx	lr
 80005b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005bc:	d121      	bne.n	8000602 <__aeabi_d2f+0x7a>
 80005be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005c2:	bfbc      	itt	lt
 80005c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005c8:	4770      	bxlt	lr
 80005ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005d2:	f1c2 0218 	rsb	r2, r2, #24
 80005d6:	f1c2 0c20 	rsb	ip, r2, #32
 80005da:	fa10 f30c 	lsls.w	r3, r0, ip
 80005de:	fa20 f002 	lsr.w	r0, r0, r2
 80005e2:	bf18      	it	ne
 80005e4:	f040 0001 	orrne.w	r0, r0, #1
 80005e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005f0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005f4:	ea40 000c 	orr.w	r0, r0, ip
 80005f8:	fa23 f302 	lsr.w	r3, r3, r2
 80005fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000600:	e7cc      	b.n	800059c <__aeabi_d2f+0x14>
 8000602:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000606:	d107      	bne.n	8000618 <__aeabi_d2f+0x90>
 8000608:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800060c:	bf1e      	ittt	ne
 800060e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000612:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000616:	4770      	bxne	lr
 8000618:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800061c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000620:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295
 8000638:	f04f 30ff 	movne.w	r0, #4294967295
 800063c:	f000 b970 	b.w	8000920 <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9e08      	ldr	r6, [sp, #32]
 800065e:	460d      	mov	r5, r1
 8000660:	4604      	mov	r4, r0
 8000662:	460f      	mov	r7, r1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d14a      	bne.n	80006fe <__udivmoddi4+0xa6>
 8000668:	428a      	cmp	r2, r1
 800066a:	4694      	mov	ip, r2
 800066c:	d965      	bls.n	800073a <__udivmoddi4+0xe2>
 800066e:	fab2 f382 	clz	r3, r2
 8000672:	b143      	cbz	r3, 8000686 <__udivmoddi4+0x2e>
 8000674:	fa02 fc03 	lsl.w	ip, r2, r3
 8000678:	f1c3 0220 	rsb	r2, r3, #32
 800067c:	409f      	lsls	r7, r3
 800067e:	fa20 f202 	lsr.w	r2, r0, r2
 8000682:	4317      	orrs	r7, r2
 8000684:	409c      	lsls	r4, r3
 8000686:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800068a:	fa1f f58c 	uxth.w	r5, ip
 800068e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000692:	0c22      	lsrs	r2, r4, #16
 8000694:	fb0e 7711 	mls	r7, lr, r1, r7
 8000698:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800069c:	fb01 f005 	mul.w	r0, r1, r5
 80006a0:	4290      	cmp	r0, r2
 80006a2:	d90a      	bls.n	80006ba <__udivmoddi4+0x62>
 80006a4:	eb1c 0202 	adds.w	r2, ip, r2
 80006a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80006ac:	f080 811c 	bcs.w	80008e8 <__udivmoddi4+0x290>
 80006b0:	4290      	cmp	r0, r2
 80006b2:	f240 8119 	bls.w	80008e8 <__udivmoddi4+0x290>
 80006b6:	3902      	subs	r1, #2
 80006b8:	4462      	add	r2, ip
 80006ba:	1a12      	subs	r2, r2, r0
 80006bc:	b2a4      	uxth	r4, r4
 80006be:	fbb2 f0fe 	udiv	r0, r2, lr
 80006c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006ca:	fb00 f505 	mul.w	r5, r0, r5
 80006ce:	42a5      	cmp	r5, r4
 80006d0:	d90a      	bls.n	80006e8 <__udivmoddi4+0x90>
 80006d2:	eb1c 0404 	adds.w	r4, ip, r4
 80006d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80006da:	f080 8107 	bcs.w	80008ec <__udivmoddi4+0x294>
 80006de:	42a5      	cmp	r5, r4
 80006e0:	f240 8104 	bls.w	80008ec <__udivmoddi4+0x294>
 80006e4:	4464      	add	r4, ip
 80006e6:	3802      	subs	r0, #2
 80006e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ec:	1b64      	subs	r4, r4, r5
 80006ee:	2100      	movs	r1, #0
 80006f0:	b11e      	cbz	r6, 80006fa <__udivmoddi4+0xa2>
 80006f2:	40dc      	lsrs	r4, r3
 80006f4:	2300      	movs	r3, #0
 80006f6:	e9c6 4300 	strd	r4, r3, [r6]
 80006fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fe:	428b      	cmp	r3, r1
 8000700:	d908      	bls.n	8000714 <__udivmoddi4+0xbc>
 8000702:	2e00      	cmp	r6, #0
 8000704:	f000 80ed 	beq.w	80008e2 <__udivmoddi4+0x28a>
 8000708:	2100      	movs	r1, #0
 800070a:	e9c6 0500 	strd	r0, r5, [r6]
 800070e:	4608      	mov	r0, r1
 8000710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000714:	fab3 f183 	clz	r1, r3
 8000718:	2900      	cmp	r1, #0
 800071a:	d149      	bne.n	80007b0 <__udivmoddi4+0x158>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d302      	bcc.n	8000726 <__udivmoddi4+0xce>
 8000720:	4282      	cmp	r2, r0
 8000722:	f200 80f8 	bhi.w	8000916 <__udivmoddi4+0x2be>
 8000726:	1a84      	subs	r4, r0, r2
 8000728:	eb65 0203 	sbc.w	r2, r5, r3
 800072c:	2001      	movs	r0, #1
 800072e:	4617      	mov	r7, r2
 8000730:	2e00      	cmp	r6, #0
 8000732:	d0e2      	beq.n	80006fa <__udivmoddi4+0xa2>
 8000734:	e9c6 4700 	strd	r4, r7, [r6]
 8000738:	e7df      	b.n	80006fa <__udivmoddi4+0xa2>
 800073a:	b902      	cbnz	r2, 800073e <__udivmoddi4+0xe6>
 800073c:	deff      	udf	#255	; 0xff
 800073e:	fab2 f382 	clz	r3, r2
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8090 	bne.w	8000868 <__udivmoddi4+0x210>
 8000748:	1a8a      	subs	r2, r1, r2
 800074a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800074e:	fa1f fe8c 	uxth.w	lr, ip
 8000752:	2101      	movs	r1, #1
 8000754:	fbb2 f5f7 	udiv	r5, r2, r7
 8000758:	fb07 2015 	mls	r0, r7, r5, r2
 800075c:	0c22      	lsrs	r2, r4, #16
 800075e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000762:	fb0e f005 	mul.w	r0, lr, r5
 8000766:	4290      	cmp	r0, r2
 8000768:	d908      	bls.n	800077c <__udivmoddi4+0x124>
 800076a:	eb1c 0202 	adds.w	r2, ip, r2
 800076e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x122>
 8000774:	4290      	cmp	r0, r2
 8000776:	f200 80cb 	bhi.w	8000910 <__udivmoddi4+0x2b8>
 800077a:	4645      	mov	r5, r8
 800077c:	1a12      	subs	r2, r2, r0
 800077e:	b2a4      	uxth	r4, r4
 8000780:	fbb2 f0f7 	udiv	r0, r2, r7
 8000784:	fb07 2210 	mls	r2, r7, r0, r2
 8000788:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800078c:	fb0e fe00 	mul.w	lr, lr, r0
 8000790:	45a6      	cmp	lr, r4
 8000792:	d908      	bls.n	80007a6 <__udivmoddi4+0x14e>
 8000794:	eb1c 0404 	adds.w	r4, ip, r4
 8000798:	f100 32ff 	add.w	r2, r0, #4294967295
 800079c:	d202      	bcs.n	80007a4 <__udivmoddi4+0x14c>
 800079e:	45a6      	cmp	lr, r4
 80007a0:	f200 80bb 	bhi.w	800091a <__udivmoddi4+0x2c2>
 80007a4:	4610      	mov	r0, r2
 80007a6:	eba4 040e 	sub.w	r4, r4, lr
 80007aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007ae:	e79f      	b.n	80006f0 <__udivmoddi4+0x98>
 80007b0:	f1c1 0720 	rsb	r7, r1, #32
 80007b4:	408b      	lsls	r3, r1
 80007b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80007ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80007be:	fa05 f401 	lsl.w	r4, r5, r1
 80007c2:	fa20 f307 	lsr.w	r3, r0, r7
 80007c6:	40fd      	lsrs	r5, r7
 80007c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007cc:	4323      	orrs	r3, r4
 80007ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80007d2:	fa1f fe8c 	uxth.w	lr, ip
 80007d6:	fb09 5518 	mls	r5, r9, r8, r5
 80007da:	0c1c      	lsrs	r4, r3, #16
 80007dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007e0:	fb08 f50e 	mul.w	r5, r8, lr
 80007e4:	42a5      	cmp	r5, r4
 80007e6:	fa02 f201 	lsl.w	r2, r2, r1
 80007ea:	fa00 f001 	lsl.w	r0, r0, r1
 80007ee:	d90b      	bls.n	8000808 <__udivmoddi4+0x1b0>
 80007f0:	eb1c 0404 	adds.w	r4, ip, r4
 80007f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80007f8:	f080 8088 	bcs.w	800090c <__udivmoddi4+0x2b4>
 80007fc:	42a5      	cmp	r5, r4
 80007fe:	f240 8085 	bls.w	800090c <__udivmoddi4+0x2b4>
 8000802:	f1a8 0802 	sub.w	r8, r8, #2
 8000806:	4464      	add	r4, ip
 8000808:	1b64      	subs	r4, r4, r5
 800080a:	b29d      	uxth	r5, r3
 800080c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000810:	fb09 4413 	mls	r4, r9, r3, r4
 8000814:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000818:	fb03 fe0e 	mul.w	lr, r3, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d908      	bls.n	8000832 <__udivmoddi4+0x1da>
 8000820:	eb1c 0404 	adds.w	r4, ip, r4
 8000824:	f103 35ff 	add.w	r5, r3, #4294967295
 8000828:	d26c      	bcs.n	8000904 <__udivmoddi4+0x2ac>
 800082a:	45a6      	cmp	lr, r4
 800082c:	d96a      	bls.n	8000904 <__udivmoddi4+0x2ac>
 800082e:	3b02      	subs	r3, #2
 8000830:	4464      	add	r4, ip
 8000832:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000836:	fba3 9502 	umull	r9, r5, r3, r2
 800083a:	eba4 040e 	sub.w	r4, r4, lr
 800083e:	42ac      	cmp	r4, r5
 8000840:	46c8      	mov	r8, r9
 8000842:	46ae      	mov	lr, r5
 8000844:	d356      	bcc.n	80008f4 <__udivmoddi4+0x29c>
 8000846:	d053      	beq.n	80008f0 <__udivmoddi4+0x298>
 8000848:	b156      	cbz	r6, 8000860 <__udivmoddi4+0x208>
 800084a:	ebb0 0208 	subs.w	r2, r0, r8
 800084e:	eb64 040e 	sbc.w	r4, r4, lr
 8000852:	fa04 f707 	lsl.w	r7, r4, r7
 8000856:	40ca      	lsrs	r2, r1
 8000858:	40cc      	lsrs	r4, r1
 800085a:	4317      	orrs	r7, r2
 800085c:	e9c6 7400 	strd	r7, r4, [r6]
 8000860:	4618      	mov	r0, r3
 8000862:	2100      	movs	r1, #0
 8000864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000868:	f1c3 0120 	rsb	r1, r3, #32
 800086c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000870:	fa20 f201 	lsr.w	r2, r0, r1
 8000874:	fa25 f101 	lsr.w	r1, r5, r1
 8000878:	409d      	lsls	r5, r3
 800087a:	432a      	orrs	r2, r5
 800087c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000880:	fa1f fe8c 	uxth.w	lr, ip
 8000884:	fbb1 f0f7 	udiv	r0, r1, r7
 8000888:	fb07 1510 	mls	r5, r7, r0, r1
 800088c:	0c11      	lsrs	r1, r2, #16
 800088e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000892:	fb00 f50e 	mul.w	r5, r0, lr
 8000896:	428d      	cmp	r5, r1
 8000898:	fa04 f403 	lsl.w	r4, r4, r3
 800089c:	d908      	bls.n	80008b0 <__udivmoddi4+0x258>
 800089e:	eb1c 0101 	adds.w	r1, ip, r1
 80008a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80008a6:	d22f      	bcs.n	8000908 <__udivmoddi4+0x2b0>
 80008a8:	428d      	cmp	r5, r1
 80008aa:	d92d      	bls.n	8000908 <__udivmoddi4+0x2b0>
 80008ac:	3802      	subs	r0, #2
 80008ae:	4461      	add	r1, ip
 80008b0:	1b49      	subs	r1, r1, r5
 80008b2:	b292      	uxth	r2, r2
 80008b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80008b8:	fb07 1115 	mls	r1, r7, r5, r1
 80008bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008c0:	fb05 f10e 	mul.w	r1, r5, lr
 80008c4:	4291      	cmp	r1, r2
 80008c6:	d908      	bls.n	80008da <__udivmoddi4+0x282>
 80008c8:	eb1c 0202 	adds.w	r2, ip, r2
 80008cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80008d0:	d216      	bcs.n	8000900 <__udivmoddi4+0x2a8>
 80008d2:	4291      	cmp	r1, r2
 80008d4:	d914      	bls.n	8000900 <__udivmoddi4+0x2a8>
 80008d6:	3d02      	subs	r5, #2
 80008d8:	4462      	add	r2, ip
 80008da:	1a52      	subs	r2, r2, r1
 80008dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80008e0:	e738      	b.n	8000754 <__udivmoddi4+0xfc>
 80008e2:	4631      	mov	r1, r6
 80008e4:	4630      	mov	r0, r6
 80008e6:	e708      	b.n	80006fa <__udivmoddi4+0xa2>
 80008e8:	4639      	mov	r1, r7
 80008ea:	e6e6      	b.n	80006ba <__udivmoddi4+0x62>
 80008ec:	4610      	mov	r0, r2
 80008ee:	e6fb      	b.n	80006e8 <__udivmoddi4+0x90>
 80008f0:	4548      	cmp	r0, r9
 80008f2:	d2a9      	bcs.n	8000848 <__udivmoddi4+0x1f0>
 80008f4:	ebb9 0802 	subs.w	r8, r9, r2
 80008f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008fc:	3b01      	subs	r3, #1
 80008fe:	e7a3      	b.n	8000848 <__udivmoddi4+0x1f0>
 8000900:	4645      	mov	r5, r8
 8000902:	e7ea      	b.n	80008da <__udivmoddi4+0x282>
 8000904:	462b      	mov	r3, r5
 8000906:	e794      	b.n	8000832 <__udivmoddi4+0x1da>
 8000908:	4640      	mov	r0, r8
 800090a:	e7d1      	b.n	80008b0 <__udivmoddi4+0x258>
 800090c:	46d0      	mov	r8, sl
 800090e:	e77b      	b.n	8000808 <__udivmoddi4+0x1b0>
 8000910:	3d02      	subs	r5, #2
 8000912:	4462      	add	r2, ip
 8000914:	e732      	b.n	800077c <__udivmoddi4+0x124>
 8000916:	4608      	mov	r0, r1
 8000918:	e70a      	b.n	8000730 <__udivmoddi4+0xd8>
 800091a:	4464      	add	r4, ip
 800091c:	3802      	subs	r0, #2
 800091e:	e742      	b.n	80007a6 <__udivmoddi4+0x14e>

08000920 <__aeabi_idiv0>:
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop

08000924 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

	convFlag = 1;
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <HAL_ADC_ConvCpltCallback+0x1c>)
 800092e:	2201      	movs	r2, #1
 8000930:	601a      	str	r2, [r3, #0]

}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000278 	.word	0x20000278

08000944 <apply_hanning_window>:


void apply_hanning_window(float32_t * signal, uint32_t length){
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < length; ++i){
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	e033      	b.n	80009bc <apply_hanning_window+0x78>
		float32_t han_value = 0.5f * (1.0f - cosf(2 * PI * i / (length - 1)));
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	ee07 3a90 	vmov	s15, r3
 800095a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800095e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80009d0 <apply_hanning_window+0x8c>
 8000962:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	3b01      	subs	r3, #1
 800096a:	ee07 3a90 	vmov	s15, r3
 800096e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000972:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000976:	eeb0 0a66 	vmov.f32	s0, s13
 800097a:	f009 f9e7 	bl	8009d4c <cosf>
 800097e:	eef0 7a40 	vmov.f32	s15, s0
 8000982:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800098a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800098e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000992:	edc7 7a02 	vstr	s15, [r7, #8]
		signal[i] *= han_value;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	ed93 7a00 	vldr	s14, [r3]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80009ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009b2:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < length; ++i){
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	3301      	adds	r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	683a      	ldr	r2, [r7, #0]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d8c7      	bhi.n	8000954 <apply_hanning_window+0x10>
	}
}
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40c90fdb 	.word	0x40c90fdb

080009d4 <find_peaks>:


void find_peaks(float32_t* data, uint32_t length, int32_t* peaks, uint32_t* num_peaks) {
 80009d4:	b480      	push	{r7}
 80009d6:	b087      	sub	sp, #28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
 80009e0:	603b      	str	r3, [r7, #0]
    float32_t threshold = 0; // Adjust if needed
 80009e2:	f04f 0300 	mov.w	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
    *num_peaks = 0;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 1; i < length - 1; ++i) {
 80009ee:	2301      	movs	r3, #1
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	e041      	b.n	8000a78 <find_peaks+0xa4>
        if (data[i] > threshold && data[i] > data[i-1] && data[i] > data[i+1]) {
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	4413      	add	r3, r2
 80009fc:	edd3 7a00 	vldr	s15, [r3]
 8000a00:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a0c:	d531      	bpl.n	8000a72 <find_peaks+0x9e>
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4413      	add	r3, r2
 8000a16:	ed93 7a00 	vldr	s14, [r3]
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a20:	3b01      	subs	r3, #1
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	4413      	add	r3, r2
 8000a28:	edd3 7a00 	vldr	s15, [r3]
 8000a2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a34:	dd1d      	ble.n	8000a72 <find_peaks+0x9e>
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	ed93 7a00 	vldr	s14, [r3]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	3301      	adds	r3, #1
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	edd3 7a00 	vldr	s15, [r3]
 8000a50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a58:	dd0b      	ble.n	8000a72 <find_peaks+0x9e>
            peaks[*num_peaks] = i;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	4413      	add	r3, r2
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	601a      	str	r2, [r3, #0]
            (*num_peaks)++;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	1c5a      	adds	r2, r3, #1
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 1; i < length - 1; ++i) {
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d3b8      	bcc.n	80009f4 <find_peaks+0x20>
        }
    }
}
 8000a82:	bf00      	nop
 8000a84:	bf00      	nop
 8000a86:	371c      	adds	r7, #28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <autocorrelate>:



void autocorrelate(float32_t* x, uint32_t N, float32_t* autocorrelation) {
 8000a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a94:	b093      	sub	sp, #76	; 0x4c
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6178      	str	r0, [r7, #20]
 8000a9a:	6139      	str	r1, [r7, #16]
 8000a9c:	60fa      	str	r2, [r7, #12]
 8000a9e:	466b      	mov	r3, sp
 8000aa0:	461e      	mov	r6, r3

    arm_rfft_fast_instance_f32 fftInstance;


    // Initialize the FFT instance
    arm_rfft_fast_init_f32(&fftInstance, N);
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f008 f95b 	bl	8008d68 <arm_rfft_fast_init_f32>

    float32_t output[N];
 8000ab2:	6939      	ldr	r1, [r7, #16]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8000aba:	2300      	movs	r3, #0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	f04f 0200 	mov.w	r2, #0
 8000ac4:	f04f 0300 	mov.w	r3, #0
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	0143      	lsls	r3, r0, #5
 8000acc:	6838      	ldr	r0, [r7, #0]
 8000ace:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000ad2:	6838      	ldr	r0, [r7, #0]
 8000ad4:	0142      	lsls	r2, r0, #5
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	468a      	mov	sl, r1
 8000ada:	469b      	mov	fp, r3
 8000adc:	f04f 0200 	mov.w	r2, #0
 8000ae0:	f04f 0300 	mov.w	r3, #0
 8000ae4:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000ae8:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000aec:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000af0:	008b      	lsls	r3, r1, #2
 8000af2:	3307      	adds	r3, #7
 8000af4:	08db      	lsrs	r3, r3, #3
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	ebad 0d03 	sub.w	sp, sp, r3
 8000afc:	466b      	mov	r3, sp
 8000afe:	3303      	adds	r3, #3
 8000b00:	089b      	lsrs	r3, r3, #2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_rfft_fast_f32(&fftInstance, x, output, 0);
 8000b06:	f107 001c 	add.w	r0, r7, #28
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b0e:	6979      	ldr	r1, [r7, #20]
 8000b10:	f008 fa0e 	bl	8008f30 <arm_rfft_fast_f32>

    float32_t power_spectrum[N/2];
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	0859      	lsrs	r1, r3, #1
 8000b18:	460b      	mov	r3, r1
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b1e:	2300      	movs	r3, #0
 8000b20:	4688      	mov	r8, r1
 8000b22:	4699      	mov	r9, r3
 8000b24:	f04f 0200 	mov.w	r2, #0
 8000b28:	f04f 0300 	mov.w	r3, #0
 8000b2c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000b30:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000b34:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000b38:	2300      	movs	r3, #0
 8000b3a:	460c      	mov	r4, r1
 8000b3c:	461d      	mov	r5, r3
 8000b3e:	f04f 0200 	mov.w	r2, #0
 8000b42:	f04f 0300 	mov.w	r3, #0
 8000b46:	016b      	lsls	r3, r5, #5
 8000b48:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000b4c:	0162      	lsls	r2, r4, #5
 8000b4e:	008b      	lsls	r3, r1, #2
 8000b50:	3307      	adds	r3, #7
 8000b52:	08db      	lsrs	r3, r3, #3
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	ebad 0d03 	sub.w	sp, sp, r3
 8000b5a:	466b      	mov	r3, sp
 8000b5c:	3303      	adds	r3, #3
 8000b5e:	089b      	lsrs	r3, r3, #2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
    //arm_cmplx_mag_squared_f32(output, power_spectrum, N/2);
    power_spectrum[0] = output[0] * output[0];
 8000b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b66:	ed93 7a00 	vldr	s14, [r3]
 8000b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b6c:	edd3 7a00 	vldr	s15, [r3]
 8000b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b76:	edc3 7a00 	vstr	s15, [r3]
    power_spectrum[1] = output[1] * output[1];
 8000b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b7c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b82:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b8c:	edc3 7a01 	vstr	s15, [r3, #4]

    // Rest of the frequency bins (upto N/2)
    for (uint32_t i = 1; i < N / 2; ++i) {
 8000b90:	2301      	movs	r3, #1
 8000b92:	647b      	str	r3, [r7, #68]	; 0x44
 8000b94:	e036      	b.n	8000c04 <autocorrelate+0x174>
        power_spectrum[2 * i] = output[2 * i] * output[2 * i] + output[2 * i + 1] * output[2 * i + 1]; // Real part
 8000b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	4413      	add	r3, r2
 8000ba0:	ed93 7a00 	vldr	s14, [r3]
 8000ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	edd3 7a00 	vldr	s15, [r3]
 8000bb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	3301      	adds	r3, #1
 8000bbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	edd3 6a00 	vldr	s13, [r3]
 8000bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	3301      	adds	r3, #1
 8000bcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	edd3 7a00 	vldr	s15, [r3]
 8000bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	edc3 7a00 	vstr	s15, [r3]
        power_spectrum[2 * i + 1] = 0; // Imaginary part is 0
 8000bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 1; i < N / 2; ++i) {
 8000bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c00:	3301      	adds	r3, #1
 8000c02:	647b      	str	r3, [r7, #68]	; 0x44
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	085b      	lsrs	r3, r3, #1
 8000c08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d3c3      	bcc.n	8000b96 <autocorrelate+0x106>
    }

    //arm_abs_f32(autocorrelation, autocorrelation, BUFFER_LENGTH);

    arm_rfft_fast_f32(&fftInstance, power_spectrum, autocorrelation, 1);
 8000c0e:	f107 001c 	add.w	r0, r7, #28
 8000c12:	2301      	movs	r3, #1
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000c18:	f008 f98a 	bl	8008f30 <arm_rfft_fast_f32>

    arm_abs_f32(autocorrelation, autocorrelation, BUFFER_LENGTH);
 8000c1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c20:	68f9      	ldr	r1, [r7, #12]
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f008 fd62 	bl	80096ec <arm_abs_f32>
 8000c28:	46b5      	mov	sp, r6
}
 8000c2a:	bf00      	nop
 8000c2c:	374c      	adds	r7, #76	; 0x4c
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c34:	b5b0      	push	{r4, r5, r7, lr}
 8000c36:	f5ad 4d40 	sub.w	sp, sp, #49152	; 0xc000
 8000c3a:	b0a4      	sub	sp, #144	; 0x90
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	convFlag = 0;
 8000c3e:	4bc4      	ldr	r3, [pc, #784]	; (8000f50 <main+0x31c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
	//E (low), A, D, G, B, E (high)
	float32_t string_freqs[6] = {82.41, 110.0, 146.83, 196.0, 246.94, 329.63};
 8000c44:	4bc3      	ldr	r3, [pc, #780]	; (8000f54 <main+0x320>)
 8000c46:	f507 4440 	add.w	r4, r7, #49152	; 0xc000
 8000c4a:	f104 0438 	add.w	r4, r4, #56	; 0x38
 8000c4e:	461d      	mov	r5, r3
 8000c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c58:	e884 0003 	stmia.w	r4, {r0, r1}
	float32_t measured_freq;
	char *strings[] = {"E (low)", "A", "D", "G", "B", "E (high)" };
 8000c5c:	4bbe      	ldr	r3, [pc, #760]	; (8000f58 <main+0x324>)
 8000c5e:	f507 4440 	add.w	r4, r7, #49152	; 0xc000
 8000c62:	f104 0420 	add.w	r4, r4, #32
 8000c66:	461d      	mov	r5, r3
 8000c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c70:	e884 0003 	stmia.w	r4, {r0, r1}
	char * E_high = "E (high)";
 8000c74:	4bb9      	ldr	r3, [pc, #740]	; (8000f5c <main+0x328>)
 8000c76:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8000c7a:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8000c7e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c80:	f001 f963 	bl	8001f4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c84:	f000 fa6c 	bl	8001160 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c88:	f000 fab0 	bl	80011ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8c:	f000 fcd0 	bl	8001630 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c90:	f000 fca4 	bl	80015dc <MX_DMA_Init>
  MX_ADC1_Init();
 8000c94:	f000 fada 	bl	800124c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000c98:	f000 fb3e 	bl	8001318 <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 8000c9c:	f000 fb70 	bl	8001380 <MX_LPUART1_UART_Init>
  MX_SAI1_Init();
 8000ca0:	f000 fbba 	bl	8001418 <MX_SAI1_Init>
  MX_TIM1_Init();
 8000ca4:	f000 fbee 	bl	8001484 <MX_TIM1_Init>
  //arm_rfft_fast_init_f32(&fftHandler, BUFFER_LENGTH);

  float32_t signal[BUFFER_LENGTH];
  float32_t autocorrelation[BUFFER_LENGTH];

  uint32_t LOWEST_PERIOD = SAMPLING_RATE / 440; //440hz max
 8000ca8:	232d      	movs	r3, #45	; 0x2d
 8000caa:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8000cae:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8000cb2:	6013      	str	r3, [r2, #0]
  uint32_t HIGHEST_PERIOD = SAMPLING_RATE / 50; //60 Hz min (change to 50)
 8000cb4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000cb8:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8000cbc:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8000cc0:	6013      	str	r3, [r2, #0]

   volatile uint16_t ADC_BUFFER[BUFFER_LENGTH];

//  float32_t freq_resolution = (float32_t)SAMPLING_RATE / (float32_t)BUFFER_LENGTH;

  HAL_TIM_Base_Start_IT(&htim1);
 8000cc2:	48a7      	ldr	r0, [pc, #668]	; (8000f60 <main+0x32c>)
 8000cc4:	f006 f9fa 	bl	80070bc <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, BUFFER_LENGTH);
 8000cc8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000ccc:	f103 0310 	add.w	r3, r3, #16
 8000cd0:	3b70      	subs	r3, #112	; 0x70
 8000cd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	48a2      	ldr	r0, [pc, #648]	; (8000f64 <main+0x330>)
 8000cda:	f001 fcef 	bl	80026bc <HAL_ADC_Start_DMA>
//		  float32_t s = sin(r) + sin(r*4) * 0.5 + sin(r*3) * 0.25;
//		  signal[i] = s;
//	  }


	  while(convFlag == 0) {;}
 8000cde:	bf00      	nop
 8000ce0:	4b9b      	ldr	r3, [pc, #620]	; (8000f50 <main+0x31c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d0fb      	beq.n	8000ce0 <main+0xac>


	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8000cee:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	e031      	b.n	8000d5a <main+0x126>
		  signal[i] = (double)(ADC_BUFFER[i]);
 8000cf6:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000cfa:	f103 0310 	add.w	r3, r3, #16
 8000cfe:	461a      	mov	r2, r3
 8000d00:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000d04:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	f833 3c70 	ldrh.w	r3, [r3, #-112]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fbbd 	bl	8000494 <__aeabi_ui2d>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	4610      	mov	r0, r2
 8000d20:	4619      	mov	r1, r3
 8000d22:	f7ff fc31 	bl	8000588 <__aeabi_d2f>
 8000d26:	4602      	mov	r2, r0
 8000d28:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8000d2c:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8000d30:	4619      	mov	r1, r3
 8000d32:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000d36:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	440b      	add	r3, r1
 8000d40:	3b70      	subs	r3, #112	; 0x70
 8000d42:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 8000d44:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000d48:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8000d54:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000d5e:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d68:	dbc5      	blt.n	8000cf6 <main+0xc2>
	  }


	  apply_hanning_window(&signal, BUFFER_LENGTH);
 8000d6a:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8000d6e:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8000d72:	3b70      	subs	r3, #112	; 0x70
 8000d74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fde3 	bl	8000944 <apply_hanning_window>


	  autocorrelate(signal, BUFFER_LENGTH,  autocorrelation);
 8000d7e:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8000d82:	f102 0210 	add.w	r2, r2, #16
 8000d86:	3a70      	subs	r2, #112	; 0x70
 8000d88:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8000d8c:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8000d90:	3b70      	subs	r3, #112	; 0x70
 8000d92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fe7a 	bl	8000a90 <autocorrelate>

	  uint32_t peaks[BUFFER_LENGTH/2];
	  uint32_t num_peaks = 0;
 8000d9c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000da0:	f103 0310 	add.w	r3, r3, #16
 8000da4:	461a      	mov	r2, r3
 8000da6:	2300      	movs	r3, #0
 8000da8:	f842 3c74 	str.w	r3, [r2, #-116]

	  find_peaks(autocorrelation, BUFFER_LENGTH/2, peaks, &num_peaks); //returns peak indices
 8000dac:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000db0:	f103 0310 	add.w	r3, r3, #16
 8000db4:	3b74      	subs	r3, #116	; 0x74
 8000db6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000dba:	3a8c      	subs	r2, #140	; 0x8c
 8000dbc:	f507 4081 	add.w	r0, r7, #16512	; 0x4080
 8000dc0:	f100 0010 	add.w	r0, r0, #16
 8000dc4:	3870      	subs	r0, #112	; 0x70
 8000dc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dca:	f7ff fe03 	bl	80009d4 <find_peaks>


	  float32_t freq = 0.0f;
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8000dd6:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8000dda:	6013      	str	r3, [r2, #0]
	     if (num_peaks > 0) {
 8000ddc:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000de0:	f103 0310 	add.w	r3, r3, #16
 8000de4:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 80aa 	beq.w	8000f42 <main+0x30e>
	         // Get the highest valid peak
	         uint32_t max_peak_index = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8000df4:	f102 0284 	add.w	r2, r2, #132	; 0x84
 8000df8:	6013      	str	r3, [r2, #0]
	         float32_t max_value = 0;
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8000e02:	f102 0280 	add.w	r2, r2, #128	; 0x80
 8000e06:	6013      	str	r3, [r2, #0]
	         for (uint32_t i = 0; i < num_peaks; ++i) {
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8000e0e:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	e06a      	b.n	8000eec <main+0x2b8>
	             int32_t peak = peaks[i];
 8000e16:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000e20:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8000e2e:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8000e32:	f102 0258 	add.w	r2, r2, #88	; 0x58
 8000e36:	6013      	str	r3, [r2, #0]
	             //peak greater than lowest period and smaller than largest possible period
	             if (peak > LOWEST_PERIOD && peak < HIGHEST_PERIOD) { //if valid peak
 8000e38:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000e3c:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8000e46:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8000e4a:	6812      	ldr	r2, [r2, #0]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d242      	bcs.n	8000ed6 <main+0x2a2>
 8000e50:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000e54:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8000e5e:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8000e62:	6812      	ldr	r2, [r2, #0]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d936      	bls.n	8000ed6 <main+0x2a2>
	                 if (autocorrelation[peak] > max_value) {
 8000e68:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8000e6c:	f103 0310 	add.w	r3, r3, #16
 8000e70:	461a      	mov	r2, r3
 8000e72:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000e76:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	3b70      	subs	r3, #112	; 0x70
 8000e82:	edd3 7a00 	vldr	s15, [r3]
 8000e86:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000e8a:	f103 0380 	add.w	r3, r3, #128	; 0x80
 8000e8e:	ed93 7a00 	vldr	s14, [r3]
 8000e92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9a:	d51c      	bpl.n	8000ed6 <main+0x2a2>
	                     max_peak_index = peak;
 8000e9c:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000ea0:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8000eaa:	f102 0284 	add.w	r2, r2, #132	; 0x84
 8000eae:	6013      	str	r3, [r2, #0]
	                     max_value = autocorrelation[peak];
 8000eb0:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8000eb4:	f103 0310 	add.w	r3, r3, #16
 8000eb8:	461a      	mov	r2, r3
 8000eba:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000ebe:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	3b70      	subs	r3, #112	; 0x70
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8000ed0:	f102 0280 	add.w	r2, r2, #128	; 0x80
 8000ed4:	6013      	str	r3, [r2, #0]
	         for (uint32_t i = 0; i < num_peaks; ++i) {
 8000ed6:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000eda:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8000ee6:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000ef0:	f103 0310 	add.w	r3, r3, #16
 8000ef4:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8000ef8:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8000efc:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8000f00:	6812      	ldr	r2, [r2, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d387      	bcc.n	8000e16 <main+0x1e2>
	                 }
	             }
	         }
	         if (max_value > 0) {
 8000f06:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000f0a:	f103 0380 	add.w	r3, r3, #128	; 0x80
 8000f0e:	edd3 7a00 	vldr	s15, [r3]
 8000f12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1a:	dd12      	ble.n	8000f42 <main+0x30e>
	             measured_freq = (float32_t)SAMPLING_RATE / max_peak_index;
 8000f1c:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000f20:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	ee07 3a90 	vmov	s15, r3
 8000f2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f2e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000f68 <main+0x334>
 8000f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f36:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000f3a:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8000f3e:	edc3 7a00 	vstr	s15, [r3]

	     //Match frequency to string

	     //find smallest magnitude of distance
	     float32_t min_freqs[6];
	     for(int i = 0; i < 6; ++i){
 8000f42:	2300      	movs	r3, #0
 8000f44:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8000f48:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e03d      	b.n	8000fcc <main+0x398>
 8000f50:	20000278 	.word	0x20000278
 8000f54:	0800a7e0 	.word	0x0800a7e0
 8000f58:	0800a810 	.word	0x0800a810
 8000f5c:	0800a7d4 	.word	0x0800a7d4
 8000f60:	2000022c 	.word	0x2000022c
 8000f64:	20000028 	.word	0x20000028
 8000f68:	469c4000 	.word	0x469c4000
	    	 min_freqs[i] = string_freqs[i] - measured_freq;
 8000f6c:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000f70:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8000f7c:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8000f80:	443b      	add	r3, r7
 8000f82:	3b58      	subs	r3, #88	; 0x58
 8000f84:	ed93 7a00 	vldr	s14, [r3]
 8000f88:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000f8c:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8000f90:	edd3 7a00 	vldr	s15, [r3]
 8000f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f98:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000f9c:	f103 0310 	add.w	r3, r3, #16
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000fa6:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	3b8c      	subs	r3, #140	; 0x8c
 8000fb2:	edc3 7a00 	vstr	s15, [r3]
	     for(int i = 0; i < 6; ++i){
 8000fb6:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000fba:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8000fc6:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8000fd0:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b05      	cmp	r3, #5
 8000fd8:	ddc8      	ble.n	8000f6c <main+0x338>
	     }

	     arm_abs_f32(min_freqs, min_freqs, 6);
 8000fda:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8000fde:	f101 0110 	add.w	r1, r1, #16
 8000fe2:	398c      	subs	r1, #140	; 0x8c
 8000fe4:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000fe8:	f103 0310 	add.w	r3, r3, #16
 8000fec:	3b8c      	subs	r3, #140	; 0x8c
 8000fee:	2206      	movs	r2, #6
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f008 fb7b 	bl	80096ec <arm_abs_f32>

	     //find the argmin
	     float32_t current_min = min_freqs[0];
 8000ff6:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000ffa:	f103 0310 	add.w	r3, r3, #16
 8000ffe:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8001002:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8001006:	f102 0274 	add.w	r2, r2, #116	; 0x74
 800100a:	6013      	str	r3, [r2, #0]
	     uint8_t index = 0;;
 800100c:	2300      	movs	r3, #0
 800100e:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8001012:	f102 0273 	add.w	r2, r2, #115	; 0x73
 8001016:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 8001018:	2300      	movs	r3, #0
 800101a:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 800101e:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	e041      	b.n	80010aa <main+0x476>
	    	 if (min_freqs[i] < current_min){
 8001026:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800102a:	f103 0310 	add.w	r3, r3, #16
 800102e:	461a      	mov	r2, r3
 8001030:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001034:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	3b8c      	subs	r3, #140	; 0x8c
 8001040:	edd3 7a00 	vldr	s15, [r3]
 8001044:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001048:	f103 0374 	add.w	r3, r3, #116	; 0x74
 800104c:	ed93 7a00 	vldr	s14, [r3]
 8001050:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001058:	dd1c      	ble.n	8001094 <main+0x460>
	    		 current_min = min_freqs[i];
 800105a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800105e:	f103 0310 	add.w	r3, r3, #16
 8001062:	461a      	mov	r2, r3
 8001064:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001068:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	3b8c      	subs	r3, #140	; 0x8c
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 800107a:	f102 0274 	add.w	r2, r2, #116	; 0x74
 800107e:	6013      	str	r3, [r2, #0]
	    		 index = i;
 8001080:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001084:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 800108e:	f102 0273 	add.w	r2, r2, #115	; 0x73
 8001092:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 8001094:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001098:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 80010a4:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80010ae:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b05      	cmp	r3, #5
 80010b6:	ddb6      	ble.n	8001026 <main+0x3f2>
	    	 }
	     }

	     //assign detected string
	     detected_string = strings[index];
 80010b8:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80010bc:	f103 0373 	add.w	r3, r3, #115	; 0x73
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 80010c8:	f103 0390 	add.w	r3, r3, #144	; 0x90
 80010cc:	443b      	add	r3, r7
 80010ce:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80010d2:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 80010d6:	f102 0254 	add.w	r2, r2, #84	; 0x54
 80010da:	6013      	str	r3, [r2, #0]

	     //manually compensate for high E being off
	     if(strcmp(detected_string, E_high) == 0){
 80010dc:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80010e0:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80010e4:	6819      	ldr	r1, [r3, #0]
 80010e6:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80010ea:	f103 0354 	add.w	r3, r3, #84	; 0x54
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	f7ff f884 	bl	80001fc <strcmp>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10f      	bne.n	800111a <main+0x4e6>
	    	measured_freq += 2.0; //subject to change, but add 2Hz
 80010fa:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80010fe:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8001102:	edd3 7a00 	vldr	s15, [r3]
 8001106:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800110a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800110e:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001112:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8001116:	edc3 7a00 	vstr	s15, [r3]
	     }

	     string_offset = measured_freq - string_freqs[index];
 800111a:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 800111e:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800112a:	f103 0390 	add.w	r3, r3, #144	; 0x90
 800112e:	443b      	add	r3, r7
 8001130:	3b58      	subs	r3, #88	; 0x58
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 800113a:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 800113e:	ed93 7a00 	vldr	s14, [r3]
 8001142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001146:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 800114a:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800114e:	edc3 7a00 	vstr	s15, [r3]



	  convFlag = 0;
 8001152:	4b02      	ldr	r3, [pc, #8]	; (800115c <main+0x528>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
  {
 8001158:	e5b6      	b.n	8000cc8 <main+0x94>
 800115a:	bf00      	nop
 800115c:	20000278 	.word	0x20000278

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b096      	sub	sp, #88	; 0x58
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	2244      	movs	r2, #68	; 0x44
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f008 fdc0 	bl	8009cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001182:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001186:	f002 feeb 	bl	8003f60 <HAL_PWREx_ControlVoltageScaling>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001190:	f000 fc26 	bl	80019e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001194:	2310      	movs	r3, #16
 8001196:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001198:	2301      	movs	r3, #1
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011a0:	2360      	movs	r3, #96	; 0x60
 80011a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 ff8b 	bl	80040c8 <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80011b8:	f000 fc12 	bl	80019e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011bc:	230f      	movs	r3, #15
 80011be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011d0:	463b      	mov	r3, r7
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 fb91 	bl	80048fc <HAL_RCC_ClockConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011e0:	f000 fbfe 	bl	80019e0 <Error_Handler>
  }
}
 80011e4:	bf00      	nop
 80011e6:	3758      	adds	r7, #88	; 0x58
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0a6      	sub	sp, #152	; 0x98
 80011f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2294      	movs	r2, #148	; 0x94
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f008 fd7b 	bl	8009cf4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 80011fe:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001202:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001204:	2300      	movs	r3, #0
 8001206:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001208:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800120c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001210:	2301      	movs	r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001214:	2301      	movs	r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001218:	2310      	movs	r3, #16
 800121a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800121c:	2302      	movs	r3, #2
 800121e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001220:	2302      	movs	r3, #2
 8001222:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001224:	2302      	movs	r3, #2
 8001226:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <PeriphCommonClock_Config+0x5c>)
 800122a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	4618      	mov	r0, r3
 8001230:	f003 fe22 	bl	8004e78 <HAL_RCCEx_PeriphCLKConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 800123a:	f000 fbd1 	bl	80019e0 <Error_Handler>
  }
}
 800123e:	bf00      	nop
 8001240:	3798      	adds	r7, #152	; 0x98
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	01010000 	.word	0x01010000

0800124c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
 8001260:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001262:	4b2a      	ldr	r3, [pc, #168]	; (800130c <MX_ADC1_Init+0xc0>)
 8001264:	4a2a      	ldr	r2, [pc, #168]	; (8001310 <MX_ADC1_Init+0xc4>)
 8001266:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <MX_ADC1_Init+0xc0>)
 800126a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800126e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001270:	4b26      	ldr	r3, [pc, #152]	; (800130c <MX_ADC1_Init+0xc0>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <MX_ADC1_Init+0xc0>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800127c:	4b23      	ldr	r3, [pc, #140]	; (800130c <MX_ADC1_Init+0xc0>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <MX_ADC1_Init+0xc0>)
 8001284:	2204      	movs	r2, #4
 8001286:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001288:	4b20      	ldr	r3, [pc, #128]	; (800130c <MX_ADC1_Init+0xc0>)
 800128a:	2200      	movs	r2, #0
 800128c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800128e:	4b1f      	ldr	r3, [pc, #124]	; (800130c <MX_ADC1_Init+0xc0>)
 8001290:	2200      	movs	r2, #0
 8001292:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001294:	4b1d      	ldr	r3, [pc, #116]	; (800130c <MX_ADC1_Init+0xc0>)
 8001296:	2201      	movs	r2, #1
 8001298:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <MX_ADC1_Init+0xc0>)
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	; (800130c <MX_ADC1_Init+0xc0>)
 80012a4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_ADC1_Init+0xc0>)
 80012ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <MX_ADC1_Init+0xc0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_ADC1_Init+0xc0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_ADC1_Init+0xc0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c8:	4810      	ldr	r0, [pc, #64]	; (800130c <MX_ADC1_Init+0xc0>)
 80012ca:	f001 f8b1 	bl	8002430 <HAL_ADC_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80012d4:	f000 fb84 	bl	80019e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_ADC1_Init+0xc8>)
 80012da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012dc:	2306      	movs	r3, #6
 80012de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80012e0:	2307      	movs	r3, #7
 80012e2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012e4:	237f      	movs	r3, #127	; 0x7f
 80012e6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012e8:	2304      	movs	r3, #4
 80012ea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f0:	463b      	mov	r3, r7
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_ADC1_Init+0xc0>)
 80012f6:	f001 fa79 	bl	80027ec <HAL_ADC_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8001300:	f000 fb6e 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000028 	.word	0x20000028
 8001310:	50040000 	.word	0x50040000
 8001314:	04300002 	.word	0x04300002

08001318 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800131e:	463b      	mov	r3, r7
 8001320:	2228      	movs	r2, #40	; 0x28
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f008 fce5 	bl	8009cf4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <MX_DAC1_Init+0x60>)
 800132c:	4a13      	ldr	r2, [pc, #76]	; (800137c <MX_DAC1_Init+0x64>)
 800132e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001330:	4811      	ldr	r0, [pc, #68]	; (8001378 <MX_DAC1_Init+0x60>)
 8001332:	f002 f882 	bl	800343a <HAL_DAC_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800133c:	f000 fb50 	bl	80019e0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	4619      	mov	r1, r3
 800135e:	4806      	ldr	r0, [pc, #24]	; (8001378 <MX_DAC1_Init+0x60>)
 8001360:	f002 f88e 	bl	8003480 <HAL_DAC_ConfigChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800136a:	f000 fb39 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	; 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200000f0 	.word	0x200000f0
 800137c:	40007400 	.word	0x40007400

08001380 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <MX_LPUART1_UART_Init+0x90>)
 8001386:	4a23      	ldr	r2, [pc, #140]	; (8001414 <MX_LPUART1_UART_Init+0x94>)
 8001388:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <MX_LPUART1_UART_Init+0x90>)
 800138c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001390:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <MX_LPUART1_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <MX_LPUART1_UART_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <MX_LPUART1_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <MX_LPUART1_UART_Init+0x90>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <MX_LPUART1_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <MX_LPUART1_UART_Init+0x90>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_LPUART1_UART_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_LPUART1_UART_Init+0x90>)
 80013be:	2200      	movs	r2, #0
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <MX_LPUART1_UART_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80013c8:	4811      	ldr	r0, [pc, #68]	; (8001410 <MX_LPUART1_UART_Init+0x90>)
 80013ca:	f006 fd9d 	bl	8007f08 <HAL_UART_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80013d4:	f000 fb04 	bl	80019e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d8:	2100      	movs	r1, #0
 80013da:	480d      	ldr	r0, [pc, #52]	; (8001410 <MX_LPUART1_UART_Init+0x90>)
 80013dc:	f007 fb32 	bl	8008a44 <HAL_UARTEx_SetTxFifoThreshold>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013e6:	f000 fafb 	bl	80019e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ea:	2100      	movs	r1, #0
 80013ec:	4808      	ldr	r0, [pc, #32]	; (8001410 <MX_LPUART1_UART_Init+0x90>)
 80013ee:	f007 fb67 	bl	8008ac0 <HAL_UARTEx_SetRxFifoThreshold>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013f8:	f000 faf2 	bl	80019e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_LPUART1_UART_Init+0x90>)
 80013fe:	f007 fae8 	bl	80089d2 <HAL_UARTEx_DisableFifoMode>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001408:	f000 faea 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000104 	.word	0x20000104
 8001414:	40008000 	.word	0x40008000

08001418 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <MX_SAI1_Init+0x60>)
 800141e:	4a17      	ldr	r2, [pc, #92]	; (800147c <MX_SAI1_Init+0x64>)
 8001420:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_SAI1_Init+0x60>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <MX_SAI1_Init+0x60>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <MX_SAI1_Init+0x60>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001434:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_SAI1_Init+0x60>)
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_SAI1_Init+0x60>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <MX_SAI1_Init+0x60>)
 8001442:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <MX_SAI1_Init+0x68>)
 8001444:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_SAI1_Init+0x60>)
 8001448:	2200      	movs	r2, #0
 800144a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800144c:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <MX_SAI1_Init+0x60>)
 800144e:	2200      	movs	r2, #0
 8001450:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_SAI1_Init+0x60>)
 8001454:	2200      	movs	r2, #0
 8001456:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001458:	4b07      	ldr	r3, [pc, #28]	; (8001478 <MX_SAI1_Init+0x60>)
 800145a:	2200      	movs	r2, #0
 800145c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800145e:	2302      	movs	r3, #2
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	4804      	ldr	r0, [pc, #16]	; (8001478 <MX_SAI1_Init+0x60>)
 8001466:	f005 fa53 	bl	8006910 <HAL_SAI_InitProtocol>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 8001470:	f000 fab6 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000198 	.word	0x20000198
 800147c:	40015404 	.word	0x40015404
 8001480:	0002ee00 	.word	0x0002ee00

08001484 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b09a      	sub	sp, #104	; 0x68
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001498:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
 80014b4:	615a      	str	r2, [r3, #20]
 80014b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	222c      	movs	r2, #44	; 0x2c
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f008 fc18 	bl	8009cf4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014c4:	4b43      	ldr	r3, [pc, #268]	; (80015d4 <MX_TIM1_Init+0x150>)
 80014c6:	4a44      	ldr	r2, [pc, #272]	; (80015d8 <MX_TIM1_Init+0x154>)
 80014c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 19;
 80014ca:	4b42      	ldr	r3, [pc, #264]	; (80015d4 <MX_TIM1_Init+0x150>)
 80014cc:	2213      	movs	r2, #19
 80014ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <MX_TIM1_Init+0x150>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 80014d6:	4b3f      	ldr	r3, [pc, #252]	; (80015d4 <MX_TIM1_Init+0x150>)
 80014d8:	2209      	movs	r2, #9
 80014da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014dc:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <MX_TIM1_Init+0x150>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e2:	4b3c      	ldr	r3, [pc, #240]	; (80015d4 <MX_TIM1_Init+0x150>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e8:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <MX_TIM1_Init+0x150>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014ee:	4839      	ldr	r0, [pc, #228]	; (80015d4 <MX_TIM1_Init+0x150>)
 80014f0:	f005 fd8c 	bl	800700c <HAL_TIM_Base_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014fa:	f000 fa71 	bl	80019e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001502:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001504:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001508:	4619      	mov	r1, r3
 800150a:	4832      	ldr	r0, [pc, #200]	; (80015d4 <MX_TIM1_Init+0x150>)
 800150c:	f005 ff22 	bl	8007354 <HAL_TIM_ConfigClockSource>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001516:	f000 fa63 	bl	80019e0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800151a:	482e      	ldr	r0, [pc, #184]	; (80015d4 <MX_TIM1_Init+0x150>)
 800151c:	f005 fe3e 	bl	800719c <HAL_TIM_OC_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001526:	f000 fa5b 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800152a:	2320      	movs	r3, #32
 800152c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001536:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800153a:	4619      	mov	r1, r3
 800153c:	4825      	ldr	r0, [pc, #148]	; (80015d4 <MX_TIM1_Init+0x150>)
 800153e:	f006 fbdd 	bl	8007cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001548:	f000 fa4a 	bl	80019e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800154c:	2300      	movs	r3, #0
 800154e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5;
 8001550:	2305      	movs	r3, #5
 8001552:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001554:	2300      	movs	r3, #0
 8001556:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001558:	2300      	movs	r3, #0
 800155a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001568:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800156c:	2200      	movs	r2, #0
 800156e:	4619      	mov	r1, r3
 8001570:	4818      	ldr	r0, [pc, #96]	; (80015d4 <MX_TIM1_Init+0x150>)
 8001572:	f005 fe75 	bl	8007260 <HAL_TIM_OC_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800157c:	f000 fa30 	bl	80019e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001598:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	4619      	mov	r1, r3
 80015b4:	4807      	ldr	r0, [pc, #28]	; (80015d4 <MX_TIM1_Init+0x150>)
 80015b6:	f006 fc29 	bl	8007e0c <HAL_TIMEx_ConfigBreakDeadTime>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80015c0:	f000 fa0e 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015c4:	4803      	ldr	r0, [pc, #12]	; (80015d4 <MX_TIM1_Init+0x150>)
 80015c6:	f000 fbcd 	bl	8001d64 <HAL_TIM_MspPostInit>

}
 80015ca:	bf00      	nop
 80015cc:	3768      	adds	r7, #104	; 0x68
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000022c 	.word	0x2000022c
 80015d8:	40012c00 	.word	0x40012c00

080015dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_DMA_Init+0x50>)
 80015e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e6:	4a11      	ldr	r2, [pc, #68]	; (800162c <MX_DMA_Init+0x50>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6493      	str	r3, [r2, #72]	; 0x48
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_DMA_Init+0x50>)
 80015f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_DMA_Init+0x50>)
 80015fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <MX_DMA_Init+0x50>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6493      	str	r3, [r2, #72]	; 0x48
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_DMA_Init+0x50>)
 8001608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	200b      	movs	r0, #11
 8001618:	f001 fed9 	bl	80033ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800161c:	200b      	movs	r0, #11
 800161e:	f001 fef2 	bl	8003406 <HAL_NVIC_EnableIRQ>

}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000

08001630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08e      	sub	sp, #56	; 0x38
 8001634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001646:	4bb2      	ldr	r3, [pc, #712]	; (8001910 <MX_GPIO_Init+0x2e0>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	4ab1      	ldr	r2, [pc, #708]	; (8001910 <MX_GPIO_Init+0x2e0>)
 800164c:	f043 0310 	orr.w	r3, r3, #16
 8001650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001652:	4baf      	ldr	r3, [pc, #700]	; (8001910 <MX_GPIO_Init+0x2e0>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	623b      	str	r3, [r7, #32]
 800165c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165e:	4bac      	ldr	r3, [pc, #688]	; (8001910 <MX_GPIO_Init+0x2e0>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	4aab      	ldr	r2, [pc, #684]	; (8001910 <MX_GPIO_Init+0x2e0>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166a:	4ba9      	ldr	r3, [pc, #676]	; (8001910 <MX_GPIO_Init+0x2e0>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001676:	4ba6      	ldr	r3, [pc, #664]	; (8001910 <MX_GPIO_Init+0x2e0>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	4aa5      	ldr	r2, [pc, #660]	; (8001910 <MX_GPIO_Init+0x2e0>)
 800167c:	f043 0320 	orr.w	r3, r3, #32
 8001680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001682:	4ba3      	ldr	r3, [pc, #652]	; (8001910 <MX_GPIO_Init+0x2e0>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168e:	4ba0      	ldr	r3, [pc, #640]	; (8001910 <MX_GPIO_Init+0x2e0>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	4a9f      	ldr	r2, [pc, #636]	; (8001910 <MX_GPIO_Init+0x2e0>)
 8001694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169a:	4b9d      	ldr	r3, [pc, #628]	; (8001910 <MX_GPIO_Init+0x2e0>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	4b9a      	ldr	r3, [pc, #616]	; (8001910 <MX_GPIO_Init+0x2e0>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016aa:	4a99      	ldr	r2, [pc, #612]	; (8001910 <MX_GPIO_Init+0x2e0>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b2:	4b97      	ldr	r3, [pc, #604]	; (8001910 <MX_GPIO_Init+0x2e0>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	4b94      	ldr	r3, [pc, #592]	; (8001910 <MX_GPIO_Init+0x2e0>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	4a93      	ldr	r2, [pc, #588]	; (8001910 <MX_GPIO_Init+0x2e0>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ca:	4b91      	ldr	r3, [pc, #580]	; (8001910 <MX_GPIO_Init+0x2e0>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d6:	4b8e      	ldr	r3, [pc, #568]	; (8001910 <MX_GPIO_Init+0x2e0>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	4a8d      	ldr	r2, [pc, #564]	; (8001910 <MX_GPIO_Init+0x2e0>)
 80016dc:	f043 0308 	orr.w	r3, r3, #8
 80016e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e2:	4b8b      	ldr	r3, [pc, #556]	; (8001910 <MX_GPIO_Init+0x2e0>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ee:	4b88      	ldr	r3, [pc, #544]	; (8001910 <MX_GPIO_Init+0x2e0>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	4a87      	ldr	r2, [pc, #540]	; (8001910 <MX_GPIO_Init+0x2e0>)
 80016f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fa:	4b85      	ldr	r3, [pc, #532]	; (8001910 <MX_GPIO_Init+0x2e0>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001706:	f002 fccf 	bl	80040a8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800170a:	2307      	movs	r3, #7
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170e:	2312      	movs	r3, #18
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800171a:	2304      	movs	r3, #4
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800171e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001722:	4619      	mov	r1, r3
 8001724:	487b      	ldr	r0, [pc, #492]	; (8001914 <MX_GPIO_Init+0x2e4>)
 8001726:	f002 fa69 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800172a:	2301      	movs	r3, #1
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800173a:	2301      	movs	r3, #1
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001748:	f002 fa58 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800174c:	23e0      	movs	r3, #224	; 0xe0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800175c:	2305      	movs	r3, #5
 800175e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001764:	4619      	mov	r1, r3
 8001766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176a:	f002 fa47 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800176e:	2301      	movs	r3, #1
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800177e:	2302      	movs	r3, #2
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	4863      	ldr	r0, [pc, #396]	; (8001918 <MX_GPIO_Init+0x2e8>)
 800178a:	f002 fa37 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800178e:	2344      	movs	r3, #68	; 0x44
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001792:	2303      	movs	r3, #3
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179e:	4619      	mov	r1, r3
 80017a0:	485d      	ldr	r0, [pc, #372]	; (8001918 <MX_GPIO_Init+0x2e8>)
 80017a2:	f002 fa2b 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017b8:	2301      	movs	r3, #1
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c0:	4619      	mov	r1, r3
 80017c2:	4855      	ldr	r0, [pc, #340]	; (8001918 <MX_GPIO_Init+0x2e8>)
 80017c4:	f002 fa1a 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80017c8:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80017da:	230d      	movs	r3, #13
 80017dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	484c      	ldr	r0, [pc, #304]	; (8001918 <MX_GPIO_Init+0x2e8>)
 80017e6:	f002 fa09 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80017fc:	230e      	movs	r3, #14
 80017fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001804:	4619      	mov	r1, r3
 8001806:	4844      	ldr	r0, [pc, #272]	; (8001918 <MX_GPIO_Init+0x2e8>)
 8001808:	f002 f9f8 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800180c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800181e:	2307      	movs	r3, #7
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001826:	4619      	mov	r1, r3
 8001828:	483c      	ldr	r0, [pc, #240]	; (800191c <MX_GPIO_Init+0x2ec>)
 800182a:	f002 f9e7 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800182e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001840:	2302      	movs	r3, #2
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001848:	4619      	mov	r1, r3
 800184a:	4834      	ldr	r0, [pc, #208]	; (800191c <MX_GPIO_Init+0x2ec>)
 800184c:	f002 f9d6 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001850:	2340      	movs	r3, #64	; 0x40
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001860:	230d      	movs	r3, #13
 8001862:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001868:	4619      	mov	r1, r3
 800186a:	482d      	ldr	r0, [pc, #180]	; (8001920 <MX_GPIO_Init+0x2f0>)
 800186c:	f002 f9c6 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001880:	2302      	movs	r3, #2
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001888:	4619      	mov	r1, r3
 800188a:	4825      	ldr	r0, [pc, #148]	; (8001920 <MX_GPIO_Init+0x2f0>)
 800188c:	f002 f9b6 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001890:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018a2:	230c      	movs	r3, #12
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018aa:	4619      	mov	r1, r3
 80018ac:	481c      	ldr	r0, [pc, #112]	; (8001920 <MX_GPIO_Init+0x2f0>)
 80018ae:	f002 f9a5 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80018b2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018c4:	230a      	movs	r3, #10
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d2:	f002 f993 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018dc:	2300      	movs	r3, #0
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e8:	4619      	mov	r1, r3
 80018ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ee:	f002 f985 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018f2:	2301      	movs	r3, #1
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001902:	2309      	movs	r3, #9
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	4619      	mov	r1, r3
 800190c:	e00a      	b.n	8001924 <MX_GPIO_Init+0x2f4>
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000
 8001914:	48001400 	.word	0x48001400
 8001918:	48000400 	.word	0x48000400
 800191c:	48000c00 	.word	0x48000c00
 8001920:	48000800 	.word	0x48000800
 8001924:	482b      	ldr	r0, [pc, #172]	; (80019d4 <MX_GPIO_Init+0x3a4>)
 8001926:	f002 f969 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800192a:	2304      	movs	r3, #4
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800193a:	230c      	movs	r3, #12
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800193e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001942:	4619      	mov	r1, r3
 8001944:	4823      	ldr	r0, [pc, #140]	; (80019d4 <MX_GPIO_Init+0x3a4>)
 8001946:	f002 f959 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800194a:	2378      	movs	r3, #120	; 0x78
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800195a:	2307      	movs	r3, #7
 800195c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800195e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001962:	4619      	mov	r1, r3
 8001964:	481b      	ldr	r0, [pc, #108]	; (80019d4 <MX_GPIO_Init+0x3a4>)
 8001966:	f002 f949 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800196a:	2338      	movs	r3, #56	; 0x38
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800197a:	2306      	movs	r3, #6
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001982:	4619      	mov	r1, r3
 8001984:	4814      	ldr	r0, [pc, #80]	; (80019d8 <MX_GPIO_Init+0x3a8>)
 8001986:	f002 f939 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800198a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001990:	2312      	movs	r3, #18
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800199c:	2304      	movs	r3, #4
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a4:	4619      	mov	r1, r3
 80019a6:	480c      	ldr	r0, [pc, #48]	; (80019d8 <MX_GPIO_Init+0x3a8>)
 80019a8:	f002 f928 	bl	8003bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019ac:	2301      	movs	r3, #1
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019bc:	2302      	movs	r3, #2
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c4:	4619      	mov	r1, r3
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_GPIO_Init+0x3ac>)
 80019c8:	f002 f918 	bl	8003bfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019cc:	bf00      	nop
 80019ce:	3738      	adds	r7, #56	; 0x38
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	48000c00 	.word	0x48000c00
 80019d8:	48000400 	.word	0x48000400
 80019dc:	48001000 	.word	0x48001000

080019e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e4:	b672      	cpsid	i
}
 80019e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <Error_Handler+0x8>
	...

080019ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <HAL_MspInit+0x44>)
 80019f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f6:	4a0e      	ldr	r2, [pc, #56]	; (8001a30 <HAL_MspInit+0x44>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6613      	str	r3, [r2, #96]	; 0x60
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <HAL_MspInit+0x44>)
 8001a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_MspInit+0x44>)
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0e:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <HAL_MspInit+0x44>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	6593      	str	r3, [r2, #88]	; 0x58
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_MspInit+0x44>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000

08001a34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	; 0x30
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 031c 	add.w	r3, r7, #28
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a44      	ldr	r2, [pc, #272]	; (8001b64 <HAL_ADC_MspInit+0x130>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	f040 8081 	bne.w	8001b5a <HAL_ADC_MspInit+0x126>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a58:	4b43      	ldr	r3, [pc, #268]	; (8001b68 <HAL_ADC_MspInit+0x134>)
 8001a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5c:	4a42      	ldr	r2, [pc, #264]	; (8001b68 <HAL_ADC_MspInit+0x134>)
 8001a5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a64:	4b40      	ldr	r3, [pc, #256]	; (8001b68 <HAL_ADC_MspInit+0x134>)
 8001a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a70:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <HAL_ADC_MspInit+0x134>)
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	4a3c      	ldr	r2, [pc, #240]	; (8001b68 <HAL_ADC_MspInit+0x134>)
 8001a76:	f043 0304 	orr.w	r3, r3, #4
 8001a7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7c:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <HAL_ADC_MspInit+0x134>)
 8001a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <HAL_ADC_MspInit+0x134>)
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8c:	4a36      	ldr	r2, [pc, #216]	; (8001b68 <HAL_ADC_MspInit+0x134>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a94:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <HAL_ADC_MspInit+0x134>)
 8001a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa0:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <HAL_ADC_MspInit+0x134>)
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa4:	4a30      	ldr	r2, [pc, #192]	; (8001b68 <HAL_ADC_MspInit+0x134>)
 8001aa6:	f043 0302 	orr.w	r3, r3, #2
 8001aaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aac:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <HAL_ADC_MspInit+0x134>)
 8001aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ab8:	233f      	movs	r3, #63	; 0x3f
 8001aba:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001abc:	230b      	movs	r3, #11
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4828      	ldr	r0, [pc, #160]	; (8001b6c <HAL_ADC_MspInit+0x138>)
 8001acc:	f002 f896 	bl	8003bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ad4:	230b      	movs	r3, #11
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae6:	f002 f889 	bl	8003bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001aee:	230b      	movs	r3, #11
 8001af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4619      	mov	r1, r3
 8001afc:	481c      	ldr	r0, [pc, #112]	; (8001b70 <HAL_ADC_MspInit+0x13c>)
 8001afe:	f002 f87d 	bl	8003bfc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <HAL_ADC_MspInit+0x140>)
 8001b04:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <HAL_ADC_MspInit+0x144>)
 8001b06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001b08:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <HAL_ADC_MspInit+0x140>)
 8001b0a:	2205      	movs	r2, #5
 8001b0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_ADC_MspInit+0x140>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b14:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_ADC_MspInit+0x140>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_ADC_MspInit+0x140>)
 8001b1c:	2280      	movs	r2, #128	; 0x80
 8001b1e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_ADC_MspInit+0x140>)
 8001b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b26:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_ADC_MspInit+0x140>)
 8001b2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b2e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <HAL_ADC_MspInit+0x140>)
 8001b32:	2220      	movs	r2, #32
 8001b34:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <HAL_ADC_MspInit+0x140>)
 8001b38:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001b3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b3e:	480d      	ldr	r0, [pc, #52]	; (8001b74 <HAL_ADC_MspInit+0x140>)
 8001b40:	f001 fdea 	bl	8003718 <HAL_DMA_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 8001b4a:	f7ff ff49 	bl	80019e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <HAL_ADC_MspInit+0x140>)
 8001b52:	651a      	str	r2, [r3, #80]	; 0x50
 8001b54:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <HAL_ADC_MspInit+0x140>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3730      	adds	r7, #48	; 0x30
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	50040000 	.word	0x50040000
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	48000800 	.word	0x48000800
 8001b70:	48000400 	.word	0x48000400
 8001b74:	20000090 	.word	0x20000090
 8001b78:	40020008 	.word	0x40020008

08001b7c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a15      	ldr	r2, [pc, #84]	; (8001bf0 <HAL_DAC_MspInit+0x74>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d124      	bne.n	8001be8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_DAC_MspInit+0x78>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	4a14      	ldr	r2, [pc, #80]	; (8001bf4 <HAL_DAC_MspInit+0x78>)
 8001ba4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_DAC_MspInit+0x78>)
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <HAL_DAC_MspInit+0x78>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <HAL_DAC_MspInit+0x78>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <HAL_DAC_MspInit+0x78>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bce:	2310      	movs	r3, #16
 8001bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be4:	f002 f80a 	bl	8003bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001be8:	bf00      	nop
 8001bea:	3728      	adds	r7, #40	; 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40007400 	.word	0x40007400
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b0ae      	sub	sp, #184	; 0xb8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	2294      	movs	r2, #148	; 0x94
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f008 f86b 	bl	8009cf4 <memset>
  if(huart->Instance==LPUART1)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a22      	ldr	r2, [pc, #136]	; (8001cac <HAL_UART_MspInit+0xb4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d13d      	bne.n	8001ca4 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001c28:	2320      	movs	r3, #32
 8001c2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	4618      	mov	r0, r3
 8001c36:	f003 f91f 	bl	8004e78 <HAL_RCCEx_PeriphCLKConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c40:	f7ff fece 	bl	80019e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c44:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_UART_MspInit+0xb8>)
 8001c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c48:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <HAL_UART_MspInit+0xb8>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001c50:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <HAL_UART_MspInit+0xb8>)
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_UART_MspInit+0xb8>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c60:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <HAL_UART_MspInit+0xb8>)
 8001c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_UART_MspInit+0xb8>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001c74:	f002 fa18 	bl	80040a8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001c78:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001c92:	2308      	movs	r3, #8
 8001c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <HAL_UART_MspInit+0xbc>)
 8001ca0:	f001 ffac 	bl	8003bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	37b8      	adds	r7, #184	; 0xb8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40008000 	.word	0x40008000
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	48001800 	.word	0x48001800

08001cb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a20      	ldr	r2, [pc, #128]	; (8001d58 <HAL_TIM_Base_MspInit+0xa0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d139      	bne.n	8001d4e <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_TIM_Base_MspInit+0xa4>)
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cde:	4a1f      	ldr	r2, [pc, #124]	; (8001d5c <HAL_TIM_Base_MspInit+0xa4>)
 8001ce0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ce4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_TIM_Base_MspInit+0xa4>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <HAL_TIM_Base_MspInit+0xa4>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	4a19      	ldr	r2, [pc, #100]	; (8001d5c <HAL_TIM_Base_MspInit+0xa4>)
 8001cf8:	f043 0310 	orr.w	r3, r3, #16
 8001cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <HAL_TIM_Base_MspInit+0xa4>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001d0a:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8001d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	4619      	mov	r1, r3
 8001d26:	480e      	ldr	r0, [pc, #56]	; (8001d60 <HAL_TIM_Base_MspInit+0xa8>)
 8001d28:	f001 ff68 	bl	8003bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d2c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	; (8001d60 <HAL_TIM_Base_MspInit+0xa8>)
 8001d4a:	f001 ff57 	bl	8003bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	; 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40012c00 	.word	0x40012c00
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	48001000 	.word	0x48001000

08001d64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <HAL_TIM_MspPostInit+0x64>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d11c      	bne.n	8001dc0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_TIM_MspPostInit+0x68>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	4a10      	ldr	r2, [pc, #64]	; (8001dcc <HAL_TIM_MspPostInit+0x68>)
 8001d8c:	f043 0310 	orr.w	r3, r3, #16
 8001d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <HAL_TIM_MspPostInit+0x68>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE10     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 8001d9e:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8001da2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001db0:	2301      	movs	r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	4619      	mov	r1, r3
 8001dba:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <HAL_TIM_MspPostInit+0x6c>)
 8001dbc:	f001 ff1e 	bl	8003bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001dc0:	bf00      	nop
 8001dc2:	3720      	adds	r7, #32
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40012c00 	.word	0x40012c00
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	48001000 	.word	0x48001000

08001dd4 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1d      	ldr	r2, [pc, #116]	; (8001e58 <HAL_SAI_MspInit+0x84>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d134      	bne.n	8001e50 <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_SAI_MspInit+0x88>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10b      	bne.n	8001e06 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001dee:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <HAL_SAI_MspInit+0x8c>)
 8001df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df2:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <HAL_SAI_MspInit+0x8c>)
 8001df4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001df8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_SAI_MspInit+0x8c>)
 8001dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_SAI_MspInit+0x88>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <HAL_SAI_MspInit+0x88>)
 8001e0e:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PF7     ------> SAI1_MCLK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001e10:	237c      	movs	r3, #124	; 0x7c
 8001e12:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001e20:	230d      	movs	r3, #13
 8001e22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	4619      	mov	r1, r3
 8001e2a:	480e      	ldr	r0, [pc, #56]	; (8001e64 <HAL_SAI_MspInit+0x90>)
 8001e2c:	f001 fee6 	bl	8003bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001e40:	230d      	movs	r3, #13
 8001e42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4807      	ldr	r0, [pc, #28]	; (8001e68 <HAL_SAI_MspInit+0x94>)
 8001e4c:	f001 fed6 	bl	8003bfc <HAL_GPIO_Init>

    }
}
 8001e50:	bf00      	nop
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40015404 	.word	0x40015404
 8001e5c:	2000027c 	.word	0x2000027c
 8001e60:	40021000 	.word	0x40021000
 8001e64:	48001000 	.word	0x48001000
 8001e68:	48001400 	.word	0x48001400

08001e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e70:	e7fe      	b.n	8001e70 <NMI_Handler+0x4>

08001e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <HardFault_Handler+0x4>

08001e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <MemManage_Handler+0x4>

08001e7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <BusFault_Handler+0x4>

08001e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <UsageFault_Handler+0x4>

08001e8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb8:	f000 f89c 	bl	8001ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ec4:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <DMA1_Channel1_IRQHandler+0x10>)
 8001ec6:	f001 fd4a 	bl	800395e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000090 	.word	0x20000090

08001ed4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <SystemInit+0x20>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ede:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <SystemInit+0x20>)
 8001ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001efc:	f7ff ffea 	bl	8001ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f02:	490d      	ldr	r1, [pc, #52]	; (8001f38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <LoopForever+0xe>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f08:	e002      	b.n	8001f10 <LoopCopyDataInit>

08001f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0e:	3304      	adds	r3, #4

08001f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f14:	d3f9      	bcc.n	8001f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f18:	4c0a      	ldr	r4, [pc, #40]	; (8001f44 <LoopForever+0x16>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f1c:	e001      	b.n	8001f22 <LoopFillZerobss>

08001f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f20:	3204      	adds	r2, #4

08001f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f24:	d3fb      	bcc.n	8001f1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f26:	f007 feed 	bl	8009d04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f2a:	f7fe fe83 	bl	8000c34 <main>

08001f2e <LoopForever>:

LoopForever:
    b LoopForever
 8001f2e:	e7fe      	b.n	8001f2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f30:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f3c:	0801dc60 	.word	0x0801dc60
  ldr r2, =_sbss
 8001f40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f44:	20000284 	.word	0x20000284

08001f48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f48:	e7fe      	b.n	8001f48 <ADC1_IRQHandler>

08001f4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f54:	2003      	movs	r0, #3
 8001f56:	f001 fa2f 	bl	80033b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f000 f80e 	bl	8001f7c <HAL_InitTick>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	71fb      	strb	r3, [r7, #7]
 8001f6a:	e001      	b.n	8001f70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f6c:	f7ff fd3e 	bl	80019ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f70:	79fb      	ldrb	r3, [r7, #7]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f88:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_InitTick+0x6c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d023      	beq.n	8001fd8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f90:	4b16      	ldr	r3, [pc, #88]	; (8001fec <HAL_InitTick+0x70>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_InitTick+0x6c>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f001 fa3b 	bl	8003422 <HAL_SYSTICK_Config>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10f      	bne.n	8001fd2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b0f      	cmp	r3, #15
 8001fb6:	d809      	bhi.n	8001fcc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f001 fa05 	bl	80033ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fc4:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <HAL_InitTick+0x74>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	e007      	b.n	8001fdc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e004      	b.n	8001fdc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
 8001fd6:	e001      	b.n	8001fdc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000008 	.word	0x20000008
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	20000004 	.word	0x20000004

08001ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_IncTick+0x20>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_IncTick+0x24>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_IncTick+0x24>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000008 	.word	0x20000008
 8002018:	20000280 	.word	0x20000280

0800201c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return uwTick;
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <HAL_GetTick+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000280 	.word	0x20000280

08002034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800203c:	f7ff ffee 	bl	800201c <HAL_GetTick>
 8002040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d005      	beq.n	800205a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_Delay+0x44>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800205a:	bf00      	nop
 800205c:	f7ff ffde 	bl	800201c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	429a      	cmp	r2, r3
 800206a:	d8f7      	bhi.n	800205c <HAL_Delay+0x28>
  {
  }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000008 	.word	0x20000008

0800207c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	609a      	str	r2, [r3, #8]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	609a      	str	r2, [r3, #8]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3360      	adds	r3, #96	; 0x60
 80020f6:	461a      	mov	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <LL_ADC_SetOffset+0x44>)
 8002106:	4013      	ands	r3, r2
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	4313      	orrs	r3, r2
 8002114:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800211c:	bf00      	nop
 800211e:	371c      	adds	r7, #28
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	03fff000 	.word	0x03fff000

0800212c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3360      	adds	r3, #96	; 0x60
 800213a:	461a      	mov	r2, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800214c:	4618      	mov	r0, r3
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3360      	adds	r3, #96	; 0x60
 8002168:	461a      	mov	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	431a      	orrs	r2, r3
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002182:	bf00      	nop
 8002184:	371c      	adds	r7, #28
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	615a      	str	r2, [r3, #20]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021da:	b480      	push	{r7}
 80021dc:	b087      	sub	sp, #28
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3330      	adds	r3, #48	; 0x30
 80021ea:	461a      	mov	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	4413      	add	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	211f      	movs	r1, #31
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	401a      	ands	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	0e9b      	lsrs	r3, r3, #26
 8002212:	f003 011f 	and.w	r1, r3, #31
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	fa01 f303 	lsl.w	r3, r1, r3
 8002220:	431a      	orrs	r2, r3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002226:	bf00      	nop
 8002228:	371c      	adds	r7, #28
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002232:	b480      	push	{r7}
 8002234:	b087      	sub	sp, #28
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3314      	adds	r3, #20
 8002242:	461a      	mov	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	0e5b      	lsrs	r3, r3, #25
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	4413      	add	r3, r2
 8002250:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	0d1b      	lsrs	r3, r3, #20
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	2107      	movs	r1, #7
 8002260:	fa01 f303 	lsl.w	r3, r1, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	401a      	ands	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	0d1b      	lsrs	r3, r3, #20
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	431a      	orrs	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800227c:	bf00      	nop
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a0:	43db      	mvns	r3, r3
 80022a2:	401a      	ands	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0318 	and.w	r3, r3, #24
 80022aa:	4908      	ldr	r1, [pc, #32]	; (80022cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80022ac:	40d9      	lsrs	r1, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	400b      	ands	r3, r1
 80022b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b6:	431a      	orrs	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	0007ffff 	.word	0x0007ffff

080022d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80022e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6093      	str	r3, [r2, #8]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002308:	d101      	bne.n	800230e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800232c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002330:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002354:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002358:	d101      	bne.n	800235e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800237c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002380:	f043 0201 	orr.w	r2, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <LL_ADC_IsEnabled+0x18>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <LL_ADC_IsEnabled+0x1a>
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023ce:	f043 0204 	orr.w	r2, r3, #4
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d101      	bne.n	80023fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b08      	cmp	r3, #8
 800241a:	d101      	bne.n	8002420 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e129      	b.n	800269e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff faeb 	bl	8001a34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff3f 	bl	80022f4 <LL_ADC_IsDeepPowerDownEnabled>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff25 	bl	80022d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff ff5a 	bl	8002344 <LL_ADC_IsInternalRegulatorEnabled>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d115      	bne.n	80024c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff ff3e 	bl	800231c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024a0:	4b81      	ldr	r3, [pc, #516]	; (80026a8 <HAL_ADC_Init+0x278>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	099b      	lsrs	r3, r3, #6
 80024a6:	4a81      	ldr	r2, [pc, #516]	; (80026ac <HAL_ADC_Init+0x27c>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	099b      	lsrs	r3, r3, #6
 80024ae:	3301      	adds	r3, #1
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024b4:	e002      	b.n	80024bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f9      	bne.n	80024b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ff3c 	bl	8002344 <LL_ADC_IsInternalRegulatorEnabled>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10d      	bne.n	80024ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f043 0210 	orr.w	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	f043 0201 	orr.w	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ff75 	bl	80023e2 <LL_ADC_REG_IsConversionOngoing>
 80024f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	f040 80c2 	bne.w	800268c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f040 80be 	bne.w	800268c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002518:	f043 0202 	orr.w	r2, r3, #2
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff35 	bl	8002394 <LL_ADC_IsEnabled>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10b      	bne.n	8002548 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002530:	485f      	ldr	r0, [pc, #380]	; (80026b0 <HAL_ADC_Init+0x280>)
 8002532:	f7ff ff2f 	bl	8002394 <LL_ADC_IsEnabled>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d105      	bne.n	8002548 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4619      	mov	r1, r3
 8002542:	485c      	ldr	r0, [pc, #368]	; (80026b4 <HAL_ADC_Init+0x284>)
 8002544:	f7ff fd9a 	bl	800207c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	7e5b      	ldrb	r3, [r3, #25]
 800254c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002552:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002558:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800255e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002566:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d106      	bne.n	8002584 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	3b01      	subs	r3, #1
 800257c:	045b      	lsls	r3, r3, #17
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	2b00      	cmp	r3, #0
 800258a:	d009      	beq.n	80025a0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	4b44      	ldr	r3, [pc, #272]	; (80026b8 <HAL_ADC_Init+0x288>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	69b9      	ldr	r1, [r7, #24]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff25 	bl	8002408 <LL_ADC_INJ_IsConversionOngoing>
 80025be:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d140      	bne.n	8002648 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d13d      	bne.n	8002648 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7e1b      	ldrb	r3, [r3, #24]
 80025d4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025d6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025de:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ee:	f023 0306 	bic.w	r3, r3, #6
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	69b9      	ldr	r1, [r7, #24]
 80025f8:	430b      	orrs	r3, r1
 80025fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002602:	2b01      	cmp	r3, #1
 8002604:	d118      	bne.n	8002638 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002610:	f023 0304 	bic.w	r3, r3, #4
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800261c:	4311      	orrs	r1, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002622:	4311      	orrs	r1, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002628:	430a      	orrs	r2, r1
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0201 	orr.w	r2, r2, #1
 8002634:	611a      	str	r2, [r3, #16]
 8002636:	e007      	b.n	8002648 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0201 	bic.w	r2, r2, #1
 8002646:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d10c      	bne.n	800266a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f023 010f 	bic.w	r1, r3, #15
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	1e5a      	subs	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	631a      	str	r2, [r3, #48]	; 0x30
 8002668:	e007      	b.n	800267a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 020f 	bic.w	r2, r2, #15
 8002678:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	f023 0303 	bic.w	r3, r3, #3
 8002682:	f043 0201 	orr.w	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	659a      	str	r2, [r3, #88]	; 0x58
 800268a:	e007      	b.n	800269c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	f043 0210 	orr.w	r2, r3, #16
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800269c:	7ffb      	ldrb	r3, [r7, #31]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000000 	.word	0x20000000
 80026ac:	053e2d63 	.word	0x053e2d63
 80026b0:	50040000 	.word	0x50040000
 80026b4:	50040300 	.word	0x50040300
 80026b8:	fff0c007 	.word	0xfff0c007

080026bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fe88 	bl	80023e2 <LL_ADC_REG_IsConversionOngoing>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d167      	bne.n	80027a8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_ADC_Start_DMA+0x2a>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e063      	b.n	80027ae <HAL_ADC_Start_DMA+0xf2>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fc78 	bl	8002fe4 <ADC_Enable>
 80026f4:	4603      	mov	r3, r0
 80026f6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d14f      	bne.n	800279e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002702:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002706:	f023 0301 	bic.w	r3, r3, #1
 800270a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d006      	beq.n	800272c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002722:	f023 0206 	bic.w	r2, r3, #6
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	65da      	str	r2, [r3, #92]	; 0x5c
 800272a:	e002      	b.n	8002732 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002736:	4a20      	ldr	r2, [pc, #128]	; (80027b8 <HAL_ADC_Start_DMA+0xfc>)
 8002738:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800273e:	4a1f      	ldr	r2, [pc, #124]	; (80027bc <HAL_ADC_Start_DMA+0x100>)
 8002740:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002746:	4a1e      	ldr	r2, [pc, #120]	; (80027c0 <HAL_ADC_Start_DMA+0x104>)
 8002748:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	221c      	movs	r2, #28
 8002750:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0210 	orr.w	r2, r2, #16
 8002768:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3340      	adds	r3, #64	; 0x40
 8002784:	4619      	mov	r1, r3
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f001 f86d 	bl	8003868 <HAL_DMA_Start_IT>
 800278e:	4603      	mov	r3, r0
 8002790:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fe0f 	bl	80023ba <LL_ADC_REG_StartConversion>
 800279c:	e006      	b.n	80027ac <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80027a6:	e001      	b.n	80027ac <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027a8:	2302      	movs	r3, #2
 80027aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	080030f1 	.word	0x080030f1
 80027bc:	080031c9 	.word	0x080031c9
 80027c0:	080031e5 	.word	0x080031e5

080027c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b0b6      	sub	sp, #216	; 0xd8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_ADC_ConfigChannel+0x22>
 800280a:	2302      	movs	r3, #2
 800280c:	e3d5      	b.n	8002fba <HAL_ADC_ConfigChannel+0x7ce>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fde1 	bl	80023e2 <LL_ADC_REG_IsConversionOngoing>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	f040 83ba 	bne.w	8002f9c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b05      	cmp	r3, #5
 8002836:	d824      	bhi.n	8002882 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	3b02      	subs	r3, #2
 800283e:	2b03      	cmp	r3, #3
 8002840:	d81b      	bhi.n	800287a <HAL_ADC_ConfigChannel+0x8e>
 8002842:	a201      	add	r2, pc, #4	; (adr r2, 8002848 <HAL_ADC_ConfigChannel+0x5c>)
 8002844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002848:	08002859 	.word	0x08002859
 800284c:	08002861 	.word	0x08002861
 8002850:	08002869 	.word	0x08002869
 8002854:	08002871 	.word	0x08002871
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002858:	230c      	movs	r3, #12
 800285a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800285e:	e010      	b.n	8002882 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002860:	2312      	movs	r3, #18
 8002862:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002866:	e00c      	b.n	8002882 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002868:	2318      	movs	r3, #24
 800286a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800286e:	e008      	b.n	8002882 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002878:	e003      	b.n	8002882 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800287a:	2306      	movs	r3, #6
 800287c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002880:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002890:	f7ff fca3 	bl	80021da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fda2 	bl	80023e2 <LL_ADC_REG_IsConversionOngoing>
 800289e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fdae 	bl	8002408 <LL_ADC_INJ_IsConversionOngoing>
 80028ac:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f040 81bf 	bne.w	8002c38 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 81ba 	bne.w	8002c38 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028cc:	d10f      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2200      	movs	r2, #0
 80028d8:	4619      	mov	r1, r3
 80028da:	f7ff fcaa 	bl	8002232 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fc51 	bl	800218e <LL_ADC_SetSamplingTimeCommonConfig>
 80028ec:	e00e      	b.n	800290c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6819      	ldr	r1, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f7ff fc99 	bl	8002232 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fc41 	bl	800218e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	08db      	lsrs	r3, r3, #3
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b04      	cmp	r3, #4
 800292c:	d00a      	beq.n	8002944 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6919      	ldr	r1, [r3, #16]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800293e:	f7ff fbd1 	bl	80020e4 <LL_ADC_SetOffset>
 8002942:	e179      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fbee 	bl	800212c <LL_ADC_GetOffsetChannel>
 8002950:	4603      	mov	r3, r0
 8002952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x184>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fbe3 	bl	800212c <LL_ADC_GetOffsetChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	f003 021f 	and.w	r2, r3, #31
 800296e:	e01e      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1c2>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2100      	movs	r1, #0
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fbd8 	bl	800212c <LL_ADC_GetOffsetChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800298e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002992:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002996:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800299e:	2320      	movs	r3, #32
 80029a0:	e004      	b.n	80029ac <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80029a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d105      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x1da>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	0e9b      	lsrs	r3, r3, #26
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	e018      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x20c>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80029da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80029e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80029ea:	2320      	movs	r3, #32
 80029ec:	e004      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80029ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d106      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2200      	movs	r2, #0
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fba7 	bl	8002158 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2101      	movs	r1, #1
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fb8b 	bl	800212c <LL_ADC_GetOffsetChannel>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x24a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2101      	movs	r1, #1
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fb80 	bl	800212c <LL_ADC_GetOffsetChannel>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	0e9b      	lsrs	r3, r3, #26
 8002a30:	f003 021f 	and.w	r2, r3, #31
 8002a34:	e01e      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x288>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fb75 	bl	800212c <LL_ADC_GetOffsetChannel>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002a5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002a64:	2320      	movs	r3, #32
 8002a66:	e004      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002a68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x2a0>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0e9b      	lsrs	r3, r3, #26
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	e018      	b.n	8002abe <HAL_ADC_ConfigChannel+0x2d2>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002aa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002aa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002aa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002ab0:	2320      	movs	r3, #32
 8002ab2:	e004      	b.n	8002abe <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002ab4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d106      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2101      	movs	r1, #1
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fb44 	bl	8002158 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fb28 	bl	800212c <LL_ADC_GetOffsetChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x310>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2102      	movs	r1, #2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fb1d 	bl	800212c <LL_ADC_GetOffsetChannel>
 8002af2:	4603      	mov	r3, r0
 8002af4:	0e9b      	lsrs	r3, r3, #26
 8002af6:	f003 021f 	and.w	r2, r3, #31
 8002afa:	e01e      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x34e>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2102      	movs	r1, #2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fb12 	bl	800212c <LL_ADC_GetOffsetChannel>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002b1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	e004      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d105      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x366>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	0e9b      	lsrs	r3, r3, #26
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	e014      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x390>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002b66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002b6e:	2320      	movs	r3, #32
 8002b70:	e004      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002b72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d106      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2200      	movs	r2, #0
 8002b86:	2102      	movs	r1, #2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff fae5 	bl	8002158 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2103      	movs	r1, #3
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fac9 	bl	800212c <LL_ADC_GetOffsetChannel>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10a      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x3ce>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2103      	movs	r1, #3
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fabe 	bl	800212c <LL_ADC_GetOffsetChannel>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	0e9b      	lsrs	r3, r3, #26
 8002bb4:	f003 021f 	and.w	r2, r3, #31
 8002bb8:	e017      	b.n	8002bea <HAL_ADC_ConfigChannel+0x3fe>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2103      	movs	r1, #3
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fab3 	bl	800212c <LL_ADC_GetOffsetChannel>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd4:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	e003      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d105      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x416>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	0e9b      	lsrs	r3, r3, #26
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	e011      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x43a>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c12:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002c14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002c1a:	2320      	movs	r3, #32
 8002c1c:	e003      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002c1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c20:	fab3 f383 	clz	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d106      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2103      	movs	r1, #3
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fa90 	bl	8002158 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fba9 	bl	8002394 <LL_ADC_IsEnabled>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f040 813f 	bne.w	8002ec8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6819      	ldr	r1, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	461a      	mov	r2, r3
 8002c58:	f7ff fb16 	bl	8002288 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4a8e      	ldr	r2, [pc, #568]	; (8002e9c <HAL_ADC_ConfigChannel+0x6b0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	f040 8130 	bne.w	8002ec8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10b      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x4a4>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0e9b      	lsrs	r3, r3, #26
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	2b09      	cmp	r3, #9
 8002c86:	bf94      	ite	ls
 8002c88:	2301      	movls	r3, #1
 8002c8a:	2300      	movhi	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e019      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x4d8>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002ca8:	2320      	movs	r3, #32
 8002caa:	e003      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	2b09      	cmp	r3, #9
 8002cbc:	bf94      	ite	ls
 8002cbe:	2301      	movls	r3, #1
 8002cc0:	2300      	movhi	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d079      	beq.n	8002dbc <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d107      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x4f8>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	0e9b      	lsrs	r3, r3, #26
 8002cda:	3301      	adds	r3, #1
 8002cdc:	069b      	lsls	r3, r3, #26
 8002cde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ce2:	e015      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x524>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002cfc:	2320      	movs	r3, #32
 8002cfe:	e003      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	069b      	lsls	r3, r3, #26
 8002d0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d109      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x544>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0e9b      	lsrs	r3, r3, #26
 8002d22:	3301      	adds	r3, #1
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	2101      	movs	r1, #1
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	e017      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x574>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d40:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002d48:	2320      	movs	r3, #32
 8002d4a:	e003      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	3301      	adds	r3, #1
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	ea42 0103 	orr.w	r1, r2, r3
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10a      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x59a>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	0e9b      	lsrs	r3, r3, #26
 8002d76:	3301      	adds	r3, #1
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	051b      	lsls	r3, r3, #20
 8002d84:	e018      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x5cc>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d96:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002d9e:	2320      	movs	r3, #32
 8002da0:	e003      	b.n	8002daa <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	3301      	adds	r3, #1
 8002dac:	f003 021f 	and.w	r2, r3, #31
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db8:	430b      	orrs	r3, r1
 8002dba:	e080      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d107      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x5ec>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	0e9b      	lsrs	r3, r3, #26
 8002dce:	3301      	adds	r3, #1
 8002dd0:	069b      	lsls	r3, r3, #26
 8002dd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd6:	e015      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x618>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	fa93 f3a3 	rbit	r3, r3
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002df0:	2320      	movs	r3, #32
 8002df2:	e003      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	069b      	lsls	r3, r3, #26
 8002e00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d109      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x638>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	0e9b      	lsrs	r3, r3, #26
 8002e16:	3301      	adds	r3, #1
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	e017      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x668>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa93 f3a3 	rbit	r3, r3
 8002e30:	61bb      	str	r3, [r7, #24]
  return result;
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002e3c:	2320      	movs	r3, #32
 8002e3e:	e003      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	3301      	adds	r3, #1
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	2101      	movs	r1, #1
 8002e50:	fa01 f303 	lsl.w	r3, r1, r3
 8002e54:	ea42 0103 	orr.w	r1, r2, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10d      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x694>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	0e9b      	lsrs	r3, r3, #26
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	f003 021f 	and.w	r2, r3, #31
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	3b1e      	subs	r3, #30
 8002e78:	051b      	lsls	r3, r3, #20
 8002e7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	e01d      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x6d0>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	60fb      	str	r3, [r7, #12]
  return result;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d103      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002e98:	2320      	movs	r3, #32
 8002e9a:	e005      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x6bc>
 8002e9c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	f003 021f 	and.w	r2, r3, #31
 8002eae:	4613      	mov	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3b1e      	subs	r3, #30
 8002eb6:	051b      	lsls	r3, r3, #20
 8002eb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ebc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	f7ff f9b5 	bl	8002232 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b3d      	ldr	r3, [pc, #244]	; (8002fc4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d06c      	beq.n	8002fae <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ed4:	483c      	ldr	r0, [pc, #240]	; (8002fc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ed6:	f7ff f8f7 	bl	80020c8 <LL_ADC_GetCommonPathInternalCh>
 8002eda:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a3a      	ldr	r2, [pc, #232]	; (8002fcc <HAL_ADC_ConfigChannel+0x7e0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d127      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ee8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002eec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d121      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a35      	ldr	r2, [pc, #212]	; (8002fd0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d157      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002efe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f06:	4619      	mov	r1, r3
 8002f08:	482f      	ldr	r0, [pc, #188]	; (8002fc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f0a:	f7ff f8ca 	bl	80020a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f0e:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <HAL_ADC_ConfigChannel+0x7e8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	099b      	lsrs	r3, r3, #6
 8002f14:	4a30      	ldr	r2, [pc, #192]	; (8002fd8 <HAL_ADC_ConfigChannel+0x7ec>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	099b      	lsrs	r3, r3, #6
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	4613      	mov	r3, r2
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f28:	e002      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f9      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f36:	e03a      	b.n	8002fae <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a27      	ldr	r2, [pc, #156]	; (8002fdc <HAL_ADC_ConfigChannel+0x7f0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d113      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10d      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d12a      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f60:	4619      	mov	r1, r3
 8002f62:	4819      	ldr	r0, [pc, #100]	; (8002fc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f64:	f7ff f89d 	bl	80020a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f68:	e021      	b.n	8002fae <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1c      	ldr	r2, [pc, #112]	; (8002fe0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d11c      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d116      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d111      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f92:	4619      	mov	r1, r3
 8002f94:	480c      	ldr	r0, [pc, #48]	; (8002fc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f96:	f7ff f884 	bl	80020a2 <LL_ADC_SetCommonPathInternalCh>
 8002f9a:	e008      	b.n	8002fae <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	f043 0220 	orr.w	r2, r3, #32
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002fb6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	37d8      	adds	r7, #216	; 0xd8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	80080000 	.word	0x80080000
 8002fc8:	50040300 	.word	0x50040300
 8002fcc:	c7520000 	.word	0xc7520000
 8002fd0:	50040000 	.word	0x50040000
 8002fd4:	20000000 	.word	0x20000000
 8002fd8:	053e2d63 	.word	0x053e2d63
 8002fdc:	cb840000 	.word	0xcb840000
 8002fe0:	80000001 	.word	0x80000001

08002fe4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff f9cd 	bl	8002394 <LL_ADC_IsEnabled>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d169      	bne.n	80030d4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <ADC_Enable+0xfc>)
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00d      	beq.n	800302a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003012:	f043 0210 	orr.w	r2, r3, #16
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e055      	b.n	80030d6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff f99c 	bl	800236c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003034:	482b      	ldr	r0, [pc, #172]	; (80030e4 <ADC_Enable+0x100>)
 8003036:	f7ff f847 	bl	80020c8 <LL_ADC_GetCommonPathInternalCh>
 800303a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800303c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003044:	4b28      	ldr	r3, [pc, #160]	; (80030e8 <ADC_Enable+0x104>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	099b      	lsrs	r3, r3, #6
 800304a:	4a28      	ldr	r2, [pc, #160]	; (80030ec <ADC_Enable+0x108>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	099b      	lsrs	r3, r3, #6
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	4613      	mov	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800305e:	e002      	b.n	8003066 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	3b01      	subs	r3, #1
 8003064:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f9      	bne.n	8003060 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800306c:	f7fe ffd6 	bl	800201c <HAL_GetTick>
 8003070:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003072:	e028      	b.n	80030c6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff f98b 	bl	8002394 <LL_ADC_IsEnabled>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d104      	bne.n	800308e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff f96f 	bl	800236c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800308e:	f7fe ffc5 	bl	800201c <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d914      	bls.n	80030c6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d00d      	beq.n	80030c6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	f043 0210 	orr.w	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ba:	f043 0201 	orr.w	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e007      	b.n	80030d6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d1cf      	bne.n	8003074 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	8000003f 	.word	0x8000003f
 80030e4:	50040300 	.word	0x50040300
 80030e8:	20000000 	.word	0x20000000
 80030ec:	053e2d63 	.word	0x053e2d63

080030f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003102:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003106:	2b00      	cmp	r3, #0
 8003108:	d14b      	bne.n	80031a2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d021      	beq.n	8003168 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff f843 	bl	80021b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d032      	beq.n	800319a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d12b      	bne.n	800319a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d11f      	bne.n	800319a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315e:	f043 0201 	orr.w	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	659a      	str	r2, [r3, #88]	; 0x58
 8003166:	e018      	b.n	800319a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d111      	bne.n	800319a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d105      	bne.n	800319a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	f043 0201 	orr.w	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f7fd fbc2 	bl	8000924 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031a0:	e00e      	b.n	80031c0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f7ff fb12 	bl	80027d8 <HAL_ADC_ErrorCallback>
}
 80031b4:	e004      	b.n	80031c0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
}
 80031c0:	bf00      	nop
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f7ff faf4 	bl	80027c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031dc:	bf00      	nop
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003202:	f043 0204 	orr.w	r2, r3, #4
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f7ff fae4 	bl	80027d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003210:	bf00      	nop
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <__NVIC_SetPriorityGrouping+0x44>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003234:	4013      	ands	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800324a:	4a04      	ldr	r2, [pc, #16]	; (800325c <__NVIC_SetPriorityGrouping+0x44>)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	60d3      	str	r3, [r2, #12]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <__NVIC_GetPriorityGrouping+0x18>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	f003 0307 	and.w	r3, r3, #7
}
 800326e:	4618      	mov	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	2b00      	cmp	r3, #0
 800328c:	db0b      	blt.n	80032a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	f003 021f 	and.w	r2, r3, #31
 8003294:	4907      	ldr	r1, [pc, #28]	; (80032b4 <__NVIC_EnableIRQ+0x38>)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	2001      	movs	r0, #1
 800329e:	fa00 f202 	lsl.w	r2, r0, r2
 80032a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000e100 	.word	0xe000e100

080032b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	6039      	str	r1, [r7, #0]
 80032c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	db0a      	blt.n	80032e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	490c      	ldr	r1, [pc, #48]	; (8003304 <__NVIC_SetPriority+0x4c>)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	0112      	lsls	r2, r2, #4
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	440b      	add	r3, r1
 80032dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e0:	e00a      	b.n	80032f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4908      	ldr	r1, [pc, #32]	; (8003308 <__NVIC_SetPriority+0x50>)
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	3b04      	subs	r3, #4
 80032f0:	0112      	lsls	r2, r2, #4
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	440b      	add	r3, r1
 80032f6:	761a      	strb	r2, [r3, #24]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000e100 	.word	0xe000e100
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	; 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f1c3 0307 	rsb	r3, r3, #7
 8003326:	2b04      	cmp	r3, #4
 8003328:	bf28      	it	cs
 800332a:	2304      	movcs	r3, #4
 800332c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3304      	adds	r3, #4
 8003332:	2b06      	cmp	r3, #6
 8003334:	d902      	bls.n	800333c <NVIC_EncodePriority+0x30>
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3b03      	subs	r3, #3
 800333a:	e000      	b.n	800333e <NVIC_EncodePriority+0x32>
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003340:	f04f 32ff 	mov.w	r2, #4294967295
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	401a      	ands	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003354:	f04f 31ff 	mov.w	r1, #4294967295
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	43d9      	mvns	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003364:	4313      	orrs	r3, r2
         );
}
 8003366:	4618      	mov	r0, r3
 8003368:	3724      	adds	r7, #36	; 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3b01      	subs	r3, #1
 8003380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003384:	d301      	bcc.n	800338a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003386:	2301      	movs	r3, #1
 8003388:	e00f      	b.n	80033aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <SysTick_Config+0x40>)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3b01      	subs	r3, #1
 8003390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003392:	210f      	movs	r1, #15
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	f7ff ff8e 	bl	80032b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <SysTick_Config+0x40>)
 800339e:	2200      	movs	r2, #0
 80033a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033a2:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <SysTick_Config+0x40>)
 80033a4:	2207      	movs	r2, #7
 80033a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	e000e010 	.word	0xe000e010

080033b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ff29 	bl	8003218 <__NVIC_SetPriorityGrouping>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033e0:	f7ff ff3e 	bl	8003260 <__NVIC_GetPriorityGrouping>
 80033e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	6978      	ldr	r0, [r7, #20]
 80033ec:	f7ff ff8e 	bl	800330c <NVIC_EncodePriority>
 80033f0:	4602      	mov	r2, r0
 80033f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff5d 	bl	80032b8 <__NVIC_SetPriority>
}
 80033fe:	bf00      	nop
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	4603      	mov	r3, r0
 800340e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ff31 	bl	800327c <__NVIC_EnableIRQ>
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ffa2 	bl	8003374 <SysTick_Config>
 8003430:	4603      	mov	r3, r0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e014      	b.n	8003476 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	791b      	ldrb	r3, [r3, #4]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d105      	bne.n	8003462 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7fe fb8d 	bl	8001b7c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	795b      	ldrb	r3, [r3, #5]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_DAC_ConfigChannel+0x1c>
 8003498:	2302      	movs	r3, #2
 800349a:	e137      	b.n	800370c <HAL_DAC_ConfigChannel+0x28c>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2202      	movs	r2, #2
 80034a6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	f040 8081 	bne.w	80035b4 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80034b2:	f7fe fdb3 	bl	800201c <HAL_GetTick>
 80034b6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d140      	bne.n	8003540 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034be:	e018      	b.n	80034f2 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80034c0:	f7fe fdac 	bl	800201c <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d911      	bls.n	80034f2 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f043 0208 	orr.w	r2, r3, #8
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2203      	movs	r2, #3
 80034ec:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e10c      	b.n	800370c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1df      	bne.n	80034c0 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003500:	2001      	movs	r0, #1
 8003502:	f7fe fd97 	bl	8002034 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	69d2      	ldr	r2, [r2, #28]
 800350e:	641a      	str	r2, [r3, #64]	; 0x40
 8003510:	e023      	b.n	800355a <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003512:	f7fe fd83 	bl	800201c <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d90f      	bls.n	8003540 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003526:	2b00      	cmp	r3, #0
 8003528:	da0a      	bge.n	8003540 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f043 0208 	orr.w	r2, r3, #8
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2203      	movs	r2, #3
 800353a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e0e5      	b.n	800370c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003546:	2b00      	cmp	r3, #0
 8003548:	dbe3      	blt.n	8003512 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800354a:	2001      	movs	r0, #1
 800354c:	f7fe fd72 	bl	8002034 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	69d2      	ldr	r2, [r2, #28]
 8003558:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 0310 	and.w	r3, r3, #16
 8003566:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800356a:	fa01 f303 	lsl.w	r3, r1, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	ea02 0103 	and.w	r1, r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	6a1a      	ldr	r2, [r3, #32]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	409a      	lsls	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	21ff      	movs	r1, #255	; 0xff
 8003596:	fa01 f303 	lsl.w	r3, r1, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	ea02 0103 	and.w	r1, r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	409a      	lsls	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d11d      	bne.n	80035f8 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	221f      	movs	r2, #31
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	2207      	movs	r2, #7
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	43db      	mvns	r3, r3
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	4013      	ands	r3, r2
 8003612:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	431a      	orrs	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	4313      	orrs	r3, r2
 8003636:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6819      	ldr	r1, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43da      	mvns	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	400a      	ands	r2, r1
 800365c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	4013      	ands	r3, r2
 800367a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	4313      	orrs	r3, r2
 8003692:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800369c:	d104      	bne.n	80036a8 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	e018      	b.n	80036da <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d104      	bne.n	80036ba <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036b6:	61fb      	str	r3, [r7, #28]
 80036b8:	e00f      	b.n	80036da <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80036ba:	f001 fae5 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 80036be:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4a14      	ldr	r2, [pc, #80]	; (8003714 <HAL_DAC_ConfigChannel+0x294>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d904      	bls.n	80036d2 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ce:	61fb      	str	r3, [r7, #28]
 80036d0:	e003      	b.n	80036da <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036d8:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6819      	ldr	r1, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	22c0      	movs	r2, #192	; 0xc0
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43da      	mvns	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	400a      	ands	r2, r1
 80036fc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3720      	adds	r7, #32
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	04c4b400 	.word	0x04c4b400

08003718 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e08d      	b.n	8003846 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	4b47      	ldr	r3, [pc, #284]	; (8003850 <HAL_DMA_Init+0x138>)
 8003732:	429a      	cmp	r2, r3
 8003734:	d80f      	bhi.n	8003756 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	4b45      	ldr	r3, [pc, #276]	; (8003854 <HAL_DMA_Init+0x13c>)
 800373e:	4413      	add	r3, r2
 8003740:	4a45      	ldr	r2, [pc, #276]	; (8003858 <HAL_DMA_Init+0x140>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	091b      	lsrs	r3, r3, #4
 8003748:	009a      	lsls	r2, r3, #2
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a42      	ldr	r2, [pc, #264]	; (800385c <HAL_DMA_Init+0x144>)
 8003752:	641a      	str	r2, [r3, #64]	; 0x40
 8003754:	e00e      	b.n	8003774 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	4b40      	ldr	r3, [pc, #256]	; (8003860 <HAL_DMA_Init+0x148>)
 800375e:	4413      	add	r3, r2
 8003760:	4a3d      	ldr	r2, [pc, #244]	; (8003858 <HAL_DMA_Init+0x140>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	091b      	lsrs	r3, r3, #4
 8003768:	009a      	lsls	r2, r3, #2
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a3c      	ldr	r2, [pc, #240]	; (8003864 <HAL_DMA_Init+0x14c>)
 8003772:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800378a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003798:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f9b6 	bl	8003b38 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d4:	d102      	bne.n	80037dc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037f0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d010      	beq.n	800381c <HAL_DMA_Init+0x104>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d80c      	bhi.n	800381c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f9d6 	bl	8003bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	e008      	b.n	800382e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40020407 	.word	0x40020407
 8003854:	bffdfff8 	.word	0xbffdfff8
 8003858:	cccccccd 	.word	0xcccccccd
 800385c:	40020000 	.word	0x40020000
 8003860:	bffdfbf8 	.word	0xbffdfbf8
 8003864:	40020400 	.word	0x40020400

08003868 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_DMA_Start_IT+0x20>
 8003884:	2302      	movs	r3, #2
 8003886:	e066      	b.n	8003956 <HAL_DMA_Start_IT+0xee>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	d155      	bne.n	8003948 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0201 	bic.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f8fb 	bl	8003abc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d008      	beq.n	80038e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 020e 	orr.w	r2, r2, #14
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	e00f      	b.n	8003900 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0204 	bic.w	r2, r2, #4
 80038ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 020a 	orr.w	r2, r2, #10
 80038fe:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d007      	beq.n	800391e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800391c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003934:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0201 	orr.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	e005      	b.n	8003954 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003950:	2302      	movs	r3, #2
 8003952:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003954:	7dfb      	ldrb	r3, [r7, #23]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	f003 031c 	and.w	r3, r3, #28
 800397e:	2204      	movs	r2, #4
 8003980:	409a      	lsls	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d026      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x7a>
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d021      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d107      	bne.n	80039b2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0204 	bic.w	r2, r2, #4
 80039b0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f003 021c 	and.w	r2, r3, #28
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2104      	movs	r1, #4
 80039c0:	fa01 f202 	lsl.w	r2, r1, r2
 80039c4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d071      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80039d6:	e06c      	b.n	8003ab2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039dc:	f003 031c 	and.w	r3, r3, #28
 80039e0:	2202      	movs	r2, #2
 80039e2:	409a      	lsls	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d02e      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xec>
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d029      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10b      	bne.n	8003a1c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 020a 	bic.w	r2, r2, #10
 8003a12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a20:	f003 021c 	and.w	r2, r3, #28
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	2102      	movs	r1, #2
 8003a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d038      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a48:	e033      	b.n	8003ab2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	f003 031c 	and.w	r3, r3, #28
 8003a52:	2208      	movs	r2, #8
 8003a54:	409a      	lsls	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d02a      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x156>
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d025      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 020e 	bic.w	r2, r2, #14
 8003a76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7c:	f003 021c 	and.w	r2, r3, #28
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	2101      	movs	r1, #1
 8003a86:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d004      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ab2:	bf00      	nop
 8003ab4:	bf00      	nop
}
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ad2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d004      	beq.n	8003ae6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ae4:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f003 021c 	and.w	r2, r3, #28
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	2101      	movs	r1, #1
 8003af4:	fa01 f202 	lsl.w	r2, r1, r2
 8003af8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b10      	cmp	r3, #16
 8003b08:	d108      	bne.n	8003b1c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b1a:	e007      	b.n	8003b2c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	60da      	str	r2, [r3, #12]
}
 8003b2c:	bf00      	nop
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d80a      	bhi.n	8003b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b50:	089b      	lsrs	r3, r3, #2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b58:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6493      	str	r3, [r2, #72]	; 0x48
 8003b60:	e007      	b.n	8003b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	089b      	lsrs	r3, r3, #2
 8003b68:	009a      	lsls	r2, r3, #2
 8003b6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b6c:	4413      	add	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	3b08      	subs	r3, #8
 8003b7a:	4a0c      	ldr	r2, [pc, #48]	; (8003bac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b88:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	2201      	movs	r2, #1
 8003b92:	409a      	lsls	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	40020407 	.word	0x40020407
 8003ba8:	4002081c 	.word	0x4002081c
 8003bac:	cccccccd 	.word	0xcccccccd
 8003bb0:	40020880 	.word	0x40020880

08003bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	461a      	mov	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a08      	ldr	r2, [pc, #32]	; (8003bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003bd6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2201      	movs	r2, #1
 8003be2:	409a      	lsls	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	1000823f 	.word	0x1000823f
 8003bf8:	40020940 	.word	0x40020940

08003bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c0a:	e166      	b.n	8003eda <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	2101      	movs	r1, #1
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	fa01 f303 	lsl.w	r3, r1, r3
 8003c18:	4013      	ands	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 8158 	beq.w	8003ed4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d005      	beq.n	8003c3c <HAL_GPIO_Init+0x40>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 0303 	and.w	r3, r3, #3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d130      	bne.n	8003c9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	2203      	movs	r2, #3
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4013      	ands	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c72:	2201      	movs	r2, #1
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	091b      	lsrs	r3, r3, #4
 8003c88:	f003 0201 	and.w	r2, r3, #1
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d017      	beq.n	8003cda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d123      	bne.n	8003d2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	08da      	lsrs	r2, r3, #3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3208      	adds	r2, #8
 8003cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	220f      	movs	r2, #15
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43db      	mvns	r3, r3
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4013      	ands	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	08da      	lsrs	r2, r3, #3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3208      	adds	r2, #8
 8003d28:	6939      	ldr	r1, [r7, #16]
 8003d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	2203      	movs	r2, #3
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4013      	ands	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f003 0203 	and.w	r2, r3, #3
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80b2 	beq.w	8003ed4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d70:	4b61      	ldr	r3, [pc, #388]	; (8003ef8 <HAL_GPIO_Init+0x2fc>)
 8003d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d74:	4a60      	ldr	r2, [pc, #384]	; (8003ef8 <HAL_GPIO_Init+0x2fc>)
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	6613      	str	r3, [r2, #96]	; 0x60
 8003d7c:	4b5e      	ldr	r3, [pc, #376]	; (8003ef8 <HAL_GPIO_Init+0x2fc>)
 8003d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d88:	4a5c      	ldr	r2, [pc, #368]	; (8003efc <HAL_GPIO_Init+0x300>)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	089b      	lsrs	r3, r3, #2
 8003d8e:	3302      	adds	r3, #2
 8003d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	220f      	movs	r2, #15
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43db      	mvns	r3, r3
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4013      	ands	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003db2:	d02b      	beq.n	8003e0c <HAL_GPIO_Init+0x210>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a52      	ldr	r2, [pc, #328]	; (8003f00 <HAL_GPIO_Init+0x304>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d025      	beq.n	8003e08 <HAL_GPIO_Init+0x20c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a51      	ldr	r2, [pc, #324]	; (8003f04 <HAL_GPIO_Init+0x308>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d01f      	beq.n	8003e04 <HAL_GPIO_Init+0x208>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a50      	ldr	r2, [pc, #320]	; (8003f08 <HAL_GPIO_Init+0x30c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d019      	beq.n	8003e00 <HAL_GPIO_Init+0x204>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a4f      	ldr	r2, [pc, #316]	; (8003f0c <HAL_GPIO_Init+0x310>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d013      	beq.n	8003dfc <HAL_GPIO_Init+0x200>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a4e      	ldr	r2, [pc, #312]	; (8003f10 <HAL_GPIO_Init+0x314>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00d      	beq.n	8003df8 <HAL_GPIO_Init+0x1fc>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a4d      	ldr	r2, [pc, #308]	; (8003f14 <HAL_GPIO_Init+0x318>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d007      	beq.n	8003df4 <HAL_GPIO_Init+0x1f8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a4c      	ldr	r2, [pc, #304]	; (8003f18 <HAL_GPIO_Init+0x31c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d101      	bne.n	8003df0 <HAL_GPIO_Init+0x1f4>
 8003dec:	2307      	movs	r3, #7
 8003dee:	e00e      	b.n	8003e0e <HAL_GPIO_Init+0x212>
 8003df0:	2308      	movs	r3, #8
 8003df2:	e00c      	b.n	8003e0e <HAL_GPIO_Init+0x212>
 8003df4:	2306      	movs	r3, #6
 8003df6:	e00a      	b.n	8003e0e <HAL_GPIO_Init+0x212>
 8003df8:	2305      	movs	r3, #5
 8003dfa:	e008      	b.n	8003e0e <HAL_GPIO_Init+0x212>
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	e006      	b.n	8003e0e <HAL_GPIO_Init+0x212>
 8003e00:	2303      	movs	r3, #3
 8003e02:	e004      	b.n	8003e0e <HAL_GPIO_Init+0x212>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e002      	b.n	8003e0e <HAL_GPIO_Init+0x212>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <HAL_GPIO_Init+0x212>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	f002 0203 	and.w	r2, r2, #3
 8003e14:	0092      	lsls	r2, r2, #2
 8003e16:	4093      	lsls	r3, r2
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e1e:	4937      	ldr	r1, [pc, #220]	; (8003efc <HAL_GPIO_Init+0x300>)
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	089b      	lsrs	r3, r3, #2
 8003e24:	3302      	adds	r3, #2
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e2c:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <HAL_GPIO_Init+0x320>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e50:	4a32      	ldr	r2, [pc, #200]	; (8003f1c <HAL_GPIO_Init+0x320>)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e56:	4b31      	ldr	r3, [pc, #196]	; (8003f1c <HAL_GPIO_Init+0x320>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4013      	ands	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e7a:	4a28      	ldr	r2, [pc, #160]	; (8003f1c <HAL_GPIO_Init+0x320>)
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e80:	4b26      	ldr	r3, [pc, #152]	; (8003f1c <HAL_GPIO_Init+0x320>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ea4:	4a1d      	ldr	r2, [pc, #116]	; (8003f1c <HAL_GPIO_Init+0x320>)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003eaa:	4b1c      	ldr	r3, [pc, #112]	; (8003f1c <HAL_GPIO_Init+0x320>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ece:	4a13      	ldr	r2, [pc, #76]	; (8003f1c <HAL_GPIO_Init+0x320>)
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f47f ae91 	bne.w	8003c0c <HAL_GPIO_Init+0x10>
  }
}
 8003eea:	bf00      	nop
 8003eec:	bf00      	nop
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40010000 	.word	0x40010000
 8003f00:	48000400 	.word	0x48000400
 8003f04:	48000800 	.word	0x48000800
 8003f08:	48000c00 	.word	0x48000c00
 8003f0c:	48001000 	.word	0x48001000
 8003f10:	48001400 	.word	0x48001400
 8003f14:	48001800 	.word	0x48001800
 8003f18:	48001c00 	.word	0x48001c00
 8003f1c:	40010400 	.word	0x40010400

08003f20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f24:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f30:	d102      	bne.n	8003f38 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f36:	e00b      	b.n	8003f50 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003f38:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f46:	d102      	bne.n	8003f4e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f4c:	e000      	b.n	8003f50 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003f4e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40007000 	.word	0x40007000

08003f60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d141      	bne.n	8003ff2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f6e:	4b4b      	ldr	r3, [pc, #300]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7a:	d131      	bne.n	8003fe0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f7c:	4b47      	ldr	r3, [pc, #284]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f82:	4a46      	ldr	r2, [pc, #280]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f8c:	4b43      	ldr	r3, [pc, #268]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f94:	4a41      	ldr	r2, [pc, #260]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003f9c:	4b40      	ldr	r3, [pc, #256]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2232      	movs	r2, #50	; 0x32
 8003fa2:	fb02 f303 	mul.w	r3, r2, r3
 8003fa6:	4a3f      	ldr	r2, [pc, #252]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fac:	0c9b      	lsrs	r3, r3, #18
 8003fae:	3301      	adds	r3, #1
 8003fb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fb2:	e002      	b.n	8003fba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fba:	4b38      	ldr	r3, [pc, #224]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc6:	d102      	bne.n	8003fce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f2      	bne.n	8003fb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fce:	4b33      	ldr	r3, [pc, #204]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fda:	d158      	bne.n	800408e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e057      	b.n	8004090 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fe0:	4b2e      	ldr	r3, [pc, #184]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe6:	4a2d      	ldr	r2, [pc, #180]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ff0:	e04d      	b.n	800408e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff8:	d141      	bne.n	800407e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ffa:	4b28      	ldr	r3, [pc, #160]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004006:	d131      	bne.n	800406c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004008:	4b24      	ldr	r3, [pc, #144]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800400e:	4a23      	ldr	r2, [pc, #140]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004014:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004018:	4b20      	ldr	r3, [pc, #128]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004020:	4a1e      	ldr	r2, [pc, #120]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004026:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004028:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2232      	movs	r2, #50	; 0x32
 800402e:	fb02 f303 	mul.w	r3, r2, r3
 8004032:	4a1c      	ldr	r2, [pc, #112]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	0c9b      	lsrs	r3, r3, #18
 800403a:	3301      	adds	r3, #1
 800403c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800403e:	e002      	b.n	8004046 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3b01      	subs	r3, #1
 8004044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004052:	d102      	bne.n	800405a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f2      	bne.n	8004040 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800405a:	4b10      	ldr	r3, [pc, #64]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004066:	d112      	bne.n	800408e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e011      	b.n	8004090 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800406c:	4b0b      	ldr	r3, [pc, #44]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004072:	4a0a      	ldr	r2, [pc, #40]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004078:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800407c:	e007      	b.n	800408e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800407e:	4b07      	ldr	r3, [pc, #28]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004086:	4a05      	ldr	r2, [pc, #20]	; (800409c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004088:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800408c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	40007000 	.word	0x40007000
 80040a0:	20000000 	.word	0x20000000
 80040a4:	431bde83 	.word	0x431bde83

080040a8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	4a04      	ldr	r2, [pc, #16]	; (80040c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80040b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040b6:	6053      	str	r3, [r2, #4]
}
 80040b8:	bf00      	nop
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40007000 	.word	0x40007000

080040c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d102      	bne.n	80040dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f000 bc08 	b.w	80048ec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040dc:	4b96      	ldr	r3, [pc, #600]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 030c 	and.w	r3, r3, #12
 80040e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e6:	4b94      	ldr	r3, [pc, #592]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80e4 	beq.w	80042c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <HAL_RCC_OscConfig+0x4c>
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b0c      	cmp	r3, #12
 8004108:	f040 808b 	bne.w	8004222 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2b01      	cmp	r3, #1
 8004110:	f040 8087 	bne.w	8004222 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004114:	4b88      	ldr	r3, [pc, #544]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_RCC_OscConfig+0x64>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e3df      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1a      	ldr	r2, [r3, #32]
 8004130:	4b81      	ldr	r3, [pc, #516]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d004      	beq.n	8004146 <HAL_RCC_OscConfig+0x7e>
 800413c:	4b7e      	ldr	r3, [pc, #504]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004144:	e005      	b.n	8004152 <HAL_RCC_OscConfig+0x8a>
 8004146:	4b7c      	ldr	r3, [pc, #496]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 8004148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414c:	091b      	lsrs	r3, r3, #4
 800414e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004152:	4293      	cmp	r3, r2
 8004154:	d223      	bcs.n	800419e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fdcc 	bl	8004cf8 <RCC_SetFlashLatencyFromMSIRange>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e3c0      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800416a:	4b73      	ldr	r3, [pc, #460]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a72      	ldr	r2, [pc, #456]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 8004170:	f043 0308 	orr.w	r3, r3, #8
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	4b70      	ldr	r3, [pc, #448]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	496d      	ldr	r1, [pc, #436]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 8004184:	4313      	orrs	r3, r2
 8004186:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004188:	4b6b      	ldr	r3, [pc, #428]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	021b      	lsls	r3, r3, #8
 8004196:	4968      	ldr	r1, [pc, #416]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 8004198:	4313      	orrs	r3, r2
 800419a:	604b      	str	r3, [r1, #4]
 800419c:	e025      	b.n	80041ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800419e:	4b66      	ldr	r3, [pc, #408]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a65      	ldr	r2, [pc, #404]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 80041a4:	f043 0308 	orr.w	r3, r3, #8
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	4b63      	ldr	r3, [pc, #396]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	4960      	ldr	r1, [pc, #384]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041bc:	4b5e      	ldr	r3, [pc, #376]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	021b      	lsls	r3, r3, #8
 80041ca:	495b      	ldr	r1, [pc, #364]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fd8c 	bl	8004cf8 <RCC_SetFlashLatencyFromMSIRange>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e380      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041ea:	f000 fcc1 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 80041ee:	4602      	mov	r2, r0
 80041f0:	4b51      	ldr	r3, [pc, #324]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	4950      	ldr	r1, [pc, #320]	; (800433c <HAL_RCC_OscConfig+0x274>)
 80041fc:	5ccb      	ldrb	r3, [r1, r3]
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	fa22 f303 	lsr.w	r3, r2, r3
 8004206:	4a4e      	ldr	r2, [pc, #312]	; (8004340 <HAL_RCC_OscConfig+0x278>)
 8004208:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800420a:	4b4e      	ldr	r3, [pc, #312]	; (8004344 <HAL_RCC_OscConfig+0x27c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7fd feb4 	bl	8001f7c <HAL_InitTick>
 8004214:	4603      	mov	r3, r0
 8004216:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d052      	beq.n	80042c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	e364      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d032      	beq.n	8004290 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800422a:	4b43      	ldr	r3, [pc, #268]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a42      	ldr	r2, [pc, #264]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004236:	f7fd fef1 	bl	800201c <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800423e:	f7fd feed 	bl	800201c <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e34d      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004250:	4b39      	ldr	r3, [pc, #228]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800425c:	4b36      	ldr	r3, [pc, #216]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a35      	ldr	r2, [pc, #212]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 8004262:	f043 0308 	orr.w	r3, r3, #8
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	4b33      	ldr	r3, [pc, #204]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	4930      	ldr	r1, [pc, #192]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 8004276:	4313      	orrs	r3, r2
 8004278:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800427a:	4b2f      	ldr	r3, [pc, #188]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	492b      	ldr	r1, [pc, #172]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 800428a:	4313      	orrs	r3, r2
 800428c:	604b      	str	r3, [r1, #4]
 800428e:	e01a      	b.n	80042c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004290:	4b29      	ldr	r3, [pc, #164]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a28      	ldr	r2, [pc, #160]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800429c:	f7fd febe 	bl	800201c <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042a4:	f7fd feba 	bl	800201c <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e31a      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042b6:	4b20      	ldr	r3, [pc, #128]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCC_OscConfig+0x1dc>
 80042c2:	e000      	b.n	80042c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d073      	beq.n	80043ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_OscConfig+0x21c>
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b0c      	cmp	r3, #12
 80042dc:	d10e      	bne.n	80042fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d10b      	bne.n	80042fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e4:	4b14      	ldr	r3, [pc, #80]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d063      	beq.n	80043b8 <HAL_RCC_OscConfig+0x2f0>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d15f      	bne.n	80043b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e2f7      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004304:	d106      	bne.n	8004314 <HAL_RCC_OscConfig+0x24c>
 8004306:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a0b      	ldr	r2, [pc, #44]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 800430c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	e025      	b.n	8004360 <HAL_RCC_OscConfig+0x298>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800431c:	d114      	bne.n	8004348 <HAL_RCC_OscConfig+0x280>
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a05      	ldr	r2, [pc, #20]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 8004324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	4b03      	ldr	r3, [pc, #12]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a02      	ldr	r2, [pc, #8]	; (8004338 <HAL_RCC_OscConfig+0x270>)
 8004330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	e013      	b.n	8004360 <HAL_RCC_OscConfig+0x298>
 8004338:	40021000 	.word	0x40021000
 800433c:	0800a828 	.word	0x0800a828
 8004340:	20000000 	.word	0x20000000
 8004344:	20000004 	.word	0x20000004
 8004348:	4ba0      	ldr	r3, [pc, #640]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a9f      	ldr	r2, [pc, #636]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 800434e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	4b9d      	ldr	r3, [pc, #628]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a9c      	ldr	r2, [pc, #624]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 800435a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800435e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d013      	beq.n	8004390 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fd fe58 	bl	800201c <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004370:	f7fd fe54 	bl	800201c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	; 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e2b4      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004382:	4b92      	ldr	r3, [pc, #584]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0x2a8>
 800438e:	e014      	b.n	80043ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fd fe44 	bl	800201c <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004398:	f7fd fe40 	bl	800201c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	; 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e2a0      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043aa:	4b88      	ldr	r3, [pc, #544]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x2d0>
 80043b6:	e000      	b.n	80043ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d060      	beq.n	8004488 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_OscConfig+0x310>
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b0c      	cmp	r3, #12
 80043d0:	d119      	bne.n	8004406 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d116      	bne.n	8004406 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043d8:	4b7c      	ldr	r3, [pc, #496]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_OscConfig+0x328>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e27d      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f0:	4b76      	ldr	r3, [pc, #472]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	061b      	lsls	r3, r3, #24
 80043fe:	4973      	ldr	r1, [pc, #460]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 8004400:	4313      	orrs	r3, r2
 8004402:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004404:	e040      	b.n	8004488 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d023      	beq.n	8004456 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800440e:	4b6f      	ldr	r3, [pc, #444]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a6e      	ldr	r2, [pc, #440]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 8004414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441a:	f7fd fdff 	bl	800201c <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004422:	f7fd fdfb 	bl	800201c <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e25b      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004434:	4b65      	ldr	r3, [pc, #404]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004440:	4b62      	ldr	r3, [pc, #392]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	061b      	lsls	r3, r3, #24
 800444e:	495f      	ldr	r1, [pc, #380]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]
 8004454:	e018      	b.n	8004488 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004456:	4b5d      	ldr	r3, [pc, #372]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a5c      	ldr	r2, [pc, #368]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 800445c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004462:	f7fd fddb 	bl	800201c <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800446a:	f7fd fdd7 	bl	800201c <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e237      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800447c:	4b53      	ldr	r3, [pc, #332]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f0      	bne.n	800446a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	d03c      	beq.n	800450e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01c      	beq.n	80044d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800449c:	4b4b      	ldr	r3, [pc, #300]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 800449e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044a2:	4a4a      	ldr	r2, [pc, #296]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 80044a4:	f043 0301 	orr.w	r3, r3, #1
 80044a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ac:	f7fd fdb6 	bl	800201c <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b4:	f7fd fdb2 	bl	800201c <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e212      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044c6:	4b41      	ldr	r3, [pc, #260]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 80044c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0ef      	beq.n	80044b4 <HAL_RCC_OscConfig+0x3ec>
 80044d4:	e01b      	b.n	800450e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d6:	4b3d      	ldr	r3, [pc, #244]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 80044d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044dc:	4a3b      	ldr	r2, [pc, #236]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e6:	f7fd fd99 	bl	800201c <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ee:	f7fd fd95 	bl	800201c <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e1f5      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004500:	4b32      	ldr	r3, [pc, #200]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 8004502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1ef      	bne.n	80044ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 80a6 	beq.w	8004668 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451c:	2300      	movs	r3, #0
 800451e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004520:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 8004522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10d      	bne.n	8004548 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452c:	4b27      	ldr	r3, [pc, #156]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	4a26      	ldr	r2, [pc, #152]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 8004532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004536:	6593      	str	r3, [r2, #88]	; 0x58
 8004538:	4b24      	ldr	r3, [pc, #144]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 800453a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004544:	2301      	movs	r3, #1
 8004546:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004548:	4b21      	ldr	r3, [pc, #132]	; (80045d0 <HAL_RCC_OscConfig+0x508>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004550:	2b00      	cmp	r3, #0
 8004552:	d118      	bne.n	8004586 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004554:	4b1e      	ldr	r3, [pc, #120]	; (80045d0 <HAL_RCC_OscConfig+0x508>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <HAL_RCC_OscConfig+0x508>)
 800455a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800455e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004560:	f7fd fd5c 	bl	800201c <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004568:	f7fd fd58 	bl	800201c <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e1b8      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800457a:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <HAL_RCC_OscConfig+0x508>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d108      	bne.n	80045a0 <HAL_RCC_OscConfig+0x4d8>
 800458e:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 8004590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004594:	4a0d      	ldr	r2, [pc, #52]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800459e:	e029      	b.n	80045f4 <HAL_RCC_OscConfig+0x52c>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b05      	cmp	r3, #5
 80045a6:	d115      	bne.n	80045d4 <HAL_RCC_OscConfig+0x50c>
 80045a8:	4b08      	ldr	r3, [pc, #32]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ae:	4a07      	ldr	r2, [pc, #28]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 80045b0:	f043 0304 	orr.w	r3, r3, #4
 80045b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045b8:	4b04      	ldr	r3, [pc, #16]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	4a03      	ldr	r2, [pc, #12]	; (80045cc <HAL_RCC_OscConfig+0x504>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045c8:	e014      	b.n	80045f4 <HAL_RCC_OscConfig+0x52c>
 80045ca:	bf00      	nop
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40007000 	.word	0x40007000
 80045d4:	4b9d      	ldr	r3, [pc, #628]	; (800484c <HAL_RCC_OscConfig+0x784>)
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045da:	4a9c      	ldr	r2, [pc, #624]	; (800484c <HAL_RCC_OscConfig+0x784>)
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045e4:	4b99      	ldr	r3, [pc, #612]	; (800484c <HAL_RCC_OscConfig+0x784>)
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ea:	4a98      	ldr	r2, [pc, #608]	; (800484c <HAL_RCC_OscConfig+0x784>)
 80045ec:	f023 0304 	bic.w	r3, r3, #4
 80045f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d016      	beq.n	800462a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fc:	f7fd fd0e 	bl	800201c <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004602:	e00a      	b.n	800461a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004604:	f7fd fd0a 	bl	800201c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e168      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800461a:	4b8c      	ldr	r3, [pc, #560]	; (800484c <HAL_RCC_OscConfig+0x784>)
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0ed      	beq.n	8004604 <HAL_RCC_OscConfig+0x53c>
 8004628:	e015      	b.n	8004656 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462a:	f7fd fcf7 	bl	800201c <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004630:	e00a      	b.n	8004648 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004632:	f7fd fcf3 	bl	800201c <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004640:	4293      	cmp	r3, r2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e151      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004648:	4b80      	ldr	r3, [pc, #512]	; (800484c <HAL_RCC_OscConfig+0x784>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1ed      	bne.n	8004632 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004656:	7ffb      	ldrb	r3, [r7, #31]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d105      	bne.n	8004668 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800465c:	4b7b      	ldr	r3, [pc, #492]	; (800484c <HAL_RCC_OscConfig+0x784>)
 800465e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004660:	4a7a      	ldr	r2, [pc, #488]	; (800484c <HAL_RCC_OscConfig+0x784>)
 8004662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004666:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	d03c      	beq.n	80046ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01c      	beq.n	80046b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800467c:	4b73      	ldr	r3, [pc, #460]	; (800484c <HAL_RCC_OscConfig+0x784>)
 800467e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004682:	4a72      	ldr	r2, [pc, #456]	; (800484c <HAL_RCC_OscConfig+0x784>)
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468c:	f7fd fcc6 	bl	800201c <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004694:	f7fd fcc2 	bl	800201c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e122      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046a6:	4b69      	ldr	r3, [pc, #420]	; (800484c <HAL_RCC_OscConfig+0x784>)
 80046a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0ef      	beq.n	8004694 <HAL_RCC_OscConfig+0x5cc>
 80046b4:	e01b      	b.n	80046ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046b6:	4b65      	ldr	r3, [pc, #404]	; (800484c <HAL_RCC_OscConfig+0x784>)
 80046b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046bc:	4a63      	ldr	r2, [pc, #396]	; (800484c <HAL_RCC_OscConfig+0x784>)
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c6:	f7fd fca9 	bl	800201c <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ce:	f7fd fca5 	bl	800201c <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e105      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046e0:	4b5a      	ldr	r3, [pc, #360]	; (800484c <HAL_RCC_OscConfig+0x784>)
 80046e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1ef      	bne.n	80046ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 80f9 	beq.w	80048ea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	f040 80cf 	bne.w	80048a0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004702:	4b52      	ldr	r3, [pc, #328]	; (800484c <HAL_RCC_OscConfig+0x784>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f003 0203 	and.w	r2, r3, #3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	429a      	cmp	r2, r3
 8004714:	d12c      	bne.n	8004770 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	3b01      	subs	r3, #1
 8004722:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004724:	429a      	cmp	r2, r3
 8004726:	d123      	bne.n	8004770 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004732:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004734:	429a      	cmp	r2, r3
 8004736:	d11b      	bne.n	8004770 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004744:	429a      	cmp	r2, r3
 8004746:	d113      	bne.n	8004770 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	3b01      	subs	r3, #1
 8004756:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004758:	429a      	cmp	r2, r3
 800475a:	d109      	bne.n	8004770 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	085b      	lsrs	r3, r3, #1
 8004768:	3b01      	subs	r3, #1
 800476a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800476c:	429a      	cmp	r2, r3
 800476e:	d071      	beq.n	8004854 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b0c      	cmp	r3, #12
 8004774:	d068      	beq.n	8004848 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004776:	4b35      	ldr	r3, [pc, #212]	; (800484c <HAL_RCC_OscConfig+0x784>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d105      	bne.n	800478e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004782:	4b32      	ldr	r3, [pc, #200]	; (800484c <HAL_RCC_OscConfig+0x784>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e0ac      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004792:	4b2e      	ldr	r3, [pc, #184]	; (800484c <HAL_RCC_OscConfig+0x784>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a2d      	ldr	r2, [pc, #180]	; (800484c <HAL_RCC_OscConfig+0x784>)
 8004798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800479c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800479e:	f7fd fc3d 	bl	800201c <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a6:	f7fd fc39 	bl	800201c <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e099      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047b8:	4b24      	ldr	r3, [pc, #144]	; (800484c <HAL_RCC_OscConfig+0x784>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f0      	bne.n	80047a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047c4:	4b21      	ldr	r3, [pc, #132]	; (800484c <HAL_RCC_OscConfig+0x784>)
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	4b21      	ldr	r3, [pc, #132]	; (8004850 <HAL_RCC_OscConfig+0x788>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047d4:	3a01      	subs	r2, #1
 80047d6:	0112      	lsls	r2, r2, #4
 80047d8:	4311      	orrs	r1, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047de:	0212      	lsls	r2, r2, #8
 80047e0:	4311      	orrs	r1, r2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047e6:	0852      	lsrs	r2, r2, #1
 80047e8:	3a01      	subs	r2, #1
 80047ea:	0552      	lsls	r2, r2, #21
 80047ec:	4311      	orrs	r1, r2
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047f2:	0852      	lsrs	r2, r2, #1
 80047f4:	3a01      	subs	r2, #1
 80047f6:	0652      	lsls	r2, r2, #25
 80047f8:	4311      	orrs	r1, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047fe:	06d2      	lsls	r2, r2, #27
 8004800:	430a      	orrs	r2, r1
 8004802:	4912      	ldr	r1, [pc, #72]	; (800484c <HAL_RCC_OscConfig+0x784>)
 8004804:	4313      	orrs	r3, r2
 8004806:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004808:	4b10      	ldr	r3, [pc, #64]	; (800484c <HAL_RCC_OscConfig+0x784>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a0f      	ldr	r2, [pc, #60]	; (800484c <HAL_RCC_OscConfig+0x784>)
 800480e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004812:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004814:	4b0d      	ldr	r3, [pc, #52]	; (800484c <HAL_RCC_OscConfig+0x784>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4a0c      	ldr	r2, [pc, #48]	; (800484c <HAL_RCC_OscConfig+0x784>)
 800481a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800481e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004820:	f7fd fbfc 	bl	800201c <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004828:	f7fd fbf8 	bl	800201c <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e058      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800483a:	4b04      	ldr	r3, [pc, #16]	; (800484c <HAL_RCC_OscConfig+0x784>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f0      	beq.n	8004828 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004846:	e050      	b.n	80048ea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e04f      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
 800484c:	40021000 	.word	0x40021000
 8004850:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004854:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <HAL_RCC_OscConfig+0x82c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d144      	bne.n	80048ea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004860:	4b24      	ldr	r3, [pc, #144]	; (80048f4 <HAL_RCC_OscConfig+0x82c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a23      	ldr	r2, [pc, #140]	; (80048f4 <HAL_RCC_OscConfig+0x82c>)
 8004866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800486a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800486c:	4b21      	ldr	r3, [pc, #132]	; (80048f4 <HAL_RCC_OscConfig+0x82c>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	4a20      	ldr	r2, [pc, #128]	; (80048f4 <HAL_RCC_OscConfig+0x82c>)
 8004872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004876:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004878:	f7fd fbd0 	bl	800201c <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004880:	f7fd fbcc 	bl	800201c <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e02c      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004892:	4b18      	ldr	r3, [pc, #96]	; (80048f4 <HAL_RCC_OscConfig+0x82c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0x7b8>
 800489e:	e024      	b.n	80048ea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	2b0c      	cmp	r3, #12
 80048a4:	d01f      	beq.n	80048e6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a6:	4b13      	ldr	r3, [pc, #76]	; (80048f4 <HAL_RCC_OscConfig+0x82c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a12      	ldr	r2, [pc, #72]	; (80048f4 <HAL_RCC_OscConfig+0x82c>)
 80048ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b2:	f7fd fbb3 	bl	800201c <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ba:	f7fd fbaf 	bl	800201c <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e00f      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048cc:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <HAL_RCC_OscConfig+0x82c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f0      	bne.n	80048ba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80048d8:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <HAL_RCC_OscConfig+0x82c>)
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	4905      	ldr	r1, [pc, #20]	; (80048f4 <HAL_RCC_OscConfig+0x82c>)
 80048de:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <HAL_RCC_OscConfig+0x830>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	60cb      	str	r3, [r1, #12]
 80048e4:	e001      	b.n	80048ea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3720      	adds	r7, #32
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40021000 	.word	0x40021000
 80048f8:	feeefffc 	.word	0xfeeefffc

080048fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e11d      	b.n	8004b50 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004914:	4b90      	ldr	r3, [pc, #576]	; (8004b58 <HAL_RCC_ClockConfig+0x25c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d910      	bls.n	8004944 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004922:	4b8d      	ldr	r3, [pc, #564]	; (8004b58 <HAL_RCC_ClockConfig+0x25c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f023 020f 	bic.w	r2, r3, #15
 800492a:	498b      	ldr	r1, [pc, #556]	; (8004b58 <HAL_RCC_ClockConfig+0x25c>)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	4313      	orrs	r3, r2
 8004930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	4b89      	ldr	r3, [pc, #548]	; (8004b58 <HAL_RCC_ClockConfig+0x25c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d001      	beq.n	8004944 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e105      	b.n	8004b50 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d010      	beq.n	8004972 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	4b81      	ldr	r3, [pc, #516]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800495c:	429a      	cmp	r2, r3
 800495e:	d908      	bls.n	8004972 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004960:	4b7e      	ldr	r3, [pc, #504]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	497b      	ldr	r1, [pc, #492]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d079      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b03      	cmp	r3, #3
 8004984:	d11e      	bne.n	80049c4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004986:	4b75      	ldr	r3, [pc, #468]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e0dc      	b.n	8004b50 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004996:	f000 fa09 	bl	8004dac <RCC_GetSysClockFreqFromPLLSource>
 800499a:	4603      	mov	r3, r0
 800499c:	4a70      	ldr	r2, [pc, #448]	; (8004b60 <HAL_RCC_ClockConfig+0x264>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d946      	bls.n	8004a30 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80049a2:	4b6e      	ldr	r3, [pc, #440]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d140      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049ae:	4b6b      	ldr	r3, [pc, #428]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049b6:	4a69      	ldr	r2, [pc, #420]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 80049b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	e035      	b.n	8004a30 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d107      	bne.n	80049dc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049cc:	4b63      	ldr	r3, [pc, #396]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d115      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0b9      	b.n	8004b50 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d107      	bne.n	80049f4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049e4:	4b5d      	ldr	r3, [pc, #372]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d109      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0ad      	b.n	8004b50 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049f4:	4b59      	ldr	r3, [pc, #356]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0a5      	b.n	8004b50 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004a04:	f000 f8b4 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	4a55      	ldr	r2, [pc, #340]	; (8004b60 <HAL_RCC_ClockConfig+0x264>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d90f      	bls.n	8004a30 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004a10:	4b52      	ldr	r3, [pc, #328]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d109      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a1c:	4b4f      	ldr	r3, [pc, #316]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a24:	4a4d      	ldr	r2, [pc, #308]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a2c:	2380      	movs	r3, #128	; 0x80
 8004a2e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a30:	4b4a      	ldr	r3, [pc, #296]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f023 0203 	bic.w	r2, r3, #3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	4947      	ldr	r1, [pc, #284]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a42:	f7fd faeb 	bl	800201c <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a48:	e00a      	b.n	8004a60 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a4a:	f7fd fae7 	bl	800201c <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e077      	b.n	8004b50 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a60:	4b3e      	ldr	r3, [pc, #248]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 020c 	and.w	r2, r3, #12
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d1eb      	bne.n	8004a4a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2b80      	cmp	r3, #128	; 0x80
 8004a76:	d105      	bne.n	8004a84 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a78:	4b38      	ldr	r3, [pc, #224]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	4a37      	ldr	r2, [pc, #220]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a82:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d010      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	4b31      	ldr	r3, [pc, #196]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d208      	bcs.n	8004ab2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa0:	4b2e      	ldr	r3, [pc, #184]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	492b      	ldr	r1, [pc, #172]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab2:	4b29      	ldr	r3, [pc, #164]	; (8004b58 <HAL_RCC_ClockConfig+0x25c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d210      	bcs.n	8004ae2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac0:	4b25      	ldr	r3, [pc, #148]	; (8004b58 <HAL_RCC_ClockConfig+0x25c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f023 020f 	bic.w	r2, r3, #15
 8004ac8:	4923      	ldr	r1, [pc, #140]	; (8004b58 <HAL_RCC_ClockConfig+0x25c>)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad0:	4b21      	ldr	r3, [pc, #132]	; (8004b58 <HAL_RCC_ClockConfig+0x25c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d001      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e036      	b.n	8004b50 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0304 	and.w	r3, r3, #4
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d008      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aee:	4b1b      	ldr	r3, [pc, #108]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	4918      	ldr	r1, [pc, #96]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d009      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b0c:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	4910      	ldr	r1, [pc, #64]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b20:	f000 f826 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8004b24:	4602      	mov	r2, r0
 8004b26:	4b0d      	ldr	r3, [pc, #52]	; (8004b5c <HAL_RCC_ClockConfig+0x260>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	091b      	lsrs	r3, r3, #4
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	490c      	ldr	r1, [pc, #48]	; (8004b64 <HAL_RCC_ClockConfig+0x268>)
 8004b32:	5ccb      	ldrb	r3, [r1, r3]
 8004b34:	f003 031f 	and.w	r3, r3, #31
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3c:	4a0a      	ldr	r2, [pc, #40]	; (8004b68 <HAL_RCC_ClockConfig+0x26c>)
 8004b3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <HAL_RCC_ClockConfig+0x270>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fd fa19 	bl	8001f7c <HAL_InitTick>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	73fb      	strb	r3, [r7, #15]

  return status;
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40022000 	.word	0x40022000
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	04c4b400 	.word	0x04c4b400
 8004b64:	0800a828 	.word	0x0800a828
 8004b68:	20000000 	.word	0x20000000
 8004b6c:	20000004 	.word	0x20000004

08004b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b089      	sub	sp, #36	; 0x24
 8004b74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b7e:	4b3e      	ldr	r3, [pc, #248]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b88:	4b3b      	ldr	r3, [pc, #236]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d005      	beq.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b0c      	cmp	r3, #12
 8004b9c:	d121      	bne.n	8004be2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d11e      	bne.n	8004be2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ba4:	4b34      	ldr	r3, [pc, #208]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d107      	bne.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bb0:	4b31      	ldr	r3, [pc, #196]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bb6:	0a1b      	lsrs	r3, r3, #8
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	e005      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004bc0:	4b2d      	ldr	r3, [pc, #180]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004bcc:	4a2b      	ldr	r2, [pc, #172]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10d      	bne.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004be0:	e00a      	b.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d102      	bne.n	8004bee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004be8:	4b25      	ldr	r3, [pc, #148]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bea:	61bb      	str	r3, [r7, #24]
 8004bec:	e004      	b.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d101      	bne.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bf4:	4b23      	ldr	r3, [pc, #140]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x114>)
 8004bf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	2b0c      	cmp	r3, #12
 8004bfc:	d134      	bne.n	8004c68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bfe:	4b1e      	ldr	r3, [pc, #120]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d003      	beq.n	8004c16 <HAL_RCC_GetSysClockFreq+0xa6>
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d003      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0xac>
 8004c14:	e005      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c16:	4b1a      	ldr	r3, [pc, #104]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c18:	617b      	str	r3, [r7, #20]
      break;
 8004c1a:	e005      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c1c:	4b19      	ldr	r3, [pc, #100]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c1e:	617b      	str	r3, [r7, #20]
      break;
 8004c20:	e002      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	617b      	str	r3, [r7, #20]
      break;
 8004c26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c28:	4b13      	ldr	r3, [pc, #76]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	091b      	lsrs	r3, r3, #4
 8004c2e:	f003 030f 	and.w	r3, r3, #15
 8004c32:	3301      	adds	r3, #1
 8004c34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c36:	4b10      	ldr	r3, [pc, #64]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	0a1b      	lsrs	r3, r3, #8
 8004c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	fb03 f202 	mul.w	r2, r3, r2
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c4e:	4b0a      	ldr	r3, [pc, #40]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	0e5b      	lsrs	r3, r3, #25
 8004c54:	f003 0303 	and.w	r3, r3, #3
 8004c58:	3301      	adds	r3, #1
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c68:	69bb      	ldr	r3, [r7, #24]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3724      	adds	r7, #36	; 0x24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	0800a840 	.word	0x0800a840
 8004c80:	00f42400 	.word	0x00f42400
 8004c84:	007a1200 	.word	0x007a1200

08004c88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c8c:	4b03      	ldr	r3, [pc, #12]	; (8004c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20000000 	.word	0x20000000

08004ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ca4:	f7ff fff0 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	0a1b      	lsrs	r3, r3, #8
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	4904      	ldr	r1, [pc, #16]	; (8004cc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cb6:	5ccb      	ldrb	r3, [r1, r3]
 8004cb8:	f003 031f 	and.w	r3, r3, #31
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	0800a838 	.word	0x0800a838

08004ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004cd0:	f7ff ffda 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	0adb      	lsrs	r3, r3, #11
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	4904      	ldr	r1, [pc, #16]	; (8004cf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ce2:	5ccb      	ldrb	r3, [r1, r3]
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	0800a838 	.word	0x0800a838

08004cf8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d00:	2300      	movs	r3, #0
 8004d02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d04:	4b27      	ldr	r3, [pc, #156]	; (8004da4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d10:	f7ff f906 	bl	8003f20 <HAL_PWREx_GetVoltageRange>
 8004d14:	6178      	str	r0, [r7, #20]
 8004d16:	e014      	b.n	8004d42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d18:	4b22      	ldr	r3, [pc, #136]	; (8004da4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1c:	4a21      	ldr	r2, [pc, #132]	; (8004da4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d22:	6593      	str	r3, [r2, #88]	; 0x58
 8004d24:	4b1f      	ldr	r3, [pc, #124]	; (8004da4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d30:	f7ff f8f6 	bl	8003f20 <HAL_PWREx_GetVoltageRange>
 8004d34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d36:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3a:	4a1a      	ldr	r2, [pc, #104]	; (8004da4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d48:	d10b      	bne.n	8004d62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b80      	cmp	r3, #128	; 0x80
 8004d4e:	d913      	bls.n	8004d78 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2ba0      	cmp	r3, #160	; 0xa0
 8004d54:	d902      	bls.n	8004d5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d56:	2302      	movs	r3, #2
 8004d58:	613b      	str	r3, [r7, #16]
 8004d5a:	e00d      	b.n	8004d78 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	e00a      	b.n	8004d78 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b7f      	cmp	r3, #127	; 0x7f
 8004d66:	d902      	bls.n	8004d6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004d68:	2302      	movs	r3, #2
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	e004      	b.n	8004d78 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b70      	cmp	r3, #112	; 0x70
 8004d72:	d101      	bne.n	8004d78 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d74:	2301      	movs	r3, #1
 8004d76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d78:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f023 020f 	bic.w	r2, r3, #15
 8004d80:	4909      	ldr	r1, [pc, #36]	; (8004da8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d88:	4b07      	ldr	r3, [pc, #28]	; (8004da8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d001      	beq.n	8004d9a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40021000 	.word	0x40021000
 8004da8:	40022000 	.word	0x40022000

08004dac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004db2:	4b2d      	ldr	r3, [pc, #180]	; (8004e68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	d00b      	beq.n	8004dda <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d825      	bhi.n	8004e14 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d008      	beq.n	8004de0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d11f      	bne.n	8004e14 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004dd4:	4b25      	ldr	r3, [pc, #148]	; (8004e6c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004dd6:	613b      	str	r3, [r7, #16]
    break;
 8004dd8:	e01f      	b.n	8004e1a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004dda:	4b25      	ldr	r3, [pc, #148]	; (8004e70 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004ddc:	613b      	str	r3, [r7, #16]
    break;
 8004dde:	e01c      	b.n	8004e1a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004de0:	4b21      	ldr	r3, [pc, #132]	; (8004e68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d107      	bne.n	8004dfc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004dec:	4b1e      	ldr	r3, [pc, #120]	; (8004e68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004df2:	0a1b      	lsrs	r3, r3, #8
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	e005      	b.n	8004e08 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004dfc:	4b1a      	ldr	r3, [pc, #104]	; (8004e68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004e08:	4a1a      	ldr	r2, [pc, #104]	; (8004e74 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e10:	613b      	str	r3, [r7, #16]
    break;
 8004e12:	e002      	b.n	8004e1a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	613b      	str	r3, [r7, #16]
    break;
 8004e18:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e1a:	4b13      	ldr	r3, [pc, #76]	; (8004e68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	091b      	lsrs	r3, r3, #4
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	3301      	adds	r3, #1
 8004e26:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e28:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	0a1b      	lsrs	r3, r3, #8
 8004e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	fb03 f202 	mul.w	r2, r3, r2
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e40:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	0e5b      	lsrs	r3, r3, #25
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004e5a:	683b      	ldr	r3, [r7, #0]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	00f42400 	.word	0x00f42400
 8004e70:	007a1200 	.word	0x007a1200
 8004e74:	0800a840 	.word	0x0800a840

08004e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e80:	2300      	movs	r3, #0
 8004e82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e84:	2300      	movs	r3, #0
 8004e86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d040      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e98:	2b80      	cmp	r3, #128	; 0x80
 8004e9a:	d02a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e9c:	2b80      	cmp	r3, #128	; 0x80
 8004e9e:	d825      	bhi.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ea0:	2b60      	cmp	r3, #96	; 0x60
 8004ea2:	d026      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ea4:	2b60      	cmp	r3, #96	; 0x60
 8004ea6:	d821      	bhi.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ea8:	2b40      	cmp	r3, #64	; 0x40
 8004eaa:	d006      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004eac:	2b40      	cmp	r3, #64	; 0x40
 8004eae:	d81d      	bhi.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d009      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	d010      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004eb8:	e018      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004eba:	4b89      	ldr	r3, [pc, #548]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	4a88      	ldr	r2, [pc, #544]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ec6:	e015      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f001 fa24 	bl	800631c <RCCEx_PLLSAI1_Config>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ed8:	e00c      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	3320      	adds	r3, #32
 8004ede:	2100      	movs	r1, #0
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f001 fb0f 	bl	8006504 <RCCEx_PLLSAI2_Config>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004eea:	e003      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	74fb      	strb	r3, [r7, #19]
      break;
 8004ef0:	e000      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ef4:	7cfb      	ldrb	r3, [r7, #19]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10b      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004efa:	4b79      	ldr	r3, [pc, #484]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004efc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f00:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f08:	4975      	ldr	r1, [pc, #468]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f10:	e001      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f12:	7cfb      	ldrb	r3, [r7, #19]
 8004f14:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d047      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f2a:	d030      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f30:	d82a      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f36:	d02a      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f3c:	d824      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f42:	d008      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f48:	d81e      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f52:	d010      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004f54:	e018      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f56:	4b62      	ldr	r3, [pc, #392]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	4a61      	ldr	r2, [pc, #388]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f60:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f62:	e015      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3304      	adds	r3, #4
 8004f68:	2100      	movs	r1, #0
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f001 f9d6 	bl	800631c <RCCEx_PLLSAI1_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f74:	e00c      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3320      	adds	r3, #32
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f001 fac1 	bl	8006504 <RCCEx_PLLSAI2_Config>
 8004f82:	4603      	mov	r3, r0
 8004f84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f86:	e003      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	74fb      	strb	r3, [r7, #19]
      break;
 8004f8c:	e000      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f90:	7cfb      	ldrb	r3, [r7, #19]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f96:	4b52      	ldr	r3, [pc, #328]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa4:	494e      	ldr	r1, [pc, #312]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004fac:	e001      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fae:	7cfb      	ldrb	r3, [r7, #19]
 8004fb0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 809f 	beq.w	80050fe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fc4:	4b46      	ldr	r3, [pc, #280]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00d      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fda:	4b41      	ldr	r3, [pc, #260]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fde:	4a40      	ldr	r2, [pc, #256]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8004fe6:	4b3e      	ldr	r3, [pc, #248]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fee:	60bb      	str	r3, [r7, #8]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ff6:	4b3b      	ldr	r3, [pc, #236]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a3a      	ldr	r2, [pc, #232]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005000:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005002:	f7fd f80b 	bl	800201c <HAL_GetTick>
 8005006:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005008:	e009      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800500a:	f7fd f807 	bl	800201c <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d902      	bls.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	74fb      	strb	r3, [r7, #19]
        break;
 800501c:	e005      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800501e:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0ef      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800502a:	7cfb      	ldrb	r3, [r7, #19]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d15b      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005030:	4b2b      	ldr	r3, [pc, #172]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d01f      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	429a      	cmp	r2, r3
 800504c:	d019      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800504e:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005058:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800505a:	4b21      	ldr	r3, [pc, #132]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005060:	4a1f      	ldr	r2, [pc, #124]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800506a:	4b1d      	ldr	r3, [pc, #116]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800506c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005070:	4a1b      	ldr	r2, [pc, #108]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800507a:	4a19      	ldr	r2, [pc, #100]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d016      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508c:	f7fc ffc6 	bl	800201c <HAL_GetTick>
 8005090:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005092:	e00b      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005094:	f7fc ffc2 	bl	800201c <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d902      	bls.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	74fb      	strb	r3, [r7, #19]
            break;
 80050aa:	e006      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ac:	4b0c      	ldr	r3, [pc, #48]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0ec      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80050ba:	7cfb      	ldrb	r3, [r7, #19]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10c      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050c0:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d0:	4903      	ldr	r1, [pc, #12]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050d8:	e008      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050da:	7cfb      	ldrb	r3, [r7, #19]
 80050dc:	74bb      	strb	r3, [r7, #18]
 80050de:	e005      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x274>
 80050e0:	40021000 	.word	0x40021000
 80050e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e8:	7cfb      	ldrb	r3, [r7, #19]
 80050ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ec:	7c7b      	ldrb	r3, [r7, #17]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d105      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f2:	4ba0      	ldr	r3, [pc, #640]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	4a9f      	ldr	r2, [pc, #636]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800510a:	4b9a      	ldr	r3, [pc, #616]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005110:	f023 0203 	bic.w	r2, r3, #3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005118:	4996      	ldr	r1, [pc, #600]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800512c:	4b91      	ldr	r3, [pc, #580]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005132:	f023 020c 	bic.w	r2, r3, #12
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	498e      	ldr	r1, [pc, #568]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0304 	and.w	r3, r3, #4
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800514e:	4b89      	ldr	r3, [pc, #548]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005154:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515c:	4985      	ldr	r1, [pc, #532]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005170:	4b80      	ldr	r3, [pc, #512]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517e:	497d      	ldr	r1, [pc, #500]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005192:	4b78      	ldr	r3, [pc, #480]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a0:	4974      	ldr	r1, [pc, #464]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051b4:	4b6f      	ldr	r3, [pc, #444]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c2:	496c      	ldr	r1, [pc, #432]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051d6:	4b67      	ldr	r3, [pc, #412]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e4:	4963      	ldr	r1, [pc, #396]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051f8:	4b5e      	ldr	r3, [pc, #376]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005206:	495b      	ldr	r1, [pc, #364]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800521a:	4b56      	ldr	r3, [pc, #344]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800521c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005220:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005228:	4952      	ldr	r1, [pc, #328]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800523c:	4b4d      	ldr	r3, [pc, #308]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524a:	494a      	ldr	r1, [pc, #296]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800525e:	4b45      	ldr	r3, [pc, #276]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005264:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526c:	4941      	ldr	r1, [pc, #260]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005280:	4b3c      	ldr	r3, [pc, #240]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005282:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005286:	f023 0203 	bic.w	r2, r3, #3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800528e:	4939      	ldr	r1, [pc, #228]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d028      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052a2:	4b34      	ldr	r3, [pc, #208]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b0:	4930      	ldr	r1, [pc, #192]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052c0:	d106      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c2:	4b2c      	ldr	r3, [pc, #176]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	4a2b      	ldr	r2, [pc, #172]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052cc:	60d3      	str	r3, [r2, #12]
 80052ce:	e011      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052d8:	d10c      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3304      	adds	r3, #4
 80052de:	2101      	movs	r1, #1
 80052e0:	4618      	mov	r0, r3
 80052e2:	f001 f81b 	bl	800631c <RCCEx_PLLSAI1_Config>
 80052e6:	4603      	mov	r3, r0
 80052e8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052ea:	7cfb      	ldrb	r3, [r7, #19]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80052f0:	7cfb      	ldrb	r3, [r7, #19]
 80052f2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d04d      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005304:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005308:	d108      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800530a:	4b1a      	ldr	r3, [pc, #104]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800530c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005310:	4a18      	ldr	r2, [pc, #96]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005316:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800531a:	e012      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800531c:	4b15      	ldr	r3, [pc, #84]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800531e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005322:	4a14      	ldr	r2, [pc, #80]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005328:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800532c:	4b11      	ldr	r3, [pc, #68]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005332:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800533a:	490e      	ldr	r1, [pc, #56]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800534a:	d106      	bne.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800534c:	4b09      	ldr	r3, [pc, #36]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4a08      	ldr	r2, [pc, #32]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005356:	60d3      	str	r3, [r2, #12]
 8005358:	e020      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800535e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005362:	d109      	bne.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005364:	4b03      	ldr	r3, [pc, #12]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	4a02      	ldr	r2, [pc, #8]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800536a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800536e:	60d3      	str	r3, [r2, #12]
 8005370:	e014      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005372:	bf00      	nop
 8005374:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800537c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005380:	d10c      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3304      	adds	r3, #4
 8005386:	2101      	movs	r1, #1
 8005388:	4618      	mov	r0, r3
 800538a:	f000 ffc7 	bl	800631c <RCCEx_PLLSAI1_Config>
 800538e:	4603      	mov	r3, r0
 8005390:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005392:	7cfb      	ldrb	r3, [r7, #19]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005398:	7cfb      	ldrb	r3, [r7, #19]
 800539a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d028      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053a8:	4b4a      	ldr	r3, [pc, #296]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053b6:	4947      	ldr	r1, [pc, #284]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c6:	d106      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053c8:	4b42      	ldr	r3, [pc, #264]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4a41      	ldr	r2, [pc, #260]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053d2:	60d3      	str	r3, [r2, #12]
 80053d4:	e011      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053de:	d10c      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3304      	adds	r3, #4
 80053e4:	2101      	movs	r1, #1
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 ff98 	bl	800631c <RCCEx_PLLSAI1_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053f0:	7cfb      	ldrb	r3, [r7, #19]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80053f6:	7cfb      	ldrb	r3, [r7, #19]
 80053f8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d01e      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005406:	4b33      	ldr	r3, [pc, #204]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005416:	492f      	ldr	r1, [pc, #188]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005424:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005428:	d10c      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3304      	adds	r3, #4
 800542e:	2102      	movs	r1, #2
 8005430:	4618      	mov	r0, r3
 8005432:	f000 ff73 	bl	800631c <RCCEx_PLLSAI1_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800543a:	7cfb      	ldrb	r3, [r7, #19]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005440:	7cfb      	ldrb	r3, [r7, #19]
 8005442:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00b      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005450:	4b20      	ldr	r3, [pc, #128]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005452:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005456:	f023 0204 	bic.w	r2, r3, #4
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005460:	491c      	ldr	r1, [pc, #112]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00b      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005474:	4b17      	ldr	r3, [pc, #92]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005476:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800547a:	f023 0218 	bic.w	r2, r3, #24
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005484:	4913      	ldr	r1, [pc, #76]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d017      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005498:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800549a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800549e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054a8:	490a      	ldr	r1, [pc, #40]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054ba:	d105      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054bc:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	4a04      	ldr	r2, [pc, #16]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40021000 	.word	0x40021000

080054d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054ea:	d13e      	bne.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80054ec:	4bb6      	ldr	r3, [pc, #728]	; (80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80054ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f6:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054fe:	d028      	beq.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005506:	f200 86f4 	bhi.w	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005510:	d005      	beq.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005518:	d00e      	beq.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800551a:	f000 beea 	b.w	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800551e:	4baa      	ldr	r3, [pc, #680]	; (80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b02      	cmp	r3, #2
 800552a:	f040 86e4 	bne.w	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800552e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005532:	61fb      	str	r3, [r7, #28]
      break;
 8005534:	f000 bedf 	b.w	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005538:	4ba3      	ldr	r3, [pc, #652]	; (80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800553a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b02      	cmp	r3, #2
 8005544:	f040 86d9 	bne.w	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8005548:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800554c:	61fb      	str	r3, [r7, #28]
      break;
 800554e:	f000 bed4 	b.w	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005552:	4b9d      	ldr	r3, [pc, #628]	; (80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800555e:	f040 86ce 	bne.w	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8005562:	4b9a      	ldr	r3, [pc, #616]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005564:	61fb      	str	r3, [r7, #28]
      break;
 8005566:	f000 beca 	b.w	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800556a:	4b97      	ldr	r3, [pc, #604]	; (80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	2b03      	cmp	r3, #3
 8005578:	d036      	beq.n	80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2b03      	cmp	r3, #3
 800557e:	d840      	bhi.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d003      	beq.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2b02      	cmp	r3, #2
 800558a:	d020      	beq.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800558c:	e039      	b.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800558e:	4b8e      	ldr	r3, [pc, #568]	; (80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b02      	cmp	r3, #2
 8005598:	d116      	bne.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800559a:	4b8b      	ldr	r3, [pc, #556]	; (80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d005      	beq.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80055a6:	4b88      	ldr	r3, [pc, #544]	; (80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	091b      	lsrs	r3, r3, #4
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	e005      	b.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80055b2:	4b85      	ldr	r3, [pc, #532]	; (80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b8:	0a1b      	lsrs	r3, r3, #8
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	4a84      	ldr	r2, [pc, #528]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80055c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80055c6:	e01f      	b.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61bb      	str	r3, [r7, #24]
      break;
 80055cc:	e01c      	b.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055ce:	4b7e      	ldr	r3, [pc, #504]	; (80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055da:	d102      	bne.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80055dc:	4b7d      	ldr	r3, [pc, #500]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80055de:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80055e0:	e012      	b.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	61bb      	str	r3, [r7, #24]
      break;
 80055e6:	e00f      	b.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055e8:	4b77      	ldr	r3, [pc, #476]	; (80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055f4:	d102      	bne.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80055f6:	4b78      	ldr	r3, [pc, #480]	; (80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80055f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80055fa:	e005      	b.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	61bb      	str	r3, [r7, #24]
      break;
 8005600:	e002      	b.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	61bb      	str	r3, [r7, #24]
      break;
 8005606:	bf00      	nop
    }

    switch(PeriphClk)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800560e:	f000 8606 	beq.w	800621e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005618:	f200 8673 	bhi.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005622:	f000 8469 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800562c:	f200 8669 	bhi.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005636:	f000 8531 	beq.w	800609c <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005640:	f200 865f 	bhi.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800564a:	f000 8187 	beq.w	800595c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005654:	f200 8655 	bhi.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800565e:	f000 80cd 	beq.w	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005668:	f200 864b 	bhi.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005672:	f000 8430 	beq.w	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567c:	f200 8641 	bhi.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005686:	f000 83e4 	beq.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005690:	f200 8637 	bhi.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800569a:	f000 80af 	beq.w	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a4:	f200 862d 	bhi.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ae:	f000 809d 	beq.w	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b8:	f200 8623 	bhi.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c2:	f000 808b 	beq.w	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056cc:	f200 8619 	bhi.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d6:	f000 8554 	beq.w	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e0:	f200 860f 	bhi.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ea:	f000 8500 	beq.w	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f4:	f200 8605 	bhi.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fe:	f000 84a1 	beq.w	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005708:	f200 85fb 	bhi.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b80      	cmp	r3, #128	; 0x80
 8005710:	f000 846c 	beq.w	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b80      	cmp	r3, #128	; 0x80
 8005718:	f200 85f3 	bhi.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b20      	cmp	r3, #32
 8005720:	d84c      	bhi.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 85ec 	beq.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3b01      	subs	r3, #1
 800572e:	2b1f      	cmp	r3, #31
 8005730:	f200 85e7 	bhi.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005734:	a201      	add	r2, pc, #4	; (adr r2, 800573c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573a:	bf00      	nop
 800573c:	08005b51 	.word	0x08005b51
 8005740:	08005bbf 	.word	0x08005bbf
 8005744:	08006303 	.word	0x08006303
 8005748:	08005c53 	.word	0x08005c53
 800574c:	08006303 	.word	0x08006303
 8005750:	08006303 	.word	0x08006303
 8005754:	08006303 	.word	0x08006303
 8005758:	08005ccb 	.word	0x08005ccb
 800575c:	08006303 	.word	0x08006303
 8005760:	08006303 	.word	0x08006303
 8005764:	08006303 	.word	0x08006303
 8005768:	08006303 	.word	0x08006303
 800576c:	08006303 	.word	0x08006303
 8005770:	08006303 	.word	0x08006303
 8005774:	08006303 	.word	0x08006303
 8005778:	08005d4f 	.word	0x08005d4f
 800577c:	08006303 	.word	0x08006303
 8005780:	08006303 	.word	0x08006303
 8005784:	08006303 	.word	0x08006303
 8005788:	08006303 	.word	0x08006303
 800578c:	08006303 	.word	0x08006303
 8005790:	08006303 	.word	0x08006303
 8005794:	08006303 	.word	0x08006303
 8005798:	08006303 	.word	0x08006303
 800579c:	08006303 	.word	0x08006303
 80057a0:	08006303 	.word	0x08006303
 80057a4:	08006303 	.word	0x08006303
 80057a8:	08006303 	.word	0x08006303
 80057ac:	08006303 	.word	0x08006303
 80057b0:	08006303 	.word	0x08006303
 80057b4:	08006303 	.word	0x08006303
 80057b8:	08005dd1 	.word	0x08005dd1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b40      	cmp	r3, #64	; 0x40
 80057c0:	f000 83e8 	beq.w	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80057c4:	f000 bd9d 	b.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80057c8:	40021000 	.word	0x40021000
 80057cc:	0003d090 	.word	0x0003d090
 80057d0:	0800a840 	.word	0x0800a840
 80057d4:	00f42400 	.word	0x00f42400
 80057d8:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80057dc:	69b9      	ldr	r1, [r7, #24]
 80057de:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80057e2:	f000 ff83 	bl	80066ec <RCCEx_GetSAIxPeriphCLKFreq>
 80057e6:	61f8      	str	r0, [r7, #28]
      break;
 80057e8:	f000 bd8e 	b.w	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80057ec:	69b9      	ldr	r1, [r7, #24]
 80057ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80057f2:	f000 ff7b 	bl	80066ec <RCCEx_GetSAIxPeriphCLKFreq>
 80057f6:	61f8      	str	r0, [r7, #28]
      break;
 80057f8:	f000 bd86 	b.w	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80057fc:	4b9a      	ldr	r3, [pc, #616]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80057fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005802:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800580e:	d015      	beq.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005816:	f200 8092 	bhi.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005820:	d029      	beq.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005828:	f200 8089 	bhi.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d07b      	beq.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005838:	d04a      	beq.n	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800583a:	e080      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800583c:	4b8a      	ldr	r3, [pc, #552]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b02      	cmp	r3, #2
 8005846:	d17d      	bne.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005848:	4b87      	ldr	r3, [pc, #540]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8005854:	4b84      	ldr	r3, [pc, #528]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	091b      	lsrs	r3, r3, #4
 800585a:	f003 030f 	and.w	r3, r3, #15
 800585e:	e005      	b.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8005860:	4b81      	ldr	r3, [pc, #516]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005866:	0a1b      	lsrs	r3, r3, #8
 8005868:	f003 030f 	and.w	r3, r3, #15
 800586c:	4a7f      	ldr	r2, [pc, #508]	; (8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800586e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005872:	61fb      	str	r3, [r7, #28]
          break;
 8005874:	e066      	b.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005876:	4b7c      	ldr	r3, [pc, #496]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800587e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005882:	d162      	bne.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005884:	4b78      	ldr	r3, [pc, #480]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800588c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005890:	d15b      	bne.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005892:	4b75      	ldr	r3, [pc, #468]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	0a1b      	lsrs	r3, r3, #8
 8005898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800589c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	fb03 f202 	mul.w	r2, r3, r2
 80058a6:	4b70      	ldr	r3, [pc, #448]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	091b      	lsrs	r3, r3, #4
 80058ac:	f003 030f 	and.w	r3, r3, #15
 80058b0:	3301      	adds	r3, #1
 80058b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80058b8:	4b6b      	ldr	r3, [pc, #428]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	0d5b      	lsrs	r3, r3, #21
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	3301      	adds	r3, #1
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058cc:	61fb      	str	r3, [r7, #28]
          break;
 80058ce:	e03c      	b.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80058d0:	4b65      	ldr	r3, [pc, #404]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058dc:	d138      	bne.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80058de:	4b62      	ldr	r3, [pc, #392]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ea:	d131      	bne.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80058ec:	4b5e      	ldr	r3, [pc, #376]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	0a1b      	lsrs	r3, r3, #8
 80058f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	fb03 f202 	mul.w	r2, r3, r2
 8005900:	4b59      	ldr	r3, [pc, #356]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	091b      	lsrs	r3, r3, #4
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	3301      	adds	r3, #1
 800590c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005910:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005912:	4b55      	ldr	r3, [pc, #340]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	0d5b      	lsrs	r3, r3, #21
 8005918:	f003 0303 	and.w	r3, r3, #3
 800591c:	3301      	adds	r3, #1
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	fbb2 f3f3 	udiv	r3, r2, r3
 8005926:	61fb      	str	r3, [r7, #28]
          break;
 8005928:	e012      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800592a:	4b4f      	ldr	r3, [pc, #316]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800592c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b02      	cmp	r3, #2
 8005936:	d10e      	bne.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8005938:	4b4d      	ldr	r3, [pc, #308]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800593a:	61fb      	str	r3, [r7, #28]
          break;
 800593c:	e00b      	b.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800593e:	bf00      	nop
 8005940:	f000 bce2 	b.w	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005944:	bf00      	nop
 8005946:	f000 bcdf 	b.w	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800594a:	bf00      	nop
 800594c:	f000 bcdc 	b.w	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005950:	bf00      	nop
 8005952:	f000 bcd9 	b.w	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005956:	bf00      	nop
        break;
 8005958:	f000 bcd6 	b.w	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800595c:	4b42      	ldr	r3, [pc, #264]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800595e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800596a:	d13d      	bne.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800596c:	4b3e      	ldr	r3, [pc, #248]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005974:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005978:	f040 84c5 	bne.w	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800597c:	4b3a      	ldr	r3, [pc, #232]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005988:	f040 84bd 	bne.w	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800598c:	4b36      	ldr	r3, [pc, #216]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	0a1b      	lsrs	r3, r3, #8
 8005992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005996:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	fb03 f202 	mul.w	r2, r3, r2
 80059a0:	4b31      	ldr	r3, [pc, #196]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	091b      	lsrs	r3, r3, #4
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	3301      	adds	r3, #1
 80059ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b0:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80059b2:	4b2d      	ldr	r3, [pc, #180]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	0edb      	lsrs	r3, r3, #27
 80059b8:	f003 031f 	and.w	r3, r3, #31
 80059bc:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10a      	bne.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80059c4:	4b28      	ldr	r3, [pc, #160]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 80059d0:	2311      	movs	r3, #17
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	e001      	b.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 80059d6:	2307      	movs	r3, #7
 80059d8:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e2:	61fb      	str	r3, [r7, #28]
      break;
 80059e4:	f000 bc8f 	b.w	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80059e8:	4b1f      	ldr	r3, [pc, #124]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ee:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80059fa:	d016      	beq.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a02:	f200 809b 	bhi.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a0c:	d032      	beq.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a14:	f200 8092 	bhi.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 8084 	beq.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a26:	d052      	beq.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8005a28:	e088      	b.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005a2a:	4b0f      	ldr	r3, [pc, #60]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	f040 8084 	bne.w	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005a38:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005a44:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	091b      	lsrs	r3, r3, #4
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	e005      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8005a50:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a56:	0a1b      	lsrs	r3, r3, #8
 8005a58:	f003 030f 	and.w	r3, r3, #15
 8005a5c:	4a03      	ldr	r2, [pc, #12]	; (8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a62:	61fb      	str	r3, [r7, #28]
          break;
 8005a64:	e06c      	b.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8005a66:	bf00      	nop
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	0800a840 	.word	0x0800a840
 8005a70:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005a74:	4ba5      	ldr	r3, [pc, #660]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a80:	d160      	bne.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005a82:	4ba2      	ldr	r3, [pc, #648]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a8e:	d159      	bne.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005a90:	4b9e      	ldr	r3, [pc, #632]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	0a1b      	lsrs	r3, r3, #8
 8005a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a9a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	fb03 f202 	mul.w	r2, r3, r2
 8005aa4:	4b99      	ldr	r3, [pc, #612]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	091b      	lsrs	r3, r3, #4
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	3301      	adds	r3, #1
 8005ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005ab6:	4b95      	ldr	r3, [pc, #596]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	0d5b      	lsrs	r3, r3, #21
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aca:	61fb      	str	r3, [r7, #28]
          break;
 8005acc:	e03a      	b.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005ace:	4b8f      	ldr	r3, [pc, #572]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ad6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ada:	d135      	bne.n	8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005adc:	4b8b      	ldr	r3, [pc, #556]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ae8:	d12e      	bne.n	8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005aea:	4b88      	ldr	r3, [pc, #544]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	0a1b      	lsrs	r3, r3, #8
 8005af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005af4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	fb03 f202 	mul.w	r2, r3, r2
 8005afe:	4b83      	ldr	r3, [pc, #524]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	091b      	lsrs	r3, r3, #4
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	3301      	adds	r3, #1
 8005b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005b10:	4b7e      	ldr	r3, [pc, #504]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	0d5b      	lsrs	r3, r3, #21
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b24:	61fb      	str	r3, [r7, #28]
          break;
 8005b26:	e00f      	b.n	8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005b28:	4b78      	ldr	r3, [pc, #480]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d10a      	bne.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8005b36:	4b76      	ldr	r3, [pc, #472]	; (8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005b38:	61fb      	str	r3, [r7, #28]
          break;
 8005b3a:	e007      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8005b3c:	bf00      	nop
 8005b3e:	e3e2      	b.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005b40:	bf00      	nop
 8005b42:	e3e0      	b.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005b44:	bf00      	nop
 8005b46:	e3de      	b.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005b48:	bf00      	nop
 8005b4a:	e3dc      	b.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005b4c:	bf00      	nop
      break;
 8005b4e:	e3da      	b.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005b50:	4b6e      	ldr	r3, [pc, #440]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d827      	bhi.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005b62:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005b79 	.word	0x08005b79
 8005b6c:	08005b81 	.word	0x08005b81
 8005b70:	08005b89 	.word	0x08005b89
 8005b74:	08005b9d 	.word	0x08005b9d
          frequency = HAL_RCC_GetPCLK2Freq();
 8005b78:	f7ff f8a8 	bl	8004ccc <HAL_RCC_GetPCLK2Freq>
 8005b7c:	61f8      	str	r0, [r7, #28]
          break;
 8005b7e:	e01d      	b.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b80:	f7fe fff6 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8005b84:	61f8      	str	r0, [r7, #28]
          break;
 8005b86:	e019      	b.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b88:	4b60      	ldr	r3, [pc, #384]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b94:	d10f      	bne.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8005b96:	4b5f      	ldr	r3, [pc, #380]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005b98:	61fb      	str	r3, [r7, #28]
          break;
 8005b9a:	e00c      	b.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b9c:	4b5b      	ldr	r3, [pc, #364]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d107      	bne.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8005baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bae:	61fb      	str	r3, [r7, #28]
          break;
 8005bb0:	e003      	b.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8005bb2:	bf00      	nop
 8005bb4:	e3a8      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005bb6:	bf00      	nop
 8005bb8:	e3a6      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005bba:	bf00      	nop
        break;
 8005bbc:	e3a4      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005bbe:	4b53      	ldr	r3, [pc, #332]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc4:	f003 030c 	and.w	r3, r3, #12
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b0c      	cmp	r3, #12
 8005bce:	d83a      	bhi.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005bd0:	a201      	add	r2, pc, #4	; (adr r2, 8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8005bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd6:	bf00      	nop
 8005bd8:	08005c0d 	.word	0x08005c0d
 8005bdc:	08005c47 	.word	0x08005c47
 8005be0:	08005c47 	.word	0x08005c47
 8005be4:	08005c47 	.word	0x08005c47
 8005be8:	08005c15 	.word	0x08005c15
 8005bec:	08005c47 	.word	0x08005c47
 8005bf0:	08005c47 	.word	0x08005c47
 8005bf4:	08005c47 	.word	0x08005c47
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005c47 	.word	0x08005c47
 8005c00:	08005c47 	.word	0x08005c47
 8005c04:	08005c47 	.word	0x08005c47
 8005c08:	08005c31 	.word	0x08005c31
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c0c:	f7ff f848 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 8005c10:	61f8      	str	r0, [r7, #28]
          break;
 8005c12:	e01d      	b.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c14:	f7fe ffac 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8005c18:	61f8      	str	r0, [r7, #28]
          break;
 8005c1a:	e019      	b.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c1c:	4b3b      	ldr	r3, [pc, #236]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c28:	d10f      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8005c2a:	4b3a      	ldr	r3, [pc, #232]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005c2c:	61fb      	str	r3, [r7, #28]
          break;
 8005c2e:	e00c      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c30:	4b36      	ldr	r3, [pc, #216]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d107      	bne.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8005c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c42:	61fb      	str	r3, [r7, #28]
          break;
 8005c44:	e003      	b.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8005c46:	bf00      	nop
 8005c48:	e35e      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c4a:	bf00      	nop
 8005c4c:	e35c      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c4e:	bf00      	nop
        break;
 8005c50:	e35a      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005c52:	4b2e      	ldr	r3, [pc, #184]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b30      	cmp	r3, #48	; 0x30
 8005c62:	d021      	beq.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b30      	cmp	r3, #48	; 0x30
 8005c68:	d829      	bhi.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d011      	beq.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	d823      	bhi.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b10      	cmp	r3, #16
 8005c80:	d004      	beq.n	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8005c82:	e01c      	b.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c84:	f7ff f80c 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 8005c88:	61f8      	str	r0, [r7, #28]
          break;
 8005c8a:	e01d      	b.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c8c:	f7fe ff70 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8005c90:	61f8      	str	r0, [r7, #28]
          break;
 8005c92:	e019      	b.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c94:	4b1d      	ldr	r3, [pc, #116]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca0:	d10f      	bne.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8005ca2:	4b1c      	ldr	r3, [pc, #112]	; (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005ca4:	61fb      	str	r3, [r7, #28]
          break;
 8005ca6:	e00c      	b.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ca8:	4b18      	ldr	r3, [pc, #96]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d107      	bne.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8005cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cba:	61fb      	str	r3, [r7, #28]
          break;
 8005cbc:	e003      	b.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8005cbe:	bf00      	nop
 8005cc0:	e322      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005cc2:	bf00      	nop
 8005cc4:	e320      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005cc6:	bf00      	nop
        break;
 8005cc8:	e31e      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005cca:	4b10      	ldr	r3, [pc, #64]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2bc0      	cmp	r3, #192	; 0xc0
 8005cda:	d027      	beq.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2bc0      	cmp	r3, #192	; 0xc0
 8005ce0:	d82f      	bhi.n	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b80      	cmp	r3, #128	; 0x80
 8005ce6:	d017      	beq.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b80      	cmp	r3, #128	; 0x80
 8005cec:	d829      	bhi.n	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b40      	cmp	r3, #64	; 0x40
 8005cf8:	d004      	beq.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8005cfa:	e022      	b.n	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cfc:	f7fe ffd0 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 8005d00:	61f8      	str	r0, [r7, #28]
          break;
 8005d02:	e023      	b.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d04:	f7fe ff34 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8005d08:	61f8      	str	r0, [r7, #28]
          break;
 8005d0a:	e01f      	b.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8005d0c:	40021000 	.word	0x40021000
 8005d10:	02dc6c00 	.word	0x02dc6c00
 8005d14:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d18:	4b9b      	ldr	r3, [pc, #620]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d24:	d10f      	bne.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8005d26:	4b99      	ldr	r3, [pc, #612]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005d28:	61fb      	str	r3, [r7, #28]
          break;
 8005d2a:	e00c      	b.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d2c:	4b96      	ldr	r3, [pc, #600]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d107      	bne.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8005d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d3e:	61fb      	str	r3, [r7, #28]
          break;
 8005d40:	e003      	b.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8005d42:	bf00      	nop
 8005d44:	e2e0      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d46:	bf00      	nop
 8005d48:	e2de      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d4a:	bf00      	nop
        break;
 8005d4c:	e2dc      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005d4e:	4b8e      	ldr	r3, [pc, #568]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d60:	d025      	beq.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d68:	d82c      	bhi.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d70:	d013      	beq.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d78:	d824      	bhi.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d004      	beq.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d86:	d004      	beq.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8005d88:	e01c      	b.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d8a:	f7fe ff89 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 8005d8e:	61f8      	str	r0, [r7, #28]
          break;
 8005d90:	e01d      	b.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d92:	f7fe feed 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8005d96:	61f8      	str	r0, [r7, #28]
          break;
 8005d98:	e019      	b.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d9a:	4b7b      	ldr	r3, [pc, #492]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005da6:	d10f      	bne.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8005da8:	4b78      	ldr	r3, [pc, #480]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005daa:	61fb      	str	r3, [r7, #28]
          break;
 8005dac:	e00c      	b.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005dae:	4b76      	ldr	r3, [pc, #472]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d107      	bne.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8005dbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dc0:	61fb      	str	r3, [r7, #28]
          break;
 8005dc2:	e003      	b.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8005dc4:	bf00      	nop
 8005dc6:	e29f      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005dc8:	bf00      	nop
 8005dca:	e29d      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005dcc:	bf00      	nop
        break;
 8005dce:	e29b      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005dd0:	4b6d      	ldr	r3, [pc, #436]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005de2:	d025      	beq.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dea:	d82c      	bhi.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005df2:	d013      	beq.n	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dfa:	d824      	bhi.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d004      	beq.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e08:	d004      	beq.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8005e0a:	e01c      	b.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e0c:	f7fe ff48 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 8005e10:	61f8      	str	r0, [r7, #28]
          break;
 8005e12:	e01d      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e14:	f7fe feac 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8005e18:	61f8      	str	r0, [r7, #28]
          break;
 8005e1a:	e019      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e1c:	4b5a      	ldr	r3, [pc, #360]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e28:	d10f      	bne.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8005e2a:	4b58      	ldr	r3, [pc, #352]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005e2c:	61fb      	str	r3, [r7, #28]
          break;
 8005e2e:	e00c      	b.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e30:	4b55      	ldr	r3, [pc, #340]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d107      	bne.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8005e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e42:	61fb      	str	r3, [r7, #28]
          break;
 8005e44:	e003      	b.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8005e46:	bf00      	nop
 8005e48:	e25e      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e4a:	bf00      	nop
 8005e4c:	e25c      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e4e:	bf00      	nop
        break;
 8005e50:	e25a      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005e52:	4b4d      	ldr	r3, [pc, #308]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e64:	d007      	beq.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e6c:	d12f      	bne.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e6e:	f7fe fe7f 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8005e72:	61f8      	str	r0, [r7, #28]
          break;
 8005e74:	e02e      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005e76:	4b44      	ldr	r3, [pc, #272]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e82:	d126      	bne.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005e84:	4b40      	ldr	r3, [pc, #256]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d020      	beq.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005e90:	4b3d      	ldr	r3, [pc, #244]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	0a1b      	lsrs	r3, r3, #8
 8005e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e9a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	fb03 f202 	mul.w	r2, r3, r2
 8005ea4:	4b38      	ldr	r3, [pc, #224]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	3301      	adds	r3, #1
 8005eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005eb6:	4b34      	ldr	r3, [pc, #208]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	0e5b      	lsrs	r3, r3, #25
 8005ebc:	f003 0303 	and.w	r3, r3, #3
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eca:	61fb      	str	r3, [r7, #28]
          break;
 8005ecc:	e001      	b.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8005ece:	bf00      	nop
 8005ed0:	e21a      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ed2:	bf00      	nop
        break;
 8005ed4:	e218      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005ed6:	4b2c      	ldr	r3, [pc, #176]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ed8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d103      	bne.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005ee8:	f7fe fef0 	bl	8004ccc <HAL_RCC_GetPCLK2Freq>
 8005eec:	61f8      	str	r0, [r7, #28]
        break;
 8005eee:	e20b      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ef0:	f7fe fe3e 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8005ef4:	61f8      	str	r0, [r7, #28]
        break;
 8005ef6:	e207      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005ef8:	4b23      	ldr	r3, [pc, #140]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005efe:	f003 0318 	and.w	r3, r3, #24
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2b10      	cmp	r3, #16
 8005f08:	d010      	beq.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2b10      	cmp	r3, #16
 8005f0e:	d834      	bhi.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d024      	beq.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8005f1c:	e02d      	b.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005f1e:	69b9      	ldr	r1, [r7, #24]
 8005f20:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005f24:	f000 fbe2 	bl	80066ec <RCCEx_GetSAIxPeriphCLKFreq>
 8005f28:	61f8      	str	r0, [r7, #28]
          break;
 8005f2a:	e02b      	b.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005f2c:	4b16      	ldr	r3, [pc, #88]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d122      	bne.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005f38:	4b13      	ldr	r3, [pc, #76]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0308 	and.w	r3, r3, #8
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d005      	beq.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005f44:	4b10      	ldr	r3, [pc, #64]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	091b      	lsrs	r3, r3, #4
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	e005      	b.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8005f50:	4b0d      	ldr	r3, [pc, #52]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f56:	0a1b      	lsrs	r3, r3, #8
 8005f58:	f003 030f 	and.w	r3, r3, #15
 8005f5c:	4a0c      	ldr	r2, [pc, #48]	; (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f62:	61fb      	str	r3, [r7, #28]
          break;
 8005f64:	e00b      	b.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f66:	4b08      	ldr	r3, [pc, #32]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f72:	d106      	bne.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8005f74:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005f76:	61fb      	str	r3, [r7, #28]
          break;
 8005f78:	e003      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8005f7a:	bf00      	nop
 8005f7c:	e1c4      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f7e:	bf00      	nop
 8005f80:	e1c2      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f82:	bf00      	nop
        break;
 8005f84:	e1c0      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8005f86:	bf00      	nop
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	00f42400 	.word	0x00f42400
 8005f90:	0800a840 	.word	0x0800a840
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005f94:	4b96      	ldr	r3, [pc, #600]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa6:	d013      	beq.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fae:	d819      	bhi.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d004      	beq.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fbc:	d004      	beq.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8005fbe:	e011      	b.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fc0:	f7fe fe6e 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 8005fc4:	61f8      	str	r0, [r7, #28]
          break;
 8005fc6:	e010      	b.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8005fc8:	f7fe fdd2 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8005fcc:	61f8      	str	r0, [r7, #28]
          break;
 8005fce:	e00c      	b.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fd0:	4b87      	ldr	r3, [pc, #540]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fdc:	d104      	bne.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8005fde:	4b85      	ldr	r3, [pc, #532]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005fe0:	61fb      	str	r3, [r7, #28]
          break;
 8005fe2:	e001      	b.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8005fe4:	bf00      	nop
 8005fe6:	e18f      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005fe8:	bf00      	nop
        break;
 8005fea:	e18d      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005fec:	4b80      	ldr	r3, [pc, #512]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ffe:	d013      	beq.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006006:	d819      	bhi.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d004      	beq.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006014:	d004      	beq.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8006016:	e011      	b.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006018:	f7fe fe42 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 800601c:	61f8      	str	r0, [r7, #28]
          break;
 800601e:	e010      	b.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006020:	f7fe fda6 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8006024:	61f8      	str	r0, [r7, #28]
          break;
 8006026:	e00c      	b.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006028:	4b71      	ldr	r3, [pc, #452]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006034:	d104      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8006036:	4b6f      	ldr	r3, [pc, #444]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006038:	61fb      	str	r3, [r7, #28]
          break;
 800603a:	e001      	b.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800603c:	bf00      	nop
 800603e:	e163      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006040:	bf00      	nop
        break;
 8006042:	e161      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006044:	4b6a      	ldr	r3, [pc, #424]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006056:	d013      	beq.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800605e:	d819      	bhi.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d004      	beq.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800606c:	d004      	beq.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800606e:	e011      	b.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006070:	f7fe fe16 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 8006074:	61f8      	str	r0, [r7, #28]
          break;
 8006076:	e010      	b.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006078:	f7fe fd7a 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 800607c:	61f8      	str	r0, [r7, #28]
          break;
 800607e:	e00c      	b.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006080:	4b5b      	ldr	r3, [pc, #364]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800608c:	d104      	bne.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800608e:	4b59      	ldr	r3, [pc, #356]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006090:	61fb      	str	r3, [r7, #28]
          break;
 8006092:	e001      	b.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8006094:	bf00      	nop
 8006096:	e137      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006098:	bf00      	nop
        break;
 800609a:	e135      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800609c:	4b54      	ldr	r3, [pc, #336]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800609e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060a2:	f003 0303 	and.w	r3, r3, #3
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d011      	beq.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d818      	bhi.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d004      	beq.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 80060c0:	e011      	b.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80060c2:	f7fe fded 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 80060c6:	61f8      	str	r0, [r7, #28]
          break;
 80060c8:	e010      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 80060ca:	f7fe fd51 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 80060ce:	61f8      	str	r0, [r7, #28]
          break;
 80060d0:	e00c      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060d2:	4b47      	ldr	r3, [pc, #284]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060de:	d104      	bne.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 80060e0:	4b44      	ldr	r3, [pc, #272]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80060e2:	61fb      	str	r3, [r7, #28]
          break;
 80060e4:	e001      	b.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 80060e6:	bf00      	nop
 80060e8:	e10e      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80060ea:	bf00      	nop
        break;
 80060ec:	e10c      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80060ee:	4b40      	ldr	r3, [pc, #256]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80060f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006100:	d02c      	beq.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006108:	d833      	bhi.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006110:	d01a      	beq.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006118:	d82b      	bhi.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d004      	beq.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006126:	d004      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8006128:	e023      	b.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800612a:	f7fe fdb9 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 800612e:	61f8      	str	r0, [r7, #28]
          break;
 8006130:	e026      	b.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006132:	4b2f      	ldr	r3, [pc, #188]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b02      	cmp	r3, #2
 800613e:	d11a      	bne.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8006140:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006144:	61fb      	str	r3, [r7, #28]
          break;
 8006146:	e016      	b.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006148:	4b29      	ldr	r3, [pc, #164]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006154:	d111      	bne.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8006156:	4b27      	ldr	r3, [pc, #156]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006158:	61fb      	str	r3, [r7, #28]
          break;
 800615a:	e00e      	b.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800615c:	4b24      	ldr	r3, [pc, #144]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b02      	cmp	r3, #2
 8006168:	d109      	bne.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800616a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800616e:	61fb      	str	r3, [r7, #28]
          break;
 8006170:	e005      	b.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8006172:	bf00      	nop
 8006174:	e0c8      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006176:	bf00      	nop
 8006178:	e0c6      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800617a:	bf00      	nop
 800617c:	e0c4      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800617e:	bf00      	nop
        break;
 8006180:	e0c2      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006182:	4b1b      	ldr	r3, [pc, #108]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006188:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006194:	d030      	beq.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800619c:	d837      	bhi.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061a4:	d01a      	beq.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061ac:	d82f      	bhi.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d004      	beq.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ba:	d004      	beq.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 80061bc:	e027      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 80061be:	f7fe fd6f 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 80061c2:	61f8      	str	r0, [r7, #28]
          break;
 80061c4:	e02a      	b.n	800621c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80061c6:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80061c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d11e      	bne.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 80061d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80061d8:	61fb      	str	r3, [r7, #28]
          break;
 80061da:	e01a      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061dc:	4b04      	ldr	r3, [pc, #16]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e8:	d115      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 80061ea:	4b02      	ldr	r3, [pc, #8]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80061ec:	61fb      	str	r3, [r7, #28]
          break;
 80061ee:	e012      	b.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80061f0:	40021000 	.word	0x40021000
 80061f4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80061f8:	4b46      	ldr	r3, [pc, #280]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80061fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b02      	cmp	r3, #2
 8006204:	d109      	bne.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8006206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800620a:	61fb      	str	r3, [r7, #28]
          break;
 800620c:	e005      	b.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800620e:	bf00      	nop
 8006210:	e07a      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006212:	bf00      	nop
 8006214:	e078      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006216:	bf00      	nop
 8006218:	e076      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800621a:	bf00      	nop
        break;
 800621c:	e074      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800621e:	4b3d      	ldr	r3, [pc, #244]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006220:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006224:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006230:	d02c      	beq.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006238:	d855      	bhi.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d004      	beq.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006246:	d004      	beq.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8006248:	e04d      	b.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800624a:	f7fe fc91 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 800624e:	61f8      	str	r0, [r7, #28]
          break;
 8006250:	e04e      	b.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006252:	4b30      	ldr	r3, [pc, #192]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b02      	cmp	r3, #2
 800625c:	d145      	bne.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800625e:	4b2d      	ldr	r3, [pc, #180]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0308 	and.w	r3, r3, #8
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800626a:	4b2a      	ldr	r3, [pc, #168]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	091b      	lsrs	r3, r3, #4
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	e005      	b.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8006276:	4b27      	ldr	r3, [pc, #156]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800627c:	0a1b      	lsrs	r3, r3, #8
 800627e:	f003 030f 	and.w	r3, r3, #15
 8006282:	4a25      	ldr	r2, [pc, #148]	; (8006318 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8006284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006288:	61fb      	str	r3, [r7, #28]
          break;
 800628a:	e02e      	b.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800628c:	4b21      	ldr	r3, [pc, #132]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006294:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006298:	d129      	bne.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800629a:	4b1e      	ldr	r3, [pc, #120]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062a6:	d122      	bne.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80062a8:	4b1a      	ldr	r3, [pc, #104]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	0a1b      	lsrs	r3, r3, #8
 80062ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	fb03 f202 	mul.w	r2, r3, r2
 80062bc:	4b15      	ldr	r3, [pc, #84]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	091b      	lsrs	r3, r3, #4
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	3301      	adds	r3, #1
 80062c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062cc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80062ce:	4b11      	ldr	r3, [pc, #68]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	0d5b      	lsrs	r3, r3, #21
 80062d4:	f003 0303 	and.w	r3, r3, #3
 80062d8:	3301      	adds	r3, #1
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e2:	61fb      	str	r3, [r7, #28]
          break;
 80062e4:	e003      	b.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 80062e6:	bf00      	nop
 80062e8:	e00e      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80062ea:	bf00      	nop
 80062ec:	e00c      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80062ee:	bf00      	nop
        break;
 80062f0:	e00a      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80062f2:	bf00      	nop
 80062f4:	e008      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80062f6:	bf00      	nop
 80062f8:	e006      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80062fa:	bf00      	nop
 80062fc:	e004      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80062fe:	bf00      	nop
 8006300:	e002      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006302:	bf00      	nop
 8006304:	e000      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006306:	bf00      	nop
    }
  }

  return(frequency);
 8006308:	69fb      	ldr	r3, [r7, #28]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3720      	adds	r7, #32
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	40021000 	.word	0x40021000
 8006318:	0800a840 	.word	0x0800a840

0800631c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800632a:	4b72      	ldr	r3, [pc, #456]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00e      	beq.n	8006354 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006336:	4b6f      	ldr	r3, [pc, #444]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f003 0203 	and.w	r2, r3, #3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	429a      	cmp	r2, r3
 8006344:	d103      	bne.n	800634e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
       ||
 800634a:	2b00      	cmp	r3, #0
 800634c:	d142      	bne.n	80063d4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	73fb      	strb	r3, [r7, #15]
 8006352:	e03f      	b.n	80063d4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b03      	cmp	r3, #3
 800635a:	d018      	beq.n	800638e <RCCEx_PLLSAI1_Config+0x72>
 800635c:	2b03      	cmp	r3, #3
 800635e:	d825      	bhi.n	80063ac <RCCEx_PLLSAI1_Config+0x90>
 8006360:	2b01      	cmp	r3, #1
 8006362:	d002      	beq.n	800636a <RCCEx_PLLSAI1_Config+0x4e>
 8006364:	2b02      	cmp	r3, #2
 8006366:	d009      	beq.n	800637c <RCCEx_PLLSAI1_Config+0x60>
 8006368:	e020      	b.n	80063ac <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800636a:	4b62      	ldr	r3, [pc, #392]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d11d      	bne.n	80063b2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800637a:	e01a      	b.n	80063b2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800637c:	4b5d      	ldr	r3, [pc, #372]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006384:	2b00      	cmp	r3, #0
 8006386:	d116      	bne.n	80063b6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800638c:	e013      	b.n	80063b6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800638e:	4b59      	ldr	r3, [pc, #356]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10f      	bne.n	80063ba <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800639a:	4b56      	ldr	r3, [pc, #344]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063aa:	e006      	b.n	80063ba <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	73fb      	strb	r3, [r7, #15]
      break;
 80063b0:	e004      	b.n	80063bc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80063b2:	bf00      	nop
 80063b4:	e002      	b.n	80063bc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80063b6:	bf00      	nop
 80063b8:	e000      	b.n	80063bc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80063ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d108      	bne.n	80063d4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80063c2:	4b4c      	ldr	r3, [pc, #304]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f023 0203 	bic.w	r2, r3, #3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4949      	ldr	r1, [pc, #292]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f040 8086 	bne.w	80064e8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80063dc:	4b45      	ldr	r3, [pc, #276]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a44      	ldr	r2, [pc, #272]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063e8:	f7fb fe18 	bl	800201c <HAL_GetTick>
 80063ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80063ee:	e009      	b.n	8006404 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063f0:	f7fb fe14 	bl	800201c <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d902      	bls.n	8006404 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	73fb      	strb	r3, [r7, #15]
        break;
 8006402:	e005      	b.n	8006410 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006404:	4b3b      	ldr	r3, [pc, #236]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1ef      	bne.n	80063f0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d168      	bne.n	80064e8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d113      	bne.n	8006444 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800641c:	4b35      	ldr	r3, [pc, #212]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800641e:	691a      	ldr	r2, [r3, #16]
 8006420:	4b35      	ldr	r3, [pc, #212]	; (80064f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006422:	4013      	ands	r3, r2
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	6892      	ldr	r2, [r2, #8]
 8006428:	0211      	lsls	r1, r2, #8
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	68d2      	ldr	r2, [r2, #12]
 800642e:	06d2      	lsls	r2, r2, #27
 8006430:	4311      	orrs	r1, r2
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6852      	ldr	r2, [r2, #4]
 8006436:	3a01      	subs	r2, #1
 8006438:	0112      	lsls	r2, r2, #4
 800643a:	430a      	orrs	r2, r1
 800643c:	492d      	ldr	r1, [pc, #180]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800643e:	4313      	orrs	r3, r2
 8006440:	610b      	str	r3, [r1, #16]
 8006442:	e02d      	b.n	80064a0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d115      	bne.n	8006476 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800644a:	4b2a      	ldr	r3, [pc, #168]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	4b2b      	ldr	r3, [pc, #172]	; (80064fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006450:	4013      	ands	r3, r2
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6892      	ldr	r2, [r2, #8]
 8006456:	0211      	lsls	r1, r2, #8
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6912      	ldr	r2, [r2, #16]
 800645c:	0852      	lsrs	r2, r2, #1
 800645e:	3a01      	subs	r2, #1
 8006460:	0552      	lsls	r2, r2, #21
 8006462:	4311      	orrs	r1, r2
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6852      	ldr	r2, [r2, #4]
 8006468:	3a01      	subs	r2, #1
 800646a:	0112      	lsls	r2, r2, #4
 800646c:	430a      	orrs	r2, r1
 800646e:	4921      	ldr	r1, [pc, #132]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006470:	4313      	orrs	r3, r2
 8006472:	610b      	str	r3, [r1, #16]
 8006474:	e014      	b.n	80064a0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006476:	4b1f      	ldr	r3, [pc, #124]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006478:	691a      	ldr	r2, [r3, #16]
 800647a:	4b21      	ldr	r3, [pc, #132]	; (8006500 <RCCEx_PLLSAI1_Config+0x1e4>)
 800647c:	4013      	ands	r3, r2
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6892      	ldr	r2, [r2, #8]
 8006482:	0211      	lsls	r1, r2, #8
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	6952      	ldr	r2, [r2, #20]
 8006488:	0852      	lsrs	r2, r2, #1
 800648a:	3a01      	subs	r2, #1
 800648c:	0652      	lsls	r2, r2, #25
 800648e:	4311      	orrs	r1, r2
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6852      	ldr	r2, [r2, #4]
 8006494:	3a01      	subs	r2, #1
 8006496:	0112      	lsls	r2, r2, #4
 8006498:	430a      	orrs	r2, r1
 800649a:	4916      	ldr	r1, [pc, #88]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800649c:	4313      	orrs	r3, r2
 800649e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80064a0:	4b14      	ldr	r3, [pc, #80]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a13      	ldr	r2, [pc, #76]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ac:	f7fb fdb6 	bl	800201c <HAL_GetTick>
 80064b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80064b2:	e009      	b.n	80064c8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064b4:	f7fb fdb2 	bl	800201c <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d902      	bls.n	80064c8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	73fb      	strb	r3, [r7, #15]
          break;
 80064c6:	e005      	b.n	80064d4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80064c8:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0ef      	beq.n	80064b4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d106      	bne.n	80064e8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80064da:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064dc:	691a      	ldr	r2, [r3, #16]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	4904      	ldr	r1, [pc, #16]	; (80064f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	40021000 	.word	0x40021000
 80064f8:	07ff800f 	.word	0x07ff800f
 80064fc:	ff9f800f 	.word	0xff9f800f
 8006500:	f9ff800f 	.word	0xf9ff800f

08006504 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006512:	4b72      	ldr	r3, [pc, #456]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00e      	beq.n	800653c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800651e:	4b6f      	ldr	r3, [pc, #444]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f003 0203 	and.w	r2, r3, #3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d103      	bne.n	8006536 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
       ||
 8006532:	2b00      	cmp	r3, #0
 8006534:	d142      	bne.n	80065bc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	73fb      	strb	r3, [r7, #15]
 800653a:	e03f      	b.n	80065bc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b03      	cmp	r3, #3
 8006542:	d018      	beq.n	8006576 <RCCEx_PLLSAI2_Config+0x72>
 8006544:	2b03      	cmp	r3, #3
 8006546:	d825      	bhi.n	8006594 <RCCEx_PLLSAI2_Config+0x90>
 8006548:	2b01      	cmp	r3, #1
 800654a:	d002      	beq.n	8006552 <RCCEx_PLLSAI2_Config+0x4e>
 800654c:	2b02      	cmp	r3, #2
 800654e:	d009      	beq.n	8006564 <RCCEx_PLLSAI2_Config+0x60>
 8006550:	e020      	b.n	8006594 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006552:	4b62      	ldr	r3, [pc, #392]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d11d      	bne.n	800659a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006562:	e01a      	b.n	800659a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006564:	4b5d      	ldr	r3, [pc, #372]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800656c:	2b00      	cmp	r3, #0
 800656e:	d116      	bne.n	800659e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006574:	e013      	b.n	800659e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006576:	4b59      	ldr	r3, [pc, #356]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10f      	bne.n	80065a2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006582:	4b56      	ldr	r3, [pc, #344]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d109      	bne.n	80065a2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006592:	e006      	b.n	80065a2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	73fb      	strb	r3, [r7, #15]
      break;
 8006598:	e004      	b.n	80065a4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800659a:	bf00      	nop
 800659c:	e002      	b.n	80065a4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800659e:	bf00      	nop
 80065a0:	e000      	b.n	80065a4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80065a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d108      	bne.n	80065bc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80065aa:	4b4c      	ldr	r3, [pc, #304]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	f023 0203 	bic.w	r2, r3, #3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4949      	ldr	r1, [pc, #292]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f040 8086 	bne.w	80066d0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80065c4:	4b45      	ldr	r3, [pc, #276]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a44      	ldr	r2, [pc, #272]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80065ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065d0:	f7fb fd24 	bl	800201c <HAL_GetTick>
 80065d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80065d6:	e009      	b.n	80065ec <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80065d8:	f7fb fd20 	bl	800201c <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d902      	bls.n	80065ec <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	73fb      	strb	r3, [r7, #15]
        break;
 80065ea:	e005      	b.n	80065f8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80065ec:	4b3b      	ldr	r3, [pc, #236]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1ef      	bne.n	80065d8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d168      	bne.n	80066d0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d113      	bne.n	800662c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006604:	4b35      	ldr	r3, [pc, #212]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006606:	695a      	ldr	r2, [r3, #20]
 8006608:	4b35      	ldr	r3, [pc, #212]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1dc>)
 800660a:	4013      	ands	r3, r2
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6892      	ldr	r2, [r2, #8]
 8006610:	0211      	lsls	r1, r2, #8
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	68d2      	ldr	r2, [r2, #12]
 8006616:	06d2      	lsls	r2, r2, #27
 8006618:	4311      	orrs	r1, r2
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	6852      	ldr	r2, [r2, #4]
 800661e:	3a01      	subs	r2, #1
 8006620:	0112      	lsls	r2, r2, #4
 8006622:	430a      	orrs	r2, r1
 8006624:	492d      	ldr	r1, [pc, #180]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006626:	4313      	orrs	r3, r2
 8006628:	614b      	str	r3, [r1, #20]
 800662a:	e02d      	b.n	8006688 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d115      	bne.n	800665e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006632:	4b2a      	ldr	r3, [pc, #168]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006634:	695a      	ldr	r2, [r3, #20]
 8006636:	4b2b      	ldr	r3, [pc, #172]	; (80066e4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006638:	4013      	ands	r3, r2
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	6892      	ldr	r2, [r2, #8]
 800663e:	0211      	lsls	r1, r2, #8
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6912      	ldr	r2, [r2, #16]
 8006644:	0852      	lsrs	r2, r2, #1
 8006646:	3a01      	subs	r2, #1
 8006648:	0552      	lsls	r2, r2, #21
 800664a:	4311      	orrs	r1, r2
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6852      	ldr	r2, [r2, #4]
 8006650:	3a01      	subs	r2, #1
 8006652:	0112      	lsls	r2, r2, #4
 8006654:	430a      	orrs	r2, r1
 8006656:	4921      	ldr	r1, [pc, #132]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006658:	4313      	orrs	r3, r2
 800665a:	614b      	str	r3, [r1, #20]
 800665c:	e014      	b.n	8006688 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800665e:	4b1f      	ldr	r3, [pc, #124]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006660:	695a      	ldr	r2, [r3, #20]
 8006662:	4b21      	ldr	r3, [pc, #132]	; (80066e8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006664:	4013      	ands	r3, r2
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6892      	ldr	r2, [r2, #8]
 800666a:	0211      	lsls	r1, r2, #8
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6952      	ldr	r2, [r2, #20]
 8006670:	0852      	lsrs	r2, r2, #1
 8006672:	3a01      	subs	r2, #1
 8006674:	0652      	lsls	r2, r2, #25
 8006676:	4311      	orrs	r1, r2
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6852      	ldr	r2, [r2, #4]
 800667c:	3a01      	subs	r2, #1
 800667e:	0112      	lsls	r2, r2, #4
 8006680:	430a      	orrs	r2, r1
 8006682:	4916      	ldr	r1, [pc, #88]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006684:	4313      	orrs	r3, r2
 8006686:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006688:	4b14      	ldr	r3, [pc, #80]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a13      	ldr	r2, [pc, #76]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800668e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006692:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006694:	f7fb fcc2 	bl	800201c <HAL_GetTick>
 8006698:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800669a:	e009      	b.n	80066b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800669c:	f7fb fcbe 	bl	800201c <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d902      	bls.n	80066b0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	73fb      	strb	r3, [r7, #15]
          break;
 80066ae:	e005      	b.n	80066bc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80066b0:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d0ef      	beq.n	800669c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d106      	bne.n	80066d0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80066c2:	4b06      	ldr	r3, [pc, #24]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80066c4:	695a      	ldr	r2, [r3, #20]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	4904      	ldr	r1, [pc, #16]	; (80066dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40021000 	.word	0x40021000
 80066e0:	07ff800f 	.word	0x07ff800f
 80066e4:	ff9f800f 	.word	0xff9f800f
 80066e8:	f9ff800f 	.word	0xf9ff800f

080066ec <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b089      	sub	sp, #36	; 0x24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006708:	d10b      	bne.n	8006722 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800670a:	4b7e      	ldr	r3, [pc, #504]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800670c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006710:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006714:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	2b60      	cmp	r3, #96	; 0x60
 800671a:	d112      	bne.n	8006742 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800671c:	4b7a      	ldr	r3, [pc, #488]	; (8006908 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	e00f      	b.n	8006742 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006728:	d10b      	bne.n	8006742 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800672a:	4b76      	ldr	r3, [pc, #472]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800672c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006734:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800673c:	d101      	bne.n	8006742 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800673e:	4b72      	ldr	r3, [pc, #456]	; (8006908 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006740:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	2b00      	cmp	r3, #0
 8006746:	f040 80d6 	bne.w	80068f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	2b40      	cmp	r3, #64	; 0x40
 8006752:	d003      	beq.n	800675c <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800675a:	d13b      	bne.n	80067d4 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800675c:	4b69      	ldr	r3, [pc, #420]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006764:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006768:	f040 80c4 	bne.w	80068f4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800676c:	4b65      	ldr	r3, [pc, #404]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80bd 	beq.w	80068f4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800677a:	4b62      	ldr	r3, [pc, #392]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	091b      	lsrs	r3, r3, #4
 8006780:	f003 030f 	and.w	r3, r3, #15
 8006784:	3301      	adds	r3, #1
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	fbb2 f3f3 	udiv	r3, r2, r3
 800678c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800678e:	4b5d      	ldr	r3, [pc, #372]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	0a1b      	lsrs	r3, r3, #8
 8006794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006798:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800679a:	4b5a      	ldr	r3, [pc, #360]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	0edb      	lsrs	r3, r3, #27
 80067a0:	f003 031f 	and.w	r3, r3, #31
 80067a4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10a      	bne.n	80067c2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80067ac:	4b55      	ldr	r3, [pc, #340]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80067b8:	2311      	movs	r3, #17
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	e001      	b.n	80067c2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80067be:	2307      	movs	r3, #7
 80067c0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	fb03 f202 	mul.w	r2, r3, r2
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d0:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80067d2:	e08f      	b.n	80068f4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d13a      	bne.n	8006850 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80067da:	4b4a      	ldr	r3, [pc, #296]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067e6:	f040 8086 	bne.w	80068f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80067ea:	4b46      	ldr	r3, [pc, #280]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d07f      	beq.n	80068f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80067f6:	4b43      	ldr	r3, [pc, #268]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	091b      	lsrs	r3, r3, #4
 80067fc:	f003 030f 	and.w	r3, r3, #15
 8006800:	3301      	adds	r3, #1
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	fbb2 f3f3 	udiv	r3, r2, r3
 8006808:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800680a:	4b3e      	ldr	r3, [pc, #248]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	0a1b      	lsrs	r3, r3, #8
 8006810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006814:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006816:	4b3b      	ldr	r3, [pc, #236]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	0edb      	lsrs	r3, r3, #27
 800681c:	f003 031f 	and.w	r3, r3, #31
 8006820:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10a      	bne.n	800683e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006828:	4b36      	ldr	r3, [pc, #216]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006834:	2311      	movs	r3, #17
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	e001      	b.n	800683e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800683a:	2307      	movs	r3, #7
 800683c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	fb03 f202 	mul.w	r2, r3, r2
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	fbb2 f3f3 	udiv	r3, r2, r3
 800684c:	61fb      	str	r3, [r7, #28]
 800684e:	e052      	b.n	80068f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	2b80      	cmp	r3, #128	; 0x80
 8006854:	d003      	beq.n	800685e <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685c:	d109      	bne.n	8006872 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800685e:	4b29      	ldr	r3, [pc, #164]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800686a:	d144      	bne.n	80068f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800686c:	4b27      	ldr	r3, [pc, #156]	; (800690c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800686e:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006870:	e041      	b.n	80068f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	2b20      	cmp	r3, #32
 8006876:	d003      	beq.n	8006880 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800687e:	d13a      	bne.n	80068f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006880:	4b20      	ldr	r3, [pc, #128]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800688c:	d133      	bne.n	80068f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800688e:	4b1d      	ldr	r3, [pc, #116]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d02d      	beq.n	80068f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800689a:	4b1a      	ldr	r3, [pc, #104]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	091b      	lsrs	r3, r3, #4
 80068a0:	f003 030f 	and.w	r3, r3, #15
 80068a4:	3301      	adds	r3, #1
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ac:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80068ae:	4b15      	ldr	r3, [pc, #84]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	0a1b      	lsrs	r3, r3, #8
 80068b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80068ba:	4b12      	ldr	r3, [pc, #72]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	0edb      	lsrs	r3, r3, #27
 80068c0:	f003 031f 	and.w	r3, r3, #31
 80068c4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10a      	bne.n	80068e2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80068cc:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80068d8:	2311      	movs	r3, #17
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	e001      	b.n	80068e2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80068de:	2307      	movs	r3, #7
 80068e0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	fb03 f202 	mul.w	r2, r3, r2
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f0:	61fb      	str	r3, [r7, #28]
 80068f2:	e000      	b.n	80068f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80068f4:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80068f6:	69fb      	ldr	r3, [r7, #28]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3724      	adds	r7, #36	; 0x24
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	40021000 	.word	0x40021000
 8006908:	001fff68 	.word	0x001fff68
 800690c:	00f42400 	.word	0x00f42400

08006910 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
 800691c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2b02      	cmp	r3, #2
 8006922:	d904      	bls.n	800692e <HAL_SAI_InitProtocol+0x1e>
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	3b03      	subs	r3, #3
 8006928:	2b01      	cmp	r3, #1
 800692a:	d812      	bhi.n	8006952 <HAL_SAI_InitProtocol+0x42>
 800692c:	e008      	b.n	8006940 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	68b9      	ldr	r1, [r7, #8]
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 f9fb 	bl	8006d30 <SAI_InitI2S>
 800693a:	4603      	mov	r3, r0
 800693c:	75fb      	strb	r3, [r7, #23]
      break;
 800693e:	e00b      	b.n	8006958 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 faa4 	bl	8006e94 <SAI_InitPCM>
 800694c:	4603      	mov	r3, r0
 800694e:	75fb      	strb	r3, [r7, #23]
      break;
 8006950:	e002      	b.n	8006958 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	75fb      	strb	r3, [r7, #23]
      break;
 8006956:	bf00      	nop
  }

  if (status == HAL_OK)
 8006958:	7dfb      	ldrb	r3, [r7, #23]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d104      	bne.n	8006968 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 f808 	bl	8006974 <HAL_SAI_Init>
 8006964:	4603      	mov	r3, r0
 8006966:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006968:	7dfb      	ldrb	r3, [r7, #23]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08a      	sub	sp, #40	; 0x28
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e1c7      	b.n	8006d16 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800698c:	2b01      	cmp	r3, #1
 800698e:	d10e      	bne.n	80069ae <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a81      	ldr	r2, [pc, #516]	; (8006b9c <HAL_SAI_Init+0x228>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d107      	bne.n	80069aa <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d103      	bne.n	80069aa <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e1b3      	b.n	8006d16 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d106      	bne.n	80069c8 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7fb fa06 	bl	8001dd4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fae5 	bl	8006f98 <SAI_Disable>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e19e      	b.n	8006d16 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d00c      	beq.n	8006a02 <HAL_SAI_Init+0x8e>
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d80d      	bhi.n	8006a08 <HAL_SAI_Init+0x94>
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <HAL_SAI_Init+0x82>
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d003      	beq.n	80069fc <HAL_SAI_Init+0x88>
 80069f4:	e008      	b.n	8006a08 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80069fa:	e008      	b.n	8006a0e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80069fc:	2310      	movs	r3, #16
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006a00:	e005      	b.n	8006a0e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006a02:	2320      	movs	r3, #32
 8006a04:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006a06:	e002      	b.n	8006a0e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006a0c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d81d      	bhi.n	8006a52 <HAL_SAI_Init+0xde>
 8006a16:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <HAL_SAI_Init+0xa8>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a2d 	.word	0x08006a2d
 8006a20:	08006a33 	.word	0x08006a33
 8006a24:	08006a3b 	.word	0x08006a3b
 8006a28:	08006a43 	.word	0x08006a43
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	61fb      	str	r3, [r7, #28]
      break;
 8006a30:	e012      	b.n	8006a58 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a36:	61fb      	str	r3, [r7, #28]
      break;
 8006a38:	e00e      	b.n	8006a58 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006a3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a3e:	61fb      	str	r3, [r7, #28]
      break;
 8006a40:	e00a      	b.n	8006a58 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006a42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a46:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	f043 0301 	orr.w	r3, r3, #1
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006a50:	e002      	b.n	8006a58 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	61fb      	str	r3, [r7, #28]
      break;
 8006a56:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a4f      	ldr	r2, [pc, #316]	; (8006b9c <HAL_SAI_Init+0x228>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d004      	beq.n	8006a6c <HAL_SAI_Init+0xf8>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a4e      	ldr	r2, [pc, #312]	; (8006ba0 <HAL_SAI_Init+0x22c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d103      	bne.n	8006a74 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8006a6c:	4a4d      	ldr	r2, [pc, #308]	; (8006ba4 <HAL_SAI_Init+0x230>)
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	e002      	b.n	8006a7a <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006a74:	4a4c      	ldr	r2, [pc, #304]	; (8006ba8 <HAL_SAI_Init+0x234>)
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d073      	beq.n	8006b6a <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a45      	ldr	r2, [pc, #276]	; (8006b9c <HAL_SAI_Init+0x228>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d004      	beq.n	8006a96 <HAL_SAI_Init+0x122>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a43      	ldr	r2, [pc, #268]	; (8006ba0 <HAL_SAI_Init+0x22c>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d105      	bne.n	8006aa2 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006a96:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006a9a:	f7fe fd1d 	bl	80054d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a9e:	61b8      	str	r0, [r7, #24]
 8006aa0:	e004      	b.n	8006aac <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006aa2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006aa6:	f7fe fd17 	bl	80054d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006aaa:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ab4:	d120      	bne.n	8006af8 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d102      	bne.n	8006ac4 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8006abe:	2340      	movs	r3, #64	; 0x40
 8006ac0:	613b      	str	r3, [r7, #16]
 8006ac2:	e00a      	b.n	8006ada <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d103      	bne.n	8006ad4 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8006acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	e002      	b.n	8006ada <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad8:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	fb02 f303 	mul.w	r3, r2, r3
 8006af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	e017      	b.n	8006b28 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b00:	d101      	bne.n	8006b06 <HAL_SAI_Init+0x192>
 8006b02:	2302      	movs	r3, #2
 8006b04:	e000      	b.n	8006b08 <HAL_SAI_Init+0x194>
 8006b06:	2301      	movs	r3, #1
 8006b08:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	4619      	mov	r1, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	fb02 f303 	mul.w	r3, r2, r3
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b26:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	4a20      	ldr	r2, [pc, #128]	; (8006bac <HAL_SAI_Init+0x238>)
 8006b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b30:	08da      	lsrs	r2, r3, #3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006b36:	6979      	ldr	r1, [r7, #20]
 8006b38:	4b1c      	ldr	r3, [pc, #112]	; (8006bac <HAL_SAI_Init+0x238>)
 8006b3a:	fba3 2301 	umull	r2, r3, r3, r1
 8006b3e:	08da      	lsrs	r2, r3, #3
 8006b40:	4613      	mov	r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	1aca      	subs	r2, r1, r3
 8006b4a:	2a08      	cmp	r2, #8
 8006b4c:	d904      	bls.n	8006b58 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d104      	bne.n	8006b6a <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	085a      	lsrs	r2, r3, #1
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <HAL_SAI_Init+0x206>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d109      	bne.n	8006b8e <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d101      	bne.n	8006b86 <HAL_SAI_Init+0x212>
 8006b82:	2300      	movs	r3, #0
 8006b84:	e001      	b.n	8006b8a <HAL_SAI_Init+0x216>
 8006b86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b8a:	623b      	str	r3, [r7, #32]
 8006b8c:	e012      	b.n	8006bb4 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d10c      	bne.n	8006bb0 <HAL_SAI_Init+0x23c>
 8006b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b9a:	e00a      	b.n	8006bb2 <HAL_SAI_Init+0x23e>
 8006b9c:	40015404 	.word	0x40015404
 8006ba0:	40015424 	.word	0x40015424
 8006ba4:	40015400 	.word	0x40015400
 8006ba8:	40015800 	.word	0x40015800
 8006bac:	cccccccd 	.word	0xcccccccd
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6819      	ldr	r1, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	4b58      	ldr	r3, [pc, #352]	; (8006d20 <HAL_SAI_Init+0x3ac>)
 8006bc0:	400b      	ands	r3, r1
 8006bc2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6819      	ldr	r1, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006bd8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bde:	431a      	orrs	r2, r3
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8006bec:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006bf8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	051b      	lsls	r3, r3, #20
 8006c00:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006c06:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	6812      	ldr	r2, [r2, #0]
 8006c1a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006c1e:	f023 030f 	bic.w	r3, r3, #15
 8006c22:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6859      	ldr	r1, [r3, #4]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6899      	ldr	r1, [r3, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	4b35      	ldr	r3, [pc, #212]	; (8006d24 <HAL_SAI_Init+0x3b0>)
 8006c4e:	400b      	ands	r3, r1
 8006c50:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6899      	ldr	r1, [r3, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c5c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006c62:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8006c68:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8006c6e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c74:	3b01      	subs	r3, #1
 8006c76:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006c78:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68d9      	ldr	r1, [r3, #12]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006c90:	400b      	ands	r3, r1
 8006c92:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68d9      	ldr	r1, [r3, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ca2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006caa:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	021b      	lsls	r3, r3, #8
 8006cb4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a19      	ldr	r2, [pc, #100]	; (8006d28 <HAL_SAI_Init+0x3b4>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d119      	bne.n	8006cfc <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006cc8:	4b18      	ldr	r3, [pc, #96]	; (8006d2c <HAL_SAI_Init+0x3b8>)
 8006cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ccc:	4a17      	ldr	r2, [pc, #92]	; (8006d2c <HAL_SAI_Init+0x3b8>)
 8006cce:	f023 0301 	bic.w	r3, r3, #1
 8006cd2:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d10e      	bne.n	8006cfc <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006cea:	4910      	ldr	r1, [pc, #64]	; (8006d2c <HAL_SAI_Init+0x3b8>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006cf0:	4b0e      	ldr	r3, [pc, #56]	; (8006d2c <HAL_SAI_Init+0x3b8>)
 8006cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf4:	4a0d      	ldr	r2, [pc, #52]	; (8006d2c <HAL_SAI_Init+0x3b8>)
 8006cf6:	f043 0301 	orr.w	r3, r3, #1
 8006cfa:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3728      	adds	r7, #40	; 0x28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	f805c010 	.word	0xf805c010
 8006d24:	fff88000 	.word	0xfff88000
 8006d28:	40015404 	.word	0x40015404
 8006d2c:	40015400 	.word	0x40015400

08006d30 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <SAI_InitI2S+0x2e>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d103      	bne.n	8006d66 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	64da      	str	r2, [r3, #76]	; 0x4c
 8006d64:	e002      	b.n	8006d6c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006d72:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d7a:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e077      	b.n	8006e86 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d107      	bne.n	8006dac <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006da8:	661a      	str	r2, [r3, #96]	; 0x60
 8006daa:	e006      	b.n	8006dba <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006db2:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d84f      	bhi.n	8006e60 <SAI_InitI2S+0x130>
 8006dc0:	a201      	add	r2, pc, #4	; (adr r2, 8006dc8 <SAI_InitI2S+0x98>)
 8006dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc6:	bf00      	nop
 8006dc8:	08006dd9 	.word	0x08006dd9
 8006dcc:	08006dfb 	.word	0x08006dfb
 8006dd0:	08006e1d 	.word	0x08006e1d
 8006dd4:	08006e3f 	.word	0x08006e3f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2280      	movs	r2, #128	; 0x80
 8006ddc:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	085b      	lsrs	r3, r3, #1
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	085b      	lsrs	r3, r3, #1
 8006dec:	011a      	lsls	r2, r3, #4
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2240      	movs	r2, #64	; 0x40
 8006df6:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006df8:	e035      	b.n	8006e66 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2280      	movs	r2, #128	; 0x80
 8006dfe:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	085b      	lsrs	r3, r3, #1
 8006e04:	019a      	lsls	r2, r3, #6
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	085b      	lsrs	r3, r3, #1
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2280      	movs	r2, #128	; 0x80
 8006e18:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006e1a:	e024      	b.n	8006e66 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	22c0      	movs	r2, #192	; 0xc0
 8006e20:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	085b      	lsrs	r3, r3, #1
 8006e26:	019a      	lsls	r2, r3, #6
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	085b      	lsrs	r3, r3, #1
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2280      	movs	r2, #128	; 0x80
 8006e3a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006e3c:	e013      	b.n	8006e66 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	22e0      	movs	r2, #224	; 0xe0
 8006e42:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	085b      	lsrs	r3, r3, #1
 8006e48:	019a      	lsls	r2, r3, #6
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	085b      	lsrs	r3, r3, #1
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2280      	movs	r2, #128	; 0x80
 8006e5c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006e5e:	e002      	b.n	8006e66 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	75fb      	strb	r3, [r7, #23]
      break;
 8006e64:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d10b      	bne.n	8006e84 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d102      	bne.n	8006e78 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2210      	movs	r2, #16
 8006e76:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d102      	bne.n	8006e84 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2208      	movs	r2, #8
 8006e82:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop

08006e94 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <SAI_InitPCM+0x2e>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d103      	bne.n	8006eca <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	64da      	str	r2, [r3, #76]	; 0x4c
 8006ec8:	e002      	b.n	8006ed0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006edc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006ee4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ef8:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2b04      	cmp	r3, #4
 8006efe:	d103      	bne.n	8006f08 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2201      	movs	r2, #1
 8006f04:	655a      	str	r2, [r3, #84]	; 0x54
 8006f06:	e002      	b.n	8006f0e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	220d      	movs	r2, #13
 8006f0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d837      	bhi.n	8006f84 <SAI_InitPCM+0xf0>
 8006f14:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <SAI_InitPCM+0x88>)
 8006f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1a:	bf00      	nop
 8006f1c:	08006f2d 	.word	0x08006f2d
 8006f20:	08006f43 	.word	0x08006f43
 8006f24:	08006f59 	.word	0x08006f59
 8006f28:	08006f6f 	.word	0x08006f6f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2280      	movs	r2, #128	; 0x80
 8006f30:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	011a      	lsls	r2, r3, #4
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2240      	movs	r2, #64	; 0x40
 8006f3e:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006f40:	e023      	b.n	8006f8a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2280      	movs	r2, #128	; 0x80
 8006f46:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2280      	movs	r2, #128	; 0x80
 8006f54:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006f56:	e018      	b.n	8006f8a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	22c0      	movs	r2, #192	; 0xc0
 8006f5c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2280      	movs	r2, #128	; 0x80
 8006f6a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006f6c:	e00d      	b.n	8006f8a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	22e0      	movs	r2, #224	; 0xe0
 8006f72:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2280      	movs	r2, #128	; 0x80
 8006f80:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006f82:	e002      	b.n	8006f8a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	75fb      	strb	r3, [r7, #23]
      break;
 8006f88:	bf00      	nop
  }

  return status;
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	371c      	adds	r7, #28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006fa0:	4b18      	ldr	r3, [pc, #96]	; (8007004 <SAI_Disable+0x6c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a18      	ldr	r2, [pc, #96]	; (8007008 <SAI_Disable+0x70>)
 8006fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006faa:	0b1b      	lsrs	r3, r3, #12
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006fc2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10a      	bne.n	8006fe0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	72fb      	strb	r3, [r7, #11]
      break;
 8006fde:	e009      	b.n	8006ff4 <SAI_Disable+0x5c>
    }
    count--;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e7      	bne.n	8006fc4 <SAI_Disable+0x2c>

  return status;
 8006ff4:	7afb      	ldrb	r3, [r7, #11]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	20000000 	.word	0x20000000
 8007008:	95cbec1b 	.word	0x95cbec1b

0800700c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e049      	b.n	80070b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d106      	bne.n	8007038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fa fe40 	bl	8001cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3304      	adds	r3, #4
 8007048:	4619      	mov	r1, r3
 800704a:	4610      	mov	r0, r2
 800704c:	f000 fa4c 	bl	80074e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d001      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e04f      	b.n	8007174 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f042 0201 	orr.w	r2, r2, #1
 80070ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a23      	ldr	r2, [pc, #140]	; (8007180 <HAL_TIM_Base_Start_IT+0xc4>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d01d      	beq.n	8007132 <HAL_TIM_Base_Start_IT+0x76>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070fe:	d018      	beq.n	8007132 <HAL_TIM_Base_Start_IT+0x76>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1f      	ldr	r2, [pc, #124]	; (8007184 <HAL_TIM_Base_Start_IT+0xc8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d013      	beq.n	8007132 <HAL_TIM_Base_Start_IT+0x76>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a1e      	ldr	r2, [pc, #120]	; (8007188 <HAL_TIM_Base_Start_IT+0xcc>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00e      	beq.n	8007132 <HAL_TIM_Base_Start_IT+0x76>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a1c      	ldr	r2, [pc, #112]	; (800718c <HAL_TIM_Base_Start_IT+0xd0>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d009      	beq.n	8007132 <HAL_TIM_Base_Start_IT+0x76>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a1b      	ldr	r2, [pc, #108]	; (8007190 <HAL_TIM_Base_Start_IT+0xd4>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d004      	beq.n	8007132 <HAL_TIM_Base_Start_IT+0x76>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a19      	ldr	r2, [pc, #100]	; (8007194 <HAL_TIM_Base_Start_IT+0xd8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d115      	bne.n	800715e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	4b17      	ldr	r3, [pc, #92]	; (8007198 <HAL_TIM_Base_Start_IT+0xdc>)
 800713a:	4013      	ands	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b06      	cmp	r3, #6
 8007142:	d015      	beq.n	8007170 <HAL_TIM_Base_Start_IT+0xb4>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800714a:	d011      	beq.n	8007170 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0201 	orr.w	r2, r2, #1
 800715a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715c:	e008      	b.n	8007170 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f042 0201 	orr.w	r2, r2, #1
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	e000      	b.n	8007172 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007170:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	40012c00 	.word	0x40012c00
 8007184:	40000400 	.word	0x40000400
 8007188:	40000800 	.word	0x40000800
 800718c:	40000c00 	.word	0x40000c00
 8007190:	40013400 	.word	0x40013400
 8007194:	40014000 	.word	0x40014000
 8007198:	00010007 	.word	0x00010007

0800719c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e049      	b.n	8007242 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d106      	bne.n	80071c8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f841 	bl	800724a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3304      	adds	r3, #4
 80071d8:	4619      	mov	r1, r3
 80071da:	4610      	mov	r0, r2
 80071dc:	f000 f984 	bl	80074e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
	...

08007260 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007276:	2b01      	cmp	r3, #1
 8007278:	d101      	bne.n	800727e <HAL_TIM_OC_ConfigChannel+0x1e>
 800727a:	2302      	movs	r3, #2
 800727c:	e066      	b.n	800734c <HAL_TIM_OC_ConfigChannel+0xec>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b14      	cmp	r3, #20
 800728a:	d857      	bhi.n	800733c <HAL_TIM_OC_ConfigChannel+0xdc>
 800728c:	a201      	add	r2, pc, #4	; (adr r2, 8007294 <HAL_TIM_OC_ConfigChannel+0x34>)
 800728e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007292:	bf00      	nop
 8007294:	080072e9 	.word	0x080072e9
 8007298:	0800733d 	.word	0x0800733d
 800729c:	0800733d 	.word	0x0800733d
 80072a0:	0800733d 	.word	0x0800733d
 80072a4:	080072f7 	.word	0x080072f7
 80072a8:	0800733d 	.word	0x0800733d
 80072ac:	0800733d 	.word	0x0800733d
 80072b0:	0800733d 	.word	0x0800733d
 80072b4:	08007305 	.word	0x08007305
 80072b8:	0800733d 	.word	0x0800733d
 80072bc:	0800733d 	.word	0x0800733d
 80072c0:	0800733d 	.word	0x0800733d
 80072c4:	08007313 	.word	0x08007313
 80072c8:	0800733d 	.word	0x0800733d
 80072cc:	0800733d 	.word	0x0800733d
 80072d0:	0800733d 	.word	0x0800733d
 80072d4:	08007321 	.word	0x08007321
 80072d8:	0800733d 	.word	0x0800733d
 80072dc:	0800733d 	.word	0x0800733d
 80072e0:	0800733d 	.word	0x0800733d
 80072e4:	0800732f 	.word	0x0800732f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68b9      	ldr	r1, [r7, #8]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 f994 	bl	800761c <TIM_OC1_SetConfig>
      break;
 80072f4:	e025      	b.n	8007342 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68b9      	ldr	r1, [r7, #8]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 fa1d 	bl	800773c <TIM_OC2_SetConfig>
      break;
 8007302:	e01e      	b.n	8007342 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68b9      	ldr	r1, [r7, #8]
 800730a:	4618      	mov	r0, r3
 800730c:	f000 faa0 	bl	8007850 <TIM_OC3_SetConfig>
      break;
 8007310:	e017      	b.n	8007342 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68b9      	ldr	r1, [r7, #8]
 8007318:	4618      	mov	r0, r3
 800731a:	f000 fb21 	bl	8007960 <TIM_OC4_SetConfig>
      break;
 800731e:	e010      	b.n	8007342 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68b9      	ldr	r1, [r7, #8]
 8007326:	4618      	mov	r0, r3
 8007328:	f000 fb84 	bl	8007a34 <TIM_OC5_SetConfig>
      break;
 800732c:	e009      	b.n	8007342 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68b9      	ldr	r1, [r7, #8]
 8007334:	4618      	mov	r0, r3
 8007336:	f000 fbe1 	bl	8007afc <TIM_OC6_SetConfig>
      break;
 800733a:	e002      	b.n	8007342 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	75fb      	strb	r3, [r7, #23]
      break;
 8007340:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800734a:	7dfb      	ldrb	r3, [r7, #23]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <HAL_TIM_ConfigClockSource+0x1c>
 800736c:	2302      	movs	r3, #2
 800736e:	e0b6      	b.n	80074de <HAL_TIM_ConfigClockSource+0x18a>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2202      	movs	r2, #2
 800737c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800738e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800739a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ac:	d03e      	beq.n	800742c <HAL_TIM_ConfigClockSource+0xd8>
 80073ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073b2:	f200 8087 	bhi.w	80074c4 <HAL_TIM_ConfigClockSource+0x170>
 80073b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ba:	f000 8086 	beq.w	80074ca <HAL_TIM_ConfigClockSource+0x176>
 80073be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c2:	d87f      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x170>
 80073c4:	2b70      	cmp	r3, #112	; 0x70
 80073c6:	d01a      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0xaa>
 80073c8:	2b70      	cmp	r3, #112	; 0x70
 80073ca:	d87b      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x170>
 80073cc:	2b60      	cmp	r3, #96	; 0x60
 80073ce:	d050      	beq.n	8007472 <HAL_TIM_ConfigClockSource+0x11e>
 80073d0:	2b60      	cmp	r3, #96	; 0x60
 80073d2:	d877      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x170>
 80073d4:	2b50      	cmp	r3, #80	; 0x50
 80073d6:	d03c      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0xfe>
 80073d8:	2b50      	cmp	r3, #80	; 0x50
 80073da:	d873      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x170>
 80073dc:	2b40      	cmp	r3, #64	; 0x40
 80073de:	d058      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0x13e>
 80073e0:	2b40      	cmp	r3, #64	; 0x40
 80073e2:	d86f      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x170>
 80073e4:	2b30      	cmp	r3, #48	; 0x30
 80073e6:	d064      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x15e>
 80073e8:	2b30      	cmp	r3, #48	; 0x30
 80073ea:	d86b      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x170>
 80073ec:	2b20      	cmp	r3, #32
 80073ee:	d060      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x15e>
 80073f0:	2b20      	cmp	r3, #32
 80073f2:	d867      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x170>
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d05c      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x15e>
 80073f8:	2b10      	cmp	r3, #16
 80073fa:	d05a      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x15e>
 80073fc:	e062      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800740e:	f000 fc55 	bl	8007cbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	609a      	str	r2, [r3, #8]
      break;
 800742a:	e04f      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800743c:	f000 fc3e 	bl	8007cbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800744e:	609a      	str	r2, [r3, #8]
      break;
 8007450:	e03c      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800745e:	461a      	mov	r2, r3
 8007460:	f000 fbb2 	bl	8007bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2150      	movs	r1, #80	; 0x50
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fc0b 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 8007470:	e02c      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800747e:	461a      	mov	r2, r3
 8007480:	f000 fbd1 	bl	8007c26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2160      	movs	r1, #96	; 0x60
 800748a:	4618      	mov	r0, r3
 800748c:	f000 fbfb 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 8007490:	e01c      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800749e:	461a      	mov	r2, r3
 80074a0:	f000 fb92 	bl	8007bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2140      	movs	r1, #64	; 0x40
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fbeb 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 80074b0:	e00c      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4619      	mov	r1, r3
 80074bc:	4610      	mov	r0, r2
 80074be:	f000 fbe2 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 80074c2:	e003      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	73fb      	strb	r3, [r7, #15]
      break;
 80074c8:	e000      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80074ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
	...

080074e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a40      	ldr	r2, [pc, #256]	; (80075fc <TIM_Base_SetConfig+0x114>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d013      	beq.n	8007528 <TIM_Base_SetConfig+0x40>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007506:	d00f      	beq.n	8007528 <TIM_Base_SetConfig+0x40>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a3d      	ldr	r2, [pc, #244]	; (8007600 <TIM_Base_SetConfig+0x118>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d00b      	beq.n	8007528 <TIM_Base_SetConfig+0x40>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a3c      	ldr	r2, [pc, #240]	; (8007604 <TIM_Base_SetConfig+0x11c>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d007      	beq.n	8007528 <TIM_Base_SetConfig+0x40>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a3b      	ldr	r2, [pc, #236]	; (8007608 <TIM_Base_SetConfig+0x120>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d003      	beq.n	8007528 <TIM_Base_SetConfig+0x40>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a3a      	ldr	r2, [pc, #232]	; (800760c <TIM_Base_SetConfig+0x124>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d108      	bne.n	800753a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	4313      	orrs	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a2f      	ldr	r2, [pc, #188]	; (80075fc <TIM_Base_SetConfig+0x114>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d01f      	beq.n	8007582 <TIM_Base_SetConfig+0x9a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007548:	d01b      	beq.n	8007582 <TIM_Base_SetConfig+0x9a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a2c      	ldr	r2, [pc, #176]	; (8007600 <TIM_Base_SetConfig+0x118>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d017      	beq.n	8007582 <TIM_Base_SetConfig+0x9a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a2b      	ldr	r2, [pc, #172]	; (8007604 <TIM_Base_SetConfig+0x11c>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d013      	beq.n	8007582 <TIM_Base_SetConfig+0x9a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a2a      	ldr	r2, [pc, #168]	; (8007608 <TIM_Base_SetConfig+0x120>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d00f      	beq.n	8007582 <TIM_Base_SetConfig+0x9a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a29      	ldr	r2, [pc, #164]	; (800760c <TIM_Base_SetConfig+0x124>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d00b      	beq.n	8007582 <TIM_Base_SetConfig+0x9a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a28      	ldr	r2, [pc, #160]	; (8007610 <TIM_Base_SetConfig+0x128>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d007      	beq.n	8007582 <TIM_Base_SetConfig+0x9a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a27      	ldr	r2, [pc, #156]	; (8007614 <TIM_Base_SetConfig+0x12c>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d003      	beq.n	8007582 <TIM_Base_SetConfig+0x9a>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a26      	ldr	r2, [pc, #152]	; (8007618 <TIM_Base_SetConfig+0x130>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d108      	bne.n	8007594 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	4313      	orrs	r3, r2
 8007592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	4313      	orrs	r3, r2
 80075a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a10      	ldr	r2, [pc, #64]	; (80075fc <TIM_Base_SetConfig+0x114>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00f      	beq.n	80075e0 <TIM_Base_SetConfig+0xf8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a12      	ldr	r2, [pc, #72]	; (800760c <TIM_Base_SetConfig+0x124>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d00b      	beq.n	80075e0 <TIM_Base_SetConfig+0xf8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a11      	ldr	r2, [pc, #68]	; (8007610 <TIM_Base_SetConfig+0x128>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d007      	beq.n	80075e0 <TIM_Base_SetConfig+0xf8>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a10      	ldr	r2, [pc, #64]	; (8007614 <TIM_Base_SetConfig+0x12c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d003      	beq.n	80075e0 <TIM_Base_SetConfig+0xf8>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a0f      	ldr	r2, [pc, #60]	; (8007618 <TIM_Base_SetConfig+0x130>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d103      	bne.n	80075e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	691a      	ldr	r2, [r3, #16]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	615a      	str	r2, [r3, #20]
}
 80075ee:	bf00      	nop
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	40012c00 	.word	0x40012c00
 8007600:	40000400 	.word	0x40000400
 8007604:	40000800 	.word	0x40000800
 8007608:	40000c00 	.word	0x40000c00
 800760c:	40013400 	.word	0x40013400
 8007610:	40014000 	.word	0x40014000
 8007614:	40014400 	.word	0x40014400
 8007618:	40014800 	.word	0x40014800

0800761c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a1b      	ldr	r3, [r3, #32]
 8007630:	f023 0201 	bic.w	r2, r3, #1
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800764a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0303 	bic.w	r3, r3, #3
 8007656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f023 0302 	bic.w	r3, r3, #2
 8007668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	4313      	orrs	r3, r2
 8007672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a2c      	ldr	r2, [pc, #176]	; (8007728 <TIM_OC1_SetConfig+0x10c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00f      	beq.n	800769c <TIM_OC1_SetConfig+0x80>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a2b      	ldr	r2, [pc, #172]	; (800772c <TIM_OC1_SetConfig+0x110>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d00b      	beq.n	800769c <TIM_OC1_SetConfig+0x80>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a2a      	ldr	r2, [pc, #168]	; (8007730 <TIM_OC1_SetConfig+0x114>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d007      	beq.n	800769c <TIM_OC1_SetConfig+0x80>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a29      	ldr	r2, [pc, #164]	; (8007734 <TIM_OC1_SetConfig+0x118>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d003      	beq.n	800769c <TIM_OC1_SetConfig+0x80>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a28      	ldr	r2, [pc, #160]	; (8007738 <TIM_OC1_SetConfig+0x11c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d10c      	bne.n	80076b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f023 0308 	bic.w	r3, r3, #8
 80076a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f023 0304 	bic.w	r3, r3, #4
 80076b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a1b      	ldr	r2, [pc, #108]	; (8007728 <TIM_OC1_SetConfig+0x10c>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d00f      	beq.n	80076de <TIM_OC1_SetConfig+0xc2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a1a      	ldr	r2, [pc, #104]	; (800772c <TIM_OC1_SetConfig+0x110>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d00b      	beq.n	80076de <TIM_OC1_SetConfig+0xc2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a19      	ldr	r2, [pc, #100]	; (8007730 <TIM_OC1_SetConfig+0x114>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d007      	beq.n	80076de <TIM_OC1_SetConfig+0xc2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a18      	ldr	r2, [pc, #96]	; (8007734 <TIM_OC1_SetConfig+0x118>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d003      	beq.n	80076de <TIM_OC1_SetConfig+0xc2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a17      	ldr	r2, [pc, #92]	; (8007738 <TIM_OC1_SetConfig+0x11c>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d111      	bne.n	8007702 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	4313      	orrs	r3, r2
 8007700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	621a      	str	r2, [r3, #32]
}
 800771c:	bf00      	nop
 800771e:	371c      	adds	r7, #28
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	40012c00 	.word	0x40012c00
 800772c:	40013400 	.word	0x40013400
 8007730:	40014000 	.word	0x40014000
 8007734:	40014400 	.word	0x40014400
 8007738:	40014800 	.word	0x40014800

0800773c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800773c:	b480      	push	{r7}
 800773e:	b087      	sub	sp, #28
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	f023 0210 	bic.w	r2, r3, #16
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800776a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800776e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f023 0320 	bic.w	r3, r3, #32
 800778a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	011b      	lsls	r3, r3, #4
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	4313      	orrs	r3, r2
 8007796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a28      	ldr	r2, [pc, #160]	; (800783c <TIM_OC2_SetConfig+0x100>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d003      	beq.n	80077a8 <TIM_OC2_SetConfig+0x6c>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a27      	ldr	r2, [pc, #156]	; (8007840 <TIM_OC2_SetConfig+0x104>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d10d      	bne.n	80077c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	011b      	lsls	r3, r3, #4
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a1d      	ldr	r2, [pc, #116]	; (800783c <TIM_OC2_SetConfig+0x100>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d00f      	beq.n	80077ec <TIM_OC2_SetConfig+0xb0>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a1c      	ldr	r2, [pc, #112]	; (8007840 <TIM_OC2_SetConfig+0x104>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d00b      	beq.n	80077ec <TIM_OC2_SetConfig+0xb0>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a1b      	ldr	r2, [pc, #108]	; (8007844 <TIM_OC2_SetConfig+0x108>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d007      	beq.n	80077ec <TIM_OC2_SetConfig+0xb0>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a1a      	ldr	r2, [pc, #104]	; (8007848 <TIM_OC2_SetConfig+0x10c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d003      	beq.n	80077ec <TIM_OC2_SetConfig+0xb0>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a19      	ldr	r2, [pc, #100]	; (800784c <TIM_OC2_SetConfig+0x110>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d113      	bne.n	8007814 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	4313      	orrs	r3, r2
 8007806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	4313      	orrs	r3, r2
 8007812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	621a      	str	r2, [r3, #32]
}
 800782e:	bf00      	nop
 8007830:	371c      	adds	r7, #28
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	40012c00 	.word	0x40012c00
 8007840:	40013400 	.word	0x40013400
 8007844:	40014000 	.word	0x40014000
 8007848:	40014400 	.word	0x40014400
 800784c:	40014800 	.word	0x40014800

08007850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800787e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 0303 	bic.w	r3, r3, #3
 800788a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	4313      	orrs	r3, r2
 8007894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800789c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	021b      	lsls	r3, r3, #8
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a27      	ldr	r2, [pc, #156]	; (800794c <TIM_OC3_SetConfig+0xfc>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d003      	beq.n	80078ba <TIM_OC3_SetConfig+0x6a>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a26      	ldr	r2, [pc, #152]	; (8007950 <TIM_OC3_SetConfig+0x100>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d10d      	bne.n	80078d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	021b      	lsls	r3, r3, #8
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a1c      	ldr	r2, [pc, #112]	; (800794c <TIM_OC3_SetConfig+0xfc>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d00f      	beq.n	80078fe <TIM_OC3_SetConfig+0xae>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a1b      	ldr	r2, [pc, #108]	; (8007950 <TIM_OC3_SetConfig+0x100>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d00b      	beq.n	80078fe <TIM_OC3_SetConfig+0xae>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a1a      	ldr	r2, [pc, #104]	; (8007954 <TIM_OC3_SetConfig+0x104>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d007      	beq.n	80078fe <TIM_OC3_SetConfig+0xae>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a19      	ldr	r2, [pc, #100]	; (8007958 <TIM_OC3_SetConfig+0x108>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d003      	beq.n	80078fe <TIM_OC3_SetConfig+0xae>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a18      	ldr	r2, [pc, #96]	; (800795c <TIM_OC3_SetConfig+0x10c>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d113      	bne.n	8007926 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800790c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	011b      	lsls	r3, r3, #4
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	4313      	orrs	r3, r2
 8007918:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	011b      	lsls	r3, r3, #4
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	4313      	orrs	r3, r2
 8007924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	621a      	str	r2, [r3, #32]
}
 8007940:	bf00      	nop
 8007942:	371c      	adds	r7, #28
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	40012c00 	.word	0x40012c00
 8007950:	40013400 	.word	0x40013400
 8007954:	40014000 	.word	0x40014000
 8007958:	40014400 	.word	0x40014400
 800795c:	40014800 	.word	0x40014800

08007960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a1b      	ldr	r3, [r3, #32]
 8007974:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800798e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800799a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	021b      	lsls	r3, r3, #8
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	031b      	lsls	r3, r3, #12
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a18      	ldr	r2, [pc, #96]	; (8007a20 <TIM_OC4_SetConfig+0xc0>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d00f      	beq.n	80079e4 <TIM_OC4_SetConfig+0x84>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a17      	ldr	r2, [pc, #92]	; (8007a24 <TIM_OC4_SetConfig+0xc4>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d00b      	beq.n	80079e4 <TIM_OC4_SetConfig+0x84>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a16      	ldr	r2, [pc, #88]	; (8007a28 <TIM_OC4_SetConfig+0xc8>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d007      	beq.n	80079e4 <TIM_OC4_SetConfig+0x84>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a15      	ldr	r2, [pc, #84]	; (8007a2c <TIM_OC4_SetConfig+0xcc>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d003      	beq.n	80079e4 <TIM_OC4_SetConfig+0x84>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a14      	ldr	r2, [pc, #80]	; (8007a30 <TIM_OC4_SetConfig+0xd0>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d109      	bne.n	80079f8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	019b      	lsls	r3, r3, #6
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	621a      	str	r2, [r3, #32]
}
 8007a12:	bf00      	nop
 8007a14:	371c      	adds	r7, #28
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	40012c00 	.word	0x40012c00
 8007a24:	40013400 	.word	0x40013400
 8007a28:	40014000 	.word	0x40014000
 8007a2c:	40014400 	.word	0x40014400
 8007a30:	40014800 	.word	0x40014800

08007a34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a1b      	ldr	r3, [r3, #32]
 8007a48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007a78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	041b      	lsls	r3, r3, #16
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a17      	ldr	r2, [pc, #92]	; (8007ae8 <TIM_OC5_SetConfig+0xb4>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d00f      	beq.n	8007aae <TIM_OC5_SetConfig+0x7a>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a16      	ldr	r2, [pc, #88]	; (8007aec <TIM_OC5_SetConfig+0xb8>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d00b      	beq.n	8007aae <TIM_OC5_SetConfig+0x7a>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a15      	ldr	r2, [pc, #84]	; (8007af0 <TIM_OC5_SetConfig+0xbc>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d007      	beq.n	8007aae <TIM_OC5_SetConfig+0x7a>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a14      	ldr	r2, [pc, #80]	; (8007af4 <TIM_OC5_SetConfig+0xc0>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d003      	beq.n	8007aae <TIM_OC5_SetConfig+0x7a>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a13      	ldr	r2, [pc, #76]	; (8007af8 <TIM_OC5_SetConfig+0xc4>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d109      	bne.n	8007ac2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ab4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	021b      	lsls	r3, r3, #8
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	621a      	str	r2, [r3, #32]
}
 8007adc:	bf00      	nop
 8007ade:	371c      	adds	r7, #28
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	40012c00 	.word	0x40012c00
 8007aec:	40013400 	.word	0x40013400
 8007af0:	40014000 	.word	0x40014000
 8007af4:	40014400 	.word	0x40014400
 8007af8:	40014800 	.word	0x40014800

08007afc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b087      	sub	sp, #28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a1b      	ldr	r3, [r3, #32]
 8007b10:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	021b      	lsls	r3, r3, #8
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	051b      	lsls	r3, r3, #20
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a18      	ldr	r2, [pc, #96]	; (8007bb4 <TIM_OC6_SetConfig+0xb8>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d00f      	beq.n	8007b78 <TIM_OC6_SetConfig+0x7c>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a17      	ldr	r2, [pc, #92]	; (8007bb8 <TIM_OC6_SetConfig+0xbc>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d00b      	beq.n	8007b78 <TIM_OC6_SetConfig+0x7c>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a16      	ldr	r2, [pc, #88]	; (8007bbc <TIM_OC6_SetConfig+0xc0>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d007      	beq.n	8007b78 <TIM_OC6_SetConfig+0x7c>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a15      	ldr	r2, [pc, #84]	; (8007bc0 <TIM_OC6_SetConfig+0xc4>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d003      	beq.n	8007b78 <TIM_OC6_SetConfig+0x7c>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a14      	ldr	r2, [pc, #80]	; (8007bc4 <TIM_OC6_SetConfig+0xc8>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d109      	bne.n	8007b8c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	029b      	lsls	r3, r3, #10
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	621a      	str	r2, [r3, #32]
}
 8007ba6:	bf00      	nop
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	40012c00 	.word	0x40012c00
 8007bb8:	40013400 	.word	0x40013400
 8007bbc:	40014000 	.word	0x40014000
 8007bc0:	40014400 	.word	0x40014400
 8007bc4:	40014800 	.word	0x40014800

08007bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	f023 0201 	bic.w	r2, r3, #1
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	011b      	lsls	r3, r3, #4
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f023 030a 	bic.w	r3, r3, #10
 8007c04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	621a      	str	r2, [r3, #32]
}
 8007c1a:	bf00      	nop
 8007c1c:	371c      	adds	r7, #28
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b087      	sub	sp, #28
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	60b9      	str	r1, [r7, #8]
 8007c30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6a1b      	ldr	r3, [r3, #32]
 8007c3c:	f023 0210 	bic.w	r2, r3, #16
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	031b      	lsls	r3, r3, #12
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	011b      	lsls	r3, r3, #4
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	621a      	str	r2, [r3, #32]
}
 8007c7a:	bf00      	nop
 8007c7c:	371c      	adds	r7, #28
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	f043 0307 	orr.w	r3, r3, #7
 8007ca8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	609a      	str	r2, [r3, #8]
}
 8007cb0:	bf00      	nop
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	021a      	lsls	r2, r3, #8
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	609a      	str	r2, [r3, #8]
}
 8007cf0:	bf00      	nop
 8007cf2:	371c      	adds	r7, #28
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d101      	bne.n	8007d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d10:	2302      	movs	r3, #2
 8007d12:	e068      	b.n	8007de6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a2e      	ldr	r2, [pc, #184]	; (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d004      	beq.n	8007d48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a2d      	ldr	r2, [pc, #180]	; (8007df8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d108      	bne.n	8007d5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a1e      	ldr	r2, [pc, #120]	; (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d01d      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d86:	d018      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a1b      	ldr	r2, [pc, #108]	; (8007dfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d013      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a1a      	ldr	r2, [pc, #104]	; (8007e00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d00e      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a18      	ldr	r2, [pc, #96]	; (8007e04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d009      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a13      	ldr	r2, [pc, #76]	; (8007df8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d004      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a14      	ldr	r2, [pc, #80]	; (8007e08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d10c      	bne.n	8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	40012c00 	.word	0x40012c00
 8007df8:	40013400 	.word	0x40013400
 8007dfc:	40000400 	.word	0x40000400
 8007e00:	40000800 	.word	0x40000800
 8007e04:	40000c00 	.word	0x40000c00
 8007e08:	40014000 	.word	0x40014000

08007e0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d101      	bne.n	8007e28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e24:	2302      	movs	r3, #2
 8007e26:	e065      	b.n	8007ef4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	041b      	lsls	r3, r3, #16
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a16      	ldr	r2, [pc, #88]	; (8007f00 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d004      	beq.n	8007eb6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a14      	ldr	r2, [pc, #80]	; (8007f04 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d115      	bne.n	8007ee2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec0:	051b      	lsls	r3, r3, #20
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	40012c00 	.word	0x40012c00
 8007f04:	40013400 	.word	0x40013400

08007f08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e042      	b.n	8007fa0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d106      	bne.n	8007f32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7f9 fe63 	bl	8001bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2224      	movs	r2, #36	; 0x24
 8007f36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f022 0201 	bic.w	r2, r2, #1
 8007f48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d002      	beq.n	8007f58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fb24 	bl	80085a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f825 	bl	8007fa8 <UART_SetConfig>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d101      	bne.n	8007f68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e01b      	b.n	8007fa0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689a      	ldr	r2, [r3, #8]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f042 0201 	orr.w	r2, r2, #1
 8007f96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fba3 	bl	80086e4 <UART_CheckIdleState>
 8007f9e:	4603      	mov	r3, r0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fac:	b08c      	sub	sp, #48	; 0x30
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	69db      	ldr	r3, [r3, #28]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	4baa      	ldr	r3, [pc, #680]	; (8008280 <UART_SetConfig+0x2d8>)
 8007fd8:	4013      	ands	r3, r2
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	6812      	ldr	r2, [r2, #0]
 8007fde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fe0:	430b      	orrs	r3, r1
 8007fe2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	68da      	ldr	r2, [r3, #12]
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a9f      	ldr	r2, [pc, #636]	; (8008284 <UART_SetConfig+0x2dc>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d004      	beq.n	8008014 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008010:	4313      	orrs	r3, r2
 8008012:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800801e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	6812      	ldr	r2, [r2, #0]
 8008026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008028:	430b      	orrs	r3, r1
 800802a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008032:	f023 010f 	bic.w	r1, r3, #15
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a90      	ldr	r2, [pc, #576]	; (8008288 <UART_SetConfig+0x2e0>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d125      	bne.n	8008098 <UART_SetConfig+0xf0>
 800804c:	4b8f      	ldr	r3, [pc, #572]	; (800828c <UART_SetConfig+0x2e4>)
 800804e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008052:	f003 0303 	and.w	r3, r3, #3
 8008056:	2b03      	cmp	r3, #3
 8008058:	d81a      	bhi.n	8008090 <UART_SetConfig+0xe8>
 800805a:	a201      	add	r2, pc, #4	; (adr r2, 8008060 <UART_SetConfig+0xb8>)
 800805c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008060:	08008071 	.word	0x08008071
 8008064:	08008081 	.word	0x08008081
 8008068:	08008079 	.word	0x08008079
 800806c:	08008089 	.word	0x08008089
 8008070:	2301      	movs	r3, #1
 8008072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008076:	e116      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008078:	2302      	movs	r3, #2
 800807a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800807e:	e112      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008080:	2304      	movs	r3, #4
 8008082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008086:	e10e      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008088:	2308      	movs	r3, #8
 800808a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800808e:	e10a      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008090:	2310      	movs	r3, #16
 8008092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008096:	e106      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a7c      	ldr	r2, [pc, #496]	; (8008290 <UART_SetConfig+0x2e8>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d138      	bne.n	8008114 <UART_SetConfig+0x16c>
 80080a2:	4b7a      	ldr	r3, [pc, #488]	; (800828c <UART_SetConfig+0x2e4>)
 80080a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a8:	f003 030c 	and.w	r3, r3, #12
 80080ac:	2b0c      	cmp	r3, #12
 80080ae:	d82d      	bhi.n	800810c <UART_SetConfig+0x164>
 80080b0:	a201      	add	r2, pc, #4	; (adr r2, 80080b8 <UART_SetConfig+0x110>)
 80080b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b6:	bf00      	nop
 80080b8:	080080ed 	.word	0x080080ed
 80080bc:	0800810d 	.word	0x0800810d
 80080c0:	0800810d 	.word	0x0800810d
 80080c4:	0800810d 	.word	0x0800810d
 80080c8:	080080fd 	.word	0x080080fd
 80080cc:	0800810d 	.word	0x0800810d
 80080d0:	0800810d 	.word	0x0800810d
 80080d4:	0800810d 	.word	0x0800810d
 80080d8:	080080f5 	.word	0x080080f5
 80080dc:	0800810d 	.word	0x0800810d
 80080e0:	0800810d 	.word	0x0800810d
 80080e4:	0800810d 	.word	0x0800810d
 80080e8:	08008105 	.word	0x08008105
 80080ec:	2300      	movs	r3, #0
 80080ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080f2:	e0d8      	b.n	80082a6 <UART_SetConfig+0x2fe>
 80080f4:	2302      	movs	r3, #2
 80080f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080fa:	e0d4      	b.n	80082a6 <UART_SetConfig+0x2fe>
 80080fc:	2304      	movs	r3, #4
 80080fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008102:	e0d0      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008104:	2308      	movs	r3, #8
 8008106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800810a:	e0cc      	b.n	80082a6 <UART_SetConfig+0x2fe>
 800810c:	2310      	movs	r3, #16
 800810e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008112:	e0c8      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a5e      	ldr	r2, [pc, #376]	; (8008294 <UART_SetConfig+0x2ec>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d125      	bne.n	800816a <UART_SetConfig+0x1c2>
 800811e:	4b5b      	ldr	r3, [pc, #364]	; (800828c <UART_SetConfig+0x2e4>)
 8008120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008124:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008128:	2b30      	cmp	r3, #48	; 0x30
 800812a:	d016      	beq.n	800815a <UART_SetConfig+0x1b2>
 800812c:	2b30      	cmp	r3, #48	; 0x30
 800812e:	d818      	bhi.n	8008162 <UART_SetConfig+0x1ba>
 8008130:	2b20      	cmp	r3, #32
 8008132:	d00a      	beq.n	800814a <UART_SetConfig+0x1a2>
 8008134:	2b20      	cmp	r3, #32
 8008136:	d814      	bhi.n	8008162 <UART_SetConfig+0x1ba>
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <UART_SetConfig+0x19a>
 800813c:	2b10      	cmp	r3, #16
 800813e:	d008      	beq.n	8008152 <UART_SetConfig+0x1aa>
 8008140:	e00f      	b.n	8008162 <UART_SetConfig+0x1ba>
 8008142:	2300      	movs	r3, #0
 8008144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008148:	e0ad      	b.n	80082a6 <UART_SetConfig+0x2fe>
 800814a:	2302      	movs	r3, #2
 800814c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008150:	e0a9      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008152:	2304      	movs	r3, #4
 8008154:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008158:	e0a5      	b.n	80082a6 <UART_SetConfig+0x2fe>
 800815a:	2308      	movs	r3, #8
 800815c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008160:	e0a1      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008162:	2310      	movs	r3, #16
 8008164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008168:	e09d      	b.n	80082a6 <UART_SetConfig+0x2fe>
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a4a      	ldr	r2, [pc, #296]	; (8008298 <UART_SetConfig+0x2f0>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d125      	bne.n	80081c0 <UART_SetConfig+0x218>
 8008174:	4b45      	ldr	r3, [pc, #276]	; (800828c <UART_SetConfig+0x2e4>)
 8008176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800817a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800817e:	2bc0      	cmp	r3, #192	; 0xc0
 8008180:	d016      	beq.n	80081b0 <UART_SetConfig+0x208>
 8008182:	2bc0      	cmp	r3, #192	; 0xc0
 8008184:	d818      	bhi.n	80081b8 <UART_SetConfig+0x210>
 8008186:	2b80      	cmp	r3, #128	; 0x80
 8008188:	d00a      	beq.n	80081a0 <UART_SetConfig+0x1f8>
 800818a:	2b80      	cmp	r3, #128	; 0x80
 800818c:	d814      	bhi.n	80081b8 <UART_SetConfig+0x210>
 800818e:	2b00      	cmp	r3, #0
 8008190:	d002      	beq.n	8008198 <UART_SetConfig+0x1f0>
 8008192:	2b40      	cmp	r3, #64	; 0x40
 8008194:	d008      	beq.n	80081a8 <UART_SetConfig+0x200>
 8008196:	e00f      	b.n	80081b8 <UART_SetConfig+0x210>
 8008198:	2300      	movs	r3, #0
 800819a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800819e:	e082      	b.n	80082a6 <UART_SetConfig+0x2fe>
 80081a0:	2302      	movs	r3, #2
 80081a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081a6:	e07e      	b.n	80082a6 <UART_SetConfig+0x2fe>
 80081a8:	2304      	movs	r3, #4
 80081aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ae:	e07a      	b.n	80082a6 <UART_SetConfig+0x2fe>
 80081b0:	2308      	movs	r3, #8
 80081b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081b6:	e076      	b.n	80082a6 <UART_SetConfig+0x2fe>
 80081b8:	2310      	movs	r3, #16
 80081ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081be:	e072      	b.n	80082a6 <UART_SetConfig+0x2fe>
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a35      	ldr	r2, [pc, #212]	; (800829c <UART_SetConfig+0x2f4>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d12a      	bne.n	8008220 <UART_SetConfig+0x278>
 80081ca:	4b30      	ldr	r3, [pc, #192]	; (800828c <UART_SetConfig+0x2e4>)
 80081cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081d8:	d01a      	beq.n	8008210 <UART_SetConfig+0x268>
 80081da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081de:	d81b      	bhi.n	8008218 <UART_SetConfig+0x270>
 80081e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081e4:	d00c      	beq.n	8008200 <UART_SetConfig+0x258>
 80081e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ea:	d815      	bhi.n	8008218 <UART_SetConfig+0x270>
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d003      	beq.n	80081f8 <UART_SetConfig+0x250>
 80081f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081f4:	d008      	beq.n	8008208 <UART_SetConfig+0x260>
 80081f6:	e00f      	b.n	8008218 <UART_SetConfig+0x270>
 80081f8:	2300      	movs	r3, #0
 80081fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081fe:	e052      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008200:	2302      	movs	r3, #2
 8008202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008206:	e04e      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008208:	2304      	movs	r3, #4
 800820a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800820e:	e04a      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008210:	2308      	movs	r3, #8
 8008212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008216:	e046      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008218:	2310      	movs	r3, #16
 800821a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800821e:	e042      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a17      	ldr	r2, [pc, #92]	; (8008284 <UART_SetConfig+0x2dc>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d13a      	bne.n	80082a0 <UART_SetConfig+0x2f8>
 800822a:	4b18      	ldr	r3, [pc, #96]	; (800828c <UART_SetConfig+0x2e4>)
 800822c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008230:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008234:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008238:	d01a      	beq.n	8008270 <UART_SetConfig+0x2c8>
 800823a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800823e:	d81b      	bhi.n	8008278 <UART_SetConfig+0x2d0>
 8008240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008244:	d00c      	beq.n	8008260 <UART_SetConfig+0x2b8>
 8008246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800824a:	d815      	bhi.n	8008278 <UART_SetConfig+0x2d0>
 800824c:	2b00      	cmp	r3, #0
 800824e:	d003      	beq.n	8008258 <UART_SetConfig+0x2b0>
 8008250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008254:	d008      	beq.n	8008268 <UART_SetConfig+0x2c0>
 8008256:	e00f      	b.n	8008278 <UART_SetConfig+0x2d0>
 8008258:	2300      	movs	r3, #0
 800825a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800825e:	e022      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008260:	2302      	movs	r3, #2
 8008262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008266:	e01e      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008268:	2304      	movs	r3, #4
 800826a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800826e:	e01a      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008270:	2308      	movs	r3, #8
 8008272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008276:	e016      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008278:	2310      	movs	r3, #16
 800827a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800827e:	e012      	b.n	80082a6 <UART_SetConfig+0x2fe>
 8008280:	cfff69f3 	.word	0xcfff69f3
 8008284:	40008000 	.word	0x40008000
 8008288:	40013800 	.word	0x40013800
 800828c:	40021000 	.word	0x40021000
 8008290:	40004400 	.word	0x40004400
 8008294:	40004800 	.word	0x40004800
 8008298:	40004c00 	.word	0x40004c00
 800829c:	40005000 	.word	0x40005000
 80082a0:	2310      	movs	r3, #16
 80082a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4aae      	ldr	r2, [pc, #696]	; (8008564 <UART_SetConfig+0x5bc>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	f040 8097 	bne.w	80083e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082b6:	2b08      	cmp	r3, #8
 80082b8:	d823      	bhi.n	8008302 <UART_SetConfig+0x35a>
 80082ba:	a201      	add	r2, pc, #4	; (adr r2, 80082c0 <UART_SetConfig+0x318>)
 80082bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c0:	080082e5 	.word	0x080082e5
 80082c4:	08008303 	.word	0x08008303
 80082c8:	080082ed 	.word	0x080082ed
 80082cc:	08008303 	.word	0x08008303
 80082d0:	080082f3 	.word	0x080082f3
 80082d4:	08008303 	.word	0x08008303
 80082d8:	08008303 	.word	0x08008303
 80082dc:	08008303 	.word	0x08008303
 80082e0:	080082fb 	.word	0x080082fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082e4:	f7fc fcdc 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 80082e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082ea:	e010      	b.n	800830e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082ec:	4b9e      	ldr	r3, [pc, #632]	; (8008568 <UART_SetConfig+0x5c0>)
 80082ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082f0:	e00d      	b.n	800830e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082f2:	f7fc fc3d 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 80082f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082f8:	e009      	b.n	800830e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008300:	e005      	b.n	800830e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800830c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 8130 	beq.w	8008576 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	4a94      	ldr	r2, [pc, #592]	; (800856c <UART_SetConfig+0x5c4>)
 800831c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008320:	461a      	mov	r2, r3
 8008322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008324:	fbb3 f3f2 	udiv	r3, r3, r2
 8008328:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	4613      	mov	r3, r2
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	4413      	add	r3, r2
 8008334:	69ba      	ldr	r2, [r7, #24]
 8008336:	429a      	cmp	r2, r3
 8008338:	d305      	bcc.n	8008346 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	429a      	cmp	r2, r3
 8008344:	d903      	bls.n	800834e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800834c:	e113      	b.n	8008576 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	2200      	movs	r2, #0
 8008352:	60bb      	str	r3, [r7, #8]
 8008354:	60fa      	str	r2, [r7, #12]
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835a:	4a84      	ldr	r2, [pc, #528]	; (800856c <UART_SetConfig+0x5c4>)
 800835c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008360:	b29b      	uxth	r3, r3
 8008362:	2200      	movs	r2, #0
 8008364:	603b      	str	r3, [r7, #0]
 8008366:	607a      	str	r2, [r7, #4]
 8008368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800836c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008370:	f7f8 f95a 	bl	8000628 <__aeabi_uldivmod>
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	4610      	mov	r0, r2
 800837a:	4619      	mov	r1, r3
 800837c:	f04f 0200 	mov.w	r2, #0
 8008380:	f04f 0300 	mov.w	r3, #0
 8008384:	020b      	lsls	r3, r1, #8
 8008386:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800838a:	0202      	lsls	r2, r0, #8
 800838c:	6979      	ldr	r1, [r7, #20]
 800838e:	6849      	ldr	r1, [r1, #4]
 8008390:	0849      	lsrs	r1, r1, #1
 8008392:	2000      	movs	r0, #0
 8008394:	460c      	mov	r4, r1
 8008396:	4605      	mov	r5, r0
 8008398:	eb12 0804 	adds.w	r8, r2, r4
 800839c:	eb43 0905 	adc.w	r9, r3, r5
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	469a      	mov	sl, r3
 80083a8:	4693      	mov	fp, r2
 80083aa:	4652      	mov	r2, sl
 80083ac:	465b      	mov	r3, fp
 80083ae:	4640      	mov	r0, r8
 80083b0:	4649      	mov	r1, r9
 80083b2:	f7f8 f939 	bl	8000628 <__aeabi_uldivmod>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4613      	mov	r3, r2
 80083bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083be:	6a3b      	ldr	r3, [r7, #32]
 80083c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083c4:	d308      	bcc.n	80083d8 <UART_SetConfig+0x430>
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083cc:	d204      	bcs.n	80083d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6a3a      	ldr	r2, [r7, #32]
 80083d4:	60da      	str	r2, [r3, #12]
 80083d6:	e0ce      	b.n	8008576 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80083de:	e0ca      	b.n	8008576 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083e8:	d166      	bne.n	80084b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80083ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083ee:	2b08      	cmp	r3, #8
 80083f0:	d827      	bhi.n	8008442 <UART_SetConfig+0x49a>
 80083f2:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <UART_SetConfig+0x450>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	0800841d 	.word	0x0800841d
 80083fc:	08008425 	.word	0x08008425
 8008400:	0800842d 	.word	0x0800842d
 8008404:	08008443 	.word	0x08008443
 8008408:	08008433 	.word	0x08008433
 800840c:	08008443 	.word	0x08008443
 8008410:	08008443 	.word	0x08008443
 8008414:	08008443 	.word	0x08008443
 8008418:	0800843b 	.word	0x0800843b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800841c:	f7fc fc40 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 8008420:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008422:	e014      	b.n	800844e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008424:	f7fc fc52 	bl	8004ccc <HAL_RCC_GetPCLK2Freq>
 8008428:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800842a:	e010      	b.n	800844e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800842c:	4b4e      	ldr	r3, [pc, #312]	; (8008568 <UART_SetConfig+0x5c0>)
 800842e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008430:	e00d      	b.n	800844e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008432:	f7fc fb9d 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8008436:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008438:	e009      	b.n	800844e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800843a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800843e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008440:	e005      	b.n	800844e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008442:	2300      	movs	r3, #0
 8008444:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800844c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 8090 	beq.w	8008576 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845a:	4a44      	ldr	r2, [pc, #272]	; (800856c <UART_SetConfig+0x5c4>)
 800845c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008460:	461a      	mov	r2, r3
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008464:	fbb3 f3f2 	udiv	r3, r3, r2
 8008468:	005a      	lsls	r2, r3, #1
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	085b      	lsrs	r3, r3, #1
 8008470:	441a      	add	r2, r3
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	fbb2 f3f3 	udiv	r3, r2, r3
 800847a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	2b0f      	cmp	r3, #15
 8008480:	d916      	bls.n	80084b0 <UART_SetConfig+0x508>
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008488:	d212      	bcs.n	80084b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	b29b      	uxth	r3, r3
 800848e:	f023 030f 	bic.w	r3, r3, #15
 8008492:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	085b      	lsrs	r3, r3, #1
 8008498:	b29b      	uxth	r3, r3
 800849a:	f003 0307 	and.w	r3, r3, #7
 800849e:	b29a      	uxth	r2, r3
 80084a0:	8bfb      	ldrh	r3, [r7, #30]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	8bfa      	ldrh	r2, [r7, #30]
 80084ac:	60da      	str	r2, [r3, #12]
 80084ae:	e062      	b.n	8008576 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80084b6:	e05e      	b.n	8008576 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084bc:	2b08      	cmp	r3, #8
 80084be:	d828      	bhi.n	8008512 <UART_SetConfig+0x56a>
 80084c0:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <UART_SetConfig+0x520>)
 80084c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c6:	bf00      	nop
 80084c8:	080084ed 	.word	0x080084ed
 80084cc:	080084f5 	.word	0x080084f5
 80084d0:	080084fd 	.word	0x080084fd
 80084d4:	08008513 	.word	0x08008513
 80084d8:	08008503 	.word	0x08008503
 80084dc:	08008513 	.word	0x08008513
 80084e0:	08008513 	.word	0x08008513
 80084e4:	08008513 	.word	0x08008513
 80084e8:	0800850b 	.word	0x0800850b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084ec:	f7fc fbd8 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 80084f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084f2:	e014      	b.n	800851e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084f4:	f7fc fbea 	bl	8004ccc <HAL_RCC_GetPCLK2Freq>
 80084f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084fa:	e010      	b.n	800851e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084fc:	4b1a      	ldr	r3, [pc, #104]	; (8008568 <UART_SetConfig+0x5c0>)
 80084fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008500:	e00d      	b.n	800851e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008502:	f7fc fb35 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8008506:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008508:	e009      	b.n	800851e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800850a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008510:	e005      	b.n	800851e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800851c:	bf00      	nop
    }

    if (pclk != 0U)
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	2b00      	cmp	r3, #0
 8008522:	d028      	beq.n	8008576 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008528:	4a10      	ldr	r2, [pc, #64]	; (800856c <UART_SetConfig+0x5c4>)
 800852a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800852e:	461a      	mov	r2, r3
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	fbb3 f2f2 	udiv	r2, r3, r2
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	085b      	lsrs	r3, r3, #1
 800853c:	441a      	add	r2, r3
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	fbb2 f3f3 	udiv	r3, r2, r3
 8008546:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	2b0f      	cmp	r3, #15
 800854c:	d910      	bls.n	8008570 <UART_SetConfig+0x5c8>
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008554:	d20c      	bcs.n	8008570 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	b29a      	uxth	r2, r3
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	60da      	str	r2, [r3, #12]
 8008560:	e009      	b.n	8008576 <UART_SetConfig+0x5ce>
 8008562:	bf00      	nop
 8008564:	40008000 	.word	0x40008000
 8008568:	00f42400 	.word	0x00f42400
 800856c:	0800a870 	.word	0x0800a870
      }
      else
      {
        ret = HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2201      	movs	r2, #1
 800857a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	2201      	movs	r2, #1
 8008582:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2200      	movs	r2, #0
 800858a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2200      	movs	r2, #0
 8008590:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008592:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008596:	4618      	mov	r0, r3
 8008598:	3730      	adds	r7, #48	; 0x30
 800859a:	46bd      	mov	sp, r7
 800859c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080085a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ac:	f003 0308 	and.w	r3, r3, #8
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00a      	beq.n	80085ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	430a      	orrs	r2, r1
 80085c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00a      	beq.n	80085ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	430a      	orrs	r2, r1
 80085ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00a      	beq.n	800860e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	430a      	orrs	r2, r1
 800860c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008612:	f003 0304 	and.w	r3, r3, #4
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00a      	beq.n	8008630 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008634:	f003 0310 	and.w	r3, r3, #16
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00a      	beq.n	8008652 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	430a      	orrs	r2, r1
 8008650:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008656:	f003 0320 	and.w	r3, r3, #32
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00a      	beq.n	8008674 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867c:	2b00      	cmp	r3, #0
 800867e:	d01a      	beq.n	80086b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	430a      	orrs	r2, r1
 8008694:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800869a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800869e:	d10a      	bne.n	80086b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	430a      	orrs	r2, r1
 80086b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00a      	beq.n	80086d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	430a      	orrs	r2, r1
 80086d6:	605a      	str	r2, [r3, #4]
  }
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b098      	sub	sp, #96	; 0x60
 80086e8:	af02      	add	r7, sp, #8
 80086ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086f4:	f7f9 fc92 	bl	800201c <HAL_GetTick>
 80086f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 0308 	and.w	r3, r3, #8
 8008704:	2b08      	cmp	r3, #8
 8008706:	d12f      	bne.n	8008768 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008710:	2200      	movs	r2, #0
 8008712:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f88e 	bl	8008838 <UART_WaitOnFlagUntilTimeout>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d022      	beq.n	8008768 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872a:	e853 3f00 	ldrex	r3, [r3]
 800872e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008736:	653b      	str	r3, [r7, #80]	; 0x50
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	461a      	mov	r2, r3
 800873e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008740:	647b      	str	r3, [r7, #68]	; 0x44
 8008742:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008744:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008746:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008748:	e841 2300 	strex	r3, r2, [r1]
 800874c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800874e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1e6      	bne.n	8008722 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2220      	movs	r2, #32
 8008758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008764:	2303      	movs	r3, #3
 8008766:	e063      	b.n	8008830 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0304 	and.w	r3, r3, #4
 8008772:	2b04      	cmp	r3, #4
 8008774:	d149      	bne.n	800880a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008776:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800877e:	2200      	movs	r2, #0
 8008780:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f857 	bl	8008838 <UART_WaitOnFlagUntilTimeout>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d03c      	beq.n	800880a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	623b      	str	r3, [r7, #32]
   return(result);
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ae:	633b      	str	r3, [r7, #48]	; 0x30
 80087b0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1e6      	bne.n	8008790 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3308      	adds	r3, #8
 80087c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	e853 3f00 	ldrex	r3, [r3]
 80087d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f023 0301 	bic.w	r3, r3, #1
 80087d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3308      	adds	r3, #8
 80087e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087e2:	61fa      	str	r2, [r7, #28]
 80087e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e6:	69b9      	ldr	r1, [r7, #24]
 80087e8:	69fa      	ldr	r2, [r7, #28]
 80087ea:	e841 2300 	strex	r3, r2, [r1]
 80087ee:	617b      	str	r3, [r7, #20]
   return(result);
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1e5      	bne.n	80087c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2220      	movs	r2, #32
 80087fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e012      	b.n	8008830 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2220      	movs	r2, #32
 800880e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2220      	movs	r2, #32
 8008816:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3758      	adds	r7, #88	; 0x58
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	603b      	str	r3, [r7, #0]
 8008844:	4613      	mov	r3, r2
 8008846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008848:	e049      	b.n	80088de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008850:	d045      	beq.n	80088de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008852:	f7f9 fbe3 	bl	800201c <HAL_GetTick>
 8008856:	4602      	mov	r2, r0
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	69ba      	ldr	r2, [r7, #24]
 800885e:	429a      	cmp	r2, r3
 8008860:	d302      	bcc.n	8008868 <UART_WaitOnFlagUntilTimeout+0x30>
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e048      	b.n	80088fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 0304 	and.w	r3, r3, #4
 8008876:	2b00      	cmp	r3, #0
 8008878:	d031      	beq.n	80088de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	69db      	ldr	r3, [r3, #28]
 8008880:	f003 0308 	and.w	r3, r3, #8
 8008884:	2b08      	cmp	r3, #8
 8008886:	d110      	bne.n	80088aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2208      	movs	r2, #8
 800888e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f000 f838 	bl	8008906 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2208      	movs	r2, #8
 800889a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e029      	b.n	80088fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	69db      	ldr	r3, [r3, #28]
 80088b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088b8:	d111      	bne.n	80088de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f000 f81e 	bl	8008906 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2220      	movs	r2, #32
 80088ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e00f      	b.n	80088fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	69da      	ldr	r2, [r3, #28]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	4013      	ands	r3, r2
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	bf0c      	ite	eq
 80088ee:	2301      	moveq	r3, #1
 80088f0:	2300      	movne	r3, #0
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	461a      	mov	r2, r3
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d0a6      	beq.n	800884a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008906:	b480      	push	{r7}
 8008908:	b095      	sub	sp, #84	; 0x54
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008916:	e853 3f00 	ldrex	r3, [r3]
 800891a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800891c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	461a      	mov	r2, r3
 800892a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800892c:	643b      	str	r3, [r7, #64]	; 0x40
 800892e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008930:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008932:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008934:	e841 2300 	strex	r3, r2, [r1]
 8008938:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800893a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1e6      	bne.n	800890e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3308      	adds	r3, #8
 8008946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	e853 3f00 	ldrex	r3, [r3]
 800894e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008956:	f023 0301 	bic.w	r3, r3, #1
 800895a:	64bb      	str	r3, [r7, #72]	; 0x48
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3308      	adds	r3, #8
 8008962:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008964:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800896a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800896c:	e841 2300 	strex	r3, r2, [r1]
 8008970:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1e3      	bne.n	8008940 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800897c:	2b01      	cmp	r3, #1
 800897e:	d118      	bne.n	80089b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	e853 3f00 	ldrex	r3, [r3]
 800898c:	60bb      	str	r3, [r7, #8]
   return(result);
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f023 0310 	bic.w	r3, r3, #16
 8008994:	647b      	str	r3, [r7, #68]	; 0x44
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800899e:	61bb      	str	r3, [r7, #24]
 80089a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a2:	6979      	ldr	r1, [r7, #20]
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	e841 2300 	strex	r3, r2, [r1]
 80089aa:	613b      	str	r3, [r7, #16]
   return(result);
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1e6      	bne.n	8008980 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2220      	movs	r2, #32
 80089b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80089c6:	bf00      	nop
 80089c8:	3754      	adds	r7, #84	; 0x54
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b085      	sub	sp, #20
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d101      	bne.n	80089e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80089e4:	2302      	movs	r3, #2
 80089e6:	e027      	b.n	8008a38 <HAL_UARTEx_DisableFifoMode+0x66>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2224      	movs	r2, #36	; 0x24
 80089f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0201 	bic.w	r2, r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a16:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d101      	bne.n	8008a5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a58:	2302      	movs	r3, #2
 8008a5a:	e02d      	b.n	8008ab8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2224      	movs	r2, #36	; 0x24
 8008a68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f022 0201 	bic.w	r2, r2, #1
 8008a82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	430a      	orrs	r2, r1
 8008a96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f84f 	bl	8008b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d101      	bne.n	8008ad8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	e02d      	b.n	8008b34 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2224      	movs	r2, #36	; 0x24
 8008ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f022 0201 	bic.w	r2, r2, #1
 8008afe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	430a      	orrs	r2, r1
 8008b12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f811 	bl	8008b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2220      	movs	r2, #32
 8008b26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d108      	bne.n	8008b5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b5c:	e031      	b.n	8008bc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b5e:	2308      	movs	r3, #8
 8008b60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b62:	2308      	movs	r3, #8
 8008b64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	0e5b      	lsrs	r3, r3, #25
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	f003 0307 	and.w	r3, r3, #7
 8008b74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	0f5b      	lsrs	r3, r3, #29
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 0307 	and.w	r3, r3, #7
 8008b84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	7b3a      	ldrb	r2, [r7, #12]
 8008b8a:	4911      	ldr	r1, [pc, #68]	; (8008bd0 <UARTEx_SetNbDataToProcess+0x94>)
 8008b8c:	5c8a      	ldrb	r2, [r1, r2]
 8008b8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b92:	7b3a      	ldrb	r2, [r7, #12]
 8008b94:	490f      	ldr	r1, [pc, #60]	; (8008bd4 <UARTEx_SetNbDataToProcess+0x98>)
 8008b96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b98:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	7b7a      	ldrb	r2, [r7, #13]
 8008ba8:	4909      	ldr	r1, [pc, #36]	; (8008bd0 <UARTEx_SetNbDataToProcess+0x94>)
 8008baa:	5c8a      	ldrb	r2, [r1, r2]
 8008bac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bb0:	7b7a      	ldrb	r2, [r7, #13]
 8008bb2:	4908      	ldr	r1, [pc, #32]	; (8008bd4 <UARTEx_SetNbDataToProcess+0x98>)
 8008bb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008bc2:	bf00      	nop
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	0800a888 	.word	0x0800a888
 8008bd4:	0800a890 	.word	0x0800a890

08008bd8 <arm_rfft_32_fast_init_f32>:
 8008bd8:	b178      	cbz	r0, 8008bfa <arm_rfft_32_fast_init_f32+0x22>
 8008bda:	b430      	push	{r4, r5}
 8008bdc:	4908      	ldr	r1, [pc, #32]	; (8008c00 <arm_rfft_32_fast_init_f32+0x28>)
 8008bde:	4a09      	ldr	r2, [pc, #36]	; (8008c04 <arm_rfft_32_fast_init_f32+0x2c>)
 8008be0:	2310      	movs	r3, #16
 8008be2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008be6:	8003      	strh	r3, [r0, #0]
 8008be8:	2520      	movs	r5, #32
 8008bea:	2414      	movs	r4, #20
 8008bec:	4b06      	ldr	r3, [pc, #24]	; (8008c08 <arm_rfft_32_fast_init_f32+0x30>)
 8008bee:	8205      	strh	r5, [r0, #16]
 8008bf0:	8184      	strh	r4, [r0, #12]
 8008bf2:	6143      	str	r3, [r0, #20]
 8008bf4:	bc30      	pop	{r4, r5}
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	4770      	bx	lr
 8008bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8008bfe:	4770      	bx	lr
 8008c00:	0800b848 	.word	0x0800b848
 8008c04:	08010180 	.word	0x08010180
 8008c08:	08018f00 	.word	0x08018f00

08008c0c <arm_rfft_64_fast_init_f32>:
 8008c0c:	b178      	cbz	r0, 8008c2e <arm_rfft_64_fast_init_f32+0x22>
 8008c0e:	b430      	push	{r4, r5}
 8008c10:	4908      	ldr	r1, [pc, #32]	; (8008c34 <arm_rfft_64_fast_init_f32+0x28>)
 8008c12:	4a09      	ldr	r2, [pc, #36]	; (8008c38 <arm_rfft_64_fast_init_f32+0x2c>)
 8008c14:	2320      	movs	r3, #32
 8008c16:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008c1a:	8003      	strh	r3, [r0, #0]
 8008c1c:	2540      	movs	r5, #64	; 0x40
 8008c1e:	2430      	movs	r4, #48	; 0x30
 8008c20:	4b06      	ldr	r3, [pc, #24]	; (8008c3c <arm_rfft_64_fast_init_f32+0x30>)
 8008c22:	8205      	strh	r5, [r0, #16]
 8008c24:	8184      	strh	r4, [r0, #12]
 8008c26:	6143      	str	r3, [r0, #20]
 8008c28:	bc30      	pop	{r4, r5}
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	4770      	bx	lr
 8008c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c32:	4770      	bx	lr
 8008c34:	0800d9a0 	.word	0x0800d9a0
 8008c38:	08014a00 	.word	0x08014a00
 8008c3c:	0801d780 	.word	0x0801d780

08008c40 <arm_rfft_256_fast_init_f32>:
 8008c40:	b180      	cbz	r0, 8008c64 <arm_rfft_256_fast_init_f32+0x24>
 8008c42:	b430      	push	{r4, r5}
 8008c44:	4909      	ldr	r1, [pc, #36]	; (8008c6c <arm_rfft_256_fast_init_f32+0x2c>)
 8008c46:	4a0a      	ldr	r2, [pc, #40]	; (8008c70 <arm_rfft_256_fast_init_f32+0x30>)
 8008c48:	2380      	movs	r3, #128	; 0x80
 8008c4a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008c4e:	8003      	strh	r3, [r0, #0]
 8008c50:	f44f 7580 	mov.w	r5, #256	; 0x100
 8008c54:	24d0      	movs	r4, #208	; 0xd0
 8008c56:	4b07      	ldr	r3, [pc, #28]	; (8008c74 <arm_rfft_256_fast_init_f32+0x34>)
 8008c58:	8205      	strh	r5, [r0, #16]
 8008c5a:	8184      	strh	r4, [r0, #12]
 8008c5c:	6143      	str	r3, [r0, #20]
 8008c5e:	bc30      	pop	{r4, r5}
 8008c60:	2000      	movs	r0, #0
 8008c62:	4770      	bx	lr
 8008c64:	f04f 30ff 	mov.w	r0, #4294967295
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	0800b6a8 	.word	0x0800b6a8
 8008c70:	0800fd80 	.word	0x0800fd80
 8008c74:	08018b00 	.word	0x08018b00

08008c78 <arm_rfft_512_fast_init_f32>:
 8008c78:	b190      	cbz	r0, 8008ca0 <arm_rfft_512_fast_init_f32+0x28>
 8008c7a:	b430      	push	{r4, r5}
 8008c7c:	490a      	ldr	r1, [pc, #40]	; (8008ca8 <arm_rfft_512_fast_init_f32+0x30>)
 8008c7e:	4a0b      	ldr	r2, [pc, #44]	; (8008cac <arm_rfft_512_fast_init_f32+0x34>)
 8008c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c84:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008c88:	8003      	strh	r3, [r0, #0]
 8008c8a:	f44f 7500 	mov.w	r5, #512	; 0x200
 8008c8e:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8008c92:	4b07      	ldr	r3, [pc, #28]	; (8008cb0 <arm_rfft_512_fast_init_f32+0x38>)
 8008c94:	8205      	strh	r5, [r0, #16]
 8008c96:	8184      	strh	r4, [r0, #12]
 8008c98:	6143      	str	r3, [r0, #20]
 8008c9a:	bc30      	pop	{r4, r5}
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	4770      	bx	lr
 8008ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	0800d630 	.word	0x0800d630
 8008cac:	08014200 	.word	0x08014200
 8008cb0:	0801cf80 	.word	0x0801cf80

08008cb4 <arm_rfft_1024_fast_init_f32>:
 8008cb4:	b190      	cbz	r0, 8008cdc <arm_rfft_1024_fast_init_f32+0x28>
 8008cb6:	b430      	push	{r4, r5}
 8008cb8:	490a      	ldr	r1, [pc, #40]	; (8008ce4 <arm_rfft_1024_fast_init_f32+0x30>)
 8008cba:	4a0b      	ldr	r2, [pc, #44]	; (8008ce8 <arm_rfft_1024_fast_init_f32+0x34>)
 8008cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cc0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008cc4:	8003      	strh	r3, [r0, #0]
 8008cc6:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8008cca:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8008cce:	4b07      	ldr	r3, [pc, #28]	; (8008cec <arm_rfft_1024_fast_init_f32+0x38>)
 8008cd0:	8205      	strh	r5, [r0, #16]
 8008cd2:	8184      	strh	r4, [r0, #12]
 8008cd4:	6143      	str	r3, [r0, #20]
 8008cd6:	bc30      	pop	{r4, r5}
 8008cd8:	2000      	movs	r0, #0
 8008cda:	4770      	bx	lr
 8008cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	0800da00 	.word	0x0800da00
 8008ce8:	08014b00 	.word	0x08014b00
 8008cec:	08015b00 	.word	0x08015b00

08008cf0 <arm_rfft_2048_fast_init_f32>:
 8008cf0:	b190      	cbz	r0, 8008d18 <arm_rfft_2048_fast_init_f32+0x28>
 8008cf2:	b430      	push	{r4, r5}
 8008cf4:	490a      	ldr	r1, [pc, #40]	; (8008d20 <arm_rfft_2048_fast_init_f32+0x30>)
 8008cf6:	4a0b      	ldr	r2, [pc, #44]	; (8008d24 <arm_rfft_2048_fast_init_f32+0x34>)
 8008cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cfc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008d00:	8003      	strh	r3, [r0, #0]
 8008d02:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8008d06:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8008d0a:	4b07      	ldr	r3, [pc, #28]	; (8008d28 <arm_rfft_2048_fast_init_f32+0x38>)
 8008d0c:	8205      	strh	r5, [r0, #16]
 8008d0e:	8184      	strh	r4, [r0, #12]
 8008d10:	6143      	str	r3, [r0, #20]
 8008d12:	bc30      	pop	{r4, r5}
 8008d14:	2000      	movs	r0, #0
 8008d16:	4770      	bx	lr
 8008d18:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	0800a898 	.word	0x0800a898
 8008d24:	0800dd80 	.word	0x0800dd80
 8008d28:	08016b00 	.word	0x08016b00

08008d2c <arm_rfft_4096_fast_init_f32>:
 8008d2c:	b190      	cbz	r0, 8008d54 <arm_rfft_4096_fast_init_f32+0x28>
 8008d2e:	b430      	push	{r4, r5}
 8008d30:	490a      	ldr	r1, [pc, #40]	; (8008d5c <arm_rfft_4096_fast_init_f32+0x30>)
 8008d32:	4a0b      	ldr	r2, [pc, #44]	; (8008d60 <arm_rfft_4096_fast_init_f32+0x34>)
 8008d34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d38:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008d3c:	8003      	strh	r3, [r0, #0]
 8008d3e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8008d42:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8008d46:	4b07      	ldr	r3, [pc, #28]	; (8008d64 <arm_rfft_4096_fast_init_f32+0x38>)
 8008d48:	8205      	strh	r5, [r0, #16]
 8008d4a:	8184      	strh	r4, [r0, #12]
 8008d4c:	6143      	str	r3, [r0, #20]
 8008d4e:	bc30      	pop	{r4, r5}
 8008d50:	2000      	movs	r0, #0
 8008d52:	4770      	bx	lr
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	0800b870 	.word	0x0800b870
 8008d60:	08010200 	.word	0x08010200
 8008d64:	08018f80 	.word	0x08018f80

08008d68 <arm_rfft_fast_init_f32>:
 8008d68:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008d6c:	d01f      	beq.n	8008dae <arm_rfft_fast_init_f32+0x46>
 8008d6e:	d90b      	bls.n	8008d88 <arm_rfft_fast_init_f32+0x20>
 8008d70:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8008d74:	d019      	beq.n	8008daa <arm_rfft_fast_init_f32+0x42>
 8008d76:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8008d7a:	d012      	beq.n	8008da2 <arm_rfft_fast_init_f32+0x3a>
 8008d7c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008d80:	d00d      	beq.n	8008d9e <arm_rfft_fast_init_f32+0x36>
 8008d82:	f04f 30ff 	mov.w	r0, #4294967295
 8008d86:	4770      	bx	lr
 8008d88:	2940      	cmp	r1, #64	; 0x40
 8008d8a:	d00c      	beq.n	8008da6 <arm_rfft_fast_init_f32+0x3e>
 8008d8c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008d90:	d003      	beq.n	8008d9a <arm_rfft_fast_init_f32+0x32>
 8008d92:	2920      	cmp	r1, #32
 8008d94:	d1f5      	bne.n	8008d82 <arm_rfft_fast_init_f32+0x1a>
 8008d96:	4b07      	ldr	r3, [pc, #28]	; (8008db4 <arm_rfft_fast_init_f32+0x4c>)
 8008d98:	4718      	bx	r3
 8008d9a:	4b07      	ldr	r3, [pc, #28]	; (8008db8 <arm_rfft_fast_init_f32+0x50>)
 8008d9c:	4718      	bx	r3
 8008d9e:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <arm_rfft_fast_init_f32+0x54>)
 8008da0:	4718      	bx	r3
 8008da2:	4b07      	ldr	r3, [pc, #28]	; (8008dc0 <arm_rfft_fast_init_f32+0x58>)
 8008da4:	4718      	bx	r3
 8008da6:	4b07      	ldr	r3, [pc, #28]	; (8008dc4 <arm_rfft_fast_init_f32+0x5c>)
 8008da8:	e7f6      	b.n	8008d98 <arm_rfft_fast_init_f32+0x30>
 8008daa:	4b07      	ldr	r3, [pc, #28]	; (8008dc8 <arm_rfft_fast_init_f32+0x60>)
 8008dac:	e7f4      	b.n	8008d98 <arm_rfft_fast_init_f32+0x30>
 8008dae:	4b07      	ldr	r3, [pc, #28]	; (8008dcc <arm_rfft_fast_init_f32+0x64>)
 8008db0:	e7f2      	b.n	8008d98 <arm_rfft_fast_init_f32+0x30>
 8008db2:	bf00      	nop
 8008db4:	08008bd9 	.word	0x08008bd9
 8008db8:	08008c41 	.word	0x08008c41
 8008dbc:	08008cb5 	.word	0x08008cb5
 8008dc0:	08008d2d 	.word	0x08008d2d
 8008dc4:	08008c0d 	.word	0x08008c0d
 8008dc8:	08008cf1 	.word	0x08008cf1
 8008dcc:	08008c79 	.word	0x08008c79

08008dd0 <stage_rfft_f32>:
 8008dd0:	b410      	push	{r4}
 8008dd2:	edd1 7a00 	vldr	s15, [r1]
 8008dd6:	ed91 7a01 	vldr	s14, [r1, #4]
 8008dda:	8804      	ldrh	r4, [r0, #0]
 8008ddc:	6940      	ldr	r0, [r0, #20]
 8008dde:	ee37 7a07 	vadd.f32	s14, s14, s14
 8008de2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008de6:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8008dea:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008dee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008df2:	3c01      	subs	r4, #1
 8008df4:	ee26 7a84 	vmul.f32	s14, s13, s8
 8008df8:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008dfc:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8008e00:	ed82 7a00 	vstr	s14, [r2]
 8008e04:	edc2 7a01 	vstr	s15, [r2, #4]
 8008e08:	3010      	adds	r0, #16
 8008e0a:	3210      	adds	r2, #16
 8008e0c:	3b08      	subs	r3, #8
 8008e0e:	3110      	adds	r1, #16
 8008e10:	ed11 5a02 	vldr	s10, [r1, #-8]
 8008e14:	ed93 7a02 	vldr	s14, [r3, #8]
 8008e18:	ed50 6a02 	vldr	s13, [r0, #-8]
 8008e1c:	edd3 4a03 	vldr	s9, [r3, #12]
 8008e20:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008e24:	ed10 6a01 	vldr	s12, [r0, #-4]
 8008e28:	ee77 5a45 	vsub.f32	s11, s14, s10
 8008e2c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008e30:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8008e34:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8008e38:	ee66 5a25 	vmul.f32	s11, s12, s11
 8008e3c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008e40:	ee37 7a23 	vadd.f32	s14, s14, s7
 8008e44:	ee66 6a85 	vmul.f32	s13, s13, s10
 8008e48:	ee26 6a05 	vmul.f32	s12, s12, s10
 8008e4c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008e50:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008e54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e58:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008e5c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008e60:	3c01      	subs	r4, #1
 8008e62:	ed02 7a02 	vstr	s14, [r2, #-8]
 8008e66:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008e6a:	f1a3 0308 	sub.w	r3, r3, #8
 8008e6e:	f101 0108 	add.w	r1, r1, #8
 8008e72:	f100 0008 	add.w	r0, r0, #8
 8008e76:	f102 0208 	add.w	r2, r2, #8
 8008e7a:	d1c9      	bne.n	8008e10 <stage_rfft_f32+0x40>
 8008e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop

08008e84 <merge_rfft_f32>:
 8008e84:	b410      	push	{r4}
 8008e86:	edd1 7a00 	vldr	s15, [r1]
 8008e8a:	edd1 6a01 	vldr	s13, [r1, #4]
 8008e8e:	8804      	ldrh	r4, [r0, #0]
 8008e90:	6940      	ldr	r0, [r0, #20]
 8008e92:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008e96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e9a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8008e9e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008ea2:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008ea6:	3c01      	subs	r4, #1
 8008ea8:	ed82 7a00 	vstr	s14, [r2]
 8008eac:	edc2 7a01 	vstr	s15, [r2, #4]
 8008eb0:	b3dc      	cbz	r4, 8008f2a <merge_rfft_f32+0xa6>
 8008eb2:	00e3      	lsls	r3, r4, #3
 8008eb4:	3b08      	subs	r3, #8
 8008eb6:	440b      	add	r3, r1
 8008eb8:	3010      	adds	r0, #16
 8008eba:	3210      	adds	r2, #16
 8008ebc:	3110      	adds	r1, #16
 8008ebe:	ed11 5a02 	vldr	s10, [r1, #-8]
 8008ec2:	ed93 7a02 	vldr	s14, [r3, #8]
 8008ec6:	ed50 6a02 	vldr	s13, [r0, #-8]
 8008eca:	edd3 4a03 	vldr	s9, [r3, #12]
 8008ece:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008ed2:	ed10 6a01 	vldr	s12, [r0, #-4]
 8008ed6:	ee75 5a47 	vsub.f32	s11, s10, s14
 8008eda:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008ede:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8008ee2:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8008ee6:	ee66 5a25 	vmul.f32	s11, s12, s11
 8008eea:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008eee:	ee37 7a63 	vsub.f32	s14, s14, s7
 8008ef2:	ee66 6a85 	vmul.f32	s13, s13, s10
 8008ef6:	ee26 6a05 	vmul.f32	s12, s12, s10
 8008efa:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008efe:	ee37 7a46 	vsub.f32	s14, s14, s12
 8008f02:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f06:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008f0a:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008f0e:	3c01      	subs	r4, #1
 8008f10:	ed02 7a02 	vstr	s14, [r2, #-8]
 8008f14:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008f18:	f1a3 0308 	sub.w	r3, r3, #8
 8008f1c:	f101 0108 	add.w	r1, r1, #8
 8008f20:	f100 0008 	add.w	r0, r0, #8
 8008f24:	f102 0208 	add.w	r2, r2, #8
 8008f28:	d1c9      	bne.n	8008ebe <merge_rfft_f32+0x3a>
 8008f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <arm_rfft_fast_f32>:
 8008f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f34:	8a05      	ldrh	r5, [r0, #16]
 8008f36:	086d      	lsrs	r5, r5, #1
 8008f38:	8005      	strh	r5, [r0, #0]
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	4616      	mov	r6, r2
 8008f3e:	461d      	mov	r5, r3
 8008f40:	b14b      	cbz	r3, 8008f56 <arm_rfft_fast_f32+0x26>
 8008f42:	f7ff ff9f 	bl	8008e84 <merge_rfft_f32>
 8008f46:	462a      	mov	r2, r5
 8008f48:	4631      	mov	r1, r6
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f52:	f000 bb33 	b.w	80095bc <arm_cfft_f32>
 8008f56:	460f      	mov	r7, r1
 8008f58:	461a      	mov	r2, r3
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	f000 fb2e 	bl	80095bc <arm_cfft_f32>
 8008f60:	4632      	mov	r2, r6
 8008f62:	4639      	mov	r1, r7
 8008f64:	4620      	mov	r0, r4
 8008f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6a:	f7ff bf31 	b.w	8008dd0 <stage_rfft_f32>
 8008f6e:	bf00      	nop

08008f70 <arm_cfft_radix8by2_f32>:
 8008f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f74:	ed2d 8b08 	vpush	{d8-d11}
 8008f78:	4607      	mov	r7, r0
 8008f7a:	4608      	mov	r0, r1
 8008f7c:	f8b7 c000 	ldrh.w	ip, [r7]
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8008f86:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8008f8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008f8e:	f000 80b0 	beq.w	80090f2 <arm_cfft_radix8by2_f32+0x182>
 8008f92:	008c      	lsls	r4, r1, #2
 8008f94:	3410      	adds	r4, #16
 8008f96:	f100 0310 	add.w	r3, r0, #16
 8008f9a:	1906      	adds	r6, r0, r4
 8008f9c:	3210      	adds	r2, #16
 8008f9e:	4444      	add	r4, r8
 8008fa0:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8008fa4:	f108 0510 	add.w	r5, r8, #16
 8008fa8:	ed15 2a04 	vldr	s4, [r5, #-16]
 8008fac:	ed55 2a03 	vldr	s5, [r5, #-12]
 8008fb0:	ed54 4a04 	vldr	s9, [r4, #-16]
 8008fb4:	ed14 4a03 	vldr	s8, [r4, #-12]
 8008fb8:	ed14 6a02 	vldr	s12, [r4, #-8]
 8008fbc:	ed54 5a01 	vldr	s11, [r4, #-4]
 8008fc0:	ed53 3a04 	vldr	s7, [r3, #-16]
 8008fc4:	ed15 0a02 	vldr	s0, [r5, #-8]
 8008fc8:	ed55 0a01 	vldr	s1, [r5, #-4]
 8008fcc:	ed56 6a04 	vldr	s13, [r6, #-16]
 8008fd0:	ed16 3a03 	vldr	s6, [r6, #-12]
 8008fd4:	ed13 7a03 	vldr	s14, [r3, #-12]
 8008fd8:	ed13 5a02 	vldr	s10, [r3, #-8]
 8008fdc:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008fe0:	ed16 1a02 	vldr	s2, [r6, #-8]
 8008fe4:	ed56 1a01 	vldr	s3, [r6, #-4]
 8008fe8:	ee73 ba82 	vadd.f32	s23, s7, s4
 8008fec:	ee37 ba22 	vadd.f32	s22, s14, s5
 8008ff0:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8008ff4:	ee33 9a04 	vadd.f32	s18, s6, s8
 8008ff8:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8008ffc:	ee75 aa00 	vadd.f32	s21, s10, s0
 8009000:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8009004:	ee71 8a06 	vadd.f32	s17, s2, s12
 8009008:	ed43 ba04 	vstr	s23, [r3, #-16]
 800900c:	ed03 ba03 	vstr	s22, [r3, #-12]
 8009010:	ed43 aa02 	vstr	s21, [r3, #-8]
 8009014:	ed03 aa01 	vstr	s20, [r3, #-4]
 8009018:	ed06 8a01 	vstr	s16, [r6, #-4]
 800901c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8009020:	ed06 9a03 	vstr	s18, [r6, #-12]
 8009024:	ed46 8a02 	vstr	s17, [r6, #-8]
 8009028:	ee37 7a62 	vsub.f32	s14, s14, s5
 800902c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8009030:	ee34 4a43 	vsub.f32	s8, s8, s6
 8009034:	ed52 6a03 	vldr	s13, [r2, #-12]
 8009038:	ed12 3a04 	vldr	s6, [r2, #-16]
 800903c:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8009040:	ee27 8a26 	vmul.f32	s16, s14, s13
 8009044:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8009048:	ee23 2a83 	vmul.f32	s4, s7, s6
 800904c:	ee64 4a83 	vmul.f32	s9, s9, s6
 8009050:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8009054:	ee27 7a03 	vmul.f32	s14, s14, s6
 8009058:	ee64 6a26 	vmul.f32	s13, s8, s13
 800905c:	ee24 4a03 	vmul.f32	s8, s8, s6
 8009060:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009064:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009068:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800906c:	ee32 3a08 	vadd.f32	s6, s4, s16
 8009070:	ed05 7a03 	vstr	s14, [r5, #-12]
 8009074:	ed05 3a04 	vstr	s6, [r5, #-16]
 8009078:	ed04 4a04 	vstr	s8, [r4, #-16]
 800907c:	ed44 6a03 	vstr	s13, [r4, #-12]
 8009080:	ed12 7a01 	vldr	s14, [r2, #-4]
 8009084:	ee76 6a41 	vsub.f32	s13, s12, s2
 8009088:	ee35 5a40 	vsub.f32	s10, s10, s0
 800908c:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8009090:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009094:	ed52 5a02 	vldr	s11, [r2, #-8]
 8009098:	ee67 3a87 	vmul.f32	s7, s15, s14
 800909c:	ee66 4a87 	vmul.f32	s9, s13, s14
 80090a0:	ee25 4a25 	vmul.f32	s8, s10, s11
 80090a4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80090a8:	ee25 5a07 	vmul.f32	s10, s10, s14
 80090ac:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80090b0:	ee26 7a07 	vmul.f32	s14, s12, s14
 80090b4:	ee26 6a25 	vmul.f32	s12, s12, s11
 80090b8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80090bc:	ee74 5a23 	vadd.f32	s11, s8, s7
 80090c0:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80090c4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80090c8:	3310      	adds	r3, #16
 80090ca:	4563      	cmp	r3, ip
 80090cc:	ed45 5a02 	vstr	s11, [r5, #-8]
 80090d0:	f106 0610 	add.w	r6, r6, #16
 80090d4:	ed45 7a01 	vstr	s15, [r5, #-4]
 80090d8:	f102 0210 	add.w	r2, r2, #16
 80090dc:	ed04 6a02 	vstr	s12, [r4, #-8]
 80090e0:	ed04 7a01 	vstr	s14, [r4, #-4]
 80090e4:	f105 0510 	add.w	r5, r5, #16
 80090e8:	f104 0410 	add.w	r4, r4, #16
 80090ec:	f47f af5c 	bne.w	8008fa8 <arm_cfft_radix8by2_f32+0x38>
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	b28c      	uxth	r4, r1
 80090f4:	4621      	mov	r1, r4
 80090f6:	2302      	movs	r3, #2
 80090f8:	f000 fb3c 	bl	8009774 <arm_radix8_butterfly_f32>
 80090fc:	ecbd 8b08 	vpop	{d8-d11}
 8009100:	4621      	mov	r1, r4
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	4640      	mov	r0, r8
 8009106:	2302      	movs	r3, #2
 8009108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800910c:	f000 bb32 	b.w	8009774 <arm_radix8_butterfly_f32>

08009110 <arm_cfft_radix8by4_f32>:
 8009110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009114:	ed2d 8b0a 	vpush	{d8-d12}
 8009118:	b08d      	sub	sp, #52	; 0x34
 800911a:	460d      	mov	r5, r1
 800911c:	910b      	str	r1, [sp, #44]	; 0x2c
 800911e:	8801      	ldrh	r1, [r0, #0]
 8009120:	6842      	ldr	r2, [r0, #4]
 8009122:	900a      	str	r0, [sp, #40]	; 0x28
 8009124:	0849      	lsrs	r1, r1, #1
 8009126:	008b      	lsls	r3, r1, #2
 8009128:	18ee      	adds	r6, r5, r3
 800912a:	18f0      	adds	r0, r6, r3
 800912c:	edd0 5a00 	vldr	s11, [r0]
 8009130:	edd5 7a00 	vldr	s15, [r5]
 8009134:	ed96 7a00 	vldr	s14, [r6]
 8009138:	edd0 3a01 	vldr	s7, [r0, #4]
 800913c:	ed96 4a01 	vldr	s8, [r6, #4]
 8009140:	ed95 5a01 	vldr	s10, [r5, #4]
 8009144:	9008      	str	r0, [sp, #32]
 8009146:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800914a:	18c7      	adds	r7, r0, r3
 800914c:	edd7 4a00 	vldr	s9, [r7]
 8009150:	ed97 3a01 	vldr	s6, [r7, #4]
 8009154:	9701      	str	r7, [sp, #4]
 8009156:	ee77 6a06 	vadd.f32	s13, s14, s12
 800915a:	462c      	mov	r4, r5
 800915c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009160:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009164:	ee16 ca90 	vmov	ip, s13
 8009168:	f844 cb08 	str.w	ip, [r4], #8
 800916c:	ee75 6a23 	vadd.f32	s13, s10, s7
 8009170:	edd6 5a01 	vldr	s11, [r6, #4]
 8009174:	edd7 2a01 	vldr	s5, [r7, #4]
 8009178:	9404      	str	r4, [sp, #16]
 800917a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800917e:	ee74 3a27 	vadd.f32	s7, s8, s15
 8009182:	ee36 6a47 	vsub.f32	s12, s12, s14
 8009186:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800918a:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800918e:	0849      	lsrs	r1, r1, #1
 8009190:	f102 0e08 	add.w	lr, r2, #8
 8009194:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8009198:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800919c:	9109      	str	r1, [sp, #36]	; 0x24
 800919e:	ee35 4a47 	vsub.f32	s8, s10, s14
 80091a2:	f1a1 0902 	sub.w	r9, r1, #2
 80091a6:	f8cd e00c 	str.w	lr, [sp, #12]
 80091aa:	4631      	mov	r1, r6
 80091ac:	ee13 ea90 	vmov	lr, s7
 80091b0:	ee36 6a64 	vsub.f32	s12, s12, s9
 80091b4:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80091b8:	4604      	mov	r4, r0
 80091ba:	edc5 5a01 	vstr	s11, [r5, #4]
 80091be:	ee37 7a05 	vadd.f32	s14, s14, s10
 80091c2:	f841 eb08 	str.w	lr, [r1], #8
 80091c6:	ee34 5a24 	vadd.f32	s10, s8, s9
 80091ca:	ee16 ea10 	vmov	lr, s12
 80091ce:	ed86 5a01 	vstr	s10, [r6, #4]
 80091d2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80091d6:	f844 eb08 	str.w	lr, [r4], #8
 80091da:	ee77 7a83 	vadd.f32	s15, s15, s6
 80091de:	edc0 6a01 	vstr	s13, [r0, #4]
 80091e2:	9405      	str	r4, [sp, #20]
 80091e4:	4604      	mov	r4, r0
 80091e6:	ee17 0a90 	vmov	r0, s15
 80091ea:	9106      	str	r1, [sp, #24]
 80091ec:	ee37 7a64 	vsub.f32	s14, s14, s9
 80091f0:	f102 0110 	add.w	r1, r2, #16
 80091f4:	46bc      	mov	ip, r7
 80091f6:	9100      	str	r1, [sp, #0]
 80091f8:	f847 0b08 	str.w	r0, [r7], #8
 80091fc:	f102 0118 	add.w	r1, r2, #24
 8009200:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8009204:	9102      	str	r1, [sp, #8]
 8009206:	ed8c 7a01 	vstr	s14, [ip, #4]
 800920a:	9007      	str	r0, [sp, #28]
 800920c:	f000 8134 	beq.w	8009478 <arm_cfft_radix8by4_f32+0x368>
 8009210:	f102 0920 	add.w	r9, r2, #32
 8009214:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8009218:	9a01      	ldr	r2, [sp, #4]
 800921a:	f8dd a000 	ldr.w	sl, [sp]
 800921e:	3b0c      	subs	r3, #12
 8009220:	4683      	mov	fp, r0
 8009222:	4463      	add	r3, ip
 8009224:	f105 0e10 	add.w	lr, r5, #16
 8009228:	f1a4 010c 	sub.w	r1, r4, #12
 800922c:	f104 0510 	add.w	r5, r4, #16
 8009230:	f1a6 0c0c 	sub.w	ip, r6, #12
 8009234:	f1a2 040c 	sub.w	r4, r2, #12
 8009238:	f106 0010 	add.w	r0, r6, #16
 800923c:	3210      	adds	r2, #16
 800923e:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8009242:	ed55 5a02 	vldr	s11, [r5, #-8]
 8009246:	ed50 7a02 	vldr	s15, [r0, #-8]
 800924a:	ed52 1a02 	vldr	s3, [r2, #-8]
 800924e:	ed55 6a01 	vldr	s13, [r5, #-4]
 8009252:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8009256:	ed12 1a01 	vldr	s2, [r2, #-4]
 800925a:	ed10 8a01 	vldr	s16, [r0, #-4]
 800925e:	ee35 4a25 	vadd.f32	s8, s10, s11
 8009262:	ee30 6a26 	vadd.f32	s12, s0, s13
 8009266:	ee37 7a84 	vadd.f32	s14, s15, s8
 800926a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800926e:	ee37 7a21 	vadd.f32	s14, s14, s3
 8009272:	ee75 5a65 	vsub.f32	s11, s10, s11
 8009276:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800927a:	ed10 7a01 	vldr	s14, [r0, #-4]
 800927e:	ed52 6a01 	vldr	s13, [r2, #-4]
 8009282:	ee36 7a07 	vadd.f32	s14, s12, s14
 8009286:	ee78 aa25 	vadd.f32	s21, s16, s11
 800928a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800928e:	ee70 3a67 	vsub.f32	s7, s0, s15
 8009292:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8009296:	ed94 7a02 	vldr	s14, [r4, #8]
 800929a:	ed9c 2a02 	vldr	s4, [ip, #8]
 800929e:	ed91 ba02 	vldr	s22, [r1, #8]
 80092a2:	edd3 9a02 	vldr	s19, [r3, #8]
 80092a6:	edd4 2a01 	vldr	s5, [r4, #4]
 80092aa:	ed9c 9a01 	vldr	s18, [ip, #4]
 80092ae:	ed93 5a01 	vldr	s10, [r3, #4]
 80092b2:	edd1 0a01 	vldr	s1, [r1, #4]
 80092b6:	ee72 6a07 	vadd.f32	s13, s4, s14
 80092ba:	ee32 2a47 	vsub.f32	s4, s4, s14
 80092be:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80092c2:	ee79 4a22 	vadd.f32	s9, s18, s5
 80092c6:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80092ca:	ee79 2a62 	vsub.f32	s5, s18, s5
 80092ce:	ed8c 7a02 	vstr	s14, [ip, #8]
 80092d2:	ed91 7a01 	vldr	s14, [r1, #4]
 80092d6:	edd3 8a01 	vldr	s17, [r3, #4]
 80092da:	ee34 7a87 	vadd.f32	s14, s9, s14
 80092de:	ee3b 3a69 	vsub.f32	s6, s22, s19
 80092e2:	ee37 7a28 	vadd.f32	s14, s14, s17
 80092e6:	ee32 9a60 	vsub.f32	s18, s4, s1
 80092ea:	ed8c 7a01 	vstr	s14, [ip, #4]
 80092ee:	ed1a 7a01 	vldr	s14, [sl, #-4]
 80092f2:	ed1a aa02 	vldr	s20, [sl, #-8]
 80092f6:	ee73 8a22 	vadd.f32	s17, s6, s5
 80092fa:	ee39 9a05 	vadd.f32	s18, s18, s10
 80092fe:	ee7a aac1 	vsub.f32	s21, s21, s2
 8009302:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8009306:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800930a:	ee69 ba07 	vmul.f32	s23, s18, s14
 800930e:	ee6a aa87 	vmul.f32	s21, s21, s14
 8009312:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8009316:	ee63 ca87 	vmul.f32	s25, s7, s14
 800931a:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800931e:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8009322:	ee68 8a87 	vmul.f32	s17, s17, s14
 8009326:	ee73 3aea 	vsub.f32	s7, s7, s21
 800932a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800932e:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8009332:	ee3b aaca 	vsub.f32	s20, s23, s20
 8009336:	ee34 4a67 	vsub.f32	s8, s8, s15
 800933a:	ee76 6acb 	vsub.f32	s13, s13, s22
 800933e:	ee36 6a48 	vsub.f32	s12, s12, s16
 8009342:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8009346:	ed00 7a02 	vstr	s14, [r0, #-8]
 800934a:	ed40 3a01 	vstr	s7, [r0, #-4]
 800934e:	edc1 8a01 	vstr	s17, [r1, #4]
 8009352:	ed81 aa02 	vstr	s20, [r1, #8]
 8009356:	ed59 3a04 	vldr	s7, [r9, #-16]
 800935a:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800935e:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8009362:	ed59 6a03 	vldr	s13, [r9, #-12]
 8009366:	ee34 4a61 	vsub.f32	s8, s8, s3
 800936a:	ee36 6a41 	vsub.f32	s12, s12, s2
 800936e:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8009372:	ee66 9a26 	vmul.f32	s19, s12, s13
 8009376:	ee24 9a23 	vmul.f32	s18, s8, s7
 800937a:	ee26 6a23 	vmul.f32	s12, s12, s7
 800937e:	ee24 4a26 	vmul.f32	s8, s8, s13
 8009382:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009386:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800938a:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800938e:	ee36 6a44 	vsub.f32	s12, s12, s8
 8009392:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009396:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800939a:	ee79 3a29 	vadd.f32	s7, s18, s19
 800939e:	ee75 6a60 	vsub.f32	s13, s10, s1
 80093a2:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80093a6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80093aa:	ed45 3a02 	vstr	s7, [r5, #-8]
 80093ae:	ed05 6a01 	vstr	s12, [r5, #-4]
 80093b2:	ed84 7a01 	vstr	s14, [r4, #4]
 80093b6:	ed84 4a02 	vstr	s8, [r4, #8]
 80093ba:	ee35 6a81 	vadd.f32	s12, s11, s2
 80093be:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80093c2:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 80093c6:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 80093ca:	ee33 3a62 	vsub.f32	s6, s6, s5
 80093ce:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80093d2:	ee67 2a26 	vmul.f32	s5, s14, s13
 80093d6:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80093da:	ee26 5a25 	vmul.f32	s10, s12, s11
 80093de:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80093e2:	ee26 6a26 	vmul.f32	s12, s12, s13
 80093e6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80093ea:	ee63 6a26 	vmul.f32	s13, s6, s13
 80093ee:	ee23 3a25 	vmul.f32	s6, s6, s11
 80093f2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80093f6:	ee75 5a24 	vadd.f32	s11, s10, s9
 80093fa:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80093fe:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009402:	f1bb 0b01 	subs.w	fp, fp, #1
 8009406:	ed42 5a02 	vstr	s11, [r2, #-8]
 800940a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800940e:	f10e 0e08 	add.w	lr, lr, #8
 8009412:	ed83 3a02 	vstr	s6, [r3, #8]
 8009416:	ed83 7a01 	vstr	s14, [r3, #4]
 800941a:	f1ac 0c08 	sub.w	ip, ip, #8
 800941e:	f10a 0a08 	add.w	sl, sl, #8
 8009422:	f100 0008 	add.w	r0, r0, #8
 8009426:	f1a1 0108 	sub.w	r1, r1, #8
 800942a:	f109 0910 	add.w	r9, r9, #16
 800942e:	f105 0508 	add.w	r5, r5, #8
 8009432:	f1a4 0408 	sub.w	r4, r4, #8
 8009436:	f108 0818 	add.w	r8, r8, #24
 800943a:	f102 0208 	add.w	r2, r2, #8
 800943e:	f1a3 0308 	sub.w	r3, r3, #8
 8009442:	f47f aefc 	bne.w	800923e <arm_cfft_radix8by4_f32+0x12e>
 8009446:	9907      	ldr	r1, [sp, #28]
 8009448:	9800      	ldr	r0, [sp, #0]
 800944a:	00cb      	lsls	r3, r1, #3
 800944c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8009450:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009454:	9100      	str	r1, [sp, #0]
 8009456:	9904      	ldr	r1, [sp, #16]
 8009458:	4419      	add	r1, r3
 800945a:	9104      	str	r1, [sp, #16]
 800945c:	9903      	ldr	r1, [sp, #12]
 800945e:	4419      	add	r1, r3
 8009460:	9103      	str	r1, [sp, #12]
 8009462:	9906      	ldr	r1, [sp, #24]
 8009464:	4419      	add	r1, r3
 8009466:	9106      	str	r1, [sp, #24]
 8009468:	9905      	ldr	r1, [sp, #20]
 800946a:	441f      	add	r7, r3
 800946c:	4419      	add	r1, r3
 800946e:	9b02      	ldr	r3, [sp, #8]
 8009470:	9105      	str	r1, [sp, #20]
 8009472:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009476:	9302      	str	r3, [sp, #8]
 8009478:	9904      	ldr	r1, [sp, #16]
 800947a:	9805      	ldr	r0, [sp, #20]
 800947c:	ed91 4a00 	vldr	s8, [r1]
 8009480:	edd0 6a00 	vldr	s13, [r0]
 8009484:	9b06      	ldr	r3, [sp, #24]
 8009486:	ed97 3a00 	vldr	s6, [r7]
 800948a:	edd3 7a00 	vldr	s15, [r3]
 800948e:	edd0 4a01 	vldr	s9, [r0, #4]
 8009492:	edd1 3a01 	vldr	s7, [r1, #4]
 8009496:	ed97 2a01 	vldr	s4, [r7, #4]
 800949a:	ed93 7a01 	vldr	s14, [r3, #4]
 800949e:	9a03      	ldr	r2, [sp, #12]
 80094a0:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80094a4:	ee34 6a26 	vadd.f32	s12, s8, s13
 80094a8:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80094ac:	ee37 5a86 	vadd.f32	s10, s15, s12
 80094b0:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80094b4:	ee35 5a03 	vadd.f32	s10, s10, s6
 80094b8:	ee74 6a66 	vsub.f32	s13, s8, s13
 80094bc:	ed81 5a00 	vstr	s10, [r1]
 80094c0:	ed93 5a01 	vldr	s10, [r3, #4]
 80094c4:	edd7 4a01 	vldr	s9, [r7, #4]
 80094c8:	ee35 5a85 	vadd.f32	s10, s11, s10
 80094cc:	ee37 4a26 	vadd.f32	s8, s14, s13
 80094d0:	ee35 5a24 	vadd.f32	s10, s10, s9
 80094d4:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80094d8:	ed81 5a01 	vstr	s10, [r1, #4]
 80094dc:	edd2 1a00 	vldr	s3, [r2]
 80094e0:	edd2 2a01 	vldr	s5, [r2, #4]
 80094e4:	ee34 5a83 	vadd.f32	s10, s9, s6
 80094e8:	ee34 4a42 	vsub.f32	s8, s8, s4
 80094ec:	ee36 6a67 	vsub.f32	s12, s12, s15
 80094f0:	ee64 4a21 	vmul.f32	s9, s8, s3
 80094f4:	ee24 4a22 	vmul.f32	s8, s8, s5
 80094f8:	ee65 2a22 	vmul.f32	s5, s10, s5
 80094fc:	ee25 5a21 	vmul.f32	s10, s10, s3
 8009500:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8009504:	ee35 5a44 	vsub.f32	s10, s10, s8
 8009508:	edc3 2a00 	vstr	s5, [r3]
 800950c:	ed83 5a01 	vstr	s10, [r3, #4]
 8009510:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8009514:	9b00      	ldr	r3, [sp, #0]
 8009516:	ee36 6a43 	vsub.f32	s12, s12, s6
 800951a:	ed93 4a01 	vldr	s8, [r3, #4]
 800951e:	ed93 5a00 	vldr	s10, [r3]
 8009522:	9b02      	ldr	r3, [sp, #8]
 8009524:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8009528:	ee66 4a05 	vmul.f32	s9, s12, s10
 800952c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009530:	ee26 6a04 	vmul.f32	s12, s12, s8
 8009534:	ee65 5a84 	vmul.f32	s11, s11, s8
 8009538:	ee35 6a46 	vsub.f32	s12, s10, s12
 800953c:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8009540:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8009544:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009548:	ed80 6a01 	vstr	s12, [r0, #4]
 800954c:	edc0 5a00 	vstr	s11, [r0]
 8009550:	edd3 5a01 	vldr	s11, [r3, #4]
 8009554:	edd3 6a00 	vldr	s13, [r3]
 8009558:	ee37 7a02 	vadd.f32	s14, s14, s4
 800955c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8009560:	ee27 6a26 	vmul.f32	s12, s14, s13
 8009564:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009568:	ee27 7a25 	vmul.f32	s14, s14, s11
 800956c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009570:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009574:	ee76 7a27 	vadd.f32	s15, s12, s15
 8009578:	ed87 7a01 	vstr	s14, [r7, #4]
 800957c:	edc7 7a00 	vstr	s15, [r7]
 8009580:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8009584:	4621      	mov	r1, r4
 8009586:	686a      	ldr	r2, [r5, #4]
 8009588:	2304      	movs	r3, #4
 800958a:	f000 f8f3 	bl	8009774 <arm_radix8_butterfly_f32>
 800958e:	4630      	mov	r0, r6
 8009590:	4621      	mov	r1, r4
 8009592:	686a      	ldr	r2, [r5, #4]
 8009594:	2304      	movs	r3, #4
 8009596:	f000 f8ed 	bl	8009774 <arm_radix8_butterfly_f32>
 800959a:	9808      	ldr	r0, [sp, #32]
 800959c:	686a      	ldr	r2, [r5, #4]
 800959e:	4621      	mov	r1, r4
 80095a0:	2304      	movs	r3, #4
 80095a2:	f000 f8e7 	bl	8009774 <arm_radix8_butterfly_f32>
 80095a6:	686a      	ldr	r2, [r5, #4]
 80095a8:	9801      	ldr	r0, [sp, #4]
 80095aa:	4621      	mov	r1, r4
 80095ac:	2304      	movs	r3, #4
 80095ae:	b00d      	add	sp, #52	; 0x34
 80095b0:	ecbd 8b0a 	vpop	{d8-d12}
 80095b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b8:	f000 b8dc 	b.w	8009774 <arm_radix8_butterfly_f32>

080095bc <arm_cfft_f32>:
 80095bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095c0:	2a01      	cmp	r2, #1
 80095c2:	4606      	mov	r6, r0
 80095c4:	4617      	mov	r7, r2
 80095c6:	460c      	mov	r4, r1
 80095c8:	4698      	mov	r8, r3
 80095ca:	8805      	ldrh	r5, [r0, #0]
 80095cc:	d056      	beq.n	800967c <arm_cfft_f32+0xc0>
 80095ce:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80095d2:	d063      	beq.n	800969c <arm_cfft_f32+0xe0>
 80095d4:	d916      	bls.n	8009604 <arm_cfft_f32+0x48>
 80095d6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80095da:	d01a      	beq.n	8009612 <arm_cfft_f32+0x56>
 80095dc:	d947      	bls.n	800966e <arm_cfft_f32+0xb2>
 80095de:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80095e2:	d05b      	beq.n	800969c <arm_cfft_f32+0xe0>
 80095e4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80095e8:	d105      	bne.n	80095f6 <arm_cfft_f32+0x3a>
 80095ea:	2301      	movs	r3, #1
 80095ec:	6872      	ldr	r2, [r6, #4]
 80095ee:	4629      	mov	r1, r5
 80095f0:	4620      	mov	r0, r4
 80095f2:	f000 f8bf 	bl	8009774 <arm_radix8_butterfly_f32>
 80095f6:	f1b8 0f00 	cmp.w	r8, #0
 80095fa:	d111      	bne.n	8009620 <arm_cfft_f32+0x64>
 80095fc:	2f01      	cmp	r7, #1
 80095fe:	d016      	beq.n	800962e <arm_cfft_f32+0x72>
 8009600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009604:	2d20      	cmp	r5, #32
 8009606:	d049      	beq.n	800969c <arm_cfft_f32+0xe0>
 8009608:	d935      	bls.n	8009676 <arm_cfft_f32+0xba>
 800960a:	2d40      	cmp	r5, #64	; 0x40
 800960c:	d0ed      	beq.n	80095ea <arm_cfft_f32+0x2e>
 800960e:	2d80      	cmp	r5, #128	; 0x80
 8009610:	d1f1      	bne.n	80095f6 <arm_cfft_f32+0x3a>
 8009612:	4621      	mov	r1, r4
 8009614:	4630      	mov	r0, r6
 8009616:	f7ff fcab 	bl	8008f70 <arm_cfft_radix8by2_f32>
 800961a:	f1b8 0f00 	cmp.w	r8, #0
 800961e:	d0ed      	beq.n	80095fc <arm_cfft_f32+0x40>
 8009620:	68b2      	ldr	r2, [r6, #8]
 8009622:	89b1      	ldrh	r1, [r6, #12]
 8009624:	4620      	mov	r0, r4
 8009626:	f000 f841 	bl	80096ac <arm_bitreversal_32>
 800962a:	2f01      	cmp	r7, #1
 800962c:	d1e8      	bne.n	8009600 <arm_cfft_f32+0x44>
 800962e:	ee07 5a90 	vmov	s15, r5
 8009632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009636:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800963a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800963e:	2d00      	cmp	r5, #0
 8009640:	d0de      	beq.n	8009600 <arm_cfft_f32+0x44>
 8009642:	f104 0108 	add.w	r1, r4, #8
 8009646:	2300      	movs	r3, #0
 8009648:	3301      	adds	r3, #1
 800964a:	429d      	cmp	r5, r3
 800964c:	f101 0108 	add.w	r1, r1, #8
 8009650:	ed11 7a04 	vldr	s14, [r1, #-16]
 8009654:	ed51 7a03 	vldr	s15, [r1, #-12]
 8009658:	ee27 7a26 	vmul.f32	s14, s14, s13
 800965c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009660:	ed01 7a04 	vstr	s14, [r1, #-16]
 8009664:	ed41 7a03 	vstr	s15, [r1, #-12]
 8009668:	d1ee      	bne.n	8009648 <arm_cfft_f32+0x8c>
 800966a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800966e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8009672:	d0ba      	beq.n	80095ea <arm_cfft_f32+0x2e>
 8009674:	e7bf      	b.n	80095f6 <arm_cfft_f32+0x3a>
 8009676:	2d10      	cmp	r5, #16
 8009678:	d0cb      	beq.n	8009612 <arm_cfft_f32+0x56>
 800967a:	e7bc      	b.n	80095f6 <arm_cfft_f32+0x3a>
 800967c:	b19d      	cbz	r5, 80096a6 <arm_cfft_f32+0xea>
 800967e:	f101 030c 	add.w	r3, r1, #12
 8009682:	2200      	movs	r2, #0
 8009684:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009688:	3201      	adds	r2, #1
 800968a:	eef1 7a67 	vneg.f32	s15, s15
 800968e:	4295      	cmp	r5, r2
 8009690:	ed43 7a02 	vstr	s15, [r3, #-8]
 8009694:	f103 0308 	add.w	r3, r3, #8
 8009698:	d1f4      	bne.n	8009684 <arm_cfft_f32+0xc8>
 800969a:	e798      	b.n	80095ce <arm_cfft_f32+0x12>
 800969c:	4621      	mov	r1, r4
 800969e:	4630      	mov	r0, r6
 80096a0:	f7ff fd36 	bl	8009110 <arm_cfft_radix8by4_f32>
 80096a4:	e7a7      	b.n	80095f6 <arm_cfft_f32+0x3a>
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d0aa      	beq.n	8009600 <arm_cfft_f32+0x44>
 80096aa:	e7b9      	b.n	8009620 <arm_cfft_f32+0x64>

080096ac <arm_bitreversal_32>:
 80096ac:	b1e9      	cbz	r1, 80096ea <arm_bitreversal_32+0x3e>
 80096ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096b0:	2500      	movs	r5, #0
 80096b2:	f102 0e02 	add.w	lr, r2, #2
 80096b6:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 80096ba:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80096be:	08a4      	lsrs	r4, r4, #2
 80096c0:	089b      	lsrs	r3, r3, #2
 80096c2:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80096c6:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80096ca:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80096ce:	00a6      	lsls	r6, r4, #2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80096d6:	3304      	adds	r3, #4
 80096d8:	1d34      	adds	r4, r6, #4
 80096da:	3502      	adds	r5, #2
 80096dc:	58c6      	ldr	r6, [r0, r3]
 80096de:	5907      	ldr	r7, [r0, r4]
 80096e0:	50c7      	str	r7, [r0, r3]
 80096e2:	428d      	cmp	r5, r1
 80096e4:	5106      	str	r6, [r0, r4]
 80096e6:	d3e6      	bcc.n	80096b6 <arm_bitreversal_32+0xa>
 80096e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096ea:	4770      	bx	lr

080096ec <arm_abs_f32>:
 80096ec:	b470      	push	{r4, r5, r6}
 80096ee:	0896      	lsrs	r6, r2, #2
 80096f0:	d025      	beq.n	800973e <arm_abs_f32+0x52>
 80096f2:	f100 0410 	add.w	r4, r0, #16
 80096f6:	f101 0310 	add.w	r3, r1, #16
 80096fa:	4635      	mov	r5, r6
 80096fc:	ed54 7a04 	vldr	s15, [r4, #-16]
 8009700:	eef0 7ae7 	vabs.f32	s15, s15
 8009704:	ed43 7a04 	vstr	s15, [r3, #-16]
 8009708:	ed54 7a03 	vldr	s15, [r4, #-12]
 800970c:	eef0 7ae7 	vabs.f32	s15, s15
 8009710:	ed43 7a03 	vstr	s15, [r3, #-12]
 8009714:	ed54 7a02 	vldr	s15, [r4, #-8]
 8009718:	eef0 7ae7 	vabs.f32	s15, s15
 800971c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8009720:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009724:	3d01      	subs	r5, #1
 8009726:	eef0 7ae7 	vabs.f32	s15, s15
 800972a:	ed43 7a01 	vstr	s15, [r3, #-4]
 800972e:	f104 0410 	add.w	r4, r4, #16
 8009732:	f103 0310 	add.w	r3, r3, #16
 8009736:	d1e1      	bne.n	80096fc <arm_abs_f32+0x10>
 8009738:	0136      	lsls	r6, r6, #4
 800973a:	4430      	add	r0, r6
 800973c:	4431      	add	r1, r6
 800973e:	f012 0203 	ands.w	r2, r2, #3
 8009742:	d015      	beq.n	8009770 <arm_abs_f32+0x84>
 8009744:	edd0 7a00 	vldr	s15, [r0]
 8009748:	3a01      	subs	r2, #1
 800974a:	eef0 7ae7 	vabs.f32	s15, s15
 800974e:	edc1 7a00 	vstr	s15, [r1]
 8009752:	d00d      	beq.n	8009770 <arm_abs_f32+0x84>
 8009754:	edd0 7a01 	vldr	s15, [r0, #4]
 8009758:	2a01      	cmp	r2, #1
 800975a:	eef0 7ae7 	vabs.f32	s15, s15
 800975e:	edc1 7a01 	vstr	s15, [r1, #4]
 8009762:	d005      	beq.n	8009770 <arm_abs_f32+0x84>
 8009764:	edd0 7a02 	vldr	s15, [r0, #8]
 8009768:	eef0 7ae7 	vabs.f32	s15, s15
 800976c:	edc1 7a02 	vstr	s15, [r1, #8]
 8009770:	bc70      	pop	{r4, r5, r6}
 8009772:	4770      	bx	lr

08009774 <arm_radix8_butterfly_f32>:
 8009774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009778:	ed2d 8b10 	vpush	{d8-d15}
 800977c:	b095      	sub	sp, #84	; 0x54
 800977e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8009782:	4603      	mov	r3, r0
 8009784:	3304      	adds	r3, #4
 8009786:	ed9f bab9 	vldr	s22, [pc, #740]	; 8009a6c <arm_radix8_butterfly_f32+0x2f8>
 800978a:	9012      	str	r0, [sp, #72]	; 0x48
 800978c:	468b      	mov	fp, r1
 800978e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009790:	4689      	mov	r9, r1
 8009792:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8009796:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009798:	960f      	str	r6, [sp, #60]	; 0x3c
 800979a:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800979e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 80097a2:	eb03 0508 	add.w	r5, r3, r8
 80097a6:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 80097aa:	eb05 040e 	add.w	r4, r5, lr
 80097ae:	0137      	lsls	r7, r6, #4
 80097b0:	eba6 030a 	sub.w	r3, r6, sl
 80097b4:	eb04 000e 	add.w	r0, r4, lr
 80097b8:	44b2      	add	sl, r6
 80097ba:	1d3a      	adds	r2, r7, #4
 80097bc:	9702      	str	r7, [sp, #8]
 80097be:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80097c2:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 80097c6:	ebae 0c06 	sub.w	ip, lr, r6
 80097ca:	9703      	str	r7, [sp, #12]
 80097cc:	eb03 0708 	add.w	r7, r3, r8
 80097d0:	9701      	str	r7, [sp, #4]
 80097d2:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 80097d6:	9706      	str	r7, [sp, #24]
 80097d8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80097da:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80097de:	f10e 0104 	add.w	r1, lr, #4
 80097e2:	4439      	add	r1, r7
 80097e4:	443a      	add	r2, r7
 80097e6:	0137      	lsls	r7, r6, #4
 80097e8:	00f6      	lsls	r6, r6, #3
 80097ea:	9704      	str	r7, [sp, #16]
 80097ec:	9605      	str	r6, [sp, #20]
 80097ee:	9f01      	ldr	r7, [sp, #4]
 80097f0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80097f2:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 80097f6:	f04f 0c00 	mov.w	ip, #0
 80097fa:	edd4 6a00 	vldr	s13, [r4]
 80097fe:	edd7 1a00 	vldr	s3, [r7]
 8009802:	ed16 aa01 	vldr	s20, [r6, #-4]
 8009806:	edd5 5a00 	vldr	s11, [r5]
 800980a:	ed52 9a01 	vldr	s19, [r2, #-4]
 800980e:	ed90 6a00 	vldr	s12, [r0]
 8009812:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009816:	ed93 3a00 	vldr	s6, [r3]
 800981a:	ee39 0a86 	vadd.f32	s0, s19, s12
 800981e:	ee33 2a21 	vadd.f32	s4, s6, s3
 8009822:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8009826:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800982a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800982e:	ee34 4a80 	vadd.f32	s8, s9, s0
 8009832:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009836:	ee74 6a07 	vadd.f32	s13, s8, s14
 800983a:	ee34 4a47 	vsub.f32	s8, s8, s14
 800983e:	ed46 6a01 	vstr	s13, [r6, #-4]
 8009842:	ed85 4a00 	vstr	s8, [r5]
 8009846:	edd1 6a00 	vldr	s13, [r1]
 800984a:	ed94 9a01 	vldr	s18, [r4, #4]
 800984e:	edd3 2a01 	vldr	s5, [r3, #4]
 8009852:	edd7 8a01 	vldr	s17, [r7, #4]
 8009856:	edd6 0a00 	vldr	s1, [r6]
 800985a:	edd5 3a01 	vldr	s7, [r5, #4]
 800985e:	ed90 8a01 	vldr	s16, [r0, #4]
 8009862:	ed92 7a00 	vldr	s14, [r2]
 8009866:	ee33 3a61 	vsub.f32	s6, s6, s3
 800986a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800986e:	ee72 aae8 	vsub.f32	s21, s5, s17
 8009872:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8009876:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800987a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800987e:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8009882:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8009886:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800988a:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800988e:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8009892:	ee77 0a08 	vadd.f32	s1, s14, s16
 8009896:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800989a:	ee37 7a48 	vsub.f32	s14, s14, s16
 800989e:	ee61 1a8b 	vmul.f32	s3, s3, s22
 80098a2:	ee7a 5a65 	vsub.f32	s11, s20, s11
 80098a6:	ee76 6a89 	vadd.f32	s13, s13, s18
 80098aa:	ee24 4a0b 	vmul.f32	s8, s8, s22
 80098ae:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80098b2:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80098b6:	ee35 5a42 	vsub.f32	s10, s10, s4
 80098ba:	ee36 0aa2 	vadd.f32	s0, s13, s5
 80098be:	ee33 2a20 	vadd.f32	s4, s6, s1
 80098c2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80098c6:	ee33 3a60 	vsub.f32	s6, s6, s1
 80098ca:	ee75 2aa1 	vadd.f32	s5, s11, s3
 80098ce:	ee77 0a01 	vadd.f32	s1, s14, s2
 80098d2:	ee75 5ae1 	vsub.f32	s11, s11, s3
 80098d6:	ee37 7a41 	vsub.f32	s14, s14, s2
 80098da:	ee73 1a84 	vadd.f32	s3, s7, s8
 80098de:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80098e2:	ee76 3a27 	vadd.f32	s7, s12, s15
 80098e6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80098ea:	ee32 8a00 	vadd.f32	s16, s4, s0
 80098ee:	ee33 1a45 	vsub.f32	s2, s6, s10
 80098f2:	ee32 2a40 	vsub.f32	s4, s4, s0
 80098f6:	ee35 5a03 	vadd.f32	s10, s10, s6
 80098fa:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80098fe:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8009902:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8009906:	ee34 6a67 	vsub.f32	s12, s8, s15
 800990a:	ee75 4a87 	vadd.f32	s9, s11, s14
 800990e:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8009912:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8009916:	ee77 7a84 	vadd.f32	s15, s15, s8
 800991a:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800991e:	44dc      	add	ip, fp
 8009920:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8009924:	45e1      	cmp	r9, ip
 8009926:	ed86 8a00 	vstr	s16, [r6]
 800992a:	ed85 2a01 	vstr	s4, [r5, #4]
 800992e:	4456      	add	r6, sl
 8009930:	ed02 0a01 	vstr	s0, [r2, #-4]
 8009934:	4455      	add	r5, sl
 8009936:	edc0 6a00 	vstr	s13, [r0]
 800993a:	ed82 1a00 	vstr	s2, [r2]
 800993e:	ed80 5a01 	vstr	s10, [r0, #4]
 8009942:	4452      	add	r2, sl
 8009944:	ed01 3a01 	vstr	s6, [r1, #-4]
 8009948:	4450      	add	r0, sl
 800994a:	edc7 2a00 	vstr	s5, [r7]
 800994e:	edc4 4a00 	vstr	s9, [r4]
 8009952:	ed83 7a00 	vstr	s14, [r3]
 8009956:	edc1 5a00 	vstr	s11, [r1]
 800995a:	edc7 3a01 	vstr	s7, [r7, #4]
 800995e:	4451      	add	r1, sl
 8009960:	ed84 6a01 	vstr	s12, [r4, #4]
 8009964:	4457      	add	r7, sl
 8009966:	edc3 7a01 	vstr	s15, [r3, #4]
 800996a:	4454      	add	r4, sl
 800996c:	4453      	add	r3, sl
 800996e:	f63f af44 	bhi.w	80097fa <arm_radix8_butterfly_f32+0x86>
 8009972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009974:	2b07      	cmp	r3, #7
 8009976:	f240 81b7 	bls.w	8009ce8 <arm_radix8_butterfly_f32+0x574>
 800997a:	9b06      	ldr	r3, [sp, #24]
 800997c:	9903      	ldr	r1, [sp, #12]
 800997e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009980:	9e05      	ldr	r6, [sp, #20]
 8009982:	9a04      	ldr	r2, [sp, #16]
 8009984:	f103 0c08 	add.w	ip, r3, #8
 8009988:	9b02      	ldr	r3, [sp, #8]
 800998a:	3108      	adds	r1, #8
 800998c:	f108 0808 	add.w	r8, r8, #8
 8009990:	1841      	adds	r1, r0, r1
 8009992:	3608      	adds	r6, #8
 8009994:	330c      	adds	r3, #12
 8009996:	4604      	mov	r4, r0
 8009998:	4444      	add	r4, r8
 800999a:	18c3      	adds	r3, r0, r3
 800999c:	9109      	str	r1, [sp, #36]	; 0x24
 800999e:	1981      	adds	r1, r0, r6
 80099a0:	f10e 0e08 	add.w	lr, lr, #8
 80099a4:	3208      	adds	r2, #8
 80099a6:	940b      	str	r4, [sp, #44]	; 0x2c
 80099a8:	9107      	str	r1, [sp, #28]
 80099aa:	4604      	mov	r4, r0
 80099ac:	4601      	mov	r1, r0
 80099ae:	9304      	str	r3, [sp, #16]
 80099b0:	f100 030c 	add.w	r3, r0, #12
 80099b4:	4474      	add	r4, lr
 80099b6:	f04f 0801 	mov.w	r8, #1
 80099ba:	1882      	adds	r2, r0, r2
 80099bc:	4461      	add	r1, ip
 80099be:	9305      	str	r3, [sp, #20]
 80099c0:	464b      	mov	r3, r9
 80099c2:	940a      	str	r4, [sp, #40]	; 0x28
 80099c4:	46c1      	mov	r9, r8
 80099c6:	9208      	str	r2, [sp, #32]
 80099c8:	46d8      	mov	r8, fp
 80099ca:	9106      	str	r1, [sp, #24]
 80099cc:	f04f 0e00 	mov.w	lr, #0
 80099d0:	469b      	mov	fp, r3
 80099d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80099d6:	449e      	add	lr, r3
 80099d8:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80099dc:	441a      	add	r2, r3
 80099de:	920e      	str	r2, [sp, #56]	; 0x38
 80099e0:	441a      	add	r2, r3
 80099e2:	18d4      	adds	r4, r2, r3
 80099e4:	18e5      	adds	r5, r4, r3
 80099e6:	18ee      	adds	r6, r5, r3
 80099e8:	18f7      	adds	r7, r6, r3
 80099ea:	eb07 0c03 	add.w	ip, r7, r3
 80099ee:	920d      	str	r2, [sp, #52]	; 0x34
 80099f0:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 80099f4:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 80099f8:	910c      	str	r1, [sp, #48]	; 0x30
 80099fa:	4419      	add	r1, r3
 80099fc:	9103      	str	r1, [sp, #12]
 80099fe:	4419      	add	r1, r3
 8009a00:	18ca      	adds	r2, r1, r3
 8009a02:	9202      	str	r2, [sp, #8]
 8009a04:	441a      	add	r2, r3
 8009a06:	18d0      	adds	r0, r2, r3
 8009a08:	ed92 ea01 	vldr	s28, [r2, #4]
 8009a0c:	9a02      	ldr	r2, [sp, #8]
 8009a0e:	edd4 7a00 	vldr	s15, [r4]
 8009a12:	edd2 da01 	vldr	s27, [r2, #4]
 8009a16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a18:	ed91 da01 	vldr	s26, [r1, #4]
 8009a1c:	ed92 ca01 	vldr	s24, [r2, #4]
 8009a20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a22:	9903      	ldr	r1, [sp, #12]
 8009a24:	edcd 7a03 	vstr	s15, [sp, #12]
 8009a28:	edd2 7a00 	vldr	s15, [r2]
 8009a2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a2e:	edcd 7a02 	vstr	s15, [sp, #8]
 8009a32:	edd2 7a00 	vldr	s15, [r2]
 8009a36:	edd0 ea01 	vldr	s29, [r0, #4]
 8009a3a:	edd1 ca01 	vldr	s25, [r1, #4]
 8009a3e:	eddc ba00 	vldr	s23, [ip]
 8009a42:	edd7 aa00 	vldr	s21, [r7]
 8009a46:	ed96 aa00 	vldr	s20, [r6]
 8009a4a:	edd5 9a00 	vldr	s19, [r5]
 8009a4e:	edcd 7a01 	vstr	s15, [sp, #4]
 8009a52:	4403      	add	r3, r0
 8009a54:	ed93 fa01 	vldr	s30, [r3, #4]
 8009a58:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8009a5c:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8009a60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009a68:	46cc      	mov	ip, r9
 8009a6a:	e001      	b.n	8009a70 <arm_radix8_butterfly_f32+0x2fc>
 8009a6c:	3f3504f3 	.word	0x3f3504f3
 8009a70:	ed91 6a00 	vldr	s12, [r1]
 8009a74:	ed93 5a00 	vldr	s10, [r3]
 8009a78:	edd0 fa00 	vldr	s31, [r0]
 8009a7c:	edd4 7a00 	vldr	s15, [r4]
 8009a80:	ed95 7a00 	vldr	s14, [r5]
 8009a84:	ed56 3a01 	vldr	s7, [r6, #-4]
 8009a88:	ed17 3a01 	vldr	s6, [r7, #-4]
 8009a8c:	ed92 2a00 	vldr	s4, [r2]
 8009a90:	ed96 0a00 	vldr	s0, [r6]
 8009a94:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009a98:	ee32 1a06 	vadd.f32	s2, s4, s12
 8009a9c:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8009aa0:	ee77 4a87 	vadd.f32	s9, s15, s14
 8009aa4:	ee78 1a04 	vadd.f32	s3, s16, s8
 8009aa8:	ee71 6a24 	vadd.f32	s13, s2, s9
 8009aac:	ee32 2a46 	vsub.f32	s4, s4, s12
 8009ab0:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8009ab4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ab8:	ed06 6a01 	vstr	s12, [r6, #-4]
 8009abc:	edd4 8a01 	vldr	s17, [r4, #4]
 8009ac0:	ed92 9a01 	vldr	s18, [r2, #4]
 8009ac4:	edd7 0a00 	vldr	s1, [r7]
 8009ac8:	edd1 2a01 	vldr	s5, [r1, #4]
 8009acc:	ed95 7a01 	vldr	s14, [r5, #4]
 8009ad0:	ed93 6a01 	vldr	s12, [r3, #4]
 8009ad4:	edd0 5a01 	vldr	s11, [r0, #4]
 8009ad8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8009adc:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8009ae0:	ee39 5a62 	vsub.f32	s10, s18, s5
 8009ae4:	ee78 fac7 	vsub.f32	s31, s17, s14
 8009ae8:	ee38 4a44 	vsub.f32	s8, s16, s8
 8009aec:	ee38 7a87 	vadd.f32	s14, s17, s14
 8009af0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8009af4:	ee79 2a22 	vadd.f32	s5, s18, s5
 8009af8:	ee32 9a27 	vadd.f32	s18, s4, s15
 8009afc:	ee72 7a67 	vsub.f32	s15, s4, s15
 8009b00:	ee30 2a06 	vadd.f32	s4, s0, s12
 8009b04:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8009b08:	ee71 4a64 	vsub.f32	s9, s2, s9
 8009b0c:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8009b10:	ee32 1a08 	vadd.f32	s2, s4, s16
 8009b14:	ee72 fa87 	vadd.f32	s31, s5, s14
 8009b18:	ee32 2a48 	vsub.f32	s4, s4, s16
 8009b1c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8009b20:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8009b24:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8009b28:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8009b2c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8009b30:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8009b34:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8009b38:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8009b3c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8009b40:	ee74 0a22 	vadd.f32	s1, s8, s5
 8009b44:	ee36 0a28 	vadd.f32	s0, s12, s17
 8009b48:	ee74 2a62 	vsub.f32	s5, s8, s5
 8009b4c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8009b50:	ee32 4a64 	vsub.f32	s8, s4, s9
 8009b54:	ee73 8a09 	vadd.f32	s17, s6, s18
 8009b58:	ee74 4a82 	vadd.f32	s9, s9, s4
 8009b5c:	ee33 9a49 	vsub.f32	s18, s6, s18
 8009b60:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8009b64:	ee35 3a85 	vadd.f32	s6, s11, s10
 8009b68:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8009b6c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8009b70:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8009b74:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8009b78:	ee30 7a68 	vsub.f32	s14, s0, s17
 8009b7c:	ee35 8a03 	vadd.f32	s16, s10, s6
 8009b80:	ee38 0a80 	vadd.f32	s0, s17, s0
 8009b84:	ee73 3a82 	vadd.f32	s7, s7, s4
 8009b88:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8009b8c:	ed9d 2a01 	vldr	s4, [sp, #4]
 8009b90:	eddd 1a02 	vldr	s3, [sp, #8]
 8009b94:	ee35 5a43 	vsub.f32	s10, s10, s6
 8009b98:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8009b9c:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8009ba0:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8009ba4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009ba8:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8009bac:	ee76 5a49 	vsub.f32	s11, s12, s18
 8009bb0:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8009bb4:	ee39 6a06 	vadd.f32	s12, s18, s12
 8009bb8:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8009bbc:	ee21 4a84 	vmul.f32	s8, s3, s8
 8009bc0:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8009bc4:	ee22 7a07 	vmul.f32	s14, s4, s14
 8009bc8:	ee22 2a08 	vmul.f32	s4, s4, s16
 8009bcc:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8009bd0:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8009bd4:	ee31 1a09 	vadd.f32	s2, s2, s18
 8009bd8:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8009bdc:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8009be0:	ee74 0a60 	vsub.f32	s1, s8, s1
 8009be4:	ee37 7a48 	vsub.f32	s14, s14, s16
 8009be8:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8009bec:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8009bf0:	ee72 1a21 	vadd.f32	s3, s4, s3
 8009bf4:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8009bf8:	ee38 2a89 	vadd.f32	s4, s17, s18
 8009bfc:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8009c00:	ee38 8a04 	vadd.f32	s16, s16, s8
 8009c04:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8009c08:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8009c0c:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8009c10:	eddd 5a03 	vldr	s11, [sp, #12]
 8009c14:	edc6 fa00 	vstr	s31, [r6]
 8009c18:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8009c1c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8009c20:	ee30 0a45 	vsub.f32	s0, s0, s10
 8009c24:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8009c28:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8009c2c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8009c30:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8009c34:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8009c38:	ee25 6a86 	vmul.f32	s12, s11, s12
 8009c3c:	ee74 4a89 	vadd.f32	s9, s9, s18
 8009c40:	ee34 3a43 	vsub.f32	s6, s8, s6
 8009c44:	ee78 8a85 	vadd.f32	s17, s17, s10
 8009c48:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009c4c:	44c4      	add	ip, r8
 8009c4e:	45e3      	cmp	fp, ip
 8009c50:	edc3 3a00 	vstr	s7, [r3]
 8009c54:	edc3 6a01 	vstr	s13, [r3, #4]
 8009c58:	4456      	add	r6, sl
 8009c5a:	ed07 1a01 	vstr	s2, [r7, #-4]
 8009c5e:	edc7 0a00 	vstr	s1, [r7]
 8009c62:	4453      	add	r3, sl
 8009c64:	ed80 2a00 	vstr	s4, [r0]
 8009c68:	edc0 2a01 	vstr	s5, [r0, #4]
 8009c6c:	4457      	add	r7, sl
 8009c6e:	edc2 1a00 	vstr	s3, [r2]
 8009c72:	ed82 7a01 	vstr	s14, [r2, #4]
 8009c76:	4450      	add	r0, sl
 8009c78:	ed85 8a00 	vstr	s16, [r5]
 8009c7c:	ed85 0a01 	vstr	s0, [r5, #4]
 8009c80:	4452      	add	r2, sl
 8009c82:	edc1 4a00 	vstr	s9, [r1]
 8009c86:	4455      	add	r5, sl
 8009c88:	ed81 3a01 	vstr	s6, [r1, #4]
 8009c8c:	edc4 8a00 	vstr	s17, [r4]
 8009c90:	ed84 6a01 	vstr	s12, [r4, #4]
 8009c94:	4451      	add	r1, sl
 8009c96:	4454      	add	r4, sl
 8009c98:	f63f aeea 	bhi.w	8009a70 <arm_radix8_butterfly_f32+0x2fc>
 8009c9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c9e:	3308      	adds	r3, #8
 8009ca0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ca4:	3308      	adds	r3, #8
 8009ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009caa:	3308      	adds	r3, #8
 8009cac:	9309      	str	r3, [sp, #36]	; 0x24
 8009cae:	9b08      	ldr	r3, [sp, #32]
 8009cb0:	3308      	adds	r3, #8
 8009cb2:	9308      	str	r3, [sp, #32]
 8009cb4:	9b07      	ldr	r3, [sp, #28]
 8009cb6:	3308      	adds	r3, #8
 8009cb8:	9307      	str	r3, [sp, #28]
 8009cba:	9b06      	ldr	r3, [sp, #24]
 8009cbc:	3308      	adds	r3, #8
 8009cbe:	9306      	str	r3, [sp, #24]
 8009cc0:	9b05      	ldr	r3, [sp, #20]
 8009cc2:	3308      	adds	r3, #8
 8009cc4:	9305      	str	r3, [sp, #20]
 8009cc6:	9b04      	ldr	r3, [sp, #16]
 8009cc8:	3308      	adds	r3, #8
 8009cca:	9304      	str	r3, [sp, #16]
 8009ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cce:	f109 0901 	add.w	r9, r9, #1
 8009cd2:	454b      	cmp	r3, r9
 8009cd4:	f47f ae7d 	bne.w	80099d2 <arm_radix8_butterfly_f32+0x25e>
 8009cd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	46d9      	mov	r9, fp
 8009ce0:	9310      	str	r3, [sp, #64]	; 0x40
 8009ce2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8009ce6:	e554      	b.n	8009792 <arm_radix8_butterfly_f32+0x1e>
 8009ce8:	b015      	add	sp, #84	; 0x54
 8009cea:	ecbd 8b10 	vpop	{d8-d15}
 8009cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf2:	bf00      	nop

08009cf4 <memset>:
 8009cf4:	4402      	add	r2, r0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d100      	bne.n	8009cfe <memset+0xa>
 8009cfc:	4770      	bx	lr
 8009cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8009d02:	e7f9      	b.n	8009cf8 <memset+0x4>

08009d04 <__libc_init_array>:
 8009d04:	b570      	push	{r4, r5, r6, lr}
 8009d06:	4d0d      	ldr	r5, [pc, #52]	; (8009d3c <__libc_init_array+0x38>)
 8009d08:	4c0d      	ldr	r4, [pc, #52]	; (8009d40 <__libc_init_array+0x3c>)
 8009d0a:	1b64      	subs	r4, r4, r5
 8009d0c:	10a4      	asrs	r4, r4, #2
 8009d0e:	2600      	movs	r6, #0
 8009d10:	42a6      	cmp	r6, r4
 8009d12:	d109      	bne.n	8009d28 <__libc_init_array+0x24>
 8009d14:	4d0b      	ldr	r5, [pc, #44]	; (8009d44 <__libc_init_array+0x40>)
 8009d16:	4c0c      	ldr	r4, [pc, #48]	; (8009d48 <__libc_init_array+0x44>)
 8009d18:	f000 fd50 	bl	800a7bc <_init>
 8009d1c:	1b64      	subs	r4, r4, r5
 8009d1e:	10a4      	asrs	r4, r4, #2
 8009d20:	2600      	movs	r6, #0
 8009d22:	42a6      	cmp	r6, r4
 8009d24:	d105      	bne.n	8009d32 <__libc_init_array+0x2e>
 8009d26:	bd70      	pop	{r4, r5, r6, pc}
 8009d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d2c:	4798      	blx	r3
 8009d2e:	3601      	adds	r6, #1
 8009d30:	e7ee      	b.n	8009d10 <__libc_init_array+0xc>
 8009d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d36:	4798      	blx	r3
 8009d38:	3601      	adds	r6, #1
 8009d3a:	e7f2      	b.n	8009d22 <__libc_init_array+0x1e>
 8009d3c:	0801dc58 	.word	0x0801dc58
 8009d40:	0801dc58 	.word	0x0801dc58
 8009d44:	0801dc58 	.word	0x0801dc58
 8009d48:	0801dc5c 	.word	0x0801dc5c

08009d4c <cosf>:
 8009d4c:	ee10 3a10 	vmov	r3, s0
 8009d50:	b507      	push	{r0, r1, r2, lr}
 8009d52:	4a1e      	ldr	r2, [pc, #120]	; (8009dcc <cosf+0x80>)
 8009d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	dc06      	bgt.n	8009d6a <cosf+0x1e>
 8009d5c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8009dd0 <cosf+0x84>
 8009d60:	b003      	add	sp, #12
 8009d62:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d66:	f000 b835 	b.w	8009dd4 <__kernel_cosf>
 8009d6a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009d6e:	db04      	blt.n	8009d7a <cosf+0x2e>
 8009d70:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009d74:	b003      	add	sp, #12
 8009d76:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d7a:	4668      	mov	r0, sp
 8009d7c:	f000 f8d0 	bl	8009f20 <__ieee754_rem_pio2f>
 8009d80:	f000 0003 	and.w	r0, r0, #3
 8009d84:	2801      	cmp	r0, #1
 8009d86:	d009      	beq.n	8009d9c <cosf+0x50>
 8009d88:	2802      	cmp	r0, #2
 8009d8a:	d010      	beq.n	8009dae <cosf+0x62>
 8009d8c:	b9b0      	cbnz	r0, 8009dbc <cosf+0x70>
 8009d8e:	eddd 0a01 	vldr	s1, [sp, #4]
 8009d92:	ed9d 0a00 	vldr	s0, [sp]
 8009d96:	f000 f81d 	bl	8009dd4 <__kernel_cosf>
 8009d9a:	e7eb      	b.n	8009d74 <cosf+0x28>
 8009d9c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009da0:	ed9d 0a00 	vldr	s0, [sp]
 8009da4:	f000 f874 	bl	8009e90 <__kernel_sinf>
 8009da8:	eeb1 0a40 	vneg.f32	s0, s0
 8009dac:	e7e2      	b.n	8009d74 <cosf+0x28>
 8009dae:	eddd 0a01 	vldr	s1, [sp, #4]
 8009db2:	ed9d 0a00 	vldr	s0, [sp]
 8009db6:	f000 f80d 	bl	8009dd4 <__kernel_cosf>
 8009dba:	e7f5      	b.n	8009da8 <cosf+0x5c>
 8009dbc:	eddd 0a01 	vldr	s1, [sp, #4]
 8009dc0:	ed9d 0a00 	vldr	s0, [sp]
 8009dc4:	2001      	movs	r0, #1
 8009dc6:	f000 f863 	bl	8009e90 <__kernel_sinf>
 8009dca:	e7d3      	b.n	8009d74 <cosf+0x28>
 8009dcc:	3f490fd8 	.word	0x3f490fd8
 8009dd0:	00000000 	.word	0x00000000

08009dd4 <__kernel_cosf>:
 8009dd4:	ee10 3a10 	vmov	r3, s0
 8009dd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ddc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009de0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009de4:	da05      	bge.n	8009df2 <__kernel_cosf+0x1e>
 8009de6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009dea:	ee17 2a90 	vmov	r2, s15
 8009dee:	2a00      	cmp	r2, #0
 8009df0:	d03b      	beq.n	8009e6a <__kernel_cosf+0x96>
 8009df2:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009df6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8009e70 <__kernel_cosf+0x9c>
 8009dfa:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8009e74 <__kernel_cosf+0xa0>
 8009dfe:	4a1e      	ldr	r2, [pc, #120]	; (8009e78 <__kernel_cosf+0xa4>)
 8009e00:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009e04:	4293      	cmp	r3, r2
 8009e06:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8009e7c <__kernel_cosf+0xa8>
 8009e0a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009e0e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8009e80 <__kernel_cosf+0xac>
 8009e12:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009e16:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8009e84 <__kernel_cosf+0xb0>
 8009e1a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009e1e:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8009e88 <__kernel_cosf+0xb4>
 8009e22:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009e26:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8009e2a:	ee26 6a07 	vmul.f32	s12, s12, s14
 8009e2e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009e32:	eee7 0a06 	vfma.f32	s1, s14, s12
 8009e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e3a:	dc04      	bgt.n	8009e46 <__kernel_cosf+0x72>
 8009e3c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009e40:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8009e44:	4770      	bx	lr
 8009e46:	4a11      	ldr	r2, [pc, #68]	; (8009e8c <__kernel_cosf+0xb8>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	bfda      	itte	le
 8009e4c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8009e50:	ee07 3a10 	vmovle	s14, r3
 8009e54:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8009e58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e5c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8009e60:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009e64:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009e68:	4770      	bx	lr
 8009e6a:	eeb0 0a66 	vmov.f32	s0, s13
 8009e6e:	4770      	bx	lr
 8009e70:	ad47d74e 	.word	0xad47d74e
 8009e74:	310f74f6 	.word	0x310f74f6
 8009e78:	3e999999 	.word	0x3e999999
 8009e7c:	b493f27c 	.word	0xb493f27c
 8009e80:	37d00d01 	.word	0x37d00d01
 8009e84:	bab60b61 	.word	0xbab60b61
 8009e88:	3d2aaaab 	.word	0x3d2aaaab
 8009e8c:	3f480000 	.word	0x3f480000

08009e90 <__kernel_sinf>:
 8009e90:	ee10 3a10 	vmov	r3, s0
 8009e94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e98:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009e9c:	da04      	bge.n	8009ea8 <__kernel_sinf+0x18>
 8009e9e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009ea2:	ee17 3a90 	vmov	r3, s15
 8009ea6:	b35b      	cbz	r3, 8009f00 <__kernel_sinf+0x70>
 8009ea8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009eac:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009f04 <__kernel_sinf+0x74>
 8009eb0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009f08 <__kernel_sinf+0x78>
 8009eb4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009eb8:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009f0c <__kernel_sinf+0x7c>
 8009ebc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009ec0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8009f10 <__kernel_sinf+0x80>
 8009ec4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009ec8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009f14 <__kernel_sinf+0x84>
 8009ecc:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009ed0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009ed4:	b930      	cbnz	r0, 8009ee4 <__kernel_sinf+0x54>
 8009ed6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8009f18 <__kernel_sinf+0x88>
 8009eda:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009ede:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009ee2:	4770      	bx	lr
 8009ee4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009ee8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009eec:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009ef0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009ef4:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009f1c <__kernel_sinf+0x8c>
 8009ef8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009efc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	2f2ec9d3 	.word	0x2f2ec9d3
 8009f08:	b2d72f34 	.word	0xb2d72f34
 8009f0c:	3638ef1b 	.word	0x3638ef1b
 8009f10:	b9500d01 	.word	0xb9500d01
 8009f14:	3c088889 	.word	0x3c088889
 8009f18:	be2aaaab 	.word	0xbe2aaaab
 8009f1c:	3e2aaaab 	.word	0x3e2aaaab

08009f20 <__ieee754_rem_pio2f>:
 8009f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f22:	ee10 6a10 	vmov	r6, s0
 8009f26:	4b86      	ldr	r3, [pc, #536]	; (800a140 <__ieee754_rem_pio2f+0x220>)
 8009f28:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8009f2c:	429d      	cmp	r5, r3
 8009f2e:	b087      	sub	sp, #28
 8009f30:	4604      	mov	r4, r0
 8009f32:	dc05      	bgt.n	8009f40 <__ieee754_rem_pio2f+0x20>
 8009f34:	2300      	movs	r3, #0
 8009f36:	ed80 0a00 	vstr	s0, [r0]
 8009f3a:	6043      	str	r3, [r0, #4]
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	e020      	b.n	8009f82 <__ieee754_rem_pio2f+0x62>
 8009f40:	4b80      	ldr	r3, [pc, #512]	; (800a144 <__ieee754_rem_pio2f+0x224>)
 8009f42:	429d      	cmp	r5, r3
 8009f44:	dc38      	bgt.n	8009fb8 <__ieee754_rem_pio2f+0x98>
 8009f46:	2e00      	cmp	r6, #0
 8009f48:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800a148 <__ieee754_rem_pio2f+0x228>
 8009f4c:	4b7f      	ldr	r3, [pc, #508]	; (800a14c <__ieee754_rem_pio2f+0x22c>)
 8009f4e:	f025 050f 	bic.w	r5, r5, #15
 8009f52:	dd18      	ble.n	8009f86 <__ieee754_rem_pio2f+0x66>
 8009f54:	429d      	cmp	r5, r3
 8009f56:	ee70 7a47 	vsub.f32	s15, s0, s14
 8009f5a:	bf09      	itett	eq
 8009f5c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800a150 <__ieee754_rem_pio2f+0x230>
 8009f60:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800a154 <__ieee754_rem_pio2f+0x234>
 8009f64:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009f68:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800a158 <__ieee754_rem_pio2f+0x238>
 8009f6c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009f70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009f74:	edc0 6a00 	vstr	s13, [r0]
 8009f78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f7c:	edc0 7a01 	vstr	s15, [r0, #4]
 8009f80:	2001      	movs	r0, #1
 8009f82:	b007      	add	sp, #28
 8009f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f86:	429d      	cmp	r5, r3
 8009f88:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009f8c:	bf09      	itett	eq
 8009f8e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800a150 <__ieee754_rem_pio2f+0x230>
 8009f92:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800a154 <__ieee754_rem_pio2f+0x234>
 8009f96:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8009f9a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800a158 <__ieee754_rem_pio2f+0x238>
 8009f9e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009fa2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009fa6:	edc0 6a00 	vstr	s13, [r0]
 8009faa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009fae:	edc0 7a01 	vstr	s15, [r0, #4]
 8009fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb6:	e7e4      	b.n	8009f82 <__ieee754_rem_pio2f+0x62>
 8009fb8:	4b68      	ldr	r3, [pc, #416]	; (800a15c <__ieee754_rem_pio2f+0x23c>)
 8009fba:	429d      	cmp	r5, r3
 8009fbc:	dc71      	bgt.n	800a0a2 <__ieee754_rem_pio2f+0x182>
 8009fbe:	f000 f8db 	bl	800a178 <fabsf>
 8009fc2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a160 <__ieee754_rem_pio2f+0x240>
 8009fc6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009fca:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009fd6:	ee17 0a90 	vmov	r0, s15
 8009fda:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a148 <__ieee754_rem_pio2f+0x228>
 8009fde:	eea7 0a67 	vfms.f32	s0, s14, s15
 8009fe2:	281f      	cmp	r0, #31
 8009fe4:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a154 <__ieee754_rem_pio2f+0x234>
 8009fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fec:	eeb1 6a47 	vneg.f32	s12, s14
 8009ff0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009ff4:	ee16 2a90 	vmov	r2, s13
 8009ff8:	dc1c      	bgt.n	800a034 <__ieee754_rem_pio2f+0x114>
 8009ffa:	495a      	ldr	r1, [pc, #360]	; (800a164 <__ieee754_rem_pio2f+0x244>)
 8009ffc:	1e47      	subs	r7, r0, #1
 8009ffe:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800a002:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a006:	428b      	cmp	r3, r1
 800a008:	d014      	beq.n	800a034 <__ieee754_rem_pio2f+0x114>
 800a00a:	6022      	str	r2, [r4, #0]
 800a00c:	ed94 7a00 	vldr	s14, [r4]
 800a010:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a014:	2e00      	cmp	r6, #0
 800a016:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a01a:	ed84 0a01 	vstr	s0, [r4, #4]
 800a01e:	dab0      	bge.n	8009f82 <__ieee754_rem_pio2f+0x62>
 800a020:	eeb1 7a47 	vneg.f32	s14, s14
 800a024:	eeb1 0a40 	vneg.f32	s0, s0
 800a028:	ed84 7a00 	vstr	s14, [r4]
 800a02c:	ed84 0a01 	vstr	s0, [r4, #4]
 800a030:	4240      	negs	r0, r0
 800a032:	e7a6      	b.n	8009f82 <__ieee754_rem_pio2f+0x62>
 800a034:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a038:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800a03c:	2908      	cmp	r1, #8
 800a03e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800a042:	dde2      	ble.n	800a00a <__ieee754_rem_pio2f+0xea>
 800a044:	eddf 5a42 	vldr	s11, [pc, #264]	; 800a150 <__ieee754_rem_pio2f+0x230>
 800a048:	eef0 6a40 	vmov.f32	s13, s0
 800a04c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800a050:	ee70 7a66 	vsub.f32	s15, s0, s13
 800a054:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a058:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a158 <__ieee754_rem_pio2f+0x238>
 800a05c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800a060:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800a064:	ee15 2a90 	vmov	r2, s11
 800a068:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a06c:	1a5b      	subs	r3, r3, r1
 800a06e:	2b19      	cmp	r3, #25
 800a070:	dc04      	bgt.n	800a07c <__ieee754_rem_pio2f+0x15c>
 800a072:	edc4 5a00 	vstr	s11, [r4]
 800a076:	eeb0 0a66 	vmov.f32	s0, s13
 800a07a:	e7c7      	b.n	800a00c <__ieee754_rem_pio2f+0xec>
 800a07c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a168 <__ieee754_rem_pio2f+0x248>
 800a080:	eeb0 0a66 	vmov.f32	s0, s13
 800a084:	eea6 0a25 	vfma.f32	s0, s12, s11
 800a088:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a08c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a16c <__ieee754_rem_pio2f+0x24c>
 800a090:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a094:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800a098:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a09c:	ed84 7a00 	vstr	s14, [r4]
 800a0a0:	e7b4      	b.n	800a00c <__ieee754_rem_pio2f+0xec>
 800a0a2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a0a6:	db06      	blt.n	800a0b6 <__ieee754_rem_pio2f+0x196>
 800a0a8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a0ac:	edc0 7a01 	vstr	s15, [r0, #4]
 800a0b0:	edc0 7a00 	vstr	s15, [r0]
 800a0b4:	e742      	b.n	8009f3c <__ieee754_rem_pio2f+0x1c>
 800a0b6:	15ea      	asrs	r2, r5, #23
 800a0b8:	3a86      	subs	r2, #134	; 0x86
 800a0ba:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800a0be:	ee07 3a90 	vmov	s15, r3
 800a0c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a0c6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800a170 <__ieee754_rem_pio2f+0x250>
 800a0ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a0ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a0d2:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a0d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a0da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a0de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a0e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a0e6:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a0ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a0ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0f6:	edcd 7a05 	vstr	s15, [sp, #20]
 800a0fa:	d11e      	bne.n	800a13a <__ieee754_rem_pio2f+0x21a>
 800a0fc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a104:	bf14      	ite	ne
 800a106:	2302      	movne	r3, #2
 800a108:	2301      	moveq	r3, #1
 800a10a:	491a      	ldr	r1, [pc, #104]	; (800a174 <__ieee754_rem_pio2f+0x254>)
 800a10c:	9101      	str	r1, [sp, #4]
 800a10e:	2102      	movs	r1, #2
 800a110:	9100      	str	r1, [sp, #0]
 800a112:	a803      	add	r0, sp, #12
 800a114:	4621      	mov	r1, r4
 800a116:	f000 f837 	bl	800a188 <__kernel_rem_pio2f>
 800a11a:	2e00      	cmp	r6, #0
 800a11c:	f6bf af31 	bge.w	8009f82 <__ieee754_rem_pio2f+0x62>
 800a120:	edd4 7a00 	vldr	s15, [r4]
 800a124:	eef1 7a67 	vneg.f32	s15, s15
 800a128:	edc4 7a00 	vstr	s15, [r4]
 800a12c:	edd4 7a01 	vldr	s15, [r4, #4]
 800a130:	eef1 7a67 	vneg.f32	s15, s15
 800a134:	edc4 7a01 	vstr	s15, [r4, #4]
 800a138:	e77a      	b.n	800a030 <__ieee754_rem_pio2f+0x110>
 800a13a:	2303      	movs	r3, #3
 800a13c:	e7e5      	b.n	800a10a <__ieee754_rem_pio2f+0x1ea>
 800a13e:	bf00      	nop
 800a140:	3f490fd8 	.word	0x3f490fd8
 800a144:	4016cbe3 	.word	0x4016cbe3
 800a148:	3fc90f80 	.word	0x3fc90f80
 800a14c:	3fc90fd0 	.word	0x3fc90fd0
 800a150:	37354400 	.word	0x37354400
 800a154:	37354443 	.word	0x37354443
 800a158:	2e85a308 	.word	0x2e85a308
 800a15c:	43490f80 	.word	0x43490f80
 800a160:	3f22f984 	.word	0x3f22f984
 800a164:	0801d880 	.word	0x0801d880
 800a168:	2e85a300 	.word	0x2e85a300
 800a16c:	248d3132 	.word	0x248d3132
 800a170:	43800000 	.word	0x43800000
 800a174:	0801d900 	.word	0x0801d900

0800a178 <fabsf>:
 800a178:	ee10 3a10 	vmov	r3, s0
 800a17c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a180:	ee00 3a10 	vmov	s0, r3
 800a184:	4770      	bx	lr
	...

0800a188 <__kernel_rem_pio2f>:
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	ed2d 8b04 	vpush	{d8-d9}
 800a190:	b0d9      	sub	sp, #356	; 0x164
 800a192:	4688      	mov	r8, r1
 800a194:	9002      	str	r0, [sp, #8]
 800a196:	49b8      	ldr	r1, [pc, #736]	; (800a478 <__kernel_rem_pio2f+0x2f0>)
 800a198:	9866      	ldr	r0, [sp, #408]	; 0x198
 800a19a:	9301      	str	r3, [sp, #4]
 800a19c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800a1a0:	9901      	ldr	r1, [sp, #4]
 800a1a2:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800a1a4:	f101 3bff 	add.w	fp, r1, #4294967295
 800a1a8:	1d11      	adds	r1, r2, #4
 800a1aa:	db25      	blt.n	800a1f8 <__kernel_rem_pio2f+0x70>
 800a1ac:	1ed0      	subs	r0, r2, #3
 800a1ae:	bf48      	it	mi
 800a1b0:	1d10      	addmi	r0, r2, #4
 800a1b2:	10c0      	asrs	r0, r0, #3
 800a1b4:	1c45      	adds	r5, r0, #1
 800a1b6:	00e9      	lsls	r1, r5, #3
 800a1b8:	eba0 070b 	sub.w	r7, r0, fp
 800a1bc:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800a488 <__kernel_rem_pio2f+0x300>
 800a1c0:	9103      	str	r1, [sp, #12]
 800a1c2:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800a1c6:	eb0a 0c0b 	add.w	ip, sl, fp
 800a1ca:	ae1c      	add	r6, sp, #112	; 0x70
 800a1cc:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800a1d0:	2400      	movs	r4, #0
 800a1d2:	4564      	cmp	r4, ip
 800a1d4:	dd12      	ble.n	800a1fc <__kernel_rem_pio2f+0x74>
 800a1d6:	9901      	ldr	r1, [sp, #4]
 800a1d8:	ac1c      	add	r4, sp, #112	; 0x70
 800a1da:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800a1de:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800a1e2:	f04f 0c00 	mov.w	ip, #0
 800a1e6:	45d4      	cmp	ip, sl
 800a1e8:	dc27      	bgt.n	800a23a <__kernel_rem_pio2f+0xb2>
 800a1ea:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a1ee:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800a488 <__kernel_rem_pio2f+0x300>
 800a1f2:	4627      	mov	r7, r4
 800a1f4:	2600      	movs	r6, #0
 800a1f6:	e016      	b.n	800a226 <__kernel_rem_pio2f+0x9e>
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	e7db      	b.n	800a1b4 <__kernel_rem_pio2f+0x2c>
 800a1fc:	42e7      	cmn	r7, r4
 800a1fe:	bf5d      	ittte	pl
 800a200:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800a204:	ee07 1a90 	vmovpl	s15, r1
 800a208:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a20c:	eef0 7a47 	vmovmi.f32	s15, s14
 800a210:	ece6 7a01 	vstmia	r6!, {s15}
 800a214:	3401      	adds	r4, #1
 800a216:	e7dc      	b.n	800a1d2 <__kernel_rem_pio2f+0x4a>
 800a218:	ecfe 6a01 	vldmia	lr!, {s13}
 800a21c:	ed97 7a00 	vldr	s14, [r7]
 800a220:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a224:	3601      	adds	r6, #1
 800a226:	455e      	cmp	r6, fp
 800a228:	f1a7 0704 	sub.w	r7, r7, #4
 800a22c:	ddf4      	ble.n	800a218 <__kernel_rem_pio2f+0x90>
 800a22e:	ece9 7a01 	vstmia	r9!, {s15}
 800a232:	f10c 0c01 	add.w	ip, ip, #1
 800a236:	3404      	adds	r4, #4
 800a238:	e7d5      	b.n	800a1e6 <__kernel_rem_pio2f+0x5e>
 800a23a:	a908      	add	r1, sp, #32
 800a23c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a240:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800a244:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800a484 <__kernel_rem_pio2f+0x2fc>
 800a248:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800a480 <__kernel_rem_pio2f+0x2f8>
 800a24c:	9105      	str	r1, [sp, #20]
 800a24e:	9304      	str	r3, [sp, #16]
 800a250:	4656      	mov	r6, sl
 800a252:	00b3      	lsls	r3, r6, #2
 800a254:	9306      	str	r3, [sp, #24]
 800a256:	ab58      	add	r3, sp, #352	; 0x160
 800a258:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a25c:	ac08      	add	r4, sp, #32
 800a25e:	ab44      	add	r3, sp, #272	; 0x110
 800a260:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800a264:	46a4      	mov	ip, r4
 800a266:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a26a:	4637      	mov	r7, r6
 800a26c:	2f00      	cmp	r7, #0
 800a26e:	f1a0 0004 	sub.w	r0, r0, #4
 800a272:	dc4a      	bgt.n	800a30a <__kernel_rem_pio2f+0x182>
 800a274:	4628      	mov	r0, r5
 800a276:	9207      	str	r2, [sp, #28]
 800a278:	f000 f9f8 	bl	800a66c <scalbnf>
 800a27c:	eeb0 8a40 	vmov.f32	s16, s0
 800a280:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800a284:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a288:	f000 fa56 	bl	800a738 <floorf>
 800a28c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800a290:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a294:	2d00      	cmp	r5, #0
 800a296:	9a07      	ldr	r2, [sp, #28]
 800a298:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a29c:	ee17 9a90 	vmov	r9, s15
 800a2a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2a4:	ee38 8a67 	vsub.f32	s16, s16, s15
 800a2a8:	dd41      	ble.n	800a32e <__kernel_rem_pio2f+0x1a6>
 800a2aa:	f106 3cff 	add.w	ip, r6, #4294967295
 800a2ae:	ab08      	add	r3, sp, #32
 800a2b0:	f1c5 0e08 	rsb	lr, r5, #8
 800a2b4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800a2b8:	fa47 f00e 	asr.w	r0, r7, lr
 800a2bc:	4481      	add	r9, r0
 800a2be:	fa00 f00e 	lsl.w	r0, r0, lr
 800a2c2:	1a3f      	subs	r7, r7, r0
 800a2c4:	f1c5 0007 	rsb	r0, r5, #7
 800a2c8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800a2cc:	4107      	asrs	r7, r0
 800a2ce:	2f00      	cmp	r7, #0
 800a2d0:	dd3c      	ble.n	800a34c <__kernel_rem_pio2f+0x1c4>
 800a2d2:	f04f 0e00 	mov.w	lr, #0
 800a2d6:	f109 0901 	add.w	r9, r9, #1
 800a2da:	4671      	mov	r1, lr
 800a2dc:	4576      	cmp	r6, lr
 800a2de:	dc67      	bgt.n	800a3b0 <__kernel_rem_pio2f+0x228>
 800a2e0:	2d00      	cmp	r5, #0
 800a2e2:	dd03      	ble.n	800a2ec <__kernel_rem_pio2f+0x164>
 800a2e4:	2d01      	cmp	r5, #1
 800a2e6:	d074      	beq.n	800a3d2 <__kernel_rem_pio2f+0x24a>
 800a2e8:	2d02      	cmp	r5, #2
 800a2ea:	d07b      	beq.n	800a3e4 <__kernel_rem_pio2f+0x25c>
 800a2ec:	2f02      	cmp	r7, #2
 800a2ee:	d12d      	bne.n	800a34c <__kernel_rem_pio2f+0x1c4>
 800a2f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a2f4:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a2f8:	b341      	cbz	r1, 800a34c <__kernel_rem_pio2f+0x1c4>
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	9207      	str	r2, [sp, #28]
 800a2fe:	f000 f9b5 	bl	800a66c <scalbnf>
 800a302:	9a07      	ldr	r2, [sp, #28]
 800a304:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a308:	e020      	b.n	800a34c <__kernel_rem_pio2f+0x1c4>
 800a30a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a30e:	3f01      	subs	r7, #1
 800a310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a318:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a31c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a320:	ecac 0a01 	vstmia	ip!, {s0}
 800a324:	ed90 0a00 	vldr	s0, [r0]
 800a328:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a32c:	e79e      	b.n	800a26c <__kernel_rem_pio2f+0xe4>
 800a32e:	d105      	bne.n	800a33c <__kernel_rem_pio2f+0x1b4>
 800a330:	1e70      	subs	r0, r6, #1
 800a332:	ab08      	add	r3, sp, #32
 800a334:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800a338:	11ff      	asrs	r7, r7, #7
 800a33a:	e7c8      	b.n	800a2ce <__kernel_rem_pio2f+0x146>
 800a33c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a340:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a348:	da30      	bge.n	800a3ac <__kernel_rem_pio2f+0x224>
 800a34a:	2700      	movs	r7, #0
 800a34c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a354:	f040 809a 	bne.w	800a48c <__kernel_rem_pio2f+0x304>
 800a358:	1e74      	subs	r4, r6, #1
 800a35a:	46a4      	mov	ip, r4
 800a35c:	2100      	movs	r1, #0
 800a35e:	45d4      	cmp	ip, sl
 800a360:	da47      	bge.n	800a3f2 <__kernel_rem_pio2f+0x26a>
 800a362:	2900      	cmp	r1, #0
 800a364:	d063      	beq.n	800a42e <__kernel_rem_pio2f+0x2a6>
 800a366:	ab08      	add	r3, sp, #32
 800a368:	3d08      	subs	r5, #8
 800a36a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d07f      	beq.n	800a472 <__kernel_rem_pio2f+0x2ea>
 800a372:	4628      	mov	r0, r5
 800a374:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a378:	f000 f978 	bl	800a66c <scalbnf>
 800a37c:	1c63      	adds	r3, r4, #1
 800a37e:	aa44      	add	r2, sp, #272	; 0x110
 800a380:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800a484 <__kernel_rem_pio2f+0x2fc>
 800a384:	0099      	lsls	r1, r3, #2
 800a386:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a38a:	4623      	mov	r3, r4
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f280 80ad 	bge.w	800a4ec <__kernel_rem_pio2f+0x364>
 800a392:	4623      	mov	r3, r4
 800a394:	2b00      	cmp	r3, #0
 800a396:	f2c0 80cb 	blt.w	800a530 <__kernel_rem_pio2f+0x3a8>
 800a39a:	aa44      	add	r2, sp, #272	; 0x110
 800a39c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800a3a0:	4e36      	ldr	r6, [pc, #216]	; (800a47c <__kernel_rem_pio2f+0x2f4>)
 800a3a2:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a488 <__kernel_rem_pio2f+0x300>
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	1ae2      	subs	r2, r4, r3
 800a3aa:	e0b6      	b.n	800a51a <__kernel_rem_pio2f+0x392>
 800a3ac:	2702      	movs	r7, #2
 800a3ae:	e790      	b.n	800a2d2 <__kernel_rem_pio2f+0x14a>
 800a3b0:	6820      	ldr	r0, [r4, #0]
 800a3b2:	b949      	cbnz	r1, 800a3c8 <__kernel_rem_pio2f+0x240>
 800a3b4:	b118      	cbz	r0, 800a3be <__kernel_rem_pio2f+0x236>
 800a3b6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800a3ba:	6020      	str	r0, [r4, #0]
 800a3bc:	2001      	movs	r0, #1
 800a3be:	f10e 0e01 	add.w	lr, lr, #1
 800a3c2:	3404      	adds	r4, #4
 800a3c4:	4601      	mov	r1, r0
 800a3c6:	e789      	b.n	800a2dc <__kernel_rem_pio2f+0x154>
 800a3c8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800a3cc:	6020      	str	r0, [r4, #0]
 800a3ce:	4608      	mov	r0, r1
 800a3d0:	e7f5      	b.n	800a3be <__kernel_rem_pio2f+0x236>
 800a3d2:	1e74      	subs	r4, r6, #1
 800a3d4:	ab08      	add	r3, sp, #32
 800a3d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a3da:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a3de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a3e2:	e783      	b.n	800a2ec <__kernel_rem_pio2f+0x164>
 800a3e4:	1e74      	subs	r4, r6, #1
 800a3e6:	ab08      	add	r3, sp, #32
 800a3e8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a3ec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a3f0:	e7f5      	b.n	800a3de <__kernel_rem_pio2f+0x256>
 800a3f2:	ab08      	add	r3, sp, #32
 800a3f4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800a3f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a3fc:	4301      	orrs	r1, r0
 800a3fe:	e7ae      	b.n	800a35e <__kernel_rem_pio2f+0x1d6>
 800a400:	3001      	adds	r0, #1
 800a402:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800a406:	2f00      	cmp	r7, #0
 800a408:	d0fa      	beq.n	800a400 <__kernel_rem_pio2f+0x278>
 800a40a:	9b06      	ldr	r3, [sp, #24]
 800a40c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800a410:	eb0d 0403 	add.w	r4, sp, r3
 800a414:	9b01      	ldr	r3, [sp, #4]
 800a416:	18f7      	adds	r7, r6, r3
 800a418:	ab1c      	add	r3, sp, #112	; 0x70
 800a41a:	f106 0c01 	add.w	ip, r6, #1
 800a41e:	3c4c      	subs	r4, #76	; 0x4c
 800a420:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a424:	4430      	add	r0, r6
 800a426:	4560      	cmp	r0, ip
 800a428:	da04      	bge.n	800a434 <__kernel_rem_pio2f+0x2ac>
 800a42a:	4606      	mov	r6, r0
 800a42c:	e711      	b.n	800a252 <__kernel_rem_pio2f+0xca>
 800a42e:	9c05      	ldr	r4, [sp, #20]
 800a430:	2001      	movs	r0, #1
 800a432:	e7e6      	b.n	800a402 <__kernel_rem_pio2f+0x27a>
 800a434:	9b04      	ldr	r3, [sp, #16]
 800a436:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a43a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800a43e:	9306      	str	r3, [sp, #24]
 800a440:	ee07 3a90 	vmov	s15, r3
 800a444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a448:	2600      	movs	r6, #0
 800a44a:	ece7 7a01 	vstmia	r7!, {s15}
 800a44e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800a488 <__kernel_rem_pio2f+0x300>
 800a452:	46b9      	mov	r9, r7
 800a454:	455e      	cmp	r6, fp
 800a456:	dd04      	ble.n	800a462 <__kernel_rem_pio2f+0x2da>
 800a458:	ece4 7a01 	vstmia	r4!, {s15}
 800a45c:	f10c 0c01 	add.w	ip, ip, #1
 800a460:	e7e1      	b.n	800a426 <__kernel_rem_pio2f+0x29e>
 800a462:	ecfe 6a01 	vldmia	lr!, {s13}
 800a466:	ed39 7a01 	vldmdb	r9!, {s14}
 800a46a:	3601      	adds	r6, #1
 800a46c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a470:	e7f0      	b.n	800a454 <__kernel_rem_pio2f+0x2cc>
 800a472:	3c01      	subs	r4, #1
 800a474:	e777      	b.n	800a366 <__kernel_rem_pio2f+0x1de>
 800a476:	bf00      	nop
 800a478:	0801dc44 	.word	0x0801dc44
 800a47c:	0801dc18 	.word	0x0801dc18
 800a480:	43800000 	.word	0x43800000
 800a484:	3b800000 	.word	0x3b800000
 800a488:	00000000 	.word	0x00000000
 800a48c:	9b03      	ldr	r3, [sp, #12]
 800a48e:	eeb0 0a48 	vmov.f32	s0, s16
 800a492:	1a98      	subs	r0, r3, r2
 800a494:	f000 f8ea 	bl	800a66c <scalbnf>
 800a498:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800a480 <__kernel_rem_pio2f+0x2f8>
 800a49c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a4a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4a4:	db19      	blt.n	800a4da <__kernel_rem_pio2f+0x352>
 800a4a6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800a484 <__kernel_rem_pio2f+0x2fc>
 800a4aa:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a4ae:	aa08      	add	r2, sp, #32
 800a4b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a4b4:	1c74      	adds	r4, r6, #1
 800a4b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4ba:	3508      	adds	r5, #8
 800a4bc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a4c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a4c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a4c8:	ee10 3a10 	vmov	r3, s0
 800a4cc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800a4d0:	ee17 3a90 	vmov	r3, s15
 800a4d4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a4d8:	e74b      	b.n	800a372 <__kernel_rem_pio2f+0x1ea>
 800a4da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a4de:	aa08      	add	r2, sp, #32
 800a4e0:	ee10 3a10 	vmov	r3, s0
 800a4e4:	4634      	mov	r4, r6
 800a4e6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800a4ea:	e742      	b.n	800a372 <__kernel_rem_pio2f+0x1ea>
 800a4ec:	a808      	add	r0, sp, #32
 800a4ee:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800a4f2:	9001      	str	r0, [sp, #4]
 800a4f4:	ee07 0a90 	vmov	s15, r0
 800a4f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a502:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a506:	ed62 7a01 	vstmdb	r2!, {s15}
 800a50a:	e73f      	b.n	800a38c <__kernel_rem_pio2f+0x204>
 800a50c:	ecf6 6a01 	vldmia	r6!, {s13}
 800a510:	ecb5 7a01 	vldmia	r5!, {s14}
 800a514:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a518:	3001      	adds	r0, #1
 800a51a:	4550      	cmp	r0, sl
 800a51c:	dc01      	bgt.n	800a522 <__kernel_rem_pio2f+0x39a>
 800a51e:	4290      	cmp	r0, r2
 800a520:	ddf4      	ble.n	800a50c <__kernel_rem_pio2f+0x384>
 800a522:	a858      	add	r0, sp, #352	; 0x160
 800a524:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a528:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800a52c:	3b01      	subs	r3, #1
 800a52e:	e731      	b.n	800a394 <__kernel_rem_pio2f+0x20c>
 800a530:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800a532:	2b02      	cmp	r3, #2
 800a534:	dc09      	bgt.n	800a54a <__kernel_rem_pio2f+0x3c2>
 800a536:	2b00      	cmp	r3, #0
 800a538:	dc2b      	bgt.n	800a592 <__kernel_rem_pio2f+0x40a>
 800a53a:	d044      	beq.n	800a5c6 <__kernel_rem_pio2f+0x43e>
 800a53c:	f009 0007 	and.w	r0, r9, #7
 800a540:	b059      	add	sp, #356	; 0x164
 800a542:	ecbd 8b04 	vpop	{d8-d9}
 800a546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800a54c:	2b03      	cmp	r3, #3
 800a54e:	d1f5      	bne.n	800a53c <__kernel_rem_pio2f+0x3b4>
 800a550:	aa30      	add	r2, sp, #192	; 0xc0
 800a552:	1f0b      	subs	r3, r1, #4
 800a554:	4413      	add	r3, r2
 800a556:	461a      	mov	r2, r3
 800a558:	4620      	mov	r0, r4
 800a55a:	2800      	cmp	r0, #0
 800a55c:	f1a2 0204 	sub.w	r2, r2, #4
 800a560:	dc52      	bgt.n	800a608 <__kernel_rem_pio2f+0x480>
 800a562:	4622      	mov	r2, r4
 800a564:	2a01      	cmp	r2, #1
 800a566:	f1a3 0304 	sub.w	r3, r3, #4
 800a56a:	dc5d      	bgt.n	800a628 <__kernel_rem_pio2f+0x4a0>
 800a56c:	ab30      	add	r3, sp, #192	; 0xc0
 800a56e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800a488 <__kernel_rem_pio2f+0x300>
 800a572:	440b      	add	r3, r1
 800a574:	2c01      	cmp	r4, #1
 800a576:	dc67      	bgt.n	800a648 <__kernel_rem_pio2f+0x4c0>
 800a578:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800a57c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800a580:	2f00      	cmp	r7, #0
 800a582:	d167      	bne.n	800a654 <__kernel_rem_pio2f+0x4cc>
 800a584:	edc8 6a00 	vstr	s13, [r8]
 800a588:	ed88 7a01 	vstr	s14, [r8, #4]
 800a58c:	edc8 7a02 	vstr	s15, [r8, #8]
 800a590:	e7d4      	b.n	800a53c <__kernel_rem_pio2f+0x3b4>
 800a592:	ab30      	add	r3, sp, #192	; 0xc0
 800a594:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800a488 <__kernel_rem_pio2f+0x300>
 800a598:	440b      	add	r3, r1
 800a59a:	4622      	mov	r2, r4
 800a59c:	2a00      	cmp	r2, #0
 800a59e:	da24      	bge.n	800a5ea <__kernel_rem_pio2f+0x462>
 800a5a0:	b34f      	cbz	r7, 800a5f6 <__kernel_rem_pio2f+0x46e>
 800a5a2:	eef1 7a47 	vneg.f32	s15, s14
 800a5a6:	edc8 7a00 	vstr	s15, [r8]
 800a5aa:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800a5ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5b2:	aa31      	add	r2, sp, #196	; 0xc4
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	429c      	cmp	r4, r3
 800a5b8:	da20      	bge.n	800a5fc <__kernel_rem_pio2f+0x474>
 800a5ba:	b10f      	cbz	r7, 800a5c0 <__kernel_rem_pio2f+0x438>
 800a5bc:	eef1 7a67 	vneg.f32	s15, s15
 800a5c0:	edc8 7a01 	vstr	s15, [r8, #4]
 800a5c4:	e7ba      	b.n	800a53c <__kernel_rem_pio2f+0x3b4>
 800a5c6:	ab30      	add	r3, sp, #192	; 0xc0
 800a5c8:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800a488 <__kernel_rem_pio2f+0x300>
 800a5cc:	440b      	add	r3, r1
 800a5ce:	2c00      	cmp	r4, #0
 800a5d0:	da05      	bge.n	800a5de <__kernel_rem_pio2f+0x456>
 800a5d2:	b10f      	cbz	r7, 800a5d8 <__kernel_rem_pio2f+0x450>
 800a5d4:	eef1 7a67 	vneg.f32	s15, s15
 800a5d8:	edc8 7a00 	vstr	s15, [r8]
 800a5dc:	e7ae      	b.n	800a53c <__kernel_rem_pio2f+0x3b4>
 800a5de:	ed33 7a01 	vldmdb	r3!, {s14}
 800a5e2:	3c01      	subs	r4, #1
 800a5e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5e8:	e7f1      	b.n	800a5ce <__kernel_rem_pio2f+0x446>
 800a5ea:	ed73 7a01 	vldmdb	r3!, {s15}
 800a5ee:	3a01      	subs	r2, #1
 800a5f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5f4:	e7d2      	b.n	800a59c <__kernel_rem_pio2f+0x414>
 800a5f6:	eef0 7a47 	vmov.f32	s15, s14
 800a5fa:	e7d4      	b.n	800a5a6 <__kernel_rem_pio2f+0x41e>
 800a5fc:	ecb2 7a01 	vldmia	r2!, {s14}
 800a600:	3301      	adds	r3, #1
 800a602:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a606:	e7d6      	b.n	800a5b6 <__kernel_rem_pio2f+0x42e>
 800a608:	edd2 7a00 	vldr	s15, [r2]
 800a60c:	edd2 6a01 	vldr	s13, [r2, #4]
 800a610:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a614:	3801      	subs	r0, #1
 800a616:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a61a:	ed82 7a00 	vstr	s14, [r2]
 800a61e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a622:	edc2 7a01 	vstr	s15, [r2, #4]
 800a626:	e798      	b.n	800a55a <__kernel_rem_pio2f+0x3d2>
 800a628:	edd3 7a00 	vldr	s15, [r3]
 800a62c:	edd3 6a01 	vldr	s13, [r3, #4]
 800a630:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a634:	3a01      	subs	r2, #1
 800a636:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a63a:	ed83 7a00 	vstr	s14, [r3]
 800a63e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a642:	edc3 7a01 	vstr	s15, [r3, #4]
 800a646:	e78d      	b.n	800a564 <__kernel_rem_pio2f+0x3dc>
 800a648:	ed33 7a01 	vldmdb	r3!, {s14}
 800a64c:	3c01      	subs	r4, #1
 800a64e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a652:	e78f      	b.n	800a574 <__kernel_rem_pio2f+0x3ec>
 800a654:	eef1 6a66 	vneg.f32	s13, s13
 800a658:	eeb1 7a47 	vneg.f32	s14, s14
 800a65c:	edc8 6a00 	vstr	s13, [r8]
 800a660:	ed88 7a01 	vstr	s14, [r8, #4]
 800a664:	eef1 7a67 	vneg.f32	s15, s15
 800a668:	e790      	b.n	800a58c <__kernel_rem_pio2f+0x404>
 800a66a:	bf00      	nop

0800a66c <scalbnf>:
 800a66c:	ee10 3a10 	vmov	r3, s0
 800a670:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a674:	d02b      	beq.n	800a6ce <scalbnf+0x62>
 800a676:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a67a:	d302      	bcc.n	800a682 <scalbnf+0x16>
 800a67c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a680:	4770      	bx	lr
 800a682:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a686:	d123      	bne.n	800a6d0 <scalbnf+0x64>
 800a688:	4b24      	ldr	r3, [pc, #144]	; (800a71c <scalbnf+0xb0>)
 800a68a:	eddf 7a25 	vldr	s15, [pc, #148]	; 800a720 <scalbnf+0xb4>
 800a68e:	4298      	cmp	r0, r3
 800a690:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a694:	db17      	blt.n	800a6c6 <scalbnf+0x5a>
 800a696:	ee10 3a10 	vmov	r3, s0
 800a69a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a69e:	3a19      	subs	r2, #25
 800a6a0:	f24c 3150 	movw	r1, #50000	; 0xc350
 800a6a4:	4288      	cmp	r0, r1
 800a6a6:	dd15      	ble.n	800a6d4 <scalbnf+0x68>
 800a6a8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a724 <scalbnf+0xb8>
 800a6ac:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800a728 <scalbnf+0xbc>
 800a6b0:	ee10 3a10 	vmov	r3, s0
 800a6b4:	eeb0 7a67 	vmov.f32	s14, s15
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	bfb8      	it	lt
 800a6bc:	eef0 7a66 	vmovlt.f32	s15, s13
 800a6c0:	ee27 0a87 	vmul.f32	s0, s15, s14
 800a6c4:	4770      	bx	lr
 800a6c6:	eddf 7a19 	vldr	s15, [pc, #100]	; 800a72c <scalbnf+0xc0>
 800a6ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a6ce:	4770      	bx	lr
 800a6d0:	0dd2      	lsrs	r2, r2, #23
 800a6d2:	e7e5      	b.n	800a6a0 <scalbnf+0x34>
 800a6d4:	4410      	add	r0, r2
 800a6d6:	28fe      	cmp	r0, #254	; 0xfe
 800a6d8:	dce6      	bgt.n	800a6a8 <scalbnf+0x3c>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	dd06      	ble.n	800a6ec <scalbnf+0x80>
 800a6de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a6e2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a6e6:	ee00 3a10 	vmov	s0, r3
 800a6ea:	4770      	bx	lr
 800a6ec:	f110 0f16 	cmn.w	r0, #22
 800a6f0:	da09      	bge.n	800a706 <scalbnf+0x9a>
 800a6f2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800a72c <scalbnf+0xc0>
 800a6f6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800a730 <scalbnf+0xc4>
 800a6fa:	ee10 3a10 	vmov	r3, s0
 800a6fe:	eeb0 7a67 	vmov.f32	s14, s15
 800a702:	2b00      	cmp	r3, #0
 800a704:	e7d9      	b.n	800a6ba <scalbnf+0x4e>
 800a706:	3019      	adds	r0, #25
 800a708:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a70c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a710:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800a734 <scalbnf+0xc8>
 800a714:	ee07 3a90 	vmov	s15, r3
 800a718:	e7d7      	b.n	800a6ca <scalbnf+0x5e>
 800a71a:	bf00      	nop
 800a71c:	ffff3cb0 	.word	0xffff3cb0
 800a720:	4c000000 	.word	0x4c000000
 800a724:	7149f2ca 	.word	0x7149f2ca
 800a728:	f149f2ca 	.word	0xf149f2ca
 800a72c:	0da24260 	.word	0x0da24260
 800a730:	8da24260 	.word	0x8da24260
 800a734:	33000000 	.word	0x33000000

0800a738 <floorf>:
 800a738:	ee10 3a10 	vmov	r3, s0
 800a73c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a740:	3a7f      	subs	r2, #127	; 0x7f
 800a742:	2a16      	cmp	r2, #22
 800a744:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a748:	dc2a      	bgt.n	800a7a0 <floorf+0x68>
 800a74a:	2a00      	cmp	r2, #0
 800a74c:	da11      	bge.n	800a772 <floorf+0x3a>
 800a74e:	eddf 7a18 	vldr	s15, [pc, #96]	; 800a7b0 <floorf+0x78>
 800a752:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a756:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a75e:	dd05      	ble.n	800a76c <floorf+0x34>
 800a760:	2b00      	cmp	r3, #0
 800a762:	da23      	bge.n	800a7ac <floorf+0x74>
 800a764:	4a13      	ldr	r2, [pc, #76]	; (800a7b4 <floorf+0x7c>)
 800a766:	2900      	cmp	r1, #0
 800a768:	bf18      	it	ne
 800a76a:	4613      	movne	r3, r2
 800a76c:	ee00 3a10 	vmov	s0, r3
 800a770:	4770      	bx	lr
 800a772:	4911      	ldr	r1, [pc, #68]	; (800a7b8 <floorf+0x80>)
 800a774:	4111      	asrs	r1, r2
 800a776:	420b      	tst	r3, r1
 800a778:	d0fa      	beq.n	800a770 <floorf+0x38>
 800a77a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a7b0 <floorf+0x78>
 800a77e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a782:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a78a:	ddef      	ble.n	800a76c <floorf+0x34>
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	bfbe      	ittt	lt
 800a790:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800a794:	fa40 f202 	asrlt.w	r2, r0, r2
 800a798:	189b      	addlt	r3, r3, r2
 800a79a:	ea23 0301 	bic.w	r3, r3, r1
 800a79e:	e7e5      	b.n	800a76c <floorf+0x34>
 800a7a0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a7a4:	d3e4      	bcc.n	800a770 <floorf+0x38>
 800a7a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a7aa:	4770      	bx	lr
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	e7dd      	b.n	800a76c <floorf+0x34>
 800a7b0:	7149f2ca 	.word	0x7149f2ca
 800a7b4:	bf800000 	.word	0xbf800000
 800a7b8:	007fffff 	.word	0x007fffff

0800a7bc <_init>:
 800a7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7be:	bf00      	nop
 800a7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7c2:	bc08      	pop	{r3}
 800a7c4:	469e      	mov	lr, r3
 800a7c6:	4770      	bx	lr

0800a7c8 <_fini>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	bf00      	nop
 800a7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ce:	bc08      	pop	{r3}
 800a7d0:	469e      	mov	lr, r3
 800a7d2:	4770      	bx	lr
