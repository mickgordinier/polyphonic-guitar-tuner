
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0ec  080001c0  080001c0  000011c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014868  0800e2b0  0800e2b0  0000f2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022b18  08022b18  00024078  2**0
                  CONTENTS
  4 .ARM          00000008  08022b18  08022b18  00023b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022b20  08022b20  00024078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022b20  08022b20  00023b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022b24  08022b24  00023b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08022b28  00024000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  20000078  08022ba0  00024078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  08022ba0  000245d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000255a4  00000000  00000000  000240a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045df  00000000  00000000  0004964c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  0004dc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019303  00000000  00000000  0004f4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00008359  00000000  00000000  000687db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  00070b34  2**0
                  CONTENTS, READONLY
 18 .debug_rnglists 00001238  00000000  00000000  00070bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00006fc0  00000000  00000000  00071e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000073  00000000  00000000  00078de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000035ee  00000000  00000000  00078e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 000000e8  00000000  00000000  0007c445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000078 	.word	0x20000078
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e294 	.word	0x0800e294

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	0800e294 	.word	0x0800e294

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	@ 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2iz>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae0:	d215      	bcs.n	8000b0e <__aeabi_d2iz+0x36>
 8000ae2:	d511      	bpl.n	8000b08 <__aeabi_d2iz+0x30>
 8000ae4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aec:	d912      	bls.n	8000b14 <__aeabi_d2iz+0x3c>
 8000aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d105      	bne.n	8000b20 <__aeabi_d2iz+0x48>
 8000b14:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	bf08      	it	eq
 8000b1a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_d2uiz>:
 8000b28:	004a      	lsls	r2, r1, #1
 8000b2a:	d211      	bcs.n	8000b50 <__aeabi_d2uiz+0x28>
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d211      	bcs.n	8000b56 <__aeabi_d2uiz+0x2e>
 8000b32:	d50d      	bpl.n	8000b50 <__aeabi_d2uiz+0x28>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d40e      	bmi.n	8000b5c <__aeabi_d2uiz+0x34>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_d2uiz+0x3a>
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <ILI9341_Select>:


#include "stm32l4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2110      	movs	r1, #16
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f04:	f004 fed6 	bl	8005cb4 <HAL_GPIO_WritePin>
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2110      	movs	r1, #16
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f18:	f004 fecc 	bl	8005cb4 <HAL_GPIO_WritePin>
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2101      	movs	r1, #1
 8000f28:	4806      	ldr	r0, [pc, #24]	@ (8000f44 <ILI9341_Reset+0x24>)
 8000f2a:	f004 fec3 	bl	8005cb4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000f2e:	2005      	movs	r0, #5
 8000f30:	f003 f8b8 	bl	80040a4 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	2101      	movs	r1, #1
 8000f38:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <ILI9341_Reset+0x24>)
 8000f3a:	f004 febb 	bl	8005cb4 <HAL_GPIO_WritePin>
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	48000400 	.word	0x48000400

08000f48 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2102      	movs	r1, #2
 8000f56:	4807      	ldr	r0, [pc, #28]	@ (8000f74 <ILI9341_WriteCommand+0x2c>)
 8000f58:	f004 feac 	bl	8005cb4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000f5c:	1df9      	adds	r1, r7, #7
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	2201      	movs	r2, #1
 8000f64:	4804      	ldr	r0, [pc, #16]	@ (8000f78 <ILI9341_WriteCommand+0x30>)
 8000f66:	f007 ffee 	bl	8008f46 <HAL_SPI_Transmit>

}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	48000400 	.word	0x48000400
 8000f78:	20000318 	.word	0x20000318

08000f7c <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	2102      	movs	r1, #2
 8000f8a:	4811      	ldr	r0, [pc, #68]	@ (8000fd0 <ILI9341_WriteData+0x54>)
 8000f8c:	f004 fe92 	bl	8005cb4 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000f90:	e015      	b.n	8000fbe <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000f98:	bf28      	it	cs
 8000f9a:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000f9e:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000fa0:	89fa      	ldrh	r2, [r7, #14]
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	480a      	ldr	r0, [pc, #40]	@ (8000fd4 <ILI9341_WriteData+0x58>)
 8000faa:	f007 ffcc 	bl	8008f46 <HAL_SPI_Transmit>

        buff += chunk_size;
 8000fae:	89fb      	ldrh	r3, [r7, #14]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000fb6:	89fb      	ldrh	r3, [r7, #14]
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1e6      	bne.n	8000f92 <ILI9341_WriteData+0x16>
    }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	48000400 	.word	0x48000400
 8000fd4:	20000318 	.word	0x20000318

08000fd8 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4604      	mov	r4, r0
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	80fb      	strh	r3, [r7, #6]
 8000fea:	4603      	mov	r3, r0
 8000fec:	80bb      	strh	r3, [r7, #4]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	807b      	strh	r3, [r7, #2]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8000ff6:	202a      	movs	r0, #42	@ 0x2a
 8000ff8:	f7ff ffa6 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	0a1b      	lsrs	r3, r3, #8
 8001000:	b29b      	uxth	r3, r3
 8001002:	b2db      	uxtb	r3, r3
 8001004:	733b      	strb	r3, [r7, #12]
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	737b      	strb	r3, [r7, #13]
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	b29b      	uxth	r3, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	73bb      	strb	r3, [r7, #14]
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2104      	movs	r1, #4
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ffaa 	bl	8000f7c <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8001028:	202b      	movs	r0, #43	@ 0x2b
 800102a:	f7ff ff8d 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800102e:	88bb      	ldrh	r3, [r7, #4]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	b29b      	uxth	r3, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	723b      	strb	r3, [r7, #8]
 8001038:	88bb      	ldrh	r3, [r7, #4]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	727b      	strb	r3, [r7, #9]
 800103e:	883b      	ldrh	r3, [r7, #0]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	b29b      	uxth	r3, r3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	72bb      	strb	r3, [r7, #10]
 8001048:	883b      	ldrh	r3, [r7, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	2104      	movs	r1, #4
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff91 	bl	8000f7c <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800105a:	202c      	movs	r0, #44	@ 0x2c
 800105c:	f7ff ff74 	bl	8000f48 <ILI9341_WriteCommand>
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}

08001068 <ILI9341_Init>:

void ILI9341_Init() {
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b09b      	sub	sp, #108	@ 0x6c
 800106c:	af00      	add	r7, sp, #0
    ILI9341_Select();
 800106e:	f7ff ff43 	bl	8000ef8 <ILI9341_Select>
    ILI9341_Reset();
 8001072:	f7ff ff55 	bl	8000f20 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8001076:	2001      	movs	r0, #1
 8001078:	f7ff ff66 	bl	8000f48 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 800107c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001080:	f003 f810 	bl	80040a4 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8001084:	20cb      	movs	r0, #203	@ 0xcb
 8001086:	f7ff ff5f 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800108a:	4a87      	ldr	r2, [pc, #540]	@ (80012a8 <ILI9341_Init+0x240>)
 800108c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001090:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001094:	6018      	str	r0, [r3, #0]
 8001096:	3304      	adds	r3, #4
 8001098:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800109a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800109e:	2105      	movs	r1, #5
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff6b 	bl	8000f7c <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80010a6:	20cf      	movs	r0, #207	@ 0xcf
 80010a8:	f7ff ff4e 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80010ac:	4a7f      	ldr	r2, [pc, #508]	@ (80012ac <ILI9341_Init+0x244>)
 80010ae:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	4611      	mov	r1, r2
 80010b6:	8019      	strh	r1, [r3, #0]
 80010b8:	3302      	adds	r3, #2
 80010ba:	0c12      	lsrs	r2, r2, #16
 80010bc:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80010be:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010c2:	2103      	movs	r1, #3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff59 	bl	8000f7c <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80010ca:	20e8      	movs	r0, #232	@ 0xe8
 80010cc:	f7ff ff3c 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80010d0:	4a77      	ldr	r2, [pc, #476]	@ (80012b0 <ILI9341_Init+0x248>)
 80010d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	4611      	mov	r1, r2
 80010da:	8019      	strh	r1, [r3, #0]
 80010dc:	3302      	adds	r3, #2
 80010de:	0c12      	lsrs	r2, r2, #16
 80010e0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80010e2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010e6:	2103      	movs	r1, #3
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff47 	bl	8000f7c <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 80010ee:	20ea      	movs	r0, #234	@ 0xea
 80010f0:	f7ff ff2a 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 80010fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010fe:	2102      	movs	r1, #2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff3b 	bl	8000f7c <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8001106:	20ed      	movs	r0, #237	@ 0xed
 8001108:	f7ff ff1e 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 800110c:	4b69      	ldr	r3, [pc, #420]	@ (80012b4 <ILI9341_Init+0x24c>)
 800110e:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8001110:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001114:	2104      	movs	r1, #4
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff30 	bl	8000f7c <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 800111c:	20f7      	movs	r0, #247	@ 0xf7
 800111e:	f7ff ff13 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8001122:	2320      	movs	r3, #32
 8001124:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8001128:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800112c:	2101      	movs	r1, #1
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff24 	bl	8000f7c <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8001134:	20c0      	movs	r0, #192	@ 0xc0
 8001136:	f7ff ff07 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800113a:	2323      	movs	r3, #35	@ 0x23
 800113c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 8001140:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001144:	2101      	movs	r1, #1
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff18 	bl	8000f7c <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 800114c:	20c1      	movs	r0, #193	@ 0xc1
 800114e:	f7ff fefb 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8001152:	2310      	movs	r3, #16
 8001154:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 8001158:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800115c:	2101      	movs	r1, #1
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff0c 	bl	8000f7c <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8001164:	20c5      	movs	r0, #197	@ 0xc5
 8001166:	f7ff feef 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 800116a:	f642 033e 	movw	r3, #10302	@ 0x283e
 800116e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 8001172:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001176:	2102      	movs	r1, #2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff feff 	bl	8000f7c <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 800117e:	20c7      	movs	r0, #199	@ 0xc7
 8001180:	f7ff fee2 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8001184:	2386      	movs	r3, #134	@ 0x86
 8001186:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 800118a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800118e:	2101      	movs	r1, #1
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fef3 	bl	8000f7c <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8001196:	2036      	movs	r0, #54	@ 0x36
 8001198:	f7ff fed6 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 800119c:	2348      	movs	r3, #72	@ 0x48
 800119e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 80011a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011a6:	2101      	movs	r1, #1
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fee7 	bl	8000f7c <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80011ae:	203a      	movs	r0, #58	@ 0x3a
 80011b0:	f7ff feca 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80011b4:	2355      	movs	r3, #85	@ 0x55
 80011b6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 80011ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011be:	2101      	movs	r1, #1
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fedb 	bl	8000f7c <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80011c6:	20b1      	movs	r0, #177	@ 0xb1
 80011c8:	f7ff febe 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80011cc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011d0:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 80011d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011d6:	2102      	movs	r1, #2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fecf 	bl	8000f7c <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80011de:	20b6      	movs	r0, #182	@ 0xb6
 80011e0:	f7ff feb2 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80011e4:	4a34      	ldr	r2, [pc, #208]	@ (80012b8 <ILI9341_Init+0x250>)
 80011e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011ea:	6812      	ldr	r2, [r2, #0]
 80011ec:	4611      	mov	r1, r2
 80011ee:	8019      	strh	r1, [r3, #0]
 80011f0:	3302      	adds	r3, #2
 80011f2:	0c12      	lsrs	r2, r2, #16
 80011f4:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80011f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011fa:	2103      	movs	r1, #3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff febd 	bl	8000f7c <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8001202:	20f2      	movs	r0, #242	@ 0xf2
 8001204:	f7ff fea0 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8001208:	2300      	movs	r3, #0
 800120a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 800120e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001212:	2101      	movs	r1, #1
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff feb1 	bl	8000f7c <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 800121a:	2026      	movs	r0, #38	@ 0x26
 800121c:	f7ff fe94 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8001220:	2301      	movs	r3, #1
 8001222:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 8001226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800122a:	2101      	movs	r1, #1
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fea5 	bl	8000f7c <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8001232:	20e0      	movs	r0, #224	@ 0xe0
 8001234:	f7ff fe88 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8001238:	4b20      	ldr	r3, [pc, #128]	@ (80012bc <ILI9341_Init+0x254>)
 800123a:	f107 0414 	add.w	r4, r7, #20
 800123e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001240:	c407      	stmia	r4!, {r0, r1, r2}
 8001242:	8023      	strh	r3, [r4, #0]
 8001244:	3402      	adds	r4, #2
 8001246:	0c1b      	lsrs	r3, r3, #16
 8001248:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	210f      	movs	r1, #15
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fe93 	bl	8000f7c <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8001256:	20e1      	movs	r0, #225	@ 0xe1
 8001258:	f7ff fe76 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 800125c:	4b18      	ldr	r3, [pc, #96]	@ (80012c0 <ILI9341_Init+0x258>)
 800125e:	1d3c      	adds	r4, r7, #4
 8001260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001262:	c407      	stmia	r4!, {r0, r1, r2}
 8001264:	8023      	strh	r3, [r4, #0]
 8001266:	3402      	adds	r4, #2
 8001268:	0c1b      	lsrs	r3, r3, #16
 800126a:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	210f      	movs	r1, #15
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fe83 	bl	8000f7c <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8001276:	2011      	movs	r0, #17
 8001278:	f7ff fe66 	bl	8000f48 <ILI9341_WriteCommand>
    HAL_Delay(120);
 800127c:	2078      	movs	r0, #120	@ 0x78
 800127e:	f002 ff11 	bl	80040a4 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8001282:	2029      	movs	r0, #41	@ 0x29
 8001284:	f7ff fe60 	bl	8000f48 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8001288:	2036      	movs	r0, #54	@ 0x36
 800128a:	f7ff fe5d 	bl	8000f48 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 800128e:	2348      	movs	r3, #72	@ 0x48
 8001290:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001292:	463b      	mov	r3, r7
 8001294:	2101      	movs	r1, #1
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fe70 	bl	8000f7c <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 800129c:	f7ff fe36 	bl	8000f0c <ILI9341_Unselect>
}
 80012a0:	bf00      	nop
 80012a2:	376c      	adds	r7, #108	@ 0x6c
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}
 80012a8:	0800e2b0 	.word	0x0800e2b0
 80012ac:	0800e2b8 	.word	0x0800e2b8
 80012b0:	0800e2bc 	.word	0x0800e2bc
 80012b4:	81120364 	.word	0x81120364
 80012b8:	0800e2c0 	.word	0x0800e2c0
 80012bc:	0800e2c4 	.word	0x0800e2c4
 80012c0:	0800e2d4 	.word	0x0800e2d4

080012c4 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80012c4:	b082      	sub	sp, #8
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b088      	sub	sp, #32
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
 80012d2:	460b      	mov	r3, r1
 80012d4:	80bb      	strh	r3, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80012da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012de:	461a      	mov	r2, r3
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	4413      	add	r3, r2
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	3b01      	subs	r3, #1
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80012ee:	4619      	mov	r1, r3
 80012f0:	88bb      	ldrh	r3, [r7, #4]
 80012f2:	440b      	add	r3, r1
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	3b01      	subs	r3, #1
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	88b9      	ldrh	r1, [r7, #4]
 80012fc:	88f8      	ldrh	r0, [r7, #6]
 80012fe:	f7ff fe6b 	bl	8000fd8 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
 8001306:	e041      	b.n	800138c <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 8001308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	3b20      	subs	r3, #32
 800130e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001312:	fb01 f303 	mul.w	r3, r1, r3
 8001316:	4619      	mov	r1, r3
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	440b      	add	r3, r1
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	e027      	b.n	800137a <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00e      	beq.n	8001358 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800133a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	b29b      	uxth	r3, r3
 8001340:	b2db      	uxtb	r3, r3
 8001342:	743b      	strb	r3, [r7, #16]
 8001344:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001346:	b2db      	uxtb	r3, r3
 8001348:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	2102      	movs	r1, #2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe13 	bl	8000f7c <ILI9341_WriteData>
 8001356:	e00d      	b.n	8001374 <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001358:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	b29b      	uxth	r3, r3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	733b      	strb	r3, [r7, #12]
 8001362:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001364:	b2db      	uxtb	r3, r3
 8001366:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2102      	movs	r1, #2
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fe04 	bl	8000f7c <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	3301      	adds	r3, #1
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800137e:	461a      	mov	r2, r3
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	4293      	cmp	r3, r2
 8001384:	d3d1      	bcc.n	800132a <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001390:	461a      	mov	r2, r3
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	4293      	cmp	r3, r2
 8001396:	d3b7      	bcc.n	8001308 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013a4:	b002      	add	sp, #8
 80013a6:	4770      	bx	lr

080013a8 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80013a8:	b082      	sub	sp, #8
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af04      	add	r7, sp, #16
 80013b0:	603a      	str	r2, [r7, #0]
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	4603      	mov	r3, r0
 80013b6:	80fb      	strh	r3, [r7, #6]
 80013b8:	460b      	mov	r3, r1
 80013ba:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 80013bc:	f7ff fd9c 	bl	8000ef8 <ILI9341_Select>

    while(*str) {
 80013c0:	e02e      	b.n	8001420 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	7d3a      	ldrb	r2, [r7, #20]
 80013c6:	4413      	add	r3, r2
 80013c8:	2bef      	cmp	r3, #239	@ 0xef
 80013ca:	dd14      	ble.n	80013f6 <ILI9341_WriteString+0x4e>
            x = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80013d0:	7d7b      	ldrb	r3, [r7, #21]
 80013d2:	461a      	mov	r2, r3
 80013d4:	88bb      	ldrh	r3, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 80013da:	88bb      	ldrh	r3, [r7, #4]
 80013dc:	7d7a      	ldrb	r2, [r7, #21]
 80013de:	4413      	add	r3, r2
 80013e0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80013e4:	da21      	bge.n	800142a <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b20      	cmp	r3, #32
 80013ec:	d103      	bne.n	80013f6 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	603b      	str	r3, [r7, #0]
                continue;
 80013f4:	e014      	b.n	8001420 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	781a      	ldrb	r2, [r3, #0]
 80013fa:	88b9      	ldrh	r1, [r7, #4]
 80013fc:	88f8      	ldrh	r0, [r7, #6]
 80013fe:	8c3b      	ldrh	r3, [r7, #32]
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	8bbb      	ldrh	r3, [r7, #28]
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f7ff ff5a 	bl	80012c4 <ILI9341_WriteChar>
        x += font.width;
 8001410:	7d3b      	ldrb	r3, [r7, #20]
 8001412:	461a      	mov	r2, r3
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	4413      	add	r3, r2
 8001418:	80fb      	strh	r3, [r7, #6]
        str++;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1cc      	bne.n	80013c2 <ILI9341_WriteString+0x1a>
 8001428:	e000      	b.n	800142c <ILI9341_WriteString+0x84>
                break;
 800142a:	bf00      	nop
    }

    ILI9341_Unselect();
 800142c:	f7ff fd6e 	bl	8000f0c <ILI9341_Unselect>
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800143a:	b002      	add	sp, #8
 800143c:	4770      	bx	lr
	...

08001440 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	4604      	mov	r4, r0
 8001448:	4608      	mov	r0, r1
 800144a:	4611      	mov	r1, r2
 800144c:	461a      	mov	r2, r3
 800144e:	4623      	mov	r3, r4
 8001450:	80fb      	strh	r3, [r7, #6]
 8001452:	4603      	mov	r3, r0
 8001454:	80bb      	strh	r3, [r7, #4]
 8001456:	460b      	mov	r3, r1
 8001458:	807b      	strh	r3, [r7, #2]
 800145a:	4613      	mov	r3, r2
 800145c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	2bef      	cmp	r3, #239	@ 0xef
 8001462:	d853      	bhi.n	800150c <ILI9341_FillRectangle+0xcc>
 8001464:	88bb      	ldrh	r3, [r7, #4]
 8001466:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800146a:	d24f      	bcs.n	800150c <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 800146c:	88fa      	ldrh	r2, [r7, #6]
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	4413      	add	r3, r2
 8001472:	2bf0      	cmp	r3, #240	@ 0xf0
 8001474:	dd03      	ble.n	800147e <ILI9341_FillRectangle+0x3e>
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800147c:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 800147e:	88ba      	ldrh	r2, [r7, #4]
 8001480:	883b      	ldrh	r3, [r7, #0]
 8001482:	4413      	add	r3, r2
 8001484:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001488:	dd03      	ble.n	8001492 <ILI9341_FillRectangle+0x52>
 800148a:	88bb      	ldrh	r3, [r7, #4]
 800148c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001490:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8001492:	f7ff fd31 	bl	8000ef8 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001496:	88fa      	ldrh	r2, [r7, #6]
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	4413      	add	r3, r2
 800149c:	b29b      	uxth	r3, r3
 800149e:	3b01      	subs	r3, #1
 80014a0:	b29c      	uxth	r4, r3
 80014a2:	88ba      	ldrh	r2, [r7, #4]
 80014a4:	883b      	ldrh	r3, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3b01      	subs	r3, #1
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	88b9      	ldrh	r1, [r7, #4]
 80014b0:	88f8      	ldrh	r0, [r7, #6]
 80014b2:	4622      	mov	r2, r4
 80014b4:	f7ff fd90 	bl	8000fd8 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80014b8:	8c3b      	ldrh	r3, [r7, #32]
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	b29b      	uxth	r3, r3
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	733b      	strb	r3, [r7, #12]
 80014c2:	8c3b      	ldrh	r3, [r7, #32]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	2102      	movs	r1, #2
 80014cc:	4811      	ldr	r0, [pc, #68]	@ (8001514 <ILI9341_FillRectangle+0xd4>)
 80014ce:	f004 fbf1 	bl	8005cb4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80014d2:	883b      	ldrh	r3, [r7, #0]
 80014d4:	80bb      	strh	r3, [r7, #4]
 80014d6:	e013      	b.n	8001500 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	80fb      	strh	r3, [r7, #6]
 80014dc:	e00a      	b.n	80014f4 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80014de:	f107 010c 	add.w	r1, r7, #12
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	2202      	movs	r2, #2
 80014e8:	480b      	ldr	r0, [pc, #44]	@ (8001518 <ILI9341_FillRectangle+0xd8>)
 80014ea:	f007 fd2c 	bl	8008f46 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	80fb      	strh	r3, [r7, #6]
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f1      	bne.n	80014de <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 80014fa:	88bb      	ldrh	r3, [r7, #4]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	80bb      	strh	r3, [r7, #4]
 8001500:	88bb      	ldrh	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1e8      	bne.n	80014d8 <ILI9341_FillRectangle+0x98>

        }
    }

    ILI9341_Unselect();
 8001506:	f7ff fd01 	bl	8000f0c <ILI9341_Unselect>
 800150a:	e000      	b.n	800150e <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800150c:	bf00      	nop
}
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bd90      	pop	{r4, r7, pc}
 8001514:	48000400 	.word	0x48000400
 8001518:	20000318 	.word	0x20000318

0800151c <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af02      	add	r7, sp, #8
 8001522:	4603      	mov	r3, r0
 8001524:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800152e:	22f0      	movs	r2, #240	@ 0xf0
 8001530:	2100      	movs	r1, #0
 8001532:	2000      	movs	r0, #0
 8001534:	f7ff ff84 	bl	8001440 <ILI9341_FillRectangle>
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8001544:	2201      	movs	r2, #1
 8001546:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800154a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800154e:	f004 fbb1 	bl	8005cb4 <HAL_GPIO_WritePin>
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

	convFlag = 1;
 8001560:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001562:	2201      	movs	r2, #1
 8001564:	601a      	str	r2, [r3, #0]

}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000460 	.word	0x20000460

08001578 <apply_hanning_window>:


void apply_hanning_window(float32_t * signal, uint32_t length){
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < length; ++i){
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	e033      	b.n	80015f0 <apply_hanning_window+0x78>
		float32_t han_value = 0.5f * (1.0f - cosf(2 * PI * i / (length - 1)));
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001592:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001604 <apply_hanning_window+0x8c>
 8001596:	ee27 7a87 	vmul.f32	s14, s15, s14
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	3b01      	subs	r3, #1
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015aa:	eeb0 0a66 	vmov.f32	s0, s13
 80015ae:	f00b f9cb 	bl	800c948 <cosf>
 80015b2:	eef0 7a40 	vmov.f32	s15, s0
 80015b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80015c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c6:	edc7 7a02 	vstr	s15, [r7, #8]
		signal[i] *= han_value;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	ed93 7a00 	vldr	s14, [r3]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	edd7 7a02 	vldr	s15, [r7, #8]
 80015e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < length; ++i){
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3301      	adds	r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d8c7      	bhi.n	8001588 <apply_hanning_window+0x10>
	}
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40c90fdb 	.word	0x40c90fdb

08001608 <set_motor_speed_1>:

    arm_rfft_fast_f32(&fftInstance, power_spectrum, autocorrelation, 1);

    arm_abs_f32(autocorrelation, autocorrelation, BUFFER_LENGTH);
}
void set_motor_speed_1(int motor_speed) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7fe ff47 	bl	80004a4 <__aeabi_i2d>
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	4b23      	ldr	r3, [pc, #140]	@ (80016a8 <set_motor_speed_1+0xa0>)
 800161c:	f7ff f8d6 	bl	80007cc <__aeabi_ddiv>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	a319      	add	r3, pc, #100	@ (adr r3, 8001690 <set_motor_speed_1+0x88>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7fe ffa3 	bl	8000578 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	a317      	add	r3, pc, #92	@ (adr r3, 8001698 <set_motor_speed_1+0x90>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	f7fe fde4 	bl	800020c <__adddf3>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr1 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <set_motor_speed_1+0xa4>)
 8001652:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001656:	f7ff f8b9 	bl	80007cc <__aeabi_ddiv>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	a30f      	add	r3, pc, #60	@ (adr r3, 80016a0 <set_motor_speed_1+0x98>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7fe ff86 	bl	8000578 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f7ff fa30 	bl	8000ad8 <__aeabi_d2iz>
 8001678:	4603      	mov	r3, r0
 800167a:	60fb      	str	r3, [r7, #12]

  TIM4->CCR1 = temp_ccr1;
 800167c:	4a0c      	ldr	r2, [pc, #48]	@ (80016b0 <set_motor_speed_1+0xa8>)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	f3af 8000 	nop.w
 8001690:	c28f5c29 	.word	0xc28f5c29
 8001694:	3fdc28f5 	.word	0x3fdc28f5
 8001698:	47ae147b 	.word	0x47ae147b
 800169c:	3ff47ae1 	.word	0x3ff47ae1
 80016a0:	00000000 	.word	0x00000000
 80016a4:	412e8480 	.word	0x412e8480
 80016a8:	40590000 	.word	0x40590000
 80016ac:	408f4000 	.word	0x408f4000
 80016b0:	40000800 	.word	0x40000800
 80016b4:	00000000 	.word	0x00000000

080016b8 <set_motor_speed_2>:

void set_motor_speed_2(int motor_speed) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7fe feef 	bl	80004a4 <__aeabi_i2d>
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <set_motor_speed_2+0xa0>)
 80016cc:	f7ff f87e 	bl	80007cc <__aeabi_ddiv>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	a319      	add	r3, pc, #100	@ (adr r3, 8001740 <set_motor_speed_2+0x88>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7fe ff4b 	bl	8000578 <__aeabi_dmul>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	a317      	add	r3, pc, #92	@ (adr r3, 8001748 <set_motor_speed_2+0x90>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	f7fe fd8c 	bl	800020c <__adddf3>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr2 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	4b16      	ldr	r3, [pc, #88]	@ (800175c <set_motor_speed_2+0xa4>)
 8001702:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001706:	f7ff f861 	bl	80007cc <__aeabi_ddiv>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	a30f      	add	r3, pc, #60	@ (adr r3, 8001750 <set_motor_speed_2+0x98>)
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	f7fe ff2e 	bl	8000578 <__aeabi_dmul>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f7ff f9d8 	bl	8000ad8 <__aeabi_d2iz>
 8001728:	4603      	mov	r3, r0
 800172a:	60fb      	str	r3, [r7, #12]

  TIM4->CCR2 = temp_ccr2;
 800172c:	4a0c      	ldr	r2, [pc, #48]	@ (8001760 <set_motor_speed_2+0xa8>)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	f3af 8000 	nop.w
 8001740:	c28f5c29 	.word	0xc28f5c29
 8001744:	3fdc28f5 	.word	0x3fdc28f5
 8001748:	47ae147b 	.word	0x47ae147b
 800174c:	3ff47ae1 	.word	0x3ff47ae1
 8001750:	00000000 	.word	0x00000000
 8001754:	412e8480 	.word	0x412e8480
 8001758:	40590000 	.word	0x40590000
 800175c:	408f4000 	.word	0x408f4000
 8001760:	40000800 	.word	0x40000800
 8001764:	00000000 	.word	0x00000000

08001768 <set_motor_speed_3>:

void set_motor_speed_3(int motor_speed) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7fe fe97 	bl	80004a4 <__aeabi_i2d>
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <set_motor_speed_3+0xa0>)
 800177c:	f7ff f826 	bl	80007cc <__aeabi_ddiv>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	a319      	add	r3, pc, #100	@ (adr r3, 80017f0 <set_motor_speed_3+0x88>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7fe fef3 	bl	8000578 <__aeabi_dmul>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	a317      	add	r3, pc, #92	@ (adr r3, 80017f8 <set_motor_speed_3+0x90>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7fe fd34 	bl	800020c <__adddf3>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr3 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	4b16      	ldr	r3, [pc, #88]	@ (800180c <set_motor_speed_3+0xa4>)
 80017b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017b6:	f7ff f809 	bl	80007cc <__aeabi_ddiv>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	a30f      	add	r3, pc, #60	@ (adr r3, 8001800 <set_motor_speed_3+0x98>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe fed6 	bl	8000578 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff f980 	bl	8000ad8 <__aeabi_d2iz>
 80017d8:	4603      	mov	r3, r0
 80017da:	60fb      	str	r3, [r7, #12]

  TIM4->CCR3 = temp_ccr3;
 80017dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001810 <set_motor_speed_3+0xa8>)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	f3af 8000 	nop.w
 80017f0:	c28f5c29 	.word	0xc28f5c29
 80017f4:	3fdc28f5 	.word	0x3fdc28f5
 80017f8:	47ae147b 	.word	0x47ae147b
 80017fc:	3ff47ae1 	.word	0x3ff47ae1
 8001800:	00000000 	.word	0x00000000
 8001804:	412e8480 	.word	0x412e8480
 8001808:	40590000 	.word	0x40590000
 800180c:	408f4000 	.word	0x408f4000
 8001810:	40000800 	.word	0x40000800
 8001814:	00000000 	.word	0x00000000

08001818 <set_motor_speed_4>:

void set_motor_speed_4(int motor_speed) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7fe fe3f 	bl	80004a4 <__aeabi_i2d>
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4b23      	ldr	r3, [pc, #140]	@ (80018b8 <set_motor_speed_4+0xa0>)
 800182c:	f7fe ffce 	bl	80007cc <__aeabi_ddiv>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	a319      	add	r3, pc, #100	@ (adr r3, 80018a0 <set_motor_speed_4+0x88>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7fe fe9b 	bl	8000578 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	a317      	add	r3, pc, #92	@ (adr r3, 80018a8 <set_motor_speed_4+0x90>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f7fe fcdc 	bl	800020c <__adddf3>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr4 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <set_motor_speed_4+0xa4>)
 8001862:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001866:	f7fe ffb1 	bl	80007cc <__aeabi_ddiv>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	a30f      	add	r3, pc, #60	@ (adr r3, 80018b0 <set_motor_speed_4+0x98>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f7fe fe7e 	bl	8000578 <__aeabi_dmul>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f7ff f928 	bl	8000ad8 <__aeabi_d2iz>
 8001888:	4603      	mov	r3, r0
 800188a:	60fb      	str	r3, [r7, #12]

  TIM4->CCR4 = temp_ccr4;
 800188c:	4a0c      	ldr	r2, [pc, #48]	@ (80018c0 <set_motor_speed_4+0xa8>)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001892:	bf00      	nop
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	f3af 8000 	nop.w
 80018a0:	c28f5c29 	.word	0xc28f5c29
 80018a4:	3fdc28f5 	.word	0x3fdc28f5
 80018a8:	47ae147b 	.word	0x47ae147b
 80018ac:	3ff47ae1 	.word	0x3ff47ae1
 80018b0:	00000000 	.word	0x00000000
 80018b4:	412e8480 	.word	0x412e8480
 80018b8:	40590000 	.word	0x40590000
 80018bc:	408f4000 	.word	0x408f4000
 80018c0:	40000800 	.word	0x40000800
 80018c4:	00000000 	.word	0x00000000

080018c8 <set_motor_speed_5>:

void set_motor_speed_5(int motor_speed) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7fe fde7 	bl	80004a4 <__aeabi_i2d>
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	4b23      	ldr	r3, [pc, #140]	@ (8001968 <set_motor_speed_5+0xa0>)
 80018dc:	f7fe ff76 	bl	80007cc <__aeabi_ddiv>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	a319      	add	r3, pc, #100	@ (adr r3, 8001950 <set_motor_speed_5+0x88>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	f7fe fe43 	bl	8000578 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	a317      	add	r3, pc, #92	@ (adr r3, 8001958 <set_motor_speed_5+0x90>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	f7fe fc84 	bl	800020c <__adddf3>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr1 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	4b16      	ldr	r3, [pc, #88]	@ (800196c <set_motor_speed_5+0xa4>)
 8001912:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001916:	f7fe ff59 	bl	80007cc <__aeabi_ddiv>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	a30f      	add	r3, pc, #60	@ (adr r3, 8001960 <set_motor_speed_5+0x98>)
 8001924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001928:	f7fe fe26 	bl	8000578 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff f8d0 	bl	8000ad8 <__aeabi_d2iz>
 8001938:	4603      	mov	r3, r0
 800193a:	60fb      	str	r3, [r7, #12]

  TIM5->CCR1 = temp_ccr1;
 800193c:	4a0c      	ldr	r2, [pc, #48]	@ (8001970 <set_motor_speed_5+0xa8>)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	f3af 8000 	nop.w
 8001950:	c28f5c29 	.word	0xc28f5c29
 8001954:	3fdc28f5 	.word	0x3fdc28f5
 8001958:	47ae147b 	.word	0x47ae147b
 800195c:	3ff47ae1 	.word	0x3ff47ae1
 8001960:	00000000 	.word	0x00000000
 8001964:	412e8480 	.word	0x412e8480
 8001968:	40590000 	.word	0x40590000
 800196c:	408f4000 	.word	0x408f4000
 8001970:	40000c00 	.word	0x40000c00
 8001974:	00000000 	.word	0x00000000

08001978 <set_motor_speed_6>:
void set_motor_speed_6(int motor_speed) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7fe fd8f 	bl	80004a4 <__aeabi_i2d>
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	4b23      	ldr	r3, [pc, #140]	@ (8001a18 <set_motor_speed_6+0xa0>)
 800198c:	f7fe ff1e 	bl	80007cc <__aeabi_ddiv>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	a319      	add	r3, pc, #100	@ (adr r3, 8001a00 <set_motor_speed_6+0x88>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe fdeb 	bl	8000578 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	a317      	add	r3, pc, #92	@ (adr r3, 8001a08 <set_motor_speed_6+0x90>)
 80019ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b0:	f7fe fc2c 	bl	800020c <__adddf3>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr3 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	4b16      	ldr	r3, [pc, #88]	@ (8001a1c <set_motor_speed_6+0xa4>)
 80019c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019c6:	f7fe ff01 	bl	80007cc <__aeabi_ddiv>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	a30f      	add	r3, pc, #60	@ (adr r3, 8001a10 <set_motor_speed_6+0x98>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7fe fdce 	bl	8000578 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f7ff f878 	bl	8000ad8 <__aeabi_d2iz>
 80019e8:	4603      	mov	r3, r0
 80019ea:	60fb      	str	r3, [r7, #12]

  TIM5->CCR3 = temp_ccr3;
 80019ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001a20 <set_motor_speed_6+0xa8>)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	f3af 8000 	nop.w
 8001a00:	c28f5c29 	.word	0xc28f5c29
 8001a04:	3fdc28f5 	.word	0x3fdc28f5
 8001a08:	47ae147b 	.word	0x47ae147b
 8001a0c:	3ff47ae1 	.word	0x3ff47ae1
 8001a10:	00000000 	.word	0x00000000
 8001a14:	412e8480 	.word	0x412e8480
 8001a18:	40590000 	.word	0x40590000
 8001a1c:	408f4000 	.word	0x408f4000
 8001a20:	40000c00 	.word	0x40000c00

08001a24 <screenInit>:

void screenInit () {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	ILI9341_Unselect();
 8001a28:	f7ff fa70 	bl	8000f0c <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 8001a2c:	f7ff fd88 	bl	8001540 <ILI9341_TouchUnselect>
	ILI9341_Init();
 8001a30:	f7ff fb1a 	bl	8001068 <ILI9341_Init>
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <reverse>:

void reverse(char* str, int len)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001a4c:	e018      	b.n	8001a80 <reverse+0x48>
        temp = str[i];
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	441a      	add	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	440b      	add	r3, r1
 8001a64:	7812      	ldrb	r2, [r2, #0]
 8001a66:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	701a      	strb	r2, [r3, #0]
        i++;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3301      	adds	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
        j--;
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dbe2      	blt.n	8001a4e <reverse+0x16>
    }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	371c      	adds	r7, #28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <intToStr>:

int intToStr(int x, char str[], int d)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
    while (x) {
 8001aa8:	e01d      	b.n	8001ae6 <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <intToStr+0x8c>)
 8001aae:	fb83 1302 	smull	r1, r3, r3, r2
 8001ab2:	1099      	asrs	r1, r3, #2
 8001ab4:	17d3      	asrs	r3, r2, #31
 8001ab6:	1ac9      	subs	r1, r1, r3
 8001ab8:	460b      	mov	r3, r1
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	1ad1      	subs	r1, r2, r3
 8001ac2:	b2ca      	uxtb	r2, r1
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	1c59      	adds	r1, r3, #1
 8001ac8:	6179      	str	r1, [r7, #20]
 8001aca:	4619      	mov	r1, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	440b      	add	r3, r1
 8001ad0:	3230      	adds	r2, #48	@ 0x30
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4a12      	ldr	r2, [pc, #72]	@ (8001b24 <intToStr+0x8c>)
 8001ada:	fb82 1203 	smull	r1, r2, r2, r3
 8001ade:	1092      	asrs	r2, r2, #2
 8001ae0:	17db      	asrs	r3, r3, #31
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	60fb      	str	r3, [r7, #12]
    while (x) {
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1de      	bne.n	8001aaa <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8001aec:	e007      	b.n	8001afe <intToStr+0x66>
        str[i++] = '0';
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	617a      	str	r2, [r7, #20]
 8001af4:	461a      	mov	r2, r3
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	4413      	add	r3, r2
 8001afa:	2230      	movs	r2, #48	@ 0x30
 8001afc:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	dbf3      	blt.n	8001aee <intToStr+0x56>

    reverse(str, i);
 8001b06:	6979      	ldr	r1, [r7, #20]
 8001b08:	68b8      	ldr	r0, [r7, #8]
 8001b0a:	f7ff ff95 	bl	8001a38 <reverse>
    str[i] = '\0';
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	4413      	add	r3, r2
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
    return i;
 8001b18:	697b      	ldr	r3, [r7, #20]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	66666667 	.word	0x66666667

08001b28 <ftoa>:

void ftoa(float n, char* res, int afterpoint)
{
 8001b28:	b5b0      	push	{r4, r5, r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b32:	60b8      	str	r0, [r7, #8]
 8001b34:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8001b36:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b3e:	ee17 3a90 	vmov	r3, s15
 8001b42:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b4e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b56:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	69f8      	ldr	r0, [r7, #28]
 8001b60:	f7ff ff9a 	bl	8001a98 <intToStr>
 8001b64:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d030      	beq.n	8001bce <ftoa+0xa6>
        res[i] = '.'; // add dot
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	4413      	add	r3, r2
 8001b72:	222e      	movs	r2, #46	@ 0x2e
 8001b74:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8001b76:	69b8      	ldr	r0, [r7, #24]
 8001b78:	f7fe fca6 	bl	80004c8 <__aeabi_f2d>
 8001b7c:	4604      	mov	r4, r0
 8001b7e:	460d      	mov	r5, r1
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7fe fc8f 	bl	80004a4 <__aeabi_i2d>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	ec43 2b11 	vmov	d1, r2, r3
 8001b8e:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8001bd8 <ftoa+0xb0>
 8001b92:	f00a fe4b 	bl	800c82c <pow>
 8001b96:	ec53 2b10 	vmov	r2, r3, d0
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	4629      	mov	r1, r5
 8001b9e:	f7fe fceb 	bl	8000578 <__aeabi_dmul>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f7fe ffdd 	bl	8000b68 <__aeabi_d2f>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8001bb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	ee17 0a90 	vmov	r0, s15
 8001bca:	f7ff ff65 	bl	8001a98 <intToStr>
    }
}
 8001bce:	bf00      	nop
 8001bd0:	3720      	adds	r7, #32
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	00000000 	.word	0x00000000
 8001bdc:	40240000 	.word	0x40240000

08001be0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == 64) {
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	2b40      	cmp	r3, #64	@ 0x40
 8001bee:	d10a      	bne.n	8001c06 <HAL_GPIO_EXTI_Callback+0x26>
		if (startFlag) {
 8001bf0:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <HAL_GPIO_EXTI_Callback+0x34>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_EXTI_Callback+0x20>
			startFlag = 0;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <HAL_GPIO_EXTI_Callback+0x34>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
	// 	ILI9341_WriteString(45, 60, "TO START", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
	// }



}
 8001bfe:	e002      	b.n	8001c06 <HAL_GPIO_EXTI_Callback+0x26>
			startFlag = 1;
 8001c00:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <HAL_GPIO_EXTI_Callback+0x34>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000464 	.word	0x20000464

08001c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	f5ad 3d80 	sub.w	sp, sp, #65536	@ 0x10000
 8001c1e:	b0be      	sub	sp, #248	@ 0xf8
 8001c20:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	convFlag = 0;
 8001c22:	4bae      	ldr	r3, [pc, #696]	@ (8001edc <main+0x2c4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
	//E (low), A, D, G, B, E (high)
	float32_t string_freqs[6] = {82.41, 110.0, 146.83, 196.0, 246.94, 329.63};
 8001c28:	4bad      	ldr	r3, [pc, #692]	@ (8001ee0 <main+0x2c8>)
 8001c2a:	f507 3480 	add.w	r4, r7, #65536	@ 0x10000
 8001c2e:	f104 045c 	add.w	r4, r4, #92	@ 0x5c
 8001c32:	461d      	mov	r5, r3
 8001c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c38:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c3c:	e884 0003 	stmia.w	r4, {r0, r1}
	float32_t measured_freq;
	char *strings[] = {"E (low)", "A       ", "D       ", "G       ", "B       ", "E (high)" };
 8001c40:	4ba8      	ldr	r3, [pc, #672]	@ (8001ee4 <main+0x2cc>)
 8001c42:	f507 3480 	add.w	r4, r7, #65536	@ 0x10000
 8001c46:	f104 0444 	add.w	r4, r4, #68	@ 0x44
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c50:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c54:	e884 0003 	stmia.w	r4, {r0, r1}
		  uint8_t buf[4];
	 };

	union Float_as_buffer actual_guitar_freq;

	uint16_t key = 0xFFFF;
 8001c58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c5c:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001c60:	f102 023e 	add.w	r2, r2, #62	@ 0x3e
 8001c64:	8013      	strh	r3, [r2, #0]

	uint8_t start = 0b1;
 8001c66:	2301      	movs	r3, #1
 8001c68:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001c6c:	f102 028b 	add.w	r2, r2, #139	@ 0x8b
 8001c70:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c72:	f002 f9a2 	bl	8003fba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c76:	f001 f861 	bl	8002d3c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001c7a:	f001 f8a5 	bl	8002dc8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c7e:	f001 fc15 	bl	80034ac <MX_GPIO_Init>
  MX_DMA_Init();
 8001c82:	f001 fbe9 	bl	8003458 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c86:	f001 f8cf 	bl	8002e28 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8001c8a:	f001 f933 	bl	8002ef4 <MX_LPUART1_UART_Init>
  MX_SAI1_Init();
 8001c8e:	f001 f9c9 	bl	8003024 <MX_SAI1_Init>
  MX_TIM1_Init();
 8001c92:	f001 fa3b 	bl	800310c <MX_TIM1_Init>
  MX_TIM4_Init();
 8001c96:	f001 fafd 	bl	8003294 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001c9a:	f001 f9f9 	bl	8003090 <MX_SPI1_Init>
  MX_TIM5_Init();
 8001c9e:	f001 fb75 	bl	800338c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001ca2:	f001 f973 	bl	8002f8c <MX_USART1_UART_Init>
  //arm_rfft_fast_init_f32(&fftHandler, BUFFER_LENGTH);

  float32_t signal[BUFFER_LENGTH];
  float32_t autocorrelation[BUFFER_LENGTH];

  uint32_t LOWEST_PERIOD = SAMPLING_RATE / 440; //440hz max
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001cac:	f102 0284 	add.w	r2, r2, #132	@ 0x84
 8001cb0:	6013      	str	r3, [r2, #0]
  uint32_t HIGHEST_PERIOD = SAMPLING_RATE / 50; //60 Hz min (change to 50)
 8001cb2:	2329      	movs	r3, #41	@ 0x29
 8001cb4:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001cb8:	f102 0280 	add.w	r2, r2, #128	@ 0x80
 8001cbc:	6013      	str	r3, [r2, #0]

   volatile uint16_t ADC_BUFFER[BUFFER_LENGTH];

//  float32_t freq_resolution = (float32_t)SAMPLING_RATE / (float32_t)BUFFER_LENGTH;

  HAL_TIM_Base_Start_IT(&htim1);
 8001cbe:	488a      	ldr	r0, [pc, #552]	@ (8001ee8 <main+0x2d0>)
 8001cc0:	f007 fc72 	bl	80095a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4889      	ldr	r0, [pc, #548]	@ (8001eec <main+0x2d4>)
 8001cc8:	f007 fd36 	bl	8009738 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001ccc:	2104      	movs	r1, #4
 8001cce:	4887      	ldr	r0, [pc, #540]	@ (8001eec <main+0x2d4>)
 8001cd0:	f007 fd32 	bl	8009738 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001cd4:	2108      	movs	r1, #8
 8001cd6:	4885      	ldr	r0, [pc, #532]	@ (8001eec <main+0x2d4>)
 8001cd8:	f007 fd2e 	bl	8009738 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001cdc:	210c      	movs	r1, #12
 8001cde:	4883      	ldr	r0, [pc, #524]	@ (8001eec <main+0x2d4>)
 8001ce0:	f007 fd2a 	bl	8009738 <HAL_TIM_PWM_Start>


  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4882      	ldr	r0, [pc, #520]	@ (8001ef0 <main+0x2d8>)
 8001ce8:	f007 fd26 	bl	8009738 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001cec:	2108      	movs	r1, #8
 8001cee:	4880      	ldr	r0, [pc, #512]	@ (8001ef0 <main+0x2d8>)
 8001cf0:	f007 fd22 	bl	8009738 <HAL_TIM_PWM_Start>

  screenInit();
 8001cf4:	f7ff fe96 	bl	8001a24 <screenInit>
  ILI9341_FillScreen(ILI9341_BLACK);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7ff fc0f 	bl	800151c <ILI9341_FillScreen>
  ILI9341_WriteString(35, 30, "PUSH BUTTON", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001cfe:	4b7d      	ldr	r3, [pc, #500]	@ (8001ef4 <main+0x2dc>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	9202      	str	r2, [sp, #8]
 8001d04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d08:	9201      	str	r2, [sp, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	9200      	str	r2, [sp, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a79      	ldr	r2, [pc, #484]	@ (8001ef8 <main+0x2e0>)
 8001d12:	211e      	movs	r1, #30
 8001d14:	2023      	movs	r0, #35	@ 0x23
 8001d16:	f7ff fb47 	bl	80013a8 <ILI9341_WriteString>
  ILI9341_WriteString(45, 60, "TO START", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001d1a:	4b76      	ldr	r3, [pc, #472]	@ (8001ef4 <main+0x2dc>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	9202      	str	r2, [sp, #8]
 8001d20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d24:	9201      	str	r2, [sp, #4]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	9200      	str	r2, [sp, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a73      	ldr	r2, [pc, #460]	@ (8001efc <main+0x2e4>)
 8001d2e:	213c      	movs	r1, #60	@ 0x3c
 8001d30:	202d      	movs	r0, #45	@ 0x2d
 8001d32:	f7ff fb39 	bl	80013a8 <ILI9341_WriteString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	while (!startFlag) {
 8001d36:	e03a      	b.n	8001dae <main+0x196>
		actual_guitar_freq.f = 0;
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001d40:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8001d44:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 3; ++i) {
 8001d46:	2300      	movs	r3, #0
 8001d48:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001d4c:	f102 02e4 	add.w	r2, r2, #228	@ 0xe4
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e025      	b.n	8001da0 <main+0x188>
			  HAL_UART_Transmit(&huart1, &key,                 2, HAL_MAX_DELAY);
 8001d54:	f507 3180 	add.w	r1, r7, #65536	@ 0x10000
 8001d58:	f101 013e 	add.w	r1, r1, #62	@ 0x3e
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d60:	2202      	movs	r2, #2
 8001d62:	4867      	ldr	r0, [pc, #412]	@ (8001f00 <main+0x2e8>)
 8001d64:	f008 fd52 	bl	800a80c <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, &startFlag,               1, HAL_MAX_DELAY);
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4965      	ldr	r1, [pc, #404]	@ (8001f04 <main+0x2ec>)
 8001d70:	4863      	ldr	r0, [pc, #396]	@ (8001f00 <main+0x2e8>)
 8001d72:	f008 fd4b 	bl	800a80c <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, &actual_guitar_freq.buf,  4, HAL_MAX_DELAY);
 8001d76:	f507 3180 	add.w	r1, r7, #65536	@ 0x10000
 8001d7a:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	2204      	movs	r2, #4
 8001d84:	485e      	ldr	r0, [pc, #376]	@ (8001f00 <main+0x2e8>)
 8001d86:	f008 fd41 	bl	800a80c <HAL_UART_Transmit>
		for (int i = 0; i < 3; ++i) {
 8001d8a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001d8e:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001d9a:	f102 02e4 	add.w	r2, r2, #228	@ 0xe4
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001da4:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	ddd2      	ble.n	8001d54 <main+0x13c>
	while (!startFlag) {
 8001dae:	4b55      	ldr	r3, [pc, #340]	@ (8001f04 <main+0x2ec>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0c0      	beq.n	8001d38 <main+0x120>
		  }
	}

	while (startFlag) {
 8001db6:	f000 bfb1 	b.w	8002d1c <main+0x1104>
	 HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, BUFFER_LENGTH);
 8001dba:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001dbe:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8001dc2:	3bac      	subs	r3, #172	@ 0xac
 8001dc4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dc8:	4619      	mov	r1, r3
 8001dca:	484f      	ldr	r0, [pc, #316]	@ (8001f08 <main+0x2f0>)
 8001dcc:	f002 fcae 	bl	800472c <HAL_ADC_Start_DMA>
//	  }

	 //Calculate average of ADC values over a range, do this for both noise (to get a threshold) and for when the individual strings
	 //are strummed

	  while(convFlag == 0) {;}
 8001dd0:	bf00      	nop
 8001dd2:	4b42      	ldr	r3, [pc, #264]	@ (8001edc <main+0x2c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0fb      	beq.n	8001dd2 <main+0x1ba>

	  float32_t output[BUFFER_LENGTH];
	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001de0:	f102 02e0 	add.w	r2, r2, #224	@ 0xe0
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e031      	b.n	8001e4c <main+0x234>
		  signal[i] = (double)(ADC_BUFFER[i]);
 8001de8:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001dec:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8001df0:	461a      	mov	r2, r3
 8001df2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001df6:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	f833 3cac 	ldrh.w	r3, [r3, #-172]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fb3c 	bl	8000484 <__aeabi_ui2d>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7fe fea8 	bl	8000b68 <__aeabi_d2f>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001e1e:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 8001e22:	4619      	mov	r1, r3
 8001e24:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001e28:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	3bac      	subs	r3, #172	@ 0xac
 8001e34:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 8001e36:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001e3a:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	3301      	adds	r3, #1
 8001e42:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001e46:	f102 02e0 	add.w	r2, r2, #224	@ 0xe0
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001e50:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e5a:	dbc5      	blt.n	8001de8 <main+0x1d0>

	  }

	apply_hanning_window(&signal, BUFFER_LENGTH);
 8001e5c:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001e60:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8001e64:	3b2c      	subs	r3, #44	@ 0x2c
 8001e66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fb84 	bl	8001578 <apply_hanning_window>

    arm_rfft_fast_instance_f32 fftInstance;


    // Initialize the FFT instance
    arm_rfft_fast_init_f32(&fftInstance, BUFFER_LENGTH);
 8001e70:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001e74:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8001e78:	3bc4      	subs	r3, #196	@ 0xc4
 8001e7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f009 fcdc 	bl	800b83c <arm_rfft_fast_init_f32>


    arm_rfft_fast_f32(&fftInstance, signal, output, 0);
 8001e84:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001e88:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001e8c:	3ae8      	subs	r2, #232	@ 0xe8
 8001e8e:	f507 4140 	add.w	r1, r7, #49152	@ 0xc000
 8001e92:	f101 0168 	add.w	r1, r1, #104	@ 0x68
 8001e96:	392c      	subs	r1, #44	@ 0x2c
 8001e98:	f507 40c1 	add.w	r0, r7, #24704	@ 0x6080
 8001e9c:	f100 0068 	add.w	r0, r0, #104	@ 0x68
 8001ea0:	38c4      	subs	r0, #196	@ 0xc4
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f009 fdae 	bl	800ba04 <arm_rfft_fast_f32>

    output[0] = 0;
 8001ea8:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001eac:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	f842 3ce8 	str.w	r3, [r2, #-232]
    output[1] = 0;
 8001eba:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001ebe:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	f842 3ce4 	str.w	r3, [r2, #-228]
//	  	    	 continue;
//	  	     }

    // Rest of the frequency bins (upto N/2)
    float32_t HPS[BUFFER_LENGTH / 2];
    for (uint32_t i = 0; i < BUFFER_LENGTH / 2; ++i) {
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001ed2:	f102 02dc 	add.w	r2, r2, #220	@ 0xdc
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	e080      	b.n	8001fdc <main+0x3c4>
 8001eda:	bf00      	nop
 8001edc:	20000460 	.word	0x20000460
 8001ee0:	0800e2fc 	.word	0x0800e2fc
 8001ee4:	0800e358 	.word	0x0800e358
 8001ee8:	2000037c 	.word	0x2000037c
 8001eec:	200003c8 	.word	0x200003c8
 8001ef0:	20000414 	.word	0x20000414
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	0800e2e4 	.word	0x0800e2e4
 8001efc:	0800e2f0 	.word	0x0800e2f0
 8001f00:	200001f0 	.word	0x200001f0
 8001f04:	20000464 	.word	0x20000464
 8001f08:	20000094 	.word	0x20000094
 8001f0c:	442a8000 	.word	0x442a8000
 8001f10:	44000000 	.word	0x44000000
 8001f14:	43cc8000 	.word	0x43cc8000
        HPS[i] = sqrtf(output[2 * i] * output[2 * i] + output[2 * i + 1] * output[2 * i + 1]); // Real part
 8001f18:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001f1c:	f103 03dc 	add.w	r3, r3, #220	@ 0xdc
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001f28:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	3be8      	subs	r3, #232	@ 0xe8
 8001f32:	ed93 7a00 	vldr	s14, [r3]
 8001f36:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001f3a:	f103 03dc 	add.w	r3, r3, #220	@ 0xdc
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001f46:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3be8      	subs	r3, #232	@ 0xe8
 8001f50:	edd3 7a00 	vldr	s15, [r3]
 8001f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f58:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001f5c:	f103 03dc 	add.w	r3, r3, #220	@ 0xdc
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	3301      	adds	r3, #1
 8001f66:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001f6a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	3be8      	subs	r3, #232	@ 0xe8
 8001f74:	edd3 6a00 	vldr	s13, [r3]
 8001f78:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001f7c:	f103 03dc 	add.w	r3, r3, #220	@ 0xdc
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	3301      	adds	r3, #1
 8001f86:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001f8a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	3be8      	subs	r3, #232	@ 0xe8
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa4:	f00a fcb2 	bl	800c90c <sqrtf>
 8001fa8:	eef0 7a40 	vmov.f32	s15, s0
 8001fac:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001fb6:	f103 03dc 	add.w	r3, r3, #220	@ 0xdc
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3be8      	subs	r3, #232	@ 0xe8
 8001fc2:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < BUFFER_LENGTH / 2; ++i) {
 8001fc6:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001fca:	f103 03dc 	add.w	r3, r3, #220	@ 0xdc
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001fd6:	f102 02dc 	add.w	r2, r2, #220	@ 0xdc
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001fe0:	f103 03dc 	add.w	r3, r3, #220	@ 0xdc
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fea:	d395      	bcc.n	8001f18 <main+0x300>
    }
//
    for(int i = 0; i < BUFFER_LENGTH / 4; i++) {
 8001fec:	2300      	movs	r3, #0
 8001fee:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001ff2:	f102 02d8 	add.w	r2, r2, #216	@ 0xd8
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	e0e2      	b.n	80021c0 <main+0x5a8>

      HPS[i] = HPS[i] * HPS[2*i];
 8001ffa:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001ffe:	461a      	mov	r2, r3
 8002000:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002004:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	3be8      	subs	r3, #232	@ 0xe8
 8002010:	ed93 7a00 	vldr	s14, [r3]
 8002014:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002018:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	3be8      	subs	r3, #232	@ 0xe8
 800202a:	edd3 7a00 	vldr	s15, [r3]
 800202e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002032:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002036:	461a      	mov	r2, r3
 8002038:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800203c:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	3be8      	subs	r3, #232	@ 0xe8
 8002048:	edc3 7a00 	vstr	s15, [r3]

      if(i < floorf(BUFFER_LENGTH / 6)) {
 800204c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002050:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	ee07 3a90 	vmov	s15, r3
 800205a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800205e:	ed1f 7a55 	vldr	s14, [pc, #-340]	@ 8001f0c <main+0x2f4>
 8002062:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206a:	d52a      	bpl.n	80020c2 <main+0x4aa>
        HPS[i] = HPS[i] * HPS[3*i];
 800206c:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002070:	461a      	mov	r2, r3
 8002072:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002076:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	3be8      	subs	r3, #232	@ 0xe8
 8002082:	ed93 7a00 	vldr	s14, [r3]
 8002086:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800208a:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	3be8      	subs	r3, #232	@ 0xe8
 80020a0:	edd3 7a00 	vldr	s15, [r3]
 80020a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a8:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80020ac:	461a      	mov	r2, r3
 80020ae:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80020b2:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	3be8      	subs	r3, #232	@ 0xe8
 80020be:	edc3 7a00 	vstr	s15, [r3]
      }

      if(i < floorf(BUFFER_LENGTH / 8)) {
 80020c2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80020c6:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	ee07 3a90 	vmov	s15, r3
 80020d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d4:	ed1f 7a72 	vldr	s14, [pc, #-456]	@ 8001f10 <main+0x2f8>
 80020d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e0:	d528      	bpl.n	8002134 <main+0x51c>
        HPS[i] = HPS[i] * HPS[4*i];
 80020e2:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80020e6:	461a      	mov	r2, r3
 80020e8:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80020ec:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	3be8      	subs	r3, #232	@ 0xe8
 80020f8:	ed93 7a00 	vldr	s14, [r3]
 80020fc:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002100:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	3be8      	subs	r3, #232	@ 0xe8
 8002112:	edd3 7a00 	vldr	s15, [r3]
 8002116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211a:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800211e:	461a      	mov	r2, r3
 8002120:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002124:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	3be8      	subs	r3, #232	@ 0xe8
 8002130:	edc3 7a00 	vstr	s15, [r3]
      }

      if(i < floorf(BUFFER_LENGTH / 10)) {
 8002134:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002138:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002146:	ed1f 7a8d 	vldr	s14, [pc, #-564]	@ 8001f14 <main+0x2fc>
 800214a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800214e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002152:	d52a      	bpl.n	80021aa <main+0x592>
    	  HPS[i] = HPS[i] * HPS[5*i];
 8002154:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002158:	461a      	mov	r2, r3
 800215a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800215e:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	3be8      	subs	r3, #232	@ 0xe8
 800216a:	ed93 7a00 	vldr	s14, [r3]
 800216e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002172:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	3be8      	subs	r3, #232	@ 0xe8
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002190:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002194:	461a      	mov	r2, r3
 8002196:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800219a:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	3be8      	subs	r3, #232	@ 0xe8
 80021a6:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < BUFFER_LENGTH / 4; i++) {
 80021aa:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80021ae:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	3301      	adds	r3, #1
 80021b6:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80021ba:	f102 02d8 	add.w	r2, r2, #216	@ 0xd8
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80021c4:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ce:	f6ff af14 	blt.w	8001ffa <main+0x3e2>

    }


    //Filter lower and higher frequencies, 30Hz and 450 Hz
    for(int i = 0; i < 50; ++i){
 80021d2:	2300      	movs	r3, #0
 80021d4:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80021d8:	f102 02d4 	add.w	r2, r2, #212	@ 0xd4
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e018      	b.n	8002212 <main+0x5fa>
    	HPS[i] = 0;
 80021e0:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80021e4:	461a      	mov	r2, r3
 80021e6:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80021ea:	f103 03d4 	add.w	r3, r3, #212	@ 0xd4
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	3be8      	subs	r3, #232	@ 0xe8
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 50; ++i){
 80021fc:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002200:	f103 03d4 	add.w	r3, r3, #212	@ 0xd4
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3301      	adds	r3, #1
 8002208:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800220c:	f102 02d4 	add.w	r2, r2, #212	@ 0xd4
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002216:	f103 03d4 	add.w	r3, r3, #212	@ 0xd4
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b31      	cmp	r3, #49	@ 0x31
 800221e:	dddf      	ble.n	80021e0 <main+0x5c8>
    }
    for(int i = 370; i < BUFFER_LENGTH / 2; ++i){ //370 since likely will never be higher and issues with 3rd string harmonics
 8002220:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 8002224:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002228:	f102 02d0 	add.w	r2, r2, #208	@ 0xd0
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e018      	b.n	8002262 <main+0x64a>
    	HPS[i] = 0;
 8002230:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002234:	461a      	mov	r2, r3
 8002236:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800223a:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	3be8      	subs	r3, #232	@ 0xe8
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
    for(int i = 370; i < BUFFER_LENGTH / 2; ++i){ //370 since likely will never be higher and issues with 3rd string harmonics
 800224c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002250:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	3301      	adds	r3, #1
 8002258:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800225c:	f102 02d0 	add.w	r2, r2, #208	@ 0xd0
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002266:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002270:	dbde      	blt.n	8002230 <main+0x618>
    }

    float32_t average;
	arm_mean_f32(HPS, BUFFER_LENGTH/2, &average);
 8002272:	f507 42c1 	add.w	r2, r7, #24704	@ 0x6080
 8002276:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 800227a:	3ac8      	subs	r2, #200	@ 0xc8
 800227c:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002280:	3be8      	subs	r3, #232	@ 0xe8
 8002282:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002286:	4618      	mov	r0, r3
 8002288:	f009 f966 	bl	800b558 <arm_mean_f32>
//	if(average < (1E20)){ //Based on sampled data,see spreadsheet
//		continue;
//	}


    int max_peak = 0;
 800228c:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8002290:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8002294:	461a      	mov	r2, r3
 8002296:	2300      	movs	r3, #0
 8002298:	f842 3ccc 	str.w	r3, [r2, #-204]
    int max_mag = 0;
 800229c:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 80022a0:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 80022a4:	461a      	mov	r2, r3
 80022a6:	2300      	movs	r3, #0
 80022a8:	f842 3cd0 	str.w	r3, [r2, #-208]
    arm_max_f32(HPS, BUFFER_LENGTH / 2, &max_mag, &max_peak);
 80022ac:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 80022b0:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 80022b4:	3bcc      	subs	r3, #204	@ 0xcc
 80022b6:	f507 42c1 	add.w	r2, r7, #24704	@ 0x6080
 80022ba:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 80022be:	3ad0      	subs	r2, #208	@ 0xd0
 80022c0:	f107 00e8 	add.w	r0, r7, #232	@ 0xe8
 80022c4:	38e8      	subs	r0, #232	@ 0xe8
 80022c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022ca:	f009 f983 	bl	800b5d4 <arm_max_f32>

    float32_t measured_freq = max_peak * (2* SAMPLING_RATE/(BUFFER_LENGTH));
 80022ce:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 80022d2:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 80022d6:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe f8e2 	bl	80004a4 <__aeabi_i2d>
 80022e0:	f20f 5340 	addw	r3, pc, #1344	@ 0x540
 80022e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e8:	f7fe f946 	bl	8000578 <__aeabi_dmul>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	f7fe fc38 	bl	8000b68 <__aeabi_d2f>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80022fe:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
 8002302:	6013      	str	r3, [r2, #0]

	     //Match frequency to string

	     //find smallest magnitude of distance
	     float32_t min_freqs[6];
	     for(int i = 0; i < 6; ++i){
 8002304:	2300      	movs	r3, #0
 8002306:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800230a:	f102 02cc 	add.w	r2, r2, #204	@ 0xcc
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	e02f      	b.n	8002372 <main+0x75a>
	    	 min_freqs[i] = string_freqs[i] - measured_freq;
 8002312:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002316:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002322:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 8002326:	443b      	add	r3, r7
 8002328:	3b8c      	subs	r3, #140	@ 0x8c
 800232a:	ed93 7a00 	vldr	s14, [r3]
 800232e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002332:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800233e:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8002342:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8002346:	461a      	mov	r2, r3
 8002348:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800234c:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	3be8      	subs	r3, #232	@ 0xe8
 8002358:	edc3 7a00 	vstr	s15, [r3]
	     for(int i = 0; i < 6; ++i){
 800235c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002360:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800236c:	f102 02cc 	add.w	r2, r2, #204	@ 0xcc
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002376:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b05      	cmp	r3, #5
 800237e:	ddc8      	ble.n	8002312 <main+0x6fa>
	     }

	     arm_abs_f32(min_freqs, min_freqs, 6);
 8002380:	f507 41c1 	add.w	r1, r7, #24704	@ 0x6080
 8002384:	f101 0168 	add.w	r1, r1, #104	@ 0x68
 8002388:	39e8      	subs	r1, #232	@ 0xe8
 800238a:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 800238e:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8002392:	3be8      	subs	r3, #232	@ 0xe8
 8002394:	2206      	movs	r2, #6
 8002396:	4618      	mov	r0, r3
 8002398:	f009 ff12 	bl	800c1c0 <arm_abs_f32>

	     //find the argmin
	     float32_t current_min = min_freqs[0];
 800239c:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 80023a0:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 80023a4:	f853 3ce8 	ldr.w	r3, [r3, #-232]
 80023a8:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80023ac:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 80023b0:	6013      	str	r3, [r2, #0]
	     uint8_t index = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80023b8:	f102 02c7 	add.w	r2, r2, #199	@ 0xc7
 80023bc:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 80023be:	2300      	movs	r3, #0
 80023c0:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80023c4:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e041      	b.n	8002450 <main+0x838>
	    	 if (min_freqs[i] < current_min){
 80023cc:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 80023d0:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 80023d4:	461a      	mov	r2, r3
 80023d6:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80023da:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	3be8      	subs	r3, #232	@ 0xe8
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80023ee:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 80023f2:	ed93 7a00 	vldr	s14, [r3]
 80023f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fe:	dd1c      	ble.n	800243a <main+0x822>
	    		 current_min = min_freqs[i];
 8002400:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8002404:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8002408:	461a      	mov	r2, r3
 800240a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800240e:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	3be8      	subs	r3, #232	@ 0xe8
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002420:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8002424:	6013      	str	r3, [r2, #0]
	    		 index = i;
 8002426:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800242a:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002434:	f102 02c7 	add.w	r2, r2, #199	@ 0xc7
 8002438:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 800243a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800243e:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800244a:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002454:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b05      	cmp	r3, #5
 800245c:	ddb6      	ble.n	80023cc <main+0x7b4>
	    	 }
	     }

	     //assign detected string
	     detected_string = strings[index];
 800245e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002462:	f103 03c7 	add.w	r3, r3, #199	@ 0xc7
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800246e:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 8002472:	443b      	add	r3, r7
 8002474:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8002478:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800247c:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 8002480:	6013      	str	r3, [r2, #0]

	     string_offset = measured_freq - string_freqs[index];
 8002482:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002486:	f103 03c7 	add.w	r3, r3, #199	@ 0xc7
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002492:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 8002496:	443b      	add	r3, r7
 8002498:	3b8c      	subs	r3, #140	@ 0x8c
 800249a:	edd3 7a00 	vldr	s15, [r3]
 800249e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80024a2:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 80024a6:	ed93 7a00 	vldr	s14, [r3]
 80024aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ae:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80024b2:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 80024b6:	edc3 7a00 	vstr	s15, [r3]


	     actual_guitar_freq.f = measured_freq;
 80024ba:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80024be:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80024c8:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 80024cc:	6013      	str	r3, [r2, #0]

	 // Transmit the string message
	  for (int i = 0; i < 3; ++i) {
 80024ce:	2300      	movs	r3, #0
 80024d0:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80024d4:	f102 02bc 	add.w	r2, r2, #188	@ 0xbc
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e025      	b.n	8002528 <main+0x910>
		  HAL_UART_Transmit(&huart1, &key,                 2, HAL_MAX_DELAY);
 80024dc:	f507 3180 	add.w	r1, r7, #65536	@ 0x10000
 80024e0:	f101 013e 	add.w	r1, r1, #62	@ 0x3e
 80024e4:	f04f 33ff 	mov.w	r3, #4294967295
 80024e8:	2202      	movs	r2, #2
 80024ea:	48c7      	ldr	r0, [pc, #796]	@ (8002808 <main+0xbf0>)
 80024ec:	f008 f98e 	bl	800a80c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &startFlag,               1, HAL_MAX_DELAY);
 80024f0:	f04f 33ff 	mov.w	r3, #4294967295
 80024f4:	2201      	movs	r2, #1
 80024f6:	49c5      	ldr	r1, [pc, #788]	@ (800280c <main+0xbf4>)
 80024f8:	48c3      	ldr	r0, [pc, #780]	@ (8002808 <main+0xbf0>)
 80024fa:	f008 f987 	bl	800a80c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &actual_guitar_freq.buf,  4, HAL_MAX_DELAY);
 80024fe:	f507 3180 	add.w	r1, r7, #65536	@ 0x10000
 8002502:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 8002506:	f04f 33ff 	mov.w	r3, #4294967295
 800250a:	2204      	movs	r2, #4
 800250c:	48be      	ldr	r0, [pc, #760]	@ (8002808 <main+0xbf0>)
 800250e:	f008 f97d 	bl	800a80c <HAL_UART_Transmit>
	  for (int i = 0; i < 3; ++i) {
 8002512:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002516:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3301      	adds	r3, #1
 800251e:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002522:	f102 02bc 	add.w	r2, r2, #188	@ 0xbc
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800252c:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b02      	cmp	r3, #2
 8002534:	ddd2      	ble.n	80024dc <main+0x8c4>
	  }


	  ftoa(measured_freq, charFreq, 2);
 8002536:	2102      	movs	r1, #2
 8002538:	48b5      	ldr	r0, [pc, #724]	@ (8002810 <main+0xbf8>)
 800253a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800253e:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8002542:	ed93 0a00 	vldr	s0, [r3]
 8002546:	f7ff faef 	bl	8001b28 <ftoa>
	  ftoa(string_freqs[index], desiredFreq, 2);
 800254a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800254e:	f103 03c7 	add.w	r3, r3, #199	@ 0xc7
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800255a:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 800255e:	443b      	add	r3, r7
 8002560:	3b8c      	subs	r3, #140	@ 0x8c
 8002562:	edd3 7a00 	vldr	s15, [r3]
 8002566:	2102      	movs	r1, #2
 8002568:	48aa      	ldr	r0, [pc, #680]	@ (8002814 <main+0xbfc>)
 800256a:	eeb0 0a67 	vmov.f32	s0, s15
 800256e:	f7ff fadb 	bl	8001b28 <ftoa>

	    if(!startFlag){
 8002572:	4ba6      	ldr	r3, [pc, #664]	@ (800280c <main+0xbf4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 83cf 	beq.w	8002d1a <main+0x1102>
		// ILI9341_WriteString(100, 90, charFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
		// ILI9341_WriteString(100, 150, desiredFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);


	     //Tune strings (yeah yeah)
	     switch (index){
 800257c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002580:	f103 03c7 	add.w	r3, r3, #199	@ 0xc7
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b05      	cmp	r3, #5
 8002588:	f200 83c0 	bhi.w	8002d0c <main+0x10f4>
 800258c:	a201      	add	r2, pc, #4	@ (adr r2, 8002594 <main+0x97c>)
 800258e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002592:	bf00      	nop
 8002594:	080025ad 	.word	0x080025ad
 8002598:	080026d9 	.word	0x080026d9
 800259c:	08002841 	.word	0x08002841
 80025a0:	0800296d 	.word	0x0800296d
 80025a4:	08002ab5 	.word	0x08002ab5
 80025a8:	08002be1 	.word	0x08002be1
	     	 case 0: //E low
	     		if(string_offset > 0){
 80025ac:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80025b0:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c0:	dd3d      	ble.n	800263e <main+0xa26>
				 uint32_t delay = floor(80 * string_offset);
 80025c2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80025c6:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 80025ca:	edd3 7a00 	vldr	s15, [r3]
 80025ce:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8002838 <main+0xc20>
 80025d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025d6:	ee17 0a90 	vmov	r0, s15
 80025da:	f7fd ff75 	bl	80004c8 <__aeabi_f2d>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	ec43 2b10 	vmov	d0, r2, r3
 80025e6:	f00a fa03 	bl	800c9f0 <floor>
 80025ea:	ec53 2b10 	vmov	r2, r3, d0
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fe fa99 	bl	8000b28 <__aeabi_d2uiz>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80025fc:	f102 02b8 	add.w	r2, r2, #184	@ 0xb8
 8002600:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8002602:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002606:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002610:	4293      	cmp	r3, r2
 8002612:	d906      	bls.n	8002622 <main+0xa0a>
					delay = MAX_DELAY;
 8002614:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8002618:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800261c:	f102 02b8 	add.w	r2, r2, #184	@ 0xb8
 8002620:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_1(70);
 8002622:	2046      	movs	r0, #70	@ 0x46
 8002624:	f7fe fff0 	bl	8001608 <set_motor_speed_1>
				  HAL_Delay(delay);
 8002628:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800262c:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	f001 fd37 	bl	80040a4 <HAL_Delay>
				  set_motor_speed_1(50);
 8002636:	2032      	movs	r0, #50	@ 0x32
 8002638:	f7fe ffe6 	bl	8001608 <set_motor_speed_1>
				 }
				 set_motor_speed_1(17);
				 HAL_Delay(delay);
				 set_motor_speed_1(50);
				}
	     		 break;
 800263c:	e366      	b.n	8002d0c <main+0x10f4>
				else if(string_offset < 0){
 800263e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002642:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002646:	edd3 7a00 	vldr	s15, [r3]
 800264a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800264e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002652:	d400      	bmi.n	8002656 <main+0xa3e>
	     		 break;
 8002654:	e35a      	b.n	8002d0c <main+0x10f4>
				 uint32_t delay = floor(-1* (75 * string_offset));
 8002656:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800265a:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 800265e:	edd3 7a00 	vldr	s15, [r3]
 8002662:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8002818 <main+0xc00>
 8002666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800266a:	eef1 7a67 	vneg.f32	s15, s15
 800266e:	ee17 3a90 	vmov	r3, s15
 8002672:	4618      	mov	r0, r3
 8002674:	f7fd ff28 	bl	80004c8 <__aeabi_f2d>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	ec43 2b10 	vmov	d0, r2, r3
 8002680:	f00a f9b6 	bl	800c9f0 <floor>
 8002684:	ec53 2b10 	vmov	r2, r3, d0
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	f7fe fa4c 	bl	8000b28 <__aeabi_d2uiz>
 8002690:	4603      	mov	r3, r0
 8002692:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002696:	f102 02b4 	add.w	r2, r2, #180	@ 0xb4
 800269a:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 800269c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80026a0:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d906      	bls.n	80026bc <main+0xaa4>
					delay = MAX_DELAY;
 80026ae:	f240 23ee 	movw	r3, #750	@ 0x2ee
 80026b2:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80026b6:	f102 02b4 	add.w	r2, r2, #180	@ 0xb4
 80026ba:	6013      	str	r3, [r2, #0]
				 set_motor_speed_1(17);
 80026bc:	2011      	movs	r0, #17
 80026be:	f7fe ffa3 	bl	8001608 <set_motor_speed_1>
				 HAL_Delay(delay);
 80026c2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80026c6:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	f001 fcea 	bl	80040a4 <HAL_Delay>
				 set_motor_speed_1(50);
 80026d0:	2032      	movs	r0, #50	@ 0x32
 80026d2:	f7fe ff99 	bl	8001608 <set_motor_speed_1>
	     		 break;
 80026d6:	e319      	b.n	8002d0c <main+0x10f4>

	     	 case 1: //A
	     		if(string_offset > 0){
 80026d8:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80026dc:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ec:	dd3d      	ble.n	800276a <main+0xb52>
				 uint32_t delay = floor(90 * string_offset);
 80026ee:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80026f2:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 80026f6:	edd3 7a00 	vldr	s15, [r3]
 80026fa:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800281c <main+0xc04>
 80026fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002702:	ee17 0a90 	vmov	r0, s15
 8002706:	f7fd fedf 	bl	80004c8 <__aeabi_f2d>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	ec43 2b10 	vmov	d0, r2, r3
 8002712:	f00a f96d 	bl	800c9f0 <floor>
 8002716:	ec53 2b10 	vmov	r2, r3, d0
 800271a:	4610      	mov	r0, r2
 800271c:	4619      	mov	r1, r3
 800271e:	f7fe fa03 	bl	8000b28 <__aeabi_d2uiz>
 8002722:	4603      	mov	r3, r0
 8002724:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002728:	f102 02b0 	add.w	r2, r2, #176	@ 0xb0
 800272c:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 800272e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002732:	f103 03b0 	add.w	r3, r3, #176	@ 0xb0
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800273c:	4293      	cmp	r3, r2
 800273e:	d906      	bls.n	800274e <main+0xb36>
					delay = MAX_DELAY;
 8002740:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8002744:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002748:	f102 02b0 	add.w	r2, r2, #176	@ 0xb0
 800274c:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_2(72);
 800274e:	2048      	movs	r0, #72	@ 0x48
 8002750:	f7fe ffb2 	bl	80016b8 <set_motor_speed_2>
				  HAL_Delay(delay);
 8002754:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002758:	f103 03b0 	add.w	r3, r3, #176	@ 0xb0
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	f001 fca1 	bl	80040a4 <HAL_Delay>
				  set_motor_speed_2(50);
 8002762:	2032      	movs	r0, #50	@ 0x32
 8002764:	f7fe ffa8 	bl	80016b8 <set_motor_speed_2>
				 }
				 set_motor_speed_2(18);
				 HAL_Delay(delay);
				 set_motor_speed_2(50);
				}
	     		 break;
 8002768:	e2d0      	b.n	8002d0c <main+0x10f4>
				else if(string_offset < 0){
 800276a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800276e:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002772:	edd3 7a00 	vldr	s15, [r3]
 8002776:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277e:	d400      	bmi.n	8002782 <main+0xb6a>
	     		 break;
 8002780:	e2c4      	b.n	8002d0c <main+0x10f4>
				 uint32_t delay = floor(-1* (100 * string_offset));
 8002782:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002786:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 800278a:	edd3 7a00 	vldr	s15, [r3]
 800278e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002820 <main+0xc08>
 8002792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002796:	eef1 7a67 	vneg.f32	s15, s15
 800279a:	ee17 3a90 	vmov	r3, s15
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fe92 	bl	80004c8 <__aeabi_f2d>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	ec43 2b10 	vmov	d0, r2, r3
 80027ac:	f00a f920 	bl	800c9f0 <floor>
 80027b0:	ec53 2b10 	vmov	r2, r3, d0
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	f7fe f9b6 	bl	8000b28 <__aeabi_d2uiz>
 80027bc:	4603      	mov	r3, r0
 80027be:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80027c2:	f102 02ac 	add.w	r2, r2, #172	@ 0xac
 80027c6:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 80027c8:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80027cc:	f103 03ac 	add.w	r3, r3, #172	@ 0xac
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d906      	bls.n	80027e8 <main+0xbd0>
					delay = MAX_DELAY;
 80027da:	f240 23ee 	movw	r3, #750	@ 0x2ee
 80027de:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80027e2:	f102 02ac 	add.w	r2, r2, #172	@ 0xac
 80027e6:	6013      	str	r3, [r2, #0]
				 set_motor_speed_2(18);
 80027e8:	2012      	movs	r0, #18
 80027ea:	f7fe ff65 	bl	80016b8 <set_motor_speed_2>
				 HAL_Delay(delay);
 80027ee:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80027f2:	f103 03ac 	add.w	r3, r3, #172	@ 0xac
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	f001 fc54 	bl	80040a4 <HAL_Delay>
				 set_motor_speed_2(50);
 80027fc:	2032      	movs	r0, #50	@ 0x32
 80027fe:	f7fe ff5b 	bl	80016b8 <set_motor_speed_2>
	     		 break;
 8002802:	e283      	b.n	8002d0c <main+0x10f4>
 8002804:	f3af 8000 	nop.w
 8002808:	200001f0 	.word	0x200001f0
 800280c:	20000464 	.word	0x20000464
 8002810:	20000468 	.word	0x20000468
 8002814:	2000047c 	.word	0x2000047c
 8002818:	42960000 	.word	0x42960000
 800281c:	42b40000 	.word	0x42b40000
 8002820:	42c80000 	.word	0x42c80000
 8002824:	624dd2f2 	.word	0x624dd2f2
 8002828:	3ff00690 	.word	0x3ff00690
 800282c:	43020000 	.word	0x43020000
 8002830:	42e60000 	.word	0x42e60000
 8002834:	43200000 	.word	0x43200000
 8002838:	42a00000 	.word	0x42a00000
 800283c:	42700000 	.word	0x42700000

	     	 case 2: //D
	     		if(string_offset > 0){
 8002840:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002844:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002848:	edd3 7a00 	vldr	s15, [r3]
 800284c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002854:	dd3d      	ble.n	80028d2 <main+0xcba>
				 uint32_t delay = floor(130 * string_offset); // (500/3 )
 8002856:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800285a:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	ed1f 7a0e 	vldr	s14, [pc, #-56]	@ 800282c <main+0xc14>
 8002866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800286a:	ee17 0a90 	vmov	r0, s15
 800286e:	f7fd fe2b 	bl	80004c8 <__aeabi_f2d>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	ec43 2b10 	vmov	d0, r2, r3
 800287a:	f00a f8b9 	bl	800c9f0 <floor>
 800287e:	ec53 2b10 	vmov	r2, r3, d0
 8002882:	4610      	mov	r0, r2
 8002884:	4619      	mov	r1, r3
 8002886:	f7fe f94f 	bl	8000b28 <__aeabi_d2uiz>
 800288a:	4603      	mov	r3, r0
 800288c:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002890:	f102 02a8 	add.w	r2, r2, #168	@ 0xa8
 8002894:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8002896:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800289a:	f103 03a8 	add.w	r3, r3, #168	@ 0xa8
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d906      	bls.n	80028b6 <main+0xc9e>
					delay = MAX_DELAY;
 80028a8:	f240 23ee 	movw	r3, #750	@ 0x2ee
 80028ac:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80028b0:	f102 02a8 	add.w	r2, r2, #168	@ 0xa8
 80028b4:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_3(70);
 80028b6:	2046      	movs	r0, #70	@ 0x46
 80028b8:	f7fe ff56 	bl	8001768 <set_motor_speed_3>
				  HAL_Delay(delay);
 80028bc:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80028c0:	f103 03a8 	add.w	r3, r3, #168	@ 0xa8
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	f001 fbed 	bl	80040a4 <HAL_Delay>
				  set_motor_speed_3(50);
 80028ca:	2032      	movs	r0, #50	@ 0x32
 80028cc:	f7fe ff4c 	bl	8001768 <set_motor_speed_3>
				 }
				 set_motor_speed_3(18);
				 HAL_Delay(delay);
				 set_motor_speed_3(50);
	     		}
	     		 break;
 80028d0:	e21c      	b.n	8002d0c <main+0x10f4>
				else if(string_offset < 0){
 80028d2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80028d6:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e6:	d400      	bmi.n	80028ea <main+0xcd2>
	     		 break;
 80028e8:	e210      	b.n	8002d0c <main+0x10f4>
				 uint32_t delay = floor(-1* (130 * string_offset)); // (500/3 )
 80028ea:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80028ee:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 80028f2:	edd3 7a00 	vldr	s15, [r3]
 80028f6:	ed1f 7a33 	vldr	s14, [pc, #-204]	@ 800282c <main+0xc14>
 80028fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028fe:	eef1 7a67 	vneg.f32	s15, s15
 8002902:	ee17 3a90 	vmov	r3, s15
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd fdde 	bl	80004c8 <__aeabi_f2d>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	ec43 2b10 	vmov	d0, r2, r3
 8002914:	f00a f86c 	bl	800c9f0 <floor>
 8002918:	ec53 2b10 	vmov	r2, r3, d0
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	f7fe f902 	bl	8000b28 <__aeabi_d2uiz>
 8002924:	4603      	mov	r3, r0
 8002926:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800292a:	f102 02a4 	add.w	r2, r2, #164	@ 0xa4
 800292e:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8002930:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002934:	f103 03a4 	add.w	r3, r3, #164	@ 0xa4
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800293e:	4293      	cmp	r3, r2
 8002940:	d906      	bls.n	8002950 <main+0xd38>
					delay = MAX_DELAY;
 8002942:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8002946:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800294a:	f102 02a4 	add.w	r2, r2, #164	@ 0xa4
 800294e:	6013      	str	r3, [r2, #0]
				 set_motor_speed_3(18);
 8002950:	2012      	movs	r0, #18
 8002952:	f7fe ff09 	bl	8001768 <set_motor_speed_3>
				 HAL_Delay(delay);
 8002956:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800295a:	f103 03a4 	add.w	r3, r3, #164	@ 0xa4
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	f001 fba0 	bl	80040a4 <HAL_Delay>
				 set_motor_speed_3(50);
 8002964:	2032      	movs	r0, #50	@ 0x32
 8002966:	f7fe feff 	bl	8001768 <set_motor_speed_3>
	     		 break;
 800296a:	e1cf      	b.n	8002d0c <main+0x10f4>

	     	 case 3: //G
	     		if(string_offset > 0){
 800296c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002970:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002974:	edd3 7a00 	vldr	s15, [r3]
 8002978:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800297c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002980:	dd3d      	ble.n	80029fe <main+0xde6>
				 uint32_t delay = floor(115 * string_offset);
 8002982:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002986:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 800298a:	edd3 7a00 	vldr	s15, [r3]
 800298e:	ed1f 7a58 	vldr	s14, [pc, #-352]	@ 8002830 <main+0xc18>
 8002992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002996:	ee17 0a90 	vmov	r0, s15
 800299a:	f7fd fd95 	bl	80004c8 <__aeabi_f2d>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	ec43 2b10 	vmov	d0, r2, r3
 80029a6:	f00a f823 	bl	800c9f0 <floor>
 80029aa:	ec53 2b10 	vmov	r2, r3, d0
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	f7fe f8b9 	bl	8000b28 <__aeabi_d2uiz>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80029bc:	f102 02a0 	add.w	r2, r2, #160	@ 0xa0
 80029c0:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 80029c2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80029c6:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d906      	bls.n	80029e2 <main+0xdca>
				 	delay = MAX_DELAY;
 80029d4:	f240 23ee 	movw	r3, #750	@ 0x2ee
 80029d8:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80029dc:	f102 02a0 	add.w	r2, r2, #160	@ 0xa0
 80029e0:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_4(72);
 80029e2:	2048      	movs	r0, #72	@ 0x48
 80029e4:	f7fe ff18 	bl	8001818 <set_motor_speed_4>
				  HAL_Delay(delay);
 80029e8:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80029ec:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	f001 fb57 	bl	80040a4 <HAL_Delay>
				  set_motor_speed_4(50);
 80029f6:	2032      	movs	r0, #50	@ 0x32
 80029f8:	f7fe ff0e 	bl	8001818 <set_motor_speed_4>
				 }
				 set_motor_speed_4(20);
				 HAL_Delay(delay);
				 set_motor_speed_4(50);
				}
	     		 break;
 80029fc:	e186      	b.n	8002d0c <main+0x10f4>
				else if(string_offset < 0 && string_offset < -1){
 80029fe:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002a02:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002a06:	edd3 7a00 	vldr	s15, [r3]
 8002a0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a12:	d400      	bmi.n	8002a16 <main+0xdfe>
	     		 break;
 8002a14:	e17a      	b.n	8002d0c <main+0x10f4>
				else if(string_offset < 0 && string_offset < -1){
 8002a16:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002a1a:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002a1e:	edd3 7a00 	vldr	s15, [r3]
 8002a22:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002a26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2e:	d400      	bmi.n	8002a32 <main+0xe1a>
	     		 break;
 8002a30:	e16c      	b.n	8002d0c <main+0x10f4>
				 uint32_t delay = floor(-1* (160 * string_offset));
 8002a32:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002a36:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002a3a:	edd3 7a00 	vldr	s15, [r3]
 8002a3e:	ed1f 7a83 	vldr	s14, [pc, #-524]	@ 8002834 <main+0xc1c>
 8002a42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a46:	eef1 7a67 	vneg.f32	s15, s15
 8002a4a:	ee17 3a90 	vmov	r3, s15
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fd fd3a 	bl	80004c8 <__aeabi_f2d>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	ec43 2b10 	vmov	d0, r2, r3
 8002a5c:	f009 ffc8 	bl	800c9f0 <floor>
 8002a60:	ec53 2b10 	vmov	r2, r3, d0
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	f7fe f85e 	bl	8000b28 <__aeabi_d2uiz>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002a72:	f102 029c 	add.w	r2, r2, #156	@ 0x9c
 8002a76:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8002a78:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002a7c:	f103 039c 	add.w	r3, r3, #156	@ 0x9c
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d906      	bls.n	8002a98 <main+0xe80>
				 	delay = MAX_DELAY;
 8002a8a:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8002a8e:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002a92:	f102 029c 	add.w	r2, r2, #156	@ 0x9c
 8002a96:	6013      	str	r3, [r2, #0]
				 set_motor_speed_4(20);
 8002a98:	2014      	movs	r0, #20
 8002a9a:	f7fe febd 	bl	8001818 <set_motor_speed_4>
				 HAL_Delay(delay);
 8002a9e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002aa2:	f103 039c 	add.w	r3, r3, #156	@ 0x9c
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	f001 fafc 	bl	80040a4 <HAL_Delay>
				 set_motor_speed_4(50);
 8002aac:	2032      	movs	r0, #50	@ 0x32
 8002aae:	f7fe feb3 	bl	8001818 <set_motor_speed_4>
	     		 break;
 8002ab2:	e12b      	b.n	8002d0c <main+0x10f4>

	     	 case 4: //B
	     		if(string_offset > 0){ // COULD TEST FOR EXPECTED VALUE (BASED ON 1H range) when in tune
 8002ab4:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002ab8:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002abc:	edd3 7a00 	vldr	s15, [r3]
 8002ac0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac8:	dd3d      	ble.n	8002b46 <main+0xf2e>
	     		 uint32_t delay = floor(80 * string_offset);	//OR could just do > 1 and let user decide when good, display in tune or sum
 8002aca:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002ace:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002ad2:	edd3 7a00 	vldr	s15, [r3]
 8002ad6:	ed1f 7aa8 	vldr	s14, [pc, #-672]	@ 8002838 <main+0xc20>
 8002ada:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ade:	ee17 0a90 	vmov	r0, s15
 8002ae2:	f7fd fcf1 	bl	80004c8 <__aeabi_f2d>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	ec43 2b10 	vmov	d0, r2, r3
 8002aee:	f009 ff7f 	bl	800c9f0 <floor>
 8002af2:	ec53 2b10 	vmov	r2, r3, d0
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	f7fe f815 	bl	8000b28 <__aeabi_d2uiz>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002b04:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 8002b08:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){								//Since it has 1 Hz accuracy might be nice to have it turn small amounts
 8002b0a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002b0e:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d906      	bls.n	8002b2a <main+0xf12>
				 	delay = MAX_DELAY;
 8002b1c:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8002b20:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002b24:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 8002b28:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_5(65);
 8002b2a:	2041      	movs	r0, #65	@ 0x41
 8002b2c:	f7fe fecc 	bl	80018c8 <set_motor_speed_5>
				  HAL_Delay(delay);
 8002b30:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002b34:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	f001 fab3 	bl	80040a4 <HAL_Delay>
				  set_motor_speed_5(50);
 8002b3e:	2032      	movs	r0, #50	@ 0x32
 8002b40:	f7fe fec2 	bl	80018c8 <set_motor_speed_5>
				 }
				 set_motor_speed_5(20);
				 HAL_Delay(delay);
				 set_motor_speed_5(50);
	     		}
	     		 break;
 8002b44:	e0e2      	b.n	8002d0c <main+0x10f4>
	     		else if(string_offset < 0){
 8002b46:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002b4a:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5a:	d400      	bmi.n	8002b5e <main+0xf46>
	     		 break;
 8002b5c:	e0d6      	b.n	8002d0c <main+0x10f4>
				 uint32_t delay = floor(-1* (60 * string_offset));
 8002b5e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002b62:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002b66:	edd3 7a00 	vldr	s15, [r3]
 8002b6a:	ed1f 7acc 	vldr	s14, [pc, #-816]	@ 800283c <main+0xc24>
 8002b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b72:	eef1 7a67 	vneg.f32	s15, s15
 8002b76:	ee17 3a90 	vmov	r3, s15
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fd fca4 	bl	80004c8 <__aeabi_f2d>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	ec43 2b10 	vmov	d0, r2, r3
 8002b88:	f009 ff32 	bl	800c9f0 <floor>
 8002b8c:	ec53 2b10 	vmov	r2, r3, d0
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	f7fd ffc8 	bl	8000b28 <__aeabi_d2uiz>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002b9e:	f102 0294 	add.w	r2, r2, #148	@ 0x94
 8002ba2:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8002ba4:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002ba8:	f103 0394 	add.w	r3, r3, #148	@ 0x94
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d906      	bls.n	8002bc4 <main+0xfac>
				 	delay = MAX_DELAY;
 8002bb6:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8002bba:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002bbe:	f102 0294 	add.w	r2, r2, #148	@ 0x94
 8002bc2:	6013      	str	r3, [r2, #0]
				 set_motor_speed_5(20);
 8002bc4:	2014      	movs	r0, #20
 8002bc6:	f7fe fe7f 	bl	80018c8 <set_motor_speed_5>
				 HAL_Delay(delay);
 8002bca:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002bce:	f103 0394 	add.w	r3, r3, #148	@ 0x94
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	f001 fa66 	bl	80040a4 <HAL_Delay>
				 set_motor_speed_5(50);
 8002bd8:	2032      	movs	r0, #50	@ 0x32
 8002bda:	f7fe fe75 	bl	80018c8 <set_motor_speed_5>
	     		 break;
 8002bde:	e095      	b.n	8002d0c <main+0x10f4>

	     	 case 5: //Low E
	     		if(string_offset > 0){
 8002be0:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002be4:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002be8:	edd3 7a00 	vldr	s15, [r3]
 8002bec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf4:	dd3d      	ble.n	8002c72 <main+0x105a>
					 uint32_t delay = floor(125 * string_offset);
 8002bf6:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002bfa:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8002d2c <main+0x1114>
 8002c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c0a:	ee17 0a90 	vmov	r0, s15
 8002c0e:	f7fd fc5b 	bl	80004c8 <__aeabi_f2d>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	ec43 2b10 	vmov	d0, r2, r3
 8002c1a:	f009 fee9 	bl	800c9f0 <floor>
 8002c1e:	ec53 2b10 	vmov	r2, r3, d0
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	f7fd ff7f 	bl	8000b28 <__aeabi_d2uiz>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002c30:	f102 0290 	add.w	r2, r2, #144	@ 0x90
 8002c34:	6013      	str	r3, [r2, #0]
					 if(delay > MAX_DELAY){
 8002c36:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002c3a:	f103 0390 	add.w	r3, r3, #144	@ 0x90
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d906      	bls.n	8002c56 <main+0x103e>
					 	delay = MAX_DELAY;
 8002c48:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8002c4c:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002c50:	f102 0290 	add.w	r2, r2, #144	@ 0x90
 8002c54:	6013      	str	r3, [r2, #0]
					 }
					  set_motor_speed_6(65);
 8002c56:	2041      	movs	r0, #65	@ 0x41
 8002c58:	f7fe fe8e 	bl	8001978 <set_motor_speed_6>
					  HAL_Delay(delay);
 8002c5c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002c60:	f103 0390 	add.w	r3, r3, #144	@ 0x90
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	f001 fa1d 	bl	80040a4 <HAL_Delay>
					  set_motor_speed_6(50);
 8002c6a:	2032      	movs	r0, #50	@ 0x32
 8002c6c:	f7fe fe84 	bl	8001978 <set_motor_speed_6>
					 }
					 set_motor_speed_6(25);
					 HAL_Delay(delay);
					 set_motor_speed_6(50);
				 }
	     		 break;
 8002c70:	e04b      	b.n	8002d0a <main+0x10f2>
	     		else if(string_offset < 0){
 8002c72:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002c76:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002c7a:	edd3 7a00 	vldr	s15, [r3]
 8002c7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c86:	d400      	bmi.n	8002c8a <main+0x1072>
	     		 break;
 8002c88:	e03f      	b.n	8002d0a <main+0x10f2>
					 uint32_t delay = floor(-1* (80 * string_offset));
 8002c8a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002c8e:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002c92:	edd3 7a00 	vldr	s15, [r3]
 8002c96:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002d30 <main+0x1118>
 8002c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c9e:	eef1 7a67 	vneg.f32	s15, s15
 8002ca2:	ee17 3a90 	vmov	r3, s15
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fc0e 	bl	80004c8 <__aeabi_f2d>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	ec43 2b10 	vmov	d0, r2, r3
 8002cb4:	f009 fe9c 	bl	800c9f0 <floor>
 8002cb8:	ec53 2b10 	vmov	r2, r3, d0
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	f7fd ff32 	bl	8000b28 <__aeabi_d2uiz>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002cca:	f102 028c 	add.w	r2, r2, #140	@ 0x8c
 8002cce:	6013      	str	r3, [r2, #0]
					 if(delay > MAX_DELAY){
 8002cd0:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002cd4:	f103 038c 	add.w	r3, r3, #140	@ 0x8c
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d906      	bls.n	8002cf0 <main+0x10d8>
					 	delay = MAX_DELAY;
 8002ce2:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8002ce6:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002cea:	f102 028c 	add.w	r2, r2, #140	@ 0x8c
 8002cee:	6013      	str	r3, [r2, #0]
					 set_motor_speed_6(25);
 8002cf0:	2019      	movs	r0, #25
 8002cf2:	f7fe fe41 	bl	8001978 <set_motor_speed_6>
					 HAL_Delay(delay);
 8002cf6:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002cfa:	f103 038c 	add.w	r3, r3, #140	@ 0x8c
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	f001 f9d0 	bl	80040a4 <HAL_Delay>
					 set_motor_speed_6(50);
 8002d04:	2032      	movs	r0, #50	@ 0x32
 8002d06:	f7fe fe37 	bl	8001978 <set_motor_speed_6>
	     		 break;
 8002d0a:	bf00      	nop
	     }



	  //To prevent strum from previous affecting next
	  HAL_Delay(250);
 8002d0c:	20fa      	movs	r0, #250	@ 0xfa
 8002d0e:	f001 f9c9 	bl	80040a4 <HAL_Delay>
	  convFlag = 0;
 8002d12:	4b08      	ldr	r3, [pc, #32]	@ (8002d34 <main+0x111c>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	e000      	b.n	8002d1c <main+0x1104>
	    	 continue;
 8002d1a:	bf00      	nop
	while (startFlag) {
 8002d1c:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <main+0x1120>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f47f a84a 	bne.w	8001dba <main+0x1a2>
	while (!startFlag) {
 8002d26:	f7ff b842 	b.w	8001dae <main+0x196>
 8002d2a:	bf00      	nop
 8002d2c:	42fa0000 	.word	0x42fa0000
 8002d30:	42a00000 	.word	0x42a00000
 8002d34:	20000460 	.word	0x20000460
 8002d38:	20000464 	.word	0x20000464

08002d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b096      	sub	sp, #88	@ 0x58
 8002d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d42:	f107 0314 	add.w	r3, r7, #20
 8002d46:	2244      	movs	r2, #68	@ 0x44
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f009 fd3c 	bl	800c7c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d50:	463b      	mov	r3, r7
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	605a      	str	r2, [r3, #4]
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	60da      	str	r2, [r3, #12]
 8002d5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002d5e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002d62:	f002 fff7 	bl	8005d54 <HAL_PWREx_ControlVoltageScaling>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002d6c:	f000 fd82 	bl	8003874 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002d70:	2310      	movs	r3, #16
 8002d72:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002d74:	2301      	movs	r3, #1
 8002d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8002d7c:	2370      	movs	r3, #112	@ 0x70
 8002d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 f897 	bl	8005ebc <HAL_RCC_OscConfig>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002d94:	f000 fd6e 	bl	8003874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d98:	230f      	movs	r3, #15
 8002d9a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002da8:	2300      	movs	r3, #0
 8002daa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002dac:	463b      	mov	r3, r7
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f003 fc9d 	bl	80066f0 <HAL_RCC_ClockConfig>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002dbc:	f000 fd5a 	bl	8003874 <Error_Handler>
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	3758      	adds	r7, #88	@ 0x58
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b0a6      	sub	sp, #152	@ 0x98
 8002dcc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dce:	1d3b      	adds	r3, r7, #4
 8002dd0:	2294      	movs	r2, #148	@ 0x94
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f009 fcf7 	bl	800c7c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 8002dda:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8002dde:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002de0:	2300      	movs	r3, #0
 8002de2:	673b      	str	r3, [r7, #112]	@ 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002de4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002de8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002dec:	2301      	movs	r3, #1
 8002dee:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002df0:	2301      	movs	r3, #1
 8002df2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002df4:	2308      	movs	r3, #8
 8002df6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002e00:	2302      	movs	r3, #2
 8002e02:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8002e04:	4b07      	ldr	r3, [pc, #28]	@ (8002e24 <PeriphCommonClock_Config+0x5c>)
 8002e06:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e08:	1d3b      	adds	r3, r7, #4
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f003 ff2e 	bl	8006c6c <HAL_RCCEx_PeriphCLKConfig>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8002e16:	f000 fd2d 	bl	8003874 <Error_Handler>
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	3798      	adds	r7, #152	@ 0x98
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	01010000 	.word	0x01010000

08002e28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e2e:	463b      	mov	r3, r7
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
 8002e3c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ee8 <MX_ADC1_Init+0xc0>)
 8002e40:	4a2a      	ldr	r2, [pc, #168]	@ (8002eec <MX_ADC1_Init+0xc4>)
 8002e42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002e44:	4b28      	ldr	r3, [pc, #160]	@ (8002ee8 <MX_ADC1_Init+0xc0>)
 8002e46:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002e4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e4c:	4b26      	ldr	r3, [pc, #152]	@ (8002ee8 <MX_ADC1_Init+0xc0>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e52:	4b25      	ldr	r3, [pc, #148]	@ (8002ee8 <MX_ADC1_Init+0xc0>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e58:	4b23      	ldr	r3, [pc, #140]	@ (8002ee8 <MX_ADC1_Init+0xc0>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ee8 <MX_ADC1_Init+0xc0>)
 8002e60:	2204      	movs	r2, #4
 8002e62:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e64:	4b20      	ldr	r3, [pc, #128]	@ (8002ee8 <MX_ADC1_Init+0xc0>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee8 <MX_ADC1_Init+0xc0>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002e70:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee8 <MX_ADC1_Init+0xc0>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e76:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee8 <MX_ADC1_Init+0xc0>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee8 <MX_ADC1_Init+0xc0>)
 8002e80:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8002e84:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002e86:	4b18      	ldr	r3, [pc, #96]	@ (8002ee8 <MX_ADC1_Init+0xc0>)
 8002e88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002e8e:	4b16      	ldr	r3, [pc, #88]	@ (8002ee8 <MX_ADC1_Init+0xc0>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e96:	4b14      	ldr	r3, [pc, #80]	@ (8002ee8 <MX_ADC1_Init+0xc0>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002e9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ee8 <MX_ADC1_Init+0xc0>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ea4:	4810      	ldr	r0, [pc, #64]	@ (8002ee8 <MX_ADC1_Init+0xc0>)
 8002ea6:	f001 fafb 	bl	80044a0 <HAL_ADC_Init>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002eb0:	f000 fce0 	bl	8003874 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef0 <MX_ADC1_Init+0xc8>)
 8002eb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002eb8:	2306      	movs	r3, #6
 8002eba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002ebc:	2307      	movs	r3, #7
 8002ebe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ec0:	237f      	movs	r3, #127	@ 0x7f
 8002ec2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ecc:	463b      	mov	r3, r7
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4805      	ldr	r0, [pc, #20]	@ (8002ee8 <MX_ADC1_Init+0xc0>)
 8002ed2:	f001 fcc3 	bl	800485c <HAL_ADC_ConfigChannel>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8002edc:	f000 fcca 	bl	8003874 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ee0:	bf00      	nop
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000094 	.word	0x20000094
 8002eec:	50040000 	.word	0x50040000
 8002ef0:	04300002 	.word	0x04300002

08002ef4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002ef8:	4b22      	ldr	r3, [pc, #136]	@ (8002f84 <MX_LPUART1_UART_Init+0x90>)
 8002efa:	4a23      	ldr	r2, [pc, #140]	@ (8002f88 <MX_LPUART1_UART_Init+0x94>)
 8002efc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002efe:	4b21      	ldr	r3, [pc, #132]	@ (8002f84 <MX_LPUART1_UART_Init+0x90>)
 8002f00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f04:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f06:	4b1f      	ldr	r3, [pc, #124]	@ (8002f84 <MX_LPUART1_UART_Init+0x90>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f84 <MX_LPUART1_UART_Init+0x90>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002f12:	4b1c      	ldr	r3, [pc, #112]	@ (8002f84 <MX_LPUART1_UART_Init+0x90>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002f18:	4b1a      	ldr	r3, [pc, #104]	@ (8002f84 <MX_LPUART1_UART_Init+0x90>)
 8002f1a:	220c      	movs	r2, #12
 8002f1c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f1e:	4b19      	ldr	r3, [pc, #100]	@ (8002f84 <MX_LPUART1_UART_Init+0x90>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f24:	4b17      	ldr	r3, [pc, #92]	@ (8002f84 <MX_LPUART1_UART_Init+0x90>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f2a:	4b16      	ldr	r3, [pc, #88]	@ (8002f84 <MX_LPUART1_UART_Init+0x90>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f30:	4b14      	ldr	r3, [pc, #80]	@ (8002f84 <MX_LPUART1_UART_Init+0x90>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002f36:	4b13      	ldr	r3, [pc, #76]	@ (8002f84 <MX_LPUART1_UART_Init+0x90>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002f3c:	4811      	ldr	r0, [pc, #68]	@ (8002f84 <MX_LPUART1_UART_Init+0x90>)
 8002f3e:	f007 fc15 	bl	800a76c <HAL_UART_Init>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002f48:	f000 fc94 	bl	8003874 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	480d      	ldr	r0, [pc, #52]	@ (8002f84 <MX_LPUART1_UART_Init+0x90>)
 8002f50:	f008 fa38 	bl	800b3c4 <HAL_UARTEx_SetTxFifoThreshold>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002f5a:	f000 fc8b 	bl	8003874 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4808      	ldr	r0, [pc, #32]	@ (8002f84 <MX_LPUART1_UART_Init+0x90>)
 8002f62:	f008 fa6d 	bl	800b440 <HAL_UARTEx_SetRxFifoThreshold>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002f6c:	f000 fc82 	bl	8003874 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002f70:	4804      	ldr	r0, [pc, #16]	@ (8002f84 <MX_LPUART1_UART_Init+0x90>)
 8002f72:	f008 f9ee 	bl	800b352 <HAL_UARTEx_DisableFifoMode>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002f7c:	f000 fc7a 	bl	8003874 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002f80:	bf00      	nop
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	2000015c 	.word	0x2000015c
 8002f88:	40008000 	.word	0x40008000

08002f8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f90:	4b22      	ldr	r3, [pc, #136]	@ (800301c <MX_USART1_UART_Init+0x90>)
 8002f92:	4a23      	ldr	r2, [pc, #140]	@ (8003020 <MX_USART1_UART_Init+0x94>)
 8002f94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002f96:	4b21      	ldr	r3, [pc, #132]	@ (800301c <MX_USART1_UART_Init+0x90>)
 8002f98:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002f9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800301c <MX_USART1_UART_Init+0x90>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800301c <MX_USART1_UART_Init+0x90>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002faa:	4b1c      	ldr	r3, [pc, #112]	@ (800301c <MX_USART1_UART_Init+0x90>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800301c <MX_USART1_UART_Init+0x90>)
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fb6:	4b19      	ldr	r3, [pc, #100]	@ (800301c <MX_USART1_UART_Init+0x90>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fbc:	4b17      	ldr	r3, [pc, #92]	@ (800301c <MX_USART1_UART_Init+0x90>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fc2:	4b16      	ldr	r3, [pc, #88]	@ (800301c <MX_USART1_UART_Init+0x90>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fc8:	4b14      	ldr	r3, [pc, #80]	@ (800301c <MX_USART1_UART_Init+0x90>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fce:	4b13      	ldr	r3, [pc, #76]	@ (800301c <MX_USART1_UART_Init+0x90>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fd4:	4811      	ldr	r0, [pc, #68]	@ (800301c <MX_USART1_UART_Init+0x90>)
 8002fd6:	f007 fbc9 	bl	800a76c <HAL_UART_Init>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002fe0:	f000 fc48 	bl	8003874 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	480d      	ldr	r0, [pc, #52]	@ (800301c <MX_USART1_UART_Init+0x90>)
 8002fe8:	f008 f9ec 	bl	800b3c4 <HAL_UARTEx_SetTxFifoThreshold>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002ff2:	f000 fc3f 	bl	8003874 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4808      	ldr	r0, [pc, #32]	@ (800301c <MX_USART1_UART_Init+0x90>)
 8002ffa:	f008 fa21 	bl	800b440 <HAL_UARTEx_SetRxFifoThreshold>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003004:	f000 fc36 	bl	8003874 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003008:	4804      	ldr	r0, [pc, #16]	@ (800301c <MX_USART1_UART_Init+0x90>)
 800300a:	f008 f9a2 	bl	800b352 <HAL_UARTEx_DisableFifoMode>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003014:	f000 fc2e 	bl	8003874 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003018:	bf00      	nop
 800301a:	bd80      	pop	{r7, pc}
 800301c:	200001f0 	.word	0x200001f0
 8003020:	40013800 	.word	0x40013800

08003024 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8003028:	4b16      	ldr	r3, [pc, #88]	@ (8003084 <MX_SAI1_Init+0x60>)
 800302a:	4a17      	ldr	r2, [pc, #92]	@ (8003088 <MX_SAI1_Init+0x64>)
 800302c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800302e:	4b15      	ldr	r3, [pc, #84]	@ (8003084 <MX_SAI1_Init+0x60>)
 8003030:	2200      	movs	r2, #0
 8003032:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8003034:	4b13      	ldr	r3, [pc, #76]	@ (8003084 <MX_SAI1_Init+0x60>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800303a:	4b12      	ldr	r3, [pc, #72]	@ (8003084 <MX_SAI1_Init+0x60>)
 800303c:	2200      	movs	r2, #0
 800303e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003040:	4b10      	ldr	r3, [pc, #64]	@ (8003084 <MX_SAI1_Init+0x60>)
 8003042:	2200      	movs	r2, #0
 8003044:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003046:	4b0f      	ldr	r3, [pc, #60]	@ (8003084 <MX_SAI1_Init+0x60>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800304c:	4b0d      	ldr	r3, [pc, #52]	@ (8003084 <MX_SAI1_Init+0x60>)
 800304e:	4a0f      	ldr	r2, [pc, #60]	@ (800308c <MX_SAI1_Init+0x68>)
 8003050:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003052:	4b0c      	ldr	r3, [pc, #48]	@ (8003084 <MX_SAI1_Init+0x60>)
 8003054:	2200      	movs	r2, #0
 8003056:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8003058:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <MX_SAI1_Init+0x60>)
 800305a:	2200      	movs	r2, #0
 800305c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800305e:	4b09      	ldr	r3, [pc, #36]	@ (8003084 <MX_SAI1_Init+0x60>)
 8003060:	2200      	movs	r2, #0
 8003062:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003064:	4b07      	ldr	r3, [pc, #28]	@ (8003084 <MX_SAI1_Init+0x60>)
 8003066:	2200      	movs	r2, #0
 8003068:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800306a:	2302      	movs	r3, #2
 800306c:	2200      	movs	r2, #0
 800306e:	2100      	movs	r1, #0
 8003070:	4804      	ldr	r0, [pc, #16]	@ (8003084 <MX_SAI1_Init+0x60>)
 8003072:	f005 fb47 	bl	8008704 <HAL_SAI_InitProtocol>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 800307c:	f000 fbfa 	bl	8003874 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8003080:	bf00      	nop
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000284 	.word	0x20000284
 8003088:	40015404 	.word	0x40015404
 800308c:	0002ee00 	.word	0x0002ee00

08003090 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003094:	4b1b      	ldr	r3, [pc, #108]	@ (8003104 <MX_SPI1_Init+0x74>)
 8003096:	4a1c      	ldr	r2, [pc, #112]	@ (8003108 <MX_SPI1_Init+0x78>)
 8003098:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800309a:	4b1a      	ldr	r3, [pc, #104]	@ (8003104 <MX_SPI1_Init+0x74>)
 800309c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80030a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030a2:	4b18      	ldr	r3, [pc, #96]	@ (8003104 <MX_SPI1_Init+0x74>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030a8:	4b16      	ldr	r3, [pc, #88]	@ (8003104 <MX_SPI1_Init+0x74>)
 80030aa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80030ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030b0:	4b14      	ldr	r3, [pc, #80]	@ (8003104 <MX_SPI1_Init+0x74>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030b6:	4b13      	ldr	r3, [pc, #76]	@ (8003104 <MX_SPI1_Init+0x74>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030bc:	4b11      	ldr	r3, [pc, #68]	@ (8003104 <MX_SPI1_Init+0x74>)
 80030be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80030c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003104 <MX_SPI1_Init+0x74>)
 80030c6:	2228      	movs	r2, #40	@ 0x28
 80030c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003104 <MX_SPI1_Init+0x74>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <MX_SPI1_Init+0x74>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <MX_SPI1_Init+0x74>)
 80030d8:	2200      	movs	r2, #0
 80030da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80030dc:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <MX_SPI1_Init+0x74>)
 80030de:	2207      	movs	r2, #7
 80030e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030e2:	4b08      	ldr	r3, [pc, #32]	@ (8003104 <MX_SPI1_Init+0x74>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80030e8:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <MX_SPI1_Init+0x74>)
 80030ea:	2208      	movs	r2, #8
 80030ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030ee:	4805      	ldr	r0, [pc, #20]	@ (8003104 <MX_SPI1_Init+0x74>)
 80030f0:	f005 fe86 	bl	8008e00 <HAL_SPI_Init>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80030fa:	f000 fbbb 	bl	8003874 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000318 	.word	0x20000318
 8003108:	40013000 	.word	0x40013000

0800310c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b09a      	sub	sp, #104	@ 0x68
 8003110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003112:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003120:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800312c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	611a      	str	r2, [r3, #16]
 800313c:	615a      	str	r2, [r3, #20]
 800313e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003140:	1d3b      	adds	r3, r7, #4
 8003142:	222c      	movs	r2, #44	@ 0x2c
 8003144:	2100      	movs	r1, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f009 fb3e 	bl	800c7c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800314c:	4b4f      	ldr	r3, [pc, #316]	@ (800328c <MX_TIM1_Init+0x180>)
 800314e:	4a50      	ldr	r2, [pc, #320]	@ (8003290 <MX_TIM1_Init+0x184>)
 8003150:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 194;
 8003152:	4b4e      	ldr	r3, [pc, #312]	@ (800328c <MX_TIM1_Init+0x180>)
 8003154:	22c2      	movs	r2, #194	@ 0xc2
 8003156:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003158:	4b4c      	ldr	r3, [pc, #304]	@ (800328c <MX_TIM1_Init+0x180>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 800315e:	4b4b      	ldr	r3, [pc, #300]	@ (800328c <MX_TIM1_Init+0x180>)
 8003160:	2209      	movs	r2, #9
 8003162:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003164:	4b49      	ldr	r3, [pc, #292]	@ (800328c <MX_TIM1_Init+0x180>)
 8003166:	2200      	movs	r2, #0
 8003168:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800316a:	4b48      	ldr	r3, [pc, #288]	@ (800328c <MX_TIM1_Init+0x180>)
 800316c:	2200      	movs	r2, #0
 800316e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003170:	4b46      	ldr	r3, [pc, #280]	@ (800328c <MX_TIM1_Init+0x180>)
 8003172:	2200      	movs	r2, #0
 8003174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003176:	4845      	ldr	r0, [pc, #276]	@ (800328c <MX_TIM1_Init+0x180>)
 8003178:	f006 f9be 	bl	80094f8 <HAL_TIM_Base_Init>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003182:	f000 fb77 	bl	8003874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003186:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800318a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800318c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003190:	4619      	mov	r1, r3
 8003192:	483e      	ldr	r0, [pc, #248]	@ (800328c <MX_TIM1_Init+0x180>)
 8003194:	f006 fcea 	bl	8009b6c <HAL_TIM_ConfigClockSource>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800319e:	f000 fb69 	bl	8003874 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80031a2:	483a      	ldr	r0, [pc, #232]	@ (800328c <MX_TIM1_Init+0x180>)
 80031a4:	f006 fa70 	bl	8009688 <HAL_TIM_PWM_Init>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80031ae:	f000 fb61 	bl	8003874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80031b2:	2320      	movs	r3, #32
 80031b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80031b6:	2300      	movs	r3, #0
 80031b8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ba:	2300      	movs	r3, #0
 80031bc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031be:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80031c2:	4619      	mov	r1, r3
 80031c4:	4831      	ldr	r0, [pc, #196]	@ (800328c <MX_TIM1_Init+0x180>)
 80031c6:	f007 f9cb 	bl	800a560 <HAL_TIMEx_MasterConfigSynchronization>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80031d0:	f000 fb50 	bl	8003874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031d4:	2360      	movs	r3, #96	@ 0x60
 80031d6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031dc:	2300      	movs	r3, #0
 80031de:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80031e0:	2300      	movs	r3, #0
 80031e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031e4:	2300      	movs	r3, #0
 80031e6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80031e8:	2300      	movs	r3, #0
 80031ea:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80031ec:	2300      	movs	r3, #0
 80031ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80031f4:	2200      	movs	r2, #0
 80031f6:	4619      	mov	r1, r3
 80031f8:	4824      	ldr	r0, [pc, #144]	@ (800328c <MX_TIM1_Init+0x180>)
 80031fa:	f006 fba3 	bl	8009944 <HAL_TIM_PWM_ConfigChannel>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8003204:	f000 fb36 	bl	8003874 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003208:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800320c:	2204      	movs	r2, #4
 800320e:	4619      	mov	r1, r3
 8003210:	481e      	ldr	r0, [pc, #120]	@ (800328c <MX_TIM1_Init+0x180>)
 8003212:	f006 fb97 	bl	8009944 <HAL_TIM_PWM_ConfigChannel>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800321c:	f000 fb2a 	bl	8003874 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003220:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003224:	2208      	movs	r2, #8
 8003226:	4619      	mov	r1, r3
 8003228:	4818      	ldr	r0, [pc, #96]	@ (800328c <MX_TIM1_Init+0x180>)
 800322a:	f006 fb8b 	bl	8009944 <HAL_TIM_PWM_ConfigChannel>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8003234:	f000 fb1e 	bl	8003874 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003238:	2300      	movs	r3, #0
 800323a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800323c:	2300      	movs	r3, #0
 800323e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800324c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003250:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003256:	2300      	movs	r3, #0
 8003258:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800325a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003264:	2300      	movs	r3, #0
 8003266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003268:	1d3b      	adds	r3, r7, #4
 800326a:	4619      	mov	r1, r3
 800326c:	4807      	ldr	r0, [pc, #28]	@ (800328c <MX_TIM1_Init+0x180>)
 800326e:	f007 f9ff 	bl	800a670 <HAL_TIMEx_ConfigBreakDeadTime>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8003278:	f000 fafc 	bl	8003874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800327c:	4803      	ldr	r0, [pc, #12]	@ (800328c <MX_TIM1_Init+0x180>)
 800327e:	f000 fd3f 	bl	8003d00 <HAL_TIM_MspPostInit>

}
 8003282:	bf00      	nop
 8003284:	3768      	adds	r7, #104	@ 0x68
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	2000037c 	.word	0x2000037c
 8003290:	40012c00 	.word	0x40012c00

08003294 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08a      	sub	sp, #40	@ 0x28
 8003298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800329a:	f107 031c 	add.w	r3, r7, #28
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	605a      	str	r2, [r3, #4]
 80032a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032a6:	463b      	mov	r3, r7
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	611a      	str	r2, [r3, #16]
 80032b4:	615a      	str	r2, [r3, #20]
 80032b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80032b8:	4b32      	ldr	r3, [pc, #200]	@ (8003384 <MX_TIM4_Init+0xf0>)
 80032ba:	4a33      	ldr	r2, [pc, #204]	@ (8003388 <MX_TIM4_Init+0xf4>)
 80032bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 80032be:	4b31      	ldr	r3, [pc, #196]	@ (8003384 <MX_TIM4_Init+0xf0>)
 80032c0:	2207      	movs	r2, #7
 80032c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003384 <MX_TIM4_Init+0xf0>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 80032ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003384 <MX_TIM4_Init+0xf0>)
 80032cc:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80032d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003384 <MX_TIM4_Init+0xf0>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003384 <MX_TIM4_Init+0xf0>)
 80032da:	2200      	movs	r2, #0
 80032dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80032de:	4829      	ldr	r0, [pc, #164]	@ (8003384 <MX_TIM4_Init+0xf0>)
 80032e0:	f006 f9d2 	bl	8009688 <HAL_TIM_PWM_Init>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80032ea:	f000 fac3 	bl	8003874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80032f6:	f107 031c 	add.w	r3, r7, #28
 80032fa:	4619      	mov	r1, r3
 80032fc:	4821      	ldr	r0, [pc, #132]	@ (8003384 <MX_TIM4_Init+0xf0>)
 80032fe:	f007 f92f 	bl	800a560 <HAL_TIMEx_MasterConfigSynchronization>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003308:	f000 fab4 	bl	8003874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800330c:	2360      	movs	r3, #96	@ 0x60
 800330e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8003310:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003314:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800331e:	463b      	mov	r3, r7
 8003320:	2200      	movs	r2, #0
 8003322:	4619      	mov	r1, r3
 8003324:	4817      	ldr	r0, [pc, #92]	@ (8003384 <MX_TIM4_Init+0xf0>)
 8003326:	f006 fb0d 	bl	8009944 <HAL_TIM_PWM_ConfigChannel>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8003330:	f000 faa0 	bl	8003874 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003334:	463b      	mov	r3, r7
 8003336:	2204      	movs	r2, #4
 8003338:	4619      	mov	r1, r3
 800333a:	4812      	ldr	r0, [pc, #72]	@ (8003384 <MX_TIM4_Init+0xf0>)
 800333c:	f006 fb02 	bl	8009944 <HAL_TIM_PWM_ConfigChannel>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8003346:	f000 fa95 	bl	8003874 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800334a:	463b      	mov	r3, r7
 800334c:	2208      	movs	r2, #8
 800334e:	4619      	mov	r1, r3
 8003350:	480c      	ldr	r0, [pc, #48]	@ (8003384 <MX_TIM4_Init+0xf0>)
 8003352:	f006 faf7 	bl	8009944 <HAL_TIM_PWM_ConfigChannel>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 800335c:	f000 fa8a 	bl	8003874 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003360:	463b      	mov	r3, r7
 8003362:	220c      	movs	r2, #12
 8003364:	4619      	mov	r1, r3
 8003366:	4807      	ldr	r0, [pc, #28]	@ (8003384 <MX_TIM4_Init+0xf0>)
 8003368:	f006 faec 	bl	8009944 <HAL_TIM_PWM_ConfigChannel>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8003372:	f000 fa7f 	bl	8003874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003376:	4803      	ldr	r0, [pc, #12]	@ (8003384 <MX_TIM4_Init+0xf0>)
 8003378:	f000 fcc2 	bl	8003d00 <HAL_TIM_MspPostInit>

}
 800337c:	bf00      	nop
 800337e:	3728      	adds	r7, #40	@ 0x28
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	200003c8 	.word	0x200003c8
 8003388:	40000800 	.word	0x40000800

0800338c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08a      	sub	sp, #40	@ 0x28
 8003390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003392:	f107 031c 	add.w	r3, r7, #28
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	605a      	str	r2, [r3, #4]
 800339c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800339e:	463b      	mov	r3, r7
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	611a      	str	r2, [r3, #16]
 80033ac:	615a      	str	r2, [r3, #20]
 80033ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80033b0:	4b27      	ldr	r3, [pc, #156]	@ (8003450 <MX_TIM5_Init+0xc4>)
 80033b2:	4a28      	ldr	r2, [pc, #160]	@ (8003454 <MX_TIM5_Init+0xc8>)
 80033b4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7;
 80033b6:	4b26      	ldr	r3, [pc, #152]	@ (8003450 <MX_TIM5_Init+0xc4>)
 80033b8:	2207      	movs	r2, #7
 80033ba:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033bc:	4b24      	ldr	r3, [pc, #144]	@ (8003450 <MX_TIM5_Init+0xc4>)
 80033be:	2200      	movs	r2, #0
 80033c0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000;
 80033c2:	4b23      	ldr	r3, [pc, #140]	@ (8003450 <MX_TIM5_Init+0xc4>)
 80033c4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80033c8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ca:	4b21      	ldr	r3, [pc, #132]	@ (8003450 <MX_TIM5_Init+0xc4>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003450 <MX_TIM5_Init+0xc4>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80033d6:	481e      	ldr	r0, [pc, #120]	@ (8003450 <MX_TIM5_Init+0xc4>)
 80033d8:	f006 f956 	bl	8009688 <HAL_TIM_PWM_Init>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80033e2:	f000 fa47 	bl	8003874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80033ee:	f107 031c 	add.w	r3, r7, #28
 80033f2:	4619      	mov	r1, r3
 80033f4:	4816      	ldr	r0, [pc, #88]	@ (8003450 <MX_TIM5_Init+0xc4>)
 80033f6:	f007 f8b3 	bl	800a560 <HAL_TIMEx_MasterConfigSynchronization>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8003400:	f000 fa38 	bl	8003874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003404:	2360      	movs	r3, #96	@ 0x60
 8003406:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8003408:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800340c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800340e:	2300      	movs	r3, #0
 8003410:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003416:	463b      	mov	r3, r7
 8003418:	2200      	movs	r2, #0
 800341a:	4619      	mov	r1, r3
 800341c:	480c      	ldr	r0, [pc, #48]	@ (8003450 <MX_TIM5_Init+0xc4>)
 800341e:	f006 fa91 	bl	8009944 <HAL_TIM_PWM_ConfigChannel>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8003428:	f000 fa24 	bl	8003874 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800342c:	463b      	mov	r3, r7
 800342e:	2208      	movs	r2, #8
 8003430:	4619      	mov	r1, r3
 8003432:	4807      	ldr	r0, [pc, #28]	@ (8003450 <MX_TIM5_Init+0xc4>)
 8003434:	f006 fa86 	bl	8009944 <HAL_TIM_PWM_ConfigChannel>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_TIM5_Init+0xb6>
  {
    Error_Handler();
 800343e:	f000 fa19 	bl	8003874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003442:	4803      	ldr	r0, [pc, #12]	@ (8003450 <MX_TIM5_Init+0xc4>)
 8003444:	f000 fc5c 	bl	8003d00 <HAL_TIM_MspPostInit>

}
 8003448:	bf00      	nop
 800344a:	3728      	adds	r7, #40	@ 0x28
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20000414 	.word	0x20000414
 8003454:	40000c00 	.word	0x40000c00

08003458 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800345e:	4b12      	ldr	r3, [pc, #72]	@ (80034a8 <MX_DMA_Init+0x50>)
 8003460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003462:	4a11      	ldr	r2, [pc, #68]	@ (80034a8 <MX_DMA_Init+0x50>)
 8003464:	f043 0304 	orr.w	r3, r3, #4
 8003468:	6493      	str	r3, [r2, #72]	@ 0x48
 800346a:	4b0f      	ldr	r3, [pc, #60]	@ (80034a8 <MX_DMA_Init+0x50>)
 800346c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	607b      	str	r3, [r7, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003476:	4b0c      	ldr	r3, [pc, #48]	@ (80034a8 <MX_DMA_Init+0x50>)
 8003478:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800347a:	4a0b      	ldr	r2, [pc, #44]	@ (80034a8 <MX_DMA_Init+0x50>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6493      	str	r3, [r2, #72]	@ 0x48
 8003482:	4b09      	ldr	r3, [pc, #36]	@ (80034a8 <MX_DMA_Init+0x50>)
 8003484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800348e:	2200      	movs	r2, #0
 8003490:	2100      	movs	r1, #0
 8003492:	200b      	movs	r0, #11
 8003494:	f001 ffd3 	bl	800543e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003498:	200b      	movs	r0, #11
 800349a:	f001 ffec 	bl	8005476 <HAL_NVIC_EnableIRQ>

}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000

080034ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08e      	sub	sp, #56	@ 0x38
 80034b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	605a      	str	r2, [r3, #4]
 80034bc:	609a      	str	r2, [r3, #8]
 80034be:	60da      	str	r2, [r3, #12]
 80034c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034c2:	4bb4      	ldr	r3, [pc, #720]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 80034c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c6:	4ab3      	ldr	r2, [pc, #716]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 80034c8:	f043 0310 	orr.w	r3, r3, #16
 80034cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034ce:	4bb1      	ldr	r3, [pc, #708]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 80034d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	623b      	str	r3, [r7, #32]
 80034d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034da:	4bae      	ldr	r3, [pc, #696]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 80034dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034de:	4aad      	ldr	r2, [pc, #692]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 80034e0:	f043 0304 	orr.w	r3, r3, #4
 80034e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034e6:	4bab      	ldr	r3, [pc, #684]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 80034e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	61fb      	str	r3, [r7, #28]
 80034f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034f2:	4ba8      	ldr	r3, [pc, #672]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 80034f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f6:	4aa7      	ldr	r2, [pc, #668]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 80034f8:	f043 0320 	orr.w	r3, r3, #32
 80034fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034fe:	4ba5      	ldr	r3, [pc, #660]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 8003500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	61bb      	str	r3, [r7, #24]
 8003508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800350a:	4ba2      	ldr	r3, [pc, #648]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 800350c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350e:	4aa1      	ldr	r2, [pc, #644]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 8003510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003516:	4b9f      	ldr	r3, [pc, #636]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 8003518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003522:	4b9c      	ldr	r3, [pc, #624]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 8003524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003526:	4a9b      	ldr	r2, [pc, #620]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800352e:	4b99      	ldr	r3, [pc, #612]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 8003530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800353a:	4b96      	ldr	r3, [pc, #600]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 800353c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353e:	4a95      	ldr	r2, [pc, #596]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 8003540:	f043 0302 	orr.w	r3, r3, #2
 8003544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003546:	4b93      	ldr	r3, [pc, #588]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 8003548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003552:	4b90      	ldr	r3, [pc, #576]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 8003554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003556:	4a8f      	ldr	r2, [pc, #572]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 8003558:	f043 0308 	orr.w	r3, r3, #8
 800355c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800355e:	4b8d      	ldr	r3, [pc, #564]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 8003560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800356a:	4b8a      	ldr	r3, [pc, #552]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 800356c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800356e:	4a89      	ldr	r2, [pc, #548]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 8003570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003576:	4b87      	ldr	r3, [pc, #540]	@ (8003794 <MX_GPIO_Init+0x2e8>)
 8003578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800357a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8003582:	f002 fc8b 	bl	8005e9c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003586:	2200      	movs	r2, #0
 8003588:	2110      	movs	r1, #16
 800358a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800358e:	f002 fb91 	bl	8005cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 8003592:	2200      	movs	r2, #0
 8003594:	f244 0187 	movw	r1, #16519	@ 0x4087
 8003598:	487f      	ldr	r0, [pc, #508]	@ (8003798 <MX_GPIO_Init+0x2ec>)
 800359a:	f002 fb8b 	bl	8005cb4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800359e:	2200      	movs	r2, #0
 80035a0:	2140      	movs	r1, #64	@ 0x40
 80035a2:	487e      	ldr	r0, [pc, #504]	@ (800379c <MX_GPIO_Init+0x2f0>)
 80035a4:	f002 fb86 	bl	8005cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80035a8:	2307      	movs	r3, #7
 80035aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035ac:	2312      	movs	r3, #18
 80035ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b4:	2303      	movs	r3, #3
 80035b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80035b8:	2304      	movs	r3, #4
 80035ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035c0:	4619      	mov	r1, r3
 80035c2:	4877      	ldr	r0, [pc, #476]	@ (80037a0 <MX_GPIO_Init+0x2f4>)
 80035c4:	f002 f9e4 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035c8:	2301      	movs	r3, #1
 80035ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035cc:	2302      	movs	r3, #2
 80035ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d4:	2300      	movs	r3, #0
 80035d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035d8:	2301      	movs	r3, #1
 80035da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035e0:	4619      	mov	r1, r3
 80035e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035e6:	f002 f9d3 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80035ea:	2310      	movs	r3, #16
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ee:	2301      	movs	r3, #1
 80035f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f6:	2300      	movs	r3, #0
 80035f8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035fe:	4619      	mov	r1, r3
 8003600:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003604:	f002 f9c4 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003608:	2340      	movs	r3, #64	@ 0x40
 800360a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800360c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003610:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003616:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800361a:	4619      	mov	r1, r3
 800361c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003620:	f002 f9b6 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB14
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 8003624:	f244 0387 	movw	r3, #16519	@ 0x4087
 8003628:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800362a:	2301      	movs	r3, #1
 800362c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003632:	2300      	movs	r3, #0
 8003634:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003636:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800363a:	4619      	mov	r1, r3
 800363c:	4856      	ldr	r0, [pc, #344]	@ (8003798 <MX_GPIO_Init+0x2ec>)
 800363e:	f002 f9a7 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003642:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003646:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003648:	2302      	movs	r3, #2
 800364a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003650:	2300      	movs	r3, #0
 8003652:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003654:	2301      	movs	r3, #1
 8003656:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003658:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800365c:	4619      	mov	r1, r3
 800365e:	484e      	ldr	r0, [pc, #312]	@ (8003798 <MX_GPIO_Init+0x2ec>)
 8003660:	f002 f996 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003664:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8003668:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366a:	2302      	movs	r3, #2
 800366c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	2300      	movs	r3, #0
 8003670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003672:	2300      	movs	r3, #0
 8003674:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003676:	230d      	movs	r3, #13
 8003678:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800367a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800367e:	4619      	mov	r1, r3
 8003680:	4845      	ldr	r0, [pc, #276]	@ (8003798 <MX_GPIO_Init+0x2ec>)
 8003682:	f002 f985 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003686:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368c:	2302      	movs	r3, #2
 800368e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003694:	2303      	movs	r3, #3
 8003696:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003698:	2307      	movs	r3, #7
 800369a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800369c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036a0:	4619      	mov	r1, r3
 80036a2:	4840      	ldr	r0, [pc, #256]	@ (80037a4 <MX_GPIO_Init+0x2f8>)
 80036a4:	f002 f974 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80036a8:	2320      	movs	r3, #32
 80036aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036ac:	2300      	movs	r3, #0
 80036ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036b8:	4619      	mov	r1, r3
 80036ba:	4838      	ldr	r0, [pc, #224]	@ (800379c <MX_GPIO_Init+0x2f0>)
 80036bc:	f002 f968 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80036c0:	2340      	movs	r3, #64	@ 0x40
 80036c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036c4:	2301      	movs	r3, #1
 80036c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036cc:	2300      	movs	r3, #0
 80036ce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036d4:	4619      	mov	r1, r3
 80036d6:	4831      	ldr	r0, [pc, #196]	@ (800379c <MX_GPIO_Init+0x2f0>)
 80036d8:	f002 f95a 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80036dc:	2340      	movs	r3, #64	@ 0x40
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e0:	2302      	movs	r3, #2
 80036e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e8:	2300      	movs	r3, #0
 80036ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80036ec:	230d      	movs	r3, #13
 80036ee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036f4:	4619      	mov	r1, r3
 80036f6:	482c      	ldr	r0, [pc, #176]	@ (80037a8 <MX_GPIO_Init+0x2fc>)
 80036f8:	f002 f94a 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80036fc:	2380      	movs	r3, #128	@ 0x80
 80036fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003700:	2302      	movs	r3, #2
 8003702:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	2300      	movs	r3, #0
 8003706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003708:	2300      	movs	r3, #0
 800370a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800370c:	2302      	movs	r3, #2
 800370e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003714:	4619      	mov	r1, r3
 8003716:	4824      	ldr	r0, [pc, #144]	@ (80037a8 <MX_GPIO_Init+0x2fc>)
 8003718:	f002 f93a 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800371c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003720:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003722:	2302      	movs	r3, #2
 8003724:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372a:	2303      	movs	r3, #3
 800372c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800372e:	230c      	movs	r3, #12
 8003730:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003736:	4619      	mov	r1, r3
 8003738:	481b      	ldr	r0, [pc, #108]	@ (80037a8 <MX_GPIO_Init+0x2fc>)
 800373a:	f002 f929 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800373e:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8003742:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003744:	2302      	movs	r3, #2
 8003746:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374c:	2303      	movs	r3, #3
 800374e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003750:	230a      	movs	r3, #10
 8003752:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003754:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003758:	4619      	mov	r1, r3
 800375a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800375e:	f002 f917 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003762:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003766:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003768:	2300      	movs	r3, #0
 800376a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376c:	2300      	movs	r3, #0
 800376e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003770:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003774:	4619      	mov	r1, r3
 8003776:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800377a:	f002 f909 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800377e:	2301      	movs	r3, #1
 8003780:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003782:	2302      	movs	r3, #2
 8003784:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2300      	movs	r3, #0
 8003788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800378a:	2303      	movs	r3, #3
 800378c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800378e:	2309      	movs	r3, #9
 8003790:	637b      	str	r3, [r7, #52]	@ 0x34
 8003792:	e00b      	b.n	80037ac <MX_GPIO_Init+0x300>
 8003794:	40021000 	.word	0x40021000
 8003798:	48000400 	.word	0x48000400
 800379c:	48001800 	.word	0x48001800
 80037a0:	48001400 	.word	0x48001400
 80037a4:	48000c00 	.word	0x48000c00
 80037a8:	48000800 	.word	0x48000800
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037b0:	4619      	mov	r1, r3
 80037b2:	482e      	ldr	r0, [pc, #184]	@ (800386c <MX_GPIO_Init+0x3c0>)
 80037b4:	f002 f8ec 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037b8:	2304      	movs	r3, #4
 80037ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037bc:	2302      	movs	r3, #2
 80037be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c4:	2303      	movs	r3, #3
 80037c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80037c8:	230c      	movs	r3, #12
 80037ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037d0:	4619      	mov	r1, r3
 80037d2:	4826      	ldr	r0, [pc, #152]	@ (800386c <MX_GPIO_Init+0x3c0>)
 80037d4:	f002 f8dc 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80037d8:	2378      	movs	r3, #120	@ 0x78
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037dc:	2302      	movs	r3, #2
 80037de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e4:	2303      	movs	r3, #3
 80037e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037e8:	2307      	movs	r3, #7
 80037ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037f0:	4619      	mov	r1, r3
 80037f2:	481e      	ldr	r0, [pc, #120]	@ (800386c <MX_GPIO_Init+0x3c0>)
 80037f4:	f002 f8cc 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80037f8:	2330      	movs	r3, #48	@ 0x30
 80037fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fc:	2302      	movs	r3, #2
 80037fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003800:	2300      	movs	r3, #0
 8003802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003804:	2303      	movs	r3, #3
 8003806:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003808:	2306      	movs	r3, #6
 800380a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800380c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003810:	4619      	mov	r1, r3
 8003812:	4817      	ldr	r0, [pc, #92]	@ (8003870 <MX_GPIO_Init+0x3c4>)
 8003814:	f002 f8bc 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003818:	2340      	movs	r3, #64	@ 0x40
 800381a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800381c:	2303      	movs	r3, #3
 800381e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003820:	2300      	movs	r3, #0
 8003822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003828:	4619      	mov	r1, r3
 800382a:	4811      	ldr	r0, [pc, #68]	@ (8003870 <MX_GPIO_Init+0x3c4>)
 800382c:	f002 f8b0 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003830:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003834:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003836:	2312      	movs	r3, #18
 8003838:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383a:	2300      	movs	r3, #0
 800383c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383e:	2303      	movs	r3, #3
 8003840:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003842:	2304      	movs	r3, #4
 8003844:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800384a:	4619      	mov	r1, r3
 800384c:	4808      	ldr	r0, [pc, #32]	@ (8003870 <MX_GPIO_Init+0x3c4>)
 800384e:	f002 f89f 	bl	8005990 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003852:	2200      	movs	r2, #0
 8003854:	2100      	movs	r1, #0
 8003856:	2017      	movs	r0, #23
 8003858:	f001 fdf1 	bl	800543e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800385c:	2017      	movs	r0, #23
 800385e:	f001 fe0a 	bl	8005476 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003862:	bf00      	nop
 8003864:	3738      	adds	r7, #56	@ 0x38
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	48000c00 	.word	0x48000c00
 8003870:	48000400 	.word	0x48000400

08003874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003878:	b672      	cpsid	i
}
 800387a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800387c:	bf00      	nop
 800387e:	e7fd      	b.n	800387c <Error_Handler+0x8>

08003880 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003886:	4b0f      	ldr	r3, [pc, #60]	@ (80038c4 <HAL_MspInit+0x44>)
 8003888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388a:	4a0e      	ldr	r2, [pc, #56]	@ (80038c4 <HAL_MspInit+0x44>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	6613      	str	r3, [r2, #96]	@ 0x60
 8003892:	4b0c      	ldr	r3, [pc, #48]	@ (80038c4 <HAL_MspInit+0x44>)
 8003894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	607b      	str	r3, [r7, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800389e:	4b09      	ldr	r3, [pc, #36]	@ (80038c4 <HAL_MspInit+0x44>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a2:	4a08      	ldr	r2, [pc, #32]	@ (80038c4 <HAL_MspInit+0x44>)
 80038a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80038aa:	4b06      	ldr	r3, [pc, #24]	@ (80038c4 <HAL_MspInit+0x44>)
 80038ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000

080038c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	@ 0x28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d0:	f107 0314 	add.w	r3, r7, #20
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	60da      	str	r2, [r3, #12]
 80038de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a37      	ldr	r2, [pc, #220]	@ (80039c4 <HAL_ADC_MspInit+0xfc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d168      	bne.n	80039bc <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80038ea:	4b37      	ldr	r3, [pc, #220]	@ (80039c8 <HAL_ADC_MspInit+0x100>)
 80038ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ee:	4a36      	ldr	r2, [pc, #216]	@ (80039c8 <HAL_ADC_MspInit+0x100>)
 80038f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038f6:	4b34      	ldr	r3, [pc, #208]	@ (80039c8 <HAL_ADC_MspInit+0x100>)
 80038f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003902:	4b31      	ldr	r3, [pc, #196]	@ (80039c8 <HAL_ADC_MspInit+0x100>)
 8003904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003906:	4a30      	ldr	r2, [pc, #192]	@ (80039c8 <HAL_ADC_MspInit+0x100>)
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800390e:	4b2e      	ldr	r3, [pc, #184]	@ (80039c8 <HAL_ADC_MspInit+0x100>)
 8003910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391a:	4b2b      	ldr	r3, [pc, #172]	@ (80039c8 <HAL_ADC_MspInit+0x100>)
 800391c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391e:	4a2a      	ldr	r2, [pc, #168]	@ (80039c8 <HAL_ADC_MspInit+0x100>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003926:	4b28      	ldr	r3, [pc, #160]	@ (80039c8 <HAL_ADC_MspInit+0x100>)
 8003928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003932:	233f      	movs	r3, #63	@ 0x3f
 8003934:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003936:	230b      	movs	r3, #11
 8003938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800393e:	f107 0314 	add.w	r3, r7, #20
 8003942:	4619      	mov	r1, r3
 8003944:	4821      	ldr	r0, [pc, #132]	@ (80039cc <HAL_ADC_MspInit+0x104>)
 8003946:	f002 f823 	bl	8005990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800394a:	230a      	movs	r3, #10
 800394c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800394e:	230b      	movs	r3, #11
 8003950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003956:	f107 0314 	add.w	r3, r7, #20
 800395a:	4619      	mov	r1, r3
 800395c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003960:	f002 f816 	bl	8005990 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003964:	4b1a      	ldr	r3, [pc, #104]	@ (80039d0 <HAL_ADC_MspInit+0x108>)
 8003966:	4a1b      	ldr	r2, [pc, #108]	@ (80039d4 <HAL_ADC_MspInit+0x10c>)
 8003968:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800396a:	4b19      	ldr	r3, [pc, #100]	@ (80039d0 <HAL_ADC_MspInit+0x108>)
 800396c:	2205      	movs	r2, #5
 800396e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003970:	4b17      	ldr	r3, [pc, #92]	@ (80039d0 <HAL_ADC_MspInit+0x108>)
 8003972:	2200      	movs	r2, #0
 8003974:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003976:	4b16      	ldr	r3, [pc, #88]	@ (80039d0 <HAL_ADC_MspInit+0x108>)
 8003978:	2200      	movs	r2, #0
 800397a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800397c:	4b14      	ldr	r3, [pc, #80]	@ (80039d0 <HAL_ADC_MspInit+0x108>)
 800397e:	2280      	movs	r2, #128	@ 0x80
 8003980:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003982:	4b13      	ldr	r3, [pc, #76]	@ (80039d0 <HAL_ADC_MspInit+0x108>)
 8003984:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003988:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800398a:	4b11      	ldr	r3, [pc, #68]	@ (80039d0 <HAL_ADC_MspInit+0x108>)
 800398c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003990:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003992:	4b0f      	ldr	r3, [pc, #60]	@ (80039d0 <HAL_ADC_MspInit+0x108>)
 8003994:	2220      	movs	r2, #32
 8003996:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003998:	4b0d      	ldr	r3, [pc, #52]	@ (80039d0 <HAL_ADC_MspInit+0x108>)
 800399a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800399e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80039a0:	480b      	ldr	r0, [pc, #44]	@ (80039d0 <HAL_ADC_MspInit+0x108>)
 80039a2:	f001 fd83 	bl	80054ac <HAL_DMA_Init>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 80039ac:	f7ff ff62 	bl	8003874 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a07      	ldr	r2, [pc, #28]	@ (80039d0 <HAL_ADC_MspInit+0x108>)
 80039b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80039b6:	4a06      	ldr	r2, [pc, #24]	@ (80039d0 <HAL_ADC_MspInit+0x108>)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80039bc:	bf00      	nop
 80039be:	3728      	adds	r7, #40	@ 0x28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	50040000 	.word	0x50040000
 80039c8:	40021000 	.word	0x40021000
 80039cc:	48000800 	.word	0x48000800
 80039d0:	200000fc 	.word	0x200000fc
 80039d4:	40020008 	.word	0x40020008

080039d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b0b0      	sub	sp, #192	@ 0xc0
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	60da      	str	r2, [r3, #12]
 80039ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039f0:	f107 0318 	add.w	r3, r7, #24
 80039f4:	2294      	movs	r2, #148	@ 0x94
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f008 fee5 	bl	800c7c8 <memset>
  if(huart->Instance==LPUART1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a44      	ldr	r2, [pc, #272]	@ (8003b14 <HAL_UART_MspInit+0x13c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d13e      	bne.n	8003a86 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003a08:	2320      	movs	r3, #32
 8003a0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a10:	f107 0318 	add.w	r3, r7, #24
 8003a14:	4618      	mov	r0, r3
 8003a16:	f003 f929 	bl	8006c6c <HAL_RCCEx_PeriphCLKConfig>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003a20:	f7ff ff28 	bl	8003874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003a24:	4b3c      	ldr	r3, [pc, #240]	@ (8003b18 <HAL_UART_MspInit+0x140>)
 8003a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a28:	4a3b      	ldr	r2, [pc, #236]	@ (8003b18 <HAL_UART_MspInit+0x140>)
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003a30:	4b39      	ldr	r3, [pc, #228]	@ (8003b18 <HAL_UART_MspInit+0x140>)
 8003a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a3c:	4b36      	ldr	r3, [pc, #216]	@ (8003b18 <HAL_UART_MspInit+0x140>)
 8003a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a40:	4a35      	ldr	r2, [pc, #212]	@ (8003b18 <HAL_UART_MspInit+0x140>)
 8003a42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a48:	4b33      	ldr	r3, [pc, #204]	@ (8003b18 <HAL_UART_MspInit+0x140>)
 8003a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8003a54:	f002 fa22 	bl	8005e9c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003a58:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a60:	2302      	movs	r3, #2
 8003a62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003a72:	2308      	movs	r3, #8
 8003a74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a78:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4827      	ldr	r0, [pc, #156]	@ (8003b1c <HAL_UART_MspInit+0x144>)
 8003a80:	f001 ff86 	bl	8005990 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003a84:	e042      	b.n	8003b0c <HAL_UART_MspInit+0x134>
  else if(huart->Instance==USART1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a25      	ldr	r2, [pc, #148]	@ (8003b20 <HAL_UART_MspInit+0x148>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d13d      	bne.n	8003b0c <HAL_UART_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a90:	2301      	movs	r3, #1
 8003a92:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a94:	2300      	movs	r3, #0
 8003a96:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a98:	f107 0318 	add.w	r3, r7, #24
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f003 f8e5 	bl	8006c6c <HAL_RCCEx_PeriphCLKConfig>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8003aa8:	f7ff fee4 	bl	8003874 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003aac:	4b1a      	ldr	r3, [pc, #104]	@ (8003b18 <HAL_UART_MspInit+0x140>)
 8003aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab0:	4a19      	ldr	r2, [pc, #100]	@ (8003b18 <HAL_UART_MspInit+0x140>)
 8003ab2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ab6:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ab8:	4b17      	ldr	r3, [pc, #92]	@ (8003b18 <HAL_UART_MspInit+0x140>)
 8003aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003abc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ac4:	4b14      	ldr	r3, [pc, #80]	@ (8003b18 <HAL_UART_MspInit+0x140>)
 8003ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac8:	4a13      	ldr	r2, [pc, #76]	@ (8003b18 <HAL_UART_MspInit+0x140>)
 8003aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ace:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ad0:	4b11      	ldr	r3, [pc, #68]	@ (8003b18 <HAL_UART_MspInit+0x140>)
 8003ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8003adc:	f002 f9de 	bl	8005e9c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ae0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af4:	2303      	movs	r3, #3
 8003af6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003afa:	2307      	movs	r3, #7
 8003afc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b00:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003b04:	4619      	mov	r1, r3
 8003b06:	4805      	ldr	r0, [pc, #20]	@ (8003b1c <HAL_UART_MspInit+0x144>)
 8003b08:	f001 ff42 	bl	8005990 <HAL_GPIO_Init>
}
 8003b0c:	bf00      	nop
 8003b0e:	37c0      	adds	r7, #192	@ 0xc0
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40008000 	.word	0x40008000
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	48001800 	.word	0x48001800
 8003b20:	40013800 	.word	0x40013800

08003b24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	@ 0x28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b2c:	f107 0314 	add.w	r3, r7, #20
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	609a      	str	r2, [r3, #8]
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a17      	ldr	r2, [pc, #92]	@ (8003ba0 <HAL_SPI_MspInit+0x7c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d128      	bne.n	8003b98 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b46:	4b17      	ldr	r3, [pc, #92]	@ (8003ba4 <HAL_SPI_MspInit+0x80>)
 8003b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b4a:	4a16      	ldr	r2, [pc, #88]	@ (8003ba4 <HAL_SPI_MspInit+0x80>)
 8003b4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b50:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b52:	4b14      	ldr	r3, [pc, #80]	@ (8003ba4 <HAL_SPI_MspInit+0x80>)
 8003b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b5e:	4b11      	ldr	r3, [pc, #68]	@ (8003ba4 <HAL_SPI_MspInit+0x80>)
 8003b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b62:	4a10      	ldr	r2, [pc, #64]	@ (8003ba4 <HAL_SPI_MspInit+0x80>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba4 <HAL_SPI_MspInit+0x80>)
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003b76:	23a0      	movs	r3, #160	@ 0xa0
 8003b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b82:	2303      	movs	r3, #3
 8003b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b86:	2305      	movs	r3, #5
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b8a:	f107 0314 	add.w	r3, r7, #20
 8003b8e:	4619      	mov	r1, r3
 8003b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b94:	f001 fefc 	bl	8005990 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b98:	bf00      	nop
 8003b9a:	3728      	adds	r7, #40	@ 0x28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40013000 	.word	0x40013000
 8003ba4:	40021000 	.word	0x40021000

08003ba8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	@ 0x28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb0:	f107 0314 	add.w	r3, r7, #20
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	60da      	str	r2, [r3, #12]
 8003bbe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c44 <HAL_TIM_Base_MspInit+0x9c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d138      	bne.n	8003c3c <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bca:	4b1f      	ldr	r3, [pc, #124]	@ (8003c48 <HAL_TIM_Base_MspInit+0xa0>)
 8003bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bce:	4a1e      	ldr	r2, [pc, #120]	@ (8003c48 <HAL_TIM_Base_MspInit+0xa0>)
 8003bd0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003bd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c48 <HAL_TIM_Base_MspInit+0xa0>)
 8003bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003be2:	4b19      	ldr	r3, [pc, #100]	@ (8003c48 <HAL_TIM_Base_MspInit+0xa0>)
 8003be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be6:	4a18      	ldr	r2, [pc, #96]	@ (8003c48 <HAL_TIM_Base_MspInit+0xa0>)
 8003be8:	f043 0310 	orr.w	r3, r3, #16
 8003bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bee:	4b16      	ldr	r3, [pc, #88]	@ (8003c48 <HAL_TIM_Base_MspInit+0xa0>)
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003bfa:	2380      	movs	r3, #128	@ 0x80
 8003bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c06:	2300      	movs	r3, #0
 8003c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c0e:	f107 0314 	add.w	r3, r7, #20
 8003c12:	4619      	mov	r1, r3
 8003c14:	480d      	ldr	r0, [pc, #52]	@ (8003c4c <HAL_TIM_Base_MspInit+0xa4>)
 8003c16:	f001 febb 	bl	8005990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003c1a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c20:	2302      	movs	r3, #2
 8003c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c30:	f107 0314 	add.w	r3, r7, #20
 8003c34:	4619      	mov	r1, r3
 8003c36:	4805      	ldr	r0, [pc, #20]	@ (8003c4c <HAL_TIM_Base_MspInit+0xa4>)
 8003c38:	f001 feaa 	bl	8005990 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003c3c:	bf00      	nop
 8003c3e:	3728      	adds	r7, #40	@ 0x28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40012c00 	.word	0x40012c00
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	48001000 	.word	0x48001000

08003c50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08a      	sub	sp, #40	@ 0x28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c58:	f107 0314 	add.w	r3, r7, #20
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	605a      	str	r2, [r3, #4]
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	60da      	str	r2, [r3, #12]
 8003c66:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM4)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a20      	ldr	r2, [pc, #128]	@ (8003cf0 <HAL_TIM_PWM_MspInit+0xa0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d128      	bne.n	8003cc4 <HAL_TIM_PWM_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c72:	4b20      	ldr	r3, [pc, #128]	@ (8003cf4 <HAL_TIM_PWM_MspInit+0xa4>)
 8003c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c76:	4a1f      	ldr	r2, [pc, #124]	@ (8003cf4 <HAL_TIM_PWM_MspInit+0xa4>)
 8003c78:	f043 0304 	orr.w	r3, r3, #4
 8003c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf4 <HAL_TIM_PWM_MspInit+0xa4>)
 8003c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf4 <HAL_TIM_PWM_MspInit+0xa4>)
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c8e:	4a19      	ldr	r2, [pc, #100]	@ (8003cf4 <HAL_TIM_PWM_MspInit+0xa4>)
 8003c90:	f043 0310 	orr.w	r3, r3, #16
 8003c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c96:	4b17      	ldr	r3, [pc, #92]	@ (8003cf4 <HAL_TIM_PWM_MspInit+0xa4>)
 8003c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cb6:	f107 0314 	add.w	r3, r7, #20
 8003cba:	4619      	mov	r1, r3
 8003cbc:	480e      	ldr	r0, [pc, #56]	@ (8003cf8 <HAL_TIM_PWM_MspInit+0xa8>)
 8003cbe:	f001 fe67 	bl	8005990 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003cc2:	e010      	b.n	8003ce6 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM5)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8003cfc <HAL_TIM_PWM_MspInit+0xac>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d10b      	bne.n	8003ce6 <HAL_TIM_PWM_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003cce:	4b09      	ldr	r3, [pc, #36]	@ (8003cf4 <HAL_TIM_PWM_MspInit+0xa4>)
 8003cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd2:	4a08      	ldr	r2, [pc, #32]	@ (8003cf4 <HAL_TIM_PWM_MspInit+0xa4>)
 8003cd4:	f043 0308 	orr.w	r3, r3, #8
 8003cd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cda:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <HAL_TIM_PWM_MspInit+0xa4>)
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
}
 8003ce6:	bf00      	nop
 8003ce8:	3728      	adds	r7, #40	@ 0x28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40000800 	.word	0x40000800
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	48001000 	.word	0x48001000
 8003cfc:	40000c00 	.word	0x40000c00

08003d00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08a      	sub	sp, #40	@ 0x28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d08:	f107 0314 	add.w	r3, r7, #20
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	60da      	str	r2, [r3, #12]
 8003d16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a34      	ldr	r2, [pc, #208]	@ (8003df0 <HAL_TIM_MspPostInit+0xf0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d11d      	bne.n	8003d5e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d22:	4b34      	ldr	r3, [pc, #208]	@ (8003df4 <HAL_TIM_MspPostInit+0xf4>)
 8003d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d26:	4a33      	ldr	r2, [pc, #204]	@ (8003df4 <HAL_TIM_MspPostInit+0xf4>)
 8003d28:	f043 0310 	orr.w	r3, r3, #16
 8003d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d2e:	4b31      	ldr	r3, [pc, #196]	@ (8003df4 <HAL_TIM_MspPostInit+0xf4>)
 8003d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003d3a:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8003d3e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d40:	2302      	movs	r3, #2
 8003d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d50:	f107 0314 	add.w	r3, r7, #20
 8003d54:	4619      	mov	r1, r3
 8003d56:	4828      	ldr	r0, [pc, #160]	@ (8003df8 <HAL_TIM_MspPostInit+0xf8>)
 8003d58:	f001 fe1a 	bl	8005990 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003d5c:	e044      	b.n	8003de8 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a26      	ldr	r2, [pc, #152]	@ (8003dfc <HAL_TIM_MspPostInit+0xfc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d11d      	bne.n	8003da4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d68:	4b22      	ldr	r3, [pc, #136]	@ (8003df4 <HAL_TIM_MspPostInit+0xf4>)
 8003d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d6c:	4a21      	ldr	r2, [pc, #132]	@ (8003df4 <HAL_TIM_MspPostInit+0xf4>)
 8003d6e:	f043 0308 	orr.w	r3, r3, #8
 8003d72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d74:	4b1f      	ldr	r3, [pc, #124]	@ (8003df4 <HAL_TIM_MspPostInit+0xf4>)
 8003d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003d80:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8003d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d86:	2302      	movs	r3, #2
 8003d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d92:	2302      	movs	r3, #2
 8003d94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d96:	f107 0314 	add.w	r3, r7, #20
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4818      	ldr	r0, [pc, #96]	@ (8003e00 <HAL_TIM_MspPostInit+0x100>)
 8003d9e:	f001 fdf7 	bl	8005990 <HAL_GPIO_Init>
}
 8003da2:	e021      	b.n	8003de8 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM5)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a16      	ldr	r2, [pc, #88]	@ (8003e04 <HAL_TIM_MspPostInit+0x104>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d11c      	bne.n	8003de8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003dae:	4b11      	ldr	r3, [pc, #68]	@ (8003df4 <HAL_TIM_MspPostInit+0xf4>)
 8003db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db2:	4a10      	ldr	r2, [pc, #64]	@ (8003df4 <HAL_TIM_MspPostInit+0xf4>)
 8003db4:	f043 0320 	orr.w	r3, r3, #32
 8003db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dba:	4b0e      	ldr	r3, [pc, #56]	@ (8003df4 <HAL_TIM_MspPostInit+0xf4>)
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	60bb      	str	r3, [r7, #8]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8003dc6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ddc:	f107 0314 	add.w	r3, r7, #20
 8003de0:	4619      	mov	r1, r3
 8003de2:	4809      	ldr	r0, [pc, #36]	@ (8003e08 <HAL_TIM_MspPostInit+0x108>)
 8003de4:	f001 fdd4 	bl	8005990 <HAL_GPIO_Init>
}
 8003de8:	bf00      	nop
 8003dea:	3728      	adds	r7, #40	@ 0x28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40012c00 	.word	0x40012c00
 8003df4:	40021000 	.word	0x40021000
 8003df8:	48001000 	.word	0x48001000
 8003dfc:	40000800 	.word	0x40000800
 8003e00:	48000c00 	.word	0x48000c00
 8003e04:	40000c00 	.word	0x40000c00
 8003e08:	48001400 	.word	0x48001400

08003e0c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1d      	ldr	r2, [pc, #116]	@ (8003e90 <HAL_SAI_MspInit+0x84>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d134      	bne.n	8003e88 <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8003e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8003e94 <HAL_SAI_MspInit+0x88>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10b      	bne.n	8003e3e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003e26:	4b1c      	ldr	r3, [pc, #112]	@ (8003e98 <HAL_SAI_MspInit+0x8c>)
 8003e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8003e98 <HAL_SAI_MspInit+0x8c>)
 8003e2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e30:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e32:	4b19      	ldr	r3, [pc, #100]	@ (8003e98 <HAL_SAI_MspInit+0x8c>)
 8003e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8003e3e:	4b15      	ldr	r3, [pc, #84]	@ (8003e94 <HAL_SAI_MspInit+0x88>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3301      	adds	r3, #1
 8003e44:	4a13      	ldr	r2, [pc, #76]	@ (8003e94 <HAL_SAI_MspInit+0x88>)
 8003e46:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PF7     ------> SAI1_MCLK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8003e48:	237c      	movs	r3, #124	@ 0x7c
 8003e4a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003e58:	230d      	movs	r3, #13
 8003e5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e5c:	f107 030c 	add.w	r3, r7, #12
 8003e60:	4619      	mov	r1, r3
 8003e62:	480e      	ldr	r0, [pc, #56]	@ (8003e9c <HAL_SAI_MspInit+0x90>)
 8003e64:	f001 fd94 	bl	8005990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003e68:	2380      	movs	r3, #128	@ 0x80
 8003e6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003e78:	230d      	movs	r3, #13
 8003e7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e7c:	f107 030c 	add.w	r3, r7, #12
 8003e80:	4619      	mov	r1, r3
 8003e82:	4807      	ldr	r0, [pc, #28]	@ (8003ea0 <HAL_SAI_MspInit+0x94>)
 8003e84:	f001 fd84 	bl	8005990 <HAL_GPIO_Init>

    }
}
 8003e88:	bf00      	nop
 8003e8a:	3720      	adds	r7, #32
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40015404 	.word	0x40015404
 8003e94:	20000490 	.word	0x20000490
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	48001000 	.word	0x48001000
 8003ea0:	48001400 	.word	0x48001400

08003ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ea8:	bf00      	nop
 8003eaa:	e7fd      	b.n	8003ea8 <NMI_Handler+0x4>

08003eac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eb0:	bf00      	nop
 8003eb2:	e7fd      	b.n	8003eb0 <HardFault_Handler+0x4>

08003eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eb8:	bf00      	nop
 8003eba:	e7fd      	b.n	8003eb8 <MemManage_Handler+0x4>

08003ebc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ec0:	bf00      	nop
 8003ec2:	e7fd      	b.n	8003ec0 <BusFault_Handler+0x4>

08003ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ec8:	bf00      	nop
 8003eca:	e7fd      	b.n	8003ec8 <UsageFault_Handler+0x4>

08003ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003eec:	bf00      	nop
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003efa:	f000 f8b3 	bl	8004064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f08:	4802      	ldr	r0, [pc, #8]	@ (8003f14 <DMA1_Channel1_IRQHandler+0x10>)
 8003f0a:	f001 fbf2 	bl	80056f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	200000fc 	.word	0x200000fc

08003f18 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	for (int i = 0; i < 1000000; i++);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	607b      	str	r3, [r7, #4]
 8003f22:	e002      	b.n	8003f2a <EXTI9_5_IRQHandler+0x12>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3301      	adds	r3, #1
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a04      	ldr	r2, [pc, #16]	@ (8003f40 <EXTI9_5_IRQHandler+0x28>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	ddf8      	ble.n	8003f24 <EXTI9_5_IRQHandler+0xc>
	//HAL_Delay(250);
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003f32:	2040      	movs	r0, #64	@ 0x40
 8003f34:	f001 fed6 	bl	8005ce4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	000f423f 	.word	0x000f423f

08003f44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003f48:	4b06      	ldr	r3, [pc, #24]	@ (8003f64 <SystemInit+0x20>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4e:	4a05      	ldr	r2, [pc, #20]	@ (8003f64 <SystemInit+0x20>)
 8003f50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003f58:	bf00      	nop
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003f68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003fa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f6c:	f7ff ffea 	bl	8003f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f70:	480c      	ldr	r0, [pc, #48]	@ (8003fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f72:	490d      	ldr	r1, [pc, #52]	@ (8003fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f74:	4a0d      	ldr	r2, [pc, #52]	@ (8003fac <LoopForever+0xe>)
  movs r3, #0
 8003f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f78:	e002      	b.n	8003f80 <LoopCopyDataInit>

08003f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f7e:	3304      	adds	r3, #4

08003f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f84:	d3f9      	bcc.n	8003f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f86:	4a0a      	ldr	r2, [pc, #40]	@ (8003fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f88:	4c0a      	ldr	r4, [pc, #40]	@ (8003fb4 <LoopForever+0x16>)
  movs r3, #0
 8003f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f8c:	e001      	b.n	8003f92 <LoopFillZerobss>

08003f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f90:	3204      	adds	r2, #4

08003f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f94:	d3fb      	bcc.n	8003f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f96:	f008 fc25 	bl	800c7e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f9a:	f7fd fe3d 	bl	8001c18 <main>

08003f9e <LoopForever>:

LoopForever:
    b LoopForever
 8003f9e:	e7fe      	b.n	8003f9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003fa0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fa8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003fac:	08022b28 	.word	0x08022b28
  ldr r2, =_sbss
 8003fb0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003fb4:	200005d0 	.word	0x200005d0

08003fb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003fb8:	e7fe      	b.n	8003fb8 <ADC1_IRQHandler>

08003fba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fc4:	2003      	movs	r0, #3
 8003fc6:	f001 fa2f 	bl	8005428 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fca:	2000      	movs	r0, #0
 8003fcc:	f000 f80e 	bl	8003fec <HAL_InitTick>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	71fb      	strb	r3, [r7, #7]
 8003fda:	e001      	b.n	8003fe0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fdc:	f7ff fc50 	bl	8003880 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003ff8:	4b17      	ldr	r3, [pc, #92]	@ (8004058 <HAL_InitTick+0x6c>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d023      	beq.n	8004048 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004000:	4b16      	ldr	r3, [pc, #88]	@ (800405c <HAL_InitTick+0x70>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4b14      	ldr	r3, [pc, #80]	@ (8004058 <HAL_InitTick+0x6c>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	4619      	mov	r1, r3
 800400a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800400e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004012:	fbb2 f3f3 	udiv	r3, r2, r3
 8004016:	4618      	mov	r0, r3
 8004018:	f001 fa3b 	bl	8005492 <HAL_SYSTICK_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10f      	bne.n	8004042 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b0f      	cmp	r3, #15
 8004026:	d809      	bhi.n	800403c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004028:	2200      	movs	r2, #0
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	f04f 30ff 	mov.w	r0, #4294967295
 8004030:	f001 fa05 	bl	800543e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004034:	4a0a      	ldr	r2, [pc, #40]	@ (8004060 <HAL_InitTick+0x74>)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e007      	b.n	800404c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	e004      	b.n	800404c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	73fb      	strb	r3, [r7, #15]
 8004046:	e001      	b.n	800404c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20000010 	.word	0x20000010
 800405c:	20000008 	.word	0x20000008
 8004060:	2000000c 	.word	0x2000000c

08004064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004068:	4b06      	ldr	r3, [pc, #24]	@ (8004084 <HAL_IncTick+0x20>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	4b06      	ldr	r3, [pc, #24]	@ (8004088 <HAL_IncTick+0x24>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4413      	add	r3, r2
 8004074:	4a04      	ldr	r2, [pc, #16]	@ (8004088 <HAL_IncTick+0x24>)
 8004076:	6013      	str	r3, [r2, #0]
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000010 	.word	0x20000010
 8004088:	20000494 	.word	0x20000494

0800408c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  return uwTick;
 8004090:	4b03      	ldr	r3, [pc, #12]	@ (80040a0 <HAL_GetTick+0x14>)
 8004092:	681b      	ldr	r3, [r3, #0]
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	20000494 	.word	0x20000494

080040a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040ac:	f7ff ffee 	bl	800408c <HAL_GetTick>
 80040b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040bc:	d005      	beq.n	80040ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80040be:	4b0a      	ldr	r3, [pc, #40]	@ (80040e8 <HAL_Delay+0x44>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040ca:	bf00      	nop
 80040cc:	f7ff ffde 	bl	800408c <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d8f7      	bhi.n	80040cc <HAL_Delay+0x28>
  {
  }
}
 80040dc:	bf00      	nop
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000010 	.word	0x20000010

080040ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	609a      	str	r2, [r3, #8]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	609a      	str	r2, [r3, #8]
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3360      	adds	r3, #96	@ 0x60
 8004166:	461a      	mov	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4b08      	ldr	r3, [pc, #32]	@ (8004198 <LL_ADC_SetOffset+0x44>)
 8004176:	4013      	ands	r3, r2
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	4313      	orrs	r3, r2
 8004184:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800418c:	bf00      	nop
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	03fff000 	.word	0x03fff000

0800419c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3360      	adds	r3, #96	@ 0x60
 80041aa:	461a      	mov	r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3360      	adds	r3, #96	@ 0x60
 80041d8:	461a      	mov	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	431a      	orrs	r2, r3
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	615a      	str	r2, [r3, #20]
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800424a:	b480      	push	{r7}
 800424c:	b087      	sub	sp, #28
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3330      	adds	r3, #48	@ 0x30
 800425a:	461a      	mov	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	0a1b      	lsrs	r3, r3, #8
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	4413      	add	r3, r2
 8004268:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f003 031f 	and.w	r3, r3, #31
 8004274:	211f      	movs	r1, #31
 8004276:	fa01 f303 	lsl.w	r3, r1, r3
 800427a:	43db      	mvns	r3, r3
 800427c:	401a      	ands	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	0e9b      	lsrs	r3, r3, #26
 8004282:	f003 011f 	and.w	r1, r3, #31
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f003 031f 	and.w	r3, r3, #31
 800428c:	fa01 f303 	lsl.w	r3, r1, r3
 8004290:	431a      	orrs	r2, r3
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b087      	sub	sp, #28
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3314      	adds	r3, #20
 80042b2:	461a      	mov	r2, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	0e5b      	lsrs	r3, r3, #25
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	4413      	add	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	0d1b      	lsrs	r3, r3, #20
 80042ca:	f003 031f 	and.w	r3, r3, #31
 80042ce:	2107      	movs	r1, #7
 80042d0:	fa01 f303 	lsl.w	r3, r1, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	401a      	ands	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	0d1b      	lsrs	r3, r3, #20
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	fa01 f303 	lsl.w	r3, r1, r3
 80042e6:	431a      	orrs	r2, r3
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80042ec:	bf00      	nop
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004310:	43db      	mvns	r3, r3
 8004312:	401a      	ands	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f003 0318 	and.w	r3, r3, #24
 800431a:	4908      	ldr	r1, [pc, #32]	@ (800433c <LL_ADC_SetChannelSingleDiff+0x44>)
 800431c:	40d9      	lsrs	r1, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	400b      	ands	r3, r1
 8004322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004326:	431a      	orrs	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800432e:	bf00      	nop
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	0007ffff 	.word	0x0007ffff

08004340 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004350:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6093      	str	r3, [r2, #8]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004378:	d101      	bne.n	800437e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800439c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043c8:	d101      	bne.n	80043ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043f0:	f043 0201 	orr.w	r2, r3, #1
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <LL_ADC_IsEnabled+0x18>
 8004418:	2301      	movs	r3, #1
 800441a:	e000      	b.n	800441e <LL_ADC_IsEnabled+0x1a>
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800443a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800443e:	f043 0204 	orr.w	r2, r3, #4
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b04      	cmp	r3, #4
 8004464:	d101      	bne.n	800446a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b08      	cmp	r3, #8
 800448a:	d101      	bne.n	8004490 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e129      	b.n	800470e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d109      	bne.n	80044dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff f9fd 	bl	80038c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff ff3f 	bl	8004364 <LL_ADC_IsDeepPowerDownEnabled>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d004      	beq.n	80044f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff ff25 	bl	8004340 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff ff5a 	bl	80043b4 <LL_ADC_IsInternalRegulatorEnabled>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d115      	bne.n	8004532 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff ff3e 	bl	800438c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004510:	4b81      	ldr	r3, [pc, #516]	@ (8004718 <HAL_ADC_Init+0x278>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	099b      	lsrs	r3, r3, #6
 8004516:	4a81      	ldr	r2, [pc, #516]	@ (800471c <HAL_ADC_Init+0x27c>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	099b      	lsrs	r3, r3, #6
 800451e:	3301      	adds	r3, #1
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004524:	e002      	b.n	800452c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3b01      	subs	r3, #1
 800452a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f9      	bne.n	8004526 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff ff3c 	bl	80043b4 <LL_ADC_IsInternalRegulatorEnabled>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10d      	bne.n	800455e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004546:	f043 0210 	orr.w	r2, r3, #16
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004552:	f043 0201 	orr.w	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff ff75 	bl	8004452 <LL_ADC_REG_IsConversionOngoing>
 8004568:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	2b00      	cmp	r3, #0
 8004574:	f040 80c2 	bne.w	80046fc <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2b00      	cmp	r3, #0
 800457c:	f040 80be 	bne.w	80046fc <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004584:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004588:	f043 0202 	orr.w	r2, r3, #2
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff ff35 	bl	8004404 <LL_ADC_IsEnabled>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045a0:	485f      	ldr	r0, [pc, #380]	@ (8004720 <HAL_ADC_Init+0x280>)
 80045a2:	f7ff ff2f 	bl	8004404 <LL_ADC_IsEnabled>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d105      	bne.n	80045b8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	4619      	mov	r1, r3
 80045b2:	485c      	ldr	r0, [pc, #368]	@ (8004724 <HAL_ADC_Init+0x284>)
 80045b4:	f7ff fd9a 	bl	80040ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	7e5b      	ldrb	r3, [r3, #25]
 80045bc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045c2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80045c8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80045ce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045d6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d106      	bne.n	80045f4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ea:	3b01      	subs	r3, #1
 80045ec:	045b      	lsls	r3, r3, #17
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d009      	beq.n	8004610 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004600:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004608:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4313      	orrs	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	4b44      	ldr	r3, [pc, #272]	@ (8004728 <HAL_ADC_Init+0x288>)
 8004618:	4013      	ands	r3, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6812      	ldr	r2, [r2, #0]
 800461e:	69b9      	ldr	r1, [r7, #24]
 8004620:	430b      	orrs	r3, r1
 8004622:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff ff25 	bl	8004478 <LL_ADC_INJ_IsConversionOngoing>
 800462e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d140      	bne.n	80046b8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d13d      	bne.n	80046b8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	7e1b      	ldrb	r3, [r3, #24]
 8004644:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004646:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800464e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004650:	4313      	orrs	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800465e:	f023 0306 	bic.w	r3, r3, #6
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6812      	ldr	r2, [r2, #0]
 8004666:	69b9      	ldr	r1, [r7, #24]
 8004668:	430b      	orrs	r3, r1
 800466a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004672:	2b01      	cmp	r3, #1
 8004674:	d118      	bne.n	80046a8 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004680:	f023 0304 	bic.w	r3, r3, #4
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800468c:	4311      	orrs	r1, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004692:	4311      	orrs	r1, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004698:	430a      	orrs	r2, r1
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f042 0201 	orr.w	r2, r2, #1
 80046a4:	611a      	str	r2, [r3, #16]
 80046a6:	e007      	b.n	80046b8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0201 	bic.w	r2, r2, #1
 80046b6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d10c      	bne.n	80046da <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c6:	f023 010f 	bic.w	r1, r3, #15
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	1e5a      	subs	r2, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80046d8:	e007      	b.n	80046ea <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 020f 	bic.w	r2, r2, #15
 80046e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ee:	f023 0303 	bic.w	r3, r3, #3
 80046f2:	f043 0201 	orr.w	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80046fa:	e007      	b.n	800470c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004700:	f043 0210 	orr.w	r2, r3, #16
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800470c:	7ffb      	ldrb	r3, [r7, #31]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3720      	adds	r7, #32
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000008 	.word	0x20000008
 800471c:	053e2d63 	.word	0x053e2d63
 8004720:	50040000 	.word	0x50040000
 8004724:	50040300 	.word	0x50040300
 8004728:	fff0c007 	.word	0xfff0c007

0800472c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff fe88 	bl	8004452 <LL_ADC_REG_IsConversionOngoing>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d167      	bne.n	8004818 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_ADC_Start_DMA+0x2a>
 8004752:	2302      	movs	r3, #2
 8004754:	e063      	b.n	800481e <HAL_ADC_Start_DMA+0xf2>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 fc78 	bl	8005054 <ADC_Enable>
 8004764:	4603      	mov	r3, r0
 8004766:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004768:	7dfb      	ldrb	r3, [r7, #23]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d14f      	bne.n	800480e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004772:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004776:	f023 0301 	bic.w	r3, r3, #1
 800477a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004786:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d006      	beq.n	800479c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004792:	f023 0206 	bic.w	r2, r3, #6
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	65da      	str	r2, [r3, #92]	@ 0x5c
 800479a:	e002      	b.n	80047a2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a6:	4a20      	ldr	r2, [pc, #128]	@ (8004828 <HAL_ADC_Start_DMA+0xfc>)
 80047a8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047ae:	4a1f      	ldr	r2, [pc, #124]	@ (800482c <HAL_ADC_Start_DMA+0x100>)
 80047b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004830 <HAL_ADC_Start_DMA+0x104>)
 80047b8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	221c      	movs	r2, #28
 80047c0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 0210 	orr.w	r2, r2, #16
 80047d8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0201 	orr.w	r2, r2, #1
 80047e8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3340      	adds	r3, #64	@ 0x40
 80047f4:	4619      	mov	r1, r3
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f000 feff 	bl	80055fc <HAL_DMA_Start_IT>
 80047fe:	4603      	mov	r3, r0
 8004800:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fe0f 	bl	800442a <LL_ADC_REG_StartConversion>
 800480c:	e006      	b.n	800481c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004816:	e001      	b.n	800481c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004818:	2302      	movs	r3, #2
 800481a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800481c:	7dfb      	ldrb	r3, [r7, #23]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	08005161 	.word	0x08005161
 800482c:	08005239 	.word	0x08005239
 8004830:	08005255 	.word	0x08005255

08004834 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b0b6      	sub	sp, #216	@ 0xd8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800486c:	2300      	movs	r3, #0
 800486e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <HAL_ADC_ConfigChannel+0x22>
 800487a:	2302      	movs	r3, #2
 800487c:	e3d5      	b.n	800502a <HAL_ADC_ConfigChannel+0x7ce>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fde1 	bl	8004452 <LL_ADC_REG_IsConversionOngoing>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	f040 83ba 	bne.w	800500c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b05      	cmp	r3, #5
 80048a6:	d824      	bhi.n	80048f2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	3b02      	subs	r3, #2
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d81b      	bhi.n	80048ea <HAL_ADC_ConfigChannel+0x8e>
 80048b2:	a201      	add	r2, pc, #4	@ (adr r2, 80048b8 <HAL_ADC_ConfigChannel+0x5c>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080048c9 	.word	0x080048c9
 80048bc:	080048d1 	.word	0x080048d1
 80048c0:	080048d9 	.word	0x080048d9
 80048c4:	080048e1 	.word	0x080048e1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80048c8:	230c      	movs	r3, #12
 80048ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80048ce:	e010      	b.n	80048f2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80048d0:	2312      	movs	r3, #18
 80048d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80048d6:	e00c      	b.n	80048f2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80048d8:	2318      	movs	r3, #24
 80048da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80048de:	e008      	b.n	80048f2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80048e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80048e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80048e8:	e003      	b.n	80048f2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80048ea:	2306      	movs	r3, #6
 80048ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80048f0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004900:	f7ff fca3 	bl	800424a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff fda2 	bl	8004452 <LL_ADC_REG_IsConversionOngoing>
 800490e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff fdae 	bl	8004478 <LL_ADC_INJ_IsConversionOngoing>
 800491c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004920:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004924:	2b00      	cmp	r3, #0
 8004926:	f040 81bf 	bne.w	8004ca8 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800492a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800492e:	2b00      	cmp	r3, #0
 8004930:	f040 81ba 	bne.w	8004ca8 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800493c:	d10f      	bne.n	800495e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2200      	movs	r2, #0
 8004948:	4619      	mov	r1, r3
 800494a:	f7ff fcaa 	bl	80042a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff fc51 	bl	80041fe <LL_ADC_SetSamplingTimeCommonConfig>
 800495c:	e00e      	b.n	800497c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6819      	ldr	r1, [r3, #0]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	461a      	mov	r2, r3
 800496c:	f7ff fc99 	bl	80042a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2100      	movs	r1, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff fc41 	bl	80041fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	695a      	ldr	r2, [r3, #20]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	08db      	lsrs	r3, r3, #3
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b04      	cmp	r3, #4
 800499c:	d00a      	beq.n	80049b4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6919      	ldr	r1, [r3, #16]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049ae:	f7ff fbd1 	bl	8004154 <LL_ADC_SetOffset>
 80049b2:	e179      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2100      	movs	r1, #0
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fbee 	bl	800419c <LL_ADC_GetOffsetChannel>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10a      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x184>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2100      	movs	r1, #0
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fbe3 	bl	800419c <LL_ADC_GetOffsetChannel>
 80049d6:	4603      	mov	r3, r0
 80049d8:	0e9b      	lsrs	r3, r3, #26
 80049da:	f003 021f 	and.w	r2, r3, #31
 80049de:	e01e      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x1c2>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2100      	movs	r1, #0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fbd8 	bl	800419c <LL_ADC_GetOffsetChannel>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80049f6:	fa93 f3a3 	rbit	r3, r3
 80049fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004a02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004a06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8004a0e:	2320      	movs	r3, #32
 8004a10:	e004      	b.n	8004a1c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8004a12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004a16:	fab3 f383 	clz	r3, r3
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d105      	bne.n	8004a36 <HAL_ADC_ConfigChannel+0x1da>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	0e9b      	lsrs	r3, r3, #26
 8004a30:	f003 031f 	and.w	r3, r3, #31
 8004a34:	e018      	b.n	8004a68 <HAL_ADC_ConfigChannel+0x20c>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a42:	fa93 f3a3 	rbit	r3, r3
 8004a46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004a4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004a52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8004a5a:	2320      	movs	r3, #32
 8004a5c:	e004      	b.n	8004a68 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8004a5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004a62:	fab3 f383 	clz	r3, r3
 8004a66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d106      	bne.n	8004a7a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2200      	movs	r2, #0
 8004a72:	2100      	movs	r1, #0
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff fba7 	bl	80041c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2101      	movs	r1, #1
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff fb8b 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <HAL_ADC_ConfigChannel+0x24a>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2101      	movs	r1, #1
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff fb80 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	0e9b      	lsrs	r3, r3, #26
 8004aa0:	f003 021f 	and.w	r2, r3, #31
 8004aa4:	e01e      	b.n	8004ae4 <HAL_ADC_ConfigChannel+0x288>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2101      	movs	r1, #1
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff fb75 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004abc:	fa93 f3a3 	rbit	r3, r3
 8004ac0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004acc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8004ad4:	2320      	movs	r3, #32
 8004ad6:	e004      	b.n	8004ae2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004ad8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004adc:	fab3 f383 	clz	r3, r3
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d105      	bne.n	8004afc <HAL_ADC_ConfigChannel+0x2a0>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	0e9b      	lsrs	r3, r3, #26
 8004af6:	f003 031f 	and.w	r3, r3, #31
 8004afa:	e018      	b.n	8004b2e <HAL_ADC_ConfigChannel+0x2d2>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b08:	fa93 f3a3 	rbit	r3, r3
 8004b0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004b10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8004b20:	2320      	movs	r3, #32
 8004b22:	e004      	b.n	8004b2e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8004b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b28:	fab3 f383 	clz	r3, r3
 8004b2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d106      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2200      	movs	r2, #0
 8004b38:	2101      	movs	r1, #1
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff fb44 	bl	80041c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2102      	movs	r1, #2
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff fb28 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10a      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0x310>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2102      	movs	r1, #2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff fb1d 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004b62:	4603      	mov	r3, r0
 8004b64:	0e9b      	lsrs	r3, r3, #26
 8004b66:	f003 021f 	and.w	r2, r3, #31
 8004b6a:	e01e      	b.n	8004baa <HAL_ADC_ConfigChannel+0x34e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2102      	movs	r1, #2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff fb12 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b82:	fa93 f3a3 	rbit	r3, r3
 8004b86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004b8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8004b9a:	2320      	movs	r3, #32
 8004b9c:	e004      	b.n	8004ba8 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8004b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ba2:	fab3 f383 	clz	r3, r3
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d105      	bne.n	8004bc2 <HAL_ADC_ConfigChannel+0x366>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	0e9b      	lsrs	r3, r3, #26
 8004bbc:	f003 031f 	and.w	r3, r3, #31
 8004bc0:	e014      	b.n	8004bec <HAL_ADC_ConfigChannel+0x390>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bca:	fa93 f3a3 	rbit	r3, r3
 8004bce:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004bd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bd2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004bd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8004bde:	2320      	movs	r3, #32
 8004be0:	e004      	b.n	8004bec <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8004be2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004be6:	fab3 f383 	clz	r3, r3
 8004bea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d106      	bne.n	8004bfe <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2102      	movs	r1, #2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff fae5 	bl	80041c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2103      	movs	r1, #3
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff fac9 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <HAL_ADC_ConfigChannel+0x3ce>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2103      	movs	r1, #3
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff fabe 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004c20:	4603      	mov	r3, r0
 8004c22:	0e9b      	lsrs	r3, r3, #26
 8004c24:	f003 021f 	and.w	r2, r3, #31
 8004c28:	e017      	b.n	8004c5a <HAL_ADC_ConfigChannel+0x3fe>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2103      	movs	r1, #3
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff fab3 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004c36:	4603      	mov	r3, r0
 8004c38:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c3c:	fa93 f3a3 	rbit	r3, r3
 8004c40:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c44:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004c46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8004c4c:	2320      	movs	r3, #32
 8004c4e:	e003      	b.n	8004c58 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8004c50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c52:	fab3 f383 	clz	r3, r3
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d105      	bne.n	8004c72 <HAL_ADC_ConfigChannel+0x416>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	0e9b      	lsrs	r3, r3, #26
 8004c6c:	f003 031f 	and.w	r3, r3, #31
 8004c70:	e011      	b.n	8004c96 <HAL_ADC_ConfigChannel+0x43a>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c7a:	fa93 f3a3 	rbit	r3, r3
 8004c7e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004c80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c82:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004c84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8004c8a:	2320      	movs	r3, #32
 8004c8c:	e003      	b.n	8004c96 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8004c8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c90:	fab3 f383 	clz	r3, r3
 8004c94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d106      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2103      	movs	r1, #3
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff fa90 	bl	80041c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff fba9 	bl	8004404 <LL_ADC_IsEnabled>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f040 813f 	bne.w	8004f38 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6818      	ldr	r0, [r3, #0]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	6819      	ldr	r1, [r3, #0]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	f7ff fb16 	bl	80042f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	4a8e      	ldr	r2, [pc, #568]	@ (8004f0c <HAL_ADC_ConfigChannel+0x6b0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	f040 8130 	bne.w	8004f38 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10b      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0x4a4>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	0e9b      	lsrs	r3, r3, #26
 8004cee:	3301      	adds	r3, #1
 8004cf0:	f003 031f 	and.w	r3, r3, #31
 8004cf4:	2b09      	cmp	r3, #9
 8004cf6:	bf94      	ite	ls
 8004cf8:	2301      	movls	r3, #1
 8004cfa:	2300      	movhi	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	e019      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x4d8>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d08:	fa93 f3a3 	rbit	r3, r3
 8004d0c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004d12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004d18:	2320      	movs	r3, #32
 8004d1a:	e003      	b.n	8004d24 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004d1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d1e:	fab3 f383 	clz	r3, r3
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	3301      	adds	r3, #1
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	2b09      	cmp	r3, #9
 8004d2c:	bf94      	ite	ls
 8004d2e:	2301      	movls	r3, #1
 8004d30:	2300      	movhi	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d079      	beq.n	8004e2c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d107      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0x4f8>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	0e9b      	lsrs	r3, r3, #26
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	069b      	lsls	r3, r3, #26
 8004d4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d52:	e015      	b.n	8004d80 <HAL_ADC_ConfigChannel+0x524>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d5c:	fa93 f3a3 	rbit	r3, r3
 8004d60:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004d62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d64:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8004d6c:	2320      	movs	r3, #32
 8004d6e:	e003      	b.n	8004d78 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004d70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d72:	fab3 f383 	clz	r3, r3
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	3301      	adds	r3, #1
 8004d7a:	069b      	lsls	r3, r3, #26
 8004d7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d109      	bne.n	8004da0 <HAL_ADC_ConfigChannel+0x544>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	0e9b      	lsrs	r3, r3, #26
 8004d92:	3301      	adds	r3, #1
 8004d94:	f003 031f 	and.w	r3, r3, #31
 8004d98:	2101      	movs	r1, #1
 8004d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9e:	e017      	b.n	8004dd0 <HAL_ADC_ConfigChannel+0x574>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004da8:	fa93 f3a3 	rbit	r3, r3
 8004dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004db0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004db2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004db8:	2320      	movs	r3, #32
 8004dba:	e003      	b.n	8004dc4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dbe:	fab3 f383 	clz	r3, r3
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	f003 031f 	and.w	r3, r3, #31
 8004dca:	2101      	movs	r1, #1
 8004dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd0:	ea42 0103 	orr.w	r1, r2, r3
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10a      	bne.n	8004df6 <HAL_ADC_ConfigChannel+0x59a>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	0e9b      	lsrs	r3, r3, #26
 8004de6:	3301      	adds	r3, #1
 8004de8:	f003 021f 	and.w	r2, r3, #31
 8004dec:	4613      	mov	r3, r2
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	4413      	add	r3, r2
 8004df2:	051b      	lsls	r3, r3, #20
 8004df4:	e018      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x5cc>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dfe:	fa93 f3a3 	rbit	r3, r3
 8004e02:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e06:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004e0e:	2320      	movs	r3, #32
 8004e10:	e003      	b.n	8004e1a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8004e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e14:	fab3 f383 	clz	r3, r3
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	f003 021f 	and.w	r2, r3, #31
 8004e20:	4613      	mov	r3, r2
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	4413      	add	r3, r2
 8004e26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	e080      	b.n	8004f2e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d107      	bne.n	8004e48 <HAL_ADC_ConfigChannel+0x5ec>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	0e9b      	lsrs	r3, r3, #26
 8004e3e:	3301      	adds	r3, #1
 8004e40:	069b      	lsls	r3, r3, #26
 8004e42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e46:	e015      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x618>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e50:	fa93 f3a3 	rbit	r3, r3
 8004e54:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004e60:	2320      	movs	r3, #32
 8004e62:	e003      	b.n	8004e6c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8004e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e66:	fab3 f383 	clz	r3, r3
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	069b      	lsls	r3, r3, #26
 8004e70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d109      	bne.n	8004e94 <HAL_ADC_ConfigChannel+0x638>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	0e9b      	lsrs	r3, r3, #26
 8004e86:	3301      	adds	r3, #1
 8004e88:	f003 031f 	and.w	r3, r3, #31
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e92:	e017      	b.n	8004ec4 <HAL_ADC_ConfigChannel+0x668>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	fa93 f3a3 	rbit	r3, r3
 8004ea0:	61bb      	str	r3, [r7, #24]
  return result;
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004eac:	2320      	movs	r3, #32
 8004eae:	e003      	b.n	8004eb8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	fab3 f383 	clz	r3, r3
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	3301      	adds	r3, #1
 8004eba:	f003 031f 	and.w	r3, r3, #31
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec4:	ea42 0103 	orr.w	r1, r2, r3
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10d      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x694>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	0e9b      	lsrs	r3, r3, #26
 8004eda:	3301      	adds	r3, #1
 8004edc:	f003 021f 	and.w	r2, r3, #31
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3b1e      	subs	r3, #30
 8004ee8:	051b      	lsls	r3, r3, #20
 8004eea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004eee:	e01d      	b.n	8004f2c <HAL_ADC_ConfigChannel+0x6d0>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	fa93 f3a3 	rbit	r3, r3
 8004efc:	60fb      	str	r3, [r7, #12]
  return result;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d103      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004f08:	2320      	movs	r3, #32
 8004f0a:	e005      	b.n	8004f18 <HAL_ADC_ConfigChannel+0x6bc>
 8004f0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	fab3 f383 	clz	r3, r3
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	3301      	adds	r3, #1
 8004f1a:	f003 021f 	and.w	r2, r3, #31
 8004f1e:	4613      	mov	r3, r2
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	4413      	add	r3, r2
 8004f24:	3b1e      	subs	r3, #30
 8004f26:	051b      	lsls	r3, r3, #20
 8004f28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f2c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f32:	4619      	mov	r1, r3
 8004f34:	f7ff f9b5 	bl	80042a2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4b3d      	ldr	r3, [pc, #244]	@ (8005034 <HAL_ADC_ConfigChannel+0x7d8>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d06c      	beq.n	800501e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f44:	483c      	ldr	r0, [pc, #240]	@ (8005038 <HAL_ADC_ConfigChannel+0x7dc>)
 8004f46:	f7ff f8f7 	bl	8004138 <LL_ADC_GetCommonPathInternalCh>
 8004f4a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a3a      	ldr	r2, [pc, #232]	@ (800503c <HAL_ADC_ConfigChannel+0x7e0>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d127      	bne.n	8004fa8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d121      	bne.n	8004fa8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a35      	ldr	r2, [pc, #212]	@ (8005040 <HAL_ADC_ConfigChannel+0x7e4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d157      	bne.n	800501e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f76:	4619      	mov	r1, r3
 8004f78:	482f      	ldr	r0, [pc, #188]	@ (8005038 <HAL_ADC_ConfigChannel+0x7dc>)
 8004f7a:	f7ff f8ca 	bl	8004112 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f7e:	4b31      	ldr	r3, [pc, #196]	@ (8005044 <HAL_ADC_ConfigChannel+0x7e8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	099b      	lsrs	r3, r3, #6
 8004f84:	4a30      	ldr	r2, [pc, #192]	@ (8005048 <HAL_ADC_ConfigChannel+0x7ec>)
 8004f86:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8a:	099b      	lsrs	r3, r3, #6
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	4613      	mov	r3, r2
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004f98:	e002      	b.n	8004fa0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f9      	bne.n	8004f9a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fa6:	e03a      	b.n	800501e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a27      	ldr	r2, [pc, #156]	@ (800504c <HAL_ADC_ConfigChannel+0x7f0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d113      	bne.n	8004fda <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004fb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10d      	bne.n	8004fda <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8005040 <HAL_ADC_ConfigChannel+0x7e4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d12a      	bne.n	800501e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4819      	ldr	r0, [pc, #100]	@ (8005038 <HAL_ADC_ConfigChannel+0x7dc>)
 8004fd4:	f7ff f89d 	bl	8004112 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fd8:	e021      	b.n	800501e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1c      	ldr	r2, [pc, #112]	@ (8005050 <HAL_ADC_ConfigChannel+0x7f4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d11c      	bne.n	800501e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fe4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fe8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d116      	bne.n	800501e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a12      	ldr	r2, [pc, #72]	@ (8005040 <HAL_ADC_ConfigChannel+0x7e4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d111      	bne.n	800501e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ffa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ffe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005002:	4619      	mov	r1, r3
 8005004:	480c      	ldr	r0, [pc, #48]	@ (8005038 <HAL_ADC_ConfigChannel+0x7dc>)
 8005006:	f7ff f884 	bl	8004112 <LL_ADC_SetCommonPathInternalCh>
 800500a:	e008      	b.n	800501e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005010:	f043 0220 	orr.w	r2, r3, #32
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8005026:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800502a:	4618      	mov	r0, r3
 800502c:	37d8      	adds	r7, #216	@ 0xd8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	80080000 	.word	0x80080000
 8005038:	50040300 	.word	0x50040300
 800503c:	c7520000 	.word	0xc7520000
 8005040:	50040000 	.word	0x50040000
 8005044:	20000008 	.word	0x20000008
 8005048:	053e2d63 	.word	0x053e2d63
 800504c:	cb840000 	.word	0xcb840000
 8005050:	80000001 	.word	0x80000001

08005054 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800505c:	2300      	movs	r3, #0
 800505e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff f9cd 	bl	8004404 <LL_ADC_IsEnabled>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d169      	bne.n	8005144 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	4b36      	ldr	r3, [pc, #216]	@ (8005150 <ADC_Enable+0xfc>)
 8005078:	4013      	ands	r3, r2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00d      	beq.n	800509a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005082:	f043 0210 	orr.w	r2, r3, #16
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800508e:	f043 0201 	orr.w	r2, r3, #1
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e055      	b.n	8005146 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff f99c 	bl	80043dc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80050a4:	482b      	ldr	r0, [pc, #172]	@ (8005154 <ADC_Enable+0x100>)
 80050a6:	f7ff f847 	bl	8004138 <LL_ADC_GetCommonPathInternalCh>
 80050aa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80050ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d013      	beq.n	80050dc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80050b4:	4b28      	ldr	r3, [pc, #160]	@ (8005158 <ADC_Enable+0x104>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	099b      	lsrs	r3, r3, #6
 80050ba:	4a28      	ldr	r2, [pc, #160]	@ (800515c <ADC_Enable+0x108>)
 80050bc:	fba2 2303 	umull	r2, r3, r2, r3
 80050c0:	099b      	lsrs	r3, r3, #6
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	4613      	mov	r3, r2
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	4413      	add	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80050ce:	e002      	b.n	80050d6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1f9      	bne.n	80050d0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80050dc:	f7fe ffd6 	bl	800408c <HAL_GetTick>
 80050e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050e2:	e028      	b.n	8005136 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7ff f98b 	bl	8004404 <LL_ADC_IsEnabled>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d104      	bne.n	80050fe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff f96f 	bl	80043dc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80050fe:	f7fe ffc5 	bl	800408c <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d914      	bls.n	8005136 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b01      	cmp	r3, #1
 8005118:	d00d      	beq.n	8005136 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800511e:	f043 0210 	orr.w	r2, r3, #16
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800512a:	f043 0201 	orr.w	r2, r3, #1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e007      	b.n	8005146 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b01      	cmp	r3, #1
 8005142:	d1cf      	bne.n	80050e4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	8000003f 	.word	0x8000003f
 8005154:	50040300 	.word	0x50040300
 8005158:	20000008 	.word	0x20000008
 800515c:	053e2d63 	.word	0x053e2d63

08005160 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005172:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005176:	2b00      	cmp	r3, #0
 8005178:	d14b      	bne.n	8005212 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b00      	cmp	r3, #0
 8005192:	d021      	beq.n	80051d8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff f843 	bl	8004224 <LL_ADC_REG_IsTriggerSourceSWStart>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d032      	beq.n	800520a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d12b      	bne.n	800520a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d11f      	bne.n	800520a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ce:	f043 0201 	orr.w	r2, r3, #1
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80051d6:	e018      	b.n	800520a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d111      	bne.n	800520a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d105      	bne.n	800520a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005202:	f043 0201 	orr.w	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f7fc f9a4 	bl	8001558 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005210:	e00e      	b.n	8005230 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f7ff fb12 	bl	8004848 <HAL_ADC_ErrorCallback>
}
 8005224:	e004      	b.n	8005230 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800522a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	4798      	blx	r3
}
 8005230:	bf00      	nop
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005244:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f7ff faf4 	bl	8004834 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800524c:	bf00      	nop
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005260:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005266:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005272:	f043 0204 	orr.w	r2, r3, #4
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f7ff fae4 	bl	8004848 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005280:	bf00      	nop
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005298:	4b0c      	ldr	r3, [pc, #48]	@ (80052cc <__NVIC_SetPriorityGrouping+0x44>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80052a4:	4013      	ands	r3, r2
 80052a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80052b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052ba:	4a04      	ldr	r2, [pc, #16]	@ (80052cc <__NVIC_SetPriorityGrouping+0x44>)
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	60d3      	str	r3, [r2, #12]
}
 80052c0:	bf00      	nop
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	e000ed00 	.word	0xe000ed00

080052d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052d4:	4b04      	ldr	r3, [pc, #16]	@ (80052e8 <__NVIC_GetPriorityGrouping+0x18>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	0a1b      	lsrs	r3, r3, #8
 80052da:	f003 0307 	and.w	r3, r3, #7
}
 80052de:	4618      	mov	r0, r3
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	e000ed00 	.word	0xe000ed00

080052ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	4603      	mov	r3, r0
 80052f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	db0b      	blt.n	8005316 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	f003 021f 	and.w	r2, r3, #31
 8005304:	4907      	ldr	r1, [pc, #28]	@ (8005324 <__NVIC_EnableIRQ+0x38>)
 8005306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	2001      	movs	r0, #1
 800530e:	fa00 f202 	lsl.w	r2, r0, r2
 8005312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	e000e100 	.word	0xe000e100

08005328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	6039      	str	r1, [r7, #0]
 8005332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005338:	2b00      	cmp	r3, #0
 800533a:	db0a      	blt.n	8005352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	b2da      	uxtb	r2, r3
 8005340:	490c      	ldr	r1, [pc, #48]	@ (8005374 <__NVIC_SetPriority+0x4c>)
 8005342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005346:	0112      	lsls	r2, r2, #4
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	440b      	add	r3, r1
 800534c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005350:	e00a      	b.n	8005368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	b2da      	uxtb	r2, r3
 8005356:	4908      	ldr	r1, [pc, #32]	@ (8005378 <__NVIC_SetPriority+0x50>)
 8005358:	79fb      	ldrb	r3, [r7, #7]
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	3b04      	subs	r3, #4
 8005360:	0112      	lsls	r2, r2, #4
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	440b      	add	r3, r1
 8005366:	761a      	strb	r2, [r3, #24]
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	e000e100 	.word	0xe000e100
 8005378:	e000ed00 	.word	0xe000ed00

0800537c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800537c:	b480      	push	{r7}
 800537e:	b089      	sub	sp, #36	@ 0x24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	f1c3 0307 	rsb	r3, r3, #7
 8005396:	2b04      	cmp	r3, #4
 8005398:	bf28      	it	cs
 800539a:	2304      	movcs	r3, #4
 800539c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	3304      	adds	r3, #4
 80053a2:	2b06      	cmp	r3, #6
 80053a4:	d902      	bls.n	80053ac <NVIC_EncodePriority+0x30>
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	3b03      	subs	r3, #3
 80053aa:	e000      	b.n	80053ae <NVIC_EncodePriority+0x32>
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053b0:	f04f 32ff 	mov.w	r2, #4294967295
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	43da      	mvns	r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	401a      	ands	r2, r3
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053c4:	f04f 31ff 	mov.w	r1, #4294967295
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	fa01 f303 	lsl.w	r3, r1, r3
 80053ce:	43d9      	mvns	r1, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053d4:	4313      	orrs	r3, r2
         );
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3724      	adds	r7, #36	@ 0x24
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
	...

080053e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053f4:	d301      	bcc.n	80053fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053f6:	2301      	movs	r3, #1
 80053f8:	e00f      	b.n	800541a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005424 <SysTick_Config+0x40>)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	3b01      	subs	r3, #1
 8005400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005402:	210f      	movs	r1, #15
 8005404:	f04f 30ff 	mov.w	r0, #4294967295
 8005408:	f7ff ff8e 	bl	8005328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800540c:	4b05      	ldr	r3, [pc, #20]	@ (8005424 <SysTick_Config+0x40>)
 800540e:	2200      	movs	r2, #0
 8005410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005412:	4b04      	ldr	r3, [pc, #16]	@ (8005424 <SysTick_Config+0x40>)
 8005414:	2207      	movs	r2, #7
 8005416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	e000e010 	.word	0xe000e010

08005428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff ff29 	bl	8005288 <__NVIC_SetPriorityGrouping>
}
 8005436:	bf00      	nop
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b086      	sub	sp, #24
 8005442:	af00      	add	r7, sp, #0
 8005444:	4603      	mov	r3, r0
 8005446:	60b9      	str	r1, [r7, #8]
 8005448:	607a      	str	r2, [r7, #4]
 800544a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800544c:	2300      	movs	r3, #0
 800544e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005450:	f7ff ff3e 	bl	80052d0 <__NVIC_GetPriorityGrouping>
 8005454:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	6978      	ldr	r0, [r7, #20]
 800545c:	f7ff ff8e 	bl	800537c <NVIC_EncodePriority>
 8005460:	4602      	mov	r2, r0
 8005462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005466:	4611      	mov	r1, r2
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff ff5d 	bl	8005328 <__NVIC_SetPriority>
}
 800546e:	bf00      	nop
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b082      	sub	sp, #8
 800547a:	af00      	add	r7, sp, #0
 800547c:	4603      	mov	r3, r0
 800547e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff ff31 	bl	80052ec <__NVIC_EnableIRQ>
}
 800548a:	bf00      	nop
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff ffa2 	bl	80053e4 <SysTick_Config>
 80054a0:	4603      	mov	r3, r0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e08d      	b.n	80055da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	4b47      	ldr	r3, [pc, #284]	@ (80055e4 <HAL_DMA_Init+0x138>)
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d80f      	bhi.n	80054ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	4b45      	ldr	r3, [pc, #276]	@ (80055e8 <HAL_DMA_Init+0x13c>)
 80054d2:	4413      	add	r3, r2
 80054d4:	4a45      	ldr	r2, [pc, #276]	@ (80055ec <HAL_DMA_Init+0x140>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	091b      	lsrs	r3, r3, #4
 80054dc:	009a      	lsls	r2, r3, #2
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a42      	ldr	r2, [pc, #264]	@ (80055f0 <HAL_DMA_Init+0x144>)
 80054e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80054e8:	e00e      	b.n	8005508 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	4b40      	ldr	r3, [pc, #256]	@ (80055f4 <HAL_DMA_Init+0x148>)
 80054f2:	4413      	add	r3, r2
 80054f4:	4a3d      	ldr	r2, [pc, #244]	@ (80055ec <HAL_DMA_Init+0x140>)
 80054f6:	fba2 2303 	umull	r2, r3, r2, r3
 80054fa:	091b      	lsrs	r3, r3, #4
 80054fc:	009a      	lsls	r2, r3, #2
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a3c      	ldr	r2, [pc, #240]	@ (80055f8 <HAL_DMA_Init+0x14c>)
 8005506:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800551e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005522:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800552c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f9b6 	bl	80058cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005568:	d102      	bne.n	8005570 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005584:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d010      	beq.n	80055b0 <HAL_DMA_Init+0x104>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b04      	cmp	r3, #4
 8005594:	d80c      	bhi.n	80055b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f9d6 	bl	8005948 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80055ac:	605a      	str	r2, [r3, #4]
 80055ae:	e008      	b.n	80055c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40020407 	.word	0x40020407
 80055e8:	bffdfff8 	.word	0xbffdfff8
 80055ec:	cccccccd 	.word	0xcccccccd
 80055f0:	40020000 	.word	0x40020000
 80055f4:	bffdfbf8 	.word	0xbffdfbf8
 80055f8:	40020400 	.word	0x40020400

080055fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <HAL_DMA_Start_IT+0x20>
 8005618:	2302      	movs	r3, #2
 800561a:	e066      	b.n	80056ea <HAL_DMA_Start_IT+0xee>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b01      	cmp	r3, #1
 800562e:	d155      	bne.n	80056dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0201 	bic.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f8fb 	bl	8005850 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565e:	2b00      	cmp	r3, #0
 8005660:	d008      	beq.n	8005674 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 020e 	orr.w	r2, r2, #14
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	e00f      	b.n	8005694 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0204 	bic.w	r2, r2, #4
 8005682:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 020a 	orr.w	r2, r2, #10
 8005692:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d007      	beq.n	80056ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056c8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0201 	orr.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	e005      	b.n	80056e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80056e4:	2302      	movs	r3, #2
 80056e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570e:	f003 031c 	and.w	r3, r3, #28
 8005712:	2204      	movs	r2, #4
 8005714:	409a      	lsls	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4013      	ands	r3, r2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d026      	beq.n	800576c <HAL_DMA_IRQHandler+0x7a>
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	d021      	beq.n	800576c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d107      	bne.n	8005746 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0204 	bic.w	r2, r2, #4
 8005744:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574a:	f003 021c 	and.w	r2, r3, #28
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005752:	2104      	movs	r1, #4
 8005754:	fa01 f202 	lsl.w	r2, r1, r2
 8005758:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575e:	2b00      	cmp	r3, #0
 8005760:	d071      	beq.n	8005846 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800576a:	e06c      	b.n	8005846 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005770:	f003 031c 	and.w	r3, r3, #28
 8005774:	2202      	movs	r2, #2
 8005776:	409a      	lsls	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4013      	ands	r3, r2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d02e      	beq.n	80057de <HAL_DMA_IRQHandler+0xec>
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d029      	beq.n	80057de <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10b      	bne.n	80057b0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 020a 	bic.w	r2, r2, #10
 80057a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b4:	f003 021c 	and.w	r2, r3, #28
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057bc:	2102      	movs	r1, #2
 80057be:	fa01 f202 	lsl.w	r2, r1, r2
 80057c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d038      	beq.n	8005846 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80057dc:	e033      	b.n	8005846 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e2:	f003 031c 	and.w	r3, r3, #28
 80057e6:	2208      	movs	r2, #8
 80057e8:	409a      	lsls	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d02a      	beq.n	8005848 <HAL_DMA_IRQHandler+0x156>
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f003 0308 	and.w	r3, r3, #8
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d025      	beq.n	8005848 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 020e 	bic.w	r2, r2, #14
 800580a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005810:	f003 021c 	and.w	r2, r3, #28
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005818:	2101      	movs	r1, #1
 800581a:	fa01 f202 	lsl.w	r2, r1, r2
 800581e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800583a:	2b00      	cmp	r3, #0
 800583c:	d004      	beq.n	8005848 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005846:	bf00      	nop
 8005848:	bf00      	nop
}
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005866:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586c:	2b00      	cmp	r3, #0
 800586e:	d004      	beq.n	800587a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005878:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587e:	f003 021c 	and.w	r2, r3, #28
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005886:	2101      	movs	r1, #1
 8005888:	fa01 f202 	lsl.w	r2, r1, r2
 800588c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	2b10      	cmp	r3, #16
 800589c:	d108      	bne.n	80058b0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80058ae:	e007      	b.n	80058c0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	60da      	str	r2, [r3, #12]
}
 80058c0:	bf00      	nop
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	4b17      	ldr	r3, [pc, #92]	@ (8005938 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80058dc:	429a      	cmp	r2, r3
 80058de:	d80a      	bhi.n	80058f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e4:	089b      	lsrs	r3, r3, #2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058ec:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6493      	str	r3, [r2, #72]	@ 0x48
 80058f4:	e007      	b.n	8005906 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058fa:	089b      	lsrs	r3, r3, #2
 80058fc:	009a      	lsls	r2, r3, #2
 80058fe:	4b0f      	ldr	r3, [pc, #60]	@ (800593c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005900:	4413      	add	r3, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	3b08      	subs	r3, #8
 800590e:	4a0c      	ldr	r2, [pc, #48]	@ (8005940 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	091b      	lsrs	r3, r3, #4
 8005916:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a0a      	ldr	r2, [pc, #40]	@ (8005944 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800591c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f003 031f 	and.w	r3, r3, #31
 8005924:	2201      	movs	r2, #1
 8005926:	409a      	lsls	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800592c:	bf00      	nop
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	40020407 	.word	0x40020407
 800593c:	4002081c 	.word	0x4002081c
 8005940:	cccccccd 	.word	0xcccccccd
 8005944:	40020880 	.word	0x40020880

08005948 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	461a      	mov	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a08      	ldr	r2, [pc, #32]	@ (800598c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800596a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3b01      	subs	r3, #1
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	2201      	movs	r2, #1
 8005976:	409a      	lsls	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800597c:	bf00      	nop
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	1000823f 	.word	0x1000823f
 800598c:	40020940 	.word	0x40020940

08005990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800599e:	e166      	b.n	8005c6e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	2101      	movs	r1, #1
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	fa01 f303 	lsl.w	r3, r1, r3
 80059ac:	4013      	ands	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 8158 	beq.w	8005c68 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f003 0303 	and.w	r3, r3, #3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d005      	beq.n	80059d0 <HAL_GPIO_Init+0x40>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f003 0303 	and.w	r3, r3, #3
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d130      	bne.n	8005a32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	2203      	movs	r2, #3
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	43db      	mvns	r3, r3
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4013      	ands	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a06:	2201      	movs	r2, #1
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4013      	ands	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	091b      	lsrs	r3, r3, #4
 8005a1c:	f003 0201 	and.w	r2, r3, #1
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d017      	beq.n	8005a6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	2203      	movs	r2, #3
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4013      	ands	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d123      	bne.n	8005ac2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	08da      	lsrs	r2, r3, #3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3208      	adds	r2, #8
 8005a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	220f      	movs	r2, #15
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	43db      	mvns	r3, r3
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	691a      	ldr	r2, [r3, #16]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	08da      	lsrs	r2, r3, #3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3208      	adds	r2, #8
 8005abc:	6939      	ldr	r1, [r7, #16]
 8005abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	2203      	movs	r2, #3
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f003 0203 	and.w	r2, r3, #3
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 80b2 	beq.w	8005c68 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b04:	4b61      	ldr	r3, [pc, #388]	@ (8005c8c <HAL_GPIO_Init+0x2fc>)
 8005b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b08:	4a60      	ldr	r2, [pc, #384]	@ (8005c8c <HAL_GPIO_Init+0x2fc>)
 8005b0a:	f043 0301 	orr.w	r3, r3, #1
 8005b0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b10:	4b5e      	ldr	r3, [pc, #376]	@ (8005c8c <HAL_GPIO_Init+0x2fc>)
 8005b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	60bb      	str	r3, [r7, #8]
 8005b1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005b1c:	4a5c      	ldr	r2, [pc, #368]	@ (8005c90 <HAL_GPIO_Init+0x300>)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	089b      	lsrs	r3, r3, #2
 8005b22:	3302      	adds	r3, #2
 8005b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	220f      	movs	r2, #15
 8005b34:	fa02 f303 	lsl.w	r3, r2, r3
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005b46:	d02b      	beq.n	8005ba0 <HAL_GPIO_Init+0x210>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a52      	ldr	r2, [pc, #328]	@ (8005c94 <HAL_GPIO_Init+0x304>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d025      	beq.n	8005b9c <HAL_GPIO_Init+0x20c>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a51      	ldr	r2, [pc, #324]	@ (8005c98 <HAL_GPIO_Init+0x308>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d01f      	beq.n	8005b98 <HAL_GPIO_Init+0x208>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a50      	ldr	r2, [pc, #320]	@ (8005c9c <HAL_GPIO_Init+0x30c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d019      	beq.n	8005b94 <HAL_GPIO_Init+0x204>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a4f      	ldr	r2, [pc, #316]	@ (8005ca0 <HAL_GPIO_Init+0x310>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d013      	beq.n	8005b90 <HAL_GPIO_Init+0x200>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a4e      	ldr	r2, [pc, #312]	@ (8005ca4 <HAL_GPIO_Init+0x314>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d00d      	beq.n	8005b8c <HAL_GPIO_Init+0x1fc>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a4d      	ldr	r2, [pc, #308]	@ (8005ca8 <HAL_GPIO_Init+0x318>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d007      	beq.n	8005b88 <HAL_GPIO_Init+0x1f8>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a4c      	ldr	r2, [pc, #304]	@ (8005cac <HAL_GPIO_Init+0x31c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d101      	bne.n	8005b84 <HAL_GPIO_Init+0x1f4>
 8005b80:	2307      	movs	r3, #7
 8005b82:	e00e      	b.n	8005ba2 <HAL_GPIO_Init+0x212>
 8005b84:	2308      	movs	r3, #8
 8005b86:	e00c      	b.n	8005ba2 <HAL_GPIO_Init+0x212>
 8005b88:	2306      	movs	r3, #6
 8005b8a:	e00a      	b.n	8005ba2 <HAL_GPIO_Init+0x212>
 8005b8c:	2305      	movs	r3, #5
 8005b8e:	e008      	b.n	8005ba2 <HAL_GPIO_Init+0x212>
 8005b90:	2304      	movs	r3, #4
 8005b92:	e006      	b.n	8005ba2 <HAL_GPIO_Init+0x212>
 8005b94:	2303      	movs	r3, #3
 8005b96:	e004      	b.n	8005ba2 <HAL_GPIO_Init+0x212>
 8005b98:	2302      	movs	r3, #2
 8005b9a:	e002      	b.n	8005ba2 <HAL_GPIO_Init+0x212>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <HAL_GPIO_Init+0x212>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	f002 0203 	and.w	r2, r2, #3
 8005ba8:	0092      	lsls	r2, r2, #2
 8005baa:	4093      	lsls	r3, r2
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005bb2:	4937      	ldr	r1, [pc, #220]	@ (8005c90 <HAL_GPIO_Init+0x300>)
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	089b      	lsrs	r3, r3, #2
 8005bb8:	3302      	adds	r3, #2
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8005cb0 <HAL_GPIO_Init+0x320>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005be4:	4a32      	ldr	r2, [pc, #200]	@ (8005cb0 <HAL_GPIO_Init+0x320>)
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005bea:	4b31      	ldr	r3, [pc, #196]	@ (8005cb0 <HAL_GPIO_Init+0x320>)
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	43db      	mvns	r3, r3
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c0e:	4a28      	ldr	r2, [pc, #160]	@ (8005cb0 <HAL_GPIO_Init+0x320>)
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005c14:	4b26      	ldr	r3, [pc, #152]	@ (8005cb0 <HAL_GPIO_Init+0x320>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	43db      	mvns	r3, r3
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4013      	ands	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c38:	4a1d      	ldr	r2, [pc, #116]	@ (8005cb0 <HAL_GPIO_Init+0x320>)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8005cb0 <HAL_GPIO_Init+0x320>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	43db      	mvns	r3, r3
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c62:	4a13      	ldr	r2, [pc, #76]	@ (8005cb0 <HAL_GPIO_Init+0x320>)
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	fa22 f303 	lsr.w	r3, r2, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f47f ae91 	bne.w	80059a0 <HAL_GPIO_Init+0x10>
  }
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	40010000 	.word	0x40010000
 8005c94:	48000400 	.word	0x48000400
 8005c98:	48000800 	.word	0x48000800
 8005c9c:	48000c00 	.word	0x48000c00
 8005ca0:	48001000 	.word	0x48001000
 8005ca4:	48001400 	.word	0x48001400
 8005ca8:	48001800 	.word	0x48001800
 8005cac:	48001c00 	.word	0x48001c00
 8005cb0:	40010400 	.word	0x40010400

08005cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	807b      	strh	r3, [r7, #2]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005cc4:	787b      	ldrb	r3, [r7, #1]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005cca:	887a      	ldrh	r2, [r7, #2]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005cd0:	e002      	b.n	8005cd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005cd2:	887a      	ldrh	r2, [r7, #2]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	4603      	mov	r3, r0
 8005cec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005cee:	4b08      	ldr	r3, [pc, #32]	@ (8005d10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005cf0:	695a      	ldr	r2, [r3, #20]
 8005cf2:	88fb      	ldrh	r3, [r7, #6]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d006      	beq.n	8005d08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005cfa:	4a05      	ldr	r2, [pc, #20]	@ (8005d10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005cfc:	88fb      	ldrh	r3, [r7, #6]
 8005cfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d00:	88fb      	ldrh	r3, [r7, #6]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fb ff6c 	bl	8001be0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d08:	bf00      	nop
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40010400 	.word	0x40010400

08005d14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d18:	4b0d      	ldr	r3, [pc, #52]	@ (8005d50 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d24:	d102      	bne.n	8005d2c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005d26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d2a:	e00b      	b.n	8005d44 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005d2c:	4b08      	ldr	r3, [pc, #32]	@ (8005d50 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d3a:	d102      	bne.n	8005d42 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005d3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d40:	e000      	b.n	8005d44 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005d42:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40007000 	.word	0x40007000

08005d54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d141      	bne.n	8005de6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d62:	4b4b      	ldr	r3, [pc, #300]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d6e:	d131      	bne.n	8005dd4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d70:	4b47      	ldr	r3, [pc, #284]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d76:	4a46      	ldr	r2, [pc, #280]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d80:	4b43      	ldr	r3, [pc, #268]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d88:	4a41      	ldr	r2, [pc, #260]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005d90:	4b40      	ldr	r3, [pc, #256]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2232      	movs	r2, #50	@ 0x32
 8005d96:	fb02 f303 	mul.w	r3, r2, r3
 8005d9a:	4a3f      	ldr	r2, [pc, #252]	@ (8005e98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005da0:	0c9b      	lsrs	r3, r3, #18
 8005da2:	3301      	adds	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005da6:	e002      	b.n	8005dae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dae:	4b38      	ldr	r3, [pc, #224]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dba:	d102      	bne.n	8005dc2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1f2      	bne.n	8005da8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dc2:	4b33      	ldr	r3, [pc, #204]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dce:	d158      	bne.n	8005e82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e057      	b.n	8005e84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dda:	4a2d      	ldr	r2, [pc, #180]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005de0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005de4:	e04d      	b.n	8005e82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dec:	d141      	bne.n	8005e72 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005dee:	4b28      	ldr	r3, [pc, #160]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dfa:	d131      	bne.n	8005e60 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dfc:	4b24      	ldr	r3, [pc, #144]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e02:	4a23      	ldr	r2, [pc, #140]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e0c:	4b20      	ldr	r3, [pc, #128]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e14:	4a1e      	ldr	r2, [pc, #120]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2232      	movs	r2, #50	@ 0x32
 8005e22:	fb02 f303 	mul.w	r3, r2, r3
 8005e26:	4a1c      	ldr	r2, [pc, #112]	@ (8005e98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e28:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2c:	0c9b      	lsrs	r3, r3, #18
 8005e2e:	3301      	adds	r3, #1
 8005e30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e32:	e002      	b.n	8005e3a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e3a:	4b15      	ldr	r3, [pc, #84]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e46:	d102      	bne.n	8005e4e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1f2      	bne.n	8005e34 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e4e:	4b10      	ldr	r3, [pc, #64]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e5a:	d112      	bne.n	8005e82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e011      	b.n	8005e84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e60:	4b0b      	ldr	r3, [pc, #44]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e66:	4a0a      	ldr	r2, [pc, #40]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005e70:	e007      	b.n	8005e82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e72:	4b07      	ldr	r3, [pc, #28]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e7a:	4a05      	ldr	r2, [pc, #20]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e80:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	40007000 	.word	0x40007000
 8005e94:	20000008 	.word	0x20000008
 8005e98:	431bde83 	.word	0x431bde83

08005e9c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005ea0:	4b05      	ldr	r3, [pc, #20]	@ (8005eb8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	4a04      	ldr	r2, [pc, #16]	@ (8005eb8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005eaa:	6053      	str	r3, [r2, #4]
}
 8005eac:	bf00      	nop
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40007000 	.word	0x40007000

08005ebc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b088      	sub	sp, #32
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d102      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	f000 bc08 	b.w	80066e0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ed0:	4b96      	ldr	r3, [pc, #600]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 030c 	and.w	r3, r3, #12
 8005ed8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005eda:	4b94      	ldr	r3, [pc, #592]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0310 	and.w	r3, r3, #16
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 80e4 	beq.w	80060ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d007      	beq.n	8005f08 <HAL_RCC_OscConfig+0x4c>
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b0c      	cmp	r3, #12
 8005efc:	f040 808b 	bne.w	8006016 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	f040 8087 	bne.w	8006016 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f08:	4b88      	ldr	r3, [pc, #544]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <HAL_RCC_OscConfig+0x64>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e3df      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a1a      	ldr	r2, [r3, #32]
 8005f24:	4b81      	ldr	r3, [pc, #516]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0308 	and.w	r3, r3, #8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d004      	beq.n	8005f3a <HAL_RCC_OscConfig+0x7e>
 8005f30:	4b7e      	ldr	r3, [pc, #504]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f38:	e005      	b.n	8005f46 <HAL_RCC_OscConfig+0x8a>
 8005f3a:	4b7c      	ldr	r3, [pc, #496]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f40:	091b      	lsrs	r3, r3, #4
 8005f42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d223      	bcs.n	8005f92 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fdcc 	bl	8006aec <RCC_SetFlashLatencyFromMSIRange>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e3c0      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f5e:	4b73      	ldr	r3, [pc, #460]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a72      	ldr	r2, [pc, #456]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005f64:	f043 0308 	orr.w	r3, r3, #8
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	4b70      	ldr	r3, [pc, #448]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	496d      	ldr	r1, [pc, #436]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f7c:	4b6b      	ldr	r3, [pc, #428]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	4968      	ldr	r1, [pc, #416]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	604b      	str	r3, [r1, #4]
 8005f90:	e025      	b.n	8005fde <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f92:	4b66      	ldr	r3, [pc, #408]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a65      	ldr	r2, [pc, #404]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005f98:	f043 0308 	orr.w	r3, r3, #8
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	4b63      	ldr	r3, [pc, #396]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	4960      	ldr	r1, [pc, #384]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fb0:	4b5e      	ldr	r3, [pc, #376]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	021b      	lsls	r3, r3, #8
 8005fbe:	495b      	ldr	r1, [pc, #364]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d109      	bne.n	8005fde <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fd8c 	bl	8006aec <RCC_SetFlashLatencyFromMSIRange>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e380      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005fde:	f000 fcc1 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	4b51      	ldr	r3, [pc, #324]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	091b      	lsrs	r3, r3, #4
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	4950      	ldr	r1, [pc, #320]	@ (8006130 <HAL_RCC_OscConfig+0x274>)
 8005ff0:	5ccb      	ldrb	r3, [r1, r3]
 8005ff2:	f003 031f 	and.w	r3, r3, #31
 8005ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffa:	4a4e      	ldr	r2, [pc, #312]	@ (8006134 <HAL_RCC_OscConfig+0x278>)
 8005ffc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ffe:	4b4e      	ldr	r3, [pc, #312]	@ (8006138 <HAL_RCC_OscConfig+0x27c>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f7fd fff2 	bl	8003fec <HAL_InitTick>
 8006008:	4603      	mov	r3, r0
 800600a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d052      	beq.n	80060b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006012:	7bfb      	ldrb	r3, [r7, #15]
 8006014:	e364      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d032      	beq.n	8006084 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800601e:	4b43      	ldr	r3, [pc, #268]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a42      	ldr	r2, [pc, #264]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8006024:	f043 0301 	orr.w	r3, r3, #1
 8006028:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800602a:	f7fe f82f 	bl	800408c <HAL_GetTick>
 800602e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006030:	e008      	b.n	8006044 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006032:	f7fe f82b 	bl	800408c <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b02      	cmp	r3, #2
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e34d      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006044:	4b39      	ldr	r3, [pc, #228]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0f0      	beq.n	8006032 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006050:	4b36      	ldr	r3, [pc, #216]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a35      	ldr	r2, [pc, #212]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8006056:	f043 0308 	orr.w	r3, r3, #8
 800605a:	6013      	str	r3, [r2, #0]
 800605c:	4b33      	ldr	r3, [pc, #204]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	4930      	ldr	r1, [pc, #192]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 800606a:	4313      	orrs	r3, r2
 800606c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800606e:	4b2f      	ldr	r3, [pc, #188]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	492b      	ldr	r1, [pc, #172]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 800607e:	4313      	orrs	r3, r2
 8006080:	604b      	str	r3, [r1, #4]
 8006082:	e01a      	b.n	80060ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006084:	4b29      	ldr	r3, [pc, #164]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a28      	ldr	r2, [pc, #160]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 800608a:	f023 0301 	bic.w	r3, r3, #1
 800608e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006090:	f7fd fffc 	bl	800408c <HAL_GetTick>
 8006094:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006096:	e008      	b.n	80060aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006098:	f7fd fff8 	bl	800408c <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e31a      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060aa:	4b20      	ldr	r3, [pc, #128]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1f0      	bne.n	8006098 <HAL_RCC_OscConfig+0x1dc>
 80060b6:	e000      	b.n	80060ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d073      	beq.n	80061ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d005      	beq.n	80060d8 <HAL_RCC_OscConfig+0x21c>
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	2b0c      	cmp	r3, #12
 80060d0:	d10e      	bne.n	80060f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d10b      	bne.n	80060f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d8:	4b14      	ldr	r3, [pc, #80]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d063      	beq.n	80061ac <HAL_RCC_OscConfig+0x2f0>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d15f      	bne.n	80061ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e2f7      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060f8:	d106      	bne.n	8006108 <HAL_RCC_OscConfig+0x24c>
 80060fa:	4b0c      	ldr	r3, [pc, #48]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a0b      	ldr	r2, [pc, #44]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8006100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006104:	6013      	str	r3, [r2, #0]
 8006106:	e025      	b.n	8006154 <HAL_RCC_OscConfig+0x298>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006110:	d114      	bne.n	800613c <HAL_RCC_OscConfig+0x280>
 8006112:	4b06      	ldr	r3, [pc, #24]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a05      	ldr	r2, [pc, #20]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8006118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800611c:	6013      	str	r3, [r2, #0]
 800611e:	4b03      	ldr	r3, [pc, #12]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a02      	ldr	r2, [pc, #8]	@ (800612c <HAL_RCC_OscConfig+0x270>)
 8006124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	e013      	b.n	8006154 <HAL_RCC_OscConfig+0x298>
 800612c:	40021000 	.word	0x40021000
 8006130:	0800f6bc 	.word	0x0800f6bc
 8006134:	20000008 	.word	0x20000008
 8006138:	2000000c 	.word	0x2000000c
 800613c:	4ba0      	ldr	r3, [pc, #640]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a9f      	ldr	r2, [pc, #636]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 8006142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	4b9d      	ldr	r3, [pc, #628]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a9c      	ldr	r2, [pc, #624]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 800614e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d013      	beq.n	8006184 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615c:	f7fd ff96 	bl	800408c <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006162:	e008      	b.n	8006176 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006164:	f7fd ff92 	bl	800408c <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b64      	cmp	r3, #100	@ 0x64
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e2b4      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006176:	4b92      	ldr	r3, [pc, #584]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0f0      	beq.n	8006164 <HAL_RCC_OscConfig+0x2a8>
 8006182:	e014      	b.n	80061ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006184:	f7fd ff82 	bl	800408c <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800618c:	f7fd ff7e 	bl	800408c <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b64      	cmp	r3, #100	@ 0x64
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e2a0      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800619e:	4b88      	ldr	r3, [pc, #544]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f0      	bne.n	800618c <HAL_RCC_OscConfig+0x2d0>
 80061aa:	e000      	b.n	80061ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d060      	beq.n	800627c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d005      	beq.n	80061cc <HAL_RCC_OscConfig+0x310>
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	2b0c      	cmp	r3, #12
 80061c4:	d119      	bne.n	80061fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d116      	bne.n	80061fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061cc:	4b7c      	ldr	r3, [pc, #496]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <HAL_RCC_OscConfig+0x328>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e27d      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061e4:	4b76      	ldr	r3, [pc, #472]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	061b      	lsls	r3, r3, #24
 80061f2:	4973      	ldr	r1, [pc, #460]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061f8:	e040      	b.n	800627c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d023      	beq.n	800624a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006202:	4b6f      	ldr	r3, [pc, #444]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a6e      	ldr	r2, [pc, #440]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 8006208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800620c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620e:	f7fd ff3d 	bl	800408c <HAL_GetTick>
 8006212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006214:	e008      	b.n	8006228 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006216:	f7fd ff39 	bl	800408c <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d901      	bls.n	8006228 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e25b      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006228:	4b65      	ldr	r3, [pc, #404]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006230:	2b00      	cmp	r3, #0
 8006232:	d0f0      	beq.n	8006216 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006234:	4b62      	ldr	r3, [pc, #392]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	061b      	lsls	r3, r3, #24
 8006242:	495f      	ldr	r1, [pc, #380]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 8006244:	4313      	orrs	r3, r2
 8006246:	604b      	str	r3, [r1, #4]
 8006248:	e018      	b.n	800627c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800624a:	4b5d      	ldr	r3, [pc, #372]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a5c      	ldr	r2, [pc, #368]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 8006250:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006256:	f7fd ff19 	bl	800408c <HAL_GetTick>
 800625a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800625c:	e008      	b.n	8006270 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800625e:	f7fd ff15 	bl	800408c <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b02      	cmp	r3, #2
 800626a:	d901      	bls.n	8006270 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e237      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006270:	4b53      	ldr	r3, [pc, #332]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1f0      	bne.n	800625e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0308 	and.w	r3, r3, #8
 8006284:	2b00      	cmp	r3, #0
 8006286:	d03c      	beq.n	8006302 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01c      	beq.n	80062ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006290:	4b4b      	ldr	r3, [pc, #300]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 8006292:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006296:	4a4a      	ldr	r2, [pc, #296]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 8006298:	f043 0301 	orr.w	r3, r3, #1
 800629c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a0:	f7fd fef4 	bl	800408c <HAL_GetTick>
 80062a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062a6:	e008      	b.n	80062ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062a8:	f7fd fef0 	bl	800408c <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e212      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062ba:	4b41      	ldr	r3, [pc, #260]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 80062bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0ef      	beq.n	80062a8 <HAL_RCC_OscConfig+0x3ec>
 80062c8:	e01b      	b.n	8006302 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062ca:	4b3d      	ldr	r3, [pc, #244]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 80062cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062d0:	4a3b      	ldr	r2, [pc, #236]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 80062d2:	f023 0301 	bic.w	r3, r3, #1
 80062d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062da:	f7fd fed7 	bl	800408c <HAL_GetTick>
 80062de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062e0:	e008      	b.n	80062f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062e2:	f7fd fed3 	bl	800408c <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d901      	bls.n	80062f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e1f5      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062f4:	4b32      	ldr	r3, [pc, #200]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 80062f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1ef      	bne.n	80062e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0304 	and.w	r3, r3, #4
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 80a6 	beq.w	800645c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006310:	2300      	movs	r3, #0
 8006312:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006314:	4b2a      	ldr	r3, [pc, #168]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 8006316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10d      	bne.n	800633c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006320:	4b27      	ldr	r3, [pc, #156]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 8006322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006324:	4a26      	ldr	r2, [pc, #152]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 8006326:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800632a:	6593      	str	r3, [r2, #88]	@ 0x58
 800632c:	4b24      	ldr	r3, [pc, #144]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 800632e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006334:	60bb      	str	r3, [r7, #8]
 8006336:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006338:	2301      	movs	r3, #1
 800633a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800633c:	4b21      	ldr	r3, [pc, #132]	@ (80063c4 <HAL_RCC_OscConfig+0x508>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006344:	2b00      	cmp	r3, #0
 8006346:	d118      	bne.n	800637a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006348:	4b1e      	ldr	r3, [pc, #120]	@ (80063c4 <HAL_RCC_OscConfig+0x508>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1d      	ldr	r2, [pc, #116]	@ (80063c4 <HAL_RCC_OscConfig+0x508>)
 800634e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006352:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006354:	f7fd fe9a 	bl	800408c <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800635c:	f7fd fe96 	bl	800408c <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e1b8      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800636e:	4b15      	ldr	r3, [pc, #84]	@ (80063c4 <HAL_RCC_OscConfig+0x508>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0f0      	beq.n	800635c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d108      	bne.n	8006394 <HAL_RCC_OscConfig+0x4d8>
 8006382:	4b0f      	ldr	r3, [pc, #60]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 8006384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006388:	4a0d      	ldr	r2, [pc, #52]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 800638a:	f043 0301 	orr.w	r3, r3, #1
 800638e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006392:	e029      	b.n	80063e8 <HAL_RCC_OscConfig+0x52c>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	2b05      	cmp	r3, #5
 800639a:	d115      	bne.n	80063c8 <HAL_RCC_OscConfig+0x50c>
 800639c:	4b08      	ldr	r3, [pc, #32]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063a2:	4a07      	ldr	r2, [pc, #28]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 80063a4:	f043 0304 	orr.w	r3, r3, #4
 80063a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063ac:	4b04      	ldr	r3, [pc, #16]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 80063ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063b2:	4a03      	ldr	r2, [pc, #12]	@ (80063c0 <HAL_RCC_OscConfig+0x504>)
 80063b4:	f043 0301 	orr.w	r3, r3, #1
 80063b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063bc:	e014      	b.n	80063e8 <HAL_RCC_OscConfig+0x52c>
 80063be:	bf00      	nop
 80063c0:	40021000 	.word	0x40021000
 80063c4:	40007000 	.word	0x40007000
 80063c8:	4b9d      	ldr	r3, [pc, #628]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 80063ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ce:	4a9c      	ldr	r2, [pc, #624]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 80063d0:	f023 0301 	bic.w	r3, r3, #1
 80063d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063d8:	4b99      	ldr	r3, [pc, #612]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 80063da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063de:	4a98      	ldr	r2, [pc, #608]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 80063e0:	f023 0304 	bic.w	r3, r3, #4
 80063e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d016      	beq.n	800641e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f0:	f7fd fe4c 	bl	800408c <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063f6:	e00a      	b.n	800640e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f8:	f7fd fe48 	bl	800408c <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006406:	4293      	cmp	r3, r2
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e168      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800640e:	4b8c      	ldr	r3, [pc, #560]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 8006410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d0ed      	beq.n	80063f8 <HAL_RCC_OscConfig+0x53c>
 800641c:	e015      	b.n	800644a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800641e:	f7fd fe35 	bl	800408c <HAL_GetTick>
 8006422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006424:	e00a      	b.n	800643c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006426:	f7fd fe31 	bl	800408c <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006434:	4293      	cmp	r3, r2
 8006436:	d901      	bls.n	800643c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e151      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800643c:	4b80      	ldr	r3, [pc, #512]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1ed      	bne.n	8006426 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800644a:	7ffb      	ldrb	r3, [r7, #31]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d105      	bne.n	800645c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006450:	4b7b      	ldr	r3, [pc, #492]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 8006452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006454:	4a7a      	ldr	r2, [pc, #488]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 8006456:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800645a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0320 	and.w	r3, r3, #32
 8006464:	2b00      	cmp	r3, #0
 8006466:	d03c      	beq.n	80064e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	d01c      	beq.n	80064aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006470:	4b73      	ldr	r3, [pc, #460]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 8006472:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006476:	4a72      	ldr	r2, [pc, #456]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 8006478:	f043 0301 	orr.w	r3, r3, #1
 800647c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006480:	f7fd fe04 	bl	800408c <HAL_GetTick>
 8006484:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006488:	f7fd fe00 	bl	800408c <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e122      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800649a:	4b69      	ldr	r3, [pc, #420]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 800649c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d0ef      	beq.n	8006488 <HAL_RCC_OscConfig+0x5cc>
 80064a8:	e01b      	b.n	80064e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064aa:	4b65      	ldr	r3, [pc, #404]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 80064ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064b0:	4a63      	ldr	r2, [pc, #396]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 80064b2:	f023 0301 	bic.w	r3, r3, #1
 80064b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ba:	f7fd fde7 	bl	800408c <HAL_GetTick>
 80064be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064c0:	e008      	b.n	80064d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064c2:	f7fd fde3 	bl	800408c <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e105      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064d4:	4b5a      	ldr	r3, [pc, #360]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 80064d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1ef      	bne.n	80064c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 80f9 	beq.w	80066de <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	f040 80cf 	bne.w	8006694 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80064f6:	4b52      	ldr	r3, [pc, #328]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f003 0203 	and.w	r2, r3, #3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006506:	429a      	cmp	r2, r3
 8006508:	d12c      	bne.n	8006564 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006514:	3b01      	subs	r3, #1
 8006516:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006518:	429a      	cmp	r2, r3
 800651a:	d123      	bne.n	8006564 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006526:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006528:	429a      	cmp	r2, r3
 800652a:	d11b      	bne.n	8006564 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006536:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006538:	429a      	cmp	r2, r3
 800653a:	d113      	bne.n	8006564 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006546:	085b      	lsrs	r3, r3, #1
 8006548:	3b01      	subs	r3, #1
 800654a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800654c:	429a      	cmp	r2, r3
 800654e:	d109      	bne.n	8006564 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800655a:	085b      	lsrs	r3, r3, #1
 800655c:	3b01      	subs	r3, #1
 800655e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006560:	429a      	cmp	r2, r3
 8006562:	d071      	beq.n	8006648 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	2b0c      	cmp	r3, #12
 8006568:	d068      	beq.n	800663c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800656a:	4b35      	ldr	r3, [pc, #212]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d105      	bne.n	8006582 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006576:	4b32      	ldr	r3, [pc, #200]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e0ac      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006586:	4b2e      	ldr	r3, [pc, #184]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a2d      	ldr	r2, [pc, #180]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 800658c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006590:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006592:	f7fd fd7b 	bl	800408c <HAL_GetTick>
 8006596:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006598:	e008      	b.n	80065ac <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800659a:	f7fd fd77 	bl	800408c <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e099      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065ac:	4b24      	ldr	r3, [pc, #144]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1f0      	bne.n	800659a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065b8:	4b21      	ldr	r3, [pc, #132]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	4b21      	ldr	r3, [pc, #132]	@ (8006644 <HAL_RCC_OscConfig+0x788>)
 80065be:	4013      	ands	r3, r2
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80065c8:	3a01      	subs	r2, #1
 80065ca:	0112      	lsls	r2, r2, #4
 80065cc:	4311      	orrs	r1, r2
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80065d2:	0212      	lsls	r2, r2, #8
 80065d4:	4311      	orrs	r1, r2
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80065da:	0852      	lsrs	r2, r2, #1
 80065dc:	3a01      	subs	r2, #1
 80065de:	0552      	lsls	r2, r2, #21
 80065e0:	4311      	orrs	r1, r2
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80065e6:	0852      	lsrs	r2, r2, #1
 80065e8:	3a01      	subs	r2, #1
 80065ea:	0652      	lsls	r2, r2, #25
 80065ec:	4311      	orrs	r1, r2
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80065f2:	06d2      	lsls	r2, r2, #27
 80065f4:	430a      	orrs	r2, r1
 80065f6:	4912      	ldr	r1, [pc, #72]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80065fc:	4b10      	ldr	r3, [pc, #64]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a0f      	ldr	r2, [pc, #60]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 8006602:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006606:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006608:	4b0d      	ldr	r3, [pc, #52]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	4a0c      	ldr	r2, [pc, #48]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 800660e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006612:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006614:	f7fd fd3a 	bl	800408c <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800661c:	f7fd fd36 	bl	800408c <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e058      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800662e:	4b04      	ldr	r3, [pc, #16]	@ (8006640 <HAL_RCC_OscConfig+0x784>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0f0      	beq.n	800661c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800663a:	e050      	b.n	80066de <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e04f      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
 8006640:	40021000 	.word	0x40021000
 8006644:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006648:	4b27      	ldr	r3, [pc, #156]	@ (80066e8 <HAL_RCC_OscConfig+0x82c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d144      	bne.n	80066de <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006654:	4b24      	ldr	r3, [pc, #144]	@ (80066e8 <HAL_RCC_OscConfig+0x82c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a23      	ldr	r2, [pc, #140]	@ (80066e8 <HAL_RCC_OscConfig+0x82c>)
 800665a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800665e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006660:	4b21      	ldr	r3, [pc, #132]	@ (80066e8 <HAL_RCC_OscConfig+0x82c>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	4a20      	ldr	r2, [pc, #128]	@ (80066e8 <HAL_RCC_OscConfig+0x82c>)
 8006666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800666a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800666c:	f7fd fd0e 	bl	800408c <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006674:	f7fd fd0a 	bl	800408c <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e02c      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006686:	4b18      	ldr	r3, [pc, #96]	@ (80066e8 <HAL_RCC_OscConfig+0x82c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0f0      	beq.n	8006674 <HAL_RCC_OscConfig+0x7b8>
 8006692:	e024      	b.n	80066de <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	2b0c      	cmp	r3, #12
 8006698:	d01f      	beq.n	80066da <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800669a:	4b13      	ldr	r3, [pc, #76]	@ (80066e8 <HAL_RCC_OscConfig+0x82c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a12      	ldr	r2, [pc, #72]	@ (80066e8 <HAL_RCC_OscConfig+0x82c>)
 80066a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a6:	f7fd fcf1 	bl	800408c <HAL_GetTick>
 80066aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066ac:	e008      	b.n	80066c0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ae:	f7fd fced 	bl	800408c <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d901      	bls.n	80066c0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e00f      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066c0:	4b09      	ldr	r3, [pc, #36]	@ (80066e8 <HAL_RCC_OscConfig+0x82c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1f0      	bne.n	80066ae <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80066cc:	4b06      	ldr	r3, [pc, #24]	@ (80066e8 <HAL_RCC_OscConfig+0x82c>)
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	4905      	ldr	r1, [pc, #20]	@ (80066e8 <HAL_RCC_OscConfig+0x82c>)
 80066d2:	4b06      	ldr	r3, [pc, #24]	@ (80066ec <HAL_RCC_OscConfig+0x830>)
 80066d4:	4013      	ands	r3, r2
 80066d6:	60cb      	str	r3, [r1, #12]
 80066d8:	e001      	b.n	80066de <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e000      	b.n	80066e0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3720      	adds	r7, #32
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40021000 	.word	0x40021000
 80066ec:	feeefffc 	.word	0xfeeefffc

080066f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80066fa:	2300      	movs	r3, #0
 80066fc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e11d      	b.n	8006944 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006708:	4b90      	ldr	r3, [pc, #576]	@ (800694c <HAL_RCC_ClockConfig+0x25c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 030f 	and.w	r3, r3, #15
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	429a      	cmp	r2, r3
 8006714:	d910      	bls.n	8006738 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006716:	4b8d      	ldr	r3, [pc, #564]	@ (800694c <HAL_RCC_ClockConfig+0x25c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f023 020f 	bic.w	r2, r3, #15
 800671e:	498b      	ldr	r1, [pc, #556]	@ (800694c <HAL_RCC_ClockConfig+0x25c>)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	4313      	orrs	r3, r2
 8006724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006726:	4b89      	ldr	r3, [pc, #548]	@ (800694c <HAL_RCC_ClockConfig+0x25c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	429a      	cmp	r2, r3
 8006732:	d001      	beq.n	8006738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e105      	b.n	8006944 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d010      	beq.n	8006766 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	4b81      	ldr	r3, [pc, #516]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006750:	429a      	cmp	r2, r3
 8006752:	d908      	bls.n	8006766 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006754:	4b7e      	ldr	r3, [pc, #504]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	497b      	ldr	r1, [pc, #492]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006762:	4313      	orrs	r3, r2
 8006764:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d079      	beq.n	8006866 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b03      	cmp	r3, #3
 8006778:	d11e      	bne.n	80067b8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800677a:	4b75      	ldr	r3, [pc, #468]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e0dc      	b.n	8006944 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800678a:	f000 fa09 	bl	8006ba0 <RCC_GetSysClockFreqFromPLLSource>
 800678e:	4603      	mov	r3, r0
 8006790:	4a70      	ldr	r2, [pc, #448]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d946      	bls.n	8006824 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006796:	4b6e      	ldr	r3, [pc, #440]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d140      	bne.n	8006824 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80067a2:	4b6b      	ldr	r3, [pc, #428]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067aa:	4a69      	ldr	r2, [pc, #420]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 80067ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80067b2:	2380      	movs	r3, #128	@ 0x80
 80067b4:	617b      	str	r3, [r7, #20]
 80067b6:	e035      	b.n	8006824 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d107      	bne.n	80067d0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067c0:	4b63      	ldr	r3, [pc, #396]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d115      	bne.n	80067f8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e0b9      	b.n	8006944 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d107      	bne.n	80067e8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80067d8:	4b5d      	ldr	r3, [pc, #372]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d109      	bne.n	80067f8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e0ad      	b.n	8006944 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067e8:	4b59      	ldr	r3, [pc, #356]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e0a5      	b.n	8006944 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80067f8:	f000 f8b4 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 80067fc:	4603      	mov	r3, r0
 80067fe:	4a55      	ldr	r2, [pc, #340]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d90f      	bls.n	8006824 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006804:	4b52      	ldr	r3, [pc, #328]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d109      	bne.n	8006824 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006810:	4b4f      	ldr	r3, [pc, #316]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006818:	4a4d      	ldr	r2, [pc, #308]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 800681a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800681e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006820:	2380      	movs	r3, #128	@ 0x80
 8006822:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006824:	4b4a      	ldr	r3, [pc, #296]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f023 0203 	bic.w	r2, r3, #3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	4947      	ldr	r1, [pc, #284]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006832:	4313      	orrs	r3, r2
 8006834:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006836:	f7fd fc29 	bl	800408c <HAL_GetTick>
 800683a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800683c:	e00a      	b.n	8006854 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800683e:	f7fd fc25 	bl	800408c <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800684c:	4293      	cmp	r3, r2
 800684e:	d901      	bls.n	8006854 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e077      	b.n	8006944 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006854:	4b3e      	ldr	r3, [pc, #248]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f003 020c 	and.w	r2, r3, #12
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	429a      	cmp	r2, r3
 8006864:	d1eb      	bne.n	800683e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b80      	cmp	r3, #128	@ 0x80
 800686a:	d105      	bne.n	8006878 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800686c:	4b38      	ldr	r3, [pc, #224]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	4a37      	ldr	r2, [pc, #220]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006872:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006876:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d010      	beq.n	80068a6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	4b31      	ldr	r3, [pc, #196]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006890:	429a      	cmp	r2, r3
 8006892:	d208      	bcs.n	80068a6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006894:	4b2e      	ldr	r3, [pc, #184]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	492b      	ldr	r1, [pc, #172]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068a6:	4b29      	ldr	r3, [pc, #164]	@ (800694c <HAL_RCC_ClockConfig+0x25c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d210      	bcs.n	80068d6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b4:	4b25      	ldr	r3, [pc, #148]	@ (800694c <HAL_RCC_ClockConfig+0x25c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f023 020f 	bic.w	r2, r3, #15
 80068bc:	4923      	ldr	r1, [pc, #140]	@ (800694c <HAL_RCC_ClockConfig+0x25c>)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068c4:	4b21      	ldr	r3, [pc, #132]	@ (800694c <HAL_RCC_ClockConfig+0x25c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 030f 	and.w	r3, r3, #15
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d001      	beq.n	80068d6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e036      	b.n	8006944 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d008      	beq.n	80068f4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	4918      	ldr	r1, [pc, #96]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d009      	beq.n	8006914 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006900:	4b13      	ldr	r3, [pc, #76]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	00db      	lsls	r3, r3, #3
 800690e:	4910      	ldr	r1, [pc, #64]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006910:	4313      	orrs	r3, r2
 8006912:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006914:	f000 f826 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8006918:	4602      	mov	r2, r0
 800691a:	4b0d      	ldr	r3, [pc, #52]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	091b      	lsrs	r3, r3, #4
 8006920:	f003 030f 	and.w	r3, r3, #15
 8006924:	490c      	ldr	r1, [pc, #48]	@ (8006958 <HAL_RCC_ClockConfig+0x268>)
 8006926:	5ccb      	ldrb	r3, [r1, r3]
 8006928:	f003 031f 	and.w	r3, r3, #31
 800692c:	fa22 f303 	lsr.w	r3, r2, r3
 8006930:	4a0a      	ldr	r2, [pc, #40]	@ (800695c <HAL_RCC_ClockConfig+0x26c>)
 8006932:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006934:	4b0a      	ldr	r3, [pc, #40]	@ (8006960 <HAL_RCC_ClockConfig+0x270>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4618      	mov	r0, r3
 800693a:	f7fd fb57 	bl	8003fec <HAL_InitTick>
 800693e:	4603      	mov	r3, r0
 8006940:	73fb      	strb	r3, [r7, #15]

  return status;
 8006942:	7bfb      	ldrb	r3, [r7, #15]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	40022000 	.word	0x40022000
 8006950:	40021000 	.word	0x40021000
 8006954:	04c4b400 	.word	0x04c4b400
 8006958:	0800f6bc 	.word	0x0800f6bc
 800695c:	20000008 	.word	0x20000008
 8006960:	2000000c 	.word	0x2000000c

08006964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006964:	b480      	push	{r7}
 8006966:	b089      	sub	sp, #36	@ 0x24
 8006968:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	61fb      	str	r3, [r7, #28]
 800696e:	2300      	movs	r3, #0
 8006970:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006972:	4b3e      	ldr	r3, [pc, #248]	@ (8006a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f003 030c 	and.w	r3, r3, #12
 800697a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800697c:	4b3b      	ldr	r3, [pc, #236]	@ (8006a6c <HAL_RCC_GetSysClockFreq+0x108>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f003 0303 	and.w	r3, r3, #3
 8006984:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d005      	beq.n	8006998 <HAL_RCC_GetSysClockFreq+0x34>
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2b0c      	cmp	r3, #12
 8006990:	d121      	bne.n	80069d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d11e      	bne.n	80069d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006998:	4b34      	ldr	r3, [pc, #208]	@ (8006a6c <HAL_RCC_GetSysClockFreq+0x108>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d107      	bne.n	80069b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80069a4:	4b31      	ldr	r3, [pc, #196]	@ (8006a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80069a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069aa:	0a1b      	lsrs	r3, r3, #8
 80069ac:	f003 030f 	and.w	r3, r3, #15
 80069b0:	61fb      	str	r3, [r7, #28]
 80069b2:	e005      	b.n	80069c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80069b4:	4b2d      	ldr	r3, [pc, #180]	@ (8006a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	091b      	lsrs	r3, r3, #4
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80069c0:	4a2b      	ldr	r2, [pc, #172]	@ (8006a70 <HAL_RCC_GetSysClockFreq+0x10c>)
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10d      	bne.n	80069ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069d4:	e00a      	b.n	80069ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	2b04      	cmp	r3, #4
 80069da:	d102      	bne.n	80069e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80069dc:	4b25      	ldr	r3, [pc, #148]	@ (8006a74 <HAL_RCC_GetSysClockFreq+0x110>)
 80069de:	61bb      	str	r3, [r7, #24]
 80069e0:	e004      	b.n	80069ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	2b08      	cmp	r3, #8
 80069e6:	d101      	bne.n	80069ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80069e8:	4b23      	ldr	r3, [pc, #140]	@ (8006a78 <HAL_RCC_GetSysClockFreq+0x114>)
 80069ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	2b0c      	cmp	r3, #12
 80069f0:	d134      	bne.n	8006a5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80069f2:	4b1e      	ldr	r3, [pc, #120]	@ (8006a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d003      	beq.n	8006a0a <HAL_RCC_GetSysClockFreq+0xa6>
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	d003      	beq.n	8006a10 <HAL_RCC_GetSysClockFreq+0xac>
 8006a08:	e005      	b.n	8006a16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8006a74 <HAL_RCC_GetSysClockFreq+0x110>)
 8006a0c:	617b      	str	r3, [r7, #20]
      break;
 8006a0e:	e005      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006a10:	4b19      	ldr	r3, [pc, #100]	@ (8006a78 <HAL_RCC_GetSysClockFreq+0x114>)
 8006a12:	617b      	str	r3, [r7, #20]
      break;
 8006a14:	e002      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	617b      	str	r3, [r7, #20]
      break;
 8006a1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a1c:	4b13      	ldr	r3, [pc, #76]	@ (8006a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	091b      	lsrs	r3, r3, #4
 8006a22:	f003 030f 	and.w	r3, r3, #15
 8006a26:	3301      	adds	r3, #1
 8006a28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006a2a:	4b10      	ldr	r3, [pc, #64]	@ (8006a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	0a1b      	lsrs	r3, r3, #8
 8006a30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	fb03 f202 	mul.w	r2, r3, r2
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a42:	4b0a      	ldr	r3, [pc, #40]	@ (8006a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	0e5b      	lsrs	r3, r3, #25
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006a5c:	69bb      	ldr	r3, [r7, #24]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3724      	adds	r7, #36	@ 0x24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	0800f6d4 	.word	0x0800f6d4
 8006a74:	00f42400 	.word	0x00f42400
 8006a78:	007a1200 	.word	0x007a1200

08006a7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a80:	4b03      	ldr	r3, [pc, #12]	@ (8006a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a82:	681b      	ldr	r3, [r3, #0]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	20000008 	.word	0x20000008

08006a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a98:	f7ff fff0 	bl	8006a7c <HAL_RCC_GetHCLKFreq>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	4b06      	ldr	r3, [pc, #24]	@ (8006ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	0a1b      	lsrs	r3, r3, #8
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	4904      	ldr	r1, [pc, #16]	@ (8006abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006aaa:	5ccb      	ldrb	r3, [r1, r3]
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	40021000 	.word	0x40021000
 8006abc:	0800f6cc 	.word	0x0800f6cc

08006ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006ac4:	f7ff ffda 	bl	8006a7c <HAL_RCC_GetHCLKFreq>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	4b06      	ldr	r3, [pc, #24]	@ (8006ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	0adb      	lsrs	r3, r3, #11
 8006ad0:	f003 0307 	and.w	r3, r3, #7
 8006ad4:	4904      	ldr	r1, [pc, #16]	@ (8006ae8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ad6:	5ccb      	ldrb	r3, [r1, r3]
 8006ad8:	f003 031f 	and.w	r3, r3, #31
 8006adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	40021000 	.word	0x40021000
 8006ae8:	0800f6cc 	.word	0x0800f6cc

08006aec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006af4:	2300      	movs	r3, #0
 8006af6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006af8:	4b27      	ldr	r3, [pc, #156]	@ (8006b98 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d003      	beq.n	8006b0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006b04:	f7ff f906 	bl	8005d14 <HAL_PWREx_GetVoltageRange>
 8006b08:	6178      	str	r0, [r7, #20]
 8006b0a:	e014      	b.n	8006b36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b0c:	4b22      	ldr	r3, [pc, #136]	@ (8006b98 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b10:	4a21      	ldr	r2, [pc, #132]	@ (8006b98 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b16:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b18:	4b1f      	ldr	r3, [pc, #124]	@ (8006b98 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b20:	60fb      	str	r3, [r7, #12]
 8006b22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006b24:	f7ff f8f6 	bl	8005d14 <HAL_PWREx_GetVoltageRange>
 8006b28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8006b98 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8006b98 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006b30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b34:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b3c:	d10b      	bne.n	8006b56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b80      	cmp	r3, #128	@ 0x80
 8006b42:	d913      	bls.n	8006b6c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2ba0      	cmp	r3, #160	@ 0xa0
 8006b48:	d902      	bls.n	8006b50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	613b      	str	r3, [r7, #16]
 8006b4e:	e00d      	b.n	8006b6c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b50:	2301      	movs	r3, #1
 8006b52:	613b      	str	r3, [r7, #16]
 8006b54:	e00a      	b.n	8006b6c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b5a:	d902      	bls.n	8006b62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	613b      	str	r3, [r7, #16]
 8006b60:	e004      	b.n	8006b6c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b70      	cmp	r3, #112	@ 0x70
 8006b66:	d101      	bne.n	8006b6c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b68:	2301      	movs	r3, #1
 8006b6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b9c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f023 020f 	bic.w	r2, r3, #15
 8006b74:	4909      	ldr	r1, [pc, #36]	@ (8006b9c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006b7c:	4b07      	ldr	r3, [pc, #28]	@ (8006b9c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 030f 	and.w	r3, r3, #15
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d001      	beq.n	8006b8e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e000      	b.n	8006b90 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	40021000 	.word	0x40021000
 8006b9c:	40022000 	.word	0x40022000

08006ba0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8006c5c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d00b      	beq.n	8006bce <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	d825      	bhi.n	8006c08 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d008      	beq.n	8006bd4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d11f      	bne.n	8006c08 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006bc8:	4b25      	ldr	r3, [pc, #148]	@ (8006c60 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006bca:	613b      	str	r3, [r7, #16]
    break;
 8006bcc:	e01f      	b.n	8006c0e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006bce:	4b25      	ldr	r3, [pc, #148]	@ (8006c64 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006bd0:	613b      	str	r3, [r7, #16]
    break;
 8006bd2:	e01c      	b.n	8006c0e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006bd4:	4b21      	ldr	r3, [pc, #132]	@ (8006c5c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d107      	bne.n	8006bf0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006be0:	4b1e      	ldr	r3, [pc, #120]	@ (8006c5c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006be6:	0a1b      	lsrs	r3, r3, #8
 8006be8:	f003 030f 	and.w	r3, r3, #15
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	e005      	b.n	8006bfc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8006c5c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	091b      	lsrs	r3, r3, #4
 8006bf6:	f003 030f 	and.w	r3, r3, #15
 8006bfa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8006c68 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c04:	613b      	str	r3, [r7, #16]
    break;
 8006c06:	e002      	b.n	8006c0e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	613b      	str	r3, [r7, #16]
    break;
 8006c0c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c0e:	4b13      	ldr	r3, [pc, #76]	@ (8006c5c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	091b      	lsrs	r3, r3, #4
 8006c14:	f003 030f 	and.w	r3, r3, #15
 8006c18:	3301      	adds	r3, #1
 8006c1a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c5c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	0a1b      	lsrs	r3, r3, #8
 8006c22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	fb03 f202 	mul.w	r2, r3, r2
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c32:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c34:	4b09      	ldr	r3, [pc, #36]	@ (8006c5c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	0e5b      	lsrs	r3, r3, #25
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	3301      	adds	r3, #1
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006c4e:	683b      	ldr	r3, [r7, #0]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	371c      	adds	r7, #28
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	00f42400 	.word	0x00f42400
 8006c64:	007a1200 	.word	0x007a1200
 8006c68:	0800f6d4 	.word	0x0800f6d4

08006c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c74:	2300      	movs	r3, #0
 8006c76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c78:	2300      	movs	r3, #0
 8006c7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d040      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c8c:	2b80      	cmp	r3, #128	@ 0x80
 8006c8e:	d02a      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006c90:	2b80      	cmp	r3, #128	@ 0x80
 8006c92:	d825      	bhi.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006c94:	2b60      	cmp	r3, #96	@ 0x60
 8006c96:	d026      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006c98:	2b60      	cmp	r3, #96	@ 0x60
 8006c9a:	d821      	bhi.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006c9c:	2b40      	cmp	r3, #64	@ 0x40
 8006c9e:	d006      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006ca0:	2b40      	cmp	r3, #64	@ 0x40
 8006ca2:	d81d      	bhi.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d009      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006ca8:	2b20      	cmp	r3, #32
 8006caa:	d010      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006cac:	e018      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006cae:	4b89      	ldr	r3, [pc, #548]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	4a88      	ldr	r2, [pc, #544]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cb8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006cba:	e015      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f001 fa24 	bl	8008110 <RCCEx_PLLSAI1_Config>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ccc:	e00c      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3320      	adds	r3, #32
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f001 fb0f 	bl	80082f8 <RCCEx_PLLSAI2_Config>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006cde:	e003      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	74fb      	strb	r3, [r7, #19]
      break;
 8006ce4:	e000      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006ce6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ce8:	7cfb      	ldrb	r3, [r7, #19]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10b      	bne.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cee:	4b79      	ldr	r3, [pc, #484]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006cf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cf4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cfc:	4975      	ldr	r1, [pc, #468]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006d04:	e001      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d06:	7cfb      	ldrb	r3, [r7, #19]
 8006d08:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d047      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d1e:	d030      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d24:	d82a      	bhi.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006d26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d2a:	d02a      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006d2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d30:	d824      	bhi.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006d32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d36:	d008      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d3c:	d81e      	bhi.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d46:	d010      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006d48:	e018      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006d4a:	4b62      	ldr	r3, [pc, #392]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	4a61      	ldr	r2, [pc, #388]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d54:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006d56:	e015      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f001 f9d6 	bl	8008110 <RCCEx_PLLSAI1_Config>
 8006d64:	4603      	mov	r3, r0
 8006d66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006d68:	e00c      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3320      	adds	r3, #32
 8006d6e:	2100      	movs	r1, #0
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 fac1 	bl	80082f8 <RCCEx_PLLSAI2_Config>
 8006d76:	4603      	mov	r3, r0
 8006d78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006d7a:	e003      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	74fb      	strb	r3, [r7, #19]
      break;
 8006d80:	e000      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006d82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d84:	7cfb      	ldrb	r3, [r7, #19]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10b      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006d8a:	4b52      	ldr	r3, [pc, #328]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d98:	494e      	ldr	r1, [pc, #312]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006da0:	e001      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da2:	7cfb      	ldrb	r3, [r7, #19]
 8006da4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 809f 	beq.w	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006db4:	2300      	movs	r3, #0
 8006db6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006db8:	4b46      	ldr	r3, [pc, #280]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e000      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00d      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dce:	4b41      	ldr	r3, [pc, #260]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dd2:	4a40      	ldr	r2, [pc, #256]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dda:	4b3e      	ldr	r3, [pc, #248]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006de2:	60bb      	str	r3, [r7, #8]
 8006de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006de6:	2301      	movs	r3, #1
 8006de8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006dea:	4b3b      	ldr	r3, [pc, #236]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a3a      	ldr	r2, [pc, #232]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006df4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006df6:	f7fd f949 	bl	800408c <HAL_GetTick>
 8006dfa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006dfc:	e009      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dfe:	f7fd f945 	bl	800408c <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d902      	bls.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	74fb      	strb	r3, [r7, #19]
        break;
 8006e10:	e005      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e12:	4b31      	ldr	r3, [pc, #196]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d0ef      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006e1e:	7cfb      	ldrb	r3, [r7, #19]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d15b      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e24:	4b2b      	ldr	r3, [pc, #172]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e2e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d01f      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d019      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e42:	4b24      	ldr	r3, [pc, #144]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e4c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e4e:	4b21      	ldr	r3, [pc, #132]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e54:	4a1f      	ldr	r2, [pc, #124]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e64:	4a1b      	ldr	r2, [pc, #108]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e6e:	4a19      	ldr	r2, [pc, #100]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d016      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e80:	f7fd f904 	bl	800408c <HAL_GetTick>
 8006e84:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e86:	e00b      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e88:	f7fd f900 	bl	800408c <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d902      	bls.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	74fb      	strb	r3, [r7, #19]
            break;
 8006e9e:	e006      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0ec      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006eae:	7cfb      	ldrb	r3, [r7, #19]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10c      	bne.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006eb4:	4b07      	ldr	r3, [pc, #28]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ec4:	4903      	ldr	r1, [pc, #12]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006ecc:	e008      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ece:	7cfb      	ldrb	r3, [r7, #19]
 8006ed0:	74bb      	strb	r3, [r7, #18]
 8006ed2:	e005      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006ed4:	40021000 	.word	0x40021000
 8006ed8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006edc:	7cfb      	ldrb	r3, [r7, #19]
 8006ede:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ee0:	7c7b      	ldrb	r3, [r7, #17]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d105      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ee6:	4ba0      	ldr	r3, [pc, #640]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eea:	4a9f      	ldr	r2, [pc, #636]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006eec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ef0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00a      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006efe:	4b9a      	ldr	r3, [pc, #616]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f04:	f023 0203 	bic.w	r2, r3, #3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f0c:	4996      	ldr	r1, [pc, #600]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00a      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f20:	4b91      	ldr	r3, [pc, #580]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f26:	f023 020c 	bic.w	r2, r3, #12
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2e:	498e      	ldr	r1, [pc, #568]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0304 	and.w	r3, r3, #4
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00a      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f42:	4b89      	ldr	r3, [pc, #548]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f48:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f50:	4985      	ldr	r1, [pc, #532]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00a      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f64:	4b80      	ldr	r3, [pc, #512]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f6a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f72:	497d      	ldr	r1, [pc, #500]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f74:	4313      	orrs	r3, r2
 8006f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0310 	and.w	r3, r3, #16
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00a      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006f86:	4b78      	ldr	r3, [pc, #480]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f94:	4974      	ldr	r1, [pc, #464]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0320 	and.w	r3, r3, #32
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00a      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fa8:	4b6f      	ldr	r3, [pc, #444]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fb6:	496c      	ldr	r1, [pc, #432]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fca:	4b67      	ldr	r3, [pc, #412]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fd0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fd8:	4963      	ldr	r1, [pc, #396]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00a      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fec:	4b5e      	ldr	r3, [pc, #376]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ff2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ffa:	495b      	ldr	r1, [pc, #364]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800700e:	4b56      	ldr	r3, [pc, #344]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007014:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800701c:	4952      	ldr	r1, [pc, #328]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800701e:	4313      	orrs	r3, r2
 8007020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00a      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007030:	4b4d      	ldr	r3, [pc, #308]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007036:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800703e:	494a      	ldr	r1, [pc, #296]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007040:	4313      	orrs	r3, r2
 8007042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007052:	4b45      	ldr	r3, [pc, #276]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007058:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007060:	4941      	ldr	r1, [pc, #260]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007062:	4313      	orrs	r3, r2
 8007064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00a      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007074:	4b3c      	ldr	r3, [pc, #240]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007076:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800707a:	f023 0203 	bic.w	r2, r3, #3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007082:	4939      	ldr	r1, [pc, #228]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007084:	4313      	orrs	r3, r2
 8007086:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d028      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007096:	4b34      	ldr	r3, [pc, #208]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800709c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070a4:	4930      	ldr	r1, [pc, #192]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070b4:	d106      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070b6:	4b2c      	ldr	r3, [pc, #176]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	4a2b      	ldr	r2, [pc, #172]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070c0:	60d3      	str	r3, [r2, #12]
 80070c2:	e011      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070cc:	d10c      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3304      	adds	r3, #4
 80070d2:	2101      	movs	r1, #1
 80070d4:	4618      	mov	r0, r3
 80070d6:	f001 f81b 	bl	8008110 <RCCEx_PLLSAI1_Config>
 80070da:	4603      	mov	r3, r0
 80070dc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80070de:	7cfb      	ldrb	r3, [r7, #19]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80070e4:	7cfb      	ldrb	r3, [r7, #19]
 80070e6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d04d      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070fc:	d108      	bne.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80070fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007100:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007104:	4a18      	ldr	r2, [pc, #96]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007106:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800710a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800710e:	e012      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007110:	4b15      	ldr	r3, [pc, #84]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007112:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007116:	4a14      	ldr	r2, [pc, #80]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007118:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800711c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8007120:	4b11      	ldr	r3, [pc, #68]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007126:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800712e:	490e      	ldr	r1, [pc, #56]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007130:	4313      	orrs	r3, r2
 8007132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800713a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800713e:	d106      	bne.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007140:	4b09      	ldr	r3, [pc, #36]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	4a08      	ldr	r2, [pc, #32]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800714a:	60d3      	str	r3, [r2, #12]
 800714c:	e020      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007152:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007156:	d109      	bne.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007158:	4b03      	ldr	r3, [pc, #12]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	4a02      	ldr	r2, [pc, #8]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800715e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007162:	60d3      	str	r3, [r2, #12]
 8007164:	e014      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007166:	bf00      	nop
 8007168:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007170:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007174:	d10c      	bne.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	3304      	adds	r3, #4
 800717a:	2101      	movs	r1, #1
 800717c:	4618      	mov	r0, r3
 800717e:	f000 ffc7 	bl	8008110 <RCCEx_PLLSAI1_Config>
 8007182:	4603      	mov	r3, r0
 8007184:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007186:	7cfb      	ldrb	r3, [r7, #19]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800718c:	7cfb      	ldrb	r3, [r7, #19]
 800718e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d028      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800719c:	4b4a      	ldr	r3, [pc, #296]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800719e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071aa:	4947      	ldr	r1, [pc, #284]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071ba:	d106      	bne.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071bc:	4b42      	ldr	r3, [pc, #264]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	4a41      	ldr	r2, [pc, #260]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071c6:	60d3      	str	r3, [r2, #12]
 80071c8:	e011      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071d2:	d10c      	bne.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3304      	adds	r3, #4
 80071d8:	2101      	movs	r1, #1
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 ff98 	bl	8008110 <RCCEx_PLLSAI1_Config>
 80071e0:	4603      	mov	r3, r0
 80071e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80071e4:	7cfb      	ldrb	r3, [r7, #19]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80071ea:	7cfb      	ldrb	r3, [r7, #19]
 80071ec:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d01e      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071fa:	4b33      	ldr	r3, [pc, #204]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007200:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800720a:	492f      	ldr	r1, [pc, #188]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800720c:	4313      	orrs	r3, r2
 800720e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007218:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800721c:	d10c      	bne.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	3304      	adds	r3, #4
 8007222:	2102      	movs	r1, #2
 8007224:	4618      	mov	r0, r3
 8007226:	f000 ff73 	bl	8008110 <RCCEx_PLLSAI1_Config>
 800722a:	4603      	mov	r3, r0
 800722c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800722e:	7cfb      	ldrb	r3, [r7, #19]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007234:	7cfb      	ldrb	r3, [r7, #19]
 8007236:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007244:	4b20      	ldr	r3, [pc, #128]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007246:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800724a:	f023 0204 	bic.w	r2, r3, #4
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007254:	491c      	ldr	r1, [pc, #112]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007256:	4313      	orrs	r3, r2
 8007258:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00b      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007268:	4b17      	ldr	r3, [pc, #92]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800726a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800726e:	f023 0218 	bic.w	r2, r3, #24
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007278:	4913      	ldr	r1, [pc, #76]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800727a:	4313      	orrs	r3, r2
 800727c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d017      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800728c:	4b0e      	ldr	r3, [pc, #56]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800728e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007292:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800729c:	490a      	ldr	r1, [pc, #40]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072ae:	d105      	bne.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072b0:	4b05      	ldr	r3, [pc, #20]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	4a04      	ldr	r2, [pc, #16]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80072bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	40021000 	.word	0x40021000

080072cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b088      	sub	sp, #32
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072de:	d13e      	bne.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80072e0:	4bb6      	ldr	r3, [pc, #728]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80072e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072ea:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072f2:	d028      	beq.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072fa:	f200 86f4 	bhi.w	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007304:	d005      	beq.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800730c:	d00e      	beq.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800730e:	f000 beea 	b.w	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007312:	4baa      	ldr	r3, [pc, #680]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b02      	cmp	r3, #2
 800731e:	f040 86e4 	bne.w	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8007322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007326:	61fb      	str	r3, [r7, #28]
      break;
 8007328:	f000 bedf 	b.w	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800732c:	4ba3      	ldr	r3, [pc, #652]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800732e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b02      	cmp	r3, #2
 8007338:	f040 86d9 	bne.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 800733c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007340:	61fb      	str	r3, [r7, #28]
      break;
 8007342:	f000 bed4 	b.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007346:	4b9d      	ldr	r3, [pc, #628]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800734e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007352:	f040 86ce 	bne.w	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8007356:	4b9a      	ldr	r3, [pc, #616]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007358:	61fb      	str	r3, [r7, #28]
      break;
 800735a:	f000 beca 	b.w	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800735e:	4b97      	ldr	r3, [pc, #604]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f003 0303 	and.w	r3, r3, #3
 8007366:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	2b03      	cmp	r3, #3
 800736c:	d036      	beq.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	2b03      	cmp	r3, #3
 8007372:	d840      	bhi.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d003      	beq.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	2b02      	cmp	r3, #2
 800737e:	d020      	beq.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8007380:	e039      	b.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007382:	4b8e      	ldr	r3, [pc, #568]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b02      	cmp	r3, #2
 800738c:	d116      	bne.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800738e:	4b8b      	ldr	r3, [pc, #556]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0308 	and.w	r3, r3, #8
 8007396:	2b00      	cmp	r3, #0
 8007398:	d005      	beq.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800739a:	4b88      	ldr	r3, [pc, #544]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	091b      	lsrs	r3, r3, #4
 80073a0:	f003 030f 	and.w	r3, r3, #15
 80073a4:	e005      	b.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80073a6:	4b85      	ldr	r3, [pc, #532]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80073a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073ac:	0a1b      	lsrs	r3, r3, #8
 80073ae:	f003 030f 	and.w	r3, r3, #15
 80073b2:	4a84      	ldr	r2, [pc, #528]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80073b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80073ba:	e01f      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80073bc:	2300      	movs	r3, #0
 80073be:	61bb      	str	r3, [r7, #24]
      break;
 80073c0:	e01c      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073c2:	4b7e      	ldr	r3, [pc, #504]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073ce:	d102      	bne.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80073d0:	4b7d      	ldr	r3, [pc, #500]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80073d2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80073d4:	e012      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	61bb      	str	r3, [r7, #24]
      break;
 80073da:	e00f      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80073dc:	4b77      	ldr	r3, [pc, #476]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073e8:	d102      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80073ea:	4b78      	ldr	r3, [pc, #480]	@ (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80073ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80073ee:	e005      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	61bb      	str	r3, [r7, #24]
      break;
 80073f4:	e002      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	61bb      	str	r3, [r7, #24]
      break;
 80073fa:	bf00      	nop
    }

    switch(PeriphClk)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007402:	f000 8606 	beq.w	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800740c:	f200 8673 	bhi.w	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007416:	f000 8469 	beq.w	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007420:	f200 8669 	bhi.w	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800742a:	f000 8531 	beq.w	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007434:	f200 865f 	bhi.w	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800743e:	f000 8187 	beq.w	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007448:	f200 8655 	bhi.w	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007452:	f000 80cd 	beq.w	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800745c:	f200 864b 	bhi.w	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007466:	f000 8430 	beq.w	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007470:	f200 8641 	bhi.w	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800747a:	f000 83e4 	beq.w	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007484:	f200 8637 	bhi.w	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800748e:	f000 80af 	beq.w	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007498:	f200 862d 	bhi.w	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074a2:	f000 809d 	beq.w	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074ac:	f200 8623 	bhi.w	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074b6:	f000 808b 	beq.w	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074c0:	f200 8619 	bhi.w	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074ca:	f000 8554 	beq.w	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074d4:	f200 860f 	bhi.w	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074de:	f000 8500 	beq.w	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074e8:	f200 8605 	bhi.w	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074f2:	f000 84a1 	beq.w	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074fc:	f200 85fb 	bhi.w	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b80      	cmp	r3, #128	@ 0x80
 8007504:	f000 846c 	beq.w	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b80      	cmp	r3, #128	@ 0x80
 800750c:	f200 85f3 	bhi.w	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b20      	cmp	r3, #32
 8007514:	d84c      	bhi.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 85ec 	beq.w	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3b01      	subs	r3, #1
 8007522:	2b1f      	cmp	r3, #31
 8007524:	f200 85e7 	bhi.w	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007528:	a201      	add	r2, pc, #4	@ (adr r2, 8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800752a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752e:	bf00      	nop
 8007530:	08007945 	.word	0x08007945
 8007534:	080079b3 	.word	0x080079b3
 8007538:	080080f7 	.word	0x080080f7
 800753c:	08007a47 	.word	0x08007a47
 8007540:	080080f7 	.word	0x080080f7
 8007544:	080080f7 	.word	0x080080f7
 8007548:	080080f7 	.word	0x080080f7
 800754c:	08007abf 	.word	0x08007abf
 8007550:	080080f7 	.word	0x080080f7
 8007554:	080080f7 	.word	0x080080f7
 8007558:	080080f7 	.word	0x080080f7
 800755c:	080080f7 	.word	0x080080f7
 8007560:	080080f7 	.word	0x080080f7
 8007564:	080080f7 	.word	0x080080f7
 8007568:	080080f7 	.word	0x080080f7
 800756c:	08007b43 	.word	0x08007b43
 8007570:	080080f7 	.word	0x080080f7
 8007574:	080080f7 	.word	0x080080f7
 8007578:	080080f7 	.word	0x080080f7
 800757c:	080080f7 	.word	0x080080f7
 8007580:	080080f7 	.word	0x080080f7
 8007584:	080080f7 	.word	0x080080f7
 8007588:	080080f7 	.word	0x080080f7
 800758c:	080080f7 	.word	0x080080f7
 8007590:	080080f7 	.word	0x080080f7
 8007594:	080080f7 	.word	0x080080f7
 8007598:	080080f7 	.word	0x080080f7
 800759c:	080080f7 	.word	0x080080f7
 80075a0:	080080f7 	.word	0x080080f7
 80075a4:	080080f7 	.word	0x080080f7
 80075a8:	080080f7 	.word	0x080080f7
 80075ac:	08007bc5 	.word	0x08007bc5
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b40      	cmp	r3, #64	@ 0x40
 80075b4:	f000 83e8 	beq.w	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80075b8:	f000 bd9d 	b.w	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80075bc:	40021000 	.word	0x40021000
 80075c0:	0003d090 	.word	0x0003d090
 80075c4:	0800f6d4 	.word	0x0800f6d4
 80075c8:	00f42400 	.word	0x00f42400
 80075cc:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80075d0:	69b9      	ldr	r1, [r7, #24]
 80075d2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80075d6:	f000 ff83 	bl	80084e0 <RCCEx_GetSAIxPeriphCLKFreq>
 80075da:	61f8      	str	r0, [r7, #28]
      break;
 80075dc:	f000 bd8e 	b.w	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80075e0:	69b9      	ldr	r1, [r7, #24]
 80075e2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80075e6:	f000 ff7b 	bl	80084e0 <RCCEx_GetSAIxPeriphCLKFreq>
 80075ea:	61f8      	str	r0, [r7, #28]
      break;
 80075ec:	f000 bd86 	b.w	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80075f0:	4b9a      	ldr	r3, [pc, #616]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80075f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007602:	d015      	beq.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800760a:	f200 8092 	bhi.w	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007614:	d029      	beq.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800761c:	f200 8089 	bhi.w	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d07b      	beq.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800762c:	d04a      	beq.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800762e:	e080      	b.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007630:	4b8a      	ldr	r3, [pc, #552]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b02      	cmp	r3, #2
 800763a:	d17d      	bne.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800763c:	4b87      	ldr	r3, [pc, #540]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0308 	and.w	r3, r3, #8
 8007644:	2b00      	cmp	r3, #0
 8007646:	d005      	beq.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8007648:	4b84      	ldr	r3, [pc, #528]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	091b      	lsrs	r3, r3, #4
 800764e:	f003 030f 	and.w	r3, r3, #15
 8007652:	e005      	b.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8007654:	4b81      	ldr	r3, [pc, #516]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007656:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800765a:	0a1b      	lsrs	r3, r3, #8
 800765c:	f003 030f 	and.w	r3, r3, #15
 8007660:	4a7f      	ldr	r2, [pc, #508]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007666:	61fb      	str	r3, [r7, #28]
          break;
 8007668:	e066      	b.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800766a:	4b7c      	ldr	r3, [pc, #496]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007672:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007676:	d162      	bne.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007678:	4b78      	ldr	r3, [pc, #480]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007680:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007684:	d15b      	bne.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007686:	4b75      	ldr	r3, [pc, #468]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	0a1b      	lsrs	r3, r3, #8
 800768c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007690:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	fb03 f202 	mul.w	r2, r3, r2
 800769a:	4b70      	ldr	r3, [pc, #448]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	091b      	lsrs	r3, r3, #4
 80076a0:	f003 030f 	and.w	r3, r3, #15
 80076a4:	3301      	adds	r3, #1
 80076a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076aa:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80076ac:	4b6b      	ldr	r3, [pc, #428]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	0d5b      	lsrs	r3, r3, #21
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	3301      	adds	r3, #1
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c0:	61fb      	str	r3, [r7, #28]
          break;
 80076c2:	e03c      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80076c4:	4b65      	ldr	r3, [pc, #404]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076d0:	d138      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80076d2:	4b62      	ldr	r3, [pc, #392]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076de:	d131      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80076e0:	4b5e      	ldr	r3, [pc, #376]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	0a1b      	lsrs	r3, r3, #8
 80076e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076ea:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	fb03 f202 	mul.w	r2, r3, r2
 80076f4:	4b59      	ldr	r3, [pc, #356]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	091b      	lsrs	r3, r3, #4
 80076fa:	f003 030f 	and.w	r3, r3, #15
 80076fe:	3301      	adds	r3, #1
 8007700:	fbb2 f3f3 	udiv	r3, r2, r3
 8007704:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007706:	4b55      	ldr	r3, [pc, #340]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	0d5b      	lsrs	r3, r3, #21
 800770c:	f003 0303 	and.w	r3, r3, #3
 8007710:	3301      	adds	r3, #1
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	fbb2 f3f3 	udiv	r3, r2, r3
 800771a:	61fb      	str	r3, [r7, #28]
          break;
 800771c:	e012      	b.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800771e:	4b4f      	ldr	r3, [pc, #316]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007720:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b02      	cmp	r3, #2
 800772a:	d10e      	bne.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 800772c:	4b4d      	ldr	r3, [pc, #308]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800772e:	61fb      	str	r3, [r7, #28]
          break;
 8007730:	e00b      	b.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8007732:	bf00      	nop
 8007734:	f000 bce2 	b.w	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007738:	bf00      	nop
 800773a:	f000 bcdf 	b.w	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800773e:	bf00      	nop
 8007740:	f000 bcdc 	b.w	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007744:	bf00      	nop
 8007746:	f000 bcd9 	b.w	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800774a:	bf00      	nop
        break;
 800774c:	f000 bcd6 	b.w	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8007750:	4b42      	ldr	r3, [pc, #264]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007752:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800775a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800775e:	d13d      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007760:	4b3e      	ldr	r3, [pc, #248]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007768:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800776c:	f040 84c5 	bne.w	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8007770:	4b3a      	ldr	r3, [pc, #232]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800777c:	f040 84bd 	bne.w	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007780:	4b36      	ldr	r3, [pc, #216]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	0a1b      	lsrs	r3, r3, #8
 8007786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800778a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	fb03 f202 	mul.w	r2, r3, r2
 8007794:	4b31      	ldr	r3, [pc, #196]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	091b      	lsrs	r3, r3, #4
 800779a:	f003 030f 	and.w	r3, r3, #15
 800779e:	3301      	adds	r3, #1
 80077a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a4:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80077a6:	4b2d      	ldr	r3, [pc, #180]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	0edb      	lsrs	r3, r3, #27
 80077ac:	f003 031f 	and.w	r3, r3, #31
 80077b0:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10a      	bne.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80077b8:	4b28      	ldr	r3, [pc, #160]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 80077c4:	2311      	movs	r3, #17
 80077c6:	617b      	str	r3, [r7, #20]
 80077c8:	e001      	b.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 80077ca:	2307      	movs	r3, #7
 80077cc:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d6:	61fb      	str	r3, [r7, #28]
      break;
 80077d8:	f000 bc8f 	b.w	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80077dc:	4b1f      	ldr	r3, [pc, #124]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80077de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80077ee:	d016      	beq.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80077f6:	f200 809b 	bhi.w	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007800:	d032      	beq.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007808:	f200 8092 	bhi.w	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 8084 	beq.w	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800781a:	d052      	beq.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800781c:	e088      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800781e:	4b0f      	ldr	r3, [pc, #60]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b02      	cmp	r3, #2
 8007828:	f040 8084 	bne.w	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800782c:	4b0b      	ldr	r3, [pc, #44]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0308 	and.w	r3, r3, #8
 8007834:	2b00      	cmp	r3, #0
 8007836:	d005      	beq.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8007838:	4b08      	ldr	r3, [pc, #32]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	091b      	lsrs	r3, r3, #4
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	e005      	b.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8007844:	4b05      	ldr	r3, [pc, #20]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800784a:	0a1b      	lsrs	r3, r3, #8
 800784c:	f003 030f 	and.w	r3, r3, #15
 8007850:	4a03      	ldr	r2, [pc, #12]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007856:	61fb      	str	r3, [r7, #28]
          break;
 8007858:	e06c      	b.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800785a:	bf00      	nop
 800785c:	40021000 	.word	0x40021000
 8007860:	0800f6d4 	.word	0x0800f6d4
 8007864:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007868:	4ba5      	ldr	r3, [pc, #660]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007870:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007874:	d160      	bne.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007876:	4ba2      	ldr	r3, [pc, #648]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800787e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007882:	d159      	bne.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007884:	4b9e      	ldr	r3, [pc, #632]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	0a1b      	lsrs	r3, r3, #8
 800788a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800788e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	fb03 f202 	mul.w	r2, r3, r2
 8007898:	4b99      	ldr	r3, [pc, #612]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	091b      	lsrs	r3, r3, #4
 800789e:	f003 030f 	and.w	r3, r3, #15
 80078a2:	3301      	adds	r3, #1
 80078a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80078aa:	4b95      	ldr	r3, [pc, #596]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	0d5b      	lsrs	r3, r3, #21
 80078b0:	f003 0303 	and.w	r3, r3, #3
 80078b4:	3301      	adds	r3, #1
 80078b6:	005b      	lsls	r3, r3, #1
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80078be:	61fb      	str	r3, [r7, #28]
          break;
 80078c0:	e03a      	b.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80078c2:	4b8f      	ldr	r3, [pc, #572]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078ce:	d135      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80078d0:	4b8b      	ldr	r3, [pc, #556]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078dc:	d12e      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80078de:	4b88      	ldr	r3, [pc, #544]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	0a1b      	lsrs	r3, r3, #8
 80078e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078e8:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	fb03 f202 	mul.w	r2, r3, r2
 80078f2:	4b83      	ldr	r3, [pc, #524]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	091b      	lsrs	r3, r3, #4
 80078f8:	f003 030f 	and.w	r3, r3, #15
 80078fc:	3301      	adds	r3, #1
 80078fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007902:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007904:	4b7e      	ldr	r3, [pc, #504]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	0d5b      	lsrs	r3, r3, #21
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	3301      	adds	r3, #1
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	69ba      	ldr	r2, [r7, #24]
 8007914:	fbb2 f3f3 	udiv	r3, r2, r3
 8007918:	61fb      	str	r3, [r7, #28]
          break;
 800791a:	e00f      	b.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800791c:	4b78      	ldr	r3, [pc, #480]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800791e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007922:	f003 0302 	and.w	r3, r3, #2
 8007926:	2b02      	cmp	r3, #2
 8007928:	d10a      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800792a:	4b76      	ldr	r3, [pc, #472]	@ (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800792c:	61fb      	str	r3, [r7, #28]
          break;
 800792e:	e007      	b.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8007930:	bf00      	nop
 8007932:	e3e2      	b.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007934:	bf00      	nop
 8007936:	e3e0      	b.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007938:	bf00      	nop
 800793a:	e3de      	b.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800793c:	bf00      	nop
 800793e:	e3dc      	b.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007940:	bf00      	nop
      break;
 8007942:	e3da      	b.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007944:	4b6e      	ldr	r3, [pc, #440]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800794a:	f003 0303 	and.w	r3, r3, #3
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b03      	cmp	r3, #3
 8007954:	d827      	bhi.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8007956:	a201      	add	r2, pc, #4	@ (adr r2, 800795c <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	0800796d 	.word	0x0800796d
 8007960:	08007975 	.word	0x08007975
 8007964:	0800797d 	.word	0x0800797d
 8007968:	08007991 	.word	0x08007991
          frequency = HAL_RCC_GetPCLK2Freq();
 800796c:	f7ff f8a8 	bl	8006ac0 <HAL_RCC_GetPCLK2Freq>
 8007970:	61f8      	str	r0, [r7, #28]
          break;
 8007972:	e01d      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8007974:	f7fe fff6 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8007978:	61f8      	str	r0, [r7, #28]
          break;
 800797a:	e019      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800797c:	4b60      	ldr	r3, [pc, #384]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007988:	d10f      	bne.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800798a:	4b5f      	ldr	r3, [pc, #380]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800798c:	61fb      	str	r3, [r7, #28]
          break;
 800798e:	e00c      	b.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007990:	4b5b      	ldr	r3, [pc, #364]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b02      	cmp	r3, #2
 800799c:	d107      	bne.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800799e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079a2:	61fb      	str	r3, [r7, #28]
          break;
 80079a4:	e003      	b.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80079a6:	bf00      	nop
 80079a8:	e3a8      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80079aa:	bf00      	nop
 80079ac:	e3a6      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80079ae:	bf00      	nop
        break;
 80079b0:	e3a4      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80079b2:	4b53      	ldr	r3, [pc, #332]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80079b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079b8:	f003 030c 	and.w	r3, r3, #12
 80079bc:	60fb      	str	r3, [r7, #12]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2b0c      	cmp	r3, #12
 80079c2:	d83a      	bhi.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80079c4:	a201      	add	r2, pc, #4	@ (adr r2, 80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 80079c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ca:	bf00      	nop
 80079cc:	08007a01 	.word	0x08007a01
 80079d0:	08007a3b 	.word	0x08007a3b
 80079d4:	08007a3b 	.word	0x08007a3b
 80079d8:	08007a3b 	.word	0x08007a3b
 80079dc:	08007a09 	.word	0x08007a09
 80079e0:	08007a3b 	.word	0x08007a3b
 80079e4:	08007a3b 	.word	0x08007a3b
 80079e8:	08007a3b 	.word	0x08007a3b
 80079ec:	08007a11 	.word	0x08007a11
 80079f0:	08007a3b 	.word	0x08007a3b
 80079f4:	08007a3b 	.word	0x08007a3b
 80079f8:	08007a3b 	.word	0x08007a3b
 80079fc:	08007a25 	.word	0x08007a25
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a00:	f7ff f848 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 8007a04:	61f8      	str	r0, [r7, #28]
          break;
 8007a06:	e01d      	b.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8007a08:	f7fe ffac 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8007a0c:	61f8      	str	r0, [r7, #28]
          break;
 8007a0e:	e019      	b.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a10:	4b3b      	ldr	r3, [pc, #236]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a1c:	d10f      	bne.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8007a1e:	4b3a      	ldr	r3, [pc, #232]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a20:	61fb      	str	r3, [r7, #28]
          break;
 8007a22:	e00c      	b.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007a24:	4b36      	ldr	r3, [pc, #216]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d107      	bne.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8007a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a36:	61fb      	str	r3, [r7, #28]
          break;
 8007a38:	e003      	b.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8007a3a:	bf00      	nop
 8007a3c:	e35e      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007a3e:	bf00      	nop
 8007a40:	e35c      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007a42:	bf00      	nop
        break;
 8007a44:	e35a      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007a46:	4b2e      	ldr	r3, [pc, #184]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b30      	cmp	r3, #48	@ 0x30
 8007a56:	d021      	beq.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2b30      	cmp	r3, #48	@ 0x30
 8007a5c:	d829      	bhi.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b20      	cmp	r3, #32
 8007a62:	d011      	beq.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2b20      	cmp	r3, #32
 8007a68:	d823      	bhi.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b10      	cmp	r3, #16
 8007a74:	d004      	beq.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8007a76:	e01c      	b.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a78:	f7ff f80c 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 8007a7c:	61f8      	str	r0, [r7, #28]
          break;
 8007a7e:	e01d      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8007a80:	f7fe ff70 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8007a84:	61f8      	str	r0, [r7, #28]
          break;
 8007a86:	e019      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a88:	4b1d      	ldr	r3, [pc, #116]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a94:	d10f      	bne.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8007a96:	4b1c      	ldr	r3, [pc, #112]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a98:	61fb      	str	r3, [r7, #28]
          break;
 8007a9a:	e00c      	b.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007a9c:	4b18      	ldr	r3, [pc, #96]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aa2:	f003 0302 	and.w	r3, r3, #2
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d107      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8007aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007aae:	61fb      	str	r3, [r7, #28]
          break;
 8007ab0:	e003      	b.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8007ab2:	bf00      	nop
 8007ab4:	e322      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007ab6:	bf00      	nop
 8007ab8:	e320      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007aba:	bf00      	nop
        break;
 8007abc:	e31e      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007abe:	4b10      	ldr	r3, [pc, #64]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ac4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ac8:	60fb      	str	r3, [r7, #12]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ace:	d027      	beq.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ad4:	d82f      	bhi.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b80      	cmp	r3, #128	@ 0x80
 8007ada:	d017      	beq.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2b80      	cmp	r3, #128	@ 0x80
 8007ae0:	d829      	bhi.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2b40      	cmp	r3, #64	@ 0x40
 8007aec:	d004      	beq.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8007aee:	e022      	b.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007af0:	f7fe ffd0 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 8007af4:	61f8      	str	r0, [r7, #28]
          break;
 8007af6:	e023      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8007af8:	f7fe ff34 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8007afc:	61f8      	str	r0, [r7, #28]
          break;
 8007afe:	e01f      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8007b00:	40021000 	.word	0x40021000
 8007b04:	02dc6c00 	.word	0x02dc6c00
 8007b08:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b0c:	4b9b      	ldr	r3, [pc, #620]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b18:	d10f      	bne.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8007b1a:	4b99      	ldr	r3, [pc, #612]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007b1c:	61fb      	str	r3, [r7, #28]
          break;
 8007b1e:	e00c      	b.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007b20:	4b96      	ldr	r3, [pc, #600]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d107      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8007b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b32:	61fb      	str	r3, [r7, #28]
          break;
 8007b34:	e003      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8007b36:	bf00      	nop
 8007b38:	e2e0      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007b3a:	bf00      	nop
 8007b3c:	e2de      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007b3e:	bf00      	nop
        break;
 8007b40:	e2dc      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007b42:	4b8e      	ldr	r3, [pc, #568]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b4c:	60fb      	str	r3, [r7, #12]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b54:	d025      	beq.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b5c:	d82c      	bhi.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b64:	d013      	beq.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b6c:	d824      	bhi.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d004      	beq.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b7a:	d004      	beq.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8007b7c:	e01c      	b.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b7e:	f7fe ff89 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 8007b82:	61f8      	str	r0, [r7, #28]
          break;
 8007b84:	e01d      	b.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8007b86:	f7fe feed 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8007b8a:	61f8      	str	r0, [r7, #28]
          break;
 8007b8c:	e019      	b.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b8e:	4b7b      	ldr	r3, [pc, #492]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b9a:	d10f      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8007b9c:	4b78      	ldr	r3, [pc, #480]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007b9e:	61fb      	str	r3, [r7, #28]
          break;
 8007ba0:	e00c      	b.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ba2:	4b76      	ldr	r3, [pc, #472]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d107      	bne.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8007bb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bb4:	61fb      	str	r3, [r7, #28]
          break;
 8007bb6:	e003      	b.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8007bb8:	bf00      	nop
 8007bba:	e29f      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007bbc:	bf00      	nop
 8007bbe:	e29d      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007bc0:	bf00      	nop
        break;
 8007bc2:	e29b      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007bc4:	4b6d      	ldr	r3, [pc, #436]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bca:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007bce:	60fb      	str	r3, [r7, #12]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bd6:	d025      	beq.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bde:	d82c      	bhi.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007be6:	d013      	beq.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bee:	d824      	bhi.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d004      	beq.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bfc:	d004      	beq.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8007bfe:	e01c      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c00:	f7fe ff48 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 8007c04:	61f8      	str	r0, [r7, #28]
          break;
 8007c06:	e01d      	b.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8007c08:	f7fe feac 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8007c0c:	61f8      	str	r0, [r7, #28]
          break;
 8007c0e:	e019      	b.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c10:	4b5a      	ldr	r3, [pc, #360]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c1c:	d10f      	bne.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8007c1e:	4b58      	ldr	r3, [pc, #352]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007c20:	61fb      	str	r3, [r7, #28]
          break;
 8007c22:	e00c      	b.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007c24:	4b55      	ldr	r3, [pc, #340]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d107      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8007c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c36:	61fb      	str	r3, [r7, #28]
          break;
 8007c38:	e003      	b.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8007c3a:	bf00      	nop
 8007c3c:	e25e      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007c3e:	bf00      	nop
 8007c40:	e25c      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007c42:	bf00      	nop
        break;
 8007c44:	e25a      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007c46:	4b4d      	ldr	r3, [pc, #308]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c50:	60fb      	str	r3, [r7, #12]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c58:	d007      	beq.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c60:	d12f      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8007c62:	f7fe fe7f 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8007c66:	61f8      	str	r0, [r7, #28]
          break;
 8007c68:	e02e      	b.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8007c6a:	4b44      	ldr	r3, [pc, #272]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c76:	d126      	bne.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8007c78:	4b40      	ldr	r3, [pc, #256]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d020      	beq.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007c84:	4b3d      	ldr	r3, [pc, #244]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	0a1b      	lsrs	r3, r3, #8
 8007c8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c8e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	fb03 f202 	mul.w	r2, r3, r2
 8007c98:	4b38      	ldr	r3, [pc, #224]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	091b      	lsrs	r3, r3, #4
 8007c9e:	f003 030f 	and.w	r3, r3, #15
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8007caa:	4b34      	ldr	r3, [pc, #208]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	0e5b      	lsrs	r3, r3, #25
 8007cb0:	f003 0303 	and.w	r3, r3, #3
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cbe:	61fb      	str	r3, [r7, #28]
          break;
 8007cc0:	e001      	b.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8007cc2:	bf00      	nop
 8007cc4:	e21a      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007cc6:	bf00      	nop
        break;
 8007cc8:	e218      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8007cca:	4b2c      	ldr	r3, [pc, #176]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007ccc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cd0:	f003 0304 	and.w	r3, r3, #4
 8007cd4:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d103      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8007cdc:	f7fe fef0 	bl	8006ac0 <HAL_RCC_GetPCLK2Freq>
 8007ce0:	61f8      	str	r0, [r7, #28]
        break;
 8007ce2:	e20b      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8007ce4:	f7fe fe3e 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8007ce8:	61f8      	str	r0, [r7, #28]
        break;
 8007cea:	e207      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8007cec:	4b23      	ldr	r3, [pc, #140]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cf2:	f003 0318 	and.w	r3, r3, #24
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b10      	cmp	r3, #16
 8007cfc:	d010      	beq.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b10      	cmp	r3, #16
 8007d02:	d834      	bhi.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b08      	cmp	r3, #8
 8007d0e:	d024      	beq.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8007d10:	e02d      	b.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007d12:	69b9      	ldr	r1, [r7, #24]
 8007d14:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007d18:	f000 fbe2 	bl	80084e0 <RCCEx_GetSAIxPeriphCLKFreq>
 8007d1c:	61f8      	str	r0, [r7, #28]
          break;
 8007d1e:	e02b      	b.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007d20:	4b16      	ldr	r3, [pc, #88]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0302 	and.w	r3, r3, #2
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d122      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007d2c:	4b13      	ldr	r3, [pc, #76]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0308 	and.w	r3, r3, #8
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d005      	beq.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8007d38:	4b10      	ldr	r3, [pc, #64]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	091b      	lsrs	r3, r3, #4
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	e005      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8007d44:	4b0d      	ldr	r3, [pc, #52]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d4a:	0a1b      	lsrs	r3, r3, #8
 8007d4c:	f003 030f 	and.w	r3, r3, #15
 8007d50:	4a0c      	ldr	r2, [pc, #48]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d56:	61fb      	str	r3, [r7, #28]
          break;
 8007d58:	e00b      	b.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d5a:	4b08      	ldr	r3, [pc, #32]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d66:	d106      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8007d68:	4b05      	ldr	r3, [pc, #20]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007d6a:	61fb      	str	r3, [r7, #28]
          break;
 8007d6c:	e003      	b.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8007d6e:	bf00      	nop
 8007d70:	e1c4      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007d72:	bf00      	nop
 8007d74:	e1c2      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007d76:	bf00      	nop
        break;
 8007d78:	e1c0      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8007d7a:	bf00      	nop
 8007d7c:	40021000 	.word	0x40021000
 8007d80:	00f42400 	.word	0x00f42400
 8007d84:	0800f6d4 	.word	0x0800f6d4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007d88:	4b96      	ldr	r3, [pc, #600]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d8e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007d92:	60fb      	str	r3, [r7, #12]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d9a:	d013      	beq.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007da2:	d819      	bhi.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d004      	beq.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007db0:	d004      	beq.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8007db2:	e011      	b.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007db4:	f7fe fe6e 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 8007db8:	61f8      	str	r0, [r7, #28]
          break;
 8007dba:	e010      	b.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8007dbc:	f7fe fdd2 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8007dc0:	61f8      	str	r0, [r7, #28]
          break;
 8007dc2:	e00c      	b.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007dc4:	4b87      	ldr	r3, [pc, #540]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dd0:	d104      	bne.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8007dd2:	4b85      	ldr	r3, [pc, #532]	@ (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007dd4:	61fb      	str	r3, [r7, #28]
          break;
 8007dd6:	e001      	b.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8007dd8:	bf00      	nop
 8007dda:	e18f      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007ddc:	bf00      	nop
        break;
 8007dde:	e18d      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007de0:	4b80      	ldr	r3, [pc, #512]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007de6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007df2:	d013      	beq.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dfa:	d819      	bhi.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d004      	beq.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e08:	d004      	beq.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8007e0a:	e011      	b.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e0c:	f7fe fe42 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 8007e10:	61f8      	str	r0, [r7, #28]
          break;
 8007e12:	e010      	b.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8007e14:	f7fe fda6 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8007e18:	61f8      	str	r0, [r7, #28]
          break;
 8007e1a:	e00c      	b.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e1c:	4b71      	ldr	r3, [pc, #452]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e28:	d104      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8007e2a:	4b6f      	ldr	r3, [pc, #444]	@ (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007e2c:	61fb      	str	r3, [r7, #28]
          break;
 8007e2e:	e001      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8007e30:	bf00      	nop
 8007e32:	e163      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007e34:	bf00      	nop
        break;
 8007e36:	e161      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007e38:	4b6a      	ldr	r3, [pc, #424]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e4a:	d013      	beq.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e52:	d819      	bhi.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d004      	beq.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e60:	d004      	beq.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8007e62:	e011      	b.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e64:	f7fe fe16 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 8007e68:	61f8      	str	r0, [r7, #28]
          break;
 8007e6a:	e010      	b.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8007e6c:	f7fe fd7a 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8007e70:	61f8      	str	r0, [r7, #28]
          break;
 8007e72:	e00c      	b.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e74:	4b5b      	ldr	r3, [pc, #364]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e80:	d104      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8007e82:	4b59      	ldr	r3, [pc, #356]	@ (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007e84:	61fb      	str	r3, [r7, #28]
          break;
 8007e86:	e001      	b.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8007e88:	bf00      	nop
 8007e8a:	e137      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007e8c:	bf00      	nop
        break;
 8007e8e:	e135      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007e90:	4b54      	ldr	r3, [pc, #336]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007e92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e96:	f003 0303 	and.w	r3, r3, #3
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d011      	beq.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d818      	bhi.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d004      	beq.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8007eb4:	e011      	b.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007eb6:	f7fe fded 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 8007eba:	61f8      	str	r0, [r7, #28]
          break;
 8007ebc:	e010      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8007ebe:	f7fe fd51 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8007ec2:	61f8      	str	r0, [r7, #28]
          break;
 8007ec4:	e00c      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ec6:	4b47      	ldr	r3, [pc, #284]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ed2:	d104      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8007ed4:	4b44      	ldr	r3, [pc, #272]	@ (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007ed6:	61fb      	str	r3, [r7, #28]
          break;
 8007ed8:	e001      	b.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8007eda:	bf00      	nop
 8007edc:	e10e      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007ede:	bf00      	nop
        break;
 8007ee0:	e10c      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007ee2:	4b40      	ldr	r3, [pc, #256]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ee8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007eec:	60fb      	str	r3, [r7, #12]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007ef4:	d02c      	beq.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007efc:	d833      	bhi.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007f04:	d01a      	beq.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007f0c:	d82b      	bhi.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d004      	beq.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f1a:	d004      	beq.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8007f1c:	e023      	b.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f1e:	f7fe fdb9 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 8007f22:	61f8      	str	r0, [r7, #28]
          break;
 8007f24:	e026      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007f26:	4b2f      	ldr	r3, [pc, #188]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d11a      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8007f34:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007f38:	61fb      	str	r3, [r7, #28]
          break;
 8007f3a:	e016      	b.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f3c:	4b29      	ldr	r3, [pc, #164]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f48:	d111      	bne.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8007f4a:	4b27      	ldr	r3, [pc, #156]	@ (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007f4c:	61fb      	str	r3, [r7, #28]
          break;
 8007f4e:	e00e      	b.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f50:	4b24      	ldr	r3, [pc, #144]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f56:	f003 0302 	and.w	r3, r3, #2
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d109      	bne.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8007f5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f62:	61fb      	str	r3, [r7, #28]
          break;
 8007f64:	e005      	b.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8007f66:	bf00      	nop
 8007f68:	e0c8      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007f6a:	bf00      	nop
 8007f6c:	e0c6      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007f6e:	bf00      	nop
 8007f70:	e0c4      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007f72:	bf00      	nop
        break;
 8007f74:	e0c2      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007f76:	4b1b      	ldr	r3, [pc, #108]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f7c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f88:	d030      	beq.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f90:	d837      	bhi.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f98:	d01a      	beq.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fa0:	d82f      	bhi.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d004      	beq.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fae:	d004      	beq.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8007fb0:	e027      	b.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007fb2:	f7fe fd6f 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 8007fb6:	61f8      	str	r0, [r7, #28]
          break;
 8007fb8:	e02a      	b.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007fba:	4b0a      	ldr	r3, [pc, #40]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fc0:	f003 0302 	and.w	r3, r3, #2
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d11e      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8007fc8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007fcc:	61fb      	str	r3, [r7, #28]
          break;
 8007fce:	e01a      	b.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007fd0:	4b04      	ldr	r3, [pc, #16]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fdc:	d115      	bne.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8007fde:	4b02      	ldr	r3, [pc, #8]	@ (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007fe0:	61fb      	str	r3, [r7, #28]
          break;
 8007fe2:	e012      	b.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007fe4:	40021000 	.word	0x40021000
 8007fe8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007fec:	4b46      	ldr	r3, [pc, #280]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d109      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8007ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ffe:	61fb      	str	r3, [r7, #28]
          break;
 8008000:	e005      	b.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8008002:	bf00      	nop
 8008004:	e07a      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008006:	bf00      	nop
 8008008:	e078      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800800a:	bf00      	nop
 800800c:	e076      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800800e:	bf00      	nop
        break;
 8008010:	e074      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008012:	4b3d      	ldr	r3, [pc, #244]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008014:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008018:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800801c:	60fb      	str	r3, [r7, #12]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008024:	d02c      	beq.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800802c:	d855      	bhi.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d004      	beq.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800803a:	d004      	beq.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800803c:	e04d      	b.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800803e:	f7fe fc91 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8008042:	61f8      	str	r0, [r7, #28]
          break;
 8008044:	e04e      	b.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008046:	4b30      	ldr	r3, [pc, #192]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	2b02      	cmp	r3, #2
 8008050:	d145      	bne.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008052:	4b2d      	ldr	r3, [pc, #180]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0308 	and.w	r3, r3, #8
 800805a:	2b00      	cmp	r3, #0
 800805c:	d005      	beq.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800805e:	4b2a      	ldr	r3, [pc, #168]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	091b      	lsrs	r3, r3, #4
 8008064:	f003 030f 	and.w	r3, r3, #15
 8008068:	e005      	b.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800806a:	4b27      	ldr	r3, [pc, #156]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800806c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008070:	0a1b      	lsrs	r3, r3, #8
 8008072:	f003 030f 	and.w	r3, r3, #15
 8008076:	4a25      	ldr	r2, [pc, #148]	@ (800810c <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8008078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800807c:	61fb      	str	r3, [r7, #28]
          break;
 800807e:	e02e      	b.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008080:	4b21      	ldr	r3, [pc, #132]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008088:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800808c:	d129      	bne.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800808e:	4b1e      	ldr	r3, [pc, #120]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008096:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800809a:	d122      	bne.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800809c:	4b1a      	ldr	r3, [pc, #104]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	0a1b      	lsrs	r3, r3, #8
 80080a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080a6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	fb03 f202 	mul.w	r2, r3, r2
 80080b0:	4b15      	ldr	r3, [pc, #84]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	091b      	lsrs	r3, r3, #4
 80080b6:	f003 030f 	and.w	r3, r3, #15
 80080ba:	3301      	adds	r3, #1
 80080bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80080c2:	4b11      	ldr	r3, [pc, #68]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	0d5b      	lsrs	r3, r3, #21
 80080c8:	f003 0303 	and.w	r3, r3, #3
 80080cc:	3301      	adds	r3, #1
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	69ba      	ldr	r2, [r7, #24]
 80080d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d6:	61fb      	str	r3, [r7, #28]
          break;
 80080d8:	e003      	b.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 80080da:	bf00      	nop
 80080dc:	e00e      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80080de:	bf00      	nop
 80080e0:	e00c      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80080e2:	bf00      	nop
        break;
 80080e4:	e00a      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80080e6:	bf00      	nop
 80080e8:	e008      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80080ea:	bf00      	nop
 80080ec:	e006      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80080ee:	bf00      	nop
 80080f0:	e004      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80080f2:	bf00      	nop
 80080f4:	e002      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80080f6:	bf00      	nop
 80080f8:	e000      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80080fa:	bf00      	nop
    }
  }

  return(frequency);
 80080fc:	69fb      	ldr	r3, [r7, #28]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3720      	adds	r7, #32
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	40021000 	.word	0x40021000
 800810c:	0800f6d4 	.word	0x0800f6d4

08008110 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800811e:	4b72      	ldr	r3, [pc, #456]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f003 0303 	and.w	r3, r3, #3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00e      	beq.n	8008148 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800812a:	4b6f      	ldr	r3, [pc, #444]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	f003 0203 	and.w	r2, r3, #3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	429a      	cmp	r2, r3
 8008138:	d103      	bne.n	8008142 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
       ||
 800813e:	2b00      	cmp	r3, #0
 8008140:	d142      	bne.n	80081c8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	73fb      	strb	r3, [r7, #15]
 8008146:	e03f      	b.n	80081c8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b03      	cmp	r3, #3
 800814e:	d018      	beq.n	8008182 <RCCEx_PLLSAI1_Config+0x72>
 8008150:	2b03      	cmp	r3, #3
 8008152:	d825      	bhi.n	80081a0 <RCCEx_PLLSAI1_Config+0x90>
 8008154:	2b01      	cmp	r3, #1
 8008156:	d002      	beq.n	800815e <RCCEx_PLLSAI1_Config+0x4e>
 8008158:	2b02      	cmp	r3, #2
 800815a:	d009      	beq.n	8008170 <RCCEx_PLLSAI1_Config+0x60>
 800815c:	e020      	b.n	80081a0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800815e:	4b62      	ldr	r3, [pc, #392]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0302 	and.w	r3, r3, #2
 8008166:	2b00      	cmp	r3, #0
 8008168:	d11d      	bne.n	80081a6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800816e:	e01a      	b.n	80081a6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008170:	4b5d      	ldr	r3, [pc, #372]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008178:	2b00      	cmp	r3, #0
 800817a:	d116      	bne.n	80081aa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008180:	e013      	b.n	80081aa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008182:	4b59      	ldr	r3, [pc, #356]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10f      	bne.n	80081ae <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800818e:	4b56      	ldr	r3, [pc, #344]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d109      	bne.n	80081ae <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800819e:	e006      	b.n	80081ae <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	73fb      	strb	r3, [r7, #15]
      break;
 80081a4:	e004      	b.n	80081b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80081a6:	bf00      	nop
 80081a8:	e002      	b.n	80081b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80081aa:	bf00      	nop
 80081ac:	e000      	b.n	80081b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80081ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d108      	bne.n	80081c8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80081b6:	4b4c      	ldr	r3, [pc, #304]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	f023 0203 	bic.w	r2, r3, #3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4949      	ldr	r1, [pc, #292]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f040 8086 	bne.w	80082dc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80081d0:	4b45      	ldr	r3, [pc, #276]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a44      	ldr	r2, [pc, #272]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80081da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081dc:	f7fb ff56 	bl	800408c <HAL_GetTick>
 80081e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80081e2:	e009      	b.n	80081f8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081e4:	f7fb ff52 	bl	800408c <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d902      	bls.n	80081f8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	73fb      	strb	r3, [r7, #15]
        break;
 80081f6:	e005      	b.n	8008204 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80081f8:	4b3b      	ldr	r3, [pc, #236]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1ef      	bne.n	80081e4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008204:	7bfb      	ldrb	r3, [r7, #15]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d168      	bne.n	80082dc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d113      	bne.n	8008238 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008210:	4b35      	ldr	r3, [pc, #212]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008212:	691a      	ldr	r2, [r3, #16]
 8008214:	4b35      	ldr	r3, [pc, #212]	@ (80082ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8008216:	4013      	ands	r3, r2
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	6892      	ldr	r2, [r2, #8]
 800821c:	0211      	lsls	r1, r2, #8
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	68d2      	ldr	r2, [r2, #12]
 8008222:	06d2      	lsls	r2, r2, #27
 8008224:	4311      	orrs	r1, r2
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	6852      	ldr	r2, [r2, #4]
 800822a:	3a01      	subs	r2, #1
 800822c:	0112      	lsls	r2, r2, #4
 800822e:	430a      	orrs	r2, r1
 8008230:	492d      	ldr	r1, [pc, #180]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008232:	4313      	orrs	r3, r2
 8008234:	610b      	str	r3, [r1, #16]
 8008236:	e02d      	b.n	8008294 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d115      	bne.n	800826a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800823e:	4b2a      	ldr	r3, [pc, #168]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008240:	691a      	ldr	r2, [r3, #16]
 8008242:	4b2b      	ldr	r3, [pc, #172]	@ (80082f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008244:	4013      	ands	r3, r2
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	6892      	ldr	r2, [r2, #8]
 800824a:	0211      	lsls	r1, r2, #8
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	6912      	ldr	r2, [r2, #16]
 8008250:	0852      	lsrs	r2, r2, #1
 8008252:	3a01      	subs	r2, #1
 8008254:	0552      	lsls	r2, r2, #21
 8008256:	4311      	orrs	r1, r2
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	6852      	ldr	r2, [r2, #4]
 800825c:	3a01      	subs	r2, #1
 800825e:	0112      	lsls	r2, r2, #4
 8008260:	430a      	orrs	r2, r1
 8008262:	4921      	ldr	r1, [pc, #132]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008264:	4313      	orrs	r3, r2
 8008266:	610b      	str	r3, [r1, #16]
 8008268:	e014      	b.n	8008294 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800826a:	4b1f      	ldr	r3, [pc, #124]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800826c:	691a      	ldr	r2, [r3, #16]
 800826e:	4b21      	ldr	r3, [pc, #132]	@ (80082f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008270:	4013      	ands	r3, r2
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	6892      	ldr	r2, [r2, #8]
 8008276:	0211      	lsls	r1, r2, #8
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	6952      	ldr	r2, [r2, #20]
 800827c:	0852      	lsrs	r2, r2, #1
 800827e:	3a01      	subs	r2, #1
 8008280:	0652      	lsls	r2, r2, #25
 8008282:	4311      	orrs	r1, r2
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	6852      	ldr	r2, [r2, #4]
 8008288:	3a01      	subs	r2, #1
 800828a:	0112      	lsls	r2, r2, #4
 800828c:	430a      	orrs	r2, r1
 800828e:	4916      	ldr	r1, [pc, #88]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008290:	4313      	orrs	r3, r2
 8008292:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008294:	4b14      	ldr	r3, [pc, #80]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a13      	ldr	r2, [pc, #76]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800829a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800829e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082a0:	f7fb fef4 	bl	800408c <HAL_GetTick>
 80082a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80082a6:	e009      	b.n	80082bc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80082a8:	f7fb fef0 	bl	800408c <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d902      	bls.n	80082bc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	73fb      	strb	r3, [r7, #15]
          break;
 80082ba:	e005      	b.n	80082c8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80082bc:	4b0a      	ldr	r3, [pc, #40]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d0ef      	beq.n	80082a8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d106      	bne.n	80082dc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80082ce:	4b06      	ldr	r3, [pc, #24]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80082d0:	691a      	ldr	r2, [r3, #16]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	4904      	ldr	r1, [pc, #16]	@ (80082e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80082d8:	4313      	orrs	r3, r2
 80082da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	40021000 	.word	0x40021000
 80082ec:	07ff800f 	.word	0x07ff800f
 80082f0:	ff9f800f 	.word	0xff9f800f
 80082f4:	f9ff800f 	.word	0xf9ff800f

080082f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008306:	4b72      	ldr	r3, [pc, #456]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	f003 0303 	and.w	r3, r3, #3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00e      	beq.n	8008330 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008312:	4b6f      	ldr	r3, [pc, #444]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	f003 0203 	and.w	r2, r3, #3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	429a      	cmp	r2, r3
 8008320:	d103      	bne.n	800832a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
       ||
 8008326:	2b00      	cmp	r3, #0
 8008328:	d142      	bne.n	80083b0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	73fb      	strb	r3, [r7, #15]
 800832e:	e03f      	b.n	80083b0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b03      	cmp	r3, #3
 8008336:	d018      	beq.n	800836a <RCCEx_PLLSAI2_Config+0x72>
 8008338:	2b03      	cmp	r3, #3
 800833a:	d825      	bhi.n	8008388 <RCCEx_PLLSAI2_Config+0x90>
 800833c:	2b01      	cmp	r3, #1
 800833e:	d002      	beq.n	8008346 <RCCEx_PLLSAI2_Config+0x4e>
 8008340:	2b02      	cmp	r3, #2
 8008342:	d009      	beq.n	8008358 <RCCEx_PLLSAI2_Config+0x60>
 8008344:	e020      	b.n	8008388 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008346:	4b62      	ldr	r3, [pc, #392]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0302 	and.w	r3, r3, #2
 800834e:	2b00      	cmp	r3, #0
 8008350:	d11d      	bne.n	800838e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008356:	e01a      	b.n	800838e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008358:	4b5d      	ldr	r3, [pc, #372]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008360:	2b00      	cmp	r3, #0
 8008362:	d116      	bne.n	8008392 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008368:	e013      	b.n	8008392 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800836a:	4b59      	ldr	r3, [pc, #356]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10f      	bne.n	8008396 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008376:	4b56      	ldr	r3, [pc, #344]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d109      	bne.n	8008396 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008386:	e006      	b.n	8008396 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	73fb      	strb	r3, [r7, #15]
      break;
 800838c:	e004      	b.n	8008398 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800838e:	bf00      	nop
 8008390:	e002      	b.n	8008398 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008392:	bf00      	nop
 8008394:	e000      	b.n	8008398 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008396:	bf00      	nop
    }

    if(status == HAL_OK)
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d108      	bne.n	80083b0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800839e:	4b4c      	ldr	r3, [pc, #304]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	f023 0203 	bic.w	r2, r3, #3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4949      	ldr	r1, [pc, #292]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80083ac:	4313      	orrs	r3, r2
 80083ae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f040 8086 	bne.w	80084c4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80083b8:	4b45      	ldr	r3, [pc, #276]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a44      	ldr	r2, [pc, #272]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80083be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083c4:	f7fb fe62 	bl	800408c <HAL_GetTick>
 80083c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80083ca:	e009      	b.n	80083e0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80083cc:	f7fb fe5e 	bl	800408c <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d902      	bls.n	80083e0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	73fb      	strb	r3, [r7, #15]
        break;
 80083de:	e005      	b.n	80083ec <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80083e0:	4b3b      	ldr	r3, [pc, #236]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1ef      	bne.n	80083cc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d168      	bne.n	80084c4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d113      	bne.n	8008420 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80083f8:	4b35      	ldr	r3, [pc, #212]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80083fa:	695a      	ldr	r2, [r3, #20]
 80083fc:	4b35      	ldr	r3, [pc, #212]	@ (80084d4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80083fe:	4013      	ands	r3, r2
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	6892      	ldr	r2, [r2, #8]
 8008404:	0211      	lsls	r1, r2, #8
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	68d2      	ldr	r2, [r2, #12]
 800840a:	06d2      	lsls	r2, r2, #27
 800840c:	4311      	orrs	r1, r2
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	6852      	ldr	r2, [r2, #4]
 8008412:	3a01      	subs	r2, #1
 8008414:	0112      	lsls	r2, r2, #4
 8008416:	430a      	orrs	r2, r1
 8008418:	492d      	ldr	r1, [pc, #180]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800841a:	4313      	orrs	r3, r2
 800841c:	614b      	str	r3, [r1, #20]
 800841e:	e02d      	b.n	800847c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d115      	bne.n	8008452 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008426:	4b2a      	ldr	r3, [pc, #168]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008428:	695a      	ldr	r2, [r3, #20]
 800842a:	4b2b      	ldr	r3, [pc, #172]	@ (80084d8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800842c:	4013      	ands	r3, r2
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	6892      	ldr	r2, [r2, #8]
 8008432:	0211      	lsls	r1, r2, #8
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	6912      	ldr	r2, [r2, #16]
 8008438:	0852      	lsrs	r2, r2, #1
 800843a:	3a01      	subs	r2, #1
 800843c:	0552      	lsls	r2, r2, #21
 800843e:	4311      	orrs	r1, r2
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	6852      	ldr	r2, [r2, #4]
 8008444:	3a01      	subs	r2, #1
 8008446:	0112      	lsls	r2, r2, #4
 8008448:	430a      	orrs	r2, r1
 800844a:	4921      	ldr	r1, [pc, #132]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800844c:	4313      	orrs	r3, r2
 800844e:	614b      	str	r3, [r1, #20]
 8008450:	e014      	b.n	800847c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008452:	4b1f      	ldr	r3, [pc, #124]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008454:	695a      	ldr	r2, [r3, #20]
 8008456:	4b21      	ldr	r3, [pc, #132]	@ (80084dc <RCCEx_PLLSAI2_Config+0x1e4>)
 8008458:	4013      	ands	r3, r2
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	6892      	ldr	r2, [r2, #8]
 800845e:	0211      	lsls	r1, r2, #8
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	6952      	ldr	r2, [r2, #20]
 8008464:	0852      	lsrs	r2, r2, #1
 8008466:	3a01      	subs	r2, #1
 8008468:	0652      	lsls	r2, r2, #25
 800846a:	4311      	orrs	r1, r2
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	6852      	ldr	r2, [r2, #4]
 8008470:	3a01      	subs	r2, #1
 8008472:	0112      	lsls	r2, r2, #4
 8008474:	430a      	orrs	r2, r1
 8008476:	4916      	ldr	r1, [pc, #88]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008478:	4313      	orrs	r3, r2
 800847a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800847c:	4b14      	ldr	r3, [pc, #80]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a13      	ldr	r2, [pc, #76]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008486:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008488:	f7fb fe00 	bl	800408c <HAL_GetTick>
 800848c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800848e:	e009      	b.n	80084a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008490:	f7fb fdfc 	bl	800408c <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	2b02      	cmp	r3, #2
 800849c:	d902      	bls.n	80084a4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	73fb      	strb	r3, [r7, #15]
          break;
 80084a2:	e005      	b.n	80084b0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80084a4:	4b0a      	ldr	r3, [pc, #40]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d0ef      	beq.n	8008490 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d106      	bne.n	80084c4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80084b6:	4b06      	ldr	r3, [pc, #24]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80084b8:	695a      	ldr	r2, [r3, #20]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	4904      	ldr	r1, [pc, #16]	@ (80084d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	40021000 	.word	0x40021000
 80084d4:	07ff800f 	.word	0x07ff800f
 80084d8:	ff9f800f 	.word	0xff9f800f
 80084dc:	f9ff800f 	.word	0xf9ff800f

080084e0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b089      	sub	sp, #36	@ 0x24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084fc:	d10b      	bne.n	8008516 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80084fe:	4b7e      	ldr	r3, [pc, #504]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008500:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008504:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008508:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	2b60      	cmp	r3, #96	@ 0x60
 800850e:	d112      	bne.n	8008536 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008510:	4b7a      	ldr	r3, [pc, #488]	@ (80086fc <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8008512:	61fb      	str	r3, [r7, #28]
 8008514:	e00f      	b.n	8008536 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800851c:	d10b      	bne.n	8008536 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800851e:	4b76      	ldr	r3, [pc, #472]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008520:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008524:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008528:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008530:	d101      	bne.n	8008536 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8008532:	4b72      	ldr	r3, [pc, #456]	@ (80086fc <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8008534:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	2b00      	cmp	r3, #0
 800853a:	f040 80d6 	bne.w	80086ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	2b40      	cmp	r3, #64	@ 0x40
 8008546:	d003      	beq.n	8008550 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800854e:	d13b      	bne.n	80085c8 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008550:	4b69      	ldr	r3, [pc, #420]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008558:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800855c:	f040 80c4 	bne.w	80086e8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8008560:	4b65      	ldr	r3, [pc, #404]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 80bd 	beq.w	80086e8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800856e:	4b62      	ldr	r3, [pc, #392]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	091b      	lsrs	r3, r3, #4
 8008574:	f003 030f 	and.w	r3, r3, #15
 8008578:	3301      	adds	r3, #1
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008580:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008582:	4b5d      	ldr	r3, [pc, #372]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	0a1b      	lsrs	r3, r3, #8
 8008588:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800858c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800858e:	4b5a      	ldr	r3, [pc, #360]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	0edb      	lsrs	r3, r3, #27
 8008594:	f003 031f 	and.w	r3, r3, #31
 8008598:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10a      	bne.n	80085b6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80085a0:	4b55      	ldr	r3, [pc, #340]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80085ac:	2311      	movs	r3, #17
 80085ae:	617b      	str	r3, [r7, #20]
 80085b0:	e001      	b.n	80085b6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80085b2:	2307      	movs	r3, #7
 80085b4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	fb03 f202 	mul.w	r2, r3, r2
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80085c4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80085c6:	e08f      	b.n	80086e8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d13a      	bne.n	8008644 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80085ce:	4b4a      	ldr	r3, [pc, #296]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085da:	f040 8086 	bne.w	80086ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80085de:	4b46      	ldr	r3, [pc, #280]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d07f      	beq.n	80086ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80085ea:	4b43      	ldr	r3, [pc, #268]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	091b      	lsrs	r3, r3, #4
 80085f0:	f003 030f 	and.w	r3, r3, #15
 80085f4:	3301      	adds	r3, #1
 80085f6:	693a      	ldr	r2, [r7, #16]
 80085f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085fc:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80085fe:	4b3e      	ldr	r3, [pc, #248]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	0a1b      	lsrs	r3, r3, #8
 8008604:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008608:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800860a:	4b3b      	ldr	r3, [pc, #236]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	0edb      	lsrs	r3, r3, #27
 8008610:	f003 031f 	and.w	r3, r3, #31
 8008614:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800861c:	4b36      	ldr	r3, [pc, #216]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008624:	2b00      	cmp	r3, #0
 8008626:	d002      	beq.n	800862e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8008628:	2311      	movs	r3, #17
 800862a:	617b      	str	r3, [r7, #20]
 800862c:	e001      	b.n	8008632 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800862e:	2307      	movs	r3, #7
 8008630:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	fb03 f202 	mul.w	r2, r3, r2
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008640:	61fb      	str	r3, [r7, #28]
 8008642:	e052      	b.n	80086ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	2b80      	cmp	r3, #128	@ 0x80
 8008648:	d003      	beq.n	8008652 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008650:	d109      	bne.n	8008666 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008652:	4b29      	ldr	r3, [pc, #164]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800865a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800865e:	d144      	bne.n	80086ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8008660:	4b27      	ldr	r3, [pc, #156]	@ (8008700 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8008662:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008664:	e041      	b.n	80086ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	2b20      	cmp	r3, #32
 800866a:	d003      	beq.n	8008674 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008672:	d13a      	bne.n	80086ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8008674:	4b20      	ldr	r3, [pc, #128]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800867c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008680:	d133      	bne.n	80086ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8008682:	4b1d      	ldr	r3, [pc, #116]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d02d      	beq.n	80086ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800868e:	4b1a      	ldr	r3, [pc, #104]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	091b      	lsrs	r3, r3, #4
 8008694:	f003 030f 	and.w	r3, r3, #15
 8008698:	3301      	adds	r3, #1
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	fbb2 f3f3 	udiv	r3, r2, r3
 80086a0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80086a2:	4b15      	ldr	r3, [pc, #84]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	0a1b      	lsrs	r3, r3, #8
 80086a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086ac:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80086ae:	4b12      	ldr	r3, [pc, #72]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	0edb      	lsrs	r3, r3, #27
 80086b4:	f003 031f 	and.w	r3, r3, #31
 80086b8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10a      	bne.n	80086d6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80086c0:	4b0d      	ldr	r3, [pc, #52]	@ (80086f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80086cc:	2311      	movs	r3, #17
 80086ce:	617b      	str	r3, [r7, #20]
 80086d0:	e001      	b.n	80086d6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80086d2:	2307      	movs	r3, #7
 80086d4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	fb03 f202 	mul.w	r2, r3, r2
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086e4:	61fb      	str	r3, [r7, #28]
 80086e6:	e000      	b.n	80086ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80086e8:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80086ea:	69fb      	ldr	r3, [r7, #28]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3724      	adds	r7, #36	@ 0x24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	40021000 	.word	0x40021000
 80086fc:	001fff68 	.word	0x001fff68
 8008700:	00f42400 	.word	0x00f42400

08008704 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	2b02      	cmp	r3, #2
 8008716:	d904      	bls.n	8008722 <HAL_SAI_InitProtocol+0x1e>
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	3b03      	subs	r3, #3
 800871c:	2b01      	cmp	r3, #1
 800871e:	d812      	bhi.n	8008746 <HAL_SAI_InitProtocol+0x42>
 8008720:	e008      	b.n	8008734 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	68b9      	ldr	r1, [r7, #8]
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 f9fb 	bl	8008b24 <SAI_InitI2S>
 800872e:	4603      	mov	r3, r0
 8008730:	75fb      	strb	r3, [r7, #23]
      break;
 8008732:	e00b      	b.n	800874c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	68b9      	ldr	r1, [r7, #8]
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 faa4 	bl	8008c88 <SAI_InitPCM>
 8008740:	4603      	mov	r3, r0
 8008742:	75fb      	strb	r3, [r7, #23]
      break;
 8008744:	e002      	b.n	800874c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	75fb      	strb	r3, [r7, #23]
      break;
 800874a:	bf00      	nop
  }

  if (status == HAL_OK)
 800874c:	7dfb      	ldrb	r3, [r7, #23]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d104      	bne.n	800875c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f000 f808 	bl	8008768 <HAL_SAI_Init>
 8008758:	4603      	mov	r3, r0
 800875a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800875c:	7dfb      	ldrb	r3, [r7, #23]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3718      	adds	r7, #24
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b08a      	sub	sp, #40	@ 0x28
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e1c7      	b.n	8008b0a <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008780:	2b01      	cmp	r3, #1
 8008782:	d10e      	bne.n	80087a2 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a81      	ldr	r2, [pc, #516]	@ (8008990 <HAL_SAI_Init+0x228>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d107      	bne.n	800879e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8008792:	2b01      	cmp	r3, #1
 8008794:	d103      	bne.n	800879e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e1b3      	b.n	8008b0a <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d106      	bne.n	80087bc <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7fb fb28 	bl	8003e0c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 fae5 	bl	8008d8c <SAI_Disable>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e19e      	b.n	8008b0a <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2202      	movs	r2, #2
 80087d0:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d00c      	beq.n	80087f6 <HAL_SAI_Init+0x8e>
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d80d      	bhi.n	80087fc <HAL_SAI_Init+0x94>
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <HAL_SAI_Init+0x82>
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d003      	beq.n	80087f0 <HAL_SAI_Init+0x88>
 80087e8:	e008      	b.n	80087fc <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80087ee:	e008      	b.n	8008802 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80087f0:	2310      	movs	r3, #16
 80087f2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80087f4:	e005      	b.n	8008802 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80087f6:	2320      	movs	r3, #32
 80087f8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80087fa:	e002      	b.n	8008802 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 80087fc:	2300      	movs	r3, #0
 80087fe:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008800:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	2b03      	cmp	r3, #3
 8008808:	d81d      	bhi.n	8008846 <HAL_SAI_Init+0xde>
 800880a:	a201      	add	r2, pc, #4	@ (adr r2, 8008810 <HAL_SAI_Init+0xa8>)
 800880c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008810:	08008821 	.word	0x08008821
 8008814:	08008827 	.word	0x08008827
 8008818:	0800882f 	.word	0x0800882f
 800881c:	08008837 	.word	0x08008837
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008820:	2300      	movs	r3, #0
 8008822:	61fb      	str	r3, [r7, #28]
      break;
 8008824:	e012      	b.n	800884c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008826:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800882a:	61fb      	str	r3, [r7, #28]
      break;
 800882c:	e00e      	b.n	800884c <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800882e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008832:	61fb      	str	r3, [r7, #28]
      break;
 8008834:	e00a      	b.n	800884c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008836:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800883a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800883c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883e:	f043 0301 	orr.w	r3, r3, #1
 8008842:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008844:	e002      	b.n	800884c <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8008846:	2300      	movs	r3, #0
 8008848:	61fb      	str	r3, [r7, #28]
      break;
 800884a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a4f      	ldr	r2, [pc, #316]	@ (8008990 <HAL_SAI_Init+0x228>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d004      	beq.n	8008860 <HAL_SAI_Init+0xf8>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a4e      	ldr	r2, [pc, #312]	@ (8008994 <HAL_SAI_Init+0x22c>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d103      	bne.n	8008868 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8008860:	4a4d      	ldr	r2, [pc, #308]	@ (8008998 <HAL_SAI_Init+0x230>)
 8008862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008864:	6013      	str	r3, [r2, #0]
 8008866:	e002      	b.n	800886e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008868:	4a4c      	ldr	r2, [pc, #304]	@ (800899c <HAL_SAI_Init+0x234>)
 800886a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d073      	beq.n	800895e <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a45      	ldr	r2, [pc, #276]	@ (8008990 <HAL_SAI_Init+0x228>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d004      	beq.n	800888a <HAL_SAI_Init+0x122>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a43      	ldr	r2, [pc, #268]	@ (8008994 <HAL_SAI_Init+0x22c>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d105      	bne.n	8008896 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800888a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800888e:	f7fe fd1d 	bl	80072cc <HAL_RCCEx_GetPeriphCLKFreq>
 8008892:	61b8      	str	r0, [r7, #24]
 8008894:	e004      	b.n	80088a0 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008896:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800889a:	f7fe fd17 	bl	80072cc <HAL_RCCEx_GetPeriphCLKFreq>
 800889e:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80088a8:	d120      	bne.n	80088ec <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ae:	2b04      	cmp	r3, #4
 80088b0:	d102      	bne.n	80088b8 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80088b2:	2340      	movs	r3, #64	@ 0x40
 80088b4:	613b      	str	r3, [r7, #16]
 80088b6:	e00a      	b.n	80088ce <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088bc:	2b08      	cmp	r3, #8
 80088be:	d103      	bne.n	80088c8 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80088c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80088c4:	613b      	str	r3, [r7, #16]
 80088c6:	e002      	b.n	80088ce <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088cc:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80088ce:	69ba      	ldr	r2, [r7, #24]
 80088d0:	4613      	mov	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	005b      	lsls	r3, r3, #1
 80088d8:	4619      	mov	r1, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	fb02 f303 	mul.w	r3, r2, r3
 80088e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80088e8:	617b      	str	r3, [r7, #20]
 80088ea:	e017      	b.n	800891c <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088f4:	d101      	bne.n	80088fa <HAL_SAI_Init+0x192>
 80088f6:	2302      	movs	r3, #2
 80088f8:	e000      	b.n	80088fc <HAL_SAI_Init+0x194>
 80088fa:	2301      	movs	r3, #1
 80088fc:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80088fe:	69ba      	ldr	r2, [r7, #24]
 8008900:	4613      	mov	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	4619      	mov	r1, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	69db      	ldr	r3, [r3, #28]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	fb02 f303 	mul.w	r3, r2, r3
 8008914:	021b      	lsls	r3, r3, #8
 8008916:	fbb1 f3f3 	udiv	r3, r1, r3
 800891a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	4a20      	ldr	r2, [pc, #128]	@ (80089a0 <HAL_SAI_Init+0x238>)
 8008920:	fba2 2303 	umull	r2, r3, r2, r3
 8008924:	08da      	lsrs	r2, r3, #3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800892a:	6979      	ldr	r1, [r7, #20]
 800892c:	4b1c      	ldr	r3, [pc, #112]	@ (80089a0 <HAL_SAI_Init+0x238>)
 800892e:	fba3 2301 	umull	r2, r3, r3, r1
 8008932:	08da      	lsrs	r2, r3, #3
 8008934:	4613      	mov	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	1aca      	subs	r2, r1, r3
 800893e:	2a08      	cmp	r2, #8
 8008940:	d904      	bls.n	800894c <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a1b      	ldr	r3, [r3, #32]
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008950:	2b04      	cmp	r3, #4
 8008952:	d104      	bne.n	800895e <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	085a      	lsrs	r2, r3, #1
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d003      	beq.n	800896e <HAL_SAI_Init+0x206>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	2b02      	cmp	r3, #2
 800896c:	d109      	bne.n	8008982 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008972:	2b01      	cmp	r3, #1
 8008974:	d101      	bne.n	800897a <HAL_SAI_Init+0x212>
 8008976:	2300      	movs	r3, #0
 8008978:	e001      	b.n	800897e <HAL_SAI_Init+0x216>
 800897a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800897e:	623b      	str	r3, [r7, #32]
 8008980:	e012      	b.n	80089a8 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008986:	2b01      	cmp	r3, #1
 8008988:	d10c      	bne.n	80089a4 <HAL_SAI_Init+0x23c>
 800898a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800898e:	e00a      	b.n	80089a6 <HAL_SAI_Init+0x23e>
 8008990:	40015404 	.word	0x40015404
 8008994:	40015424 	.word	0x40015424
 8008998:	40015400 	.word	0x40015400
 800899c:	40015800 	.word	0x40015800
 80089a0:	cccccccd 	.word	0xcccccccd
 80089a4:	2300      	movs	r3, #0
 80089a6:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6819      	ldr	r1, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	4b58      	ldr	r3, [pc, #352]	@ (8008b14 <HAL_SAI_Init+0x3ac>)
 80089b4:	400b      	ands	r3, r1
 80089b6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6819      	ldr	r1, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089c6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80089cc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089d2:	431a      	orrs	r2, r3
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 80089e0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80089ec:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	051b      	lsls	r3, r3, #20
 80089f4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80089fa:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	6812      	ldr	r2, [r2, #0]
 8008a0e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8008a12:	f023 030f 	bic.w	r3, r3, #15
 8008a16:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6859      	ldr	r1, [r3, #4]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	699a      	ldr	r2, [r3, #24]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a26:	431a      	orrs	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6899      	ldr	r1, [r3, #8]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	4b35      	ldr	r3, [pc, #212]	@ (8008b18 <HAL_SAI_Init+0x3b0>)
 8008a42:	400b      	ands	r3, r1
 8008a44:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	6899      	ldr	r1, [r3, #8]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a50:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008a56:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 8008a5c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 8008a62:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008a6c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	430a      	orrs	r2, r1
 8008a74:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68d9      	ldr	r1, [r3, #12]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8008a84:	400b      	ands	r3, r1
 8008a86:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68d9      	ldr	r1, [r3, #12]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a96:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a9c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008a9e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	021b      	lsls	r3, r3, #8
 8008aa8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a19      	ldr	r2, [pc, #100]	@ (8008b1c <HAL_SAI_Init+0x3b4>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d119      	bne.n	8008af0 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008abc:	4b18      	ldr	r3, [pc, #96]	@ (8008b20 <HAL_SAI_Init+0x3b8>)
 8008abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ac0:	4a17      	ldr	r2, [pc, #92]	@ (8008b20 <HAL_SAI_Init+0x3b8>)
 8008ac2:	f023 0301 	bic.w	r3, r3, #1
 8008ac6:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d10e      	bne.n	8008af0 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ada:	3b01      	subs	r3, #1
 8008adc:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008ade:	4910      	ldr	r1, [pc, #64]	@ (8008b20 <HAL_SAI_Init+0x3b8>)
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8008ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8008b20 <HAL_SAI_Init+0x3b8>)
 8008ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8008b20 <HAL_SAI_Init+0x3b8>)
 8008aea:	f043 0301 	orr.w	r3, r3, #1
 8008aee:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3728      	adds	r7, #40	@ 0x28
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	f805c010 	.word	0xf805c010
 8008b18:	fff88000 	.word	0xfff88000
 8008b1c:	40015404 	.word	0x40015404
 8008b20:	40015400 	.word	0x40015400

08008b24 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
 8008b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d003      	beq.n	8008b52 <SAI_InitI2S+0x2e>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d103      	bne.n	8008b5a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008b58:	e002      	b.n	8008b60 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008b66:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b6e:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	683a      	ldr	r2, [r7, #0]
 8008b7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d001      	beq.n	8008b8a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e077      	b.n	8008c7a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d107      	bne.n	8008ba0 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008b9c:	661a      	str	r2, [r3, #96]	@ 0x60
 8008b9e:	e006      	b.n	8008bae <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008ba6:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Frame definition */
  switch (datasize)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b03      	cmp	r3, #3
 8008bb2:	d84f      	bhi.n	8008c54 <SAI_InitI2S+0x130>
 8008bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8008bbc <SAI_InitI2S+0x98>)
 8008bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bba:	bf00      	nop
 8008bbc:	08008bcd 	.word	0x08008bcd
 8008bc0:	08008bef 	.word	0x08008bef
 8008bc4:	08008c11 	.word	0x08008c11
 8008bc8:	08008c33 	.word	0x08008c33
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2280      	movs	r2, #128	@ 0x80
 8008bd0:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	085b      	lsrs	r3, r3, #1
 8008bd6:	015a      	lsls	r2, r3, #5
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	085b      	lsrs	r3, r3, #1
 8008be0:	011a      	lsls	r2, r3, #4
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2240      	movs	r2, #64	@ 0x40
 8008bea:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008bec:	e035      	b.n	8008c5a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2280      	movs	r2, #128	@ 0x80
 8008bf2:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	085b      	lsrs	r3, r3, #1
 8008bf8:	019a      	lsls	r2, r3, #6
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	085b      	lsrs	r3, r3, #1
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2280      	movs	r2, #128	@ 0x80
 8008c0c:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008c0e:	e024      	b.n	8008c5a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	22c0      	movs	r2, #192	@ 0xc0
 8008c14:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	085b      	lsrs	r3, r3, #1
 8008c1a:	019a      	lsls	r2, r3, #6
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	085b      	lsrs	r3, r3, #1
 8008c24:	015a      	lsls	r2, r3, #5
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2280      	movs	r2, #128	@ 0x80
 8008c2e:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008c30:	e013      	b.n	8008c5a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	22e0      	movs	r2, #224	@ 0xe0
 8008c36:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	085b      	lsrs	r3, r3, #1
 8008c3c:	019a      	lsls	r2, r3, #6
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	085b      	lsrs	r3, r3, #1
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2280      	movs	r2, #128	@ 0x80
 8008c50:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008c52:	e002      	b.n	8008c5a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	75fb      	strb	r3, [r7, #23]
      break;
 8008c58:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d10b      	bne.n	8008c78 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d102      	bne.n	8008c6c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2210      	movs	r2, #16
 8008c6a:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d102      	bne.n	8008c78 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2208      	movs	r2, #8
 8008c76:	665a      	str	r2, [r3, #100]	@ 0x64
    }
  }
  return status;
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop

08008c88 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
 8008c94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <SAI_InitPCM+0x2e>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d103      	bne.n	8008cbe <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008cbc:	e002      	b.n	8008cc4 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008cd8:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008cec:	671a      	str	r2, [r3, #112]	@ 0x70

  if (protocol == SAI_PCM_SHORT)
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	2b04      	cmp	r3, #4
 8008cf2:	d103      	bne.n	8008cfc <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	655a      	str	r2, [r3, #84]	@ 0x54
 8008cfa:	e002      	b.n	8008d02 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	220d      	movs	r2, #13
 8008d00:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  switch (datasize)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d837      	bhi.n	8008d78 <SAI_InitPCM+0xf0>
 8008d08:	a201      	add	r2, pc, #4	@ (adr r2, 8008d10 <SAI_InitPCM+0x88>)
 8008d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0e:	bf00      	nop
 8008d10:	08008d21 	.word	0x08008d21
 8008d14:	08008d37 	.word	0x08008d37
 8008d18:	08008d4d 	.word	0x08008d4d
 8008d1c:	08008d63 	.word	0x08008d63
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2280      	movs	r2, #128	@ 0x80
 8008d24:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	011a      	lsls	r2, r3, #4
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2240      	movs	r2, #64	@ 0x40
 8008d32:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008d34:	e023      	b.n	8008d7e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2280      	movs	r2, #128	@ 0x80
 8008d3a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	015a      	lsls	r2, r3, #5
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2280      	movs	r2, #128	@ 0x80
 8008d48:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008d4a:	e018      	b.n	8008d7e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	22c0      	movs	r2, #192	@ 0xc0
 8008d50:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	015a      	lsls	r2, r3, #5
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2280      	movs	r2, #128	@ 0x80
 8008d5e:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008d60:	e00d      	b.n	8008d7e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	22e0      	movs	r2, #224	@ 0xe0
 8008d66:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2280      	movs	r2, #128	@ 0x80
 8008d74:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008d76:	e002      	b.n	8008d7e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d7c:	bf00      	nop
  }

  return status;
 8008d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	371c      	adds	r7, #28
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008d94:	4b18      	ldr	r3, [pc, #96]	@ (8008df8 <SAI_Disable+0x6c>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a18      	ldr	r2, [pc, #96]	@ (8008dfc <SAI_Disable+0x70>)
 8008d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d9e:	0b1b      	lsrs	r3, r3, #12
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008db6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10a      	bne.n	8008dd4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dc4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	72fb      	strb	r3, [r7, #11]
      break;
 8008dd2:	e009      	b.n	8008de8 <SAI_Disable+0x5c>
    }
    count--;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e7      	bne.n	8008db8 <SAI_Disable+0x2c>

  return status;
 8008de8:	7afb      	ldrb	r3, [r7, #11]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	20000008 	.word	0x20000008
 8008dfc:	95cbec1b 	.word	0x95cbec1b

08008e00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e095      	b.n	8008f3e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d108      	bne.n	8008e2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e22:	d009      	beq.n	8008e38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	61da      	str	r2, [r3, #28]
 8008e2a:	e005      	b.n	8008e38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d106      	bne.n	8008e58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7fa fe66 	bl	8003b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e78:	d902      	bls.n	8008e80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60fb      	str	r3, [r7, #12]
 8008e7e:	e002      	b.n	8008e86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008e80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008e84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008e8e:	d007      	beq.n	8008ea0 <HAL_SPI_Init+0xa0>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e98:	d002      	beq.n	8008ea0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008eb0:	431a      	orrs	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	f003 0302 	and.w	r3, r3, #2
 8008eba:	431a      	orrs	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	f003 0301 	and.w	r3, r3, #1
 8008ec4:	431a      	orrs	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	699b      	ldr	r3, [r3, #24]
 8008eca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ece:	431a      	orrs	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	69db      	ldr	r3, [r3, #28]
 8008ed4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ed8:	431a      	orrs	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ee2:	ea42 0103 	orr.w	r1, r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	0c1b      	lsrs	r3, r3, #16
 8008efc:	f003 0204 	and.w	r2, r3, #4
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f04:	f003 0310 	and.w	r3, r3, #16
 8008f08:	431a      	orrs	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f0e:	f003 0308 	and.w	r3, r3, #8
 8008f12:	431a      	orrs	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008f1c:	ea42 0103 	orr.w	r1, r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b088      	sub	sp, #32
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	60f8      	str	r0, [r7, #12]
 8008f4e:	60b9      	str	r1, [r7, #8]
 8008f50:	603b      	str	r3, [r7, #0]
 8008f52:	4613      	mov	r3, r2
 8008f54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d101      	bne.n	8008f68 <HAL_SPI_Transmit+0x22>
 8008f64:	2302      	movs	r3, #2
 8008f66:	e15f      	b.n	8009228 <HAL_SPI_Transmit+0x2e2>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f70:	f7fb f88c 	bl	800408c <HAL_GetTick>
 8008f74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008f76:	88fb      	ldrh	r3, [r7, #6]
 8008f78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d002      	beq.n	8008f8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008f86:	2302      	movs	r3, #2
 8008f88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f8a:	e148      	b.n	800921e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d002      	beq.n	8008f98 <HAL_SPI_Transmit+0x52>
 8008f92:	88fb      	ldrh	r3, [r7, #6]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d102      	bne.n	8008f9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f9c:	e13f      	b.n	800921e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2203      	movs	r2, #3
 8008fa2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	88fa      	ldrh	r2, [r7, #6]
 8008fb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	88fa      	ldrh	r2, [r7, #6]
 8008fbc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fe8:	d10f      	bne.n	800900a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ff8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009008:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009014:	2b40      	cmp	r3, #64	@ 0x40
 8009016:	d007      	beq.n	8009028 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009026:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009030:	d94f      	bls.n	80090d2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d002      	beq.n	8009040 <HAL_SPI_Transmit+0xfa>
 800903a:	8afb      	ldrh	r3, [r7, #22]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d142      	bne.n	80090c6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009044:	881a      	ldrh	r2, [r3, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009050:	1c9a      	adds	r2, r3, #2
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800905a:	b29b      	uxth	r3, r3
 800905c:	3b01      	subs	r3, #1
 800905e:	b29a      	uxth	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009064:	e02f      	b.n	80090c6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f003 0302 	and.w	r3, r3, #2
 8009070:	2b02      	cmp	r3, #2
 8009072:	d112      	bne.n	800909a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009078:	881a      	ldrh	r2, [r3, #0]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009084:	1c9a      	adds	r2, r3, #2
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800908e:	b29b      	uxth	r3, r3
 8009090:	3b01      	subs	r3, #1
 8009092:	b29a      	uxth	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009098:	e015      	b.n	80090c6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800909a:	f7fa fff7 	bl	800408c <HAL_GetTick>
 800909e:	4602      	mov	r2, r0
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d803      	bhi.n	80090b2 <HAL_SPI_Transmit+0x16c>
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b0:	d102      	bne.n	80090b8 <HAL_SPI_Transmit+0x172>
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d106      	bne.n	80090c6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80090c4:	e0ab      	b.n	800921e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1ca      	bne.n	8009066 <HAL_SPI_Transmit+0x120>
 80090d0:	e080      	b.n	80091d4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d002      	beq.n	80090e0 <HAL_SPI_Transmit+0x19a>
 80090da:	8afb      	ldrh	r3, [r7, #22]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d174      	bne.n	80091ca <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d912      	bls.n	8009110 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ee:	881a      	ldrh	r2, [r3, #0]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090fa:	1c9a      	adds	r2, r3, #2
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009104:	b29b      	uxth	r3, r3
 8009106:	3b02      	subs	r3, #2
 8009108:	b29a      	uxth	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800910e:	e05c      	b.n	80091ca <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	330c      	adds	r3, #12
 800911a:	7812      	ldrb	r2, [r2, #0]
 800911c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009122:	1c5a      	adds	r2, r3, #1
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800912c:	b29b      	uxth	r3, r3
 800912e:	3b01      	subs	r3, #1
 8009130:	b29a      	uxth	r2, r3
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009136:	e048      	b.n	80091ca <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f003 0302 	and.w	r3, r3, #2
 8009142:	2b02      	cmp	r3, #2
 8009144:	d12b      	bne.n	800919e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800914a:	b29b      	uxth	r3, r3
 800914c:	2b01      	cmp	r3, #1
 800914e:	d912      	bls.n	8009176 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009154:	881a      	ldrh	r2, [r3, #0]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009160:	1c9a      	adds	r2, r3, #2
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800916a:	b29b      	uxth	r3, r3
 800916c:	3b02      	subs	r3, #2
 800916e:	b29a      	uxth	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009174:	e029      	b.n	80091ca <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	330c      	adds	r3, #12
 8009180:	7812      	ldrb	r2, [r2, #0]
 8009182:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009188:	1c5a      	adds	r2, r3, #1
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009192:	b29b      	uxth	r3, r3
 8009194:	3b01      	subs	r3, #1
 8009196:	b29a      	uxth	r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800919c:	e015      	b.n	80091ca <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800919e:	f7fa ff75 	bl	800408c <HAL_GetTick>
 80091a2:	4602      	mov	r2, r0
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	683a      	ldr	r2, [r7, #0]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d803      	bhi.n	80091b6 <HAL_SPI_Transmit+0x270>
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b4:	d102      	bne.n	80091bc <HAL_SPI_Transmit+0x276>
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d106      	bne.n	80091ca <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80091c8:	e029      	b.n	800921e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1b1      	bne.n	8009138 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091d4:	69ba      	ldr	r2, [r7, #24]
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f000 f947 	bl	800946c <SPI_EndRxTxTransaction>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d002      	beq.n	80091ea <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2220      	movs	r2, #32
 80091e8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10a      	bne.n	8009208 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091f2:	2300      	movs	r3, #0
 80091f4:	613b      	str	r3, [r7, #16]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	613b      	str	r3, [r7, #16]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	613b      	str	r3, [r7, #16]
 8009206:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800920c:	2b00      	cmp	r3, #0
 800920e:	d002      	beq.n	8009216 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	77fb      	strb	r3, [r7, #31]
 8009214:	e003      	b.n	800921e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2201      	movs	r2, #1
 800921a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009226:	7ffb      	ldrb	r3, [r7, #31]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3720      	adds	r7, #32
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b088      	sub	sp, #32
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	603b      	str	r3, [r7, #0]
 800923c:	4613      	mov	r3, r2
 800923e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009240:	f7fa ff24 	bl	800408c <HAL_GetTick>
 8009244:	4602      	mov	r2, r0
 8009246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009248:	1a9b      	subs	r3, r3, r2
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	4413      	add	r3, r2
 800924e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009250:	f7fa ff1c 	bl	800408c <HAL_GetTick>
 8009254:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009256:	4b39      	ldr	r3, [pc, #228]	@ (800933c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	015b      	lsls	r3, r3, #5
 800925c:	0d1b      	lsrs	r3, r3, #20
 800925e:	69fa      	ldr	r2, [r7, #28]
 8009260:	fb02 f303 	mul.w	r3, r2, r3
 8009264:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009266:	e054      	b.n	8009312 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926e:	d050      	beq.n	8009312 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009270:	f7fa ff0c 	bl	800408c <HAL_GetTick>
 8009274:	4602      	mov	r2, r0
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	69fa      	ldr	r2, [r7, #28]
 800927c:	429a      	cmp	r2, r3
 800927e:	d902      	bls.n	8009286 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d13d      	bne.n	8009302 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009294:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800929e:	d111      	bne.n	80092c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092a8:	d004      	beq.n	80092b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092b2:	d107      	bne.n	80092c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092cc:	d10f      	bne.n	80092ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80092ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e017      	b.n	8009332 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d101      	bne.n	800930c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009308:	2300      	movs	r3, #0
 800930a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	3b01      	subs	r3, #1
 8009310:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	689a      	ldr	r2, [r3, #8]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	4013      	ands	r3, r2
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	429a      	cmp	r2, r3
 8009320:	bf0c      	ite	eq
 8009322:	2301      	moveq	r3, #1
 8009324:	2300      	movne	r3, #0
 8009326:	b2db      	uxtb	r3, r3
 8009328:	461a      	mov	r2, r3
 800932a:	79fb      	ldrb	r3, [r7, #7]
 800932c:	429a      	cmp	r2, r3
 800932e:	d19b      	bne.n	8009268 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3720      	adds	r7, #32
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	20000008 	.word	0x20000008

08009340 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b08a      	sub	sp, #40	@ 0x28
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
 800934c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009352:	f7fa fe9b 	bl	800408c <HAL_GetTick>
 8009356:	4602      	mov	r2, r0
 8009358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935a:	1a9b      	subs	r3, r3, r2
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	4413      	add	r3, r2
 8009360:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009362:	f7fa fe93 	bl	800408c <HAL_GetTick>
 8009366:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	330c      	adds	r3, #12
 800936e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009370:	4b3d      	ldr	r3, [pc, #244]	@ (8009468 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	4613      	mov	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4413      	add	r3, r2
 800937a:	00da      	lsls	r2, r3, #3
 800937c:	1ad3      	subs	r3, r2, r3
 800937e:	0d1b      	lsrs	r3, r3, #20
 8009380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009382:	fb02 f303 	mul.w	r3, r2, r3
 8009386:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009388:	e060      	b.n	800944c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009390:	d107      	bne.n	80093a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d104      	bne.n	80093a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	b2db      	uxtb	r3, r3
 800939e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a8:	d050      	beq.n	800944c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80093aa:	f7fa fe6f 	bl	800408c <HAL_GetTick>
 80093ae:	4602      	mov	r2, r0
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	1ad3      	subs	r3, r2, r3
 80093b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d902      	bls.n	80093c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80093ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d13d      	bne.n	800943c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	685a      	ldr	r2, [r3, #4]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80093ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093d8:	d111      	bne.n	80093fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093e2:	d004      	beq.n	80093ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093ec:	d107      	bne.n	80093fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009406:	d10f      	bne.n	8009428 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009416:	601a      	str	r2, [r3, #0]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009426:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009438:	2303      	movs	r3, #3
 800943a:	e010      	b.n	800945e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009442:	2300      	movs	r3, #0
 8009444:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	3b01      	subs	r3, #1
 800944a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	689a      	ldr	r2, [r3, #8]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	4013      	ands	r3, r2
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	429a      	cmp	r2, r3
 800945a:	d196      	bne.n	800938a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3728      	adds	r7, #40	@ 0x28
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	20000008 	.word	0x20000008

0800946c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af02      	add	r7, sp, #8
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	2200      	movs	r2, #0
 8009480:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f7ff ff5b 	bl	8009340 <SPI_WaitFifoStateUntilTimeout>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d007      	beq.n	80094a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009494:	f043 0220 	orr.w	r2, r3, #32
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800949c:	2303      	movs	r3, #3
 800949e:	e027      	b.n	80094f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2200      	movs	r2, #0
 80094a8:	2180      	movs	r1, #128	@ 0x80
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f7ff fec0 	bl	8009230 <SPI_WaitFlagStateUntilTimeout>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d007      	beq.n	80094c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094ba:	f043 0220 	orr.w	r2, r3, #32
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e014      	b.n	80094f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f7ff ff34 	bl	8009340 <SPI_WaitFifoStateUntilTimeout>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d007      	beq.n	80094ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094e2:	f043 0220 	orr.w	r2, r3, #32
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e000      	b.n	80094f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d101      	bne.n	800950a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e049      	b.n	800959e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d106      	bne.n	8009524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7fa fb42 	bl	8003ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2202      	movs	r2, #2
 8009528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	3304      	adds	r3, #4
 8009534:	4619      	mov	r1, r3
 8009536:	4610      	mov	r0, r2
 8009538:	f000 fbe2 	bl	8009d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
	...

080095a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d001      	beq.n	80095c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e04f      	b.n	8009660 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2202      	movs	r2, #2
 80095c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68da      	ldr	r2, [r3, #12]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f042 0201 	orr.w	r2, r2, #1
 80095d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a23      	ldr	r2, [pc, #140]	@ (800966c <HAL_TIM_Base_Start_IT+0xc4>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d01d      	beq.n	800961e <HAL_TIM_Base_Start_IT+0x76>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095ea:	d018      	beq.n	800961e <HAL_TIM_Base_Start_IT+0x76>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a1f      	ldr	r2, [pc, #124]	@ (8009670 <HAL_TIM_Base_Start_IT+0xc8>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d013      	beq.n	800961e <HAL_TIM_Base_Start_IT+0x76>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009674 <HAL_TIM_Base_Start_IT+0xcc>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d00e      	beq.n	800961e <HAL_TIM_Base_Start_IT+0x76>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a1c      	ldr	r2, [pc, #112]	@ (8009678 <HAL_TIM_Base_Start_IT+0xd0>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d009      	beq.n	800961e <HAL_TIM_Base_Start_IT+0x76>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a1b      	ldr	r2, [pc, #108]	@ (800967c <HAL_TIM_Base_Start_IT+0xd4>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d004      	beq.n	800961e <HAL_TIM_Base_Start_IT+0x76>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a19      	ldr	r2, [pc, #100]	@ (8009680 <HAL_TIM_Base_Start_IT+0xd8>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d115      	bne.n	800964a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	689a      	ldr	r2, [r3, #8]
 8009624:	4b17      	ldr	r3, [pc, #92]	@ (8009684 <HAL_TIM_Base_Start_IT+0xdc>)
 8009626:	4013      	ands	r3, r2
 8009628:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2b06      	cmp	r3, #6
 800962e:	d015      	beq.n	800965c <HAL_TIM_Base_Start_IT+0xb4>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009636:	d011      	beq.n	800965c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f042 0201 	orr.w	r2, r2, #1
 8009646:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009648:	e008      	b.n	800965c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f042 0201 	orr.w	r2, r2, #1
 8009658:	601a      	str	r2, [r3, #0]
 800965a:	e000      	b.n	800965e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800965c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	40012c00 	.word	0x40012c00
 8009670:	40000400 	.word	0x40000400
 8009674:	40000800 	.word	0x40000800
 8009678:	40000c00 	.word	0x40000c00
 800967c:	40013400 	.word	0x40013400
 8009680:	40014000 	.word	0x40014000
 8009684:	00010007 	.word	0x00010007

08009688 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d101      	bne.n	800969a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e049      	b.n	800972e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d106      	bne.n	80096b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7fa face 	bl	8003c50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2202      	movs	r2, #2
 80096b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	3304      	adds	r3, #4
 80096c4:	4619      	mov	r1, r3
 80096c6:	4610      	mov	r0, r2
 80096c8:	f000 fb1a 	bl	8009d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d109      	bne.n	800975c <HAL_TIM_PWM_Start+0x24>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b01      	cmp	r3, #1
 8009752:	bf14      	ite	ne
 8009754:	2301      	movne	r3, #1
 8009756:	2300      	moveq	r3, #0
 8009758:	b2db      	uxtb	r3, r3
 800975a:	e03c      	b.n	80097d6 <HAL_TIM_PWM_Start+0x9e>
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	2b04      	cmp	r3, #4
 8009760:	d109      	bne.n	8009776 <HAL_TIM_PWM_Start+0x3e>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009768:	b2db      	uxtb	r3, r3
 800976a:	2b01      	cmp	r3, #1
 800976c:	bf14      	ite	ne
 800976e:	2301      	movne	r3, #1
 8009770:	2300      	moveq	r3, #0
 8009772:	b2db      	uxtb	r3, r3
 8009774:	e02f      	b.n	80097d6 <HAL_TIM_PWM_Start+0x9e>
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2b08      	cmp	r3, #8
 800977a:	d109      	bne.n	8009790 <HAL_TIM_PWM_Start+0x58>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b01      	cmp	r3, #1
 8009786:	bf14      	ite	ne
 8009788:	2301      	movne	r3, #1
 800978a:	2300      	moveq	r3, #0
 800978c:	b2db      	uxtb	r3, r3
 800978e:	e022      	b.n	80097d6 <HAL_TIM_PWM_Start+0x9e>
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2b0c      	cmp	r3, #12
 8009794:	d109      	bne.n	80097aa <HAL_TIM_PWM_Start+0x72>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b01      	cmp	r3, #1
 80097a0:	bf14      	ite	ne
 80097a2:	2301      	movne	r3, #1
 80097a4:	2300      	moveq	r3, #0
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	e015      	b.n	80097d6 <HAL_TIM_PWM_Start+0x9e>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2b10      	cmp	r3, #16
 80097ae:	d109      	bne.n	80097c4 <HAL_TIM_PWM_Start+0x8c>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	bf14      	ite	ne
 80097bc:	2301      	movne	r3, #1
 80097be:	2300      	moveq	r3, #0
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	e008      	b.n	80097d6 <HAL_TIM_PWM_Start+0x9e>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	bf14      	ite	ne
 80097d0:	2301      	movne	r3, #1
 80097d2:	2300      	moveq	r3, #0
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e09c      	b.n	8009918 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d104      	bne.n	80097ee <HAL_TIM_PWM_Start+0xb6>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2202      	movs	r2, #2
 80097e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097ec:	e023      	b.n	8009836 <HAL_TIM_PWM_Start+0xfe>
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	2b04      	cmp	r3, #4
 80097f2:	d104      	bne.n	80097fe <HAL_TIM_PWM_Start+0xc6>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2202      	movs	r2, #2
 80097f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097fc:	e01b      	b.n	8009836 <HAL_TIM_PWM_Start+0xfe>
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2b08      	cmp	r3, #8
 8009802:	d104      	bne.n	800980e <HAL_TIM_PWM_Start+0xd6>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2202      	movs	r2, #2
 8009808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800980c:	e013      	b.n	8009836 <HAL_TIM_PWM_Start+0xfe>
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	2b0c      	cmp	r3, #12
 8009812:	d104      	bne.n	800981e <HAL_TIM_PWM_Start+0xe6>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2202      	movs	r2, #2
 8009818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800981c:	e00b      	b.n	8009836 <HAL_TIM_PWM_Start+0xfe>
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	2b10      	cmp	r3, #16
 8009822:	d104      	bne.n	800982e <HAL_TIM_PWM_Start+0xf6>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2202      	movs	r2, #2
 8009828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800982c:	e003      	b.n	8009836 <HAL_TIM_PWM_Start+0xfe>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2202      	movs	r2, #2
 8009832:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2201      	movs	r2, #1
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	4618      	mov	r0, r3
 8009840:	f000 fe68 	bl	800a514 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a35      	ldr	r2, [pc, #212]	@ (8009920 <HAL_TIM_PWM_Start+0x1e8>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d013      	beq.n	8009876 <HAL_TIM_PWM_Start+0x13e>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a34      	ldr	r2, [pc, #208]	@ (8009924 <HAL_TIM_PWM_Start+0x1ec>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d00e      	beq.n	8009876 <HAL_TIM_PWM_Start+0x13e>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a32      	ldr	r2, [pc, #200]	@ (8009928 <HAL_TIM_PWM_Start+0x1f0>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d009      	beq.n	8009876 <HAL_TIM_PWM_Start+0x13e>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a31      	ldr	r2, [pc, #196]	@ (800992c <HAL_TIM_PWM_Start+0x1f4>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d004      	beq.n	8009876 <HAL_TIM_PWM_Start+0x13e>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a2f      	ldr	r2, [pc, #188]	@ (8009930 <HAL_TIM_PWM_Start+0x1f8>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d101      	bne.n	800987a <HAL_TIM_PWM_Start+0x142>
 8009876:	2301      	movs	r3, #1
 8009878:	e000      	b.n	800987c <HAL_TIM_PWM_Start+0x144>
 800987a:	2300      	movs	r3, #0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d007      	beq.n	8009890 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800988e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a22      	ldr	r2, [pc, #136]	@ (8009920 <HAL_TIM_PWM_Start+0x1e8>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d01d      	beq.n	80098d6 <HAL_TIM_PWM_Start+0x19e>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098a2:	d018      	beq.n	80098d6 <HAL_TIM_PWM_Start+0x19e>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a22      	ldr	r2, [pc, #136]	@ (8009934 <HAL_TIM_PWM_Start+0x1fc>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d013      	beq.n	80098d6 <HAL_TIM_PWM_Start+0x19e>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a21      	ldr	r2, [pc, #132]	@ (8009938 <HAL_TIM_PWM_Start+0x200>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d00e      	beq.n	80098d6 <HAL_TIM_PWM_Start+0x19e>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a1f      	ldr	r2, [pc, #124]	@ (800993c <HAL_TIM_PWM_Start+0x204>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d009      	beq.n	80098d6 <HAL_TIM_PWM_Start+0x19e>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a17      	ldr	r2, [pc, #92]	@ (8009924 <HAL_TIM_PWM_Start+0x1ec>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d004      	beq.n	80098d6 <HAL_TIM_PWM_Start+0x19e>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a15      	ldr	r2, [pc, #84]	@ (8009928 <HAL_TIM_PWM_Start+0x1f0>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d115      	bne.n	8009902 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	689a      	ldr	r2, [r3, #8]
 80098dc:	4b18      	ldr	r3, [pc, #96]	@ (8009940 <HAL_TIM_PWM_Start+0x208>)
 80098de:	4013      	ands	r3, r2
 80098e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2b06      	cmp	r3, #6
 80098e6:	d015      	beq.n	8009914 <HAL_TIM_PWM_Start+0x1dc>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098ee:	d011      	beq.n	8009914 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f042 0201 	orr.w	r2, r2, #1
 80098fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009900:	e008      	b.n	8009914 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f042 0201 	orr.w	r2, r2, #1
 8009910:	601a      	str	r2, [r3, #0]
 8009912:	e000      	b.n	8009916 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009914:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	40012c00 	.word	0x40012c00
 8009924:	40013400 	.word	0x40013400
 8009928:	40014000 	.word	0x40014000
 800992c:	40014400 	.word	0x40014400
 8009930:	40014800 	.word	0x40014800
 8009934:	40000400 	.word	0x40000400
 8009938:	40000800 	.word	0x40000800
 800993c:	40000c00 	.word	0x40000c00
 8009940:	00010007 	.word	0x00010007

08009944 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b086      	sub	sp, #24
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009950:	2300      	movs	r3, #0
 8009952:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800995a:	2b01      	cmp	r3, #1
 800995c:	d101      	bne.n	8009962 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800995e:	2302      	movs	r3, #2
 8009960:	e0ff      	b.n	8009b62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2201      	movs	r2, #1
 8009966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2b14      	cmp	r3, #20
 800996e:	f200 80f0 	bhi.w	8009b52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009972:	a201      	add	r2, pc, #4	@ (adr r2, 8009978 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009978:	080099cd 	.word	0x080099cd
 800997c:	08009b53 	.word	0x08009b53
 8009980:	08009b53 	.word	0x08009b53
 8009984:	08009b53 	.word	0x08009b53
 8009988:	08009a0d 	.word	0x08009a0d
 800998c:	08009b53 	.word	0x08009b53
 8009990:	08009b53 	.word	0x08009b53
 8009994:	08009b53 	.word	0x08009b53
 8009998:	08009a4f 	.word	0x08009a4f
 800999c:	08009b53 	.word	0x08009b53
 80099a0:	08009b53 	.word	0x08009b53
 80099a4:	08009b53 	.word	0x08009b53
 80099a8:	08009a8f 	.word	0x08009a8f
 80099ac:	08009b53 	.word	0x08009b53
 80099b0:	08009b53 	.word	0x08009b53
 80099b4:	08009b53 	.word	0x08009b53
 80099b8:	08009ad1 	.word	0x08009ad1
 80099bc:	08009b53 	.word	0x08009b53
 80099c0:	08009b53 	.word	0x08009b53
 80099c4:	08009b53 	.word	0x08009b53
 80099c8:	08009b11 	.word	0x08009b11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68b9      	ldr	r1, [r7, #8]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 fa2e 	bl	8009e34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	699a      	ldr	r2, [r3, #24]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f042 0208 	orr.w	r2, r2, #8
 80099e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	699a      	ldr	r2, [r3, #24]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f022 0204 	bic.w	r2, r2, #4
 80099f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6999      	ldr	r1, [r3, #24]
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	691a      	ldr	r2, [r3, #16]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	430a      	orrs	r2, r1
 8009a08:	619a      	str	r2, [r3, #24]
      break;
 8009a0a:	e0a5      	b.n	8009b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68b9      	ldr	r1, [r7, #8]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 fa9e 	bl	8009f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	699a      	ldr	r2, [r3, #24]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	699a      	ldr	r2, [r3, #24]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	6999      	ldr	r1, [r3, #24]
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	021a      	lsls	r2, r3, #8
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	430a      	orrs	r2, r1
 8009a4a:	619a      	str	r2, [r3, #24]
      break;
 8009a4c:	e084      	b.n	8009b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68b9      	ldr	r1, [r7, #8]
 8009a54:	4618      	mov	r0, r3
 8009a56:	f000 fb07 	bl	800a068 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	69da      	ldr	r2, [r3, #28]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f042 0208 	orr.w	r2, r2, #8
 8009a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	69da      	ldr	r2, [r3, #28]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f022 0204 	bic.w	r2, r2, #4
 8009a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	69d9      	ldr	r1, [r3, #28]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	691a      	ldr	r2, [r3, #16]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	430a      	orrs	r2, r1
 8009a8a:	61da      	str	r2, [r3, #28]
      break;
 8009a8c:	e064      	b.n	8009b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68b9      	ldr	r1, [r7, #8]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f000 fb6f 	bl	800a178 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	69da      	ldr	r2, [r3, #28]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	69da      	ldr	r2, [r3, #28]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	69d9      	ldr	r1, [r3, #28]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	021a      	lsls	r2, r3, #8
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	430a      	orrs	r2, r1
 8009acc:	61da      	str	r2, [r3, #28]
      break;
 8009ace:	e043      	b.n	8009b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	68b9      	ldr	r1, [r7, #8]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 fbb8 	bl	800a24c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f042 0208 	orr.w	r2, r2, #8
 8009aea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f022 0204 	bic.w	r2, r2, #4
 8009afa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	691a      	ldr	r2, [r3, #16]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	430a      	orrs	r2, r1
 8009b0c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009b0e:	e023      	b.n	8009b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68b9      	ldr	r1, [r7, #8]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f000 fbfc 	bl	800a314 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	021a      	lsls	r2, r3, #8
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	430a      	orrs	r2, r1
 8009b4e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009b50:	e002      	b.n	8009b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	75fb      	strb	r3, [r7, #23]
      break;
 8009b56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3718      	adds	r7, #24
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop

08009b6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b76:	2300      	movs	r3, #0
 8009b78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d101      	bne.n	8009b88 <HAL_TIM_ConfigClockSource+0x1c>
 8009b84:	2302      	movs	r3, #2
 8009b86:	e0b6      	b.n	8009cf6 <HAL_TIM_ConfigClockSource+0x18a>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2202      	movs	r2, #2
 8009b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ba6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009bb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	68ba      	ldr	r2, [r7, #8]
 8009bba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bc4:	d03e      	beq.n	8009c44 <HAL_TIM_ConfigClockSource+0xd8>
 8009bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bca:	f200 8087 	bhi.w	8009cdc <HAL_TIM_ConfigClockSource+0x170>
 8009bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bd2:	f000 8086 	beq.w	8009ce2 <HAL_TIM_ConfigClockSource+0x176>
 8009bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bda:	d87f      	bhi.n	8009cdc <HAL_TIM_ConfigClockSource+0x170>
 8009bdc:	2b70      	cmp	r3, #112	@ 0x70
 8009bde:	d01a      	beq.n	8009c16 <HAL_TIM_ConfigClockSource+0xaa>
 8009be0:	2b70      	cmp	r3, #112	@ 0x70
 8009be2:	d87b      	bhi.n	8009cdc <HAL_TIM_ConfigClockSource+0x170>
 8009be4:	2b60      	cmp	r3, #96	@ 0x60
 8009be6:	d050      	beq.n	8009c8a <HAL_TIM_ConfigClockSource+0x11e>
 8009be8:	2b60      	cmp	r3, #96	@ 0x60
 8009bea:	d877      	bhi.n	8009cdc <HAL_TIM_ConfigClockSource+0x170>
 8009bec:	2b50      	cmp	r3, #80	@ 0x50
 8009bee:	d03c      	beq.n	8009c6a <HAL_TIM_ConfigClockSource+0xfe>
 8009bf0:	2b50      	cmp	r3, #80	@ 0x50
 8009bf2:	d873      	bhi.n	8009cdc <HAL_TIM_ConfigClockSource+0x170>
 8009bf4:	2b40      	cmp	r3, #64	@ 0x40
 8009bf6:	d058      	beq.n	8009caa <HAL_TIM_ConfigClockSource+0x13e>
 8009bf8:	2b40      	cmp	r3, #64	@ 0x40
 8009bfa:	d86f      	bhi.n	8009cdc <HAL_TIM_ConfigClockSource+0x170>
 8009bfc:	2b30      	cmp	r3, #48	@ 0x30
 8009bfe:	d064      	beq.n	8009cca <HAL_TIM_ConfigClockSource+0x15e>
 8009c00:	2b30      	cmp	r3, #48	@ 0x30
 8009c02:	d86b      	bhi.n	8009cdc <HAL_TIM_ConfigClockSource+0x170>
 8009c04:	2b20      	cmp	r3, #32
 8009c06:	d060      	beq.n	8009cca <HAL_TIM_ConfigClockSource+0x15e>
 8009c08:	2b20      	cmp	r3, #32
 8009c0a:	d867      	bhi.n	8009cdc <HAL_TIM_ConfigClockSource+0x170>
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d05c      	beq.n	8009cca <HAL_TIM_ConfigClockSource+0x15e>
 8009c10:	2b10      	cmp	r3, #16
 8009c12:	d05a      	beq.n	8009cca <HAL_TIM_ConfigClockSource+0x15e>
 8009c14:	e062      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c26:	f000 fc55 	bl	800a4d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009c38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	609a      	str	r2, [r3, #8]
      break;
 8009c42:	e04f      	b.n	8009ce4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c54:	f000 fc3e 	bl	800a4d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	689a      	ldr	r2, [r3, #8]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c66:	609a      	str	r2, [r3, #8]
      break;
 8009c68:	e03c      	b.n	8009ce4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c76:	461a      	mov	r2, r3
 8009c78:	f000 fbb2 	bl	800a3e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2150      	movs	r1, #80	@ 0x50
 8009c82:	4618      	mov	r0, r3
 8009c84:	f000 fc0b 	bl	800a49e <TIM_ITRx_SetConfig>
      break;
 8009c88:	e02c      	b.n	8009ce4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c96:	461a      	mov	r2, r3
 8009c98:	f000 fbd1 	bl	800a43e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2160      	movs	r1, #96	@ 0x60
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 fbfb 	bl	800a49e <TIM_ITRx_SetConfig>
      break;
 8009ca8:	e01c      	b.n	8009ce4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	f000 fb92 	bl	800a3e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2140      	movs	r1, #64	@ 0x40
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f000 fbeb 	bl	800a49e <TIM_ITRx_SetConfig>
      break;
 8009cc8:	e00c      	b.n	8009ce4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	4610      	mov	r0, r2
 8009cd6:	f000 fbe2 	bl	800a49e <TIM_ITRx_SetConfig>
      break;
 8009cda:	e003      	b.n	8009ce4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	73fb      	strb	r3, [r7, #15]
      break;
 8009ce0:	e000      	b.n	8009ce4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009ce2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
	...

08009d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b085      	sub	sp, #20
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a40      	ldr	r2, [pc, #256]	@ (8009e14 <TIM_Base_SetConfig+0x114>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d013      	beq.n	8009d40 <TIM_Base_SetConfig+0x40>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d1e:	d00f      	beq.n	8009d40 <TIM_Base_SetConfig+0x40>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a3d      	ldr	r2, [pc, #244]	@ (8009e18 <TIM_Base_SetConfig+0x118>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d00b      	beq.n	8009d40 <TIM_Base_SetConfig+0x40>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a3c      	ldr	r2, [pc, #240]	@ (8009e1c <TIM_Base_SetConfig+0x11c>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d007      	beq.n	8009d40 <TIM_Base_SetConfig+0x40>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a3b      	ldr	r2, [pc, #236]	@ (8009e20 <TIM_Base_SetConfig+0x120>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d003      	beq.n	8009d40 <TIM_Base_SetConfig+0x40>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a3a      	ldr	r2, [pc, #232]	@ (8009e24 <TIM_Base_SetConfig+0x124>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d108      	bne.n	8009d52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a2f      	ldr	r2, [pc, #188]	@ (8009e14 <TIM_Base_SetConfig+0x114>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d01f      	beq.n	8009d9a <TIM_Base_SetConfig+0x9a>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d60:	d01b      	beq.n	8009d9a <TIM_Base_SetConfig+0x9a>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a2c      	ldr	r2, [pc, #176]	@ (8009e18 <TIM_Base_SetConfig+0x118>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d017      	beq.n	8009d9a <TIM_Base_SetConfig+0x9a>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8009e1c <TIM_Base_SetConfig+0x11c>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d013      	beq.n	8009d9a <TIM_Base_SetConfig+0x9a>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a2a      	ldr	r2, [pc, #168]	@ (8009e20 <TIM_Base_SetConfig+0x120>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d00f      	beq.n	8009d9a <TIM_Base_SetConfig+0x9a>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a29      	ldr	r2, [pc, #164]	@ (8009e24 <TIM_Base_SetConfig+0x124>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d00b      	beq.n	8009d9a <TIM_Base_SetConfig+0x9a>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a28      	ldr	r2, [pc, #160]	@ (8009e28 <TIM_Base_SetConfig+0x128>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d007      	beq.n	8009d9a <TIM_Base_SetConfig+0x9a>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a27      	ldr	r2, [pc, #156]	@ (8009e2c <TIM_Base_SetConfig+0x12c>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d003      	beq.n	8009d9a <TIM_Base_SetConfig+0x9a>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a26      	ldr	r2, [pc, #152]	@ (8009e30 <TIM_Base_SetConfig+0x130>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d108      	bne.n	8009dac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	689a      	ldr	r2, [r3, #8]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a10      	ldr	r2, [pc, #64]	@ (8009e14 <TIM_Base_SetConfig+0x114>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d00f      	beq.n	8009df8 <TIM_Base_SetConfig+0xf8>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a12      	ldr	r2, [pc, #72]	@ (8009e24 <TIM_Base_SetConfig+0x124>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d00b      	beq.n	8009df8 <TIM_Base_SetConfig+0xf8>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a11      	ldr	r2, [pc, #68]	@ (8009e28 <TIM_Base_SetConfig+0x128>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d007      	beq.n	8009df8 <TIM_Base_SetConfig+0xf8>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a10      	ldr	r2, [pc, #64]	@ (8009e2c <TIM_Base_SetConfig+0x12c>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d003      	beq.n	8009df8 <TIM_Base_SetConfig+0xf8>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a0f      	ldr	r2, [pc, #60]	@ (8009e30 <TIM_Base_SetConfig+0x130>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d103      	bne.n	8009e00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	691a      	ldr	r2, [r3, #16]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	615a      	str	r2, [r3, #20]
}
 8009e06:	bf00      	nop
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	40012c00 	.word	0x40012c00
 8009e18:	40000400 	.word	0x40000400
 8009e1c:	40000800 	.word	0x40000800
 8009e20:	40000c00 	.word	0x40000c00
 8009e24:	40013400 	.word	0x40013400
 8009e28:	40014000 	.word	0x40014000
 8009e2c:	40014400 	.word	0x40014400
 8009e30:	40014800 	.word	0x40014800

08009e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b087      	sub	sp, #28
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a1b      	ldr	r3, [r3, #32]
 8009e42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a1b      	ldr	r3, [r3, #32]
 8009e48:	f023 0201 	bic.w	r2, r3, #1
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f023 0303 	bic.w	r3, r3, #3
 8009e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	f023 0302 	bic.w	r3, r3, #2
 8009e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a2c      	ldr	r2, [pc, #176]	@ (8009f40 <TIM_OC1_SetConfig+0x10c>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d00f      	beq.n	8009eb4 <TIM_OC1_SetConfig+0x80>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a2b      	ldr	r2, [pc, #172]	@ (8009f44 <TIM_OC1_SetConfig+0x110>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d00b      	beq.n	8009eb4 <TIM_OC1_SetConfig+0x80>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8009f48 <TIM_OC1_SetConfig+0x114>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d007      	beq.n	8009eb4 <TIM_OC1_SetConfig+0x80>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a29      	ldr	r2, [pc, #164]	@ (8009f4c <TIM_OC1_SetConfig+0x118>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d003      	beq.n	8009eb4 <TIM_OC1_SetConfig+0x80>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a28      	ldr	r2, [pc, #160]	@ (8009f50 <TIM_OC1_SetConfig+0x11c>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d10c      	bne.n	8009ece <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	f023 0308 	bic.w	r3, r3, #8
 8009eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	697a      	ldr	r2, [r7, #20]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f023 0304 	bic.w	r3, r3, #4
 8009ecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8009f40 <TIM_OC1_SetConfig+0x10c>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d00f      	beq.n	8009ef6 <TIM_OC1_SetConfig+0xc2>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8009f44 <TIM_OC1_SetConfig+0x110>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d00b      	beq.n	8009ef6 <TIM_OC1_SetConfig+0xc2>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a19      	ldr	r2, [pc, #100]	@ (8009f48 <TIM_OC1_SetConfig+0x114>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d007      	beq.n	8009ef6 <TIM_OC1_SetConfig+0xc2>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a18      	ldr	r2, [pc, #96]	@ (8009f4c <TIM_OC1_SetConfig+0x118>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d003      	beq.n	8009ef6 <TIM_OC1_SetConfig+0xc2>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a17      	ldr	r2, [pc, #92]	@ (8009f50 <TIM_OC1_SetConfig+0x11c>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d111      	bne.n	8009f1a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	693a      	ldr	r2, [r7, #16]
 8009f16:	4313      	orrs	r3, r2
 8009f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	693a      	ldr	r2, [r7, #16]
 8009f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	685a      	ldr	r2, [r3, #4]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	621a      	str	r2, [r3, #32]
}
 8009f34:	bf00      	nop
 8009f36:	371c      	adds	r7, #28
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	40012c00 	.word	0x40012c00
 8009f44:	40013400 	.word	0x40013400
 8009f48:	40014000 	.word	0x40014000
 8009f4c:	40014400 	.word	0x40014400
 8009f50:	40014800 	.word	0x40014800

08009f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b087      	sub	sp, #28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a1b      	ldr	r3, [r3, #32]
 8009f68:	f023 0210 	bic.w	r2, r3, #16
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	021b      	lsls	r3, r3, #8
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	f023 0320 	bic.w	r3, r3, #32
 8009fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	011b      	lsls	r3, r3, #4
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a28      	ldr	r2, [pc, #160]	@ (800a054 <TIM_OC2_SetConfig+0x100>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d003      	beq.n	8009fc0 <TIM_OC2_SetConfig+0x6c>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a27      	ldr	r2, [pc, #156]	@ (800a058 <TIM_OC2_SetConfig+0x104>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d10d      	bne.n	8009fdc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	011b      	lsls	r3, r3, #4
 8009fce:	697a      	ldr	r2, [r7, #20]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a1d      	ldr	r2, [pc, #116]	@ (800a054 <TIM_OC2_SetConfig+0x100>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d00f      	beq.n	800a004 <TIM_OC2_SetConfig+0xb0>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a1c      	ldr	r2, [pc, #112]	@ (800a058 <TIM_OC2_SetConfig+0x104>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d00b      	beq.n	800a004 <TIM_OC2_SetConfig+0xb0>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a1b      	ldr	r2, [pc, #108]	@ (800a05c <TIM_OC2_SetConfig+0x108>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d007      	beq.n	800a004 <TIM_OC2_SetConfig+0xb0>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a1a      	ldr	r2, [pc, #104]	@ (800a060 <TIM_OC2_SetConfig+0x10c>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d003      	beq.n	800a004 <TIM_OC2_SetConfig+0xb0>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a19      	ldr	r2, [pc, #100]	@ (800a064 <TIM_OC2_SetConfig+0x110>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d113      	bne.n	800a02c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a00a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a012:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	695b      	ldr	r3, [r3, #20]
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	699b      	ldr	r3, [r3, #24]
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	4313      	orrs	r3, r2
 800a02a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	693a      	ldr	r2, [r7, #16]
 800a030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	621a      	str	r2, [r3, #32]
}
 800a046:	bf00      	nop
 800a048:	371c      	adds	r7, #28
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	40012c00 	.word	0x40012c00
 800a058:	40013400 	.word	0x40013400
 800a05c:	40014000 	.word	0x40014000
 800a060:	40014400 	.word	0x40014400
 800a064:	40014800 	.word	0x40014800

0800a068 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a068:	b480      	push	{r7}
 800a06a:	b087      	sub	sp, #28
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a1b      	ldr	r3, [r3, #32]
 800a07c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	69db      	ldr	r3, [r3, #28]
 800a08e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a09a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f023 0303 	bic.w	r3, r3, #3
 800a0a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a0b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	021b      	lsls	r3, r3, #8
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a27      	ldr	r2, [pc, #156]	@ (800a164 <TIM_OC3_SetConfig+0xfc>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d003      	beq.n	800a0d2 <TIM_OC3_SetConfig+0x6a>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a26      	ldr	r2, [pc, #152]	@ (800a168 <TIM_OC3_SetConfig+0x100>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d10d      	bne.n	800a0ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a0d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	021b      	lsls	r3, r3, #8
 800a0e0:	697a      	ldr	r2, [r7, #20]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a0ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a1c      	ldr	r2, [pc, #112]	@ (800a164 <TIM_OC3_SetConfig+0xfc>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d00f      	beq.n	800a116 <TIM_OC3_SetConfig+0xae>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a1b      	ldr	r2, [pc, #108]	@ (800a168 <TIM_OC3_SetConfig+0x100>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d00b      	beq.n	800a116 <TIM_OC3_SetConfig+0xae>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a1a      	ldr	r2, [pc, #104]	@ (800a16c <TIM_OC3_SetConfig+0x104>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d007      	beq.n	800a116 <TIM_OC3_SetConfig+0xae>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a19      	ldr	r2, [pc, #100]	@ (800a170 <TIM_OC3_SetConfig+0x108>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d003      	beq.n	800a116 <TIM_OC3_SetConfig+0xae>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a18      	ldr	r2, [pc, #96]	@ (800a174 <TIM_OC3_SetConfig+0x10c>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d113      	bne.n	800a13e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a11c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	695b      	ldr	r3, [r3, #20]
 800a12a:	011b      	lsls	r3, r3, #4
 800a12c:	693a      	ldr	r2, [r7, #16]
 800a12e:	4313      	orrs	r3, r2
 800a130:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	699b      	ldr	r3, [r3, #24]
 800a136:	011b      	lsls	r3, r3, #4
 800a138:	693a      	ldr	r2, [r7, #16]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	685a      	ldr	r2, [r3, #4]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	697a      	ldr	r2, [r7, #20]
 800a156:	621a      	str	r2, [r3, #32]
}
 800a158:	bf00      	nop
 800a15a:	371c      	adds	r7, #28
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr
 800a164:	40012c00 	.word	0x40012c00
 800a168:	40013400 	.word	0x40013400
 800a16c:	40014000 	.word	0x40014000
 800a170:	40014400 	.word	0x40014400
 800a174:	40014800 	.word	0x40014800

0800a178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a178:	b480      	push	{r7}
 800a17a:	b087      	sub	sp, #28
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a1b      	ldr	r3, [r3, #32]
 800a186:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a1b      	ldr	r3, [r3, #32]
 800a18c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a1a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	021b      	lsls	r3, r3, #8
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a1c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	031b      	lsls	r3, r3, #12
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a18      	ldr	r2, [pc, #96]	@ (800a238 <TIM_OC4_SetConfig+0xc0>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d00f      	beq.n	800a1fc <TIM_OC4_SetConfig+0x84>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a17      	ldr	r2, [pc, #92]	@ (800a23c <TIM_OC4_SetConfig+0xc4>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d00b      	beq.n	800a1fc <TIM_OC4_SetConfig+0x84>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a16      	ldr	r2, [pc, #88]	@ (800a240 <TIM_OC4_SetConfig+0xc8>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d007      	beq.n	800a1fc <TIM_OC4_SetConfig+0x84>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a15      	ldr	r2, [pc, #84]	@ (800a244 <TIM_OC4_SetConfig+0xcc>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d003      	beq.n	800a1fc <TIM_OC4_SetConfig+0x84>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a14      	ldr	r2, [pc, #80]	@ (800a248 <TIM_OC4_SetConfig+0xd0>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d109      	bne.n	800a210 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a202:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	695b      	ldr	r3, [r3, #20]
 800a208:	019b      	lsls	r3, r3, #6
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	697a      	ldr	r2, [r7, #20]
 800a214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	621a      	str	r2, [r3, #32]
}
 800a22a:	bf00      	nop
 800a22c:	371c      	adds	r7, #28
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop
 800a238:	40012c00 	.word	0x40012c00
 800a23c:	40013400 	.word	0x40013400
 800a240:	40014000 	.word	0x40014000
 800a244:	40014400 	.word	0x40014400
 800a248:	40014800 	.word	0x40014800

0800a24c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a1b      	ldr	r3, [r3, #32]
 800a260:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a27a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a27e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	4313      	orrs	r3, r2
 800a288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a290:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	041b      	lsls	r3, r3, #16
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a17      	ldr	r2, [pc, #92]	@ (800a300 <TIM_OC5_SetConfig+0xb4>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d00f      	beq.n	800a2c6 <TIM_OC5_SetConfig+0x7a>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a16      	ldr	r2, [pc, #88]	@ (800a304 <TIM_OC5_SetConfig+0xb8>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d00b      	beq.n	800a2c6 <TIM_OC5_SetConfig+0x7a>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a15      	ldr	r2, [pc, #84]	@ (800a308 <TIM_OC5_SetConfig+0xbc>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d007      	beq.n	800a2c6 <TIM_OC5_SetConfig+0x7a>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a14      	ldr	r2, [pc, #80]	@ (800a30c <TIM_OC5_SetConfig+0xc0>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d003      	beq.n	800a2c6 <TIM_OC5_SetConfig+0x7a>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a13      	ldr	r2, [pc, #76]	@ (800a310 <TIM_OC5_SetConfig+0xc4>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d109      	bne.n	800a2da <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a2cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	021b      	lsls	r3, r3, #8
 800a2d4:	697a      	ldr	r2, [r7, #20]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	697a      	ldr	r2, [r7, #20]
 800a2de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	685a      	ldr	r2, [r3, #4]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	621a      	str	r2, [r3, #32]
}
 800a2f4:	bf00      	nop
 800a2f6:	371c      	adds	r7, #28
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	40012c00 	.word	0x40012c00
 800a304:	40013400 	.word	0x40013400
 800a308:	40014000 	.word	0x40014000
 800a30c:	40014400 	.word	0x40014400
 800a310:	40014800 	.word	0x40014800

0800a314 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a314:	b480      	push	{r7}
 800a316:	b087      	sub	sp, #28
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a1b      	ldr	r3, [r3, #32]
 800a328:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a342:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	021b      	lsls	r3, r3, #8
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	4313      	orrs	r3, r2
 800a352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a35a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	051b      	lsls	r3, r3, #20
 800a362:	693a      	ldr	r2, [r7, #16]
 800a364:	4313      	orrs	r3, r2
 800a366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a18      	ldr	r2, [pc, #96]	@ (800a3cc <TIM_OC6_SetConfig+0xb8>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d00f      	beq.n	800a390 <TIM_OC6_SetConfig+0x7c>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a17      	ldr	r2, [pc, #92]	@ (800a3d0 <TIM_OC6_SetConfig+0xbc>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d00b      	beq.n	800a390 <TIM_OC6_SetConfig+0x7c>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a16      	ldr	r2, [pc, #88]	@ (800a3d4 <TIM_OC6_SetConfig+0xc0>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d007      	beq.n	800a390 <TIM_OC6_SetConfig+0x7c>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a15      	ldr	r2, [pc, #84]	@ (800a3d8 <TIM_OC6_SetConfig+0xc4>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d003      	beq.n	800a390 <TIM_OC6_SetConfig+0x7c>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a14      	ldr	r2, [pc, #80]	@ (800a3dc <TIM_OC6_SetConfig+0xc8>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d109      	bne.n	800a3a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a396:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	695b      	ldr	r3, [r3, #20]
 800a39c:	029b      	lsls	r3, r3, #10
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	693a      	ldr	r2, [r7, #16]
 800a3bc:	621a      	str	r2, [r3, #32]
}
 800a3be:	bf00      	nop
 800a3c0:	371c      	adds	r7, #28
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	40012c00 	.word	0x40012c00
 800a3d0:	40013400 	.word	0x40013400
 800a3d4:	40014000 	.word	0x40014000
 800a3d8:	40014400 	.word	0x40014400
 800a3dc:	40014800 	.word	0x40014800

0800a3e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b087      	sub	sp, #28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6a1b      	ldr	r3, [r3, #32]
 800a3f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	f023 0201 	bic.w	r2, r3, #1
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a40a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	011b      	lsls	r3, r3, #4
 800a410:	693a      	ldr	r2, [r7, #16]
 800a412:	4313      	orrs	r3, r2
 800a414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	f023 030a 	bic.w	r3, r3, #10
 800a41c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	4313      	orrs	r3, r2
 800a424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	693a      	ldr	r2, [r7, #16]
 800a42a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	697a      	ldr	r2, [r7, #20]
 800a430:	621a      	str	r2, [r3, #32]
}
 800a432:	bf00      	nop
 800a434:	371c      	adds	r7, #28
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a43e:	b480      	push	{r7}
 800a440:	b087      	sub	sp, #28
 800a442:	af00      	add	r7, sp, #0
 800a444:	60f8      	str	r0, [r7, #12]
 800a446:	60b9      	str	r1, [r7, #8]
 800a448:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6a1b      	ldr	r3, [r3, #32]
 800a44e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6a1b      	ldr	r3, [r3, #32]
 800a454:	f023 0210 	bic.w	r2, r3, #16
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	031b      	lsls	r3, r3, #12
 800a46e:	693a      	ldr	r2, [r7, #16]
 800a470:	4313      	orrs	r3, r2
 800a472:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a47a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	011b      	lsls	r3, r3, #4
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	4313      	orrs	r3, r2
 800a484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	693a      	ldr	r2, [r7, #16]
 800a48a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	621a      	str	r2, [r3, #32]
}
 800a492:	bf00      	nop
 800a494:	371c      	adds	r7, #28
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr

0800a49e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a49e:	b480      	push	{r7}
 800a4a0:	b085      	sub	sp, #20
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	f043 0307 	orr.w	r3, r3, #7
 800a4c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	609a      	str	r2, [r3, #8]
}
 800a4c8:	bf00      	nop
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b087      	sub	sp, #28
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
 800a4e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a4ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	021a      	lsls	r2, r3, #8
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	431a      	orrs	r2, r3
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	697a      	ldr	r2, [r7, #20]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	697a      	ldr	r2, [r7, #20]
 800a506:	609a      	str	r2, [r3, #8]
}
 800a508:	bf00      	nop
 800a50a:	371c      	adds	r7, #28
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a514:	b480      	push	{r7}
 800a516:	b087      	sub	sp, #28
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	f003 031f 	and.w	r3, r3, #31
 800a526:	2201      	movs	r2, #1
 800a528:	fa02 f303 	lsl.w	r3, r2, r3
 800a52c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6a1a      	ldr	r2, [r3, #32]
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	43db      	mvns	r3, r3
 800a536:	401a      	ands	r2, r3
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6a1a      	ldr	r2, [r3, #32]
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	f003 031f 	and.w	r3, r3, #31
 800a546:	6879      	ldr	r1, [r7, #4]
 800a548:	fa01 f303 	lsl.w	r3, r1, r3
 800a54c:	431a      	orrs	r2, r3
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	621a      	str	r2, [r3, #32]
}
 800a552:	bf00      	nop
 800a554:	371c      	adds	r7, #28
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
	...

0800a560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a570:	2b01      	cmp	r3, #1
 800a572:	d101      	bne.n	800a578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a574:	2302      	movs	r3, #2
 800a576:	e068      	b.n	800a64a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2202      	movs	r2, #2
 800a584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a2e      	ldr	r2, [pc, #184]	@ (800a658 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d004      	beq.n	800a5ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a2d      	ldr	r2, [pc, #180]	@ (800a65c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d108      	bne.n	800a5be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a5b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a1e      	ldr	r2, [pc, #120]	@ (800a658 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d01d      	beq.n	800a61e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5ea:	d018      	beq.n	800a61e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a1b      	ldr	r2, [pc, #108]	@ (800a660 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d013      	beq.n	800a61e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a1a      	ldr	r2, [pc, #104]	@ (800a664 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d00e      	beq.n	800a61e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a18      	ldr	r2, [pc, #96]	@ (800a668 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d009      	beq.n	800a61e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a13      	ldr	r2, [pc, #76]	@ (800a65c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d004      	beq.n	800a61e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a14      	ldr	r2, [pc, #80]	@ (800a66c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d10c      	bne.n	800a638 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a624:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	68ba      	ldr	r2, [r7, #8]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3714      	adds	r7, #20
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop
 800a658:	40012c00 	.word	0x40012c00
 800a65c:	40013400 	.word	0x40013400
 800a660:	40000400 	.word	0x40000400
 800a664:	40000800 	.word	0x40000800
 800a668:	40000c00 	.word	0x40000c00
 800a66c:	40014000 	.word	0x40014000

0800a670 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a670:	b480      	push	{r7}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a67a:	2300      	movs	r3, #0
 800a67c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a684:	2b01      	cmp	r3, #1
 800a686:	d101      	bne.n	800a68c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a688:	2302      	movs	r3, #2
 800a68a:	e065      	b.n	800a758 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	691b      	ldr	r3, [r3, #16]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	695b      	ldr	r3, [r3, #20]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	041b      	lsls	r3, r3, #16
 800a702:	4313      	orrs	r3, r2
 800a704:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a16      	ldr	r2, [pc, #88]	@ (800a764 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d004      	beq.n	800a71a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a14      	ldr	r2, [pc, #80]	@ (800a768 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d115      	bne.n	800a746 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a724:	051b      	lsls	r3, r3, #20
 800a726:	4313      	orrs	r3, r2
 800a728:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	4313      	orrs	r3, r2
 800a736:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	6a1b      	ldr	r3, [r3, #32]
 800a742:	4313      	orrs	r3, r2
 800a744:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3714      	adds	r7, #20
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr
 800a764:	40012c00 	.word	0x40012c00
 800a768:	40013400 	.word	0x40013400

0800a76c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d101      	bne.n	800a77e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	e042      	b.n	800a804 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a784:	2b00      	cmp	r3, #0
 800a786:	d106      	bne.n	800a796 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f7f9 f921 	bl	80039d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2224      	movs	r2, #36	@ 0x24
 800a79a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f022 0201 	bic.w	r2, r2, #1
 800a7ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d002      	beq.n	800a7bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fbb2 	bl	800af20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 f8b3 	bl	800a928 <UART_SetConfig>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d101      	bne.n	800a7cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e01b      	b.n	800a804 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	685a      	ldr	r2, [r3, #4]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a7da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	689a      	ldr	r2, [r3, #8]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a7ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f042 0201 	orr.w	r2, r2, #1
 800a7fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fc31 	bl	800b064 <UART_CheckIdleState>
 800a802:	4603      	mov	r3, r0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b08a      	sub	sp, #40	@ 0x28
 800a810:	af02      	add	r7, sp, #8
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	603b      	str	r3, [r7, #0]
 800a818:	4613      	mov	r3, r2
 800a81a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a822:	2b20      	cmp	r3, #32
 800a824:	d17b      	bne.n	800a91e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d002      	beq.n	800a832 <HAL_UART_Transmit+0x26>
 800a82c:	88fb      	ldrh	r3, [r7, #6]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d101      	bne.n	800a836 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	e074      	b.n	800a920 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2200      	movs	r2, #0
 800a83a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2221      	movs	r2, #33	@ 0x21
 800a842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a846:	f7f9 fc21 	bl	800408c <HAL_GetTick>
 800a84a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	88fa      	ldrh	r2, [r7, #6]
 800a850:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	88fa      	ldrh	r2, [r7, #6]
 800a858:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a864:	d108      	bne.n	800a878 <HAL_UART_Transmit+0x6c>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d104      	bne.n	800a878 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a86e:	2300      	movs	r3, #0
 800a870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	61bb      	str	r3, [r7, #24]
 800a876:	e003      	b.n	800a880 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a87c:	2300      	movs	r3, #0
 800a87e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a880:	e030      	b.n	800a8e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	2200      	movs	r2, #0
 800a88a:	2180      	movs	r1, #128	@ 0x80
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 fc93 	bl	800b1b8 <UART_WaitOnFlagUntilTimeout>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d005      	beq.n	800a8a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2220      	movs	r2, #32
 800a89c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	e03d      	b.n	800a920 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10b      	bne.n	800a8c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	881a      	ldrh	r2, [r3, #0]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8b6:	b292      	uxth	r2, r2
 800a8b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a8ba:	69bb      	ldr	r3, [r7, #24]
 800a8bc:	3302      	adds	r3, #2
 800a8be:	61bb      	str	r3, [r7, #24]
 800a8c0:	e007      	b.n	800a8d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	781a      	ldrb	r2, [r3, #0]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1c8      	bne.n	800a882 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	2140      	movs	r1, #64	@ 0x40
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f000 fc5c 	bl	800b1b8 <UART_WaitOnFlagUntilTimeout>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d005      	beq.n	800a912 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2220      	movs	r2, #32
 800a90a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a90e:	2303      	movs	r3, #3
 800a910:	e006      	b.n	800a920 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2220      	movs	r2, #32
 800a916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	e000      	b.n	800a920 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a91e:	2302      	movs	r3, #2
  }
}
 800a920:	4618      	mov	r0, r3
 800a922:	3720      	adds	r7, #32
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a92c:	b08c      	sub	sp, #48	@ 0x30
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	689a      	ldr	r2, [r3, #8]
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	691b      	ldr	r3, [r3, #16]
 800a940:	431a      	orrs	r2, r3
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	431a      	orrs	r2, r3
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	69db      	ldr	r3, [r3, #28]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	4baa      	ldr	r3, [pc, #680]	@ (800ac00 <UART_SetConfig+0x2d8>)
 800a958:	4013      	ands	r3, r2
 800a95a:	697a      	ldr	r2, [r7, #20]
 800a95c:	6812      	ldr	r2, [r2, #0]
 800a95e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a960:	430b      	orrs	r3, r1
 800a962:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	68da      	ldr	r2, [r3, #12]
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	430a      	orrs	r2, r1
 800a978:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a9f      	ldr	r2, [pc, #636]	@ (800ac04 <UART_SetConfig+0x2dc>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d004      	beq.n	800a994 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	6a1b      	ldr	r3, [r3, #32]
 800a98e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a990:	4313      	orrs	r3, r2
 800a992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a99e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	6812      	ldr	r2, [r2, #0]
 800a9a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9a8:	430b      	orrs	r3, r1
 800a9aa:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9b2:	f023 010f 	bic.w	r1, r3, #15
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	430a      	orrs	r2, r1
 800a9c0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a90      	ldr	r2, [pc, #576]	@ (800ac08 <UART_SetConfig+0x2e0>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d125      	bne.n	800aa18 <UART_SetConfig+0xf0>
 800a9cc:	4b8f      	ldr	r3, [pc, #572]	@ (800ac0c <UART_SetConfig+0x2e4>)
 800a9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9d2:	f003 0303 	and.w	r3, r3, #3
 800a9d6:	2b03      	cmp	r3, #3
 800a9d8:	d81a      	bhi.n	800aa10 <UART_SetConfig+0xe8>
 800a9da:	a201      	add	r2, pc, #4	@ (adr r2, 800a9e0 <UART_SetConfig+0xb8>)
 800a9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e0:	0800a9f1 	.word	0x0800a9f1
 800a9e4:	0800aa01 	.word	0x0800aa01
 800a9e8:	0800a9f9 	.word	0x0800a9f9
 800a9ec:	0800aa09 	.word	0x0800aa09
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9f6:	e116      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800a9f8:	2302      	movs	r3, #2
 800a9fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9fe:	e112      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800aa00:	2304      	movs	r3, #4
 800aa02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa06:	e10e      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800aa08:	2308      	movs	r3, #8
 800aa0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa0e:	e10a      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800aa10:	2310      	movs	r3, #16
 800aa12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa16:	e106      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a7c      	ldr	r2, [pc, #496]	@ (800ac10 <UART_SetConfig+0x2e8>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d138      	bne.n	800aa94 <UART_SetConfig+0x16c>
 800aa22:	4b7a      	ldr	r3, [pc, #488]	@ (800ac0c <UART_SetConfig+0x2e4>)
 800aa24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa28:	f003 030c 	and.w	r3, r3, #12
 800aa2c:	2b0c      	cmp	r3, #12
 800aa2e:	d82d      	bhi.n	800aa8c <UART_SetConfig+0x164>
 800aa30:	a201      	add	r2, pc, #4	@ (adr r2, 800aa38 <UART_SetConfig+0x110>)
 800aa32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa36:	bf00      	nop
 800aa38:	0800aa6d 	.word	0x0800aa6d
 800aa3c:	0800aa8d 	.word	0x0800aa8d
 800aa40:	0800aa8d 	.word	0x0800aa8d
 800aa44:	0800aa8d 	.word	0x0800aa8d
 800aa48:	0800aa7d 	.word	0x0800aa7d
 800aa4c:	0800aa8d 	.word	0x0800aa8d
 800aa50:	0800aa8d 	.word	0x0800aa8d
 800aa54:	0800aa8d 	.word	0x0800aa8d
 800aa58:	0800aa75 	.word	0x0800aa75
 800aa5c:	0800aa8d 	.word	0x0800aa8d
 800aa60:	0800aa8d 	.word	0x0800aa8d
 800aa64:	0800aa8d 	.word	0x0800aa8d
 800aa68:	0800aa85 	.word	0x0800aa85
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa72:	e0d8      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800aa74:	2302      	movs	r3, #2
 800aa76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa7a:	e0d4      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800aa7c:	2304      	movs	r3, #4
 800aa7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa82:	e0d0      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800aa84:	2308      	movs	r3, #8
 800aa86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa8a:	e0cc      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800aa8c:	2310      	movs	r3, #16
 800aa8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa92:	e0c8      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a5e      	ldr	r2, [pc, #376]	@ (800ac14 <UART_SetConfig+0x2ec>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d125      	bne.n	800aaea <UART_SetConfig+0x1c2>
 800aa9e:	4b5b      	ldr	r3, [pc, #364]	@ (800ac0c <UART_SetConfig+0x2e4>)
 800aaa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaa4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800aaa8:	2b30      	cmp	r3, #48	@ 0x30
 800aaaa:	d016      	beq.n	800aada <UART_SetConfig+0x1b2>
 800aaac:	2b30      	cmp	r3, #48	@ 0x30
 800aaae:	d818      	bhi.n	800aae2 <UART_SetConfig+0x1ba>
 800aab0:	2b20      	cmp	r3, #32
 800aab2:	d00a      	beq.n	800aaca <UART_SetConfig+0x1a2>
 800aab4:	2b20      	cmp	r3, #32
 800aab6:	d814      	bhi.n	800aae2 <UART_SetConfig+0x1ba>
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d002      	beq.n	800aac2 <UART_SetConfig+0x19a>
 800aabc:	2b10      	cmp	r3, #16
 800aabe:	d008      	beq.n	800aad2 <UART_SetConfig+0x1aa>
 800aac0:	e00f      	b.n	800aae2 <UART_SetConfig+0x1ba>
 800aac2:	2300      	movs	r3, #0
 800aac4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aac8:	e0ad      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800aaca:	2302      	movs	r3, #2
 800aacc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aad0:	e0a9      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800aad2:	2304      	movs	r3, #4
 800aad4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aad8:	e0a5      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800aada:	2308      	movs	r3, #8
 800aadc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aae0:	e0a1      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800aae2:	2310      	movs	r3, #16
 800aae4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aae8:	e09d      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a4a      	ldr	r2, [pc, #296]	@ (800ac18 <UART_SetConfig+0x2f0>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d125      	bne.n	800ab40 <UART_SetConfig+0x218>
 800aaf4:	4b45      	ldr	r3, [pc, #276]	@ (800ac0c <UART_SetConfig+0x2e4>)
 800aaf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aafa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800aafe:	2bc0      	cmp	r3, #192	@ 0xc0
 800ab00:	d016      	beq.n	800ab30 <UART_SetConfig+0x208>
 800ab02:	2bc0      	cmp	r3, #192	@ 0xc0
 800ab04:	d818      	bhi.n	800ab38 <UART_SetConfig+0x210>
 800ab06:	2b80      	cmp	r3, #128	@ 0x80
 800ab08:	d00a      	beq.n	800ab20 <UART_SetConfig+0x1f8>
 800ab0a:	2b80      	cmp	r3, #128	@ 0x80
 800ab0c:	d814      	bhi.n	800ab38 <UART_SetConfig+0x210>
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d002      	beq.n	800ab18 <UART_SetConfig+0x1f0>
 800ab12:	2b40      	cmp	r3, #64	@ 0x40
 800ab14:	d008      	beq.n	800ab28 <UART_SetConfig+0x200>
 800ab16:	e00f      	b.n	800ab38 <UART_SetConfig+0x210>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab1e:	e082      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800ab20:	2302      	movs	r3, #2
 800ab22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab26:	e07e      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800ab28:	2304      	movs	r3, #4
 800ab2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab2e:	e07a      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800ab30:	2308      	movs	r3, #8
 800ab32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab36:	e076      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800ab38:	2310      	movs	r3, #16
 800ab3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab3e:	e072      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a35      	ldr	r2, [pc, #212]	@ (800ac1c <UART_SetConfig+0x2f4>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d12a      	bne.n	800aba0 <UART_SetConfig+0x278>
 800ab4a:	4b30      	ldr	r3, [pc, #192]	@ (800ac0c <UART_SetConfig+0x2e4>)
 800ab4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab58:	d01a      	beq.n	800ab90 <UART_SetConfig+0x268>
 800ab5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab5e:	d81b      	bhi.n	800ab98 <UART_SetConfig+0x270>
 800ab60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab64:	d00c      	beq.n	800ab80 <UART_SetConfig+0x258>
 800ab66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab6a:	d815      	bhi.n	800ab98 <UART_SetConfig+0x270>
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d003      	beq.n	800ab78 <UART_SetConfig+0x250>
 800ab70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab74:	d008      	beq.n	800ab88 <UART_SetConfig+0x260>
 800ab76:	e00f      	b.n	800ab98 <UART_SetConfig+0x270>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab7e:	e052      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800ab80:	2302      	movs	r3, #2
 800ab82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab86:	e04e      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800ab88:	2304      	movs	r3, #4
 800ab8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab8e:	e04a      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800ab90:	2308      	movs	r3, #8
 800ab92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab96:	e046      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800ab98:	2310      	movs	r3, #16
 800ab9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab9e:	e042      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a17      	ldr	r2, [pc, #92]	@ (800ac04 <UART_SetConfig+0x2dc>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d13a      	bne.n	800ac20 <UART_SetConfig+0x2f8>
 800abaa:	4b18      	ldr	r3, [pc, #96]	@ (800ac0c <UART_SetConfig+0x2e4>)
 800abac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abb0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800abb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800abb8:	d01a      	beq.n	800abf0 <UART_SetConfig+0x2c8>
 800abba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800abbe:	d81b      	bhi.n	800abf8 <UART_SetConfig+0x2d0>
 800abc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abc4:	d00c      	beq.n	800abe0 <UART_SetConfig+0x2b8>
 800abc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abca:	d815      	bhi.n	800abf8 <UART_SetConfig+0x2d0>
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d003      	beq.n	800abd8 <UART_SetConfig+0x2b0>
 800abd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abd4:	d008      	beq.n	800abe8 <UART_SetConfig+0x2c0>
 800abd6:	e00f      	b.n	800abf8 <UART_SetConfig+0x2d0>
 800abd8:	2300      	movs	r3, #0
 800abda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abde:	e022      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800abe0:	2302      	movs	r3, #2
 800abe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abe6:	e01e      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800abe8:	2304      	movs	r3, #4
 800abea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abee:	e01a      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800abf0:	2308      	movs	r3, #8
 800abf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abf6:	e016      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800abf8:	2310      	movs	r3, #16
 800abfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abfe:	e012      	b.n	800ac26 <UART_SetConfig+0x2fe>
 800ac00:	cfff69f3 	.word	0xcfff69f3
 800ac04:	40008000 	.word	0x40008000
 800ac08:	40013800 	.word	0x40013800
 800ac0c:	40021000 	.word	0x40021000
 800ac10:	40004400 	.word	0x40004400
 800ac14:	40004800 	.word	0x40004800
 800ac18:	40004c00 	.word	0x40004c00
 800ac1c:	40005000 	.word	0x40005000
 800ac20:	2310      	movs	r3, #16
 800ac22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4aae      	ldr	r2, [pc, #696]	@ (800aee4 <UART_SetConfig+0x5bc>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	f040 8097 	bne.w	800ad60 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ac36:	2b08      	cmp	r3, #8
 800ac38:	d823      	bhi.n	800ac82 <UART_SetConfig+0x35a>
 800ac3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac40 <UART_SetConfig+0x318>)
 800ac3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac40:	0800ac65 	.word	0x0800ac65
 800ac44:	0800ac83 	.word	0x0800ac83
 800ac48:	0800ac6d 	.word	0x0800ac6d
 800ac4c:	0800ac83 	.word	0x0800ac83
 800ac50:	0800ac73 	.word	0x0800ac73
 800ac54:	0800ac83 	.word	0x0800ac83
 800ac58:	0800ac83 	.word	0x0800ac83
 800ac5c:	0800ac83 	.word	0x0800ac83
 800ac60:	0800ac7b 	.word	0x0800ac7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac64:	f7fb ff16 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 800ac68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac6a:	e010      	b.n	800ac8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac6c:	4b9e      	ldr	r3, [pc, #632]	@ (800aee8 <UART_SetConfig+0x5c0>)
 800ac6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac70:	e00d      	b.n	800ac8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac72:	f7fb fe77 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 800ac76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac78:	e009      	b.n	800ac8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac80:	e005      	b.n	800ac8e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ac82:	2300      	movs	r3, #0
 800ac84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ac8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f000 8130 	beq.w	800aef6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac9a:	4a94      	ldr	r2, [pc, #592]	@ (800aeec <UART_SetConfig+0x5c4>)
 800ac9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aca0:	461a      	mov	r2, r3
 800aca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aca8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	685a      	ldr	r2, [r3, #4]
 800acae:	4613      	mov	r3, r2
 800acb0:	005b      	lsls	r3, r3, #1
 800acb2:	4413      	add	r3, r2
 800acb4:	69ba      	ldr	r2, [r7, #24]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d305      	bcc.n	800acc6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acc0:	69ba      	ldr	r2, [r7, #24]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d903      	bls.n	800acce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800accc:	e113      	b.n	800aef6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd0:	2200      	movs	r2, #0
 800acd2:	60bb      	str	r3, [r7, #8]
 800acd4:	60fa      	str	r2, [r7, #12]
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acda:	4a84      	ldr	r2, [pc, #528]	@ (800aeec <UART_SetConfig+0x5c4>)
 800acdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	2200      	movs	r2, #0
 800ace4:	603b      	str	r3, [r7, #0]
 800ace6:	607a      	str	r2, [r7, #4]
 800ace8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800acf0:	f7f5 ff8a 	bl	8000c08 <__aeabi_uldivmod>
 800acf4:	4602      	mov	r2, r0
 800acf6:	460b      	mov	r3, r1
 800acf8:	4610      	mov	r0, r2
 800acfa:	4619      	mov	r1, r3
 800acfc:	f04f 0200 	mov.w	r2, #0
 800ad00:	f04f 0300 	mov.w	r3, #0
 800ad04:	020b      	lsls	r3, r1, #8
 800ad06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad0a:	0202      	lsls	r2, r0, #8
 800ad0c:	6979      	ldr	r1, [r7, #20]
 800ad0e:	6849      	ldr	r1, [r1, #4]
 800ad10:	0849      	lsrs	r1, r1, #1
 800ad12:	2000      	movs	r0, #0
 800ad14:	460c      	mov	r4, r1
 800ad16:	4605      	mov	r5, r0
 800ad18:	eb12 0804 	adds.w	r8, r2, r4
 800ad1c:	eb43 0905 	adc.w	r9, r3, r5
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	469a      	mov	sl, r3
 800ad28:	4693      	mov	fp, r2
 800ad2a:	4652      	mov	r2, sl
 800ad2c:	465b      	mov	r3, fp
 800ad2e:	4640      	mov	r0, r8
 800ad30:	4649      	mov	r1, r9
 800ad32:	f7f5 ff69 	bl	8000c08 <__aeabi_uldivmod>
 800ad36:	4602      	mov	r2, r0
 800ad38:	460b      	mov	r3, r1
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad3e:	6a3b      	ldr	r3, [r7, #32]
 800ad40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad44:	d308      	bcc.n	800ad58 <UART_SetConfig+0x430>
 800ad46:	6a3b      	ldr	r3, [r7, #32]
 800ad48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad4c:	d204      	bcs.n	800ad58 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	6a3a      	ldr	r2, [r7, #32]
 800ad54:	60da      	str	r2, [r3, #12]
 800ad56:	e0ce      	b.n	800aef6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ad5e:	e0ca      	b.n	800aef6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	69db      	ldr	r3, [r3, #28]
 800ad64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad68:	d166      	bne.n	800ae38 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ad6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad6e:	2b08      	cmp	r3, #8
 800ad70:	d827      	bhi.n	800adc2 <UART_SetConfig+0x49a>
 800ad72:	a201      	add	r2, pc, #4	@ (adr r2, 800ad78 <UART_SetConfig+0x450>)
 800ad74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad78:	0800ad9d 	.word	0x0800ad9d
 800ad7c:	0800ada5 	.word	0x0800ada5
 800ad80:	0800adad 	.word	0x0800adad
 800ad84:	0800adc3 	.word	0x0800adc3
 800ad88:	0800adb3 	.word	0x0800adb3
 800ad8c:	0800adc3 	.word	0x0800adc3
 800ad90:	0800adc3 	.word	0x0800adc3
 800ad94:	0800adc3 	.word	0x0800adc3
 800ad98:	0800adbb 	.word	0x0800adbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad9c:	f7fb fe7a 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 800ada0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ada2:	e014      	b.n	800adce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ada4:	f7fb fe8c 	bl	8006ac0 <HAL_RCC_GetPCLK2Freq>
 800ada8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800adaa:	e010      	b.n	800adce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800adac:	4b4e      	ldr	r3, [pc, #312]	@ (800aee8 <UART_SetConfig+0x5c0>)
 800adae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800adb0:	e00d      	b.n	800adce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adb2:	f7fb fdd7 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 800adb6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800adb8:	e009      	b.n	800adce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800adc0:	e005      	b.n	800adce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800adc2:	2300      	movs	r3, #0
 800adc4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800adcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800adce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add0:	2b00      	cmp	r3, #0
 800add2:	f000 8090 	beq.w	800aef6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adda:	4a44      	ldr	r2, [pc, #272]	@ (800aeec <UART_SetConfig+0x5c4>)
 800addc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ade0:	461a      	mov	r2, r3
 800ade2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ade8:	005a      	lsls	r2, r3, #1
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	085b      	lsrs	r3, r3, #1
 800adf0:	441a      	add	r2, r3
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800adfa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adfc:	6a3b      	ldr	r3, [r7, #32]
 800adfe:	2b0f      	cmp	r3, #15
 800ae00:	d916      	bls.n	800ae30 <UART_SetConfig+0x508>
 800ae02:	6a3b      	ldr	r3, [r7, #32]
 800ae04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae08:	d212      	bcs.n	800ae30 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae0a:	6a3b      	ldr	r3, [r7, #32]
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	f023 030f 	bic.w	r3, r3, #15
 800ae12:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae14:	6a3b      	ldr	r3, [r7, #32]
 800ae16:	085b      	lsrs	r3, r3, #1
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	f003 0307 	and.w	r3, r3, #7
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	8bfb      	ldrh	r3, [r7, #30]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	8bfa      	ldrh	r2, [r7, #30]
 800ae2c:	60da      	str	r2, [r3, #12]
 800ae2e:	e062      	b.n	800aef6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ae36:	e05e      	b.n	800aef6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae3c:	2b08      	cmp	r3, #8
 800ae3e:	d828      	bhi.n	800ae92 <UART_SetConfig+0x56a>
 800ae40:	a201      	add	r2, pc, #4	@ (adr r2, 800ae48 <UART_SetConfig+0x520>)
 800ae42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae46:	bf00      	nop
 800ae48:	0800ae6d 	.word	0x0800ae6d
 800ae4c:	0800ae75 	.word	0x0800ae75
 800ae50:	0800ae7d 	.word	0x0800ae7d
 800ae54:	0800ae93 	.word	0x0800ae93
 800ae58:	0800ae83 	.word	0x0800ae83
 800ae5c:	0800ae93 	.word	0x0800ae93
 800ae60:	0800ae93 	.word	0x0800ae93
 800ae64:	0800ae93 	.word	0x0800ae93
 800ae68:	0800ae8b 	.word	0x0800ae8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae6c:	f7fb fe12 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 800ae70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae72:	e014      	b.n	800ae9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae74:	f7fb fe24 	bl	8006ac0 <HAL_RCC_GetPCLK2Freq>
 800ae78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae7a:	e010      	b.n	800ae9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae7c:	4b1a      	ldr	r3, [pc, #104]	@ (800aee8 <UART_SetConfig+0x5c0>)
 800ae7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae80:	e00d      	b.n	800ae9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae82:	f7fb fd6f 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 800ae86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae88:	e009      	b.n	800ae9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae90:	e005      	b.n	800ae9e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ae92:	2300      	movs	r3, #0
 800ae94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ae9c:	bf00      	nop
    }

    if (pclk != 0U)
 800ae9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d028      	beq.n	800aef6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aea8:	4a10      	ldr	r2, [pc, #64]	@ (800aeec <UART_SetConfig+0x5c4>)
 800aeaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aeae:	461a      	mov	r2, r3
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb2:	fbb3 f2f2 	udiv	r2, r3, r2
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	085b      	lsrs	r3, r3, #1
 800aebc:	441a      	add	r2, r3
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aec6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aec8:	6a3b      	ldr	r3, [r7, #32]
 800aeca:	2b0f      	cmp	r3, #15
 800aecc:	d910      	bls.n	800aef0 <UART_SetConfig+0x5c8>
 800aece:	6a3b      	ldr	r3, [r7, #32]
 800aed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aed4:	d20c      	bcs.n	800aef0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aed6:	6a3b      	ldr	r3, [r7, #32]
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	60da      	str	r2, [r3, #12]
 800aee0:	e009      	b.n	800aef6 <UART_SetConfig+0x5ce>
 800aee2:	bf00      	nop
 800aee4:	40008000 	.word	0x40008000
 800aee8:	00f42400 	.word	0x00f42400
 800aeec:	0800f704 	.word	0x0800f704
      }
      else
      {
        ret = HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2201      	movs	r2, #1
 800aefa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	2201      	movs	r2, #1
 800af02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2200      	movs	r2, #0
 800af0a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	2200      	movs	r2, #0
 800af10:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800af12:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800af16:	4618      	mov	r0, r3
 800af18:	3730      	adds	r7, #48	@ 0x30
 800af1a:	46bd      	mov	sp, r7
 800af1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800af20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af2c:	f003 0308 	and.w	r3, r3, #8
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00a      	beq.n	800af4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	430a      	orrs	r2, r1
 800af48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af4e:	f003 0301 	and.w	r3, r3, #1
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00a      	beq.n	800af6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	430a      	orrs	r2, r1
 800af6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af70:	f003 0302 	and.w	r3, r3, #2
 800af74:	2b00      	cmp	r3, #0
 800af76:	d00a      	beq.n	800af8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	430a      	orrs	r2, r1
 800af8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af92:	f003 0304 	and.w	r3, r3, #4
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00a      	beq.n	800afb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	430a      	orrs	r2, r1
 800afae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afb4:	f003 0310 	and.w	r3, r3, #16
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00a      	beq.n	800afd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	430a      	orrs	r2, r1
 800afd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afd6:	f003 0320 	and.w	r3, r3, #32
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00a      	beq.n	800aff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	430a      	orrs	r2, r1
 800aff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800affc:	2b00      	cmp	r3, #0
 800affe:	d01a      	beq.n	800b036 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	430a      	orrs	r2, r1
 800b014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b01a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b01e:	d10a      	bne.n	800b036 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	430a      	orrs	r2, r1
 800b034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b03a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00a      	beq.n	800b058 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	430a      	orrs	r2, r1
 800b056:	605a      	str	r2, [r3, #4]
  }
}
 800b058:	bf00      	nop
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b098      	sub	sp, #96	@ 0x60
 800b068:	af02      	add	r7, sp, #8
 800b06a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b074:	f7f9 f80a 	bl	800408c <HAL_GetTick>
 800b078:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f003 0308 	and.w	r3, r3, #8
 800b084:	2b08      	cmp	r3, #8
 800b086:	d12f      	bne.n	800b0e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b088:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b090:	2200      	movs	r2, #0
 800b092:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 f88e 	bl	800b1b8 <UART_WaitOnFlagUntilTimeout>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d022      	beq.n	800b0e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0aa:	e853 3f00 	ldrex	r3, [r3]
 800b0ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b0b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	461a      	mov	r2, r3
 800b0be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0c8:	e841 2300 	strex	r3, r2, [r1]
 800b0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b0ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1e6      	bne.n	800b0a2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2220      	movs	r2, #32
 800b0d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0e4:	2303      	movs	r3, #3
 800b0e6:	e063      	b.n	800b1b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f003 0304 	and.w	r3, r3, #4
 800b0f2:	2b04      	cmp	r3, #4
 800b0f4:	d149      	bne.n	800b18a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b0fa:	9300      	str	r3, [sp, #0]
 800b0fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0fe:	2200      	movs	r2, #0
 800b100:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 f857 	bl	800b1b8 <UART_WaitOnFlagUntilTimeout>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d03c      	beq.n	800b18a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b118:	e853 3f00 	ldrex	r3, [r3]
 800b11c:	623b      	str	r3, [r7, #32]
   return(result);
 800b11e:	6a3b      	ldr	r3, [r7, #32]
 800b120:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b124:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	461a      	mov	r2, r3
 800b12c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b12e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b130:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b136:	e841 2300 	strex	r3, r2, [r1]
 800b13a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1e6      	bne.n	800b110 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	3308      	adds	r3, #8
 800b148:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	e853 3f00 	ldrex	r3, [r3]
 800b150:	60fb      	str	r3, [r7, #12]
   return(result);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f023 0301 	bic.w	r3, r3, #1
 800b158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	3308      	adds	r3, #8
 800b160:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b162:	61fa      	str	r2, [r7, #28]
 800b164:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b166:	69b9      	ldr	r1, [r7, #24]
 800b168:	69fa      	ldr	r2, [r7, #28]
 800b16a:	e841 2300 	strex	r3, r2, [r1]
 800b16e:	617b      	str	r3, [r7, #20]
   return(result);
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d1e5      	bne.n	800b142 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2220      	movs	r2, #32
 800b17a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b186:	2303      	movs	r3, #3
 800b188:	e012      	b.n	800b1b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2220      	movs	r2, #32
 800b18e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2220      	movs	r2, #32
 800b196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3758      	adds	r7, #88	@ 0x58
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	603b      	str	r3, [r7, #0]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1c8:	e049      	b.n	800b25e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d0:	d045      	beq.n	800b25e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1d2:	f7f8 ff5b 	bl	800408c <HAL_GetTick>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	1ad3      	subs	r3, r2, r3
 800b1dc:	69ba      	ldr	r2, [r7, #24]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d302      	bcc.n	800b1e8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d101      	bne.n	800b1ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b1e8:	2303      	movs	r3, #3
 800b1ea:	e048      	b.n	800b27e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f003 0304 	and.w	r3, r3, #4
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d031      	beq.n	800b25e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	69db      	ldr	r3, [r3, #28]
 800b200:	f003 0308 	and.w	r3, r3, #8
 800b204:	2b08      	cmp	r3, #8
 800b206:	d110      	bne.n	800b22a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2208      	movs	r2, #8
 800b20e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f000 f838 	bl	800b286 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2208      	movs	r2, #8
 800b21a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	e029      	b.n	800b27e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	69db      	ldr	r3, [r3, #28]
 800b230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b234:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b238:	d111      	bne.n	800b25e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b242:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f000 f81e 	bl	800b286 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2220      	movs	r2, #32
 800b24e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2200      	movs	r2, #0
 800b256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b25a:	2303      	movs	r3, #3
 800b25c:	e00f      	b.n	800b27e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	69da      	ldr	r2, [r3, #28]
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	4013      	ands	r3, r2
 800b268:	68ba      	ldr	r2, [r7, #8]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	bf0c      	ite	eq
 800b26e:	2301      	moveq	r3, #1
 800b270:	2300      	movne	r3, #0
 800b272:	b2db      	uxtb	r3, r3
 800b274:	461a      	mov	r2, r3
 800b276:	79fb      	ldrb	r3, [r7, #7]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d0a6      	beq.n	800b1ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3710      	adds	r7, #16
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b286:	b480      	push	{r7}
 800b288:	b095      	sub	sp, #84	@ 0x54
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b296:	e853 3f00 	ldrex	r3, [r3]
 800b29a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b2a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b2b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b2b4:	e841 2300 	strex	r3, r2, [r1]
 800b2b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d1e6      	bne.n	800b28e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	3308      	adds	r3, #8
 800b2c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c8:	6a3b      	ldr	r3, [r7, #32]
 800b2ca:	e853 3f00 	ldrex	r3, [r3]
 800b2ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b2d6:	f023 0301 	bic.w	r3, r3, #1
 800b2da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	3308      	adds	r3, #8
 800b2e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b2e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b2ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2ec:	e841 2300 	strex	r3, r2, [r1]
 800b2f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1e3      	bne.n	800b2c0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d118      	bne.n	800b332 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	e853 3f00 	ldrex	r3, [r3]
 800b30c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	f023 0310 	bic.w	r3, r3, #16
 800b314:	647b      	str	r3, [r7, #68]	@ 0x44
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	461a      	mov	r2, r3
 800b31c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b31e:	61bb      	str	r3, [r7, #24]
 800b320:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b322:	6979      	ldr	r1, [r7, #20]
 800b324:	69ba      	ldr	r2, [r7, #24]
 800b326:	e841 2300 	strex	r3, r2, [r1]
 800b32a:	613b      	str	r3, [r7, #16]
   return(result);
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d1e6      	bne.n	800b300 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2220      	movs	r2, #32
 800b336:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b346:	bf00      	nop
 800b348:	3754      	adds	r7, #84	@ 0x54
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr

0800b352 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b352:	b480      	push	{r7}
 800b354:	b085      	sub	sp, #20
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b360:	2b01      	cmp	r3, #1
 800b362:	d101      	bne.n	800b368 <HAL_UARTEx_DisableFifoMode+0x16>
 800b364:	2302      	movs	r3, #2
 800b366:	e027      	b.n	800b3b8 <HAL_UARTEx_DisableFifoMode+0x66>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2224      	movs	r2, #36	@ 0x24
 800b374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f022 0201 	bic.w	r2, r2, #1
 800b38e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b396:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2220      	movs	r2, #32
 800b3aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d101      	bne.n	800b3dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b3d8:	2302      	movs	r3, #2
 800b3da:	e02d      	b.n	800b438 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2224      	movs	r2, #36	@ 0x24
 800b3e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f022 0201 	bic.w	r2, r2, #1
 800b402:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	430a      	orrs	r2, r1
 800b416:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 f84f 	bl	800b4bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2220      	movs	r2, #32
 800b42a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b436:	2300      	movs	r3, #0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3710      	adds	r7, #16
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b450:	2b01      	cmp	r3, #1
 800b452:	d101      	bne.n	800b458 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b454:	2302      	movs	r3, #2
 800b456:	e02d      	b.n	800b4b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2224      	movs	r2, #36	@ 0x24
 800b464:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f022 0201 	bic.w	r2, r2, #1
 800b47e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	430a      	orrs	r2, r1
 800b492:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 f811 	bl	800b4bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2220      	movs	r2, #32
 800b4a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d108      	bne.n	800b4de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b4dc:	e031      	b.n	800b542 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b4de:	2308      	movs	r3, #8
 800b4e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b4e2:	2308      	movs	r3, #8
 800b4e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	0e5b      	lsrs	r3, r3, #25
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	f003 0307 	and.w	r3, r3, #7
 800b4f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	0f5b      	lsrs	r3, r3, #29
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	f003 0307 	and.w	r3, r3, #7
 800b504:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b506:	7bbb      	ldrb	r3, [r7, #14]
 800b508:	7b3a      	ldrb	r2, [r7, #12]
 800b50a:	4911      	ldr	r1, [pc, #68]	@ (800b550 <UARTEx_SetNbDataToProcess+0x94>)
 800b50c:	5c8a      	ldrb	r2, [r1, r2]
 800b50e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b512:	7b3a      	ldrb	r2, [r7, #12]
 800b514:	490f      	ldr	r1, [pc, #60]	@ (800b554 <UARTEx_SetNbDataToProcess+0x98>)
 800b516:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b518:	fb93 f3f2 	sdiv	r3, r3, r2
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b524:	7bfb      	ldrb	r3, [r7, #15]
 800b526:	7b7a      	ldrb	r2, [r7, #13]
 800b528:	4909      	ldr	r1, [pc, #36]	@ (800b550 <UARTEx_SetNbDataToProcess+0x94>)
 800b52a:	5c8a      	ldrb	r2, [r1, r2]
 800b52c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b530:	7b7a      	ldrb	r2, [r7, #13]
 800b532:	4908      	ldr	r1, [pc, #32]	@ (800b554 <UARTEx_SetNbDataToProcess+0x98>)
 800b534:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b536:	fb93 f3f2 	sdiv	r3, r3, r2
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b542:	bf00      	nop
 800b544:	3714      	adds	r7, #20
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	0800f71c 	.word	0x0800f71c
 800b554:	0800f724 	.word	0x0800f724

0800b558 <arm_mean_f32>:
 800b558:	b430      	push	{r4, r5}
 800b55a:	088d      	lsrs	r5, r1, #2
 800b55c:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800b5d0 <arm_mean_f32+0x78>
 800b560:	d018      	beq.n	800b594 <arm_mean_f32+0x3c>
 800b562:	f100 0310 	add.w	r3, r0, #16
 800b566:	462c      	mov	r4, r5
 800b568:	ed53 5a04 	vldr	s11, [r3, #-16]
 800b56c:	ed13 6a03 	vldr	s12, [r3, #-12]
 800b570:	ed53 6a02 	vldr	s13, [r3, #-8]
 800b574:	ed13 7a01 	vldr	s14, [r3, #-4]
 800b578:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b57c:	3c01      	subs	r4, #1
 800b57e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b582:	f103 0310 	add.w	r3, r3, #16
 800b586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b58a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b58e:	d1eb      	bne.n	800b568 <arm_mean_f32+0x10>
 800b590:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b594:	f011 0303 	ands.w	r3, r1, #3
 800b598:	d00f      	beq.n	800b5ba <arm_mean_f32+0x62>
 800b59a:	ed90 7a00 	vldr	s14, [r0]
 800b59e:	3b01      	subs	r3, #1
 800b5a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b5a4:	d009      	beq.n	800b5ba <arm_mean_f32+0x62>
 800b5a6:	ed90 7a01 	vldr	s14, [r0, #4]
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b5b0:	bf1c      	itt	ne
 800b5b2:	ed90 7a02 	vldrne	s14, [r0, #8]
 800b5b6:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800b5ba:	ee07 1a10 	vmov	s14, r1
 800b5be:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b5c2:	bc30      	pop	{r4, r5}
 800b5c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b5c8:	edc2 6a00 	vstr	s13, [r2]
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	00000000 	.word	0x00000000

0800b5d4 <arm_max_f32>:
 800b5d4:	f101 3cff 	add.w	ip, r1, #4294967295
 800b5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5da:	4607      	mov	r7, r0
 800b5dc:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800b5e0:	ecf7 7a01 	vldmia	r7!, {s15}
 800b5e4:	d060      	beq.n	800b6a8 <arm_max_f32+0xd4>
 800b5e6:	2400      	movs	r4, #0
 800b5e8:	3014      	adds	r0, #20
 800b5ea:	4625      	mov	r5, r4
 800b5ec:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800b5f0:	ed10 7a04 	vldr	s14, [r0, #-16]
 800b5f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5fc:	bf48      	it	mi
 800b5fe:	eef0 7a47 	vmovmi.f32	s15, s14
 800b602:	ed10 7a03 	vldr	s14, [r0, #-12]
 800b606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b60a:	bf48      	it	mi
 800b60c:	1c65      	addmi	r5, r4, #1
 800b60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b612:	bf48      	it	mi
 800b614:	eef0 7a47 	vmovmi.f32	s15, s14
 800b618:	ed10 7a02 	vldr	s14, [r0, #-8]
 800b61c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b620:	bf48      	it	mi
 800b622:	1ca5      	addmi	r5, r4, #2
 800b624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b628:	bf48      	it	mi
 800b62a:	eef0 7a47 	vmovmi.f32	s15, s14
 800b62e:	ed10 7a01 	vldr	s14, [r0, #-4]
 800b632:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b636:	bf48      	it	mi
 800b638:	1ce5      	addmi	r5, r4, #3
 800b63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b63e:	f104 0404 	add.w	r4, r4, #4
 800b642:	bf44      	itt	mi
 800b644:	eef0 7a47 	vmovmi.f32	s15, s14
 800b648:	4625      	movmi	r5, r4
 800b64a:	42a6      	cmp	r6, r4
 800b64c:	f100 0010 	add.w	r0, r0, #16
 800b650:	d1ce      	bne.n	800b5f0 <arm_max_f32+0x1c>
 800b652:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800b656:	f01c 0003 	ands.w	r0, ip, #3
 800b65a:	d021      	beq.n	800b6a0 <arm_max_f32+0xcc>
 800b65c:	ed97 7a00 	vldr	s14, [r7]
 800b660:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b668:	bfc4      	itt	gt
 800b66a:	eef0 7a47 	vmovgt.f32	s15, s14
 800b66e:	1a0d      	subgt	r5, r1, r0
 800b670:	3801      	subs	r0, #1
 800b672:	d015      	beq.n	800b6a0 <arm_max_f32+0xcc>
 800b674:	ed97 7a01 	vldr	s14, [r7, #4]
 800b678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b680:	bf44      	itt	mi
 800b682:	eef0 7a47 	vmovmi.f32	s15, s14
 800b686:	1a0d      	submi	r5, r1, r0
 800b688:	2801      	cmp	r0, #1
 800b68a:	d009      	beq.n	800b6a0 <arm_max_f32+0xcc>
 800b68c:	ed97 7a02 	vldr	s14, [r7, #8]
 800b690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b698:	bfc4      	itt	gt
 800b69a:	eef0 7a47 	vmovgt.f32	s15, s14
 800b69e:	4665      	movgt	r5, ip
 800b6a0:	edc2 7a00 	vstr	s15, [r2]
 800b6a4:	601d      	str	r5, [r3, #0]
 800b6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6a8:	4675      	mov	r5, lr
 800b6aa:	e7d4      	b.n	800b656 <arm_max_f32+0x82>

0800b6ac <arm_rfft_32_fast_init_f32>:
 800b6ac:	b178      	cbz	r0, 800b6ce <arm_rfft_32_fast_init_f32+0x22>
 800b6ae:	b430      	push	{r4, r5}
 800b6b0:	4908      	ldr	r1, [pc, #32]	@ (800b6d4 <arm_rfft_32_fast_init_f32+0x28>)
 800b6b2:	4a09      	ldr	r2, [pc, #36]	@ (800b6d8 <arm_rfft_32_fast_init_f32+0x2c>)
 800b6b4:	2310      	movs	r3, #16
 800b6b6:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b6ba:	8003      	strh	r3, [r0, #0]
 800b6bc:	2520      	movs	r5, #32
 800b6be:	2414      	movs	r4, #20
 800b6c0:	4b06      	ldr	r3, [pc, #24]	@ (800b6dc <arm_rfft_32_fast_init_f32+0x30>)
 800b6c2:	8205      	strh	r5, [r0, #16]
 800b6c4:	8184      	strh	r4, [r0, #12]
 800b6c6:	6143      	str	r3, [r0, #20]
 800b6c8:	bc30      	pop	{r4, r5}
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	4770      	bx	lr
 800b6ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d2:	4770      	bx	lr
 800b6d4:	080106dc 	.word	0x080106dc
 800b6d8:	08015014 	.word	0x08015014
 800b6dc:	0801dd94 	.word	0x0801dd94

0800b6e0 <arm_rfft_64_fast_init_f32>:
 800b6e0:	b178      	cbz	r0, 800b702 <arm_rfft_64_fast_init_f32+0x22>
 800b6e2:	b430      	push	{r4, r5}
 800b6e4:	4908      	ldr	r1, [pc, #32]	@ (800b708 <arm_rfft_64_fast_init_f32+0x28>)
 800b6e6:	4a09      	ldr	r2, [pc, #36]	@ (800b70c <arm_rfft_64_fast_init_f32+0x2c>)
 800b6e8:	2320      	movs	r3, #32
 800b6ea:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b6ee:	8003      	strh	r3, [r0, #0]
 800b6f0:	2540      	movs	r5, #64	@ 0x40
 800b6f2:	2430      	movs	r4, #48	@ 0x30
 800b6f4:	4b06      	ldr	r3, [pc, #24]	@ (800b710 <arm_rfft_64_fast_init_f32+0x30>)
 800b6f6:	8205      	strh	r5, [r0, #16]
 800b6f8:	8184      	strh	r4, [r0, #12]
 800b6fa:	6143      	str	r3, [r0, #20]
 800b6fc:	bc30      	pop	{r4, r5}
 800b6fe:	2000      	movs	r0, #0
 800b700:	4770      	bx	lr
 800b702:	f04f 30ff 	mov.w	r0, #4294967295
 800b706:	4770      	bx	lr
 800b708:	08012834 	.word	0x08012834
 800b70c:	08019894 	.word	0x08019894
 800b710:	08022614 	.word	0x08022614

0800b714 <arm_rfft_256_fast_init_f32>:
 800b714:	b180      	cbz	r0, 800b738 <arm_rfft_256_fast_init_f32+0x24>
 800b716:	b430      	push	{r4, r5}
 800b718:	4909      	ldr	r1, [pc, #36]	@ (800b740 <arm_rfft_256_fast_init_f32+0x2c>)
 800b71a:	4a0a      	ldr	r2, [pc, #40]	@ (800b744 <arm_rfft_256_fast_init_f32+0x30>)
 800b71c:	2380      	movs	r3, #128	@ 0x80
 800b71e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b722:	8003      	strh	r3, [r0, #0]
 800b724:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800b728:	24d0      	movs	r4, #208	@ 0xd0
 800b72a:	4b07      	ldr	r3, [pc, #28]	@ (800b748 <arm_rfft_256_fast_init_f32+0x34>)
 800b72c:	8205      	strh	r5, [r0, #16]
 800b72e:	8184      	strh	r4, [r0, #12]
 800b730:	6143      	str	r3, [r0, #20]
 800b732:	bc30      	pop	{r4, r5}
 800b734:	2000      	movs	r0, #0
 800b736:	4770      	bx	lr
 800b738:	f04f 30ff 	mov.w	r0, #4294967295
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	0801053c 	.word	0x0801053c
 800b744:	08014c14 	.word	0x08014c14
 800b748:	0801d994 	.word	0x0801d994

0800b74c <arm_rfft_512_fast_init_f32>:
 800b74c:	b190      	cbz	r0, 800b774 <arm_rfft_512_fast_init_f32+0x28>
 800b74e:	b430      	push	{r4, r5}
 800b750:	490a      	ldr	r1, [pc, #40]	@ (800b77c <arm_rfft_512_fast_init_f32+0x30>)
 800b752:	4a0b      	ldr	r2, [pc, #44]	@ (800b780 <arm_rfft_512_fast_init_f32+0x34>)
 800b754:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b758:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b75c:	8003      	strh	r3, [r0, #0]
 800b75e:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800b762:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800b766:	4b07      	ldr	r3, [pc, #28]	@ (800b784 <arm_rfft_512_fast_init_f32+0x38>)
 800b768:	8205      	strh	r5, [r0, #16]
 800b76a:	8184      	strh	r4, [r0, #12]
 800b76c:	6143      	str	r3, [r0, #20]
 800b76e:	bc30      	pop	{r4, r5}
 800b770:	2000      	movs	r0, #0
 800b772:	4770      	bx	lr
 800b774:	f04f 30ff 	mov.w	r0, #4294967295
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	080124c4 	.word	0x080124c4
 800b780:	08019094 	.word	0x08019094
 800b784:	08021e14 	.word	0x08021e14

0800b788 <arm_rfft_1024_fast_init_f32>:
 800b788:	b190      	cbz	r0, 800b7b0 <arm_rfft_1024_fast_init_f32+0x28>
 800b78a:	b430      	push	{r4, r5}
 800b78c:	490a      	ldr	r1, [pc, #40]	@ (800b7b8 <arm_rfft_1024_fast_init_f32+0x30>)
 800b78e:	4a0b      	ldr	r2, [pc, #44]	@ (800b7bc <arm_rfft_1024_fast_init_f32+0x34>)
 800b790:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b794:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b798:	8003      	strh	r3, [r0, #0]
 800b79a:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800b79e:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800b7a2:	4b07      	ldr	r3, [pc, #28]	@ (800b7c0 <arm_rfft_1024_fast_init_f32+0x38>)
 800b7a4:	8205      	strh	r5, [r0, #16]
 800b7a6:	8184      	strh	r4, [r0, #12]
 800b7a8:	6143      	str	r3, [r0, #20]
 800b7aa:	bc30      	pop	{r4, r5}
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	4770      	bx	lr
 800b7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	08012894 	.word	0x08012894
 800b7bc:	08019994 	.word	0x08019994
 800b7c0:	0801a994 	.word	0x0801a994

0800b7c4 <arm_rfft_2048_fast_init_f32>:
 800b7c4:	b190      	cbz	r0, 800b7ec <arm_rfft_2048_fast_init_f32+0x28>
 800b7c6:	b430      	push	{r4, r5}
 800b7c8:	490a      	ldr	r1, [pc, #40]	@ (800b7f4 <arm_rfft_2048_fast_init_f32+0x30>)
 800b7ca:	4a0b      	ldr	r2, [pc, #44]	@ (800b7f8 <arm_rfft_2048_fast_init_f32+0x34>)
 800b7cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7d0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b7d4:	8003      	strh	r3, [r0, #0]
 800b7d6:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800b7da:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800b7de:	4b07      	ldr	r3, [pc, #28]	@ (800b7fc <arm_rfft_2048_fast_init_f32+0x38>)
 800b7e0:	8205      	strh	r5, [r0, #16]
 800b7e2:	8184      	strh	r4, [r0, #12]
 800b7e4:	6143      	str	r3, [r0, #20]
 800b7e6:	bc30      	pop	{r4, r5}
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	4770      	bx	lr
 800b7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	0800f72c 	.word	0x0800f72c
 800b7f8:	08012c14 	.word	0x08012c14
 800b7fc:	0801b994 	.word	0x0801b994

0800b800 <arm_rfft_4096_fast_init_f32>:
 800b800:	b190      	cbz	r0, 800b828 <arm_rfft_4096_fast_init_f32+0x28>
 800b802:	b430      	push	{r4, r5}
 800b804:	490a      	ldr	r1, [pc, #40]	@ (800b830 <arm_rfft_4096_fast_init_f32+0x30>)
 800b806:	4a0b      	ldr	r2, [pc, #44]	@ (800b834 <arm_rfft_4096_fast_init_f32+0x34>)
 800b808:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b80c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b810:	8003      	strh	r3, [r0, #0]
 800b812:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800b816:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800b81a:	4b07      	ldr	r3, [pc, #28]	@ (800b838 <arm_rfft_4096_fast_init_f32+0x38>)
 800b81c:	8205      	strh	r5, [r0, #16]
 800b81e:	8184      	strh	r4, [r0, #12]
 800b820:	6143      	str	r3, [r0, #20]
 800b822:	bc30      	pop	{r4, r5}
 800b824:	2000      	movs	r0, #0
 800b826:	4770      	bx	lr
 800b828:	f04f 30ff 	mov.w	r0, #4294967295
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	08010704 	.word	0x08010704
 800b834:	08015094 	.word	0x08015094
 800b838:	0801de14 	.word	0x0801de14

0800b83c <arm_rfft_fast_init_f32>:
 800b83c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b840:	d01f      	beq.n	800b882 <arm_rfft_fast_init_f32+0x46>
 800b842:	d90b      	bls.n	800b85c <arm_rfft_fast_init_f32+0x20>
 800b844:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800b848:	d019      	beq.n	800b87e <arm_rfft_fast_init_f32+0x42>
 800b84a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800b84e:	d012      	beq.n	800b876 <arm_rfft_fast_init_f32+0x3a>
 800b850:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b854:	d00d      	beq.n	800b872 <arm_rfft_fast_init_f32+0x36>
 800b856:	f04f 30ff 	mov.w	r0, #4294967295
 800b85a:	4770      	bx	lr
 800b85c:	2940      	cmp	r1, #64	@ 0x40
 800b85e:	d00c      	beq.n	800b87a <arm_rfft_fast_init_f32+0x3e>
 800b860:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800b864:	d003      	beq.n	800b86e <arm_rfft_fast_init_f32+0x32>
 800b866:	2920      	cmp	r1, #32
 800b868:	d1f5      	bne.n	800b856 <arm_rfft_fast_init_f32+0x1a>
 800b86a:	4b07      	ldr	r3, [pc, #28]	@ (800b888 <arm_rfft_fast_init_f32+0x4c>)
 800b86c:	4718      	bx	r3
 800b86e:	4b07      	ldr	r3, [pc, #28]	@ (800b88c <arm_rfft_fast_init_f32+0x50>)
 800b870:	4718      	bx	r3
 800b872:	4b07      	ldr	r3, [pc, #28]	@ (800b890 <arm_rfft_fast_init_f32+0x54>)
 800b874:	4718      	bx	r3
 800b876:	4b07      	ldr	r3, [pc, #28]	@ (800b894 <arm_rfft_fast_init_f32+0x58>)
 800b878:	4718      	bx	r3
 800b87a:	4b07      	ldr	r3, [pc, #28]	@ (800b898 <arm_rfft_fast_init_f32+0x5c>)
 800b87c:	e7f6      	b.n	800b86c <arm_rfft_fast_init_f32+0x30>
 800b87e:	4b07      	ldr	r3, [pc, #28]	@ (800b89c <arm_rfft_fast_init_f32+0x60>)
 800b880:	e7f4      	b.n	800b86c <arm_rfft_fast_init_f32+0x30>
 800b882:	4b07      	ldr	r3, [pc, #28]	@ (800b8a0 <arm_rfft_fast_init_f32+0x64>)
 800b884:	e7f2      	b.n	800b86c <arm_rfft_fast_init_f32+0x30>
 800b886:	bf00      	nop
 800b888:	0800b6ad 	.word	0x0800b6ad
 800b88c:	0800b715 	.word	0x0800b715
 800b890:	0800b789 	.word	0x0800b789
 800b894:	0800b801 	.word	0x0800b801
 800b898:	0800b6e1 	.word	0x0800b6e1
 800b89c:	0800b7c5 	.word	0x0800b7c5
 800b8a0:	0800b74d 	.word	0x0800b74d

0800b8a4 <stage_rfft_f32>:
 800b8a4:	b410      	push	{r4}
 800b8a6:	edd1 7a00 	vldr	s15, [r1]
 800b8aa:	ed91 7a01 	vldr	s14, [r1, #4]
 800b8ae:	8804      	ldrh	r4, [r0, #0]
 800b8b0:	6940      	ldr	r0, [r0, #20]
 800b8b2:	ee37 7a07 	vadd.f32	s14, s14, s14
 800b8b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b8ba:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800b8be:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b8c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b8c6:	3c01      	subs	r4, #1
 800b8c8:	ee26 7a84 	vmul.f32	s14, s13, s8
 800b8cc:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b8d0:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800b8d4:	ed82 7a00 	vstr	s14, [r2]
 800b8d8:	edc2 7a01 	vstr	s15, [r2, #4]
 800b8dc:	3010      	adds	r0, #16
 800b8de:	3210      	adds	r2, #16
 800b8e0:	3b08      	subs	r3, #8
 800b8e2:	3110      	adds	r1, #16
 800b8e4:	ed11 5a02 	vldr	s10, [r1, #-8]
 800b8e8:	ed93 7a02 	vldr	s14, [r3, #8]
 800b8ec:	ed50 6a02 	vldr	s13, [r0, #-8]
 800b8f0:	edd3 4a03 	vldr	s9, [r3, #12]
 800b8f4:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b8f8:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b8fc:	ee77 5a45 	vsub.f32	s11, s14, s10
 800b900:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b904:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800b908:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800b90c:	ee66 5a25 	vmul.f32	s11, s12, s11
 800b910:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800b914:	ee37 7a23 	vadd.f32	s14, s14, s7
 800b918:	ee66 6a85 	vmul.f32	s13, s13, s10
 800b91c:	ee26 6a05 	vmul.f32	s12, s12, s10
 800b920:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b924:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b928:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b92c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b930:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b934:	3c01      	subs	r4, #1
 800b936:	ed02 7a02 	vstr	s14, [r2, #-8]
 800b93a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b93e:	f1a3 0308 	sub.w	r3, r3, #8
 800b942:	f101 0108 	add.w	r1, r1, #8
 800b946:	f100 0008 	add.w	r0, r0, #8
 800b94a:	f102 0208 	add.w	r2, r2, #8
 800b94e:	d1c9      	bne.n	800b8e4 <stage_rfft_f32+0x40>
 800b950:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b954:	4770      	bx	lr
 800b956:	bf00      	nop

0800b958 <merge_rfft_f32>:
 800b958:	b410      	push	{r4}
 800b95a:	edd1 7a00 	vldr	s15, [r1]
 800b95e:	edd1 6a01 	vldr	s13, [r1, #4]
 800b962:	8804      	ldrh	r4, [r0, #0]
 800b964:	6940      	ldr	r0, [r0, #20]
 800b966:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b96a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b96e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800b972:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b976:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b97a:	3c01      	subs	r4, #1
 800b97c:	ed82 7a00 	vstr	s14, [r2]
 800b980:	edc2 7a01 	vstr	s15, [r2, #4]
 800b984:	b3dc      	cbz	r4, 800b9fe <merge_rfft_f32+0xa6>
 800b986:	00e3      	lsls	r3, r4, #3
 800b988:	3b08      	subs	r3, #8
 800b98a:	440b      	add	r3, r1
 800b98c:	3010      	adds	r0, #16
 800b98e:	3210      	adds	r2, #16
 800b990:	3110      	adds	r1, #16
 800b992:	ed11 5a02 	vldr	s10, [r1, #-8]
 800b996:	ed93 7a02 	vldr	s14, [r3, #8]
 800b99a:	ed50 6a02 	vldr	s13, [r0, #-8]
 800b99e:	edd3 4a03 	vldr	s9, [r3, #12]
 800b9a2:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b9a6:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b9aa:	ee75 5a47 	vsub.f32	s11, s10, s14
 800b9ae:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b9b2:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800b9b6:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800b9ba:	ee66 5a25 	vmul.f32	s11, s12, s11
 800b9be:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800b9c2:	ee37 7a63 	vsub.f32	s14, s14, s7
 800b9c6:	ee66 6a85 	vmul.f32	s13, s13, s10
 800b9ca:	ee26 6a05 	vmul.f32	s12, s12, s10
 800b9ce:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b9d2:	ee37 7a46 	vsub.f32	s14, s14, s12
 800b9d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b9da:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b9de:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b9e2:	3c01      	subs	r4, #1
 800b9e4:	ed02 7a02 	vstr	s14, [r2, #-8]
 800b9e8:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b9ec:	f1a3 0308 	sub.w	r3, r3, #8
 800b9f0:	f101 0108 	add.w	r1, r1, #8
 800b9f4:	f100 0008 	add.w	r0, r0, #8
 800b9f8:	f102 0208 	add.w	r2, r2, #8
 800b9fc:	d1c9      	bne.n	800b992 <merge_rfft_f32+0x3a>
 800b9fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <arm_rfft_fast_f32>:
 800ba04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba08:	8a05      	ldrh	r5, [r0, #16]
 800ba0a:	086d      	lsrs	r5, r5, #1
 800ba0c:	8005      	strh	r5, [r0, #0]
 800ba0e:	4604      	mov	r4, r0
 800ba10:	4616      	mov	r6, r2
 800ba12:	461d      	mov	r5, r3
 800ba14:	b14b      	cbz	r3, 800ba2a <arm_rfft_fast_f32+0x26>
 800ba16:	f7ff ff9f 	bl	800b958 <merge_rfft_f32>
 800ba1a:	462a      	mov	r2, r5
 800ba1c:	4631      	mov	r1, r6
 800ba1e:	4620      	mov	r0, r4
 800ba20:	2301      	movs	r3, #1
 800ba22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba26:	f000 bb33 	b.w	800c090 <arm_cfft_f32>
 800ba2a:	460f      	mov	r7, r1
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	2301      	movs	r3, #1
 800ba30:	f000 fb2e 	bl	800c090 <arm_cfft_f32>
 800ba34:	4632      	mov	r2, r6
 800ba36:	4639      	mov	r1, r7
 800ba38:	4620      	mov	r0, r4
 800ba3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba3e:	f7ff bf31 	b.w	800b8a4 <stage_rfft_f32>
 800ba42:	bf00      	nop

0800ba44 <arm_cfft_radix8by2_f32>:
 800ba44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba48:	ed2d 8b08 	vpush	{d8-d11}
 800ba4c:	4607      	mov	r7, r0
 800ba4e:	4608      	mov	r0, r1
 800ba50:	f8b7 c000 	ldrh.w	ip, [r7]
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800ba5a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800ba5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ba62:	f000 80b0 	beq.w	800bbc6 <arm_cfft_radix8by2_f32+0x182>
 800ba66:	008c      	lsls	r4, r1, #2
 800ba68:	3410      	adds	r4, #16
 800ba6a:	f100 0310 	add.w	r3, r0, #16
 800ba6e:	1906      	adds	r6, r0, r4
 800ba70:	3210      	adds	r2, #16
 800ba72:	4444      	add	r4, r8
 800ba74:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800ba78:	f108 0510 	add.w	r5, r8, #16
 800ba7c:	ed15 2a04 	vldr	s4, [r5, #-16]
 800ba80:	ed55 2a03 	vldr	s5, [r5, #-12]
 800ba84:	ed54 4a04 	vldr	s9, [r4, #-16]
 800ba88:	ed14 4a03 	vldr	s8, [r4, #-12]
 800ba8c:	ed14 6a02 	vldr	s12, [r4, #-8]
 800ba90:	ed54 5a01 	vldr	s11, [r4, #-4]
 800ba94:	ed53 3a04 	vldr	s7, [r3, #-16]
 800ba98:	ed15 0a02 	vldr	s0, [r5, #-8]
 800ba9c:	ed55 0a01 	vldr	s1, [r5, #-4]
 800baa0:	ed56 6a04 	vldr	s13, [r6, #-16]
 800baa4:	ed16 3a03 	vldr	s6, [r6, #-12]
 800baa8:	ed13 7a03 	vldr	s14, [r3, #-12]
 800baac:	ed13 5a02 	vldr	s10, [r3, #-8]
 800bab0:	ed53 7a01 	vldr	s15, [r3, #-4]
 800bab4:	ed16 1a02 	vldr	s2, [r6, #-8]
 800bab8:	ed56 1a01 	vldr	s3, [r6, #-4]
 800babc:	ee73 ba82 	vadd.f32	s23, s7, s4
 800bac0:	ee37 ba22 	vadd.f32	s22, s14, s5
 800bac4:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800bac8:	ee33 9a04 	vadd.f32	s18, s6, s8
 800bacc:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800bad0:	ee75 aa00 	vadd.f32	s21, s10, s0
 800bad4:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800bad8:	ee71 8a06 	vadd.f32	s17, s2, s12
 800badc:	ed43 ba04 	vstr	s23, [r3, #-16]
 800bae0:	ed03 ba03 	vstr	s22, [r3, #-12]
 800bae4:	ed43 aa02 	vstr	s21, [r3, #-8]
 800bae8:	ed03 aa01 	vstr	s20, [r3, #-4]
 800baec:	ed06 8a01 	vstr	s16, [r6, #-4]
 800baf0:	ed46 9a04 	vstr	s19, [r6, #-16]
 800baf4:	ed06 9a03 	vstr	s18, [r6, #-12]
 800baf8:	ed46 8a02 	vstr	s17, [r6, #-8]
 800bafc:	ee37 7a62 	vsub.f32	s14, s14, s5
 800bb00:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800bb04:	ee34 4a43 	vsub.f32	s8, s8, s6
 800bb08:	ed52 6a03 	vldr	s13, [r2, #-12]
 800bb0c:	ed12 3a04 	vldr	s6, [r2, #-16]
 800bb10:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800bb14:	ee27 8a26 	vmul.f32	s16, s14, s13
 800bb18:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800bb1c:	ee23 2a83 	vmul.f32	s4, s7, s6
 800bb20:	ee64 4a83 	vmul.f32	s9, s9, s6
 800bb24:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800bb28:	ee27 7a03 	vmul.f32	s14, s14, s6
 800bb2c:	ee64 6a26 	vmul.f32	s13, s8, s13
 800bb30:	ee24 4a03 	vmul.f32	s8, s8, s6
 800bb34:	ee37 7a63 	vsub.f32	s14, s14, s7
 800bb38:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800bb3c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800bb40:	ee32 3a08 	vadd.f32	s6, s4, s16
 800bb44:	ed05 7a03 	vstr	s14, [r5, #-12]
 800bb48:	ed05 3a04 	vstr	s6, [r5, #-16]
 800bb4c:	ed04 4a04 	vstr	s8, [r4, #-16]
 800bb50:	ed44 6a03 	vstr	s13, [r4, #-12]
 800bb54:	ed12 7a01 	vldr	s14, [r2, #-4]
 800bb58:	ee76 6a41 	vsub.f32	s13, s12, s2
 800bb5c:	ee35 5a40 	vsub.f32	s10, s10, s0
 800bb60:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800bb64:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bb68:	ed52 5a02 	vldr	s11, [r2, #-8]
 800bb6c:	ee67 3a87 	vmul.f32	s7, s15, s14
 800bb70:	ee66 4a87 	vmul.f32	s9, s13, s14
 800bb74:	ee25 4a25 	vmul.f32	s8, s10, s11
 800bb78:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bb7c:	ee25 5a07 	vmul.f32	s10, s10, s14
 800bb80:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800bb84:	ee26 7a07 	vmul.f32	s14, s12, s14
 800bb88:	ee26 6a25 	vmul.f32	s12, s12, s11
 800bb8c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800bb90:	ee74 5a23 	vadd.f32	s11, s8, s7
 800bb94:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800bb98:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bb9c:	3310      	adds	r3, #16
 800bb9e:	4563      	cmp	r3, ip
 800bba0:	ed45 5a02 	vstr	s11, [r5, #-8]
 800bba4:	f106 0610 	add.w	r6, r6, #16
 800bba8:	ed45 7a01 	vstr	s15, [r5, #-4]
 800bbac:	f102 0210 	add.w	r2, r2, #16
 800bbb0:	ed04 6a02 	vstr	s12, [r4, #-8]
 800bbb4:	ed04 7a01 	vstr	s14, [r4, #-4]
 800bbb8:	f105 0510 	add.w	r5, r5, #16
 800bbbc:	f104 0410 	add.w	r4, r4, #16
 800bbc0:	f47f af5c 	bne.w	800ba7c <arm_cfft_radix8by2_f32+0x38>
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	b28c      	uxth	r4, r1
 800bbc8:	4621      	mov	r1, r4
 800bbca:	2302      	movs	r3, #2
 800bbcc:	f000 fb3c 	bl	800c248 <arm_radix8_butterfly_f32>
 800bbd0:	ecbd 8b08 	vpop	{d8-d11}
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	4640      	mov	r0, r8
 800bbda:	2302      	movs	r3, #2
 800bbdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe0:	f000 bb32 	b.w	800c248 <arm_radix8_butterfly_f32>

0800bbe4 <arm_cfft_radix8by4_f32>:
 800bbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe8:	ed2d 8b0a 	vpush	{d8-d12}
 800bbec:	b08d      	sub	sp, #52	@ 0x34
 800bbee:	460d      	mov	r5, r1
 800bbf0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bbf2:	8801      	ldrh	r1, [r0, #0]
 800bbf4:	6842      	ldr	r2, [r0, #4]
 800bbf6:	900a      	str	r0, [sp, #40]	@ 0x28
 800bbf8:	0849      	lsrs	r1, r1, #1
 800bbfa:	008b      	lsls	r3, r1, #2
 800bbfc:	18ee      	adds	r6, r5, r3
 800bbfe:	18f0      	adds	r0, r6, r3
 800bc00:	edd0 5a00 	vldr	s11, [r0]
 800bc04:	edd5 7a00 	vldr	s15, [r5]
 800bc08:	ed96 7a00 	vldr	s14, [r6]
 800bc0c:	edd0 3a01 	vldr	s7, [r0, #4]
 800bc10:	ed96 4a01 	vldr	s8, [r6, #4]
 800bc14:	ed95 5a01 	vldr	s10, [r5, #4]
 800bc18:	9008      	str	r0, [sp, #32]
 800bc1a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800bc1e:	18c7      	adds	r7, r0, r3
 800bc20:	edd7 4a00 	vldr	s9, [r7]
 800bc24:	ed97 3a01 	vldr	s6, [r7, #4]
 800bc28:	9701      	str	r7, [sp, #4]
 800bc2a:	ee77 6a06 	vadd.f32	s13, s14, s12
 800bc2e:	462c      	mov	r4, r5
 800bc30:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800bc34:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800bc38:	ee16 ca90 	vmov	ip, s13
 800bc3c:	f844 cb08 	str.w	ip, [r4], #8
 800bc40:	ee75 6a23 	vadd.f32	s13, s10, s7
 800bc44:	edd6 5a01 	vldr	s11, [r6, #4]
 800bc48:	edd7 2a01 	vldr	s5, [r7, #4]
 800bc4c:	9404      	str	r4, [sp, #16]
 800bc4e:	ee35 5a63 	vsub.f32	s10, s10, s7
 800bc52:	ee74 3a27 	vadd.f32	s7, s8, s15
 800bc56:	ee36 6a47 	vsub.f32	s12, s12, s14
 800bc5a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800bc5e:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800bc62:	0849      	lsrs	r1, r1, #1
 800bc64:	f102 0e08 	add.w	lr, r2, #8
 800bc68:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800bc6c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800bc70:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc72:	ee35 4a47 	vsub.f32	s8, s10, s14
 800bc76:	f1a1 0902 	sub.w	r9, r1, #2
 800bc7a:	f8cd e00c 	str.w	lr, [sp, #12]
 800bc7e:	4631      	mov	r1, r6
 800bc80:	ee13 ea90 	vmov	lr, s7
 800bc84:	ee36 6a64 	vsub.f32	s12, s12, s9
 800bc88:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	edc5 5a01 	vstr	s11, [r5, #4]
 800bc92:	ee37 7a05 	vadd.f32	s14, s14, s10
 800bc96:	f841 eb08 	str.w	lr, [r1], #8
 800bc9a:	ee34 5a24 	vadd.f32	s10, s8, s9
 800bc9e:	ee16 ea10 	vmov	lr, s12
 800bca2:	ed86 5a01 	vstr	s10, [r6, #4]
 800bca6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800bcaa:	f844 eb08 	str.w	lr, [r4], #8
 800bcae:	ee77 7a83 	vadd.f32	s15, s15, s6
 800bcb2:	edc0 6a01 	vstr	s13, [r0, #4]
 800bcb6:	9405      	str	r4, [sp, #20]
 800bcb8:	4604      	mov	r4, r0
 800bcba:	ee17 0a90 	vmov	r0, s15
 800bcbe:	9106      	str	r1, [sp, #24]
 800bcc0:	ee37 7a64 	vsub.f32	s14, s14, s9
 800bcc4:	f102 0110 	add.w	r1, r2, #16
 800bcc8:	46bc      	mov	ip, r7
 800bcca:	9100      	str	r1, [sp, #0]
 800bccc:	f847 0b08 	str.w	r0, [r7], #8
 800bcd0:	f102 0118 	add.w	r1, r2, #24
 800bcd4:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800bcd8:	9102      	str	r1, [sp, #8]
 800bcda:	ed8c 7a01 	vstr	s14, [ip, #4]
 800bcde:	9007      	str	r0, [sp, #28]
 800bce0:	f000 8134 	beq.w	800bf4c <arm_cfft_radix8by4_f32+0x368>
 800bce4:	f102 0920 	add.w	r9, r2, #32
 800bce8:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800bcec:	9a01      	ldr	r2, [sp, #4]
 800bcee:	f8dd a000 	ldr.w	sl, [sp]
 800bcf2:	3b0c      	subs	r3, #12
 800bcf4:	4683      	mov	fp, r0
 800bcf6:	4463      	add	r3, ip
 800bcf8:	f105 0e10 	add.w	lr, r5, #16
 800bcfc:	f1a4 010c 	sub.w	r1, r4, #12
 800bd00:	f104 0510 	add.w	r5, r4, #16
 800bd04:	f1a6 0c0c 	sub.w	ip, r6, #12
 800bd08:	f1a2 040c 	sub.w	r4, r2, #12
 800bd0c:	f106 0010 	add.w	r0, r6, #16
 800bd10:	3210      	adds	r2, #16
 800bd12:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800bd16:	ed55 5a02 	vldr	s11, [r5, #-8]
 800bd1a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800bd1e:	ed52 1a02 	vldr	s3, [r2, #-8]
 800bd22:	ed55 6a01 	vldr	s13, [r5, #-4]
 800bd26:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800bd2a:	ed12 1a01 	vldr	s2, [r2, #-4]
 800bd2e:	ed10 8a01 	vldr	s16, [r0, #-4]
 800bd32:	ee35 4a25 	vadd.f32	s8, s10, s11
 800bd36:	ee30 6a26 	vadd.f32	s12, s0, s13
 800bd3a:	ee37 7a84 	vadd.f32	s14, s15, s8
 800bd3e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800bd42:	ee37 7a21 	vadd.f32	s14, s14, s3
 800bd46:	ee75 5a65 	vsub.f32	s11, s10, s11
 800bd4a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800bd4e:	ed10 7a01 	vldr	s14, [r0, #-4]
 800bd52:	ed52 6a01 	vldr	s13, [r2, #-4]
 800bd56:	ee36 7a07 	vadd.f32	s14, s12, s14
 800bd5a:	ee78 aa25 	vadd.f32	s21, s16, s11
 800bd5e:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bd62:	ee70 3a67 	vsub.f32	s7, s0, s15
 800bd66:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800bd6a:	ed94 7a02 	vldr	s14, [r4, #8]
 800bd6e:	ed9c 2a02 	vldr	s4, [ip, #8]
 800bd72:	ed91 ba02 	vldr	s22, [r1, #8]
 800bd76:	edd3 9a02 	vldr	s19, [r3, #8]
 800bd7a:	edd4 2a01 	vldr	s5, [r4, #4]
 800bd7e:	ed9c 9a01 	vldr	s18, [ip, #4]
 800bd82:	ed93 5a01 	vldr	s10, [r3, #4]
 800bd86:	edd1 0a01 	vldr	s1, [r1, #4]
 800bd8a:	ee72 6a07 	vadd.f32	s13, s4, s14
 800bd8e:	ee32 2a47 	vsub.f32	s4, s4, s14
 800bd92:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800bd96:	ee79 4a22 	vadd.f32	s9, s18, s5
 800bd9a:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800bd9e:	ee79 2a62 	vsub.f32	s5, s18, s5
 800bda2:	ed8c 7a02 	vstr	s14, [ip, #8]
 800bda6:	ed91 7a01 	vldr	s14, [r1, #4]
 800bdaa:	edd3 8a01 	vldr	s17, [r3, #4]
 800bdae:	ee34 7a87 	vadd.f32	s14, s9, s14
 800bdb2:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800bdb6:	ee37 7a28 	vadd.f32	s14, s14, s17
 800bdba:	ee32 9a60 	vsub.f32	s18, s4, s1
 800bdbe:	ed8c 7a01 	vstr	s14, [ip, #4]
 800bdc2:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800bdc6:	ed1a aa02 	vldr	s20, [sl, #-8]
 800bdca:	ee73 8a22 	vadd.f32	s17, s6, s5
 800bdce:	ee39 9a05 	vadd.f32	s18, s18, s10
 800bdd2:	ee7a aac1 	vsub.f32	s21, s21, s2
 800bdd6:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800bdda:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800bdde:	ee69 ba07 	vmul.f32	s23, s18, s14
 800bde2:	ee6a aa87 	vmul.f32	s21, s21, s14
 800bde6:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800bdea:	ee63 ca87 	vmul.f32	s25, s7, s14
 800bdee:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800bdf2:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800bdf6:	ee68 8a87 	vmul.f32	s17, s17, s14
 800bdfa:	ee73 3aea 	vsub.f32	s7, s7, s21
 800bdfe:	ee78 8a89 	vadd.f32	s17, s17, s18
 800be02:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800be06:	ee3b aaca 	vsub.f32	s20, s23, s20
 800be0a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800be0e:	ee76 6acb 	vsub.f32	s13, s13, s22
 800be12:	ee36 6a48 	vsub.f32	s12, s12, s16
 800be16:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800be1a:	ed00 7a02 	vstr	s14, [r0, #-8]
 800be1e:	ed40 3a01 	vstr	s7, [r0, #-4]
 800be22:	edc1 8a01 	vstr	s17, [r1, #4]
 800be26:	ed81 aa02 	vstr	s20, [r1, #8]
 800be2a:	ed59 3a04 	vldr	s7, [r9, #-16]
 800be2e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800be32:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800be36:	ed59 6a03 	vldr	s13, [r9, #-12]
 800be3a:	ee34 4a61 	vsub.f32	s8, s8, s3
 800be3e:	ee36 6a41 	vsub.f32	s12, s12, s2
 800be42:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800be46:	ee66 9a26 	vmul.f32	s19, s12, s13
 800be4a:	ee24 9a23 	vmul.f32	s18, s8, s7
 800be4e:	ee26 6a23 	vmul.f32	s12, s12, s7
 800be52:	ee24 4a26 	vmul.f32	s8, s8, s13
 800be56:	ee27 7a26 	vmul.f32	s14, s14, s13
 800be5a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800be5e:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800be62:	ee36 6a44 	vsub.f32	s12, s12, s8
 800be66:	ee37 7a64 	vsub.f32	s14, s14, s9
 800be6a:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800be6e:	ee79 3a29 	vadd.f32	s7, s18, s19
 800be72:	ee75 6a60 	vsub.f32	s13, s10, s1
 800be76:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800be7a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800be7e:	ed45 3a02 	vstr	s7, [r5, #-8]
 800be82:	ed05 6a01 	vstr	s12, [r5, #-4]
 800be86:	ed84 7a01 	vstr	s14, [r4, #4]
 800be8a:	ed84 4a02 	vstr	s8, [r4, #8]
 800be8e:	ee35 6a81 	vadd.f32	s12, s11, s2
 800be92:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800be96:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800be9a:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 800be9e:	ee33 3a62 	vsub.f32	s6, s6, s5
 800bea2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800bea6:	ee67 2a26 	vmul.f32	s5, s14, s13
 800beaa:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800beae:	ee26 5a25 	vmul.f32	s10, s12, s11
 800beb2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800beb6:	ee26 6a26 	vmul.f32	s12, s12, s13
 800beba:	ee27 7a25 	vmul.f32	s14, s14, s11
 800bebe:	ee63 6a26 	vmul.f32	s13, s6, s13
 800bec2:	ee23 3a25 	vmul.f32	s6, s6, s11
 800bec6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800beca:	ee75 5a24 	vadd.f32	s11, s10, s9
 800bece:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800bed2:	ee36 7a87 	vadd.f32	s14, s13, s14
 800bed6:	f1bb 0b01 	subs.w	fp, fp, #1
 800beda:	ed42 5a02 	vstr	s11, [r2, #-8]
 800bede:	ed42 7a01 	vstr	s15, [r2, #-4]
 800bee2:	f10e 0e08 	add.w	lr, lr, #8
 800bee6:	ed83 3a02 	vstr	s6, [r3, #8]
 800beea:	ed83 7a01 	vstr	s14, [r3, #4]
 800beee:	f1ac 0c08 	sub.w	ip, ip, #8
 800bef2:	f10a 0a08 	add.w	sl, sl, #8
 800bef6:	f100 0008 	add.w	r0, r0, #8
 800befa:	f1a1 0108 	sub.w	r1, r1, #8
 800befe:	f109 0910 	add.w	r9, r9, #16
 800bf02:	f105 0508 	add.w	r5, r5, #8
 800bf06:	f1a4 0408 	sub.w	r4, r4, #8
 800bf0a:	f108 0818 	add.w	r8, r8, #24
 800bf0e:	f102 0208 	add.w	r2, r2, #8
 800bf12:	f1a3 0308 	sub.w	r3, r3, #8
 800bf16:	f47f aefc 	bne.w	800bd12 <arm_cfft_radix8by4_f32+0x12e>
 800bf1a:	9907      	ldr	r1, [sp, #28]
 800bf1c:	9800      	ldr	r0, [sp, #0]
 800bf1e:	00cb      	lsls	r3, r1, #3
 800bf20:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800bf24:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800bf28:	9100      	str	r1, [sp, #0]
 800bf2a:	9904      	ldr	r1, [sp, #16]
 800bf2c:	4419      	add	r1, r3
 800bf2e:	9104      	str	r1, [sp, #16]
 800bf30:	9903      	ldr	r1, [sp, #12]
 800bf32:	4419      	add	r1, r3
 800bf34:	9103      	str	r1, [sp, #12]
 800bf36:	9906      	ldr	r1, [sp, #24]
 800bf38:	4419      	add	r1, r3
 800bf3a:	9106      	str	r1, [sp, #24]
 800bf3c:	9905      	ldr	r1, [sp, #20]
 800bf3e:	441f      	add	r7, r3
 800bf40:	4419      	add	r1, r3
 800bf42:	9b02      	ldr	r3, [sp, #8]
 800bf44:	9105      	str	r1, [sp, #20]
 800bf46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf4a:	9302      	str	r3, [sp, #8]
 800bf4c:	9904      	ldr	r1, [sp, #16]
 800bf4e:	9805      	ldr	r0, [sp, #20]
 800bf50:	ed91 4a00 	vldr	s8, [r1]
 800bf54:	edd0 6a00 	vldr	s13, [r0]
 800bf58:	9b06      	ldr	r3, [sp, #24]
 800bf5a:	ed97 3a00 	vldr	s6, [r7]
 800bf5e:	edd3 7a00 	vldr	s15, [r3]
 800bf62:	edd0 4a01 	vldr	s9, [r0, #4]
 800bf66:	edd1 3a01 	vldr	s7, [r1, #4]
 800bf6a:	ed97 2a01 	vldr	s4, [r7, #4]
 800bf6e:	ed93 7a01 	vldr	s14, [r3, #4]
 800bf72:	9a03      	ldr	r2, [sp, #12]
 800bf74:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800bf78:	ee34 6a26 	vadd.f32	s12, s8, s13
 800bf7c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800bf80:	ee37 5a86 	vadd.f32	s10, s15, s12
 800bf84:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800bf88:	ee35 5a03 	vadd.f32	s10, s10, s6
 800bf8c:	ee74 6a66 	vsub.f32	s13, s8, s13
 800bf90:	ed81 5a00 	vstr	s10, [r1]
 800bf94:	ed93 5a01 	vldr	s10, [r3, #4]
 800bf98:	edd7 4a01 	vldr	s9, [r7, #4]
 800bf9c:	ee35 5a85 	vadd.f32	s10, s11, s10
 800bfa0:	ee37 4a26 	vadd.f32	s8, s14, s13
 800bfa4:	ee35 5a24 	vadd.f32	s10, s10, s9
 800bfa8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800bfac:	ed81 5a01 	vstr	s10, [r1, #4]
 800bfb0:	edd2 1a00 	vldr	s3, [r2]
 800bfb4:	edd2 2a01 	vldr	s5, [r2, #4]
 800bfb8:	ee34 5a83 	vadd.f32	s10, s9, s6
 800bfbc:	ee34 4a42 	vsub.f32	s8, s8, s4
 800bfc0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bfc4:	ee64 4a21 	vmul.f32	s9, s8, s3
 800bfc8:	ee24 4a22 	vmul.f32	s8, s8, s5
 800bfcc:	ee65 2a22 	vmul.f32	s5, s10, s5
 800bfd0:	ee25 5a21 	vmul.f32	s10, s10, s3
 800bfd4:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800bfd8:	ee35 5a44 	vsub.f32	s10, s10, s8
 800bfdc:	edc3 2a00 	vstr	s5, [r3]
 800bfe0:	ed83 5a01 	vstr	s10, [r3, #4]
 800bfe4:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800bfe8:	9b00      	ldr	r3, [sp, #0]
 800bfea:	ee36 6a43 	vsub.f32	s12, s12, s6
 800bfee:	ed93 4a01 	vldr	s8, [r3, #4]
 800bff2:	ed93 5a00 	vldr	s10, [r3]
 800bff6:	9b02      	ldr	r3, [sp, #8]
 800bff8:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800bffc:	ee66 4a05 	vmul.f32	s9, s12, s10
 800c000:	ee25 5a85 	vmul.f32	s10, s11, s10
 800c004:	ee26 6a04 	vmul.f32	s12, s12, s8
 800c008:	ee65 5a84 	vmul.f32	s11, s11, s8
 800c00c:	ee35 6a46 	vsub.f32	s12, s10, s12
 800c010:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800c014:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800c018:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c01c:	ed80 6a01 	vstr	s12, [r0, #4]
 800c020:	edc0 5a00 	vstr	s11, [r0]
 800c024:	edd3 5a01 	vldr	s11, [r3, #4]
 800c028:	edd3 6a00 	vldr	s13, [r3]
 800c02c:	ee37 7a02 	vadd.f32	s14, s14, s4
 800c030:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800c034:	ee27 6a26 	vmul.f32	s12, s14, s13
 800c038:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c03c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c040:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c044:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c048:	ee76 7a27 	vadd.f32	s15, s12, s15
 800c04c:	ed87 7a01 	vstr	s14, [r7, #4]
 800c050:	edc7 7a00 	vstr	s15, [r7]
 800c054:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 800c058:	4621      	mov	r1, r4
 800c05a:	686a      	ldr	r2, [r5, #4]
 800c05c:	2304      	movs	r3, #4
 800c05e:	f000 f8f3 	bl	800c248 <arm_radix8_butterfly_f32>
 800c062:	4630      	mov	r0, r6
 800c064:	4621      	mov	r1, r4
 800c066:	686a      	ldr	r2, [r5, #4]
 800c068:	2304      	movs	r3, #4
 800c06a:	f000 f8ed 	bl	800c248 <arm_radix8_butterfly_f32>
 800c06e:	9808      	ldr	r0, [sp, #32]
 800c070:	686a      	ldr	r2, [r5, #4]
 800c072:	4621      	mov	r1, r4
 800c074:	2304      	movs	r3, #4
 800c076:	f000 f8e7 	bl	800c248 <arm_radix8_butterfly_f32>
 800c07a:	686a      	ldr	r2, [r5, #4]
 800c07c:	9801      	ldr	r0, [sp, #4]
 800c07e:	4621      	mov	r1, r4
 800c080:	2304      	movs	r3, #4
 800c082:	b00d      	add	sp, #52	@ 0x34
 800c084:	ecbd 8b0a 	vpop	{d8-d12}
 800c088:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c08c:	f000 b8dc 	b.w	800c248 <arm_radix8_butterfly_f32>

0800c090 <arm_cfft_f32>:
 800c090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c094:	2a01      	cmp	r2, #1
 800c096:	4606      	mov	r6, r0
 800c098:	4617      	mov	r7, r2
 800c09a:	460c      	mov	r4, r1
 800c09c:	4698      	mov	r8, r3
 800c09e:	8805      	ldrh	r5, [r0, #0]
 800c0a0:	d056      	beq.n	800c150 <arm_cfft_f32+0xc0>
 800c0a2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800c0a6:	d063      	beq.n	800c170 <arm_cfft_f32+0xe0>
 800c0a8:	d916      	bls.n	800c0d8 <arm_cfft_f32+0x48>
 800c0aa:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800c0ae:	d01a      	beq.n	800c0e6 <arm_cfft_f32+0x56>
 800c0b0:	d947      	bls.n	800c142 <arm_cfft_f32+0xb2>
 800c0b2:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800c0b6:	d05b      	beq.n	800c170 <arm_cfft_f32+0xe0>
 800c0b8:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800c0bc:	d105      	bne.n	800c0ca <arm_cfft_f32+0x3a>
 800c0be:	2301      	movs	r3, #1
 800c0c0:	6872      	ldr	r2, [r6, #4]
 800c0c2:	4629      	mov	r1, r5
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	f000 f8bf 	bl	800c248 <arm_radix8_butterfly_f32>
 800c0ca:	f1b8 0f00 	cmp.w	r8, #0
 800c0ce:	d111      	bne.n	800c0f4 <arm_cfft_f32+0x64>
 800c0d0:	2f01      	cmp	r7, #1
 800c0d2:	d016      	beq.n	800c102 <arm_cfft_f32+0x72>
 800c0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d8:	2d20      	cmp	r5, #32
 800c0da:	d049      	beq.n	800c170 <arm_cfft_f32+0xe0>
 800c0dc:	d935      	bls.n	800c14a <arm_cfft_f32+0xba>
 800c0de:	2d40      	cmp	r5, #64	@ 0x40
 800c0e0:	d0ed      	beq.n	800c0be <arm_cfft_f32+0x2e>
 800c0e2:	2d80      	cmp	r5, #128	@ 0x80
 800c0e4:	d1f1      	bne.n	800c0ca <arm_cfft_f32+0x3a>
 800c0e6:	4621      	mov	r1, r4
 800c0e8:	4630      	mov	r0, r6
 800c0ea:	f7ff fcab 	bl	800ba44 <arm_cfft_radix8by2_f32>
 800c0ee:	f1b8 0f00 	cmp.w	r8, #0
 800c0f2:	d0ed      	beq.n	800c0d0 <arm_cfft_f32+0x40>
 800c0f4:	68b2      	ldr	r2, [r6, #8]
 800c0f6:	89b1      	ldrh	r1, [r6, #12]
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f000 f841 	bl	800c180 <arm_bitreversal_32>
 800c0fe:	2f01      	cmp	r7, #1
 800c100:	d1e8      	bne.n	800c0d4 <arm_cfft_f32+0x44>
 800c102:	ee07 5a90 	vmov	s15, r5
 800c106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c10a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c10e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c112:	2d00      	cmp	r5, #0
 800c114:	d0de      	beq.n	800c0d4 <arm_cfft_f32+0x44>
 800c116:	f104 0108 	add.w	r1, r4, #8
 800c11a:	2300      	movs	r3, #0
 800c11c:	3301      	adds	r3, #1
 800c11e:	429d      	cmp	r5, r3
 800c120:	f101 0108 	add.w	r1, r1, #8
 800c124:	ed11 7a04 	vldr	s14, [r1, #-16]
 800c128:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c12c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c130:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c134:	ed01 7a04 	vstr	s14, [r1, #-16]
 800c138:	ed41 7a03 	vstr	s15, [r1, #-12]
 800c13c:	d1ee      	bne.n	800c11c <arm_cfft_f32+0x8c>
 800c13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c142:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800c146:	d0ba      	beq.n	800c0be <arm_cfft_f32+0x2e>
 800c148:	e7bf      	b.n	800c0ca <arm_cfft_f32+0x3a>
 800c14a:	2d10      	cmp	r5, #16
 800c14c:	d0cb      	beq.n	800c0e6 <arm_cfft_f32+0x56>
 800c14e:	e7bc      	b.n	800c0ca <arm_cfft_f32+0x3a>
 800c150:	b19d      	cbz	r5, 800c17a <arm_cfft_f32+0xea>
 800c152:	f101 030c 	add.w	r3, r1, #12
 800c156:	2200      	movs	r2, #0
 800c158:	ed53 7a02 	vldr	s15, [r3, #-8]
 800c15c:	3201      	adds	r2, #1
 800c15e:	eef1 7a67 	vneg.f32	s15, s15
 800c162:	4295      	cmp	r5, r2
 800c164:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c168:	f103 0308 	add.w	r3, r3, #8
 800c16c:	d1f4      	bne.n	800c158 <arm_cfft_f32+0xc8>
 800c16e:	e798      	b.n	800c0a2 <arm_cfft_f32+0x12>
 800c170:	4621      	mov	r1, r4
 800c172:	4630      	mov	r0, r6
 800c174:	f7ff fd36 	bl	800bbe4 <arm_cfft_radix8by4_f32>
 800c178:	e7a7      	b.n	800c0ca <arm_cfft_f32+0x3a>
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d0aa      	beq.n	800c0d4 <arm_cfft_f32+0x44>
 800c17e:	e7b9      	b.n	800c0f4 <arm_cfft_f32+0x64>

0800c180 <arm_bitreversal_32>:
 800c180:	b1e9      	cbz	r1, 800c1be <arm_bitreversal_32+0x3e>
 800c182:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c184:	2500      	movs	r5, #0
 800c186:	f102 0e02 	add.w	lr, r2, #2
 800c18a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800c18e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800c192:	08a4      	lsrs	r4, r4, #2
 800c194:	089b      	lsrs	r3, r3, #2
 800c196:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800c19a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800c19e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800c1a2:	00a6      	lsls	r6, r4, #2
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800c1aa:	3304      	adds	r3, #4
 800c1ac:	1d34      	adds	r4, r6, #4
 800c1ae:	3502      	adds	r5, #2
 800c1b0:	58c6      	ldr	r6, [r0, r3]
 800c1b2:	5907      	ldr	r7, [r0, r4]
 800c1b4:	50c7      	str	r7, [r0, r3]
 800c1b6:	428d      	cmp	r5, r1
 800c1b8:	5106      	str	r6, [r0, r4]
 800c1ba:	d3e6      	bcc.n	800c18a <arm_bitreversal_32+0xa>
 800c1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1be:	4770      	bx	lr

0800c1c0 <arm_abs_f32>:
 800c1c0:	b470      	push	{r4, r5, r6}
 800c1c2:	0896      	lsrs	r6, r2, #2
 800c1c4:	d025      	beq.n	800c212 <arm_abs_f32+0x52>
 800c1c6:	f100 0410 	add.w	r4, r0, #16
 800c1ca:	f101 0310 	add.w	r3, r1, #16
 800c1ce:	4635      	mov	r5, r6
 800c1d0:	ed54 7a04 	vldr	s15, [r4, #-16]
 800c1d4:	eef0 7ae7 	vabs.f32	s15, s15
 800c1d8:	ed43 7a04 	vstr	s15, [r3, #-16]
 800c1dc:	ed54 7a03 	vldr	s15, [r4, #-12]
 800c1e0:	eef0 7ae7 	vabs.f32	s15, s15
 800c1e4:	ed43 7a03 	vstr	s15, [r3, #-12]
 800c1e8:	ed54 7a02 	vldr	s15, [r4, #-8]
 800c1ec:	eef0 7ae7 	vabs.f32	s15, s15
 800c1f0:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c1f4:	ed54 7a01 	vldr	s15, [r4, #-4]
 800c1f8:	3d01      	subs	r5, #1
 800c1fa:	eef0 7ae7 	vabs.f32	s15, s15
 800c1fe:	ed43 7a01 	vstr	s15, [r3, #-4]
 800c202:	f104 0410 	add.w	r4, r4, #16
 800c206:	f103 0310 	add.w	r3, r3, #16
 800c20a:	d1e1      	bne.n	800c1d0 <arm_abs_f32+0x10>
 800c20c:	0136      	lsls	r6, r6, #4
 800c20e:	4430      	add	r0, r6
 800c210:	4431      	add	r1, r6
 800c212:	f012 0203 	ands.w	r2, r2, #3
 800c216:	d015      	beq.n	800c244 <arm_abs_f32+0x84>
 800c218:	edd0 7a00 	vldr	s15, [r0]
 800c21c:	3a01      	subs	r2, #1
 800c21e:	eef0 7ae7 	vabs.f32	s15, s15
 800c222:	edc1 7a00 	vstr	s15, [r1]
 800c226:	d00d      	beq.n	800c244 <arm_abs_f32+0x84>
 800c228:	edd0 7a01 	vldr	s15, [r0, #4]
 800c22c:	2a01      	cmp	r2, #1
 800c22e:	eef0 7ae7 	vabs.f32	s15, s15
 800c232:	edc1 7a01 	vstr	s15, [r1, #4]
 800c236:	d005      	beq.n	800c244 <arm_abs_f32+0x84>
 800c238:	edd0 7a02 	vldr	s15, [r0, #8]
 800c23c:	eef0 7ae7 	vabs.f32	s15, s15
 800c240:	edc1 7a02 	vstr	s15, [r1, #8]
 800c244:	bc70      	pop	{r4, r5, r6}
 800c246:	4770      	bx	lr

0800c248 <arm_radix8_butterfly_f32>:
 800c248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24c:	ed2d 8b10 	vpush	{d8-d15}
 800c250:	b095      	sub	sp, #84	@ 0x54
 800c252:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800c256:	4603      	mov	r3, r0
 800c258:	3304      	adds	r3, #4
 800c25a:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800c540 <arm_radix8_butterfly_f32+0x2f8>
 800c25e:	9012      	str	r0, [sp, #72]	@ 0x48
 800c260:	468b      	mov	fp, r1
 800c262:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c264:	4689      	mov	r9, r1
 800c266:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800c26a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c26c:	960f      	str	r6, [sp, #60]	@ 0x3c
 800c26e:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800c272:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800c276:	eb03 0508 	add.w	r5, r3, r8
 800c27a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800c27e:	eb05 040e 	add.w	r4, r5, lr
 800c282:	0137      	lsls	r7, r6, #4
 800c284:	eba6 030a 	sub.w	r3, r6, sl
 800c288:	eb04 000e 	add.w	r0, r4, lr
 800c28c:	44b2      	add	sl, r6
 800c28e:	1d3a      	adds	r2, r7, #4
 800c290:	9702      	str	r7, [sp, #8]
 800c292:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800c296:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800c29a:	ebae 0c06 	sub.w	ip, lr, r6
 800c29e:	9703      	str	r7, [sp, #12]
 800c2a0:	eb03 0708 	add.w	r7, r3, r8
 800c2a4:	9701      	str	r7, [sp, #4]
 800c2a6:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800c2aa:	9706      	str	r7, [sp, #24]
 800c2ac:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800c2ae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800c2b2:	f10e 0104 	add.w	r1, lr, #4
 800c2b6:	4439      	add	r1, r7
 800c2b8:	443a      	add	r2, r7
 800c2ba:	0137      	lsls	r7, r6, #4
 800c2bc:	00f6      	lsls	r6, r6, #3
 800c2be:	9704      	str	r7, [sp, #16]
 800c2c0:	9605      	str	r6, [sp, #20]
 800c2c2:	9f01      	ldr	r7, [sp, #4]
 800c2c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c2c6:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800c2ca:	f04f 0c00 	mov.w	ip, #0
 800c2ce:	edd4 6a00 	vldr	s13, [r4]
 800c2d2:	edd7 1a00 	vldr	s3, [r7]
 800c2d6:	ed16 aa01 	vldr	s20, [r6, #-4]
 800c2da:	edd5 5a00 	vldr	s11, [r5]
 800c2de:	ed52 9a01 	vldr	s19, [r2, #-4]
 800c2e2:	ed90 6a00 	vldr	s12, [r0]
 800c2e6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c2ea:	ed93 3a00 	vldr	s6, [r3]
 800c2ee:	ee39 0a86 	vadd.f32	s0, s19, s12
 800c2f2:	ee33 2a21 	vadd.f32	s4, s6, s3
 800c2f6:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800c2fa:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800c2fe:	ee35 7a02 	vadd.f32	s14, s10, s4
 800c302:	ee34 4a80 	vadd.f32	s8, s9, s0
 800c306:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c30a:	ee74 6a07 	vadd.f32	s13, s8, s14
 800c30e:	ee34 4a47 	vsub.f32	s8, s8, s14
 800c312:	ed46 6a01 	vstr	s13, [r6, #-4]
 800c316:	ed85 4a00 	vstr	s8, [r5]
 800c31a:	edd1 6a00 	vldr	s13, [r1]
 800c31e:	ed94 9a01 	vldr	s18, [r4, #4]
 800c322:	edd3 2a01 	vldr	s5, [r3, #4]
 800c326:	edd7 8a01 	vldr	s17, [r7, #4]
 800c32a:	edd6 0a00 	vldr	s1, [r6]
 800c32e:	edd5 3a01 	vldr	s7, [r5, #4]
 800c332:	ed90 8a01 	vldr	s16, [r0, #4]
 800c336:	ed92 7a00 	vldr	s14, [r2]
 800c33a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800c33e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800c342:	ee72 aae8 	vsub.f32	s21, s5, s17
 800c346:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800c34a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800c34e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800c352:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800c356:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800c35a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800c35e:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800c362:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800c366:	ee77 0a08 	vadd.f32	s1, s14, s16
 800c36a:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800c36e:	ee37 7a48 	vsub.f32	s14, s14, s16
 800c372:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800c376:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800c37a:	ee76 6a89 	vadd.f32	s13, s13, s18
 800c37e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800c382:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800c386:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800c38a:	ee35 5a42 	vsub.f32	s10, s10, s4
 800c38e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800c392:	ee33 2a20 	vadd.f32	s4, s6, s1
 800c396:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800c39a:	ee33 3a60 	vsub.f32	s6, s6, s1
 800c39e:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800c3a2:	ee77 0a01 	vadd.f32	s1, s14, s2
 800c3a6:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800c3aa:	ee37 7a41 	vsub.f32	s14, s14, s2
 800c3ae:	ee73 1a84 	vadd.f32	s3, s7, s8
 800c3b2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800c3b6:	ee76 3a27 	vadd.f32	s7, s12, s15
 800c3ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 800c3be:	ee32 8a00 	vadd.f32	s16, s4, s0
 800c3c2:	ee33 1a45 	vsub.f32	s2, s6, s10
 800c3c6:	ee32 2a40 	vsub.f32	s4, s4, s0
 800c3ca:	ee35 5a03 	vadd.f32	s10, s10, s6
 800c3ce:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800c3d2:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800c3d6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800c3da:	ee34 6a67 	vsub.f32	s12, s8, s15
 800c3de:	ee75 4a87 	vadd.f32	s9, s11, s14
 800c3e2:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800c3e6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800c3ea:	ee77 7a84 	vadd.f32	s15, s15, s8
 800c3ee:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800c3f2:	44dc      	add	ip, fp
 800c3f4:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800c3f8:	45e1      	cmp	r9, ip
 800c3fa:	ed86 8a00 	vstr	s16, [r6]
 800c3fe:	ed85 2a01 	vstr	s4, [r5, #4]
 800c402:	4456      	add	r6, sl
 800c404:	ed02 0a01 	vstr	s0, [r2, #-4]
 800c408:	4455      	add	r5, sl
 800c40a:	edc0 6a00 	vstr	s13, [r0]
 800c40e:	ed82 1a00 	vstr	s2, [r2]
 800c412:	ed80 5a01 	vstr	s10, [r0, #4]
 800c416:	4452      	add	r2, sl
 800c418:	ed01 3a01 	vstr	s6, [r1, #-4]
 800c41c:	4450      	add	r0, sl
 800c41e:	edc7 2a00 	vstr	s5, [r7]
 800c422:	edc4 4a00 	vstr	s9, [r4]
 800c426:	ed83 7a00 	vstr	s14, [r3]
 800c42a:	edc1 5a00 	vstr	s11, [r1]
 800c42e:	edc7 3a01 	vstr	s7, [r7, #4]
 800c432:	4451      	add	r1, sl
 800c434:	ed84 6a01 	vstr	s12, [r4, #4]
 800c438:	4457      	add	r7, sl
 800c43a:	edc3 7a01 	vstr	s15, [r3, #4]
 800c43e:	4454      	add	r4, sl
 800c440:	4453      	add	r3, sl
 800c442:	f63f af44 	bhi.w	800c2ce <arm_radix8_butterfly_f32+0x86>
 800c446:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c448:	2b07      	cmp	r3, #7
 800c44a:	f240 81b7 	bls.w	800c7bc <arm_radix8_butterfly_f32+0x574>
 800c44e:	9b06      	ldr	r3, [sp, #24]
 800c450:	9903      	ldr	r1, [sp, #12]
 800c452:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c454:	9e05      	ldr	r6, [sp, #20]
 800c456:	9a04      	ldr	r2, [sp, #16]
 800c458:	f103 0c08 	add.w	ip, r3, #8
 800c45c:	9b02      	ldr	r3, [sp, #8]
 800c45e:	3108      	adds	r1, #8
 800c460:	f108 0808 	add.w	r8, r8, #8
 800c464:	1841      	adds	r1, r0, r1
 800c466:	3608      	adds	r6, #8
 800c468:	330c      	adds	r3, #12
 800c46a:	4604      	mov	r4, r0
 800c46c:	4444      	add	r4, r8
 800c46e:	18c3      	adds	r3, r0, r3
 800c470:	9109      	str	r1, [sp, #36]	@ 0x24
 800c472:	1981      	adds	r1, r0, r6
 800c474:	f10e 0e08 	add.w	lr, lr, #8
 800c478:	3208      	adds	r2, #8
 800c47a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c47c:	9107      	str	r1, [sp, #28]
 800c47e:	4604      	mov	r4, r0
 800c480:	4601      	mov	r1, r0
 800c482:	9304      	str	r3, [sp, #16]
 800c484:	f100 030c 	add.w	r3, r0, #12
 800c488:	4474      	add	r4, lr
 800c48a:	f04f 0801 	mov.w	r8, #1
 800c48e:	1882      	adds	r2, r0, r2
 800c490:	4461      	add	r1, ip
 800c492:	9305      	str	r3, [sp, #20]
 800c494:	464b      	mov	r3, r9
 800c496:	940a      	str	r4, [sp, #40]	@ 0x28
 800c498:	46c1      	mov	r9, r8
 800c49a:	9208      	str	r2, [sp, #32]
 800c49c:	46d8      	mov	r8, fp
 800c49e:	9106      	str	r1, [sp, #24]
 800c4a0:	f04f 0e00 	mov.w	lr, #0
 800c4a4:	469b      	mov	fp, r3
 800c4a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c4a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c4aa:	449e      	add	lr, r3
 800c4ac:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800c4b0:	441a      	add	r2, r3
 800c4b2:	920e      	str	r2, [sp, #56]	@ 0x38
 800c4b4:	441a      	add	r2, r3
 800c4b6:	18d4      	adds	r4, r2, r3
 800c4b8:	18e5      	adds	r5, r4, r3
 800c4ba:	18ee      	adds	r6, r5, r3
 800c4bc:	18f7      	adds	r7, r6, r3
 800c4be:	eb07 0c03 	add.w	ip, r7, r3
 800c4c2:	920d      	str	r2, [sp, #52]	@ 0x34
 800c4c4:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800c4c8:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800c4cc:	910c      	str	r1, [sp, #48]	@ 0x30
 800c4ce:	4419      	add	r1, r3
 800c4d0:	9103      	str	r1, [sp, #12]
 800c4d2:	4419      	add	r1, r3
 800c4d4:	18ca      	adds	r2, r1, r3
 800c4d6:	9202      	str	r2, [sp, #8]
 800c4d8:	441a      	add	r2, r3
 800c4da:	18d0      	adds	r0, r2, r3
 800c4dc:	ed92 ea01 	vldr	s28, [r2, #4]
 800c4e0:	9a02      	ldr	r2, [sp, #8]
 800c4e2:	edd4 7a00 	vldr	s15, [r4]
 800c4e6:	edd2 da01 	vldr	s27, [r2, #4]
 800c4ea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c4ec:	ed91 da01 	vldr	s26, [r1, #4]
 800c4f0:	ed92 ca01 	vldr	s24, [r2, #4]
 800c4f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c4f6:	9903      	ldr	r1, [sp, #12]
 800c4f8:	edcd 7a03 	vstr	s15, [sp, #12]
 800c4fc:	edd2 7a00 	vldr	s15, [r2]
 800c500:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c502:	edcd 7a02 	vstr	s15, [sp, #8]
 800c506:	edd2 7a00 	vldr	s15, [r2]
 800c50a:	edd0 ea01 	vldr	s29, [r0, #4]
 800c50e:	edd1 ca01 	vldr	s25, [r1, #4]
 800c512:	eddc ba00 	vldr	s23, [ip]
 800c516:	edd7 aa00 	vldr	s21, [r7]
 800c51a:	ed96 aa00 	vldr	s20, [r6]
 800c51e:	edd5 9a00 	vldr	s19, [r5]
 800c522:	edcd 7a01 	vstr	s15, [sp, #4]
 800c526:	4403      	add	r3, r0
 800c528:	ed93 fa01 	vldr	s30, [r3, #4]
 800c52c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800c530:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800c534:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c538:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800c53c:	46cc      	mov	ip, r9
 800c53e:	e001      	b.n	800c544 <arm_radix8_butterfly_f32+0x2fc>
 800c540:	3f3504f3 	.word	0x3f3504f3
 800c544:	ed91 6a00 	vldr	s12, [r1]
 800c548:	ed93 5a00 	vldr	s10, [r3]
 800c54c:	edd0 fa00 	vldr	s31, [r0]
 800c550:	edd4 7a00 	vldr	s15, [r4]
 800c554:	ed95 7a00 	vldr	s14, [r5]
 800c558:	ed56 3a01 	vldr	s7, [r6, #-4]
 800c55c:	ed17 3a01 	vldr	s6, [r7, #-4]
 800c560:	ed92 2a00 	vldr	s4, [r2]
 800c564:	ed96 0a00 	vldr	s0, [r6]
 800c568:	ee33 8a85 	vadd.f32	s16, s7, s10
 800c56c:	ee32 1a06 	vadd.f32	s2, s4, s12
 800c570:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800c574:	ee77 4a87 	vadd.f32	s9, s15, s14
 800c578:	ee78 1a04 	vadd.f32	s3, s16, s8
 800c57c:	ee71 6a24 	vadd.f32	s13, s2, s9
 800c580:	ee32 2a46 	vsub.f32	s4, s4, s12
 800c584:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800c588:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c58c:	ed06 6a01 	vstr	s12, [r6, #-4]
 800c590:	edd4 8a01 	vldr	s17, [r4, #4]
 800c594:	ed92 9a01 	vldr	s18, [r2, #4]
 800c598:	edd7 0a00 	vldr	s1, [r7]
 800c59c:	edd1 2a01 	vldr	s5, [r1, #4]
 800c5a0:	ed95 7a01 	vldr	s14, [r5, #4]
 800c5a4:	ed93 6a01 	vldr	s12, [r3, #4]
 800c5a8:	edd0 5a01 	vldr	s11, [r0, #4]
 800c5ac:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800c5b0:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800c5b4:	ee39 5a62 	vsub.f32	s10, s18, s5
 800c5b8:	ee78 fac7 	vsub.f32	s31, s17, s14
 800c5bc:	ee38 4a44 	vsub.f32	s8, s16, s8
 800c5c0:	ee38 7a87 	vadd.f32	s14, s17, s14
 800c5c4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800c5c8:	ee79 2a22 	vadd.f32	s5, s18, s5
 800c5cc:	ee32 9a27 	vadd.f32	s18, s4, s15
 800c5d0:	ee72 7a67 	vsub.f32	s15, s4, s15
 800c5d4:	ee30 2a06 	vadd.f32	s4, s0, s12
 800c5d8:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800c5dc:	ee71 4a64 	vsub.f32	s9, s2, s9
 800c5e0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800c5e4:	ee32 1a08 	vadd.f32	s2, s4, s16
 800c5e8:	ee72 fa87 	vadd.f32	s31, s5, s14
 800c5ec:	ee32 2a48 	vsub.f32	s4, s4, s16
 800c5f0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800c5f4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800c5f8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800c5fc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800c600:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800c604:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800c608:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800c60c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800c610:	ee30 6a46 	vsub.f32	s12, s0, s12
 800c614:	ee74 0a22 	vadd.f32	s1, s8, s5
 800c618:	ee36 0a28 	vadd.f32	s0, s12, s17
 800c61c:	ee74 2a62 	vsub.f32	s5, s8, s5
 800c620:	ee36 6a68 	vsub.f32	s12, s12, s17
 800c624:	ee32 4a64 	vsub.f32	s8, s4, s9
 800c628:	ee73 8a09 	vadd.f32	s17, s6, s18
 800c62c:	ee74 4a82 	vadd.f32	s9, s9, s4
 800c630:	ee33 9a49 	vsub.f32	s18, s6, s18
 800c634:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800c638:	ee35 3a85 	vadd.f32	s6, s11, s10
 800c63c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800c640:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800c644:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800c648:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800c64c:	ee30 7a68 	vsub.f32	s14, s0, s17
 800c650:	ee35 8a03 	vadd.f32	s16, s10, s6
 800c654:	ee38 0a80 	vadd.f32	s0, s17, s0
 800c658:	ee73 3a82 	vadd.f32	s7, s7, s4
 800c65c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800c660:	ed9d 2a01 	vldr	s4, [sp, #4]
 800c664:	eddd 1a02 	vldr	s3, [sp, #8]
 800c668:	ee35 5a43 	vsub.f32	s10, s10, s6
 800c66c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800c670:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800c674:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800c678:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c67c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800c680:	ee76 5a49 	vsub.f32	s11, s12, s18
 800c684:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800c688:	ee39 6a06 	vadd.f32	s12, s18, s12
 800c68c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800c690:	ee21 4a84 	vmul.f32	s8, s3, s8
 800c694:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800c698:	ee22 7a07 	vmul.f32	s14, s4, s14
 800c69c:	ee22 2a08 	vmul.f32	s4, s4, s16
 800c6a0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800c6a4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800c6a8:	ee31 1a09 	vadd.f32	s2, s2, s18
 800c6ac:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800c6b0:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800c6b4:	ee74 0a60 	vsub.f32	s1, s8, s1
 800c6b8:	ee37 7a48 	vsub.f32	s14, s14, s16
 800c6bc:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800c6c0:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800c6c4:	ee72 1a21 	vadd.f32	s3, s4, s3
 800c6c8:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800c6cc:	ee38 2a89 	vadd.f32	s4, s17, s18
 800c6d0:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800c6d4:	ee38 8a04 	vadd.f32	s16, s16, s8
 800c6d8:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800c6dc:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800c6e0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800c6e4:	eddd 5a03 	vldr	s11, [sp, #12]
 800c6e8:	edc6 fa00 	vstr	s31, [r6]
 800c6ec:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800c6f0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800c6f4:	ee30 0a45 	vsub.f32	s0, s0, s10
 800c6f8:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800c6fc:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800c700:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800c704:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800c708:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800c70c:	ee25 6a86 	vmul.f32	s12, s11, s12
 800c710:	ee74 4a89 	vadd.f32	s9, s9, s18
 800c714:	ee34 3a43 	vsub.f32	s6, s8, s6
 800c718:	ee78 8a85 	vadd.f32	s17, s17, s10
 800c71c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800c720:	44c4      	add	ip, r8
 800c722:	45e3      	cmp	fp, ip
 800c724:	edc3 3a00 	vstr	s7, [r3]
 800c728:	edc3 6a01 	vstr	s13, [r3, #4]
 800c72c:	4456      	add	r6, sl
 800c72e:	ed07 1a01 	vstr	s2, [r7, #-4]
 800c732:	edc7 0a00 	vstr	s1, [r7]
 800c736:	4453      	add	r3, sl
 800c738:	ed80 2a00 	vstr	s4, [r0]
 800c73c:	edc0 2a01 	vstr	s5, [r0, #4]
 800c740:	4457      	add	r7, sl
 800c742:	edc2 1a00 	vstr	s3, [r2]
 800c746:	ed82 7a01 	vstr	s14, [r2, #4]
 800c74a:	4450      	add	r0, sl
 800c74c:	ed85 8a00 	vstr	s16, [r5]
 800c750:	ed85 0a01 	vstr	s0, [r5, #4]
 800c754:	4452      	add	r2, sl
 800c756:	edc1 4a00 	vstr	s9, [r1]
 800c75a:	4455      	add	r5, sl
 800c75c:	ed81 3a01 	vstr	s6, [r1, #4]
 800c760:	edc4 8a00 	vstr	s17, [r4]
 800c764:	ed84 6a01 	vstr	s12, [r4, #4]
 800c768:	4451      	add	r1, sl
 800c76a:	4454      	add	r4, sl
 800c76c:	f63f aeea 	bhi.w	800c544 <arm_radix8_butterfly_f32+0x2fc>
 800c770:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c772:	3308      	adds	r3, #8
 800c774:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c776:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c778:	3308      	adds	r3, #8
 800c77a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c77c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c77e:	3308      	adds	r3, #8
 800c780:	9309      	str	r3, [sp, #36]	@ 0x24
 800c782:	9b08      	ldr	r3, [sp, #32]
 800c784:	3308      	adds	r3, #8
 800c786:	9308      	str	r3, [sp, #32]
 800c788:	9b07      	ldr	r3, [sp, #28]
 800c78a:	3308      	adds	r3, #8
 800c78c:	9307      	str	r3, [sp, #28]
 800c78e:	9b06      	ldr	r3, [sp, #24]
 800c790:	3308      	adds	r3, #8
 800c792:	9306      	str	r3, [sp, #24]
 800c794:	9b05      	ldr	r3, [sp, #20]
 800c796:	3308      	adds	r3, #8
 800c798:	9305      	str	r3, [sp, #20]
 800c79a:	9b04      	ldr	r3, [sp, #16]
 800c79c:	3308      	adds	r3, #8
 800c79e:	9304      	str	r3, [sp, #16]
 800c7a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7a2:	f109 0901 	add.w	r9, r9, #1
 800c7a6:	454b      	cmp	r3, r9
 800c7a8:	f47f ae7d 	bne.w	800c4a6 <arm_radix8_butterfly_f32+0x25e>
 800c7ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c7ae:	00db      	lsls	r3, r3, #3
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	46d9      	mov	r9, fp
 800c7b4:	9310      	str	r3, [sp, #64]	@ 0x40
 800c7b6:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800c7ba:	e554      	b.n	800c266 <arm_radix8_butterfly_f32+0x1e>
 800c7bc:	b015      	add	sp, #84	@ 0x54
 800c7be:	ecbd 8b10 	vpop	{d8-d15}
 800c7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7c6:	bf00      	nop

0800c7c8 <memset>:
 800c7c8:	4402      	add	r2, r0
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d100      	bne.n	800c7d2 <memset+0xa>
 800c7d0:	4770      	bx	lr
 800c7d2:	f803 1b01 	strb.w	r1, [r3], #1
 800c7d6:	e7f9      	b.n	800c7cc <memset+0x4>

0800c7d8 <__errno>:
 800c7d8:	4b01      	ldr	r3, [pc, #4]	@ (800c7e0 <__errno+0x8>)
 800c7da:	6818      	ldr	r0, [r3, #0]
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	20000014 	.word	0x20000014

0800c7e4 <__libc_init_array>:
 800c7e4:	b570      	push	{r4, r5, r6, lr}
 800c7e6:	4d0d      	ldr	r5, [pc, #52]	@ (800c81c <__libc_init_array+0x38>)
 800c7e8:	4c0d      	ldr	r4, [pc, #52]	@ (800c820 <__libc_init_array+0x3c>)
 800c7ea:	1b64      	subs	r4, r4, r5
 800c7ec:	10a4      	asrs	r4, r4, #2
 800c7ee:	2600      	movs	r6, #0
 800c7f0:	42a6      	cmp	r6, r4
 800c7f2:	d109      	bne.n	800c808 <__libc_init_array+0x24>
 800c7f4:	4d0b      	ldr	r5, [pc, #44]	@ (800c824 <__libc_init_array+0x40>)
 800c7f6:	4c0c      	ldr	r4, [pc, #48]	@ (800c828 <__libc_init_array+0x44>)
 800c7f8:	f001 fd4c 	bl	800e294 <_init>
 800c7fc:	1b64      	subs	r4, r4, r5
 800c7fe:	10a4      	asrs	r4, r4, #2
 800c800:	2600      	movs	r6, #0
 800c802:	42a6      	cmp	r6, r4
 800c804:	d105      	bne.n	800c812 <__libc_init_array+0x2e>
 800c806:	bd70      	pop	{r4, r5, r6, pc}
 800c808:	f855 3b04 	ldr.w	r3, [r5], #4
 800c80c:	4798      	blx	r3
 800c80e:	3601      	adds	r6, #1
 800c810:	e7ee      	b.n	800c7f0 <__libc_init_array+0xc>
 800c812:	f855 3b04 	ldr.w	r3, [r5], #4
 800c816:	4798      	blx	r3
 800c818:	3601      	adds	r6, #1
 800c81a:	e7f2      	b.n	800c802 <__libc_init_array+0x1e>
 800c81c:	08022b20 	.word	0x08022b20
 800c820:	08022b20 	.word	0x08022b20
 800c824:	08022b20 	.word	0x08022b20
 800c828:	08022b24 	.word	0x08022b24

0800c82c <pow>:
 800c82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82e:	ed2d 8b02 	vpush	{d8}
 800c832:	eeb0 8a40 	vmov.f32	s16, s0
 800c836:	eef0 8a60 	vmov.f32	s17, s1
 800c83a:	ec55 4b11 	vmov	r4, r5, d1
 800c83e:	f000 f953 	bl	800cae8 <__ieee754_pow>
 800c842:	4622      	mov	r2, r4
 800c844:	462b      	mov	r3, r5
 800c846:	4620      	mov	r0, r4
 800c848:	4629      	mov	r1, r5
 800c84a:	ec57 6b10 	vmov	r6, r7, d0
 800c84e:	f7f4 f92d 	bl	8000aac <__aeabi_dcmpun>
 800c852:	2800      	cmp	r0, #0
 800c854:	d13b      	bne.n	800c8ce <pow+0xa2>
 800c856:	ec51 0b18 	vmov	r0, r1, d8
 800c85a:	2200      	movs	r2, #0
 800c85c:	2300      	movs	r3, #0
 800c85e:	f7f4 f8f3 	bl	8000a48 <__aeabi_dcmpeq>
 800c862:	b1b8      	cbz	r0, 800c894 <pow+0x68>
 800c864:	2200      	movs	r2, #0
 800c866:	2300      	movs	r3, #0
 800c868:	4620      	mov	r0, r4
 800c86a:	4629      	mov	r1, r5
 800c86c:	f7f4 f8ec 	bl	8000a48 <__aeabi_dcmpeq>
 800c870:	2800      	cmp	r0, #0
 800c872:	d146      	bne.n	800c902 <pow+0xd6>
 800c874:	ec45 4b10 	vmov	d0, r4, r5
 800c878:	f000 f8aa 	bl	800c9d0 <finite>
 800c87c:	b338      	cbz	r0, 800c8ce <pow+0xa2>
 800c87e:	2200      	movs	r2, #0
 800c880:	2300      	movs	r3, #0
 800c882:	4620      	mov	r0, r4
 800c884:	4629      	mov	r1, r5
 800c886:	f7f4 f8e9 	bl	8000a5c <__aeabi_dcmplt>
 800c88a:	b300      	cbz	r0, 800c8ce <pow+0xa2>
 800c88c:	f7ff ffa4 	bl	800c7d8 <__errno>
 800c890:	2322      	movs	r3, #34	@ 0x22
 800c892:	e01b      	b.n	800c8cc <pow+0xa0>
 800c894:	ec47 6b10 	vmov	d0, r6, r7
 800c898:	f000 f89a 	bl	800c9d0 <finite>
 800c89c:	b9e0      	cbnz	r0, 800c8d8 <pow+0xac>
 800c89e:	eeb0 0a48 	vmov.f32	s0, s16
 800c8a2:	eef0 0a68 	vmov.f32	s1, s17
 800c8a6:	f000 f893 	bl	800c9d0 <finite>
 800c8aa:	b1a8      	cbz	r0, 800c8d8 <pow+0xac>
 800c8ac:	ec45 4b10 	vmov	d0, r4, r5
 800c8b0:	f000 f88e 	bl	800c9d0 <finite>
 800c8b4:	b180      	cbz	r0, 800c8d8 <pow+0xac>
 800c8b6:	4632      	mov	r2, r6
 800c8b8:	463b      	mov	r3, r7
 800c8ba:	4630      	mov	r0, r6
 800c8bc:	4639      	mov	r1, r7
 800c8be:	f7f4 f8f5 	bl	8000aac <__aeabi_dcmpun>
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	d0e2      	beq.n	800c88c <pow+0x60>
 800c8c6:	f7ff ff87 	bl	800c7d8 <__errno>
 800c8ca:	2321      	movs	r3, #33	@ 0x21
 800c8cc:	6003      	str	r3, [r0, #0]
 800c8ce:	ecbd 8b02 	vpop	{d8}
 800c8d2:	ec47 6b10 	vmov	d0, r6, r7
 800c8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8d8:	2200      	movs	r2, #0
 800c8da:	2300      	movs	r3, #0
 800c8dc:	4630      	mov	r0, r6
 800c8de:	4639      	mov	r1, r7
 800c8e0:	f7f4 f8b2 	bl	8000a48 <__aeabi_dcmpeq>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	d0f2      	beq.n	800c8ce <pow+0xa2>
 800c8e8:	eeb0 0a48 	vmov.f32	s0, s16
 800c8ec:	eef0 0a68 	vmov.f32	s1, s17
 800c8f0:	f000 f86e 	bl	800c9d0 <finite>
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	d0ea      	beq.n	800c8ce <pow+0xa2>
 800c8f8:	ec45 4b10 	vmov	d0, r4, r5
 800c8fc:	f000 f868 	bl	800c9d0 <finite>
 800c900:	e7c3      	b.n	800c88a <pow+0x5e>
 800c902:	4f01      	ldr	r7, [pc, #4]	@ (800c908 <pow+0xdc>)
 800c904:	2600      	movs	r6, #0
 800c906:	e7e2      	b.n	800c8ce <pow+0xa2>
 800c908:	3ff00000 	.word	0x3ff00000

0800c90c <sqrtf>:
 800c90c:	b508      	push	{r3, lr}
 800c90e:	ed2d 8b02 	vpush	{d8}
 800c912:	eeb0 8a40 	vmov.f32	s16, s0
 800c916:	f000 f866 	bl	800c9e6 <__ieee754_sqrtf>
 800c91a:	eeb4 8a48 	vcmp.f32	s16, s16
 800c91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c922:	d60c      	bvs.n	800c93e <sqrtf+0x32>
 800c924:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c944 <sqrtf+0x38>
 800c928:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c930:	d505      	bpl.n	800c93e <sqrtf+0x32>
 800c932:	f7ff ff51 	bl	800c7d8 <__errno>
 800c936:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c93a:	2321      	movs	r3, #33	@ 0x21
 800c93c:	6003      	str	r3, [r0, #0]
 800c93e:	ecbd 8b02 	vpop	{d8}
 800c942:	bd08      	pop	{r3, pc}
 800c944:	00000000 	.word	0x00000000

0800c948 <cosf>:
 800c948:	ee10 3a10 	vmov	r3, s0
 800c94c:	b507      	push	{r0, r1, r2, lr}
 800c94e:	4a1e      	ldr	r2, [pc, #120]	@ (800c9c8 <cosf+0x80>)
 800c950:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c954:	4293      	cmp	r3, r2
 800c956:	d806      	bhi.n	800c966 <cosf+0x1e>
 800c958:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800c9cc <cosf+0x84>
 800c95c:	b003      	add	sp, #12
 800c95e:	f85d eb04 	ldr.w	lr, [sp], #4
 800c962:	f000 be0d 	b.w	800d580 <__kernel_cosf>
 800c966:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c96a:	d304      	bcc.n	800c976 <cosf+0x2e>
 800c96c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c970:	b003      	add	sp, #12
 800c972:	f85d fb04 	ldr.w	pc, [sp], #4
 800c976:	4668      	mov	r0, sp
 800c978:	f000 fea2 	bl	800d6c0 <__ieee754_rem_pio2f>
 800c97c:	f000 0003 	and.w	r0, r0, #3
 800c980:	2801      	cmp	r0, #1
 800c982:	d009      	beq.n	800c998 <cosf+0x50>
 800c984:	2802      	cmp	r0, #2
 800c986:	d010      	beq.n	800c9aa <cosf+0x62>
 800c988:	b9b0      	cbnz	r0, 800c9b8 <cosf+0x70>
 800c98a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c98e:	ed9d 0a00 	vldr	s0, [sp]
 800c992:	f000 fdf5 	bl	800d580 <__kernel_cosf>
 800c996:	e7eb      	b.n	800c970 <cosf+0x28>
 800c998:	eddd 0a01 	vldr	s1, [sp, #4]
 800c99c:	ed9d 0a00 	vldr	s0, [sp]
 800c9a0:	f000 fe46 	bl	800d630 <__kernel_sinf>
 800c9a4:	eeb1 0a40 	vneg.f32	s0, s0
 800c9a8:	e7e2      	b.n	800c970 <cosf+0x28>
 800c9aa:	eddd 0a01 	vldr	s1, [sp, #4]
 800c9ae:	ed9d 0a00 	vldr	s0, [sp]
 800c9b2:	f000 fde5 	bl	800d580 <__kernel_cosf>
 800c9b6:	e7f5      	b.n	800c9a4 <cosf+0x5c>
 800c9b8:	eddd 0a01 	vldr	s1, [sp, #4]
 800c9bc:	ed9d 0a00 	vldr	s0, [sp]
 800c9c0:	2001      	movs	r0, #1
 800c9c2:	f000 fe35 	bl	800d630 <__kernel_sinf>
 800c9c6:	e7d3      	b.n	800c970 <cosf+0x28>
 800c9c8:	3f490fd8 	.word	0x3f490fd8
 800c9cc:	00000000 	.word	0x00000000

0800c9d0 <finite>:
 800c9d0:	b082      	sub	sp, #8
 800c9d2:	ed8d 0b00 	vstr	d0, [sp]
 800c9d6:	9801      	ldr	r0, [sp, #4]
 800c9d8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800c9dc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800c9e0:	0fc0      	lsrs	r0, r0, #31
 800c9e2:	b002      	add	sp, #8
 800c9e4:	4770      	bx	lr

0800c9e6 <__ieee754_sqrtf>:
 800c9e6:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c9ea:	4770      	bx	lr
 800c9ec:	0000      	movs	r0, r0
	...

0800c9f0 <floor>:
 800c9f0:	ec51 0b10 	vmov	r0, r1, d0
 800c9f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9fc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800ca00:	2e13      	cmp	r6, #19
 800ca02:	460c      	mov	r4, r1
 800ca04:	4605      	mov	r5, r0
 800ca06:	4680      	mov	r8, r0
 800ca08:	dc34      	bgt.n	800ca74 <floor+0x84>
 800ca0a:	2e00      	cmp	r6, #0
 800ca0c:	da17      	bge.n	800ca3e <floor+0x4e>
 800ca0e:	a332      	add	r3, pc, #200	@ (adr r3, 800cad8 <floor+0xe8>)
 800ca10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca14:	f7f3 fbfa 	bl	800020c <__adddf3>
 800ca18:	2200      	movs	r2, #0
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	f7f4 f83c 	bl	8000a98 <__aeabi_dcmpgt>
 800ca20:	b150      	cbz	r0, 800ca38 <floor+0x48>
 800ca22:	2c00      	cmp	r4, #0
 800ca24:	da55      	bge.n	800cad2 <floor+0xe2>
 800ca26:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ca2a:	432c      	orrs	r4, r5
 800ca2c:	2500      	movs	r5, #0
 800ca2e:	42ac      	cmp	r4, r5
 800ca30:	4c2b      	ldr	r4, [pc, #172]	@ (800cae0 <floor+0xf0>)
 800ca32:	bf08      	it	eq
 800ca34:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800ca38:	4621      	mov	r1, r4
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	e023      	b.n	800ca86 <floor+0x96>
 800ca3e:	4f29      	ldr	r7, [pc, #164]	@ (800cae4 <floor+0xf4>)
 800ca40:	4137      	asrs	r7, r6
 800ca42:	ea01 0307 	and.w	r3, r1, r7
 800ca46:	4303      	orrs	r3, r0
 800ca48:	d01d      	beq.n	800ca86 <floor+0x96>
 800ca4a:	a323      	add	r3, pc, #140	@ (adr r3, 800cad8 <floor+0xe8>)
 800ca4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca50:	f7f3 fbdc 	bl	800020c <__adddf3>
 800ca54:	2200      	movs	r2, #0
 800ca56:	2300      	movs	r3, #0
 800ca58:	f7f4 f81e 	bl	8000a98 <__aeabi_dcmpgt>
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	d0eb      	beq.n	800ca38 <floor+0x48>
 800ca60:	2c00      	cmp	r4, #0
 800ca62:	bfbe      	ittt	lt
 800ca64:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800ca68:	4133      	asrlt	r3, r6
 800ca6a:	18e4      	addlt	r4, r4, r3
 800ca6c:	ea24 0407 	bic.w	r4, r4, r7
 800ca70:	2500      	movs	r5, #0
 800ca72:	e7e1      	b.n	800ca38 <floor+0x48>
 800ca74:	2e33      	cmp	r6, #51	@ 0x33
 800ca76:	dd0a      	ble.n	800ca8e <floor+0x9e>
 800ca78:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800ca7c:	d103      	bne.n	800ca86 <floor+0x96>
 800ca7e:	4602      	mov	r2, r0
 800ca80:	460b      	mov	r3, r1
 800ca82:	f7f3 fbc3 	bl	800020c <__adddf3>
 800ca86:	ec41 0b10 	vmov	d0, r0, r1
 800ca8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca8e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800ca92:	f04f 37ff 	mov.w	r7, #4294967295
 800ca96:	40df      	lsrs	r7, r3
 800ca98:	4207      	tst	r7, r0
 800ca9a:	d0f4      	beq.n	800ca86 <floor+0x96>
 800ca9c:	a30e      	add	r3, pc, #56	@ (adr r3, 800cad8 <floor+0xe8>)
 800ca9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa2:	f7f3 fbb3 	bl	800020c <__adddf3>
 800caa6:	2200      	movs	r2, #0
 800caa8:	2300      	movs	r3, #0
 800caaa:	f7f3 fff5 	bl	8000a98 <__aeabi_dcmpgt>
 800caae:	2800      	cmp	r0, #0
 800cab0:	d0c2      	beq.n	800ca38 <floor+0x48>
 800cab2:	2c00      	cmp	r4, #0
 800cab4:	da0a      	bge.n	800cacc <floor+0xdc>
 800cab6:	2e14      	cmp	r6, #20
 800cab8:	d101      	bne.n	800cabe <floor+0xce>
 800caba:	3401      	adds	r4, #1
 800cabc:	e006      	b.n	800cacc <floor+0xdc>
 800cabe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800cac2:	2301      	movs	r3, #1
 800cac4:	40b3      	lsls	r3, r6
 800cac6:	441d      	add	r5, r3
 800cac8:	4545      	cmp	r5, r8
 800caca:	d3f6      	bcc.n	800caba <floor+0xca>
 800cacc:	ea25 0507 	bic.w	r5, r5, r7
 800cad0:	e7b2      	b.n	800ca38 <floor+0x48>
 800cad2:	2500      	movs	r5, #0
 800cad4:	462c      	mov	r4, r5
 800cad6:	e7af      	b.n	800ca38 <floor+0x48>
 800cad8:	8800759c 	.word	0x8800759c
 800cadc:	7e37e43c 	.word	0x7e37e43c
 800cae0:	bff00000 	.word	0xbff00000
 800cae4:	000fffff 	.word	0x000fffff

0800cae8 <__ieee754_pow>:
 800cae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caec:	b091      	sub	sp, #68	@ 0x44
 800caee:	ed8d 1b00 	vstr	d1, [sp]
 800caf2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800caf6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800cafa:	ea5a 0001 	orrs.w	r0, sl, r1
 800cafe:	ec57 6b10 	vmov	r6, r7, d0
 800cb02:	d113      	bne.n	800cb2c <__ieee754_pow+0x44>
 800cb04:	19b3      	adds	r3, r6, r6
 800cb06:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800cb0a:	4152      	adcs	r2, r2
 800cb0c:	4298      	cmp	r0, r3
 800cb0e:	4b98      	ldr	r3, [pc, #608]	@ (800cd70 <__ieee754_pow+0x288>)
 800cb10:	4193      	sbcs	r3, r2
 800cb12:	f080 84ea 	bcs.w	800d4ea <__ieee754_pow+0xa02>
 800cb16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb1a:	4630      	mov	r0, r6
 800cb1c:	4639      	mov	r1, r7
 800cb1e:	f7f3 fb75 	bl	800020c <__adddf3>
 800cb22:	ec41 0b10 	vmov	d0, r0, r1
 800cb26:	b011      	add	sp, #68	@ 0x44
 800cb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2c:	4a91      	ldr	r2, [pc, #580]	@ (800cd74 <__ieee754_pow+0x28c>)
 800cb2e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800cb32:	4590      	cmp	r8, r2
 800cb34:	463d      	mov	r5, r7
 800cb36:	4633      	mov	r3, r6
 800cb38:	d806      	bhi.n	800cb48 <__ieee754_pow+0x60>
 800cb3a:	d101      	bne.n	800cb40 <__ieee754_pow+0x58>
 800cb3c:	2e00      	cmp	r6, #0
 800cb3e:	d1ea      	bne.n	800cb16 <__ieee754_pow+0x2e>
 800cb40:	4592      	cmp	sl, r2
 800cb42:	d801      	bhi.n	800cb48 <__ieee754_pow+0x60>
 800cb44:	d10e      	bne.n	800cb64 <__ieee754_pow+0x7c>
 800cb46:	b169      	cbz	r1, 800cb64 <__ieee754_pow+0x7c>
 800cb48:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800cb4c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800cb50:	431d      	orrs	r5, r3
 800cb52:	d1e0      	bne.n	800cb16 <__ieee754_pow+0x2e>
 800cb54:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cb58:	18db      	adds	r3, r3, r3
 800cb5a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800cb5e:	4152      	adcs	r2, r2
 800cb60:	429d      	cmp	r5, r3
 800cb62:	e7d4      	b.n	800cb0e <__ieee754_pow+0x26>
 800cb64:	2d00      	cmp	r5, #0
 800cb66:	46c3      	mov	fp, r8
 800cb68:	da3a      	bge.n	800cbe0 <__ieee754_pow+0xf8>
 800cb6a:	4a83      	ldr	r2, [pc, #524]	@ (800cd78 <__ieee754_pow+0x290>)
 800cb6c:	4592      	cmp	sl, r2
 800cb6e:	d84d      	bhi.n	800cc0c <__ieee754_pow+0x124>
 800cb70:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800cb74:	4592      	cmp	sl, r2
 800cb76:	f240 84c7 	bls.w	800d508 <__ieee754_pow+0xa20>
 800cb7a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800cb7e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800cb82:	2a14      	cmp	r2, #20
 800cb84:	dd0f      	ble.n	800cba6 <__ieee754_pow+0xbe>
 800cb86:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800cb8a:	fa21 f402 	lsr.w	r4, r1, r2
 800cb8e:	fa04 f202 	lsl.w	r2, r4, r2
 800cb92:	428a      	cmp	r2, r1
 800cb94:	f040 84b8 	bne.w	800d508 <__ieee754_pow+0xa20>
 800cb98:	f004 0401 	and.w	r4, r4, #1
 800cb9c:	f1c4 0402 	rsb	r4, r4, #2
 800cba0:	2900      	cmp	r1, #0
 800cba2:	d158      	bne.n	800cc56 <__ieee754_pow+0x16e>
 800cba4:	e00e      	b.n	800cbc4 <__ieee754_pow+0xdc>
 800cba6:	2900      	cmp	r1, #0
 800cba8:	d154      	bne.n	800cc54 <__ieee754_pow+0x16c>
 800cbaa:	f1c2 0214 	rsb	r2, r2, #20
 800cbae:	fa4a f402 	asr.w	r4, sl, r2
 800cbb2:	fa04 f202 	lsl.w	r2, r4, r2
 800cbb6:	4552      	cmp	r2, sl
 800cbb8:	f040 84a3 	bne.w	800d502 <__ieee754_pow+0xa1a>
 800cbbc:	f004 0401 	and.w	r4, r4, #1
 800cbc0:	f1c4 0402 	rsb	r4, r4, #2
 800cbc4:	4a6d      	ldr	r2, [pc, #436]	@ (800cd7c <__ieee754_pow+0x294>)
 800cbc6:	4592      	cmp	sl, r2
 800cbc8:	d12e      	bne.n	800cc28 <__ieee754_pow+0x140>
 800cbca:	f1b9 0f00 	cmp.w	r9, #0
 800cbce:	f280 8494 	bge.w	800d4fa <__ieee754_pow+0xa12>
 800cbd2:	496a      	ldr	r1, [pc, #424]	@ (800cd7c <__ieee754_pow+0x294>)
 800cbd4:	4632      	mov	r2, r6
 800cbd6:	463b      	mov	r3, r7
 800cbd8:	2000      	movs	r0, #0
 800cbda:	f7f3 fdf7 	bl	80007cc <__aeabi_ddiv>
 800cbde:	e7a0      	b.n	800cb22 <__ieee754_pow+0x3a>
 800cbe0:	2400      	movs	r4, #0
 800cbe2:	bbc1      	cbnz	r1, 800cc56 <__ieee754_pow+0x16e>
 800cbe4:	4a63      	ldr	r2, [pc, #396]	@ (800cd74 <__ieee754_pow+0x28c>)
 800cbe6:	4592      	cmp	sl, r2
 800cbe8:	d1ec      	bne.n	800cbc4 <__ieee754_pow+0xdc>
 800cbea:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800cbee:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800cbf2:	431a      	orrs	r2, r3
 800cbf4:	f000 8479 	beq.w	800d4ea <__ieee754_pow+0xa02>
 800cbf8:	4b61      	ldr	r3, [pc, #388]	@ (800cd80 <__ieee754_pow+0x298>)
 800cbfa:	4598      	cmp	r8, r3
 800cbfc:	d908      	bls.n	800cc10 <__ieee754_pow+0x128>
 800cbfe:	f1b9 0f00 	cmp.w	r9, #0
 800cc02:	f2c0 8476 	blt.w	800d4f2 <__ieee754_pow+0xa0a>
 800cc06:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc0a:	e78a      	b.n	800cb22 <__ieee754_pow+0x3a>
 800cc0c:	2402      	movs	r4, #2
 800cc0e:	e7e8      	b.n	800cbe2 <__ieee754_pow+0xfa>
 800cc10:	f1b9 0f00 	cmp.w	r9, #0
 800cc14:	f04f 0000 	mov.w	r0, #0
 800cc18:	f04f 0100 	mov.w	r1, #0
 800cc1c:	da81      	bge.n	800cb22 <__ieee754_pow+0x3a>
 800cc1e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cc22:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cc26:	e77c      	b.n	800cb22 <__ieee754_pow+0x3a>
 800cc28:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800cc2c:	d106      	bne.n	800cc3c <__ieee754_pow+0x154>
 800cc2e:	4632      	mov	r2, r6
 800cc30:	463b      	mov	r3, r7
 800cc32:	4630      	mov	r0, r6
 800cc34:	4639      	mov	r1, r7
 800cc36:	f7f3 fc9f 	bl	8000578 <__aeabi_dmul>
 800cc3a:	e772      	b.n	800cb22 <__ieee754_pow+0x3a>
 800cc3c:	4a51      	ldr	r2, [pc, #324]	@ (800cd84 <__ieee754_pow+0x29c>)
 800cc3e:	4591      	cmp	r9, r2
 800cc40:	d109      	bne.n	800cc56 <__ieee754_pow+0x16e>
 800cc42:	2d00      	cmp	r5, #0
 800cc44:	db07      	blt.n	800cc56 <__ieee754_pow+0x16e>
 800cc46:	ec47 6b10 	vmov	d0, r6, r7
 800cc4a:	b011      	add	sp, #68	@ 0x44
 800cc4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc50:	f000 bf2a 	b.w	800daa8 <__ieee754_sqrt>
 800cc54:	2400      	movs	r4, #0
 800cc56:	ec47 6b10 	vmov	d0, r6, r7
 800cc5a:	9302      	str	r3, [sp, #8]
 800cc5c:	f000 fc88 	bl	800d570 <fabs>
 800cc60:	9b02      	ldr	r3, [sp, #8]
 800cc62:	ec51 0b10 	vmov	r0, r1, d0
 800cc66:	bb53      	cbnz	r3, 800ccbe <__ieee754_pow+0x1d6>
 800cc68:	4b44      	ldr	r3, [pc, #272]	@ (800cd7c <__ieee754_pow+0x294>)
 800cc6a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d002      	beq.n	800cc78 <__ieee754_pow+0x190>
 800cc72:	f1b8 0f00 	cmp.w	r8, #0
 800cc76:	d122      	bne.n	800ccbe <__ieee754_pow+0x1d6>
 800cc78:	f1b9 0f00 	cmp.w	r9, #0
 800cc7c:	da05      	bge.n	800cc8a <__ieee754_pow+0x1a2>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	460b      	mov	r3, r1
 800cc82:	2000      	movs	r0, #0
 800cc84:	493d      	ldr	r1, [pc, #244]	@ (800cd7c <__ieee754_pow+0x294>)
 800cc86:	f7f3 fda1 	bl	80007cc <__aeabi_ddiv>
 800cc8a:	2d00      	cmp	r5, #0
 800cc8c:	f6bf af49 	bge.w	800cb22 <__ieee754_pow+0x3a>
 800cc90:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800cc94:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800cc98:	ea58 0804 	orrs.w	r8, r8, r4
 800cc9c:	d108      	bne.n	800ccb0 <__ieee754_pow+0x1c8>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	460b      	mov	r3, r1
 800cca2:	4610      	mov	r0, r2
 800cca4:	4619      	mov	r1, r3
 800cca6:	f7f3 faaf 	bl	8000208 <__aeabi_dsub>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	460b      	mov	r3, r1
 800ccae:	e794      	b.n	800cbda <__ieee754_pow+0xf2>
 800ccb0:	2c01      	cmp	r4, #1
 800ccb2:	f47f af36 	bne.w	800cb22 <__ieee754_pow+0x3a>
 800ccb6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ccba:	4619      	mov	r1, r3
 800ccbc:	e731      	b.n	800cb22 <__ieee754_pow+0x3a>
 800ccbe:	0feb      	lsrs	r3, r5, #31
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	ea53 0204 	orrs.w	r2, r3, r4
 800ccc6:	d102      	bne.n	800ccce <__ieee754_pow+0x1e6>
 800ccc8:	4632      	mov	r2, r6
 800ccca:	463b      	mov	r3, r7
 800cccc:	e7e9      	b.n	800cca2 <__ieee754_pow+0x1ba>
 800ccce:	3c01      	subs	r4, #1
 800ccd0:	431c      	orrs	r4, r3
 800ccd2:	d016      	beq.n	800cd02 <__ieee754_pow+0x21a>
 800ccd4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800cd60 <__ieee754_pow+0x278>
 800ccd8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ccdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cce0:	f240 8112 	bls.w	800cf08 <__ieee754_pow+0x420>
 800cce4:	4b28      	ldr	r3, [pc, #160]	@ (800cd88 <__ieee754_pow+0x2a0>)
 800cce6:	459a      	cmp	sl, r3
 800cce8:	4b25      	ldr	r3, [pc, #148]	@ (800cd80 <__ieee754_pow+0x298>)
 800ccea:	d916      	bls.n	800cd1a <__ieee754_pow+0x232>
 800ccec:	4598      	cmp	r8, r3
 800ccee:	d80b      	bhi.n	800cd08 <__ieee754_pow+0x220>
 800ccf0:	f1b9 0f00 	cmp.w	r9, #0
 800ccf4:	da0b      	bge.n	800cd0e <__ieee754_pow+0x226>
 800ccf6:	2000      	movs	r0, #0
 800ccf8:	b011      	add	sp, #68	@ 0x44
 800ccfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccfe:	f000 becb 	b.w	800da98 <__math_oflow>
 800cd02:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800cd68 <__ieee754_pow+0x280>
 800cd06:	e7e7      	b.n	800ccd8 <__ieee754_pow+0x1f0>
 800cd08:	f1b9 0f00 	cmp.w	r9, #0
 800cd0c:	dcf3      	bgt.n	800ccf6 <__ieee754_pow+0x20e>
 800cd0e:	2000      	movs	r0, #0
 800cd10:	b011      	add	sp, #68	@ 0x44
 800cd12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd16:	f000 beb7 	b.w	800da88 <__math_uflow>
 800cd1a:	4598      	cmp	r8, r3
 800cd1c:	d20c      	bcs.n	800cd38 <__ieee754_pow+0x250>
 800cd1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd22:	2200      	movs	r2, #0
 800cd24:	2300      	movs	r3, #0
 800cd26:	f7f3 fe99 	bl	8000a5c <__aeabi_dcmplt>
 800cd2a:	3800      	subs	r0, #0
 800cd2c:	bf18      	it	ne
 800cd2e:	2001      	movne	r0, #1
 800cd30:	f1b9 0f00 	cmp.w	r9, #0
 800cd34:	daec      	bge.n	800cd10 <__ieee754_pow+0x228>
 800cd36:	e7df      	b.n	800ccf8 <__ieee754_pow+0x210>
 800cd38:	4b10      	ldr	r3, [pc, #64]	@ (800cd7c <__ieee754_pow+0x294>)
 800cd3a:	4598      	cmp	r8, r3
 800cd3c:	f04f 0200 	mov.w	r2, #0
 800cd40:	d924      	bls.n	800cd8c <__ieee754_pow+0x2a4>
 800cd42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd46:	2300      	movs	r3, #0
 800cd48:	f7f3 fe88 	bl	8000a5c <__aeabi_dcmplt>
 800cd4c:	3800      	subs	r0, #0
 800cd4e:	bf18      	it	ne
 800cd50:	2001      	movne	r0, #1
 800cd52:	f1b9 0f00 	cmp.w	r9, #0
 800cd56:	dccf      	bgt.n	800ccf8 <__ieee754_pow+0x210>
 800cd58:	e7da      	b.n	800cd10 <__ieee754_pow+0x228>
 800cd5a:	bf00      	nop
 800cd5c:	f3af 8000 	nop.w
 800cd60:	00000000 	.word	0x00000000
 800cd64:	3ff00000 	.word	0x3ff00000
 800cd68:	00000000 	.word	0x00000000
 800cd6c:	bff00000 	.word	0xbff00000
 800cd70:	fff00000 	.word	0xfff00000
 800cd74:	7ff00000 	.word	0x7ff00000
 800cd78:	433fffff 	.word	0x433fffff
 800cd7c:	3ff00000 	.word	0x3ff00000
 800cd80:	3fefffff 	.word	0x3fefffff
 800cd84:	3fe00000 	.word	0x3fe00000
 800cd88:	43f00000 	.word	0x43f00000
 800cd8c:	4b5a      	ldr	r3, [pc, #360]	@ (800cef8 <__ieee754_pow+0x410>)
 800cd8e:	f7f3 fa3b 	bl	8000208 <__aeabi_dsub>
 800cd92:	a351      	add	r3, pc, #324	@ (adr r3, 800ced8 <__ieee754_pow+0x3f0>)
 800cd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd98:	4604      	mov	r4, r0
 800cd9a:	460d      	mov	r5, r1
 800cd9c:	f7f3 fbec 	bl	8000578 <__aeabi_dmul>
 800cda0:	a34f      	add	r3, pc, #316	@ (adr r3, 800cee0 <__ieee754_pow+0x3f8>)
 800cda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda6:	4606      	mov	r6, r0
 800cda8:	460f      	mov	r7, r1
 800cdaa:	4620      	mov	r0, r4
 800cdac:	4629      	mov	r1, r5
 800cdae:	f7f3 fbe3 	bl	8000578 <__aeabi_dmul>
 800cdb2:	4b52      	ldr	r3, [pc, #328]	@ (800cefc <__ieee754_pow+0x414>)
 800cdb4:	4682      	mov	sl, r0
 800cdb6:	468b      	mov	fp, r1
 800cdb8:	2200      	movs	r2, #0
 800cdba:	4620      	mov	r0, r4
 800cdbc:	4629      	mov	r1, r5
 800cdbe:	f7f3 fbdb 	bl	8000578 <__aeabi_dmul>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	a148      	add	r1, pc, #288	@ (adr r1, 800cee8 <__ieee754_pow+0x400>)
 800cdc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdcc:	f7f3 fa1c 	bl	8000208 <__aeabi_dsub>
 800cdd0:	4622      	mov	r2, r4
 800cdd2:	462b      	mov	r3, r5
 800cdd4:	f7f3 fbd0 	bl	8000578 <__aeabi_dmul>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	460b      	mov	r3, r1
 800cddc:	2000      	movs	r0, #0
 800cdde:	4948      	ldr	r1, [pc, #288]	@ (800cf00 <__ieee754_pow+0x418>)
 800cde0:	f7f3 fa12 	bl	8000208 <__aeabi_dsub>
 800cde4:	4622      	mov	r2, r4
 800cde6:	4680      	mov	r8, r0
 800cde8:	4689      	mov	r9, r1
 800cdea:	462b      	mov	r3, r5
 800cdec:	4620      	mov	r0, r4
 800cdee:	4629      	mov	r1, r5
 800cdf0:	f7f3 fbc2 	bl	8000578 <__aeabi_dmul>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	4640      	mov	r0, r8
 800cdfa:	4649      	mov	r1, r9
 800cdfc:	f7f3 fbbc 	bl	8000578 <__aeabi_dmul>
 800ce00:	a33b      	add	r3, pc, #236	@ (adr r3, 800cef0 <__ieee754_pow+0x408>)
 800ce02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce06:	f7f3 fbb7 	bl	8000578 <__aeabi_dmul>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	460b      	mov	r3, r1
 800ce0e:	4650      	mov	r0, sl
 800ce10:	4659      	mov	r1, fp
 800ce12:	f7f3 f9f9 	bl	8000208 <__aeabi_dsub>
 800ce16:	4602      	mov	r2, r0
 800ce18:	460b      	mov	r3, r1
 800ce1a:	4680      	mov	r8, r0
 800ce1c:	4689      	mov	r9, r1
 800ce1e:	4630      	mov	r0, r6
 800ce20:	4639      	mov	r1, r7
 800ce22:	f7f3 f9f3 	bl	800020c <__adddf3>
 800ce26:	2400      	movs	r4, #0
 800ce28:	4632      	mov	r2, r6
 800ce2a:	463b      	mov	r3, r7
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	460d      	mov	r5, r1
 800ce30:	f7f3 f9ea 	bl	8000208 <__aeabi_dsub>
 800ce34:	4602      	mov	r2, r0
 800ce36:	460b      	mov	r3, r1
 800ce38:	4640      	mov	r0, r8
 800ce3a:	4649      	mov	r1, r9
 800ce3c:	f7f3 f9e4 	bl	8000208 <__aeabi_dsub>
 800ce40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce48:	2300      	movs	r3, #0
 800ce4a:	9304      	str	r3, [sp, #16]
 800ce4c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ce50:	4606      	mov	r6, r0
 800ce52:	460f      	mov	r7, r1
 800ce54:	4652      	mov	r2, sl
 800ce56:	465b      	mov	r3, fp
 800ce58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce5c:	f7f3 f9d4 	bl	8000208 <__aeabi_dsub>
 800ce60:	4622      	mov	r2, r4
 800ce62:	462b      	mov	r3, r5
 800ce64:	f7f3 fb88 	bl	8000578 <__aeabi_dmul>
 800ce68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce6c:	4680      	mov	r8, r0
 800ce6e:	4689      	mov	r9, r1
 800ce70:	4630      	mov	r0, r6
 800ce72:	4639      	mov	r1, r7
 800ce74:	f7f3 fb80 	bl	8000578 <__aeabi_dmul>
 800ce78:	4602      	mov	r2, r0
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	4640      	mov	r0, r8
 800ce7e:	4649      	mov	r1, r9
 800ce80:	f7f3 f9c4 	bl	800020c <__adddf3>
 800ce84:	4652      	mov	r2, sl
 800ce86:	465b      	mov	r3, fp
 800ce88:	4606      	mov	r6, r0
 800ce8a:	460f      	mov	r7, r1
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	4629      	mov	r1, r5
 800ce90:	f7f3 fb72 	bl	8000578 <__aeabi_dmul>
 800ce94:	460b      	mov	r3, r1
 800ce96:	4602      	mov	r2, r0
 800ce98:	4680      	mov	r8, r0
 800ce9a:	4689      	mov	r9, r1
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	4639      	mov	r1, r7
 800cea0:	f7f3 f9b4 	bl	800020c <__adddf3>
 800cea4:	4b17      	ldr	r3, [pc, #92]	@ (800cf04 <__ieee754_pow+0x41c>)
 800cea6:	4299      	cmp	r1, r3
 800cea8:	4604      	mov	r4, r0
 800ceaa:	460d      	mov	r5, r1
 800ceac:	468a      	mov	sl, r1
 800ceae:	468b      	mov	fp, r1
 800ceb0:	f340 82ef 	ble.w	800d492 <__ieee754_pow+0x9aa>
 800ceb4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800ceb8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800cebc:	4303      	orrs	r3, r0
 800cebe:	f000 81e8 	beq.w	800d292 <__ieee754_pow+0x7aa>
 800cec2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cec6:	2200      	movs	r2, #0
 800cec8:	2300      	movs	r3, #0
 800ceca:	f7f3 fdc7 	bl	8000a5c <__aeabi_dcmplt>
 800cece:	3800      	subs	r0, #0
 800ced0:	bf18      	it	ne
 800ced2:	2001      	movne	r0, #1
 800ced4:	e710      	b.n	800ccf8 <__ieee754_pow+0x210>
 800ced6:	bf00      	nop
 800ced8:	60000000 	.word	0x60000000
 800cedc:	3ff71547 	.word	0x3ff71547
 800cee0:	f85ddf44 	.word	0xf85ddf44
 800cee4:	3e54ae0b 	.word	0x3e54ae0b
 800cee8:	55555555 	.word	0x55555555
 800ceec:	3fd55555 	.word	0x3fd55555
 800cef0:	652b82fe 	.word	0x652b82fe
 800cef4:	3ff71547 	.word	0x3ff71547
 800cef8:	3ff00000 	.word	0x3ff00000
 800cefc:	3fd00000 	.word	0x3fd00000
 800cf00:	3fe00000 	.word	0x3fe00000
 800cf04:	408fffff 	.word	0x408fffff
 800cf08:	4bd5      	ldr	r3, [pc, #852]	@ (800d260 <__ieee754_pow+0x778>)
 800cf0a:	402b      	ands	r3, r5
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	b92b      	cbnz	r3, 800cf1c <__ieee754_pow+0x434>
 800cf10:	4bd4      	ldr	r3, [pc, #848]	@ (800d264 <__ieee754_pow+0x77c>)
 800cf12:	f7f3 fb31 	bl	8000578 <__aeabi_dmul>
 800cf16:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800cf1a:	468b      	mov	fp, r1
 800cf1c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800cf20:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800cf24:	4413      	add	r3, r2
 800cf26:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf28:	4bcf      	ldr	r3, [pc, #828]	@ (800d268 <__ieee754_pow+0x780>)
 800cf2a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800cf2e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800cf32:	459b      	cmp	fp, r3
 800cf34:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cf38:	dd08      	ble.n	800cf4c <__ieee754_pow+0x464>
 800cf3a:	4bcc      	ldr	r3, [pc, #816]	@ (800d26c <__ieee754_pow+0x784>)
 800cf3c:	459b      	cmp	fp, r3
 800cf3e:	f340 81a5 	ble.w	800d28c <__ieee754_pow+0x7a4>
 800cf42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf44:	3301      	adds	r3, #1
 800cf46:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf48:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800cf4c:	f04f 0a00 	mov.w	sl, #0
 800cf50:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800cf54:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf56:	4bc6      	ldr	r3, [pc, #792]	@ (800d270 <__ieee754_pow+0x788>)
 800cf58:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cf5c:	ed93 7b00 	vldr	d7, [r3]
 800cf60:	4629      	mov	r1, r5
 800cf62:	ec53 2b17 	vmov	r2, r3, d7
 800cf66:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cf6a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cf6e:	f7f3 f94b 	bl	8000208 <__aeabi_dsub>
 800cf72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cf76:	4606      	mov	r6, r0
 800cf78:	460f      	mov	r7, r1
 800cf7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf7e:	f7f3 f945 	bl	800020c <__adddf3>
 800cf82:	4602      	mov	r2, r0
 800cf84:	460b      	mov	r3, r1
 800cf86:	2000      	movs	r0, #0
 800cf88:	49ba      	ldr	r1, [pc, #744]	@ (800d274 <__ieee754_pow+0x78c>)
 800cf8a:	f7f3 fc1f 	bl	80007cc <__aeabi_ddiv>
 800cf8e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800cf92:	4602      	mov	r2, r0
 800cf94:	460b      	mov	r3, r1
 800cf96:	4630      	mov	r0, r6
 800cf98:	4639      	mov	r1, r7
 800cf9a:	f7f3 faed 	bl	8000578 <__aeabi_dmul>
 800cf9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cfa2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800cfa6:	106d      	asrs	r5, r5, #1
 800cfa8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800cfac:	f04f 0b00 	mov.w	fp, #0
 800cfb0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800cfb4:	4661      	mov	r1, ip
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800cfbc:	4658      	mov	r0, fp
 800cfbe:	46e1      	mov	r9, ip
 800cfc0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800cfc4:	4614      	mov	r4, r2
 800cfc6:	461d      	mov	r5, r3
 800cfc8:	f7f3 fad6 	bl	8000578 <__aeabi_dmul>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	460b      	mov	r3, r1
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	4639      	mov	r1, r7
 800cfd4:	f7f3 f918 	bl	8000208 <__aeabi_dsub>
 800cfd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cfdc:	4606      	mov	r6, r0
 800cfde:	460f      	mov	r7, r1
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	4629      	mov	r1, r5
 800cfe4:	f7f3 f910 	bl	8000208 <__aeabi_dsub>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	460b      	mov	r3, r1
 800cfec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cff0:	f7f3 f90a 	bl	8000208 <__aeabi_dsub>
 800cff4:	465a      	mov	r2, fp
 800cff6:	464b      	mov	r3, r9
 800cff8:	f7f3 fabe 	bl	8000578 <__aeabi_dmul>
 800cffc:	4602      	mov	r2, r0
 800cffe:	460b      	mov	r3, r1
 800d000:	4630      	mov	r0, r6
 800d002:	4639      	mov	r1, r7
 800d004:	f7f3 f900 	bl	8000208 <__aeabi_dsub>
 800d008:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d00c:	f7f3 fab4 	bl	8000578 <__aeabi_dmul>
 800d010:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d014:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d018:	4610      	mov	r0, r2
 800d01a:	4619      	mov	r1, r3
 800d01c:	f7f3 faac 	bl	8000578 <__aeabi_dmul>
 800d020:	a37d      	add	r3, pc, #500	@ (adr r3, 800d218 <__ieee754_pow+0x730>)
 800d022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d026:	4604      	mov	r4, r0
 800d028:	460d      	mov	r5, r1
 800d02a:	f7f3 faa5 	bl	8000578 <__aeabi_dmul>
 800d02e:	a37c      	add	r3, pc, #496	@ (adr r3, 800d220 <__ieee754_pow+0x738>)
 800d030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d034:	f7f3 f8ea 	bl	800020c <__adddf3>
 800d038:	4622      	mov	r2, r4
 800d03a:	462b      	mov	r3, r5
 800d03c:	f7f3 fa9c 	bl	8000578 <__aeabi_dmul>
 800d040:	a379      	add	r3, pc, #484	@ (adr r3, 800d228 <__ieee754_pow+0x740>)
 800d042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d046:	f7f3 f8e1 	bl	800020c <__adddf3>
 800d04a:	4622      	mov	r2, r4
 800d04c:	462b      	mov	r3, r5
 800d04e:	f7f3 fa93 	bl	8000578 <__aeabi_dmul>
 800d052:	a377      	add	r3, pc, #476	@ (adr r3, 800d230 <__ieee754_pow+0x748>)
 800d054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d058:	f7f3 f8d8 	bl	800020c <__adddf3>
 800d05c:	4622      	mov	r2, r4
 800d05e:	462b      	mov	r3, r5
 800d060:	f7f3 fa8a 	bl	8000578 <__aeabi_dmul>
 800d064:	a374      	add	r3, pc, #464	@ (adr r3, 800d238 <__ieee754_pow+0x750>)
 800d066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06a:	f7f3 f8cf 	bl	800020c <__adddf3>
 800d06e:	4622      	mov	r2, r4
 800d070:	462b      	mov	r3, r5
 800d072:	f7f3 fa81 	bl	8000578 <__aeabi_dmul>
 800d076:	a372      	add	r3, pc, #456	@ (adr r3, 800d240 <__ieee754_pow+0x758>)
 800d078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07c:	f7f3 f8c6 	bl	800020c <__adddf3>
 800d080:	4622      	mov	r2, r4
 800d082:	4606      	mov	r6, r0
 800d084:	460f      	mov	r7, r1
 800d086:	462b      	mov	r3, r5
 800d088:	4620      	mov	r0, r4
 800d08a:	4629      	mov	r1, r5
 800d08c:	f7f3 fa74 	bl	8000578 <__aeabi_dmul>
 800d090:	4602      	mov	r2, r0
 800d092:	460b      	mov	r3, r1
 800d094:	4630      	mov	r0, r6
 800d096:	4639      	mov	r1, r7
 800d098:	f7f3 fa6e 	bl	8000578 <__aeabi_dmul>
 800d09c:	465a      	mov	r2, fp
 800d09e:	4604      	mov	r4, r0
 800d0a0:	460d      	mov	r5, r1
 800d0a2:	464b      	mov	r3, r9
 800d0a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d0a8:	f7f3 f8b0 	bl	800020c <__adddf3>
 800d0ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0b0:	f7f3 fa62 	bl	8000578 <__aeabi_dmul>
 800d0b4:	4622      	mov	r2, r4
 800d0b6:	462b      	mov	r3, r5
 800d0b8:	f7f3 f8a8 	bl	800020c <__adddf3>
 800d0bc:	465a      	mov	r2, fp
 800d0be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d0c2:	464b      	mov	r3, r9
 800d0c4:	4658      	mov	r0, fp
 800d0c6:	4649      	mov	r1, r9
 800d0c8:	f7f3 fa56 	bl	8000578 <__aeabi_dmul>
 800d0cc:	4b6a      	ldr	r3, [pc, #424]	@ (800d278 <__ieee754_pow+0x790>)
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	4606      	mov	r6, r0
 800d0d2:	460f      	mov	r7, r1
 800d0d4:	f7f3 f89a 	bl	800020c <__adddf3>
 800d0d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d0dc:	f7f3 f896 	bl	800020c <__adddf3>
 800d0e0:	46d8      	mov	r8, fp
 800d0e2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800d0e6:	460d      	mov	r5, r1
 800d0e8:	465a      	mov	r2, fp
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	4640      	mov	r0, r8
 800d0ee:	4649      	mov	r1, r9
 800d0f0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800d0f4:	f7f3 fa40 	bl	8000578 <__aeabi_dmul>
 800d0f8:	465c      	mov	r4, fp
 800d0fa:	4680      	mov	r8, r0
 800d0fc:	4689      	mov	r9, r1
 800d0fe:	4b5e      	ldr	r3, [pc, #376]	@ (800d278 <__ieee754_pow+0x790>)
 800d100:	2200      	movs	r2, #0
 800d102:	4620      	mov	r0, r4
 800d104:	4629      	mov	r1, r5
 800d106:	f7f3 f87f 	bl	8000208 <__aeabi_dsub>
 800d10a:	4632      	mov	r2, r6
 800d10c:	463b      	mov	r3, r7
 800d10e:	f7f3 f87b 	bl	8000208 <__aeabi_dsub>
 800d112:	4602      	mov	r2, r0
 800d114:	460b      	mov	r3, r1
 800d116:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d11a:	f7f3 f875 	bl	8000208 <__aeabi_dsub>
 800d11e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d122:	f7f3 fa29 	bl	8000578 <__aeabi_dmul>
 800d126:	4622      	mov	r2, r4
 800d128:	4606      	mov	r6, r0
 800d12a:	460f      	mov	r7, r1
 800d12c:	462b      	mov	r3, r5
 800d12e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d132:	f7f3 fa21 	bl	8000578 <__aeabi_dmul>
 800d136:	4602      	mov	r2, r0
 800d138:	460b      	mov	r3, r1
 800d13a:	4630      	mov	r0, r6
 800d13c:	4639      	mov	r1, r7
 800d13e:	f7f3 f865 	bl	800020c <__adddf3>
 800d142:	4606      	mov	r6, r0
 800d144:	460f      	mov	r7, r1
 800d146:	4602      	mov	r2, r0
 800d148:	460b      	mov	r3, r1
 800d14a:	4640      	mov	r0, r8
 800d14c:	4649      	mov	r1, r9
 800d14e:	f7f3 f85d 	bl	800020c <__adddf3>
 800d152:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800d156:	a33c      	add	r3, pc, #240	@ (adr r3, 800d248 <__ieee754_pow+0x760>)
 800d158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15c:	4658      	mov	r0, fp
 800d15e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800d162:	460d      	mov	r5, r1
 800d164:	f7f3 fa08 	bl	8000578 <__aeabi_dmul>
 800d168:	465c      	mov	r4, fp
 800d16a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d16e:	4642      	mov	r2, r8
 800d170:	464b      	mov	r3, r9
 800d172:	4620      	mov	r0, r4
 800d174:	4629      	mov	r1, r5
 800d176:	f7f3 f847 	bl	8000208 <__aeabi_dsub>
 800d17a:	4602      	mov	r2, r0
 800d17c:	460b      	mov	r3, r1
 800d17e:	4630      	mov	r0, r6
 800d180:	4639      	mov	r1, r7
 800d182:	f7f3 f841 	bl	8000208 <__aeabi_dsub>
 800d186:	a332      	add	r3, pc, #200	@ (adr r3, 800d250 <__ieee754_pow+0x768>)
 800d188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18c:	f7f3 f9f4 	bl	8000578 <__aeabi_dmul>
 800d190:	a331      	add	r3, pc, #196	@ (adr r3, 800d258 <__ieee754_pow+0x770>)
 800d192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d196:	4606      	mov	r6, r0
 800d198:	460f      	mov	r7, r1
 800d19a:	4620      	mov	r0, r4
 800d19c:	4629      	mov	r1, r5
 800d19e:	f7f3 f9eb 	bl	8000578 <__aeabi_dmul>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	4630      	mov	r0, r6
 800d1a8:	4639      	mov	r1, r7
 800d1aa:	f7f3 f82f 	bl	800020c <__adddf3>
 800d1ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d1b0:	4b32      	ldr	r3, [pc, #200]	@ (800d27c <__ieee754_pow+0x794>)
 800d1b2:	4413      	add	r3, r2
 800d1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b8:	f7f3 f828 	bl	800020c <__adddf3>
 800d1bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d1c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d1c2:	f7f3 f96f 	bl	80004a4 <__aeabi_i2d>
 800d1c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d1c8:	4b2d      	ldr	r3, [pc, #180]	@ (800d280 <__ieee754_pow+0x798>)
 800d1ca:	4413      	add	r3, r2
 800d1cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d1d0:	4606      	mov	r6, r0
 800d1d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1d6:	460f      	mov	r7, r1
 800d1d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d1dc:	f7f3 f816 	bl	800020c <__adddf3>
 800d1e0:	4642      	mov	r2, r8
 800d1e2:	464b      	mov	r3, r9
 800d1e4:	f7f3 f812 	bl	800020c <__adddf3>
 800d1e8:	4632      	mov	r2, r6
 800d1ea:	463b      	mov	r3, r7
 800d1ec:	f7f3 f80e 	bl	800020c <__adddf3>
 800d1f0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800d1f4:	4632      	mov	r2, r6
 800d1f6:	463b      	mov	r3, r7
 800d1f8:	4658      	mov	r0, fp
 800d1fa:	460d      	mov	r5, r1
 800d1fc:	f7f3 f804 	bl	8000208 <__aeabi_dsub>
 800d200:	4642      	mov	r2, r8
 800d202:	464b      	mov	r3, r9
 800d204:	f7f3 f800 	bl	8000208 <__aeabi_dsub>
 800d208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d20c:	f7f2 fffc 	bl	8000208 <__aeabi_dsub>
 800d210:	465c      	mov	r4, fp
 800d212:	4602      	mov	r2, r0
 800d214:	e036      	b.n	800d284 <__ieee754_pow+0x79c>
 800d216:	bf00      	nop
 800d218:	4a454eef 	.word	0x4a454eef
 800d21c:	3fca7e28 	.word	0x3fca7e28
 800d220:	93c9db65 	.word	0x93c9db65
 800d224:	3fcd864a 	.word	0x3fcd864a
 800d228:	a91d4101 	.word	0xa91d4101
 800d22c:	3fd17460 	.word	0x3fd17460
 800d230:	518f264d 	.word	0x518f264d
 800d234:	3fd55555 	.word	0x3fd55555
 800d238:	db6fabff 	.word	0xdb6fabff
 800d23c:	3fdb6db6 	.word	0x3fdb6db6
 800d240:	33333303 	.word	0x33333303
 800d244:	3fe33333 	.word	0x3fe33333
 800d248:	e0000000 	.word	0xe0000000
 800d24c:	3feec709 	.word	0x3feec709
 800d250:	dc3a03fd 	.word	0xdc3a03fd
 800d254:	3feec709 	.word	0x3feec709
 800d258:	145b01f5 	.word	0x145b01f5
 800d25c:	be3e2fe0 	.word	0xbe3e2fe0
 800d260:	7ff00000 	.word	0x7ff00000
 800d264:	43400000 	.word	0x43400000
 800d268:	0003988e 	.word	0x0003988e
 800d26c:	000bb679 	.word	0x000bb679
 800d270:	08022738 	.word	0x08022738
 800d274:	3ff00000 	.word	0x3ff00000
 800d278:	40080000 	.word	0x40080000
 800d27c:	08022718 	.word	0x08022718
 800d280:	08022728 	.word	0x08022728
 800d284:	460b      	mov	r3, r1
 800d286:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d28a:	e5d7      	b.n	800ce3c <__ieee754_pow+0x354>
 800d28c:	f04f 0a01 	mov.w	sl, #1
 800d290:	e65e      	b.n	800cf50 <__ieee754_pow+0x468>
 800d292:	a3b4      	add	r3, pc, #720	@ (adr r3, 800d564 <__ieee754_pow+0xa7c>)
 800d294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d298:	4630      	mov	r0, r6
 800d29a:	4639      	mov	r1, r7
 800d29c:	f7f2 ffb6 	bl	800020c <__adddf3>
 800d2a0:	4642      	mov	r2, r8
 800d2a2:	e9cd 0100 	strd	r0, r1, [sp]
 800d2a6:	464b      	mov	r3, r9
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	4629      	mov	r1, r5
 800d2ac:	f7f2 ffac 	bl	8000208 <__aeabi_dsub>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2b8:	f7f3 fbee 	bl	8000a98 <__aeabi_dcmpgt>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	f47f ae00 	bne.w	800cec2 <__ieee754_pow+0x3da>
 800d2c2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800d2c6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d2ca:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800d2ce:	fa43 fa0a 	asr.w	sl, r3, sl
 800d2d2:	44da      	add	sl, fp
 800d2d4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d2d8:	489d      	ldr	r0, [pc, #628]	@ (800d550 <__ieee754_pow+0xa68>)
 800d2da:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800d2de:	4108      	asrs	r0, r1
 800d2e0:	ea00 030a 	and.w	r3, r0, sl
 800d2e4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d2e8:	f1c1 0114 	rsb	r1, r1, #20
 800d2ec:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800d2f0:	fa4a fa01 	asr.w	sl, sl, r1
 800d2f4:	f1bb 0f00 	cmp.w	fp, #0
 800d2f8:	4640      	mov	r0, r8
 800d2fa:	4649      	mov	r1, r9
 800d2fc:	f04f 0200 	mov.w	r2, #0
 800d300:	bfb8      	it	lt
 800d302:	f1ca 0a00 	rsblt	sl, sl, #0
 800d306:	f7f2 ff7f 	bl	8000208 <__aeabi_dsub>
 800d30a:	4680      	mov	r8, r0
 800d30c:	4689      	mov	r9, r1
 800d30e:	4632      	mov	r2, r6
 800d310:	463b      	mov	r3, r7
 800d312:	4640      	mov	r0, r8
 800d314:	4649      	mov	r1, r9
 800d316:	f7f2 ff79 	bl	800020c <__adddf3>
 800d31a:	2400      	movs	r4, #0
 800d31c:	a37c      	add	r3, pc, #496	@ (adr r3, 800d510 <__ieee754_pow+0xa28>)
 800d31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d322:	4620      	mov	r0, r4
 800d324:	460d      	mov	r5, r1
 800d326:	f7f3 f927 	bl	8000578 <__aeabi_dmul>
 800d32a:	4642      	mov	r2, r8
 800d32c:	e9cd 0100 	strd	r0, r1, [sp]
 800d330:	464b      	mov	r3, r9
 800d332:	4620      	mov	r0, r4
 800d334:	4629      	mov	r1, r5
 800d336:	f7f2 ff67 	bl	8000208 <__aeabi_dsub>
 800d33a:	4602      	mov	r2, r0
 800d33c:	460b      	mov	r3, r1
 800d33e:	4630      	mov	r0, r6
 800d340:	4639      	mov	r1, r7
 800d342:	f7f2 ff61 	bl	8000208 <__aeabi_dsub>
 800d346:	a374      	add	r3, pc, #464	@ (adr r3, 800d518 <__ieee754_pow+0xa30>)
 800d348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34c:	f7f3 f914 	bl	8000578 <__aeabi_dmul>
 800d350:	a373      	add	r3, pc, #460	@ (adr r3, 800d520 <__ieee754_pow+0xa38>)
 800d352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d356:	4680      	mov	r8, r0
 800d358:	4689      	mov	r9, r1
 800d35a:	4620      	mov	r0, r4
 800d35c:	4629      	mov	r1, r5
 800d35e:	f7f3 f90b 	bl	8000578 <__aeabi_dmul>
 800d362:	4602      	mov	r2, r0
 800d364:	460b      	mov	r3, r1
 800d366:	4640      	mov	r0, r8
 800d368:	4649      	mov	r1, r9
 800d36a:	f7f2 ff4f 	bl	800020c <__adddf3>
 800d36e:	4604      	mov	r4, r0
 800d370:	460d      	mov	r5, r1
 800d372:	4602      	mov	r2, r0
 800d374:	460b      	mov	r3, r1
 800d376:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d37a:	f7f2 ff47 	bl	800020c <__adddf3>
 800d37e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d382:	4680      	mov	r8, r0
 800d384:	4689      	mov	r9, r1
 800d386:	f7f2 ff3f 	bl	8000208 <__aeabi_dsub>
 800d38a:	4602      	mov	r2, r0
 800d38c:	460b      	mov	r3, r1
 800d38e:	4620      	mov	r0, r4
 800d390:	4629      	mov	r1, r5
 800d392:	f7f2 ff39 	bl	8000208 <__aeabi_dsub>
 800d396:	4642      	mov	r2, r8
 800d398:	4606      	mov	r6, r0
 800d39a:	460f      	mov	r7, r1
 800d39c:	464b      	mov	r3, r9
 800d39e:	4640      	mov	r0, r8
 800d3a0:	4649      	mov	r1, r9
 800d3a2:	f7f3 f8e9 	bl	8000578 <__aeabi_dmul>
 800d3a6:	a360      	add	r3, pc, #384	@ (adr r3, 800d528 <__ieee754_pow+0xa40>)
 800d3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	460d      	mov	r5, r1
 800d3b0:	f7f3 f8e2 	bl	8000578 <__aeabi_dmul>
 800d3b4:	a35e      	add	r3, pc, #376	@ (adr r3, 800d530 <__ieee754_pow+0xa48>)
 800d3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ba:	f7f2 ff25 	bl	8000208 <__aeabi_dsub>
 800d3be:	4622      	mov	r2, r4
 800d3c0:	462b      	mov	r3, r5
 800d3c2:	f7f3 f8d9 	bl	8000578 <__aeabi_dmul>
 800d3c6:	a35c      	add	r3, pc, #368	@ (adr r3, 800d538 <__ieee754_pow+0xa50>)
 800d3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3cc:	f7f2 ff1e 	bl	800020c <__adddf3>
 800d3d0:	4622      	mov	r2, r4
 800d3d2:	462b      	mov	r3, r5
 800d3d4:	f7f3 f8d0 	bl	8000578 <__aeabi_dmul>
 800d3d8:	a359      	add	r3, pc, #356	@ (adr r3, 800d540 <__ieee754_pow+0xa58>)
 800d3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3de:	f7f2 ff13 	bl	8000208 <__aeabi_dsub>
 800d3e2:	4622      	mov	r2, r4
 800d3e4:	462b      	mov	r3, r5
 800d3e6:	f7f3 f8c7 	bl	8000578 <__aeabi_dmul>
 800d3ea:	a357      	add	r3, pc, #348	@ (adr r3, 800d548 <__ieee754_pow+0xa60>)
 800d3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f0:	f7f2 ff0c 	bl	800020c <__adddf3>
 800d3f4:	4622      	mov	r2, r4
 800d3f6:	462b      	mov	r3, r5
 800d3f8:	f7f3 f8be 	bl	8000578 <__aeabi_dmul>
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	460b      	mov	r3, r1
 800d400:	4640      	mov	r0, r8
 800d402:	4649      	mov	r1, r9
 800d404:	f7f2 ff00 	bl	8000208 <__aeabi_dsub>
 800d408:	4604      	mov	r4, r0
 800d40a:	460d      	mov	r5, r1
 800d40c:	4602      	mov	r2, r0
 800d40e:	460b      	mov	r3, r1
 800d410:	4640      	mov	r0, r8
 800d412:	4649      	mov	r1, r9
 800d414:	f7f3 f8b0 	bl	8000578 <__aeabi_dmul>
 800d418:	2200      	movs	r2, #0
 800d41a:	e9cd 0100 	strd	r0, r1, [sp]
 800d41e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d422:	4620      	mov	r0, r4
 800d424:	4629      	mov	r1, r5
 800d426:	f7f2 feef 	bl	8000208 <__aeabi_dsub>
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d432:	f7f3 f9cb 	bl	80007cc <__aeabi_ddiv>
 800d436:	4632      	mov	r2, r6
 800d438:	4604      	mov	r4, r0
 800d43a:	460d      	mov	r5, r1
 800d43c:	463b      	mov	r3, r7
 800d43e:	4640      	mov	r0, r8
 800d440:	4649      	mov	r1, r9
 800d442:	f7f3 f899 	bl	8000578 <__aeabi_dmul>
 800d446:	4632      	mov	r2, r6
 800d448:	463b      	mov	r3, r7
 800d44a:	f7f2 fedf 	bl	800020c <__adddf3>
 800d44e:	4602      	mov	r2, r0
 800d450:	460b      	mov	r3, r1
 800d452:	4620      	mov	r0, r4
 800d454:	4629      	mov	r1, r5
 800d456:	f7f2 fed7 	bl	8000208 <__aeabi_dsub>
 800d45a:	4642      	mov	r2, r8
 800d45c:	464b      	mov	r3, r9
 800d45e:	f7f2 fed3 	bl	8000208 <__aeabi_dsub>
 800d462:	460b      	mov	r3, r1
 800d464:	4602      	mov	r2, r0
 800d466:	493b      	ldr	r1, [pc, #236]	@ (800d554 <__ieee754_pow+0xa6c>)
 800d468:	2000      	movs	r0, #0
 800d46a:	f7f2 fecd 	bl	8000208 <__aeabi_dsub>
 800d46e:	ec41 0b10 	vmov	d0, r0, r1
 800d472:	ee10 3a90 	vmov	r3, s1
 800d476:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d47a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d47e:	da30      	bge.n	800d4e2 <__ieee754_pow+0x9fa>
 800d480:	4650      	mov	r0, sl
 800d482:	f000 fa55 	bl	800d930 <scalbn>
 800d486:	ec51 0b10 	vmov	r0, r1, d0
 800d48a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d48e:	f7ff bbd2 	b.w	800cc36 <__ieee754_pow+0x14e>
 800d492:	4c31      	ldr	r4, [pc, #196]	@ (800d558 <__ieee754_pow+0xa70>)
 800d494:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d498:	42a3      	cmp	r3, r4
 800d49a:	d91a      	bls.n	800d4d2 <__ieee754_pow+0x9ea>
 800d49c:	4b2f      	ldr	r3, [pc, #188]	@ (800d55c <__ieee754_pow+0xa74>)
 800d49e:	440b      	add	r3, r1
 800d4a0:	4303      	orrs	r3, r0
 800d4a2:	d009      	beq.n	800d4b8 <__ieee754_pow+0x9d0>
 800d4a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	f7f3 fad6 	bl	8000a5c <__aeabi_dcmplt>
 800d4b0:	3800      	subs	r0, #0
 800d4b2:	bf18      	it	ne
 800d4b4:	2001      	movne	r0, #1
 800d4b6:	e42b      	b.n	800cd10 <__ieee754_pow+0x228>
 800d4b8:	4642      	mov	r2, r8
 800d4ba:	464b      	mov	r3, r9
 800d4bc:	f7f2 fea4 	bl	8000208 <__aeabi_dsub>
 800d4c0:	4632      	mov	r2, r6
 800d4c2:	463b      	mov	r3, r7
 800d4c4:	f7f3 fade 	bl	8000a84 <__aeabi_dcmpge>
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	d1eb      	bne.n	800d4a4 <__ieee754_pow+0x9bc>
 800d4cc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800d56c <__ieee754_pow+0xa84>
 800d4d0:	e6f7      	b.n	800d2c2 <__ieee754_pow+0x7da>
 800d4d2:	469a      	mov	sl, r3
 800d4d4:	4b22      	ldr	r3, [pc, #136]	@ (800d560 <__ieee754_pow+0xa78>)
 800d4d6:	459a      	cmp	sl, r3
 800d4d8:	f63f aef3 	bhi.w	800d2c2 <__ieee754_pow+0x7da>
 800d4dc:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d4e0:	e715      	b.n	800d30e <__ieee754_pow+0x826>
 800d4e2:	ec51 0b10 	vmov	r0, r1, d0
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	e7cf      	b.n	800d48a <__ieee754_pow+0x9a2>
 800d4ea:	491a      	ldr	r1, [pc, #104]	@ (800d554 <__ieee754_pow+0xa6c>)
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	f7ff bb18 	b.w	800cb22 <__ieee754_pow+0x3a>
 800d4f2:	2000      	movs	r0, #0
 800d4f4:	2100      	movs	r1, #0
 800d4f6:	f7ff bb14 	b.w	800cb22 <__ieee754_pow+0x3a>
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	4639      	mov	r1, r7
 800d4fe:	f7ff bb10 	b.w	800cb22 <__ieee754_pow+0x3a>
 800d502:	460c      	mov	r4, r1
 800d504:	f7ff bb5e 	b.w	800cbc4 <__ieee754_pow+0xdc>
 800d508:	2400      	movs	r4, #0
 800d50a:	f7ff bb49 	b.w	800cba0 <__ieee754_pow+0xb8>
 800d50e:	bf00      	nop
 800d510:	00000000 	.word	0x00000000
 800d514:	3fe62e43 	.word	0x3fe62e43
 800d518:	fefa39ef 	.word	0xfefa39ef
 800d51c:	3fe62e42 	.word	0x3fe62e42
 800d520:	0ca86c39 	.word	0x0ca86c39
 800d524:	be205c61 	.word	0xbe205c61
 800d528:	72bea4d0 	.word	0x72bea4d0
 800d52c:	3e663769 	.word	0x3e663769
 800d530:	c5d26bf1 	.word	0xc5d26bf1
 800d534:	3ebbbd41 	.word	0x3ebbbd41
 800d538:	af25de2c 	.word	0xaf25de2c
 800d53c:	3f11566a 	.word	0x3f11566a
 800d540:	16bebd93 	.word	0x16bebd93
 800d544:	3f66c16c 	.word	0x3f66c16c
 800d548:	5555553e 	.word	0x5555553e
 800d54c:	3fc55555 	.word	0x3fc55555
 800d550:	fff00000 	.word	0xfff00000
 800d554:	3ff00000 	.word	0x3ff00000
 800d558:	4090cbff 	.word	0x4090cbff
 800d55c:	3f6f3400 	.word	0x3f6f3400
 800d560:	3fe00000 	.word	0x3fe00000
 800d564:	652b82fe 	.word	0x652b82fe
 800d568:	3c971547 	.word	0x3c971547
 800d56c:	4090cc00 	.word	0x4090cc00

0800d570 <fabs>:
 800d570:	ec51 0b10 	vmov	r0, r1, d0
 800d574:	4602      	mov	r2, r0
 800d576:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d57a:	ec43 2b10 	vmov	d0, r2, r3
 800d57e:	4770      	bx	lr

0800d580 <__kernel_cosf>:
 800d580:	ee10 3a10 	vmov	r3, s0
 800d584:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d588:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d58c:	eef0 6a40 	vmov.f32	s13, s0
 800d590:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d594:	d204      	bcs.n	800d5a0 <__kernel_cosf+0x20>
 800d596:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800d59a:	ee17 2a90 	vmov	r2, s15
 800d59e:	b342      	cbz	r2, 800d5f2 <__kernel_cosf+0x72>
 800d5a0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d5a4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800d610 <__kernel_cosf+0x90>
 800d5a8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800d614 <__kernel_cosf+0x94>
 800d5ac:	4a1a      	ldr	r2, [pc, #104]	@ (800d618 <__kernel_cosf+0x98>)
 800d5ae:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d61c <__kernel_cosf+0x9c>
 800d5b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d5bc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800d620 <__kernel_cosf+0xa0>
 800d5c0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d5c4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800d624 <__kernel_cosf+0xa4>
 800d5c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d5cc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800d628 <__kernel_cosf+0xa8>
 800d5d0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d5d4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800d5d8:	ee26 6a07 	vmul.f32	s12, s12, s14
 800d5dc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d5e0:	eee7 0a06 	vfma.f32	s1, s14, s12
 800d5e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5e8:	d804      	bhi.n	800d5f4 <__kernel_cosf+0x74>
 800d5ea:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d5ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d5f2:	4770      	bx	lr
 800d5f4:	4a0d      	ldr	r2, [pc, #52]	@ (800d62c <__kernel_cosf+0xac>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	bf9a      	itte	ls
 800d5fa:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800d5fe:	ee07 3a10 	vmovls	s14, r3
 800d602:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800d606:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d60a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d60e:	e7ec      	b.n	800d5ea <__kernel_cosf+0x6a>
 800d610:	ad47d74e 	.word	0xad47d74e
 800d614:	310f74f6 	.word	0x310f74f6
 800d618:	3e999999 	.word	0x3e999999
 800d61c:	b493f27c 	.word	0xb493f27c
 800d620:	37d00d01 	.word	0x37d00d01
 800d624:	bab60b61 	.word	0xbab60b61
 800d628:	3d2aaaab 	.word	0x3d2aaaab
 800d62c:	3f480000 	.word	0x3f480000

0800d630 <__kernel_sinf>:
 800d630:	ee10 3a10 	vmov	r3, s0
 800d634:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d638:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d63c:	d204      	bcs.n	800d648 <__kernel_sinf+0x18>
 800d63e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d642:	ee17 3a90 	vmov	r3, s15
 800d646:	b35b      	cbz	r3, 800d6a0 <__kernel_sinf+0x70>
 800d648:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d64c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d6a4 <__kernel_sinf+0x74>
 800d650:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800d6a8 <__kernel_sinf+0x78>
 800d654:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d658:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800d6ac <__kernel_sinf+0x7c>
 800d65c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d660:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800d6b0 <__kernel_sinf+0x80>
 800d664:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d668:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800d6b4 <__kernel_sinf+0x84>
 800d66c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d670:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d674:	b930      	cbnz	r0, 800d684 <__kernel_sinf+0x54>
 800d676:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800d6b8 <__kernel_sinf+0x88>
 800d67a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d67e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d682:	4770      	bx	lr
 800d684:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d688:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d68c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d690:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d694:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800d6bc <__kernel_sinf+0x8c>
 800d698:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d69c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d6a0:	4770      	bx	lr
 800d6a2:	bf00      	nop
 800d6a4:	2f2ec9d3 	.word	0x2f2ec9d3
 800d6a8:	b2d72f34 	.word	0xb2d72f34
 800d6ac:	3638ef1b 	.word	0x3638ef1b
 800d6b0:	b9500d01 	.word	0xb9500d01
 800d6b4:	3c088889 	.word	0x3c088889
 800d6b8:	be2aaaab 	.word	0xbe2aaaab
 800d6bc:	3e2aaaab 	.word	0x3e2aaaab

0800d6c0 <__ieee754_rem_pio2f>:
 800d6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6c2:	ee10 6a10 	vmov	r6, s0
 800d6c6:	4b88      	ldr	r3, [pc, #544]	@ (800d8e8 <__ieee754_rem_pio2f+0x228>)
 800d6c8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800d6cc:	429d      	cmp	r5, r3
 800d6ce:	b087      	sub	sp, #28
 800d6d0:	4604      	mov	r4, r0
 800d6d2:	d805      	bhi.n	800d6e0 <__ieee754_rem_pio2f+0x20>
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	ed80 0a00 	vstr	s0, [r0]
 800d6da:	6043      	str	r3, [r0, #4]
 800d6dc:	2000      	movs	r0, #0
 800d6de:	e022      	b.n	800d726 <__ieee754_rem_pio2f+0x66>
 800d6e0:	4b82      	ldr	r3, [pc, #520]	@ (800d8ec <__ieee754_rem_pio2f+0x22c>)
 800d6e2:	429d      	cmp	r5, r3
 800d6e4:	d83a      	bhi.n	800d75c <__ieee754_rem_pio2f+0x9c>
 800d6e6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d6ea:	2e00      	cmp	r6, #0
 800d6ec:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800d8f0 <__ieee754_rem_pio2f+0x230>
 800d6f0:	4a80      	ldr	r2, [pc, #512]	@ (800d8f4 <__ieee754_rem_pio2f+0x234>)
 800d6f2:	f023 030f 	bic.w	r3, r3, #15
 800d6f6:	dd18      	ble.n	800d72a <__ieee754_rem_pio2f+0x6a>
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d6fe:	bf09      	itett	eq
 800d700:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800d8f8 <__ieee754_rem_pio2f+0x238>
 800d704:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800d8fc <__ieee754_rem_pio2f+0x23c>
 800d708:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800d900 <__ieee754_rem_pio2f+0x240>
 800d70c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d710:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800d714:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d718:	ed80 7a00 	vstr	s14, [r0]
 800d71c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d720:	edc0 7a01 	vstr	s15, [r0, #4]
 800d724:	2001      	movs	r0, #1
 800d726:	b007      	add	sp, #28
 800d728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d72a:	4293      	cmp	r3, r2
 800d72c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d730:	bf09      	itett	eq
 800d732:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800d8f8 <__ieee754_rem_pio2f+0x238>
 800d736:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800d8fc <__ieee754_rem_pio2f+0x23c>
 800d73a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800d900 <__ieee754_rem_pio2f+0x240>
 800d73e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d742:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d746:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d74a:	ed80 7a00 	vstr	s14, [r0]
 800d74e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d752:	edc0 7a01 	vstr	s15, [r0, #4]
 800d756:	f04f 30ff 	mov.w	r0, #4294967295
 800d75a:	e7e4      	b.n	800d726 <__ieee754_rem_pio2f+0x66>
 800d75c:	4b69      	ldr	r3, [pc, #420]	@ (800d904 <__ieee754_rem_pio2f+0x244>)
 800d75e:	429d      	cmp	r5, r3
 800d760:	d873      	bhi.n	800d84a <__ieee754_rem_pio2f+0x18a>
 800d762:	f000 f8dd 	bl	800d920 <fabsf>
 800d766:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800d908 <__ieee754_rem_pio2f+0x248>
 800d76a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d76e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d772:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d77a:	ee17 0a90 	vmov	r0, s15
 800d77e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d8f0 <__ieee754_rem_pio2f+0x230>
 800d782:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d786:	281f      	cmp	r0, #31
 800d788:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d8fc <__ieee754_rem_pio2f+0x23c>
 800d78c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d790:	eeb1 6a47 	vneg.f32	s12, s14
 800d794:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d798:	ee16 1a90 	vmov	r1, s13
 800d79c:	dc09      	bgt.n	800d7b2 <__ieee754_rem_pio2f+0xf2>
 800d79e:	4a5b      	ldr	r2, [pc, #364]	@ (800d90c <__ieee754_rem_pio2f+0x24c>)
 800d7a0:	1e47      	subs	r7, r0, #1
 800d7a2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d7a6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800d7aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d107      	bne.n	800d7c2 <__ieee754_rem_pio2f+0x102>
 800d7b2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800d7b6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800d7ba:	2a08      	cmp	r2, #8
 800d7bc:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d7c0:	dc14      	bgt.n	800d7ec <__ieee754_rem_pio2f+0x12c>
 800d7c2:	6021      	str	r1, [r4, #0]
 800d7c4:	ed94 7a00 	vldr	s14, [r4]
 800d7c8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d7cc:	2e00      	cmp	r6, #0
 800d7ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d7d2:	ed84 0a01 	vstr	s0, [r4, #4]
 800d7d6:	daa6      	bge.n	800d726 <__ieee754_rem_pio2f+0x66>
 800d7d8:	eeb1 7a47 	vneg.f32	s14, s14
 800d7dc:	eeb1 0a40 	vneg.f32	s0, s0
 800d7e0:	ed84 7a00 	vstr	s14, [r4]
 800d7e4:	ed84 0a01 	vstr	s0, [r4, #4]
 800d7e8:	4240      	negs	r0, r0
 800d7ea:	e79c      	b.n	800d726 <__ieee754_rem_pio2f+0x66>
 800d7ec:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800d8f8 <__ieee754_rem_pio2f+0x238>
 800d7f0:	eef0 6a40 	vmov.f32	s13, s0
 800d7f4:	eee6 6a25 	vfma.f32	s13, s12, s11
 800d7f8:	ee70 7a66 	vsub.f32	s15, s0, s13
 800d7fc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d800:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d900 <__ieee754_rem_pio2f+0x240>
 800d804:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d808:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d80c:	ee15 2a90 	vmov	r2, s11
 800d810:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d814:	1a5b      	subs	r3, r3, r1
 800d816:	2b19      	cmp	r3, #25
 800d818:	dc04      	bgt.n	800d824 <__ieee754_rem_pio2f+0x164>
 800d81a:	edc4 5a00 	vstr	s11, [r4]
 800d81e:	eeb0 0a66 	vmov.f32	s0, s13
 800d822:	e7cf      	b.n	800d7c4 <__ieee754_rem_pio2f+0x104>
 800d824:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800d910 <__ieee754_rem_pio2f+0x250>
 800d828:	eeb0 0a66 	vmov.f32	s0, s13
 800d82c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d830:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d834:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800d914 <__ieee754_rem_pio2f+0x254>
 800d838:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d83c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d840:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d844:	ed84 7a00 	vstr	s14, [r4]
 800d848:	e7bc      	b.n	800d7c4 <__ieee754_rem_pio2f+0x104>
 800d84a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800d84e:	d306      	bcc.n	800d85e <__ieee754_rem_pio2f+0x19e>
 800d850:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d854:	edc0 7a01 	vstr	s15, [r0, #4]
 800d858:	edc0 7a00 	vstr	s15, [r0]
 800d85c:	e73e      	b.n	800d6dc <__ieee754_rem_pio2f+0x1c>
 800d85e:	15ea      	asrs	r2, r5, #23
 800d860:	3a86      	subs	r2, #134	@ 0x86
 800d862:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d866:	ee07 3a90 	vmov	s15, r3
 800d86a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d86e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800d918 <__ieee754_rem_pio2f+0x258>
 800d872:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d876:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d87a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d87e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d882:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d886:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d88a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d88e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d892:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d896:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d89e:	edcd 7a05 	vstr	s15, [sp, #20]
 800d8a2:	d11e      	bne.n	800d8e2 <__ieee754_rem_pio2f+0x222>
 800d8a4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ac:	bf0c      	ite	eq
 800d8ae:	2301      	moveq	r3, #1
 800d8b0:	2302      	movne	r3, #2
 800d8b2:	491a      	ldr	r1, [pc, #104]	@ (800d91c <__ieee754_rem_pio2f+0x25c>)
 800d8b4:	9101      	str	r1, [sp, #4]
 800d8b6:	2102      	movs	r1, #2
 800d8b8:	9100      	str	r1, [sp, #0]
 800d8ba:	a803      	add	r0, sp, #12
 800d8bc:	4621      	mov	r1, r4
 800d8be:	f000 f9cd 	bl	800dc5c <__kernel_rem_pio2f>
 800d8c2:	2e00      	cmp	r6, #0
 800d8c4:	f6bf af2f 	bge.w	800d726 <__ieee754_rem_pio2f+0x66>
 800d8c8:	edd4 7a00 	vldr	s15, [r4]
 800d8cc:	eef1 7a67 	vneg.f32	s15, s15
 800d8d0:	edc4 7a00 	vstr	s15, [r4]
 800d8d4:	edd4 7a01 	vldr	s15, [r4, #4]
 800d8d8:	eef1 7a67 	vneg.f32	s15, s15
 800d8dc:	edc4 7a01 	vstr	s15, [r4, #4]
 800d8e0:	e782      	b.n	800d7e8 <__ieee754_rem_pio2f+0x128>
 800d8e2:	2303      	movs	r3, #3
 800d8e4:	e7e5      	b.n	800d8b2 <__ieee754_rem_pio2f+0x1f2>
 800d8e6:	bf00      	nop
 800d8e8:	3f490fd8 	.word	0x3f490fd8
 800d8ec:	4016cbe3 	.word	0x4016cbe3
 800d8f0:	3fc90f80 	.word	0x3fc90f80
 800d8f4:	3fc90fd0 	.word	0x3fc90fd0
 800d8f8:	37354400 	.word	0x37354400
 800d8fc:	37354443 	.word	0x37354443
 800d900:	2e85a308 	.word	0x2e85a308
 800d904:	43490f80 	.word	0x43490f80
 800d908:	3f22f984 	.word	0x3f22f984
 800d90c:	08022748 	.word	0x08022748
 800d910:	2e85a300 	.word	0x2e85a300
 800d914:	248d3132 	.word	0x248d3132
 800d918:	43800000 	.word	0x43800000
 800d91c:	080227c8 	.word	0x080227c8

0800d920 <fabsf>:
 800d920:	ee10 3a10 	vmov	r3, s0
 800d924:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d928:	ee00 3a10 	vmov	s0, r3
 800d92c:	4770      	bx	lr
	...

0800d930 <scalbn>:
 800d930:	b570      	push	{r4, r5, r6, lr}
 800d932:	ec55 4b10 	vmov	r4, r5, d0
 800d936:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d93a:	4606      	mov	r6, r0
 800d93c:	462b      	mov	r3, r5
 800d93e:	b991      	cbnz	r1, 800d966 <scalbn+0x36>
 800d940:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d944:	4323      	orrs	r3, r4
 800d946:	d03d      	beq.n	800d9c4 <scalbn+0x94>
 800d948:	4b35      	ldr	r3, [pc, #212]	@ (800da20 <scalbn+0xf0>)
 800d94a:	4620      	mov	r0, r4
 800d94c:	4629      	mov	r1, r5
 800d94e:	2200      	movs	r2, #0
 800d950:	f7f2 fe12 	bl	8000578 <__aeabi_dmul>
 800d954:	4b33      	ldr	r3, [pc, #204]	@ (800da24 <scalbn+0xf4>)
 800d956:	429e      	cmp	r6, r3
 800d958:	4604      	mov	r4, r0
 800d95a:	460d      	mov	r5, r1
 800d95c:	da0f      	bge.n	800d97e <scalbn+0x4e>
 800d95e:	a328      	add	r3, pc, #160	@ (adr r3, 800da00 <scalbn+0xd0>)
 800d960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d964:	e01e      	b.n	800d9a4 <scalbn+0x74>
 800d966:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d96a:	4291      	cmp	r1, r2
 800d96c:	d10b      	bne.n	800d986 <scalbn+0x56>
 800d96e:	4622      	mov	r2, r4
 800d970:	4620      	mov	r0, r4
 800d972:	4629      	mov	r1, r5
 800d974:	f7f2 fc4a 	bl	800020c <__adddf3>
 800d978:	4604      	mov	r4, r0
 800d97a:	460d      	mov	r5, r1
 800d97c:	e022      	b.n	800d9c4 <scalbn+0x94>
 800d97e:	460b      	mov	r3, r1
 800d980:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d984:	3936      	subs	r1, #54	@ 0x36
 800d986:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d98a:	4296      	cmp	r6, r2
 800d98c:	dd0d      	ble.n	800d9aa <scalbn+0x7a>
 800d98e:	2d00      	cmp	r5, #0
 800d990:	a11d      	add	r1, pc, #116	@ (adr r1, 800da08 <scalbn+0xd8>)
 800d992:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d996:	da02      	bge.n	800d99e <scalbn+0x6e>
 800d998:	a11d      	add	r1, pc, #116	@ (adr r1, 800da10 <scalbn+0xe0>)
 800d99a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d99e:	a31a      	add	r3, pc, #104	@ (adr r3, 800da08 <scalbn+0xd8>)
 800d9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a4:	f7f2 fde8 	bl	8000578 <__aeabi_dmul>
 800d9a8:	e7e6      	b.n	800d978 <scalbn+0x48>
 800d9aa:	1872      	adds	r2, r6, r1
 800d9ac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d9b0:	428a      	cmp	r2, r1
 800d9b2:	dcec      	bgt.n	800d98e <scalbn+0x5e>
 800d9b4:	2a00      	cmp	r2, #0
 800d9b6:	dd08      	ble.n	800d9ca <scalbn+0x9a>
 800d9b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d9bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d9c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d9c4:	ec45 4b10 	vmov	d0, r4, r5
 800d9c8:	bd70      	pop	{r4, r5, r6, pc}
 800d9ca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d9ce:	da08      	bge.n	800d9e2 <scalbn+0xb2>
 800d9d0:	2d00      	cmp	r5, #0
 800d9d2:	a10b      	add	r1, pc, #44	@ (adr r1, 800da00 <scalbn+0xd0>)
 800d9d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9d8:	dac1      	bge.n	800d95e <scalbn+0x2e>
 800d9da:	a10f      	add	r1, pc, #60	@ (adr r1, 800da18 <scalbn+0xe8>)
 800d9dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9e0:	e7bd      	b.n	800d95e <scalbn+0x2e>
 800d9e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d9e6:	3236      	adds	r2, #54	@ 0x36
 800d9e8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d9ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	4b0d      	ldr	r3, [pc, #52]	@ (800da28 <scalbn+0xf8>)
 800d9f4:	4629      	mov	r1, r5
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	e7d4      	b.n	800d9a4 <scalbn+0x74>
 800d9fa:	bf00      	nop
 800d9fc:	f3af 8000 	nop.w
 800da00:	c2f8f359 	.word	0xc2f8f359
 800da04:	01a56e1f 	.word	0x01a56e1f
 800da08:	8800759c 	.word	0x8800759c
 800da0c:	7e37e43c 	.word	0x7e37e43c
 800da10:	8800759c 	.word	0x8800759c
 800da14:	fe37e43c 	.word	0xfe37e43c
 800da18:	c2f8f359 	.word	0xc2f8f359
 800da1c:	81a56e1f 	.word	0x81a56e1f
 800da20:	43500000 	.word	0x43500000
 800da24:	ffff3cb0 	.word	0xffff3cb0
 800da28:	3c900000 	.word	0x3c900000

0800da2c <with_errno>:
 800da2c:	b510      	push	{r4, lr}
 800da2e:	ed2d 8b02 	vpush	{d8}
 800da32:	eeb0 8a40 	vmov.f32	s16, s0
 800da36:	eef0 8a60 	vmov.f32	s17, s1
 800da3a:	4604      	mov	r4, r0
 800da3c:	f7fe fecc 	bl	800c7d8 <__errno>
 800da40:	eeb0 0a48 	vmov.f32	s0, s16
 800da44:	eef0 0a68 	vmov.f32	s1, s17
 800da48:	ecbd 8b02 	vpop	{d8}
 800da4c:	6004      	str	r4, [r0, #0]
 800da4e:	bd10      	pop	{r4, pc}

0800da50 <xflow>:
 800da50:	4603      	mov	r3, r0
 800da52:	b507      	push	{r0, r1, r2, lr}
 800da54:	ec51 0b10 	vmov	r0, r1, d0
 800da58:	b183      	cbz	r3, 800da7c <xflow+0x2c>
 800da5a:	4602      	mov	r2, r0
 800da5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da60:	e9cd 2300 	strd	r2, r3, [sp]
 800da64:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da68:	f7f2 fd86 	bl	8000578 <__aeabi_dmul>
 800da6c:	ec41 0b10 	vmov	d0, r0, r1
 800da70:	2022      	movs	r0, #34	@ 0x22
 800da72:	b003      	add	sp, #12
 800da74:	f85d eb04 	ldr.w	lr, [sp], #4
 800da78:	f7ff bfd8 	b.w	800da2c <with_errno>
 800da7c:	4602      	mov	r2, r0
 800da7e:	460b      	mov	r3, r1
 800da80:	e7ee      	b.n	800da60 <xflow+0x10>
 800da82:	0000      	movs	r0, r0
 800da84:	0000      	movs	r0, r0
	...

0800da88 <__math_uflow>:
 800da88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800da90 <__math_uflow+0x8>
 800da8c:	f7ff bfe0 	b.w	800da50 <xflow>
 800da90:	00000000 	.word	0x00000000
 800da94:	10000000 	.word	0x10000000

0800da98 <__math_oflow>:
 800da98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800daa0 <__math_oflow+0x8>
 800da9c:	f7ff bfd8 	b.w	800da50 <xflow>
 800daa0:	00000000 	.word	0x00000000
 800daa4:	70000000 	.word	0x70000000

0800daa8 <__ieee754_sqrt>:
 800daa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daac:	4a68      	ldr	r2, [pc, #416]	@ (800dc50 <__ieee754_sqrt+0x1a8>)
 800daae:	ec55 4b10 	vmov	r4, r5, d0
 800dab2:	43aa      	bics	r2, r5
 800dab4:	462b      	mov	r3, r5
 800dab6:	4621      	mov	r1, r4
 800dab8:	d110      	bne.n	800dadc <__ieee754_sqrt+0x34>
 800daba:	4622      	mov	r2, r4
 800dabc:	4620      	mov	r0, r4
 800dabe:	4629      	mov	r1, r5
 800dac0:	f7f2 fd5a 	bl	8000578 <__aeabi_dmul>
 800dac4:	4602      	mov	r2, r0
 800dac6:	460b      	mov	r3, r1
 800dac8:	4620      	mov	r0, r4
 800daca:	4629      	mov	r1, r5
 800dacc:	f7f2 fb9e 	bl	800020c <__adddf3>
 800dad0:	4604      	mov	r4, r0
 800dad2:	460d      	mov	r5, r1
 800dad4:	ec45 4b10 	vmov	d0, r4, r5
 800dad8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dadc:	2d00      	cmp	r5, #0
 800dade:	dc0e      	bgt.n	800dafe <__ieee754_sqrt+0x56>
 800dae0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800dae4:	4322      	orrs	r2, r4
 800dae6:	d0f5      	beq.n	800dad4 <__ieee754_sqrt+0x2c>
 800dae8:	b19d      	cbz	r5, 800db12 <__ieee754_sqrt+0x6a>
 800daea:	4622      	mov	r2, r4
 800daec:	4620      	mov	r0, r4
 800daee:	4629      	mov	r1, r5
 800daf0:	f7f2 fb8a 	bl	8000208 <__aeabi_dsub>
 800daf4:	4602      	mov	r2, r0
 800daf6:	460b      	mov	r3, r1
 800daf8:	f7f2 fe68 	bl	80007cc <__aeabi_ddiv>
 800dafc:	e7e8      	b.n	800dad0 <__ieee754_sqrt+0x28>
 800dafe:	152a      	asrs	r2, r5, #20
 800db00:	d115      	bne.n	800db2e <__ieee754_sqrt+0x86>
 800db02:	2000      	movs	r0, #0
 800db04:	e009      	b.n	800db1a <__ieee754_sqrt+0x72>
 800db06:	0acb      	lsrs	r3, r1, #11
 800db08:	3a15      	subs	r2, #21
 800db0a:	0549      	lsls	r1, r1, #21
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d0fa      	beq.n	800db06 <__ieee754_sqrt+0x5e>
 800db10:	e7f7      	b.n	800db02 <__ieee754_sqrt+0x5a>
 800db12:	462a      	mov	r2, r5
 800db14:	e7fa      	b.n	800db0c <__ieee754_sqrt+0x64>
 800db16:	005b      	lsls	r3, r3, #1
 800db18:	3001      	adds	r0, #1
 800db1a:	02dc      	lsls	r4, r3, #11
 800db1c:	d5fb      	bpl.n	800db16 <__ieee754_sqrt+0x6e>
 800db1e:	1e44      	subs	r4, r0, #1
 800db20:	1b12      	subs	r2, r2, r4
 800db22:	f1c0 0420 	rsb	r4, r0, #32
 800db26:	fa21 f404 	lsr.w	r4, r1, r4
 800db2a:	4323      	orrs	r3, r4
 800db2c:	4081      	lsls	r1, r0
 800db2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db32:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800db36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800db3a:	07d2      	lsls	r2, r2, #31
 800db3c:	bf5c      	itt	pl
 800db3e:	005b      	lslpl	r3, r3, #1
 800db40:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800db44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800db48:	bf58      	it	pl
 800db4a:	0049      	lslpl	r1, r1, #1
 800db4c:	2600      	movs	r6, #0
 800db4e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800db52:	106d      	asrs	r5, r5, #1
 800db54:	0049      	lsls	r1, r1, #1
 800db56:	2016      	movs	r0, #22
 800db58:	4632      	mov	r2, r6
 800db5a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800db5e:	1917      	adds	r7, r2, r4
 800db60:	429f      	cmp	r7, r3
 800db62:	bfde      	ittt	le
 800db64:	193a      	addle	r2, r7, r4
 800db66:	1bdb      	suble	r3, r3, r7
 800db68:	1936      	addle	r6, r6, r4
 800db6a:	0fcf      	lsrs	r7, r1, #31
 800db6c:	3801      	subs	r0, #1
 800db6e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800db72:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800db76:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800db7a:	d1f0      	bne.n	800db5e <__ieee754_sqrt+0xb6>
 800db7c:	4604      	mov	r4, r0
 800db7e:	2720      	movs	r7, #32
 800db80:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800db84:	429a      	cmp	r2, r3
 800db86:	eb00 0e0c 	add.w	lr, r0, ip
 800db8a:	db02      	blt.n	800db92 <__ieee754_sqrt+0xea>
 800db8c:	d113      	bne.n	800dbb6 <__ieee754_sqrt+0x10e>
 800db8e:	458e      	cmp	lr, r1
 800db90:	d811      	bhi.n	800dbb6 <__ieee754_sqrt+0x10e>
 800db92:	f1be 0f00 	cmp.w	lr, #0
 800db96:	eb0e 000c 	add.w	r0, lr, ip
 800db9a:	da42      	bge.n	800dc22 <__ieee754_sqrt+0x17a>
 800db9c:	2800      	cmp	r0, #0
 800db9e:	db40      	blt.n	800dc22 <__ieee754_sqrt+0x17a>
 800dba0:	f102 0801 	add.w	r8, r2, #1
 800dba4:	1a9b      	subs	r3, r3, r2
 800dba6:	458e      	cmp	lr, r1
 800dba8:	bf88      	it	hi
 800dbaa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dbae:	eba1 010e 	sub.w	r1, r1, lr
 800dbb2:	4464      	add	r4, ip
 800dbb4:	4642      	mov	r2, r8
 800dbb6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800dbba:	3f01      	subs	r7, #1
 800dbbc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800dbc0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dbc4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800dbc8:	d1dc      	bne.n	800db84 <__ieee754_sqrt+0xdc>
 800dbca:	4319      	orrs	r1, r3
 800dbcc:	d01b      	beq.n	800dc06 <__ieee754_sqrt+0x15e>
 800dbce:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800dc54 <__ieee754_sqrt+0x1ac>
 800dbd2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800dc58 <__ieee754_sqrt+0x1b0>
 800dbd6:	e9da 0100 	ldrd	r0, r1, [sl]
 800dbda:	e9db 2300 	ldrd	r2, r3, [fp]
 800dbde:	f7f2 fb13 	bl	8000208 <__aeabi_dsub>
 800dbe2:	e9da 8900 	ldrd	r8, r9, [sl]
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	460b      	mov	r3, r1
 800dbea:	4640      	mov	r0, r8
 800dbec:	4649      	mov	r1, r9
 800dbee:	f7f2 ff3f 	bl	8000a70 <__aeabi_dcmple>
 800dbf2:	b140      	cbz	r0, 800dc06 <__ieee754_sqrt+0x15e>
 800dbf4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dbf8:	e9da 0100 	ldrd	r0, r1, [sl]
 800dbfc:	e9db 2300 	ldrd	r2, r3, [fp]
 800dc00:	d111      	bne.n	800dc26 <__ieee754_sqrt+0x17e>
 800dc02:	3601      	adds	r6, #1
 800dc04:	463c      	mov	r4, r7
 800dc06:	1072      	asrs	r2, r6, #1
 800dc08:	0863      	lsrs	r3, r4, #1
 800dc0a:	07f1      	lsls	r1, r6, #31
 800dc0c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800dc10:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800dc14:	bf48      	it	mi
 800dc16:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800dc1a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800dc1e:	4618      	mov	r0, r3
 800dc20:	e756      	b.n	800dad0 <__ieee754_sqrt+0x28>
 800dc22:	4690      	mov	r8, r2
 800dc24:	e7be      	b.n	800dba4 <__ieee754_sqrt+0xfc>
 800dc26:	f7f2 faf1 	bl	800020c <__adddf3>
 800dc2a:	e9da 8900 	ldrd	r8, r9, [sl]
 800dc2e:	4602      	mov	r2, r0
 800dc30:	460b      	mov	r3, r1
 800dc32:	4640      	mov	r0, r8
 800dc34:	4649      	mov	r1, r9
 800dc36:	f7f2 ff11 	bl	8000a5c <__aeabi_dcmplt>
 800dc3a:	b120      	cbz	r0, 800dc46 <__ieee754_sqrt+0x19e>
 800dc3c:	1ca0      	adds	r0, r4, #2
 800dc3e:	bf08      	it	eq
 800dc40:	3601      	addeq	r6, #1
 800dc42:	3402      	adds	r4, #2
 800dc44:	e7df      	b.n	800dc06 <__ieee754_sqrt+0x15e>
 800dc46:	1c63      	adds	r3, r4, #1
 800dc48:	f023 0401 	bic.w	r4, r3, #1
 800dc4c:	e7db      	b.n	800dc06 <__ieee754_sqrt+0x15e>
 800dc4e:	bf00      	nop
 800dc50:	7ff00000 	.word	0x7ff00000
 800dc54:	20000070 	.word	0x20000070
 800dc58:	20000068 	.word	0x20000068

0800dc5c <__kernel_rem_pio2f>:
 800dc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc60:	ed2d 8b04 	vpush	{d8-d9}
 800dc64:	b0d9      	sub	sp, #356	@ 0x164
 800dc66:	4690      	mov	r8, r2
 800dc68:	9001      	str	r0, [sp, #4]
 800dc6a:	4ab9      	ldr	r2, [pc, #740]	@ (800df50 <__kernel_rem_pio2f+0x2f4>)
 800dc6c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800dc6e:	f118 0f04 	cmn.w	r8, #4
 800dc72:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800dc76:	460f      	mov	r7, r1
 800dc78:	f103 3bff 	add.w	fp, r3, #4294967295
 800dc7c:	db27      	blt.n	800dcce <__kernel_rem_pio2f+0x72>
 800dc7e:	f1b8 0203 	subs.w	r2, r8, #3
 800dc82:	bf48      	it	mi
 800dc84:	f108 0204 	addmi.w	r2, r8, #4
 800dc88:	10d2      	asrs	r2, r2, #3
 800dc8a:	1c55      	adds	r5, r2, #1
 800dc8c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800dc8e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800df60 <__kernel_rem_pio2f+0x304>
 800dc92:	00e8      	lsls	r0, r5, #3
 800dc94:	eba2 060b 	sub.w	r6, r2, fp
 800dc98:	9002      	str	r0, [sp, #8]
 800dc9a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800dc9e:	eb0a 0c0b 	add.w	ip, sl, fp
 800dca2:	ac1c      	add	r4, sp, #112	@ 0x70
 800dca4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800dca8:	2000      	movs	r0, #0
 800dcaa:	4560      	cmp	r0, ip
 800dcac:	dd11      	ble.n	800dcd2 <__kernel_rem_pio2f+0x76>
 800dcae:	a91c      	add	r1, sp, #112	@ 0x70
 800dcb0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800dcb4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800dcb8:	f04f 0c00 	mov.w	ip, #0
 800dcbc:	45d4      	cmp	ip, sl
 800dcbe:	dc27      	bgt.n	800dd10 <__kernel_rem_pio2f+0xb4>
 800dcc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800dcc4:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800df60 <__kernel_rem_pio2f+0x304>
 800dcc8:	4606      	mov	r6, r0
 800dcca:	2400      	movs	r4, #0
 800dccc:	e016      	b.n	800dcfc <__kernel_rem_pio2f+0xa0>
 800dcce:	2200      	movs	r2, #0
 800dcd0:	e7db      	b.n	800dc8a <__kernel_rem_pio2f+0x2e>
 800dcd2:	42c6      	cmn	r6, r0
 800dcd4:	bf5d      	ittte	pl
 800dcd6:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800dcda:	ee07 1a90 	vmovpl	s15, r1
 800dcde:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800dce2:	eef0 7a47 	vmovmi.f32	s15, s14
 800dce6:	ece4 7a01 	vstmia	r4!, {s15}
 800dcea:	3001      	adds	r0, #1
 800dcec:	e7dd      	b.n	800dcaa <__kernel_rem_pio2f+0x4e>
 800dcee:	ecfe 6a01 	vldmia	lr!, {s13}
 800dcf2:	ed96 7a00 	vldr	s14, [r6]
 800dcf6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dcfa:	3401      	adds	r4, #1
 800dcfc:	455c      	cmp	r4, fp
 800dcfe:	f1a6 0604 	sub.w	r6, r6, #4
 800dd02:	ddf4      	ble.n	800dcee <__kernel_rem_pio2f+0x92>
 800dd04:	ece9 7a01 	vstmia	r9!, {s15}
 800dd08:	f10c 0c01 	add.w	ip, ip, #1
 800dd0c:	3004      	adds	r0, #4
 800dd0e:	e7d5      	b.n	800dcbc <__kernel_rem_pio2f+0x60>
 800dd10:	a908      	add	r1, sp, #32
 800dd12:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd16:	9104      	str	r1, [sp, #16]
 800dd18:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800dd1a:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800df5c <__kernel_rem_pio2f+0x300>
 800dd1e:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800df58 <__kernel_rem_pio2f+0x2fc>
 800dd22:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800dd26:	9203      	str	r2, [sp, #12]
 800dd28:	4654      	mov	r4, sl
 800dd2a:	00a2      	lsls	r2, r4, #2
 800dd2c:	9205      	str	r2, [sp, #20]
 800dd2e:	aa58      	add	r2, sp, #352	@ 0x160
 800dd30:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800dd34:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800dd38:	a944      	add	r1, sp, #272	@ 0x110
 800dd3a:	aa08      	add	r2, sp, #32
 800dd3c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800dd40:	4694      	mov	ip, r2
 800dd42:	4626      	mov	r6, r4
 800dd44:	2e00      	cmp	r6, #0
 800dd46:	f1a0 0004 	sub.w	r0, r0, #4
 800dd4a:	dc4c      	bgt.n	800dde6 <__kernel_rem_pio2f+0x18a>
 800dd4c:	4628      	mov	r0, r5
 800dd4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dd52:	f000 f9f5 	bl	800e140 <scalbnf>
 800dd56:	eeb0 8a40 	vmov.f32	s16, s0
 800dd5a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800dd5e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800dd62:	f000 fa53 	bl	800e20c <floorf>
 800dd66:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800dd6a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800dd6e:	2d00      	cmp	r5, #0
 800dd70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd74:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800dd78:	ee17 9a90 	vmov	r9, s15
 800dd7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd80:	ee38 8a67 	vsub.f32	s16, s16, s15
 800dd84:	dd41      	ble.n	800de0a <__kernel_rem_pio2f+0x1ae>
 800dd86:	f104 3cff 	add.w	ip, r4, #4294967295
 800dd8a:	a908      	add	r1, sp, #32
 800dd8c:	f1c5 0e08 	rsb	lr, r5, #8
 800dd90:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800dd94:	fa46 f00e 	asr.w	r0, r6, lr
 800dd98:	4481      	add	r9, r0
 800dd9a:	fa00 f00e 	lsl.w	r0, r0, lr
 800dd9e:	1a36      	subs	r6, r6, r0
 800dda0:	f1c5 0007 	rsb	r0, r5, #7
 800dda4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800dda8:	4106      	asrs	r6, r0
 800ddaa:	2e00      	cmp	r6, #0
 800ddac:	dd3c      	ble.n	800de28 <__kernel_rem_pio2f+0x1cc>
 800ddae:	f04f 0e00 	mov.w	lr, #0
 800ddb2:	f109 0901 	add.w	r9, r9, #1
 800ddb6:	4670      	mov	r0, lr
 800ddb8:	4574      	cmp	r4, lr
 800ddba:	dc68      	bgt.n	800de8e <__kernel_rem_pio2f+0x232>
 800ddbc:	2d00      	cmp	r5, #0
 800ddbe:	dd03      	ble.n	800ddc8 <__kernel_rem_pio2f+0x16c>
 800ddc0:	2d01      	cmp	r5, #1
 800ddc2:	d074      	beq.n	800deae <__kernel_rem_pio2f+0x252>
 800ddc4:	2d02      	cmp	r5, #2
 800ddc6:	d07d      	beq.n	800dec4 <__kernel_rem_pio2f+0x268>
 800ddc8:	2e02      	cmp	r6, #2
 800ddca:	d12d      	bne.n	800de28 <__kernel_rem_pio2f+0x1cc>
 800ddcc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ddd0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ddd4:	b340      	cbz	r0, 800de28 <__kernel_rem_pio2f+0x1cc>
 800ddd6:	4628      	mov	r0, r5
 800ddd8:	9306      	str	r3, [sp, #24]
 800ddda:	f000 f9b1 	bl	800e140 <scalbnf>
 800ddde:	9b06      	ldr	r3, [sp, #24]
 800dde0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800dde4:	e020      	b.n	800de28 <__kernel_rem_pio2f+0x1cc>
 800dde6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ddea:	3e01      	subs	r6, #1
 800ddec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ddf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddf4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ddf8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ddfc:	ecac 0a01 	vstmia	ip!, {s0}
 800de00:	ed90 0a00 	vldr	s0, [r0]
 800de04:	ee37 0a80 	vadd.f32	s0, s15, s0
 800de08:	e79c      	b.n	800dd44 <__kernel_rem_pio2f+0xe8>
 800de0a:	d105      	bne.n	800de18 <__kernel_rem_pio2f+0x1bc>
 800de0c:	1e60      	subs	r0, r4, #1
 800de0e:	a908      	add	r1, sp, #32
 800de10:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800de14:	11f6      	asrs	r6, r6, #7
 800de16:	e7c8      	b.n	800ddaa <__kernel_rem_pio2f+0x14e>
 800de18:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800de1c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800de20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de24:	da31      	bge.n	800de8a <__kernel_rem_pio2f+0x22e>
 800de26:	2600      	movs	r6, #0
 800de28:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800de2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de30:	f040 8098 	bne.w	800df64 <__kernel_rem_pio2f+0x308>
 800de34:	1e60      	subs	r0, r4, #1
 800de36:	2200      	movs	r2, #0
 800de38:	4550      	cmp	r0, sl
 800de3a:	da4b      	bge.n	800ded4 <__kernel_rem_pio2f+0x278>
 800de3c:	2a00      	cmp	r2, #0
 800de3e:	d065      	beq.n	800df0c <__kernel_rem_pio2f+0x2b0>
 800de40:	3c01      	subs	r4, #1
 800de42:	ab08      	add	r3, sp, #32
 800de44:	3d08      	subs	r5, #8
 800de46:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d0f8      	beq.n	800de40 <__kernel_rem_pio2f+0x1e4>
 800de4e:	4628      	mov	r0, r5
 800de50:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800de54:	f000 f974 	bl	800e140 <scalbnf>
 800de58:	1c63      	adds	r3, r4, #1
 800de5a:	aa44      	add	r2, sp, #272	@ 0x110
 800de5c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800df5c <__kernel_rem_pio2f+0x300>
 800de60:	0099      	lsls	r1, r3, #2
 800de62:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800de66:	4623      	mov	r3, r4
 800de68:	2b00      	cmp	r3, #0
 800de6a:	f280 80a9 	bge.w	800dfc0 <__kernel_rem_pio2f+0x364>
 800de6e:	4623      	mov	r3, r4
 800de70:	2b00      	cmp	r3, #0
 800de72:	f2c0 80c7 	blt.w	800e004 <__kernel_rem_pio2f+0x3a8>
 800de76:	aa44      	add	r2, sp, #272	@ 0x110
 800de78:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800de7c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800df54 <__kernel_rem_pio2f+0x2f8>
 800de80:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800df60 <__kernel_rem_pio2f+0x304>
 800de84:	2000      	movs	r0, #0
 800de86:	1ae2      	subs	r2, r4, r3
 800de88:	e0b1      	b.n	800dfee <__kernel_rem_pio2f+0x392>
 800de8a:	2602      	movs	r6, #2
 800de8c:	e78f      	b.n	800ddae <__kernel_rem_pio2f+0x152>
 800de8e:	f852 1b04 	ldr.w	r1, [r2], #4
 800de92:	b948      	cbnz	r0, 800dea8 <__kernel_rem_pio2f+0x24c>
 800de94:	b121      	cbz	r1, 800dea0 <__kernel_rem_pio2f+0x244>
 800de96:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800de9a:	f842 1c04 	str.w	r1, [r2, #-4]
 800de9e:	2101      	movs	r1, #1
 800dea0:	f10e 0e01 	add.w	lr, lr, #1
 800dea4:	4608      	mov	r0, r1
 800dea6:	e787      	b.n	800ddb8 <__kernel_rem_pio2f+0x15c>
 800dea8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800deac:	e7f5      	b.n	800de9a <__kernel_rem_pio2f+0x23e>
 800deae:	f104 3cff 	add.w	ip, r4, #4294967295
 800deb2:	aa08      	add	r2, sp, #32
 800deb4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800deb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800debc:	a908      	add	r1, sp, #32
 800debe:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800dec2:	e781      	b.n	800ddc8 <__kernel_rem_pio2f+0x16c>
 800dec4:	f104 3cff 	add.w	ip, r4, #4294967295
 800dec8:	aa08      	add	r2, sp, #32
 800deca:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800dece:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800ded2:	e7f3      	b.n	800debc <__kernel_rem_pio2f+0x260>
 800ded4:	a908      	add	r1, sp, #32
 800ded6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800deda:	3801      	subs	r0, #1
 800dedc:	430a      	orrs	r2, r1
 800dede:	e7ab      	b.n	800de38 <__kernel_rem_pio2f+0x1dc>
 800dee0:	3201      	adds	r2, #1
 800dee2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800dee6:	2e00      	cmp	r6, #0
 800dee8:	d0fa      	beq.n	800dee0 <__kernel_rem_pio2f+0x284>
 800deea:	9905      	ldr	r1, [sp, #20]
 800deec:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800def0:	eb0d 0001 	add.w	r0, sp, r1
 800def4:	18e6      	adds	r6, r4, r3
 800def6:	a91c      	add	r1, sp, #112	@ 0x70
 800def8:	f104 0c01 	add.w	ip, r4, #1
 800defc:	384c      	subs	r0, #76	@ 0x4c
 800defe:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800df02:	4422      	add	r2, r4
 800df04:	4562      	cmp	r2, ip
 800df06:	da04      	bge.n	800df12 <__kernel_rem_pio2f+0x2b6>
 800df08:	4614      	mov	r4, r2
 800df0a:	e70e      	b.n	800dd2a <__kernel_rem_pio2f+0xce>
 800df0c:	9804      	ldr	r0, [sp, #16]
 800df0e:	2201      	movs	r2, #1
 800df10:	e7e7      	b.n	800dee2 <__kernel_rem_pio2f+0x286>
 800df12:	9903      	ldr	r1, [sp, #12]
 800df14:	f8dd e004 	ldr.w	lr, [sp, #4]
 800df18:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800df1c:	9105      	str	r1, [sp, #20]
 800df1e:	ee07 1a90 	vmov	s15, r1
 800df22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df26:	2400      	movs	r4, #0
 800df28:	ece6 7a01 	vstmia	r6!, {s15}
 800df2c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800df60 <__kernel_rem_pio2f+0x304>
 800df30:	46b1      	mov	r9, r6
 800df32:	455c      	cmp	r4, fp
 800df34:	dd04      	ble.n	800df40 <__kernel_rem_pio2f+0x2e4>
 800df36:	ece0 7a01 	vstmia	r0!, {s15}
 800df3a:	f10c 0c01 	add.w	ip, ip, #1
 800df3e:	e7e1      	b.n	800df04 <__kernel_rem_pio2f+0x2a8>
 800df40:	ecfe 6a01 	vldmia	lr!, {s13}
 800df44:	ed39 7a01 	vldmdb	r9!, {s14}
 800df48:	3401      	adds	r4, #1
 800df4a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800df4e:	e7f0      	b.n	800df32 <__kernel_rem_pio2f+0x2d6>
 800df50:	08022b0c 	.word	0x08022b0c
 800df54:	08022ae0 	.word	0x08022ae0
 800df58:	43800000 	.word	0x43800000
 800df5c:	3b800000 	.word	0x3b800000
 800df60:	00000000 	.word	0x00000000
 800df64:	9b02      	ldr	r3, [sp, #8]
 800df66:	eeb0 0a48 	vmov.f32	s0, s16
 800df6a:	eba3 0008 	sub.w	r0, r3, r8
 800df6e:	f000 f8e7 	bl	800e140 <scalbnf>
 800df72:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800df58 <__kernel_rem_pio2f+0x2fc>
 800df76:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800df7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df7e:	db19      	blt.n	800dfb4 <__kernel_rem_pio2f+0x358>
 800df80:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800df5c <__kernel_rem_pio2f+0x300>
 800df84:	ee60 7a27 	vmul.f32	s15, s0, s15
 800df88:	aa08      	add	r2, sp, #32
 800df8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df8e:	3508      	adds	r5, #8
 800df90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df94:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800df98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df9c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dfa0:	ee10 3a10 	vmov	r3, s0
 800dfa4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800dfa8:	ee17 3a90 	vmov	r3, s15
 800dfac:	3401      	adds	r4, #1
 800dfae:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800dfb2:	e74c      	b.n	800de4e <__kernel_rem_pio2f+0x1f2>
 800dfb4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dfb8:	aa08      	add	r2, sp, #32
 800dfba:	ee10 3a10 	vmov	r3, s0
 800dfbe:	e7f6      	b.n	800dfae <__kernel_rem_pio2f+0x352>
 800dfc0:	a808      	add	r0, sp, #32
 800dfc2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800dfc6:	9001      	str	r0, [sp, #4]
 800dfc8:	ee07 0a90 	vmov	s15, r0
 800dfcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dfd0:	3b01      	subs	r3, #1
 800dfd2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800dfd6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800dfda:	ed62 7a01 	vstmdb	r2!, {s15}
 800dfde:	e743      	b.n	800de68 <__kernel_rem_pio2f+0x20c>
 800dfe0:	ecfc 6a01 	vldmia	ip!, {s13}
 800dfe4:	ecb5 7a01 	vldmia	r5!, {s14}
 800dfe8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dfec:	3001      	adds	r0, #1
 800dfee:	4550      	cmp	r0, sl
 800dff0:	dc01      	bgt.n	800dff6 <__kernel_rem_pio2f+0x39a>
 800dff2:	4282      	cmp	r2, r0
 800dff4:	daf4      	bge.n	800dfe0 <__kernel_rem_pio2f+0x384>
 800dff6:	a858      	add	r0, sp, #352	@ 0x160
 800dff8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800dffc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800e000:	3b01      	subs	r3, #1
 800e002:	e735      	b.n	800de70 <__kernel_rem_pio2f+0x214>
 800e004:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e006:	2b02      	cmp	r3, #2
 800e008:	dc09      	bgt.n	800e01e <__kernel_rem_pio2f+0x3c2>
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	dc2b      	bgt.n	800e066 <__kernel_rem_pio2f+0x40a>
 800e00e:	d044      	beq.n	800e09a <__kernel_rem_pio2f+0x43e>
 800e010:	f009 0007 	and.w	r0, r9, #7
 800e014:	b059      	add	sp, #356	@ 0x164
 800e016:	ecbd 8b04 	vpop	{d8-d9}
 800e01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e01e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e020:	2b03      	cmp	r3, #3
 800e022:	d1f5      	bne.n	800e010 <__kernel_rem_pio2f+0x3b4>
 800e024:	aa30      	add	r2, sp, #192	@ 0xc0
 800e026:	1f0b      	subs	r3, r1, #4
 800e028:	4413      	add	r3, r2
 800e02a:	461a      	mov	r2, r3
 800e02c:	4620      	mov	r0, r4
 800e02e:	2800      	cmp	r0, #0
 800e030:	f1a2 0204 	sub.w	r2, r2, #4
 800e034:	dc52      	bgt.n	800e0dc <__kernel_rem_pio2f+0x480>
 800e036:	4622      	mov	r2, r4
 800e038:	2a01      	cmp	r2, #1
 800e03a:	f1a3 0304 	sub.w	r3, r3, #4
 800e03e:	dc5d      	bgt.n	800e0fc <__kernel_rem_pio2f+0x4a0>
 800e040:	ab30      	add	r3, sp, #192	@ 0xc0
 800e042:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800df60 <__kernel_rem_pio2f+0x304>
 800e046:	440b      	add	r3, r1
 800e048:	2c01      	cmp	r4, #1
 800e04a:	dc67      	bgt.n	800e11c <__kernel_rem_pio2f+0x4c0>
 800e04c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800e050:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800e054:	2e00      	cmp	r6, #0
 800e056:	d167      	bne.n	800e128 <__kernel_rem_pio2f+0x4cc>
 800e058:	edc7 6a00 	vstr	s13, [r7]
 800e05c:	ed87 7a01 	vstr	s14, [r7, #4]
 800e060:	edc7 7a02 	vstr	s15, [r7, #8]
 800e064:	e7d4      	b.n	800e010 <__kernel_rem_pio2f+0x3b4>
 800e066:	ab30      	add	r3, sp, #192	@ 0xc0
 800e068:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800df60 <__kernel_rem_pio2f+0x304>
 800e06c:	440b      	add	r3, r1
 800e06e:	4622      	mov	r2, r4
 800e070:	2a00      	cmp	r2, #0
 800e072:	da24      	bge.n	800e0be <__kernel_rem_pio2f+0x462>
 800e074:	b34e      	cbz	r6, 800e0ca <__kernel_rem_pio2f+0x46e>
 800e076:	eef1 7a47 	vneg.f32	s15, s14
 800e07a:	edc7 7a00 	vstr	s15, [r7]
 800e07e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800e082:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e086:	aa31      	add	r2, sp, #196	@ 0xc4
 800e088:	2301      	movs	r3, #1
 800e08a:	429c      	cmp	r4, r3
 800e08c:	da20      	bge.n	800e0d0 <__kernel_rem_pio2f+0x474>
 800e08e:	b10e      	cbz	r6, 800e094 <__kernel_rem_pio2f+0x438>
 800e090:	eef1 7a67 	vneg.f32	s15, s15
 800e094:	edc7 7a01 	vstr	s15, [r7, #4]
 800e098:	e7ba      	b.n	800e010 <__kernel_rem_pio2f+0x3b4>
 800e09a:	ab30      	add	r3, sp, #192	@ 0xc0
 800e09c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800df60 <__kernel_rem_pio2f+0x304>
 800e0a0:	440b      	add	r3, r1
 800e0a2:	2c00      	cmp	r4, #0
 800e0a4:	da05      	bge.n	800e0b2 <__kernel_rem_pio2f+0x456>
 800e0a6:	b10e      	cbz	r6, 800e0ac <__kernel_rem_pio2f+0x450>
 800e0a8:	eef1 7a67 	vneg.f32	s15, s15
 800e0ac:	edc7 7a00 	vstr	s15, [r7]
 800e0b0:	e7ae      	b.n	800e010 <__kernel_rem_pio2f+0x3b4>
 800e0b2:	ed33 7a01 	vldmdb	r3!, {s14}
 800e0b6:	3c01      	subs	r4, #1
 800e0b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0bc:	e7f1      	b.n	800e0a2 <__kernel_rem_pio2f+0x446>
 800e0be:	ed73 7a01 	vldmdb	r3!, {s15}
 800e0c2:	3a01      	subs	r2, #1
 800e0c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e0c8:	e7d2      	b.n	800e070 <__kernel_rem_pio2f+0x414>
 800e0ca:	eef0 7a47 	vmov.f32	s15, s14
 800e0ce:	e7d4      	b.n	800e07a <__kernel_rem_pio2f+0x41e>
 800e0d0:	ecb2 7a01 	vldmia	r2!, {s14}
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0da:	e7d6      	b.n	800e08a <__kernel_rem_pio2f+0x42e>
 800e0dc:	edd2 7a00 	vldr	s15, [r2]
 800e0e0:	edd2 6a01 	vldr	s13, [r2, #4]
 800e0e4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e0e8:	3801      	subs	r0, #1
 800e0ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0ee:	ed82 7a00 	vstr	s14, [r2]
 800e0f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0f6:	edc2 7a01 	vstr	s15, [r2, #4]
 800e0fa:	e798      	b.n	800e02e <__kernel_rem_pio2f+0x3d2>
 800e0fc:	edd3 7a00 	vldr	s15, [r3]
 800e100:	edd3 6a01 	vldr	s13, [r3, #4]
 800e104:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e108:	3a01      	subs	r2, #1
 800e10a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e10e:	ed83 7a00 	vstr	s14, [r3]
 800e112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e116:	edc3 7a01 	vstr	s15, [r3, #4]
 800e11a:	e78d      	b.n	800e038 <__kernel_rem_pio2f+0x3dc>
 800e11c:	ed33 7a01 	vldmdb	r3!, {s14}
 800e120:	3c01      	subs	r4, #1
 800e122:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e126:	e78f      	b.n	800e048 <__kernel_rem_pio2f+0x3ec>
 800e128:	eef1 6a66 	vneg.f32	s13, s13
 800e12c:	eeb1 7a47 	vneg.f32	s14, s14
 800e130:	edc7 6a00 	vstr	s13, [r7]
 800e134:	ed87 7a01 	vstr	s14, [r7, #4]
 800e138:	eef1 7a67 	vneg.f32	s15, s15
 800e13c:	e790      	b.n	800e060 <__kernel_rem_pio2f+0x404>
 800e13e:	bf00      	nop

0800e140 <scalbnf>:
 800e140:	ee10 3a10 	vmov	r3, s0
 800e144:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e148:	d02b      	beq.n	800e1a2 <scalbnf+0x62>
 800e14a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e14e:	d302      	bcc.n	800e156 <scalbnf+0x16>
 800e150:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e154:	4770      	bx	lr
 800e156:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e15a:	d123      	bne.n	800e1a4 <scalbnf+0x64>
 800e15c:	4b24      	ldr	r3, [pc, #144]	@ (800e1f0 <scalbnf+0xb0>)
 800e15e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800e1f4 <scalbnf+0xb4>
 800e162:	4298      	cmp	r0, r3
 800e164:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e168:	db17      	blt.n	800e19a <scalbnf+0x5a>
 800e16a:	ee10 3a10 	vmov	r3, s0
 800e16e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e172:	3a19      	subs	r2, #25
 800e174:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800e178:	4288      	cmp	r0, r1
 800e17a:	dd15      	ble.n	800e1a8 <scalbnf+0x68>
 800e17c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800e1f8 <scalbnf+0xb8>
 800e180:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800e1fc <scalbnf+0xbc>
 800e184:	ee10 3a10 	vmov	r3, s0
 800e188:	eeb0 7a67 	vmov.f32	s14, s15
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	bfb8      	it	lt
 800e190:	eef0 7a66 	vmovlt.f32	s15, s13
 800e194:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e198:	4770      	bx	lr
 800e19a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e200 <scalbnf+0xc0>
 800e19e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e1a2:	4770      	bx	lr
 800e1a4:	0dd2      	lsrs	r2, r2, #23
 800e1a6:	e7e5      	b.n	800e174 <scalbnf+0x34>
 800e1a8:	4410      	add	r0, r2
 800e1aa:	28fe      	cmp	r0, #254	@ 0xfe
 800e1ac:	dce6      	bgt.n	800e17c <scalbnf+0x3c>
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	dd06      	ble.n	800e1c0 <scalbnf+0x80>
 800e1b2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e1b6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e1ba:	ee00 3a10 	vmov	s0, r3
 800e1be:	4770      	bx	lr
 800e1c0:	f110 0f16 	cmn.w	r0, #22
 800e1c4:	da09      	bge.n	800e1da <scalbnf+0x9a>
 800e1c6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800e200 <scalbnf+0xc0>
 800e1ca:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800e204 <scalbnf+0xc4>
 800e1ce:	ee10 3a10 	vmov	r3, s0
 800e1d2:	eeb0 7a67 	vmov.f32	s14, s15
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	e7d9      	b.n	800e18e <scalbnf+0x4e>
 800e1da:	3019      	adds	r0, #25
 800e1dc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e1e0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e1e4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800e208 <scalbnf+0xc8>
 800e1e8:	ee07 3a90 	vmov	s15, r3
 800e1ec:	e7d7      	b.n	800e19e <scalbnf+0x5e>
 800e1ee:	bf00      	nop
 800e1f0:	ffff3cb0 	.word	0xffff3cb0
 800e1f4:	4c000000 	.word	0x4c000000
 800e1f8:	7149f2ca 	.word	0x7149f2ca
 800e1fc:	f149f2ca 	.word	0xf149f2ca
 800e200:	0da24260 	.word	0x0da24260
 800e204:	8da24260 	.word	0x8da24260
 800e208:	33000000 	.word	0x33000000

0800e20c <floorf>:
 800e20c:	ee10 3a10 	vmov	r3, s0
 800e210:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e214:	3a7f      	subs	r2, #127	@ 0x7f
 800e216:	2a16      	cmp	r2, #22
 800e218:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e21c:	dc2b      	bgt.n	800e276 <floorf+0x6a>
 800e21e:	2a00      	cmp	r2, #0
 800e220:	da12      	bge.n	800e248 <floorf+0x3c>
 800e222:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e288 <floorf+0x7c>
 800e226:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e22a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e232:	dd06      	ble.n	800e242 <floorf+0x36>
 800e234:	2b00      	cmp	r3, #0
 800e236:	da24      	bge.n	800e282 <floorf+0x76>
 800e238:	2900      	cmp	r1, #0
 800e23a:	4b14      	ldr	r3, [pc, #80]	@ (800e28c <floorf+0x80>)
 800e23c:	bf08      	it	eq
 800e23e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800e242:	ee00 3a10 	vmov	s0, r3
 800e246:	4770      	bx	lr
 800e248:	4911      	ldr	r1, [pc, #68]	@ (800e290 <floorf+0x84>)
 800e24a:	4111      	asrs	r1, r2
 800e24c:	420b      	tst	r3, r1
 800e24e:	d0fa      	beq.n	800e246 <floorf+0x3a>
 800e250:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800e288 <floorf+0x7c>
 800e254:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e258:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e260:	ddef      	ble.n	800e242 <floorf+0x36>
 800e262:	2b00      	cmp	r3, #0
 800e264:	bfbe      	ittt	lt
 800e266:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800e26a:	fa40 f202 	asrlt.w	r2, r0, r2
 800e26e:	189b      	addlt	r3, r3, r2
 800e270:	ea23 0301 	bic.w	r3, r3, r1
 800e274:	e7e5      	b.n	800e242 <floorf+0x36>
 800e276:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e27a:	d3e4      	bcc.n	800e246 <floorf+0x3a>
 800e27c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e280:	4770      	bx	lr
 800e282:	2300      	movs	r3, #0
 800e284:	e7dd      	b.n	800e242 <floorf+0x36>
 800e286:	bf00      	nop
 800e288:	7149f2ca 	.word	0x7149f2ca
 800e28c:	bf800000 	.word	0xbf800000
 800e290:	007fffff 	.word	0x007fffff

0800e294 <_init>:
 800e294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e296:	bf00      	nop
 800e298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e29a:	bc08      	pop	{r3}
 800e29c:	469e      	mov	lr, r3
 800e29e:	4770      	bx	lr

0800e2a0 <_fini>:
 800e2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2a2:	bf00      	nop
 800e2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2a6:	bc08      	pop	{r3}
 800e2a8:	469e      	mov	lr, r3
 800e2aa:	4770      	bx	lr
