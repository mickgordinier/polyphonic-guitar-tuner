
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf88  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001347c  0800c148  0800c148  0001c148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f5c4  0801f5c4  0003005c  2**0
                  CONTENTS
  4 .ARM          00000008  0801f5c4  0801f5c4  0002f5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f5cc  0801f5cc  0003005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f5cc  0801f5cc  0002f5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f5d0  0801f5d0  0002f5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0801f5d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  2000005c  0801f630  0003005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  0801f630  000304bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003005c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024974  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004261  00000000  00000000  00054ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001860  00000000  00000000  00058d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001202  00000000  00000000  0005a580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189a5  00000000  00000000  0005b782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008467  00000000  00000000  00074127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00006c9c  00000000  00000000  0007c590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000076  00000000  00000000  0008322c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000035ee  00000000  00000000  000832a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 000000e8  00000000  00000000  00086890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c130 	.word	0x0800c130

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	0800c130 	.word	0x0800c130

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_d2uiz>:
 8000afc:	004a      	lsls	r2, r1, #1
 8000afe:	d211      	bcs.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b04:	d211      	bcs.n	8000b2a <__aeabi_d2uiz+0x2e>
 8000b06:	d50d      	bpl.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b10:	d40e      	bmi.n	8000b30 <__aeabi_d2uiz+0x34>
 8000b12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_d2uiz+0x3a>
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2f>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b44:	bf24      	itt	cs
 8000b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4e:	d90d      	bls.n	8000b6c <__aeabi_d2f+0x30>
 8000b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b64:	bf08      	it	eq
 8000b66:	f020 0001 	biceq.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b70:	d121      	bne.n	8000bb6 <__aeabi_d2f+0x7a>
 8000b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b76:	bfbc      	itt	lt
 8000b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	4770      	bxlt	lr
 8000b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b86:	f1c2 0218 	rsb	r2, r2, #24
 8000b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b92:	fa20 f002 	lsr.w	r0, r0, r2
 8000b96:	bf18      	it	ne
 8000b98:	f040 0001 	orrne.w	r0, r0, #1
 8000b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba8:	ea40 000c 	orr.w	r0, r0, ip
 8000bac:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb4:	e7cc      	b.n	8000b50 <__aeabi_d2f+0x14>
 8000bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bba:	d107      	bne.n	8000bcc <__aeabi_d2f+0x90>
 8000bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bca:	4770      	bxne	lr
 8000bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b970 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9e08      	ldr	r6, [sp, #32]
 8000c12:	460d      	mov	r5, r1
 8000c14:	4604      	mov	r4, r0
 8000c16:	460f      	mov	r7, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d14a      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4694      	mov	ip, r2
 8000c20:	d965      	bls.n	8000cee <__udivmoddi4+0xe2>
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	b143      	cbz	r3, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c2c:	f1c3 0220 	rsb	r2, r3, #32
 8000c30:	409f      	lsls	r7, r3
 8000c32:	fa20 f202 	lsr.w	r2, r0, r2
 8000c36:	4317      	orrs	r7, r2
 8000c38:	409c      	lsls	r4, r3
 8000c3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3e:	fa1f f58c 	uxth.w	r5, ip
 8000c42:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c46:	0c22      	lsrs	r2, r4, #16
 8000c48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c4c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c50:	fb01 f005 	mul.w	r0, r1, r5
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x62>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c60:	f080 811c 	bcs.w	8000e9c <__udivmoddi4+0x290>
 8000c64:	4290      	cmp	r0, r2
 8000c66:	f240 8119 	bls.w	8000e9c <__udivmoddi4+0x290>
 8000c6a:	3902      	subs	r1, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a12      	subs	r2, r2, r0
 8000c70:	b2a4      	uxth	r4, r4
 8000c72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7e:	fb00 f505 	mul.w	r5, r0, r5
 8000c82:	42a5      	cmp	r5, r4
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x90>
 8000c86:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x294>
 8000c92:	42a5      	cmp	r5, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x294>
 8000c98:	4464      	add	r4, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca0:	1b64      	subs	r4, r4, r5
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11e      	cbz	r6, 8000cae <__udivmoddi4+0xa2>
 8000ca6:	40dc      	lsrs	r4, r3
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e9c6 4300 	strd	r4, r3, [r6]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0xbc>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80ed 	beq.w	8000e96 <__udivmoddi4+0x28a>
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e9c6 0500 	strd	r0, r5, [r6]
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc8:	fab3 f183 	clz	r1, r3
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d149      	bne.n	8000d64 <__udivmoddi4+0x158>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	d302      	bcc.n	8000cda <__udivmoddi4+0xce>
 8000cd4:	4282      	cmp	r2, r0
 8000cd6:	f200 80f8 	bhi.w	8000eca <__udivmoddi4+0x2be>
 8000cda:	1a84      	subs	r4, r0, r2
 8000cdc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	4617      	mov	r7, r2
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d0e2      	beq.n	8000cae <__udivmoddi4+0xa2>
 8000ce8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cec:	e7df      	b.n	8000cae <__udivmoddi4+0xa2>
 8000cee:	b902      	cbnz	r2, 8000cf2 <__udivmoddi4+0xe6>
 8000cf0:	deff      	udf	#255	; 0xff
 8000cf2:	fab2 f382 	clz	r3, r2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x210>
 8000cfc:	1a8a      	subs	r2, r1, r2
 8000cfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d02:	fa1f fe8c 	uxth.w	lr, ip
 8000d06:	2101      	movs	r1, #1
 8000d08:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d0c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d10:	0c22      	lsrs	r2, r4, #16
 8000d12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d16:	fb0e f005 	mul.w	r0, lr, r5
 8000d1a:	4290      	cmp	r0, r2
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d22:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x122>
 8000d28:	4290      	cmp	r0, r2
 8000d2a:	f200 80cb 	bhi.w	8000ec4 <__udivmoddi4+0x2b8>
 8000d2e:	4645      	mov	r5, r8
 8000d30:	1a12      	subs	r2, r2, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d38:	fb07 2210 	mls	r2, r7, r0, r2
 8000d3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d40:	fb0e fe00 	mul.w	lr, lr, r0
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x14e>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x14c>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f200 80bb 	bhi.w	8000ece <__udivmoddi4+0x2c2>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d62:	e79f      	b.n	8000ca4 <__udivmoddi4+0x98>
 8000d64:	f1c1 0720 	rsb	r7, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d72:	fa05 f401 	lsl.w	r4, r5, r1
 8000d76:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7a:	40fd      	lsrs	r5, r7
 8000d7c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d94:	fb08 f50e 	mul.w	r5, r8, lr
 8000d98:	42a5      	cmp	r5, r4
 8000d9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9e:	fa00 f001 	lsl.w	r0, r0, r1
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dac:	f080 8088 	bcs.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db0:	42a5      	cmp	r5, r4
 8000db2:	f240 8085 	bls.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dba:	4464      	add	r4, ip
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	b29d      	uxth	r5, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dcc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1da>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ddc:	d26c      	bcs.n	8000eb8 <__udivmoddi4+0x2ac>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	d96a      	bls.n	8000eb8 <__udivmoddi4+0x2ac>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dea:	fba3 9502 	umull	r9, r5, r3, r2
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	42ac      	cmp	r4, r5
 8000df4:	46c8      	mov	r8, r9
 8000df6:	46ae      	mov	lr, r5
 8000df8:	d356      	bcc.n	8000ea8 <__udivmoddi4+0x29c>
 8000dfa:	d053      	beq.n	8000ea4 <__udivmoddi4+0x298>
 8000dfc:	b156      	cbz	r6, 8000e14 <__udivmoddi4+0x208>
 8000dfe:	ebb0 0208 	subs.w	r2, r0, r8
 8000e02:	eb64 040e 	sbc.w	r4, r4, lr
 8000e06:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0a:	40ca      	lsrs	r2, r1
 8000e0c:	40cc      	lsrs	r4, r1
 8000e0e:	4317      	orrs	r7, r2
 8000e10:	e9c6 7400 	strd	r7, r4, [r6]
 8000e14:	4618      	mov	r0, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1c:	f1c3 0120 	rsb	r1, r3, #32
 8000e20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e24:	fa20 f201 	lsr.w	r2, r0, r1
 8000e28:	fa25 f101 	lsr.w	r1, r5, r1
 8000e2c:	409d      	lsls	r5, r3
 8000e2e:	432a      	orrs	r2, r5
 8000e30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e46:	fb00 f50e 	mul.w	r5, r0, lr
 8000e4a:	428d      	cmp	r5, r1
 8000e4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x258>
 8000e52:	eb1c 0101 	adds.w	r1, ip, r1
 8000e56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5a:	d22f      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e5c:	428d      	cmp	r5, r1
 8000e5e:	d92d      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1b49      	subs	r1, r1, r5
 8000e66:	b292      	uxth	r2, r2
 8000e68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	fb05 f10e 	mul.w	r1, r5, lr
 8000e78:	4291      	cmp	r1, r2
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x282>
 8000e7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e84:	d216      	bcs.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e86:	4291      	cmp	r1, r2
 8000e88:	d914      	bls.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e8a:	3d02      	subs	r5, #2
 8000e8c:	4462      	add	r2, ip
 8000e8e:	1a52      	subs	r2, r2, r1
 8000e90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e94:	e738      	b.n	8000d08 <__udivmoddi4+0xfc>
 8000e96:	4631      	mov	r1, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e708      	b.n	8000cae <__udivmoddi4+0xa2>
 8000e9c:	4639      	mov	r1, r7
 8000e9e:	e6e6      	b.n	8000c6e <__udivmoddi4+0x62>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x90>
 8000ea4:	4548      	cmp	r0, r9
 8000ea6:	d2a9      	bcs.n	8000dfc <__udivmoddi4+0x1f0>
 8000ea8:	ebb9 0802 	subs.w	r8, r9, r2
 8000eac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	e7a3      	b.n	8000dfc <__udivmoddi4+0x1f0>
 8000eb4:	4645      	mov	r5, r8
 8000eb6:	e7ea      	b.n	8000e8e <__udivmoddi4+0x282>
 8000eb8:	462b      	mov	r3, r5
 8000eba:	e794      	b.n	8000de6 <__udivmoddi4+0x1da>
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	e7d1      	b.n	8000e64 <__udivmoddi4+0x258>
 8000ec0:	46d0      	mov	r8, sl
 8000ec2:	e77b      	b.n	8000dbc <__udivmoddi4+0x1b0>
 8000ec4:	3d02      	subs	r5, #2
 8000ec6:	4462      	add	r2, ip
 8000ec8:	e732      	b.n	8000d30 <__udivmoddi4+0x124>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e70a      	b.n	8000ce4 <__udivmoddi4+0xd8>
 8000ece:	4464      	add	r4, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e742      	b.n	8000d5a <__udivmoddi4+0x14e>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

	convFlag = 1;
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]

}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000378 	.word	0x20000378

08000ef8 <apply_hanning_window>:


void apply_hanning_window(float32_t * signal, uint32_t length){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < length; ++i){
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	e033      	b.n	8000f70 <apply_hanning_window+0x78>
		float32_t han_value = 0.5f * (1.0f - cosf(2 * PI * i / (length - 1)));
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	ee07 3a90 	vmov	s15, r3
 8000f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f12:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000f84 <apply_hanning_window+0x8c>
 8000f16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	ee07 3a90 	vmov	s15, r3
 8000f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f26:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f2a:	eeb0 0a66 	vmov.f32	s0, s13
 8000f2e:	f00a fb43 	bl	800b5b8 <cosf>
 8000f32:	eef0 7a40 	vmov.f32	s15, s0
 8000f36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f46:	edc7 7a02 	vstr	s15, [r7, #8]
		signal[i] *= han_value;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	ed93 7a00 	vldr	s14, [r3]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f66:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < length; ++i){
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d8c7      	bhi.n	8000f08 <apply_hanning_window+0x10>
	}
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40c90fdb 	.word	0x40c90fdb

08000f88 <set_motor_speed>:

    arm_abs_f32(autocorrelation, autocorrelation, BUFFER_LENGTH);
}


void set_motor_speed(int motor_speed) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff fa87 	bl	80004a4 <__aeabi_i2d>
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	4b23      	ldr	r3, [pc, #140]	; (8001028 <set_motor_speed+0xa0>)
 8000f9c:	f7ff fc16 	bl	80007cc <__aeabi_ddiv>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	a319      	add	r3, pc, #100	; (adr r3, 8001010 <set_motor_speed+0x88>)
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fae:	f7ff fae3 	bl	8000578 <__aeabi_dmul>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	a317      	add	r3, pc, #92	; (adr r3, 8001018 <set_motor_speed+0x90>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff f924 	bl	800020c <__adddf3>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr2 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <set_motor_speed+0xa4>)
 8000fd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fd6:	f7ff fbf9 	bl	80007cc <__aeabi_ddiv>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	a30f      	add	r3, pc, #60	; (adr r3, 8001020 <set_motor_speed+0x98>)
 8000fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe8:	f7ff fac6 	bl	8000578 <__aeabi_dmul>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fd5a 	bl	8000aac <__aeabi_d2iz>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60fb      	str	r3, [r7, #12]

  TIM4->CCR2 = temp_ccr2;
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <set_motor_speed+0xa8>)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	f3af 8000 	nop.w
 8001010:	c28f5c29 	.word	0xc28f5c29
 8001014:	3fdc28f5 	.word	0x3fdc28f5
 8001018:	47ae147b 	.word	0x47ae147b
 800101c:	3ff47ae1 	.word	0x3ff47ae1
 8001020:	00000000 	.word	0x00000000
 8001024:	412e8480 	.word	0x412e8480
 8001028:	40590000 	.word	0x40590000
 800102c:	408f4000 	.word	0x408f4000
 8001030:	40000800 	.word	0x40000800
 8001034:	00000000 	.word	0x00000000

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	f5ad 3d80 	sub.w	sp, sp, #65536	; 0x10000
 800103e:	b0b6      	sub	sp, #216	; 0xd8
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	convFlag = 0;
 8001042:	4bb1      	ldr	r3, [pc, #708]	; (8001308 <main+0x2d0>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
	//E (low), A, D, G, B, E (high)
	float32_t string_freqs[6] = {82.41, 110.0, 146.83, 196.0, 246.94, 329.63};
 8001048:	4bb0      	ldr	r3, [pc, #704]	; (800130c <main+0x2d4>)
 800104a:	f507 3480 	add.w	r4, r7, #65536	; 0x10000
 800104e:	f104 0458 	add.w	r4, r4, #88	; 0x58
 8001052:	461d      	mov	r5, r3
 8001054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001058:	e895 0003 	ldmia.w	r5, {r0, r1}
 800105c:	e884 0003 	stmia.w	r4, {r0, r1}
	float32_t measured_freq;
	char *strings[] = {"E (low)", "A", "D", "G", "B", "E (high)" };
 8001060:	4bab      	ldr	r3, [pc, #684]	; (8001310 <main+0x2d8>)
 8001062:	f507 3480 	add.w	r4, r7, #65536	; 0x10000
 8001066:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800106a:	461d      	mov	r5, r3
 800106c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001070:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001074:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001078:	f001 ff7f 	bl	8002f7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107c:	f000 ff70 	bl	8001f60 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001080:	f000 ffb4 	bl	8001fec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f001 fa6e 	bl	8002564 <MX_GPIO_Init>
  MX_DMA_Init();
 8001088:	f001 fa42 	bl	8002510 <MX_DMA_Init>
  MX_ADC1_Init();
 800108c:	f000 ffde 	bl	800204c <MX_ADC1_Init>
  MX_DAC1_Init();
 8001090:	f001 f842 	bl	8002118 <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 8001094:	f001 f874 	bl	8002180 <MX_LPUART1_UART_Init>
  MX_SAI1_Init();
 8001098:	f001 f8be 	bl	8002218 <MX_SAI1_Init>
  MX_TIM1_Init();
 800109c:	f001 f930 	bl	8002300 <MX_TIM1_Init>
  MX_TIM4_Init();
 80010a0:	f001 f9da 	bl	8002458 <MX_TIM4_Init>
  MX_SPI1_Init();
 80010a4:	f001 f8ee 	bl	8002284 <MX_SPI1_Init>
  //arm_rfft_fast_init_f32(&fftHandler, BUFFER_LENGTH);

  float32_t signal[BUFFER_LENGTH];
  float32_t autocorrelation[BUFFER_LENGTH];

  uint32_t LOWEST_PERIOD = SAMPLING_RATE / 440; //440hz max
 80010a8:	2304      	movs	r3, #4
 80010aa:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80010ae:	f102 0280 	add.w	r2, r2, #128	; 0x80
 80010b2:	6013      	str	r3, [r2, #0]
  uint32_t HIGHEST_PERIOD = SAMPLING_RATE / 50; //60 Hz min (change to 50)
 80010b4:	2329      	movs	r3, #41	; 0x29
 80010b6:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80010ba:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80010be:	6013      	str	r3, [r2, #0]

   volatile uint16_t ADC_BUFFER[BUFFER_LENGTH];

//  float32_t freq_resolution = (float32_t)SAMPLING_RATE / (float32_t)BUFFER_LENGTH;

  HAL_TIM_Base_Start_IT(&htim1);
 80010c0:	4894      	ldr	r0, [pc, #592]	; (8001314 <main+0x2dc>)
 80010c2:	f007 f8cd 	bl	8008260 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80010c6:	2104      	movs	r1, #4
 80010c8:	4893      	ldr	r0, [pc, #588]	; (8001318 <main+0x2e0>)
 80010ca:	f007 f9f1 	bl	80084b0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, BUFFER_LENGTH);
 80010ce:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80010d2:	f103 0358 	add.w	r3, r3, #88	; 0x58
 80010d6:	3b98      	subs	r3, #152	; 0x98
 80010d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010dc:	4619      	mov	r1, r3
 80010de:	488f      	ldr	r0, [pc, #572]	; (800131c <main+0x2e4>)
 80010e0:	f002 fb04 	bl	80036ec <HAL_ADC_Start_DMA>
//	  }

	 //Calculate average of ADC values over a range, do this for both noise (to get a threshold) and for when the individual strings
	 //are strummed

	  while(convFlag == 0) {;}
 80010e4:	bf00      	nop
 80010e6:	4b88      	ldr	r3, [pc, #544]	; (8001308 <main+0x2d0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0fb      	beq.n	80010e6 <main+0xae>

	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 80010ee:	2300      	movs	r3, #0
 80010f0:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80010f4:	f102 02d4 	add.w	r2, r2, #212	; 0xd4
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	e031      	b.n	8001160 <main+0x128>
		  signal[i] = (double)(ADC_BUFFER[i]);
 80010fc:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 8001100:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8001104:	461a      	mov	r2, r3
 8001106:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800110a:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	f833 3c98 	ldrh.w	r3, [r3, #-152]
 8001118:	b29b      	uxth	r3, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f9b2 	bl	8000484 <__aeabi_ui2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fd08 	bl	8000b3c <__aeabi_d2f>
 800112c:	4602      	mov	r2, r0
 800112e:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001132:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8001136:	4619      	mov	r1, r3
 8001138:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800113c:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	3b98      	subs	r3, #152	; 0x98
 8001148:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 800114a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800114e:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800115a:	f102 02d4 	add.w	r2, r2, #212	; 0xd4
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001164:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800116e:	dbc5      	blt.n	80010fc <main+0xc4>
	  }


	apply_hanning_window(&signal, BUFFER_LENGTH);
 8001170:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001174:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8001178:	3b18      	subs	r3, #24
 800117a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff feba 	bl	8000ef8 <apply_hanning_window>

    arm_rfft_fast_instance_f32 fftInstance;


    // Initialize the FFT instance
    arm_rfft_fast_init_f32(&fftInstance, BUFFER_LENGTH);
 8001184:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 8001188:	f103 0358 	add.w	r3, r3, #88	; 0x58
 800118c:	3bb0      	subs	r3, #176	; 0xb0
 800118e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001192:	4618      	mov	r0, r3
 8001194:	f009 f9fa 	bl	800a58c <arm_rfft_fast_init_f32>

    float32_t output[BUFFER_LENGTH];
    arm_rfft_fast_f32(&fftInstance, signal, output, 0);
 8001198:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800119c:	f102 0218 	add.w	r2, r2, #24
 80011a0:	3ad4      	subs	r2, #212	; 0xd4
 80011a2:	f507 4140 	add.w	r1, r7, #49152	; 0xc000
 80011a6:	f101 0158 	add.w	r1, r1, #88	; 0x58
 80011aa:	3918      	subs	r1, #24
 80011ac:	f507 40c1 	add.w	r0, r7, #24704	; 0x6080
 80011b0:	f100 0058 	add.w	r0, r0, #88	; 0x58
 80011b4:	38b0      	subs	r0, #176	; 0xb0
 80011b6:	2300      	movs	r3, #0
 80011b8:	f009 facc 	bl	800a754 <arm_rfft_fast_f32>

    output[0] = 0;
 80011bc:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80011c0:	f103 0318 	add.w	r3, r3, #24
 80011c4:	461a      	mov	r2, r3
 80011c6:	f04f 0300 	mov.w	r3, #0
 80011ca:	f842 3cd4 	str.w	r3, [r2, #-212]
    output[1] = 0;
 80011ce:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80011d2:	f103 0318 	add.w	r3, r3, #24
 80011d6:	461a      	mov	r2, r3
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	f842 3cd0 	str.w	r3, [r2, #-208]


    // Rest of the frequency bins (upto N/2)
    float32_t HPS[BUFFER_LENGTH / 2];
    for (uint32_t i = 0; i < BUFFER_LENGTH / 2; ++i) {
 80011e0:	2300      	movs	r3, #0
 80011e2:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80011e6:	f102 02d0 	add.w	r2, r2, #208	; 0xd0
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	e061      	b.n	80012b2 <main+0x27a>
        HPS[i] = sqrtf(output[2 * i] * output[2 * i] + output[2 * i + 1] * output[2 * i + 1]); // Real part
 80011ee:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80011f2:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80011fe:	f102 0218 	add.w	r2, r2, #24
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	3bd4      	subs	r3, #212	; 0xd4
 8001208:	ed93 7a00 	vldr	s14, [r3]
 800120c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001210:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800121c:	f102 0218 	add.w	r2, r2, #24
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	3bd4      	subs	r3, #212	; 0xd4
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800122e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001232:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	3301      	adds	r3, #1
 800123c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8001240:	f102 0218 	add.w	r2, r2, #24
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	3bd4      	subs	r3, #212	; 0xd4
 800124a:	edd3 6a00 	vldr	s13, [r3]
 800124e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001252:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	3301      	adds	r3, #1
 800125c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8001260:	f102 0218 	add.w	r2, r2, #24
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	3bd4      	subs	r3, #212	; 0xd4
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001276:	eeb0 0a67 	vmov.f32	s0, s15
 800127a:	f00a f97f 	bl	800b57c <sqrtf>
 800127e:	eef0 7a40 	vmov.f32	s15, s0
 8001282:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001286:	461a      	mov	r2, r3
 8001288:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800128c:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	3bd4      	subs	r3, #212	; 0xd4
 8001298:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < BUFFER_LENGTH / 2; ++i) {
 800129c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80012a0:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80012ac:	f102 02d0 	add.w	r2, r2, #208	; 0xd0
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80012b6:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012c0:	d395      	bcc.n	80011ee <main+0x1b6>
    }

    float32_t average;
    arm_mean_f32(HPS, BUFFER_LENGTH, &average);
 80012c2:	f507 42c1 	add.w	r2, r7, #24704	; 0x6080
 80012c6:	f102 0258 	add.w	r2, r2, #88	; 0x58
 80012ca:	3ab4      	subs	r2, #180	; 0xb4
 80012cc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80012d0:	3bd4      	subs	r3, #212	; 0xd4
 80012d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d6:	4618      	mov	r0, r3
 80012d8:	f008 ffe6 	bl	800a2a8 <arm_mean_f32>
    if(average < 2000){ //Based on sampled data,see spreadsheet
 80012dc:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80012e0:	f103 0358 	add.w	r3, r3, #88	; 0x58
 80012e4:	ed53 7a2d 	vldr	s15, [r3, #-180]	; 0xffffff4c
 80012e8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001320 <main+0x2e8>
 80012ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f4:	f100 862f 	bmi.w	8001f56 <main+0xf1e>
    	continue;
    }

    for(int i = 0; i < BUFFER_LENGTH / 4; i++) {
 80012f8:	2300      	movs	r3, #0
 80012fa:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80012fe:	f102 02cc 	add.w	r2, r2, #204	; 0xcc
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	e0f7      	b.n	80014f6 <main+0x4be>
 8001306:	bf00      	nop
 8001308:	20000378 	.word	0x20000378
 800130c:	0800c148 	.word	0x0800c148
 8001310:	0800c184 	.word	0x0800c184
 8001314:	200002e0 	.word	0x200002e0
 8001318:	2000032c 	.word	0x2000032c
 800131c:	20000078 	.word	0x20000078
 8001320:	44fa0000 	.word	0x44fa0000
 8001324:	442a8000 	.word	0x442a8000
 8001328:	44000000 	.word	0x44000000
 800132c:	43cc8000 	.word	0x43cc8000

      HPS[i] = HPS[i] * HPS[2*i];
 8001330:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001334:	461a      	mov	r2, r3
 8001336:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800133a:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	3bd4      	subs	r3, #212	; 0xd4
 8001346:	ed93 7a00 	vldr	s14, [r3]
 800134a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800134e:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	3bd4      	subs	r3, #212	; 0xd4
 8001360:	edd3 7a00 	vldr	s15, [r3]
 8001364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001368:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800136c:	461a      	mov	r2, r3
 800136e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001372:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	3bd4      	subs	r3, #212	; 0xd4
 800137e:	edc3 7a00 	vstr	s15, [r3]

      if(i < floorf(BUFFER_LENGTH / 6)) {
 8001382:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001386:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001394:	ed1f 7a1d 	vldr	s14, [pc, #-116]	; 8001324 <main+0x2ec>
 8001398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a0:	d52a      	bpl.n	80013f8 <main+0x3c0>
        HPS[i] = HPS[i] * HPS[3*i];
 80013a2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013a6:	461a      	mov	r2, r3
 80013a8:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80013ac:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	3bd4      	subs	r3, #212	; 0xd4
 80013b8:	ed93 7a00 	vldr	s14, [r3]
 80013bc:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80013c0:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	3bd4      	subs	r3, #212	; 0xd4
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013de:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013e2:	461a      	mov	r2, r3
 80013e4:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80013e8:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	3bd4      	subs	r3, #212	; 0xd4
 80013f4:	edc3 7a00 	vstr	s15, [r3]
      }

      if(i < floorf(BUFFER_LENGTH / 8)) {
 80013f8:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80013fc:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	ed1f 7a39 	vldr	s14, [pc, #-228]	; 8001328 <main+0x2f0>
 800140e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001416:	d528      	bpl.n	800146a <main+0x432>
        HPS[i] = HPS[i] * HPS[4*i];
 8001418:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800141c:	461a      	mov	r2, r3
 800141e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001422:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	3bd4      	subs	r3, #212	; 0xd4
 800142e:	ed93 7a00 	vldr	s14, [r3]
 8001432:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001436:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	3bd4      	subs	r3, #212	; 0xd4
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001450:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001454:	461a      	mov	r2, r3
 8001456:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800145a:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	3bd4      	subs	r3, #212	; 0xd4
 8001466:	edc3 7a00 	vstr	s15, [r3]
      }

      if(i < floorf(BUFFER_LENGTH / 10)) {
 800146a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800146e:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147c:	ed1f 7a55 	vldr	s14, [pc, #-340]	; 800132c <main+0x2f4>
 8001480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001488:	d52a      	bpl.n	80014e0 <main+0x4a8>
    	  HPS[i] = HPS[i] * HPS[5*i];
 800148a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800148e:	461a      	mov	r2, r3
 8001490:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001494:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	3bd4      	subs	r3, #212	; 0xd4
 80014a0:	ed93 7a00 	vldr	s14, [r3]
 80014a4:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80014a8:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	3bd4      	subs	r3, #212	; 0xd4
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80014ca:	461a      	mov	r2, r3
 80014cc:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80014d0:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	3bd4      	subs	r3, #212	; 0xd4
 80014dc:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < BUFFER_LENGTH / 4; i++) {
 80014e0:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80014e4:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80014f0:	f102 02cc 	add.w	r2, r2, #204	; 0xcc
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80014fa:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001504:	f6ff af14 	blt.w	8001330 <main+0x2f8>
      }


    }
    //Filter lower and higher frequencies, 30Hz and 450 Hz
    for(int i = 0; i < 40; ++i){
 8001508:	2300      	movs	r3, #0
 800150a:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800150e:	f102 02c8 	add.w	r2, r2, #200	; 0xc8
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	e018      	b.n	8001548 <main+0x510>
    	HPS[i] = 0;
 8001516:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800151a:	461a      	mov	r2, r3
 800151c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001520:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	3bd4      	subs	r3, #212	; 0xd4
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 40; ++i){
 8001532:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001536:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001542:	f102 02c8 	add.w	r2, r2, #200	; 0xc8
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800154c:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b27      	cmp	r3, #39	; 0x27
 8001554:	dddf      	ble.n	8001516 <main+0x4de>
    }
    for(int i = 370; i < BUFFER_LENGTH / 2; ++i){ //370 since likely will never be higher and issues with 3rd string harmonics
 8001556:	f44f 73b9 	mov.w	r3, #370	; 0x172
 800155a:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800155e:	f102 02c4 	add.w	r2, r2, #196	; 0xc4
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	e018      	b.n	8001598 <main+0x560>
    	HPS[i] = 0;
 8001566:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800156a:	461a      	mov	r2, r3
 800156c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001570:	f103 03c4 	add.w	r3, r3, #196	; 0xc4
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	3bd4      	subs	r3, #212	; 0xd4
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
    for(int i = 370; i < BUFFER_LENGTH / 2; ++i){ //370 since likely will never be higher and issues with 3rd string harmonics
 8001582:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001586:	f103 03c4 	add.w	r3, r3, #196	; 0xc4
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	3301      	adds	r3, #1
 800158e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001592:	f102 02c4 	add.w	r2, r2, #196	; 0xc4
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800159c:	f103 03c4 	add.w	r3, r3, #196	; 0xc4
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015a6:	dbde      	blt.n	8001566 <main+0x52e>
    }

    int max_peak = 0;
 80015a8:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80015ac:	f103 0358 	add.w	r3, r3, #88	; 0x58
 80015b0:	461a      	mov	r2, r3
 80015b2:	2300      	movs	r3, #0
 80015b4:	f842 3cb8 	str.w	r3, [r2, #-184]
    int max_mag = 0;
 80015b8:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80015bc:	f103 0358 	add.w	r3, r3, #88	; 0x58
 80015c0:	461a      	mov	r2, r3
 80015c2:	2300      	movs	r3, #0
 80015c4:	f842 3cbc 	str.w	r3, [r2, #-188]
    arm_max_f32(HPS, BUFFER_LENGTH / 2, &max_mag, &max_peak);
 80015c8:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80015cc:	f103 0358 	add.w	r3, r3, #88	; 0x58
 80015d0:	3bb8      	subs	r3, #184	; 0xb8
 80015d2:	f507 42c1 	add.w	r2, r7, #24704	; 0x6080
 80015d6:	f102 0258 	add.w	r2, r2, #88	; 0x58
 80015da:	3abc      	subs	r2, #188	; 0xbc
 80015dc:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 80015e0:	38d4      	subs	r0, #212	; 0xd4
 80015e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015e6:	f008 fe9d 	bl	800a324 <arm_max_f32>

    float32_t measured_freq = max_peak * (2* SAMPLING_RATE/(BUFFER_LENGTH));
 80015ea:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80015ee:	f103 0358 	add.w	r3, r3, #88	; 0x58
 80015f2:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff54 	bl	80004a4 <__aeabi_i2d>
 80015fc:	f20f 5390 	addw	r3, pc, #1424	; 0x590
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7fe ffb8 	bl	8000578 <__aeabi_dmul>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff fa94 	bl	8000b3c <__aeabi_d2f>
 8001614:	4603      	mov	r3, r0
 8001616:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800161a:	f102 0278 	add.w	r2, r2, #120	; 0x78
 800161e:	6013      	str	r3, [r2, #0]

	     //Match frequency to string

	     //find smallest magnitude of distance
	     float32_t min_freqs[6];
	     for(int i = 0; i < 6; ++i){
 8001620:	2300      	movs	r3, #0
 8001622:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001626:	f102 02c0 	add.w	r2, r2, #192	; 0xc0
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	e02f      	b.n	800168e <main+0x656>
	    	 min_freqs[i] = string_freqs[i] - measured_freq;
 800162e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001632:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800163e:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8001642:	443b      	add	r3, r7
 8001644:	3b80      	subs	r3, #128	; 0x80
 8001646:	ed93 7a00 	vldr	s14, [r3]
 800164a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800164e:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8001652:	edd3 7a00 	vldr	s15, [r3]
 8001656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165a:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 800165e:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8001662:	461a      	mov	r2, r3
 8001664:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001668:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	3bd4      	subs	r3, #212	; 0xd4
 8001674:	edc3 7a00 	vstr	s15, [r3]
	     for(int i = 0; i < 6; ++i){
 8001678:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800167c:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001688:	f102 02c0 	add.w	r2, r2, #192	; 0xc0
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001692:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b05      	cmp	r3, #5
 800169a:	ddc8      	ble.n	800162e <main+0x5f6>
	     }

	     arm_abs_f32(min_freqs, min_freqs, 6);
 800169c:	f507 41c1 	add.w	r1, r7, #24704	; 0x6080
 80016a0:	f101 0158 	add.w	r1, r1, #88	; 0x58
 80016a4:	39d4      	subs	r1, #212	; 0xd4
 80016a6:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80016aa:	f103 0358 	add.w	r3, r3, #88	; 0x58
 80016ae:	3bd4      	subs	r3, #212	; 0xd4
 80016b0:	2206      	movs	r2, #6
 80016b2:	4618      	mov	r0, r3
 80016b4:	f009 fc2c 	bl	800af10 <arm_abs_f32>

	     //find the argmin
	     float32_t current_min = min_freqs[0];
 80016b8:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80016bc:	f103 0358 	add.w	r3, r3, #88	; 0x58
 80016c0:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 80016c4:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80016c8:	f102 02bc 	add.w	r2, r2, #188	; 0xbc
 80016cc:	6013      	str	r3, [r2, #0]
	     uint8_t index = 0;;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80016d4:	f102 02bb 	add.w	r2, r2, #187	; 0xbb
 80016d8:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 80016da:	2300      	movs	r3, #0
 80016dc:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80016e0:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e041      	b.n	800176c <main+0x734>
	    	 if (min_freqs[i] < current_min){
 80016e8:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80016ec:	f103 0358 	add.w	r3, r3, #88	; 0x58
 80016f0:	461a      	mov	r2, r3
 80016f2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80016f6:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	3bd4      	subs	r3, #212	; 0xd4
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800170a:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 800170e:	ed93 7a00 	vldr	s14, [r3]
 8001712:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	dd1c      	ble.n	8001756 <main+0x71e>
	    		 current_min = min_freqs[i];
 800171c:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 8001720:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8001724:	461a      	mov	r2, r3
 8001726:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800172a:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	3bd4      	subs	r3, #212	; 0xd4
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800173c:	f102 02bc 	add.w	r2, r2, #188	; 0xbc
 8001740:	6013      	str	r3, [r2, #0]
	    		 index = i;
 8001742:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001746:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001750:	f102 02bb 	add.w	r2, r2, #187	; 0xbb
 8001754:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 8001756:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800175a:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001766:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001770:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b05      	cmp	r3, #5
 8001778:	ddb6      	ble.n	80016e8 <main+0x6b0>
	    	 }
	     }

	     //assign detected string
	     detected_string = strings[index];
 800177a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800177e:	f103 03bb 	add.w	r3, r3, #187	; 0xbb
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800178a:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 800178e:	443b      	add	r3, r7
 8001790:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8001794:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001798:	f102 0274 	add.w	r2, r2, #116	; 0x74
 800179c:	6013      	str	r3, [r2, #0]

	     string_offset = measured_freq - string_freqs[index];
 800179e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80017a2:	f103 03bb 	add.w	r3, r3, #187	; 0xbb
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80017ae:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 80017b2:	443b      	add	r3, r7
 80017b4:	3b80      	subs	r3, #128	; 0x80
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80017be:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80017c2:	ed93 7a00 	vldr	s14, [r3]
 80017c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ca:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80017ce:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80017d2:	edc3 7a00 	vstr	s15, [r3]
//	     ILI9341_WriteString(100, 90, charFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
//	     ILI9341_WriteString(10, 120, "Desired Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
//	     ILI9341_WriteString(100, 150, desiredFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);

	     //Tune strings (yeah yeah)
	     switch (index){
 80017d6:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80017da:	f103 03bb 	add.w	r3, r3, #187	; 0xbb
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b05      	cmp	r3, #5
 80017e2:	f200 83af 	bhi.w	8001f44 <main+0xf0c>
 80017e6:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <main+0x7b4>)
 80017e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ec:	08001805 	.word	0x08001805
 80017f0:	0800192d 	.word	0x0800192d
 80017f4:	08001a55 	.word	0x08001a55
 80017f8:	08001bb1 	.word	0x08001bb1
 80017fc:	08001cf5 	.word	0x08001cf5
 8001800:	08001e1d 	.word	0x08001e1d
	     	 case 0: //E low
	     		if(string_offset > 0){
 8001804:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001808:	f103 0370 	add.w	r3, r3, #112	; 0x70
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	dd3c      	ble.n	8001894 <main+0x85c>
				 uint32_t delay = floor(70 * string_offset);
 800181a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800181e:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001822:	edd3 7a00 	vldr	s15, [r3]
 8001826:	ed9f 7ad6 	vldr	s14, [pc, #856]	; 8001b80 <main+0xb48>
 800182a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182e:	ee17 0a90 	vmov	r0, s15
 8001832:	f7fe fe49 	bl	80004c8 <__aeabi_f2d>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	ec43 2b10 	vmov	d0, r2, r3
 800183e:	f009 ff03 	bl	800b648 <floor>
 8001842:	ec53 2b10 	vmov	r2, r3, d0
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	f7ff f957 	bl	8000afc <__aeabi_d2uiz>
 800184e:	4603      	mov	r3, r0
 8001850:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001854:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 8001858:	6013      	str	r3, [r2, #0]
				 if(delay > 1000){
 800185a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800185e:	f103 03b0 	add.w	r3, r3, #176	; 0xb0
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001868:	d906      	bls.n	8001878 <main+0x840>
					delay = 1000;
 800186a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001872:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 8001876:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed(70);
 8001878:	2046      	movs	r0, #70	; 0x46
 800187a:	f7ff fb85 	bl	8000f88 <set_motor_speed>
				  HAL_Delay(delay);
 800187e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001882:	f103 03b0 	add.w	r3, r3, #176	; 0xb0
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	f001 fbec 	bl	8003064 <HAL_Delay>
				  set_motor_speed(50);
 800188c:	2032      	movs	r0, #50	; 0x32
 800188e:	f7ff fb7b 	bl	8000f88 <set_motor_speed>
				 }
				 set_motor_speed(18);
				 HAL_Delay(delay);
				 set_motor_speed(50);
				}
	     		 break;
 8001892:	e357      	b.n	8001f44 <main+0xf0c>
				else if(string_offset < 0){
 8001894:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001898:	f103 0370 	add.w	r3, r3, #112	; 0x70
 800189c:	edd3 7a00 	vldr	s15, [r3]
 80018a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	d400      	bmi.n	80018ac <main+0x874>
	     		 break;
 80018aa:	e34b      	b.n	8001f44 <main+0xf0c>
				 uint32_t delay = floor(-1* (50 * string_offset));
 80018ac:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80018b0:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80018b4:	edd3 7a00 	vldr	s15, [r3]
 80018b8:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8001b84 <main+0xb4c>
 80018bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c0:	eef1 7a67 	vneg.f32	s15, s15
 80018c4:	ee17 3a90 	vmov	r3, s15
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fdfd 	bl	80004c8 <__aeabi_f2d>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	ec43 2b10 	vmov	d0, r2, r3
 80018d6:	f009 feb7 	bl	800b648 <floor>
 80018da:	ec53 2b10 	vmov	r2, r3, d0
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f90b 	bl	8000afc <__aeabi_d2uiz>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80018ec:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 80018f0:	6013      	str	r3, [r2, #0]
				 if(delay > 1000){
 80018f2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80018f6:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001900:	d906      	bls.n	8001910 <main+0x8d8>
					delay = 1000;
 8001902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001906:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800190a:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 800190e:	6013      	str	r3, [r2, #0]
				 set_motor_speed(18);
 8001910:	2012      	movs	r0, #18
 8001912:	f7ff fb39 	bl	8000f88 <set_motor_speed>
				 HAL_Delay(delay);
 8001916:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800191a:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	f001 fba0 	bl	8003064 <HAL_Delay>
				 set_motor_speed(50);
 8001924:	2032      	movs	r0, #50	; 0x32
 8001926:	f7ff fb2f 	bl	8000f88 <set_motor_speed>
	     		 break;
 800192a:	e30b      	b.n	8001f44 <main+0xf0c>

	     	 case 1: //A
	     		if(string_offset > 0){
 800192c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001930:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001940:	dd3c      	ble.n	80019bc <main+0x984>
				 uint32_t delay = floor(90 * string_offset);
 8001942:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001946:	f103 0370 	add.w	r3, r3, #112	; 0x70
 800194a:	edd3 7a00 	vldr	s15, [r3]
 800194e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001b88 <main+0xb50>
 8001952:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001956:	ee17 0a90 	vmov	r0, s15
 800195a:	f7fe fdb5 	bl	80004c8 <__aeabi_f2d>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	ec43 2b10 	vmov	d0, r2, r3
 8001966:	f009 fe6f 	bl	800b648 <floor>
 800196a:	ec53 2b10 	vmov	r2, r3, d0
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f7ff f8c3 	bl	8000afc <__aeabi_d2uiz>
 8001976:	4603      	mov	r3, r0
 8001978:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800197c:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 8001980:	6013      	str	r3, [r2, #0]
				 if(delay > 1000){
 8001982:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001986:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001990:	d906      	bls.n	80019a0 <main+0x968>
					delay = 1000;
 8001992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001996:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800199a:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 800199e:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed(70);
 80019a0:	2046      	movs	r0, #70	; 0x46
 80019a2:	f7ff faf1 	bl	8000f88 <set_motor_speed>
				  HAL_Delay(delay);
 80019a6:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80019aa:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	f001 fb58 	bl	8003064 <HAL_Delay>
				  set_motor_speed(50);
 80019b4:	2032      	movs	r0, #50	; 0x32
 80019b6:	f7ff fae7 	bl	8000f88 <set_motor_speed>
				 }
				 set_motor_speed(18);
				 HAL_Delay(delay);
				 set_motor_speed(50);
				}
	     		 break;
 80019ba:	e2c3      	b.n	8001f44 <main+0xf0c>
				else if(string_offset < 0){
 80019bc:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80019c0:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d0:	d400      	bmi.n	80019d4 <main+0x99c>
	     		 break;
 80019d2:	e2b7      	b.n	8001f44 <main+0xf0c>
				 uint32_t delay = floor(-1* (100 * string_offset));
 80019d4:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80019d8:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80019dc:	edd3 7a00 	vldr	s15, [r3]
 80019e0:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001bac <main+0xb74>
 80019e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e8:	eef1 7a67 	vneg.f32	s15, s15
 80019ec:	ee17 3a90 	vmov	r3, s15
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fd69 	bl	80004c8 <__aeabi_f2d>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	ec43 2b10 	vmov	d0, r2, r3
 80019fe:	f009 fe23 	bl	800b648 <floor>
 8001a02:	ec53 2b10 	vmov	r2, r3, d0
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7ff f877 	bl	8000afc <__aeabi_d2uiz>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001a14:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8001a18:	6013      	str	r3, [r2, #0]
				 if(delay > 1000){
 8001a1a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001a1e:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a28:	d906      	bls.n	8001a38 <main+0xa00>
					delay = 1000;
 8001a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001a32:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8001a36:	6013      	str	r3, [r2, #0]
				 set_motor_speed(18);
 8001a38:	2012      	movs	r0, #18
 8001a3a:	f7ff faa5 	bl	8000f88 <set_motor_speed>
				 HAL_Delay(delay);
 8001a3e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001a42:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	f001 fb0c 	bl	8003064 <HAL_Delay>
				 set_motor_speed(50);
 8001a4c:	2032      	movs	r0, #50	; 0x32
 8001a4e:	f7ff fa9b 	bl	8000f88 <set_motor_speed>
	     		 break;
 8001a52:	e277      	b.n	8001f44 <main+0xf0c>

	     	 case 2: //D
	     		if(string_offset > 0){
 8001a54:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001a58:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001a5c:	edd3 7a00 	vldr	s15, [r3]
 8001a60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a68:	dd3c      	ble.n	8001ae4 <main+0xaac>
				 uint32_t delay = floor(130 * string_offset); // (500/3 )
 8001a6a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001a6e:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001b8c <main+0xb54>
 8001a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a7e:	ee17 0a90 	vmov	r0, s15
 8001a82:	f7fe fd21 	bl	80004c8 <__aeabi_f2d>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	ec43 2b10 	vmov	d0, r2, r3
 8001a8e:	f009 fddb 	bl	800b648 <floor>
 8001a92:	ec53 2b10 	vmov	r2, r3, d0
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f7ff f82f 	bl	8000afc <__aeabi_d2uiz>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001aa4:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 8001aa8:	6013      	str	r3, [r2, #0]
				 if(delay > 1000){
 8001aaa:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001aae:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ab8:	d906      	bls.n	8001ac8 <main+0xa90>
					delay = 1000;
 8001aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abe:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001ac2:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 8001ac6:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed(70);
 8001ac8:	2046      	movs	r0, #70	; 0x46
 8001aca:	f7ff fa5d 	bl	8000f88 <set_motor_speed>
				  HAL_Delay(delay);
 8001ace:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001ad2:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	f001 fac4 	bl	8003064 <HAL_Delay>
				  set_motor_speed(50);
 8001adc:	2032      	movs	r0, #50	; 0x32
 8001ade:	f7ff fa53 	bl	8000f88 <set_motor_speed>
				 }
				 set_motor_speed(18);
				 HAL_Delay(delay);
				 set_motor_speed(50);
	     		}
	     		 break;
 8001ae2:	e22f      	b.n	8001f44 <main+0xf0c>
				else if(string_offset < 0){
 8001ae4:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001ae8:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af8:	d400      	bmi.n	8001afc <main+0xac4>
	     		 break;
 8001afa:	e223      	b.n	8001f44 <main+0xf0c>
				 uint32_t delay = floor(-1* (130 * string_offset)); // (500/3 )
 8001afc:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001b00:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001b8c <main+0xb54>
 8001b0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b10:	eef1 7a67 	vneg.f32	s15, s15
 8001b14:	ee17 3a90 	vmov	r3, s15
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fcd5 	bl	80004c8 <__aeabi_f2d>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	ec43 2b10 	vmov	d0, r2, r3
 8001b26:	f009 fd8f 	bl	800b648 <floor>
 8001b2a:	ec53 2b10 	vmov	r2, r3, d0
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7fe ffe3 	bl	8000afc <__aeabi_d2uiz>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001b3c:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 8001b40:	6013      	str	r3, [r2, #0]
				 if(delay > 1000){
 8001b42:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001b46:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b50:	d906      	bls.n	8001b60 <main+0xb28>
					delay = 1000;
 8001b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b56:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001b5a:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 8001b5e:	6013      	str	r3, [r2, #0]
				 set_motor_speed(18);
 8001b60:	2012      	movs	r0, #18
 8001b62:	f7ff fa11 	bl	8000f88 <set_motor_speed>
				 HAL_Delay(delay);
 8001b66:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001b6a:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	f001 fa78 	bl	8003064 <HAL_Delay>
				 set_motor_speed(50);
 8001b74:	2032      	movs	r0, #50	; 0x32
 8001b76:	f7ff fa07 	bl	8000f88 <set_motor_speed>
	     		 break;
 8001b7a:	e1e3      	b.n	8001f44 <main+0xf0c>
 8001b7c:	f3af 8000 	nop.w
 8001b80:	428c0000 	.word	0x428c0000
 8001b84:	42480000 	.word	0x42480000
 8001b88:	42b40000 	.word	0x42b40000
 8001b8c:	43020000 	.word	0x43020000
 8001b90:	624dd2f2 	.word	0x624dd2f2
 8001b94:	3ff00690 	.word	0x3ff00690
 8001b98:	42e60000 	.word	0x42e60000
 8001b9c:	43200000 	.word	0x43200000
 8001ba0:	42a00000 	.word	0x42a00000
 8001ba4:	42700000 	.word	0x42700000
 8001ba8:	43160000 	.word	0x43160000
 8001bac:	42c80000 	.word	0x42c80000

	     	 case 3: //G
	     		if(string_offset > 0){
 8001bb0:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001bb4:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	dd3c      	ble.n	8001c40 <main+0xc08>
				 uint32_t delay = floor(115 * string_offset);
 8001bc6:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001bca:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 8001b98 <main+0xb60>
 8001bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bda:	ee17 0a90 	vmov	r0, s15
 8001bde:	f7fe fc73 	bl	80004c8 <__aeabi_f2d>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	ec43 2b10 	vmov	d0, r2, r3
 8001bea:	f009 fd2d 	bl	800b648 <floor>
 8001bee:	ec53 2b10 	vmov	r2, r3, d0
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f7fe ff81 	bl	8000afc <__aeabi_d2uiz>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001c00:	f102 0298 	add.w	r2, r2, #152	; 0x98
 8001c04:	6013      	str	r3, [r2, #0]
				 if(delay > 1000){
 8001c06:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001c0a:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c14:	d906      	bls.n	8001c24 <main+0xbec>
				 	delay = 1000;
 8001c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1a:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001c1e:	f102 0298 	add.w	r2, r2, #152	; 0x98
 8001c22:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed(72);
 8001c24:	2048      	movs	r0, #72	; 0x48
 8001c26:	f7ff f9af 	bl	8000f88 <set_motor_speed>
				  HAL_Delay(delay);
 8001c2a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001c2e:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	f001 fa16 	bl	8003064 <HAL_Delay>
				  set_motor_speed(50);
 8001c38:	2032      	movs	r0, #50	; 0x32
 8001c3a:	f7ff f9a5 	bl	8000f88 <set_motor_speed>
				 }
				 set_motor_speed(20);
				 HAL_Delay(delay);
				 set_motor_speed(50);
				}
	     		 break;
 8001c3e:	e181      	b.n	8001f44 <main+0xf0c>
				else if(string_offset < 0 && string_offset < -1){
 8001c40:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001c44:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c54:	d400      	bmi.n	8001c58 <main+0xc20>
	     		 break;
 8001c56:	e175      	b.n	8001f44 <main+0xf0c>
				else if(string_offset < 0 && string_offset < -1){
 8001c58:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001c5c:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c70:	d400      	bmi.n	8001c74 <main+0xc3c>
	     		 break;
 8001c72:	e167      	b.n	8001f44 <main+0xf0c>
				 uint32_t delay = floor(-1* (160 * string_offset));
 8001c74:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001c78:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001c7c:	edd3 7a00 	vldr	s15, [r3]
 8001c80:	ed1f 7a3a 	vldr	s14, [pc, #-232]	; 8001b9c <main+0xb64>
 8001c84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c88:	eef1 7a67 	vneg.f32	s15, s15
 8001c8c:	ee17 3a90 	vmov	r3, s15
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc19 	bl	80004c8 <__aeabi_f2d>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	ec43 2b10 	vmov	d0, r2, r3
 8001c9e:	f009 fcd3 	bl	800b648 <floor>
 8001ca2:	ec53 2b10 	vmov	r2, r3, d0
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f7fe ff27 	bl	8000afc <__aeabi_d2uiz>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001cb4:	f102 0294 	add.w	r2, r2, #148	; 0x94
 8001cb8:	6013      	str	r3, [r2, #0]
				 if(delay > 1000){
 8001cba:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001cbe:	f103 0394 	add.w	r3, r3, #148	; 0x94
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cc8:	d906      	bls.n	8001cd8 <main+0xca0>
				 	delay = 1000;
 8001cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cce:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001cd2:	f102 0294 	add.w	r2, r2, #148	; 0x94
 8001cd6:	6013      	str	r3, [r2, #0]
				 set_motor_speed(20);
 8001cd8:	2014      	movs	r0, #20
 8001cda:	f7ff f955 	bl	8000f88 <set_motor_speed>
				 HAL_Delay(delay);
 8001cde:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001ce2:	f103 0394 	add.w	r3, r3, #148	; 0x94
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	f001 f9bc 	bl	8003064 <HAL_Delay>
				 set_motor_speed(50);
 8001cec:	2032      	movs	r0, #50	; 0x32
 8001cee:	f7ff f94b 	bl	8000f88 <set_motor_speed>
	     		 break;
 8001cf2:	e127      	b.n	8001f44 <main+0xf0c>

	     	 case 4: //B
	     		if(string_offset > 0){ // COULD TEST FOR EXPECTED VALUE (BASED ON 1H range) when in tune
 8001cf4:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001cf8:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d08:	dd3c      	ble.n	8001d84 <main+0xd4c>
	     		 uint32_t delay = floor(80 * string_offset);	//OR could just do > 1 and let user decide when good, display in tune or sum
 8001d0a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001d0e:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001d12:	edd3 7a00 	vldr	s15, [r3]
 8001d16:	ed1f 7a5e 	vldr	s14, [pc, #-376]	; 8001ba0 <main+0xb68>
 8001d1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d1e:	ee17 0a90 	vmov	r0, s15
 8001d22:	f7fe fbd1 	bl	80004c8 <__aeabi_f2d>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	ec43 2b10 	vmov	d0, r2, r3
 8001d2e:	f009 fc8b 	bl	800b648 <floor>
 8001d32:	ec53 2b10 	vmov	r2, r3, d0
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f7fe fedf 	bl	8000afc <__aeabi_d2uiz>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001d44:	f102 0290 	add.w	r2, r2, #144	; 0x90
 8001d48:	6013      	str	r3, [r2, #0]
				 if(delay > 1000){								//Since it has 1 Hz accuracy might be nice to have it turn small amounts
 8001d4a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001d4e:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d58:	d906      	bls.n	8001d68 <main+0xd30>
				 	delay = 1000;
 8001d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001d62:	f102 0290 	add.w	r2, r2, #144	; 0x90
 8001d66:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed(65);
 8001d68:	2041      	movs	r0, #65	; 0x41
 8001d6a:	f7ff f90d 	bl	8000f88 <set_motor_speed>
				  HAL_Delay(delay);
 8001d6e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001d72:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	f001 f974 	bl	8003064 <HAL_Delay>
				  set_motor_speed(50);
 8001d7c:	2032      	movs	r0, #50	; 0x32
 8001d7e:	f7ff f903 	bl	8000f88 <set_motor_speed>
				 }
				 set_motor_speed(20);
				 HAL_Delay(delay);
				 set_motor_speed(50);
	     		}
	     		 break;
 8001d82:	e0df      	b.n	8001f44 <main+0xf0c>
	     		else if(string_offset < 0){
 8001d84:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001d88:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d98:	d400      	bmi.n	8001d9c <main+0xd64>
	     		 break;
 8001d9a:	e0d3      	b.n	8001f44 <main+0xf0c>
				 uint32_t delay = floor(-1* (60 * string_offset));
 8001d9c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001da0:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 8001ba4 <main+0xb6c>
 8001dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db0:	eef1 7a67 	vneg.f32	s15, s15
 8001db4:	ee17 3a90 	vmov	r3, s15
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fb85 	bl	80004c8 <__aeabi_f2d>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	ec43 2b10 	vmov	d0, r2, r3
 8001dc6:	f009 fc3f 	bl	800b648 <floor>
 8001dca:	ec53 2b10 	vmov	r2, r3, d0
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f7fe fe93 	bl	8000afc <__aeabi_d2uiz>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001ddc:	f102 028c 	add.w	r2, r2, #140	; 0x8c
 8001de0:	6013      	str	r3, [r2, #0]
				 if(delay > 1000){
 8001de2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001de6:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001df0:	d906      	bls.n	8001e00 <main+0xdc8>
				 	delay = 1000;
 8001df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df6:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001dfa:	f102 028c 	add.w	r2, r2, #140	; 0x8c
 8001dfe:	6013      	str	r3, [r2, #0]
				 set_motor_speed(20);
 8001e00:	2014      	movs	r0, #20
 8001e02:	f7ff f8c1 	bl	8000f88 <set_motor_speed>
				 HAL_Delay(delay);
 8001e06:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001e0a:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	f001 f928 	bl	8003064 <HAL_Delay>
				 set_motor_speed(50);
 8001e14:	2032      	movs	r0, #50	; 0x32
 8001e16:	f7ff f8b7 	bl	8000f88 <set_motor_speed>
	     		 break;
 8001e1a:	e093      	b.n	8001f44 <main+0xf0c>

	     	 case 5: //Low E
	     		if(string_offset > 0){
 8001e1c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001e20:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001e24:	edd3 7a00 	vldr	s15, [r3]
 8001e28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e30:	dd3c      	ble.n	8001eac <main+0xe74>
					 uint32_t delay = floor(150 * string_offset);
 8001e32:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001e36:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001e3a:	edd3 7a00 	vldr	s15, [r3]
 8001e3e:	ed1f 7aa6 	vldr	s14, [pc, #-664]	; 8001ba8 <main+0xb70>
 8001e42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e46:	ee17 0a90 	vmov	r0, s15
 8001e4a:	f7fe fb3d 	bl	80004c8 <__aeabi_f2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	ec43 2b10 	vmov	d0, r2, r3
 8001e56:	f009 fbf7 	bl	800b648 <floor>
 8001e5a:	ec53 2b10 	vmov	r2, r3, d0
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7fe fe4b 	bl	8000afc <__aeabi_d2uiz>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001e6c:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8001e70:	6013      	str	r3, [r2, #0]
					 if(delay > 1000){
 8001e72:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001e76:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e80:	d906      	bls.n	8001e90 <main+0xe58>
					 	delay = 1000;
 8001e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e86:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001e8a:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8001e8e:	6013      	str	r3, [r2, #0]
					 }
					  set_motor_speed(65);
 8001e90:	2041      	movs	r0, #65	; 0x41
 8001e92:	f7ff f879 	bl	8000f88 <set_motor_speed>
					  HAL_Delay(delay);
 8001e96:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001e9a:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	f001 f8e0 	bl	8003064 <HAL_Delay>
					  set_motor_speed(50);
 8001ea4:	2032      	movs	r0, #50	; 0x32
 8001ea6:	f7ff f86f 	bl	8000f88 <set_motor_speed>
					 }
					 set_motor_speed(25);
					 HAL_Delay(delay);
					 set_motor_speed(50);
				 }
	     		 break;
 8001eaa:	e04a      	b.n	8001f42 <main+0xf0a>
	     		else if(string_offset < 0){
 8001eac:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001eb0:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec0:	d400      	bmi.n	8001ec4 <main+0xe8c>
	     		 break;
 8001ec2:	e03e      	b.n	8001f42 <main+0xf0a>
					 uint32_t delay = floor(-1* (100 * string_offset));
 8001ec4:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001ec8:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	ed1f 7aca 	vldr	s14, [pc, #-808]	; 8001bac <main+0xb74>
 8001ed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed8:	eef1 7a67 	vneg.f32	s15, s15
 8001edc:	ee17 3a90 	vmov	r3, s15
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe faf1 	bl	80004c8 <__aeabi_f2d>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	ec43 2b10 	vmov	d0, r2, r3
 8001eee:	f009 fbab 	bl	800b648 <floor>
 8001ef2:	ec53 2b10 	vmov	r2, r3, d0
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f7fe fdff 	bl	8000afc <__aeabi_d2uiz>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001f04:	f102 0284 	add.w	r2, r2, #132	; 0x84
 8001f08:	6013      	str	r3, [r2, #0]
					 if(delay > 1000){
 8001f0a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001f0e:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f18:	d906      	bls.n	8001f28 <main+0xef0>
					 	delay = 1000;
 8001f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001f22:	f102 0284 	add.w	r2, r2, #132	; 0x84
 8001f26:	6013      	str	r3, [r2, #0]
					 set_motor_speed(25);
 8001f28:	2019      	movs	r0, #25
 8001f2a:	f7ff f82d 	bl	8000f88 <set_motor_speed>
					 HAL_Delay(delay);
 8001f2e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001f32:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	f001 f894 	bl	8003064 <HAL_Delay>
					 set_motor_speed(50);
 8001f3c:	2032      	movs	r0, #50	; 0x32
 8001f3e:	f7ff f823 	bl	8000f88 <set_motor_speed>
	     		 break;
 8001f42:	bf00      	nop

	     }

	  //To prevent strum from previous affecting next
	  HAL_Delay(1000);
 8001f44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f48:	f001 f88c 	bl	8003064 <HAL_Delay>
	  convFlag = 0;
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <main+0xf24>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	f7ff b8bc 	b.w	80010ce <main+0x96>
    	continue;
 8001f56:	bf00      	nop
  {
 8001f58:	f7ff b8b9 	b.w	80010ce <main+0x96>
 8001f5c:	20000378 	.word	0x20000378

08001f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b096      	sub	sp, #88	; 0x58
 8001f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	2244      	movs	r2, #68	; 0x44
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f009 fad2 	bl	800b518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f74:	463b      	mov	r3, r7
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f86:	f003 f81b 	bl	8004fc0 <HAL_PWREx_ControlVoltageScaling>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f90:	f000 fc8e 	bl	80028b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001f94:	2310      	movs	r3, #16
 8001f96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001fa0:	2370      	movs	r3, #112	; 0x70
 8001fa2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4618      	mov	r0, r3
 8001fae:	f003 f8bb 	bl	8005128 <HAL_RCC_OscConfig>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001fb8:	f000 fc7a 	bl	80028b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fbc:	230f      	movs	r3, #15
 8001fbe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fd0:	463b      	mov	r3, r7
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f003 fcc1 	bl	800595c <HAL_RCC_ClockConfig>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001fe0:	f000 fc66 	bl	80028b0 <Error_Handler>
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3758      	adds	r7, #88	; 0x58
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b0a6      	sub	sp, #152	; 0x98
 8001ff0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	2294      	movs	r2, #148	; 0x94
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f009 fa8d 	bl	800b518 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 8001ffe:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002002:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002004:	2300      	movs	r3, #0
 8002006:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002008:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800200c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002010:	2301      	movs	r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002014:	2301      	movs	r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002018:	2308      	movs	r3, #8
 800201a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800201c:	2302      	movs	r3, #2
 800201e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002020:	2302      	movs	r3, #2
 8002022:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002024:	2302      	movs	r3, #2
 8002026:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <PeriphCommonClock_Config+0x5c>)
 800202a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	4618      	mov	r0, r3
 8002030:	f003 ff52 	bl	8005ed8 <HAL_RCCEx_PeriphCLKConfig>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 800203a:	f000 fc39 	bl	80028b0 <Error_Handler>
  }
}
 800203e:	bf00      	nop
 8002040:	3798      	adds	r7, #152	; 0x98
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	01010000 	.word	0x01010000

0800204c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002052:	463b      	mov	r3, r7
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
 8002060:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002062:	4b2a      	ldr	r3, [pc, #168]	; (800210c <MX_ADC1_Init+0xc0>)
 8002064:	4a2a      	ldr	r2, [pc, #168]	; (8002110 <MX_ADC1_Init+0xc4>)
 8002066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002068:	4b28      	ldr	r3, [pc, #160]	; (800210c <MX_ADC1_Init+0xc0>)
 800206a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800206e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002070:	4b26      	ldr	r3, [pc, #152]	; (800210c <MX_ADC1_Init+0xc0>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002076:	4b25      	ldr	r3, [pc, #148]	; (800210c <MX_ADC1_Init+0xc0>)
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800207c:	4b23      	ldr	r3, [pc, #140]	; (800210c <MX_ADC1_Init+0xc0>)
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002082:	4b22      	ldr	r3, [pc, #136]	; (800210c <MX_ADC1_Init+0xc0>)
 8002084:	2204      	movs	r2, #4
 8002086:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002088:	4b20      	ldr	r3, [pc, #128]	; (800210c <MX_ADC1_Init+0xc0>)
 800208a:	2200      	movs	r2, #0
 800208c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800208e:	4b1f      	ldr	r3, [pc, #124]	; (800210c <MX_ADC1_Init+0xc0>)
 8002090:	2200      	movs	r2, #0
 8002092:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002094:	4b1d      	ldr	r3, [pc, #116]	; (800210c <MX_ADC1_Init+0xc0>)
 8002096:	2201      	movs	r2, #1
 8002098:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <MX_ADC1_Init+0xc0>)
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <MX_ADC1_Init+0xc0>)
 80020a4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80020a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80020aa:	4b18      	ldr	r3, [pc, #96]	; (800210c <MX_ADC1_Init+0xc0>)
 80020ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80020b2:	4b16      	ldr	r3, [pc, #88]	; (800210c <MX_ADC1_Init+0xc0>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80020ba:	4b14      	ldr	r3, [pc, #80]	; (800210c <MX_ADC1_Init+0xc0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <MX_ADC1_Init+0xc0>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020c8:	4810      	ldr	r0, [pc, #64]	; (800210c <MX_ADC1_Init+0xc0>)
 80020ca:	f001 f9c9 	bl	8003460 <HAL_ADC_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80020d4:	f000 fbec 	bl	80028b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80020d8:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <MX_ADC1_Init+0xc8>)
 80020da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020dc:	2306      	movs	r3, #6
 80020de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80020e0:	2307      	movs	r3, #7
 80020e2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020e4:	237f      	movs	r3, #127	; 0x7f
 80020e6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020e8:	2304      	movs	r3, #4
 80020ea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f0:	463b      	mov	r3, r7
 80020f2:	4619      	mov	r1, r3
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <MX_ADC1_Init+0xc0>)
 80020f6:	f001 fb91 	bl	800381c <HAL_ADC_ConfigChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8002100:	f000 fbd6 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000078 	.word	0x20000078
 8002110:	50040000 	.word	0x50040000
 8002114:	04300002 	.word	0x04300002

08002118 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800211e:	463b      	mov	r3, r7
 8002120:	2228      	movs	r2, #40	; 0x28
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f009 f9f7 	bl	800b518 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <MX_DAC1_Init+0x60>)
 800212c:	4a13      	ldr	r2, [pc, #76]	; (800217c <MX_DAC1_Init+0x64>)
 800212e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002130:	4811      	ldr	r0, [pc, #68]	; (8002178 <MX_DAC1_Init+0x60>)
 8002132:	f002 f99a 	bl	800446a <HAL_DAC_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800213c:	f000 fbb8 	bl	80028b0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002158:	463b      	mov	r3, r7
 800215a:	2200      	movs	r2, #0
 800215c:	4619      	mov	r1, r3
 800215e:	4806      	ldr	r0, [pc, #24]	; (8002178 <MX_DAC1_Init+0x60>)
 8002160:	f002 f9a6 	bl	80044b0 <HAL_DAC_ConfigChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800216a:	f000 fba1 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	3728      	adds	r7, #40	; 0x28
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000140 	.word	0x20000140
 800217c:	40007400 	.word	0x40007400

08002180 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002184:	4b22      	ldr	r3, [pc, #136]	; (8002210 <MX_LPUART1_UART_Init+0x90>)
 8002186:	4a23      	ldr	r2, [pc, #140]	; (8002214 <MX_LPUART1_UART_Init+0x94>)
 8002188:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800218a:	4b21      	ldr	r3, [pc, #132]	; (8002210 <MX_LPUART1_UART_Init+0x90>)
 800218c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002190:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002192:	4b1f      	ldr	r3, [pc, #124]	; (8002210 <MX_LPUART1_UART_Init+0x90>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002198:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <MX_LPUART1_UART_Init+0x90>)
 800219a:	2200      	movs	r2, #0
 800219c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <MX_LPUART1_UART_Init+0x90>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80021a4:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <MX_LPUART1_UART_Init+0x90>)
 80021a6:	220c      	movs	r2, #12
 80021a8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <MX_LPUART1_UART_Init+0x90>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021b0:	4b17      	ldr	r3, [pc, #92]	; (8002210 <MX_LPUART1_UART_Init+0x90>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <MX_LPUART1_UART_Init+0x90>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021bc:	4b14      	ldr	r3, [pc, #80]	; (8002210 <MX_LPUART1_UART_Init+0x90>)
 80021be:	2200      	movs	r2, #0
 80021c0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80021c2:	4b13      	ldr	r3, [pc, #76]	; (8002210 <MX_LPUART1_UART_Init+0x90>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80021c8:	4811      	ldr	r0, [pc, #68]	; (8002210 <MX_LPUART1_UART_Init+0x90>)
 80021ca:	f007 fa05 	bl	80095d8 <HAL_UART_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80021d4:	f000 fb6c 	bl	80028b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021d8:	2100      	movs	r1, #0
 80021da:	480d      	ldr	r0, [pc, #52]	; (8002210 <MX_LPUART1_UART_Init+0x90>)
 80021dc:	f007 ff9a 	bl	800a114 <HAL_UARTEx_SetTxFifoThreshold>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80021e6:	f000 fb63 	bl	80028b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021ea:	2100      	movs	r1, #0
 80021ec:	4808      	ldr	r0, [pc, #32]	; (8002210 <MX_LPUART1_UART_Init+0x90>)
 80021ee:	f007 ffcf 	bl	800a190 <HAL_UARTEx_SetRxFifoThreshold>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80021f8:	f000 fb5a 	bl	80028b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80021fc:	4804      	ldr	r0, [pc, #16]	; (8002210 <MX_LPUART1_UART_Init+0x90>)
 80021fe:	f007 ff50 	bl	800a0a2 <HAL_UARTEx_DisableFifoMode>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002208:	f000 fb52 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000154 	.word	0x20000154
 8002214:	40008000 	.word	0x40008000

08002218 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <MX_SAI1_Init+0x60>)
 800221e:	4a17      	ldr	r2, [pc, #92]	; (800227c <MX_SAI1_Init+0x64>)
 8002220:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <MX_SAI1_Init+0x60>)
 8002224:	2200      	movs	r2, #0
 8002226:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002228:	4b13      	ldr	r3, [pc, #76]	; (8002278 <MX_SAI1_Init+0x60>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800222e:	4b12      	ldr	r3, [pc, #72]	; (8002278 <MX_SAI1_Init+0x60>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002234:	4b10      	ldr	r3, [pc, #64]	; (8002278 <MX_SAI1_Init+0x60>)
 8002236:	2200      	movs	r2, #0
 8002238:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800223a:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <MX_SAI1_Init+0x60>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <MX_SAI1_Init+0x60>)
 8002242:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <MX_SAI1_Init+0x68>)
 8002244:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <MX_SAI1_Init+0x60>)
 8002248:	2200      	movs	r2, #0
 800224a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800224c:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <MX_SAI1_Init+0x60>)
 800224e:	2200      	movs	r2, #0
 8002250:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <MX_SAI1_Init+0x60>)
 8002254:	2200      	movs	r2, #0
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <MX_SAI1_Init+0x60>)
 800225a:	2200      	movs	r2, #0
 800225c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800225e:	2302      	movs	r3, #2
 8002260:	2200      	movs	r2, #0
 8002262:	2100      	movs	r1, #0
 8002264:	4804      	ldr	r0, [pc, #16]	; (8002278 <MX_SAI1_Init+0x60>)
 8002266:	f005 fb83 	bl	8007970 <HAL_SAI_InitProtocol>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 8002270:	f000 fb1e 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	200001e8 	.word	0x200001e8
 800227c:	40015404 	.word	0x40015404
 8002280:	0002ee00 	.word	0x0002ee00

08002284 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <MX_SPI1_Init+0x74>)
 800228a:	4a1c      	ldr	r2, [pc, #112]	; (80022fc <MX_SPI1_Init+0x78>)
 800228c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800228e:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <MX_SPI1_Init+0x74>)
 8002290:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002294:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <MX_SPI1_Init+0x74>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <MX_SPI1_Init+0x74>)
 800229e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022aa:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022ba:	2228      	movs	r2, #40	; 0x28
 80022bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022d2:	2207      	movs	r2, #7
 80022d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022d8:	2200      	movs	r2, #0
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022de:	2208      	movs	r2, #8
 80022e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022e2:	4805      	ldr	r0, [pc, #20]	; (80022f8 <MX_SPI1_Init+0x74>)
 80022e4:	f005 fec2 	bl	800806c <HAL_SPI_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80022ee:	f000 fadf 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	2000027c 	.word	0x2000027c
 80022fc:	40013000 	.word	0x40013000

08002300 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b09a      	sub	sp, #104	; 0x68
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002306:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002314:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002320:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
 8002330:	615a      	str	r2, [r3, #20]
 8002332:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	222c      	movs	r2, #44	; 0x2c
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f009 f8ec 	bl	800b518 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002340:	4b43      	ldr	r3, [pc, #268]	; (8002450 <MX_TIM1_Init+0x150>)
 8002342:	4a44      	ldr	r2, [pc, #272]	; (8002454 <MX_TIM1_Init+0x154>)
 8002344:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 194;
 8002346:	4b42      	ldr	r3, [pc, #264]	; (8002450 <MX_TIM1_Init+0x150>)
 8002348:	22c2      	movs	r2, #194	; 0xc2
 800234a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234c:	4b40      	ldr	r3, [pc, #256]	; (8002450 <MX_TIM1_Init+0x150>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8002352:	4b3f      	ldr	r3, [pc, #252]	; (8002450 <MX_TIM1_Init+0x150>)
 8002354:	2209      	movs	r2, #9
 8002356:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002358:	4b3d      	ldr	r3, [pc, #244]	; (8002450 <MX_TIM1_Init+0x150>)
 800235a:	2200      	movs	r2, #0
 800235c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800235e:	4b3c      	ldr	r3, [pc, #240]	; (8002450 <MX_TIM1_Init+0x150>)
 8002360:	2200      	movs	r2, #0
 8002362:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002364:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <MX_TIM1_Init+0x150>)
 8002366:	2200      	movs	r2, #0
 8002368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800236a:	4839      	ldr	r0, [pc, #228]	; (8002450 <MX_TIM1_Init+0x150>)
 800236c:	f005 ff21 	bl	80081b2 <HAL_TIM_Base_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002376:	f000 fa9b 	bl	80028b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800237a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800237e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002380:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002384:	4619      	mov	r1, r3
 8002386:	4832      	ldr	r0, [pc, #200]	; (8002450 <MX_TIM1_Init+0x150>)
 8002388:	f006 fb26 	bl	80089d8 <HAL_TIM_ConfigClockSource>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002392:	f000 fa8d 	bl	80028b0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002396:	482e      	ldr	r0, [pc, #184]	; (8002450 <MX_TIM1_Init+0x150>)
 8002398:	f005 ffd2 	bl	8008340 <HAL_TIM_OC_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80023a2:	f000 fa85 	bl	80028b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023a6:	2320      	movs	r3, #32
 80023a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023b6:	4619      	mov	r1, r3
 80023b8:	4825      	ldr	r0, [pc, #148]	; (8002450 <MX_TIM1_Init+0x150>)
 80023ba:	f007 f807 	bl	80093cc <HAL_TIMEx_MasterConfigSynchronization>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80023c4:	f000 fa74 	bl	80028b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80023c8:	2300      	movs	r3, #0
 80023ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5;
 80023cc:	2305      	movs	r3, #5
 80023ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023d0:	2300      	movs	r3, #0
 80023d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023d4:	2300      	movs	r3, #0
 80023d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023dc:	2300      	movs	r3, #0
 80023de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023e0:	2300      	movs	r3, #0
 80023e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023e8:	2200      	movs	r2, #0
 80023ea:	4619      	mov	r1, r3
 80023ec:	4818      	ldr	r0, [pc, #96]	; (8002450 <MX_TIM1_Init+0x150>)
 80023ee:	f006 f965 	bl	80086bc <HAL_TIM_OC_ConfigChannel>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80023f8:	f000 fa5a 	bl	80028b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002414:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800241e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002428:	2300      	movs	r3, #0
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800242c:	1d3b      	adds	r3, r7, #4
 800242e:	4619      	mov	r1, r3
 8002430:	4807      	ldr	r0, [pc, #28]	; (8002450 <MX_TIM1_Init+0x150>)
 8002432:	f007 f853 	bl	80094dc <HAL_TIMEx_ConfigBreakDeadTime>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800243c:	f000 fa38 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002440:	4803      	ldr	r0, [pc, #12]	; (8002450 <MX_TIM1_Init+0x150>)
 8002442:	f000 fc7f 	bl	8002d44 <HAL_TIM_MspPostInit>

}
 8002446:	bf00      	nop
 8002448:	3768      	adds	r7, #104	; 0x68
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200002e0 	.word	0x200002e0
 8002454:	40012c00 	.word	0x40012c00

08002458 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	; 0x28
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245e:	f107 031c 	add.w	r3, r7, #28
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800246a:	463b      	mov	r3, r7
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
 8002478:	615a      	str	r2, [r3, #20]
 800247a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800247c:	4b22      	ldr	r3, [pc, #136]	; (8002508 <MX_TIM4_Init+0xb0>)
 800247e:	4a23      	ldr	r2, [pc, #140]	; (800250c <MX_TIM4_Init+0xb4>)
 8002480:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8002482:	4b21      	ldr	r3, [pc, #132]	; (8002508 <MX_TIM4_Init+0xb0>)
 8002484:	2207      	movs	r2, #7
 8002486:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002488:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <MX_TIM4_Init+0xb0>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 800248e:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <MX_TIM4_Init+0xb0>)
 8002490:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002494:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <MX_TIM4_Init+0xb0>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <MX_TIM4_Init+0xb0>)
 800249e:	2200      	movs	r2, #0
 80024a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024a2:	4819      	ldr	r0, [pc, #100]	; (8002508 <MX_TIM4_Init+0xb0>)
 80024a4:	f005 ffad 	bl	8008402 <HAL_TIM_PWM_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80024ae:	f000 f9ff 	bl	80028b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024ba:	f107 031c 	add.w	r3, r7, #28
 80024be:	4619      	mov	r1, r3
 80024c0:	4811      	ldr	r0, [pc, #68]	; (8002508 <MX_TIM4_Init+0xb0>)
 80024c2:	f006 ff83 	bl	80093cc <HAL_TIMEx_MasterConfigSynchronization>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80024cc:	f000 f9f0 	bl	80028b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d0:	2360      	movs	r3, #96	; 0x60
 80024d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 80024d4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80024d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024e2:	463b      	mov	r3, r7
 80024e4:	2204      	movs	r2, #4
 80024e6:	4619      	mov	r1, r3
 80024e8:	4807      	ldr	r0, [pc, #28]	; (8002508 <MX_TIM4_Init+0xb0>)
 80024ea:	f006 f961 	bl	80087b0 <HAL_TIM_PWM_ConfigChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80024f4:	f000 f9dc 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80024f8:	4803      	ldr	r0, [pc, #12]	; (8002508 <MX_TIM4_Init+0xb0>)
 80024fa:	f000 fc23 	bl	8002d44 <HAL_TIM_MspPostInit>

}
 80024fe:	bf00      	nop
 8002500:	3728      	adds	r7, #40	; 0x28
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	2000032c 	.word	0x2000032c
 800250c:	40000800 	.word	0x40000800

08002510 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <MX_DMA_Init+0x50>)
 8002518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800251a:	4a11      	ldr	r2, [pc, #68]	; (8002560 <MX_DMA_Init+0x50>)
 800251c:	f043 0304 	orr.w	r3, r3, #4
 8002520:	6493      	str	r3, [r2, #72]	; 0x48
 8002522:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <MX_DMA_Init+0x50>)
 8002524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <MX_DMA_Init+0x50>)
 8002530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <MX_DMA_Init+0x50>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6493      	str	r3, [r2, #72]	; 0x48
 800253a:	4b09      	ldr	r3, [pc, #36]	; (8002560 <MX_DMA_Init+0x50>)
 800253c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	200b      	movs	r0, #11
 800254c:	f001 ff57 	bl	80043fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002550:	200b      	movs	r0, #11
 8002552:	f001 ff70 	bl	8004436 <HAL_NVIC_EnableIRQ>

}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000

08002564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08e      	sub	sp, #56	; 0x38
 8002568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
 8002578:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800257a:	4bb2      	ldr	r3, [pc, #712]	; (8002844 <MX_GPIO_Init+0x2e0>)
 800257c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257e:	4ab1      	ldr	r2, [pc, #708]	; (8002844 <MX_GPIO_Init+0x2e0>)
 8002580:	f043 0310 	orr.w	r3, r3, #16
 8002584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002586:	4baf      	ldr	r3, [pc, #700]	; (8002844 <MX_GPIO_Init+0x2e0>)
 8002588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	623b      	str	r3, [r7, #32]
 8002590:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002592:	4bac      	ldr	r3, [pc, #688]	; (8002844 <MX_GPIO_Init+0x2e0>)
 8002594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002596:	4aab      	ldr	r2, [pc, #684]	; (8002844 <MX_GPIO_Init+0x2e0>)
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800259e:	4ba9      	ldr	r3, [pc, #676]	; (8002844 <MX_GPIO_Init+0x2e0>)
 80025a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	61fb      	str	r3, [r7, #28]
 80025a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025aa:	4ba6      	ldr	r3, [pc, #664]	; (8002844 <MX_GPIO_Init+0x2e0>)
 80025ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ae:	4aa5      	ldr	r2, [pc, #660]	; (8002844 <MX_GPIO_Init+0x2e0>)
 80025b0:	f043 0320 	orr.w	r3, r3, #32
 80025b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025b6:	4ba3      	ldr	r3, [pc, #652]	; (8002844 <MX_GPIO_Init+0x2e0>)
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	f003 0320 	and.w	r3, r3, #32
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025c2:	4ba0      	ldr	r3, [pc, #640]	; (8002844 <MX_GPIO_Init+0x2e0>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	4a9f      	ldr	r2, [pc, #636]	; (8002844 <MX_GPIO_Init+0x2e0>)
 80025c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ce:	4b9d      	ldr	r3, [pc, #628]	; (8002844 <MX_GPIO_Init+0x2e0>)
 80025d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025da:	4b9a      	ldr	r3, [pc, #616]	; (8002844 <MX_GPIO_Init+0x2e0>)
 80025dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025de:	4a99      	ldr	r2, [pc, #612]	; (8002844 <MX_GPIO_Init+0x2e0>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025e6:	4b97      	ldr	r3, [pc, #604]	; (8002844 <MX_GPIO_Init+0x2e0>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f2:	4b94      	ldr	r3, [pc, #592]	; (8002844 <MX_GPIO_Init+0x2e0>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f6:	4a93      	ldr	r2, [pc, #588]	; (8002844 <MX_GPIO_Init+0x2e0>)
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025fe:	4b91      	ldr	r3, [pc, #580]	; (8002844 <MX_GPIO_Init+0x2e0>)
 8002600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800260a:	4b8e      	ldr	r3, [pc, #568]	; (8002844 <MX_GPIO_Init+0x2e0>)
 800260c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260e:	4a8d      	ldr	r2, [pc, #564]	; (8002844 <MX_GPIO_Init+0x2e0>)
 8002610:	f043 0308 	orr.w	r3, r3, #8
 8002614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002616:	4b8b      	ldr	r3, [pc, #556]	; (8002844 <MX_GPIO_Init+0x2e0>)
 8002618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002622:	4b88      	ldr	r3, [pc, #544]	; (8002844 <MX_GPIO_Init+0x2e0>)
 8002624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002626:	4a87      	ldr	r2, [pc, #540]	; (8002844 <MX_GPIO_Init+0x2e0>)
 8002628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800262c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800262e:	4b85      	ldr	r3, [pc, #532]	; (8002844 <MX_GPIO_Init+0x2e0>)
 8002630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800263a:	f002 fd65 	bl	8005108 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	2107      	movs	r1, #7
 8002642:	4881      	ldr	r0, [pc, #516]	; (8002848 <MX_GPIO_Init+0x2e4>)
 8002644:	f002 fc84 	bl	8004f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002648:	2307      	movs	r3, #7
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800264c:	2312      	movs	r3, #18
 800264e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002654:	2303      	movs	r3, #3
 8002656:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002658:	2304      	movs	r3, #4
 800265a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800265c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002660:	4619      	mov	r1, r3
 8002662:	487a      	ldr	r0, [pc, #488]	; (800284c <MX_GPIO_Init+0x2e8>)
 8002664:	f002 fae2 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002668:	2301      	movs	r3, #1
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266c:	2302      	movs	r3, #2
 800266e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002674:	2300      	movs	r3, #0
 8002676:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002678:	2301      	movs	r3, #1
 800267a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002680:	4619      	mov	r1, r3
 8002682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002686:	f002 fad1 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800268a:	2307      	movs	r3, #7
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268e:	2301      	movs	r3, #1
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800269e:	4619      	mov	r1, r3
 80026a0:	4869      	ldr	r0, [pc, #420]	; (8002848 <MX_GPIO_Init+0x2e4>)
 80026a2:	f002 fac3 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ac:	2302      	movs	r3, #2
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b4:	2300      	movs	r3, #0
 80026b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026b8:	2301      	movs	r3, #1
 80026ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c0:	4619      	mov	r1, r3
 80026c2:	4861      	ldr	r0, [pc, #388]	; (8002848 <MX_GPIO_Init+0x2e4>)
 80026c4:	f002 fab2 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80026c8:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	2302      	movs	r3, #2
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d6:	2300      	movs	r3, #0
 80026d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80026da:	230d      	movs	r3, #13
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e2:	4619      	mov	r1, r3
 80026e4:	4858      	ldr	r0, [pc, #352]	; (8002848 <MX_GPIO_Init+0x2e4>)
 80026e6:	f002 faa1 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80026ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f8:	2300      	movs	r3, #0
 80026fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80026fc:	230e      	movs	r3, #14
 80026fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002704:	4619      	mov	r1, r3
 8002706:	4850      	ldr	r0, [pc, #320]	; (8002848 <MX_GPIO_Init+0x2e4>)
 8002708:	f002 fa90 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800270c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271a:	2303      	movs	r3, #3
 800271c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800271e:	2307      	movs	r3, #7
 8002720:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002726:	4619      	mov	r1, r3
 8002728:	4849      	ldr	r0, [pc, #292]	; (8002850 <MX_GPIO_Init+0x2ec>)
 800272a:	f002 fa7f 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800272e:	2340      	movs	r3, #64	; 0x40
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	2302      	movs	r3, #2
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2300      	movs	r3, #0
 800273c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800273e:	230d      	movs	r3, #13
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002746:	4619      	mov	r1, r3
 8002748:	4842      	ldr	r0, [pc, #264]	; (8002854 <MX_GPIO_Init+0x2f0>)
 800274a:	f002 fa6f 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	2302      	movs	r3, #2
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275a:	2300      	movs	r3, #0
 800275c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800275e:	2302      	movs	r3, #2
 8002760:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002766:	4619      	mov	r1, r3
 8002768:	483a      	ldr	r0, [pc, #232]	; (8002854 <MX_GPIO_Init+0x2f0>)
 800276a:	f002 fa5f 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800276e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277c:	2303      	movs	r3, #3
 800277e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002780:	230c      	movs	r3, #12
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002788:	4619      	mov	r1, r3
 800278a:	4832      	ldr	r0, [pc, #200]	; (8002854 <MX_GPIO_Init+0x2f0>)
 800278c:	f002 fa4e 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8002790:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80027a2:	230a      	movs	r3, #10
 80027a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027aa:	4619      	mov	r1, r3
 80027ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b0:	f002 fa3c 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ba:	2300      	movs	r3, #0
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c6:	4619      	mov	r1, r3
 80027c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027cc:	f002 fa2e 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027d0:	2301      	movs	r3, #1
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027dc:	2303      	movs	r3, #3
 80027de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80027e0:	2309      	movs	r3, #9
 80027e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e8:	4619      	mov	r1, r3
 80027ea:	4819      	ldr	r0, [pc, #100]	; (8002850 <MX_GPIO_Init+0x2ec>)
 80027ec:	f002 fa1e 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027f0:	2304      	movs	r3, #4
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fc:	2303      	movs	r3, #3
 80027fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002800:	230c      	movs	r3, #12
 8002802:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002808:	4619      	mov	r1, r3
 800280a:	4811      	ldr	r0, [pc, #68]	; (8002850 <MX_GPIO_Init+0x2ec>)
 800280c:	f002 fa0e 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002810:	2378      	movs	r3, #120	; 0x78
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002814:	2302      	movs	r3, #2
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281c:	2303      	movs	r3, #3
 800281e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002820:	2307      	movs	r3, #7
 8002822:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002828:	4619      	mov	r1, r3
 800282a:	4809      	ldr	r0, [pc, #36]	; (8002850 <MX_GPIO_Init+0x2ec>)
 800282c:	f002 f9fe 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002830:	2338      	movs	r3, #56	; 0x38
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283c:	2303      	movs	r3, #3
 800283e:	633b      	str	r3, [r7, #48]	; 0x30
 8002840:	e00a      	b.n	8002858 <MX_GPIO_Init+0x2f4>
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000
 8002848:	48000400 	.word	0x48000400
 800284c:	48001400 	.word	0x48001400
 8002850:	48000c00 	.word	0x48000c00
 8002854:	48000800 	.word	0x48000800
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002858:	2306      	movs	r3, #6
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002860:	4619      	mov	r1, r3
 8002862:	4812      	ldr	r0, [pc, #72]	; (80028ac <MX_GPIO_Init+0x348>)
 8002864:	f002 f9e2 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002868:	2340      	movs	r3, #64	; 0x40
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800286c:	2303      	movs	r3, #3
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002878:	4619      	mov	r1, r3
 800287a:	480c      	ldr	r0, [pc, #48]	; (80028ac <MX_GPIO_Init+0x348>)
 800287c:	f002 f9d6 	bl	8004c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002880:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002886:	2312      	movs	r3, #18
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288e:	2303      	movs	r3, #3
 8002890:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002892:	2304      	movs	r3, #4
 8002894:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800289a:	4619      	mov	r1, r3
 800289c:	4803      	ldr	r0, [pc, #12]	; (80028ac <MX_GPIO_Init+0x348>)
 800289e:	f002 f9c5 	bl	8004c2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028a2:	bf00      	nop
 80028a4:	3738      	adds	r7, #56	; 0x38
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	48000400 	.word	0x48000400

080028b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028b4:	b672      	cpsid	i
}
 80028b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <Error_Handler+0x8>
	...

080028bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c2:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <HAL_MspInit+0x44>)
 80028c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c6:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <HAL_MspInit+0x44>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6613      	str	r3, [r2, #96]	; 0x60
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_MspInit+0x44>)
 80028d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	607b      	str	r3, [r7, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_MspInit+0x44>)
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	4a08      	ldr	r2, [pc, #32]	; (8002900 <HAL_MspInit+0x44>)
 80028e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e4:	6593      	str	r3, [r2, #88]	; 0x58
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_MspInit+0x44>)
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000

08002904 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a37      	ldr	r2, [pc, #220]	; (8002a00 <HAL_ADC_MspInit+0xfc>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d168      	bne.n	80029f8 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002926:	4b37      	ldr	r3, [pc, #220]	; (8002a04 <HAL_ADC_MspInit+0x100>)
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	4a36      	ldr	r2, [pc, #216]	; (8002a04 <HAL_ADC_MspInit+0x100>)
 800292c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002932:	4b34      	ldr	r3, [pc, #208]	; (8002a04 <HAL_ADC_MspInit+0x100>)
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800293e:	4b31      	ldr	r3, [pc, #196]	; (8002a04 <HAL_ADC_MspInit+0x100>)
 8002940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002942:	4a30      	ldr	r2, [pc, #192]	; (8002a04 <HAL_ADC_MspInit+0x100>)
 8002944:	f043 0304 	orr.w	r3, r3, #4
 8002948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800294a:	4b2e      	ldr	r3, [pc, #184]	; (8002a04 <HAL_ADC_MspInit+0x100>)
 800294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002956:	4b2b      	ldr	r3, [pc, #172]	; (8002a04 <HAL_ADC_MspInit+0x100>)
 8002958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295a:	4a2a      	ldr	r2, [pc, #168]	; (8002a04 <HAL_ADC_MspInit+0x100>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <HAL_ADC_MspInit+0x100>)
 8002964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800296e:	233f      	movs	r3, #63	; 0x3f
 8002970:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002972:	230b      	movs	r3, #11
 8002974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	4619      	mov	r1, r3
 8002980:	4821      	ldr	r0, [pc, #132]	; (8002a08 <HAL_ADC_MspInit+0x104>)
 8002982:	f002 f953 	bl	8004c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002986:	230a      	movs	r3, #10
 8002988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800298a:	230b      	movs	r3, #11
 800298c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002992:	f107 0314 	add.w	r3, r7, #20
 8002996:	4619      	mov	r1, r3
 8002998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800299c:	f002 f946 	bl	8004c2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80029a0:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <HAL_ADC_MspInit+0x108>)
 80029a2:	4a1b      	ldr	r2, [pc, #108]	; (8002a10 <HAL_ADC_MspInit+0x10c>)
 80029a4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <HAL_ADC_MspInit+0x108>)
 80029a8:	2205      	movs	r2, #5
 80029aa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029ac:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <HAL_ADC_MspInit+0x108>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029b2:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <HAL_ADC_MspInit+0x108>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_ADC_MspInit+0x108>)
 80029ba:	2280      	movs	r2, #128	; 0x80
 80029bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029be:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <HAL_ADC_MspInit+0x108>)
 80029c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029c6:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_ADC_MspInit+0x108>)
 80029c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <HAL_ADC_MspInit+0x108>)
 80029d0:	2220      	movs	r2, #32
 80029d2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80029d4:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <HAL_ADC_MspInit+0x108>)
 80029d6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80029da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029dc:	480b      	ldr	r0, [pc, #44]	; (8002a0c <HAL_ADC_MspInit+0x108>)
 80029de:	f001 feb3 	bl	8004748 <HAL_DMA_Init>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 80029e8:	f7ff ff62 	bl	80028b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <HAL_ADC_MspInit+0x108>)
 80029f0:	651a      	str	r2, [r3, #80]	; 0x50
 80029f2:	4a06      	ldr	r2, [pc, #24]	; (8002a0c <HAL_ADC_MspInit+0x108>)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029f8:	bf00      	nop
 80029fa:	3728      	adds	r7, #40	; 0x28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	50040000 	.word	0x50040000
 8002a04:	40021000 	.word	0x40021000
 8002a08:	48000800 	.word	0x48000800
 8002a0c:	200000e0 	.word	0x200000e0
 8002a10:	40020008 	.word	0x40020008

08002a14 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a15      	ldr	r2, [pc, #84]	; (8002a88 <HAL_DAC_MspInit+0x74>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d124      	bne.n	8002a80 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <HAL_DAC_MspInit+0x78>)
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <HAL_DAC_MspInit+0x78>)
 8002a3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a40:	6593      	str	r3, [r2, #88]	; 0x58
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <HAL_DAC_MspInit+0x78>)
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4e:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <HAL_DAC_MspInit+0x78>)
 8002a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a52:	4a0e      	ldr	r2, [pc, #56]	; (8002a8c <HAL_DAC_MspInit+0x78>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <HAL_DAC_MspInit+0x78>)
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a66:	2310      	movs	r3, #16
 8002a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a72:	f107 0314 	add.w	r3, r7, #20
 8002a76:	4619      	mov	r1, r3
 8002a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a7c:	f002 f8d6 	bl	8004c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002a80:	bf00      	nop
 8002a82:	3728      	adds	r7, #40	; 0x28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40007400 	.word	0x40007400
 8002a8c:	40021000 	.word	0x40021000

08002a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b0ae      	sub	sp, #184	; 0xb8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002aa8:	f107 0310 	add.w	r3, r7, #16
 8002aac:	2294      	movs	r2, #148	; 0x94
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f008 fd31 	bl	800b518 <memset>
  if(huart->Instance==LPUART1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a22      	ldr	r2, [pc, #136]	; (8002b44 <HAL_UART_MspInit+0xb4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d13d      	bne.n	8002b3c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002ac0:	2320      	movs	r3, #32
 8002ac2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ac8:	f107 0310 	add.w	r3, r7, #16
 8002acc:	4618      	mov	r0, r3
 8002ace:	f003 fa03 	bl	8005ed8 <HAL_RCCEx_PeriphCLKConfig>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ad8:	f7ff feea 	bl	80028b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002adc:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <HAL_UART_MspInit+0xb8>)
 8002ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae0:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <HAL_UART_MspInit+0xb8>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002ae8:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <HAL_UART_MspInit+0xb8>)
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002af4:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <HAL_UART_MspInit+0xb8>)
 8002af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af8:	4a13      	ldr	r2, [pc, #76]	; (8002b48 <HAL_UART_MspInit+0xb8>)
 8002afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b00:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <HAL_UART_MspInit+0xb8>)
 8002b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8002b0c:	f002 fafc 	bl	8005108 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002b10:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b24:	2303      	movs	r3, #3
 8002b26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b34:	4619      	mov	r1, r3
 8002b36:	4805      	ldr	r0, [pc, #20]	; (8002b4c <HAL_UART_MspInit+0xbc>)
 8002b38:	f002 f878 	bl	8004c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002b3c:	bf00      	nop
 8002b3e:	37b8      	adds	r7, #184	; 0xb8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40008000 	.word	0x40008000
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	48001800 	.word	0x48001800

08002b50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a17      	ldr	r2, [pc, #92]	; (8002bcc <HAL_SPI_MspInit+0x7c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d128      	bne.n	8002bc4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b72:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <HAL_SPI_MspInit+0x80>)
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	4a16      	ldr	r2, [pc, #88]	; (8002bd0 <HAL_SPI_MspInit+0x80>)
 8002b78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b7c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b7e:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <HAL_SPI_MspInit+0x80>)
 8002b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8a:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_SPI_MspInit+0x80>)
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8e:	4a10      	ldr	r2, [pc, #64]	; (8002bd0 <HAL_SPI_MspInit+0x80>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <HAL_SPI_MspInit+0x80>)
 8002b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ba2:	23e0      	movs	r3, #224	; 0xe0
 8002ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bb2:	2305      	movs	r3, #5
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bc0:	f002 f834 	bl	8004c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002bc4:	bf00      	nop
 8002bc6:	3728      	adds	r7, #40	; 0x28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40013000 	.word	0x40013000
 8002bd0:	40021000 	.word	0x40021000

08002bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a20      	ldr	r2, [pc, #128]	; (8002c74 <HAL_TIM_Base_MspInit+0xa0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d139      	bne.n	8002c6a <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bf6:	4b20      	ldr	r3, [pc, #128]	; (8002c78 <HAL_TIM_Base_MspInit+0xa4>)
 8002bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfa:	4a1f      	ldr	r2, [pc, #124]	; (8002c78 <HAL_TIM_Base_MspInit+0xa4>)
 8002bfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c00:	6613      	str	r3, [r2, #96]	; 0x60
 8002c02:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_TIM_Base_MspInit+0xa4>)
 8002c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c0e:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <HAL_TIM_Base_MspInit+0xa4>)
 8002c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c12:	4a19      	ldr	r2, [pc, #100]	; (8002c78 <HAL_TIM_Base_MspInit+0xa4>)
 8002c14:	f043 0310 	orr.w	r3, r3, #16
 8002c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c1a:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <HAL_TIM_Base_MspInit+0xa4>)
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8002c26:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c34:	2300      	movs	r3, #0
 8002c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	4619      	mov	r1, r3
 8002c42:	480e      	ldr	r0, [pc, #56]	; (8002c7c <HAL_TIM_Base_MspInit+0xa8>)
 8002c44:	f001 fff2 	bl	8004c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002c48:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c56:	2300      	movs	r3, #0
 8002c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c5e:	f107 0314 	add.w	r3, r7, #20
 8002c62:	4619      	mov	r1, r3
 8002c64:	4805      	ldr	r0, [pc, #20]	; (8002c7c <HAL_TIM_Base_MspInit+0xa8>)
 8002c66:	f001 ffe1 	bl	8004c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002c6a:	bf00      	nop
 8002c6c:	3728      	adds	r7, #40	; 0x28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40012c00 	.word	0x40012c00
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	48001000 	.word	0x48001000

08002c80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	; 0x28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM4)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a25      	ldr	r2, [pc, #148]	; (8002d34 <HAL_TIM_PWM_MspInit+0xb4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d144      	bne.n	8002d2c <HAL_TIM_PWM_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ca2:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <HAL_TIM_PWM_MspInit+0xb8>)
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca6:	4a24      	ldr	r2, [pc, #144]	; (8002d38 <HAL_TIM_PWM_MspInit+0xb8>)
 8002ca8:	f043 0304 	orr.w	r3, r3, #4
 8002cac:	6593      	str	r3, [r2, #88]	; 0x58
 8002cae:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <HAL_TIM_PWM_MspInit+0xb8>)
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cba:	4b1f      	ldr	r3, [pc, #124]	; (8002d38 <HAL_TIM_PWM_MspInit+0xb8>)
 8002cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cbe:	4a1e      	ldr	r2, [pc, #120]	; (8002d38 <HAL_TIM_PWM_MspInit+0xb8>)
 8002cc0:	f043 0308 	orr.w	r3, r3, #8
 8002cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cc6:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <HAL_TIM_PWM_MspInit+0xb8>)
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cd2:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <HAL_TIM_PWM_MspInit+0xb8>)
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd6:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <HAL_TIM_PWM_MspInit+0xb8>)
 8002cd8:	f043 0310 	orr.w	r3, r3, #16
 8002cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cde:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <HAL_TIM_PWM_MspInit+0xb8>)
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002cea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	4619      	mov	r1, r3
 8002d06:	480d      	ldr	r0, [pc, #52]	; (8002d3c <HAL_TIM_PWM_MspInit+0xbc>)
 8002d08:	f001 ff90 	bl	8004c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2302      	movs	r3, #2
 8002d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	4619      	mov	r1, r3
 8002d26:	4806      	ldr	r0, [pc, #24]	; (8002d40 <HAL_TIM_PWM_MspInit+0xc0>)
 8002d28:	f001 ff80 	bl	8004c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d2c:	bf00      	nop
 8002d2e:	3728      	adds	r7, #40	; 0x28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40000800 	.word	0x40000800
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	48000c00 	.word	0x48000c00
 8002d40:	48001000 	.word	0x48001000

08002d44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a23      	ldr	r2, [pc, #140]	; (8002df0 <HAL_TIM_MspPostInit+0xac>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d11d      	bne.n	8002da2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d66:	4b23      	ldr	r3, [pc, #140]	; (8002df4 <HAL_TIM_MspPostInit+0xb0>)
 8002d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6a:	4a22      	ldr	r2, [pc, #136]	; (8002df4 <HAL_TIM_MspPostInit+0xb0>)
 8002d6c:	f043 0310 	orr.w	r3, r3, #16
 8002d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d72:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <HAL_TIM_MspPostInit+0xb0>)
 8002d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE10     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 8002d7e:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8002d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d90:	2301      	movs	r3, #1
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4817      	ldr	r0, [pc, #92]	; (8002df8 <HAL_TIM_MspPostInit+0xb4>)
 8002d9c:	f001 ff46 	bl	8004c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002da0:	e021      	b.n	8002de6 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a15      	ldr	r2, [pc, #84]	; (8002dfc <HAL_TIM_MspPostInit+0xb8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d11c      	bne.n	8002de6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_TIM_MspPostInit+0xb0>)
 8002dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db0:	4a10      	ldr	r2, [pc, #64]	; (8002df4 <HAL_TIM_MspPostInit+0xb0>)
 8002db2:	f043 0308 	orr.w	r3, r3, #8
 8002db6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002db8:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <HAL_TIM_MspPostInit+0xb0>)
 8002dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002dc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dda:	f107 0314 	add.w	r3, r7, #20
 8002dde:	4619      	mov	r1, r3
 8002de0:	4807      	ldr	r0, [pc, #28]	; (8002e00 <HAL_TIM_MspPostInit+0xbc>)
 8002de2:	f001 ff23 	bl	8004c2c <HAL_GPIO_Init>
}
 8002de6:	bf00      	nop
 8002de8:	3728      	adds	r7, #40	; 0x28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40012c00 	.word	0x40012c00
 8002df4:	40021000 	.word	0x40021000
 8002df8:	48001000 	.word	0x48001000
 8002dfc:	40000800 	.word	0x40000800
 8002e00:	48000c00 	.word	0x48000c00

08002e04 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <HAL_SAI_MspInit+0x84>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d134      	bne.n	8002e80 <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002e16:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <HAL_SAI_MspInit+0x88>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10b      	bne.n	8002e36 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002e1e:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <HAL_SAI_MspInit+0x8c>)
 8002e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e22:	4a1b      	ldr	r2, [pc, #108]	; (8002e90 <HAL_SAI_MspInit+0x8c>)
 8002e24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e28:	6613      	str	r3, [r2, #96]	; 0x60
 8002e2a:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_SAI_MspInit+0x8c>)
 8002e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <HAL_SAI_MspInit+0x88>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	4a13      	ldr	r2, [pc, #76]	; (8002e8c <HAL_SAI_MspInit+0x88>)
 8002e3e:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PF7     ------> SAI1_MCLK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002e40:	237c      	movs	r3, #124	; 0x7c
 8002e42:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002e50:	230d      	movs	r3, #13
 8002e52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e54:	f107 030c 	add.w	r3, r7, #12
 8002e58:	4619      	mov	r1, r3
 8002e5a:	480e      	ldr	r0, [pc, #56]	; (8002e94 <HAL_SAI_MspInit+0x90>)
 8002e5c:	f001 fee6 	bl	8004c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e64:	2302      	movs	r3, #2
 8002e66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002e70:	230d      	movs	r3, #13
 8002e72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e74:	f107 030c 	add.w	r3, r7, #12
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4807      	ldr	r0, [pc, #28]	; (8002e98 <HAL_SAI_MspInit+0x94>)
 8002e7c:	f001 fed6 	bl	8004c2c <HAL_GPIO_Init>

    }
}
 8002e80:	bf00      	nop
 8002e82:	3720      	adds	r7, #32
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40015404 	.word	0x40015404
 8002e8c:	2000037c 	.word	0x2000037c
 8002e90:	40021000 	.word	0x40021000
 8002e94:	48001000 	.word	0x48001000
 8002e98:	48001400 	.word	0x48001400

08002e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ea0:	e7fe      	b.n	8002ea0 <NMI_Handler+0x4>

08002ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea6:	e7fe      	b.n	8002ea6 <HardFault_Handler+0x4>

08002ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eac:	e7fe      	b.n	8002eac <MemManage_Handler+0x4>

08002eae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eb2:	e7fe      	b.n	8002eb2 <BusFault_Handler+0x4>

08002eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eb8:	e7fe      	b.n	8002eb8 <UsageFault_Handler+0x4>

08002eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ee8:	f000 f89c 	bl	8003024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eec:	bf00      	nop
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ef4:	4802      	ldr	r0, [pc, #8]	; (8002f00 <DMA1_Channel1_IRQHandler+0x10>)
 8002ef6:	f001 fd4a 	bl	800498e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	200000e0 	.word	0x200000e0

08002f04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <SystemInit+0x20>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <SystemInit+0x20>)
 8002f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f2c:	f7ff ffea 	bl	8002f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f30:	480c      	ldr	r0, [pc, #48]	; (8002f64 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f32:	490d      	ldr	r1, [pc, #52]	; (8002f68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f34:	4a0d      	ldr	r2, [pc, #52]	; (8002f6c <LoopForever+0xe>)
  movs r3, #0
 8002f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f38:	e002      	b.n	8002f40 <LoopCopyDataInit>

08002f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3e:	3304      	adds	r3, #4

08002f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f44:	d3f9      	bcc.n	8002f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f46:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f48:	4c0a      	ldr	r4, [pc, #40]	; (8002f74 <LoopForever+0x16>)
  movs r3, #0
 8002f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f4c:	e001      	b.n	8002f52 <LoopFillZerobss>

08002f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f50:	3204      	adds	r2, #4

08002f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f54:	d3fb      	bcc.n	8002f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f56:	f008 faed 	bl	800b534 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f5a:	f7fe f86d 	bl	8001038 <main>

08002f5e <LoopForever>:

LoopForever:
    b LoopForever
 8002f5e:	e7fe      	b.n	8002f5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f60:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f68:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002f6c:	0801f5d4 	.word	0x0801f5d4
  ldr r2, =_sbss
 8002f70:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002f74:	200004bc 	.word	0x200004bc

08002f78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f78:	e7fe      	b.n	8002f78 <ADC1_IRQHandler>

08002f7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f84:	2003      	movs	r0, #3
 8002f86:	f001 fa2f 	bl	80043e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f000 f80e 	bl	8002fac <HAL_InitTick>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	71fb      	strb	r3, [r7, #7]
 8002f9a:	e001      	b.n	8002fa0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f9c:	f7ff fc8e 	bl	80028bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002fb8:	4b17      	ldr	r3, [pc, #92]	; (8003018 <HAL_InitTick+0x6c>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d023      	beq.n	8003008 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002fc0:	4b16      	ldr	r3, [pc, #88]	; (800301c <HAL_InitTick+0x70>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b14      	ldr	r3, [pc, #80]	; (8003018 <HAL_InitTick+0x6c>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f001 fa3b 	bl	8004452 <HAL_SYSTICK_Config>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b0f      	cmp	r3, #15
 8002fe6:	d809      	bhi.n	8002ffc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff0:	f001 fa05 	bl	80043fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ff4:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <HAL_InitTick+0x74>)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e007      	b.n	800300c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
 8003000:	e004      	b.n	800300c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
 8003006:	e001      	b.n	800300c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800300c:	7bfb      	ldrb	r3, [r7, #15]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000008 	.word	0x20000008
 800301c:	20000000 	.word	0x20000000
 8003020:	20000004 	.word	0x20000004

08003024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_IncTick+0x20>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_IncTick+0x24>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4413      	add	r3, r2
 8003034:	4a04      	ldr	r2, [pc, #16]	; (8003048 <HAL_IncTick+0x24>)
 8003036:	6013      	str	r3, [r2, #0]
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000008 	.word	0x20000008
 8003048:	20000380 	.word	0x20000380

0800304c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return uwTick;
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_GetTick+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000380 	.word	0x20000380

08003064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800306c:	f7ff ffee 	bl	800304c <HAL_GetTick>
 8003070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d005      	beq.n	800308a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <HAL_Delay+0x44>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800308a:	bf00      	nop
 800308c:	f7ff ffde 	bl	800304c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	429a      	cmp	r2, r3
 800309a:	d8f7      	bhi.n	800308c <HAL_Delay+0x28>
  {
  }
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000008 	.word	0x20000008

080030ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	609a      	str	r2, [r3, #8]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	609a      	str	r2, [r3, #8]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3360      	adds	r3, #96	; 0x60
 8003126:	461a      	mov	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <LL_ADC_SetOffset+0x44>)
 8003136:	4013      	ands	r3, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	4313      	orrs	r3, r2
 8003144:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800314c:	bf00      	nop
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	03fff000 	.word	0x03fff000

0800315c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3360      	adds	r3, #96	; 0x60
 800316a:	461a      	mov	r2, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	3360      	adds	r3, #96	; 0x60
 8003198:	461a      	mov	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	431a      	orrs	r2, r3
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	615a      	str	r2, [r3, #20]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800320a:	b480      	push	{r7}
 800320c:	b087      	sub	sp, #28
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3330      	adds	r3, #48	; 0x30
 800321a:	461a      	mov	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	0a1b      	lsrs	r3, r3, #8
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	4413      	add	r3, r2
 8003228:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	211f      	movs	r1, #31
 8003236:	fa01 f303 	lsl.w	r3, r1, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	401a      	ands	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	0e9b      	lsrs	r3, r3, #26
 8003242:	f003 011f 	and.w	r1, r3, #31
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	fa01 f303 	lsl.w	r3, r1, r3
 8003250:	431a      	orrs	r2, r3
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003256:	bf00      	nop
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003262:	b480      	push	{r7}
 8003264:	b087      	sub	sp, #28
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3314      	adds	r3, #20
 8003272:	461a      	mov	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	0e5b      	lsrs	r3, r3, #25
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	4413      	add	r3, r2
 8003280:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	0d1b      	lsrs	r3, r3, #20
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	2107      	movs	r1, #7
 8003290:	fa01 f303 	lsl.w	r3, r1, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	401a      	ands	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	0d1b      	lsrs	r3, r3, #20
 800329c:	f003 031f 	and.w	r3, r3, #31
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	fa01 f303 	lsl.w	r3, r1, r3
 80032a6:	431a      	orrs	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80032ac:	bf00      	nop
 80032ae:	371c      	adds	r7, #28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d0:	43db      	mvns	r3, r3
 80032d2:	401a      	ands	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f003 0318 	and.w	r3, r3, #24
 80032da:	4908      	ldr	r1, [pc, #32]	; (80032fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80032dc:	40d9      	lsrs	r1, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	400b      	ands	r3, r1
 80032e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e6:	431a      	orrs	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80032ee:	bf00      	nop
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	0007ffff 	.word	0x0007ffff

08003300 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003310:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6093      	str	r3, [r2, #8]
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003338:	d101      	bne.n	800333e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800335c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003360:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003384:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003388:	d101      	bne.n	800338e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033b0:	f043 0201 	orr.w	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <LL_ADC_IsEnabled+0x18>
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <LL_ADC_IsEnabled+0x1a>
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033fe:	f043 0204 	orr.w	r2, r3, #4
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b04      	cmp	r3, #4
 8003424:	d101      	bne.n	800342a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b08      	cmp	r3, #8
 800344a:	d101      	bne.n	8003450 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
	...

08003460 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e129      	b.n	80036ce <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff fa3b 	bl	8002904 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff3f 	bl	8003324 <LL_ADC_IsDeepPowerDownEnabled>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d004      	beq.n	80034b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff ff25 	bl	8003300 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff ff5a 	bl	8003374 <LL_ADC_IsInternalRegulatorEnabled>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d115      	bne.n	80034f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff ff3e 	bl	800334c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034d0:	4b81      	ldr	r3, [pc, #516]	; (80036d8 <HAL_ADC_Init+0x278>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	099b      	lsrs	r3, r3, #6
 80034d6:	4a81      	ldr	r2, [pc, #516]	; (80036dc <HAL_ADC_Init+0x27c>)
 80034d8:	fba2 2303 	umull	r2, r3, r2, r3
 80034dc:	099b      	lsrs	r3, r3, #6
 80034de:	3301      	adds	r3, #1
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80034e4:	e002      	b.n	80034ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f9      	bne.n	80034e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff ff3c 	bl	8003374 <LL_ADC_IsInternalRegulatorEnabled>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10d      	bne.n	800351e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	f043 0210 	orr.w	r2, r3, #16
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003512:	f043 0201 	orr.w	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff ff75 	bl	8003412 <LL_ADC_REG_IsConversionOngoing>
 8003528:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 80c2 	bne.w	80036bc <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	f040 80be 	bne.w	80036bc <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003548:	f043 0202 	orr.w	r2, r3, #2
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff35 	bl	80033c4 <LL_ADC_IsEnabled>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10b      	bne.n	8003578 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003560:	485f      	ldr	r0, [pc, #380]	; (80036e0 <HAL_ADC_Init+0x280>)
 8003562:	f7ff ff2f 	bl	80033c4 <LL_ADC_IsEnabled>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d105      	bne.n	8003578 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4619      	mov	r1, r3
 8003572:	485c      	ldr	r0, [pc, #368]	; (80036e4 <HAL_ADC_Init+0x284>)
 8003574:	f7ff fd9a 	bl	80030ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	7e5b      	ldrb	r3, [r3, #25]
 800357c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003582:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003588:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800358e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003596:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d106      	bne.n	80035b4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	3b01      	subs	r3, #1
 80035ac:	045b      	lsls	r3, r3, #17
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d009      	beq.n	80035d0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	4b44      	ldr	r3, [pc, #272]	; (80036e8 <HAL_ADC_Init+0x288>)
 80035d8:	4013      	ands	r3, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	69b9      	ldr	r1, [r7, #24]
 80035e0:	430b      	orrs	r3, r1
 80035e2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ff25 	bl	8003438 <LL_ADC_INJ_IsConversionOngoing>
 80035ee:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d140      	bne.n	8003678 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d13d      	bne.n	8003678 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	7e1b      	ldrb	r3, [r3, #24]
 8003604:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003606:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800360e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800361e:	f023 0306 	bic.w	r3, r3, #6
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6812      	ldr	r2, [r2, #0]
 8003626:	69b9      	ldr	r1, [r7, #24]
 8003628:	430b      	orrs	r3, r1
 800362a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003632:	2b01      	cmp	r3, #1
 8003634:	d118      	bne.n	8003668 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003640:	f023 0304 	bic.w	r3, r3, #4
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800364c:	4311      	orrs	r1, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003652:	4311      	orrs	r1, r2
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003658:	430a      	orrs	r2, r1
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0201 	orr.w	r2, r2, #1
 8003664:	611a      	str	r2, [r3, #16]
 8003666:	e007      	b.n	8003678 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0201 	bic.w	r2, r2, #1
 8003676:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d10c      	bne.n	800369a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	f023 010f 	bic.w	r1, r3, #15
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	1e5a      	subs	r2, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
 8003698:	e007      	b.n	80036aa <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 020f 	bic.w	r2, r2, #15
 80036a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	f023 0303 	bic.w	r3, r3, #3
 80036b2:	f043 0201 	orr.w	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	659a      	str	r2, [r3, #88]	; 0x58
 80036ba:	e007      	b.n	80036cc <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c0:	f043 0210 	orr.w	r2, r3, #16
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80036cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3720      	adds	r7, #32
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000000 	.word	0x20000000
 80036dc:	053e2d63 	.word	0x053e2d63
 80036e0:	50040000 	.word	0x50040000
 80036e4:	50040300 	.word	0x50040300
 80036e8:	fff0c007 	.word	0xfff0c007

080036ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff fe88 	bl	8003412 <LL_ADC_REG_IsConversionOngoing>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d167      	bne.n	80037d8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_ADC_Start_DMA+0x2a>
 8003712:	2302      	movs	r3, #2
 8003714:	e063      	b.n	80037de <HAL_ADC_Start_DMA+0xf2>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fc78 	bl	8004014 <ADC_Enable>
 8003724:	4603      	mov	r3, r0
 8003726:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003728:	7dfb      	ldrb	r3, [r7, #23]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d14f      	bne.n	80037ce <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003732:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003736:	f023 0301 	bic.w	r3, r3, #1
 800373a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d006      	beq.n	800375c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003752:	f023 0206 	bic.w	r2, r3, #6
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	65da      	str	r2, [r3, #92]	; 0x5c
 800375a:	e002      	b.n	8003762 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003766:	4a20      	ldr	r2, [pc, #128]	; (80037e8 <HAL_ADC_Start_DMA+0xfc>)
 8003768:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376e:	4a1f      	ldr	r2, [pc, #124]	; (80037ec <HAL_ADC_Start_DMA+0x100>)
 8003770:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003776:	4a1e      	ldr	r2, [pc, #120]	; (80037f0 <HAL_ADC_Start_DMA+0x104>)
 8003778:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	221c      	movs	r2, #28
 8003780:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0210 	orr.w	r2, r2, #16
 8003798:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3340      	adds	r3, #64	; 0x40
 80037b4:	4619      	mov	r1, r3
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f001 f86d 	bl	8004898 <HAL_DMA_Start_IT>
 80037be:	4603      	mov	r3, r0
 80037c0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff fe0f 	bl	80033ea <LL_ADC_REG_StartConversion>
 80037cc:	e006      	b.n	80037dc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80037d6:	e001      	b.n	80037dc <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037d8:	2302      	movs	r3, #2
 80037da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	08004121 	.word	0x08004121
 80037ec:	080041f9 	.word	0x080041f9
 80037f0:	08004215 	.word	0x08004215

080037f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b0b6      	sub	sp, #216	; 0xd8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800382c:	2300      	movs	r3, #0
 800382e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_ADC_ConfigChannel+0x22>
 800383a:	2302      	movs	r3, #2
 800383c:	e3d5      	b.n	8003fea <HAL_ADC_ConfigChannel+0x7ce>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fde1 	bl	8003412 <LL_ADC_REG_IsConversionOngoing>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	f040 83ba 	bne.w	8003fcc <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b05      	cmp	r3, #5
 8003866:	d824      	bhi.n	80038b2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	3b02      	subs	r3, #2
 800386e:	2b03      	cmp	r3, #3
 8003870:	d81b      	bhi.n	80038aa <HAL_ADC_ConfigChannel+0x8e>
 8003872:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <HAL_ADC_ConfigChannel+0x5c>)
 8003874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003878:	08003889 	.word	0x08003889
 800387c:	08003891 	.word	0x08003891
 8003880:	08003899 	.word	0x08003899
 8003884:	080038a1 	.word	0x080038a1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003888:	230c      	movs	r3, #12
 800388a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800388e:	e010      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003890:	2312      	movs	r3, #18
 8003892:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003896:	e00c      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003898:	2318      	movs	r3, #24
 800389a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800389e:	e008      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80038a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80038a8:	e003      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80038aa:	2306      	movs	r3, #6
 80038ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80038b0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80038c0:	f7ff fca3 	bl	800320a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fda2 	bl	8003412 <LL_ADC_REG_IsConversionOngoing>
 80038ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fdae 	bl	8003438 <LL_ADC_INJ_IsConversionOngoing>
 80038dc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f040 81bf 	bne.w	8003c68 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f040 81ba 	bne.w	8003c68 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038fc:	d10f      	bne.n	800391e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2200      	movs	r2, #0
 8003908:	4619      	mov	r1, r3
 800390a:	f7ff fcaa 	bl	8003262 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff fc51 	bl	80031be <LL_ADC_SetSamplingTimeCommonConfig>
 800391c:	e00e      	b.n	800393c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6819      	ldr	r1, [r3, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	461a      	mov	r2, r3
 800392c:	f7ff fc99 	bl	8003262 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff fc41 	bl	80031be <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	08db      	lsrs	r3, r3, #3
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b04      	cmp	r3, #4
 800395c:	d00a      	beq.n	8003974 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6919      	ldr	r1, [r3, #16]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800396e:	f7ff fbd1 	bl	8003114 <LL_ADC_SetOffset>
 8003972:	e179      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2100      	movs	r1, #0
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fbee 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003980:	4603      	mov	r3, r0
 8003982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x184>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fbe3 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003996:	4603      	mov	r3, r0
 8003998:	0e9b      	lsrs	r3, r3, #26
 800399a:	f003 021f 	and.w	r2, r3, #31
 800399e:	e01e      	b.n	80039de <HAL_ADC_ConfigChannel+0x1c2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2100      	movs	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff fbd8 	bl	800315c <LL_ADC_GetOffsetChannel>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80039c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80039ce:	2320      	movs	r3, #32
 80039d0:	e004      	b.n	80039dc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80039d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d105      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x1da>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	0e9b      	lsrs	r3, r3, #26
 80039f0:	f003 031f 	and.w	r3, r3, #31
 80039f4:	e018      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x20c>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a02:	fa93 f3a3 	rbit	r3, r3
 8003a06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003a0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003a12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003a1a:	2320      	movs	r3, #32
 8003a1c:	e004      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003a1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d106      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2200      	movs	r2, #0
 8003a32:	2100      	movs	r1, #0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff fba7 	bl	8003188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2101      	movs	r1, #1
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff fb8b 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003a46:	4603      	mov	r3, r0
 8003a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x24a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2101      	movs	r1, #1
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fb80 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	0e9b      	lsrs	r3, r3, #26
 8003a60:	f003 021f 	and.w	r2, r3, #31
 8003a64:	e01e      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0x288>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fb75 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a7c:	fa93 f3a3 	rbit	r3, r3
 8003a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003a8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003a94:	2320      	movs	r3, #32
 8003a96:	e004      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003a98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a9c:	fab3 f383 	clz	r3, r3
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d105      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x2a0>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	0e9b      	lsrs	r3, r3, #26
 8003ab6:	f003 031f 	and.w	r3, r3, #31
 8003aba:	e018      	b.n	8003aee <HAL_ADC_ConfigChannel+0x2d2>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ac8:	fa93 f3a3 	rbit	r3, r3
 8003acc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003ad0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003ae0:	2320      	movs	r3, #32
 8003ae2:	e004      	b.n	8003aee <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ae8:	fab3 f383 	clz	r3, r3
 8003aec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d106      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2200      	movs	r2, #0
 8003af8:	2101      	movs	r1, #1
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff fb44 	bl	8003188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2102      	movs	r1, #2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff fb28 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10a      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x310>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2102      	movs	r1, #2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff fb1d 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003b22:	4603      	mov	r3, r0
 8003b24:	0e9b      	lsrs	r3, r3, #26
 8003b26:	f003 021f 	and.w	r2, r3, #31
 8003b2a:	e01e      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x34e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2102      	movs	r1, #2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff fb12 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003b4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003b5a:	2320      	movs	r3, #32
 8003b5c:	e004      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b62:	fab3 f383 	clz	r3, r3
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d105      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x366>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	0e9b      	lsrs	r3, r3, #26
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	e014      	b.n	8003bac <HAL_ADC_ConfigChannel+0x390>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b8a:	fa93 f3a3 	rbit	r3, r3
 8003b8e:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003b90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003b96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003b9e:	2320      	movs	r3, #32
 8003ba0:	e004      	b.n	8003bac <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003ba2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ba6:	fab3 f383 	clz	r3, r3
 8003baa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d106      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fae5 	bl	8003188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2103      	movs	r1, #3
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff fac9 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10a      	bne.n	8003bea <HAL_ADC_ConfigChannel+0x3ce>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2103      	movs	r1, #3
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fabe 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003be0:	4603      	mov	r3, r0
 8003be2:	0e9b      	lsrs	r3, r3, #26
 8003be4:	f003 021f 	and.w	r2, r3, #31
 8003be8:	e017      	b.n	8003c1a <HAL_ADC_ConfigChannel+0x3fe>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2103      	movs	r1, #3
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff fab3 	bl	800315c <LL_ADC_GetOffsetChannel>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bfc:	fa93 f3a3 	rbit	r3, r3
 8003c00:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c04:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003c0c:	2320      	movs	r3, #32
 8003c0e:	e003      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d105      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x416>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	0e9b      	lsrs	r3, r3, #26
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	e011      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x43a>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c42:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003c44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003c4a:	2320      	movs	r3, #32
 8003c4c:	e003      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003c4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c50:	fab3 f383 	clz	r3, r3
 8003c54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d106      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2103      	movs	r1, #3
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff fa90 	bl	8003188 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff fba9 	bl	80033c4 <LL_ADC_IsEnabled>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f040 813f 	bne.w	8003ef8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6819      	ldr	r1, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	461a      	mov	r2, r3
 8003c88:	f7ff fb16 	bl	80032b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4a8e      	ldr	r2, [pc, #568]	; (8003ecc <HAL_ADC_ConfigChannel+0x6b0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	f040 8130 	bne.w	8003ef8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10b      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x4a4>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	0e9b      	lsrs	r3, r3, #26
 8003cae:	3301      	adds	r3, #1
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	2b09      	cmp	r3, #9
 8003cb6:	bf94      	ite	ls
 8003cb8:	2301      	movls	r3, #1
 8003cba:	2300      	movhi	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	e019      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x4d8>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cc8:	fa93 f3a3 	rbit	r3, r3
 8003ccc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003cd8:	2320      	movs	r3, #32
 8003cda:	e003      	b.n	8003ce4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cde:	fab3 f383 	clz	r3, r3
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	2b09      	cmp	r3, #9
 8003cec:	bf94      	ite	ls
 8003cee:	2301      	movls	r3, #1
 8003cf0:	2300      	movhi	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d079      	beq.n	8003dec <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d107      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x4f8>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	0e9b      	lsrs	r3, r3, #26
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	069b      	lsls	r3, r3, #26
 8003d0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d12:	e015      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x524>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d24:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003d2c:	2320      	movs	r3, #32
 8003d2e:	e003      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d32:	fab3 f383 	clz	r3, r3
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	3301      	adds	r3, #1
 8003d3a:	069b      	lsls	r3, r3, #26
 8003d3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d109      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x544>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	0e9b      	lsrs	r3, r3, #26
 8003d52:	3301      	adds	r3, #1
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	2101      	movs	r1, #1
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	e017      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x574>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d68:	fa93 f3a3 	rbit	r3, r3
 8003d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d70:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003d78:	2320      	movs	r3, #32
 8003d7a:	e003      	b.n	8003d84 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d7e:	fab3 f383 	clz	r3, r3
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	3301      	adds	r3, #1
 8003d86:	f003 031f 	and.w	r3, r3, #31
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d90:	ea42 0103 	orr.w	r1, r2, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <HAL_ADC_ConfigChannel+0x59a>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	0e9b      	lsrs	r3, r3, #26
 8003da6:	3301      	adds	r3, #1
 8003da8:	f003 021f 	and.w	r2, r3, #31
 8003dac:	4613      	mov	r3, r2
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	4413      	add	r3, r2
 8003db2:	051b      	lsls	r3, r3, #20
 8003db4:	e018      	b.n	8003de8 <HAL_ADC_ConfigChannel+0x5cc>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003dce:	2320      	movs	r3, #32
 8003dd0:	e003      	b.n	8003dda <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd4:	fab3 f383 	clz	r3, r3
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	3301      	adds	r3, #1
 8003ddc:	f003 021f 	and.w	r2, r3, #31
 8003de0:	4613      	mov	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4413      	add	r3, r2
 8003de6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003de8:	430b      	orrs	r3, r1
 8003dea:	e080      	b.n	8003eee <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d107      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x5ec>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	0e9b      	lsrs	r3, r3, #26
 8003dfe:	3301      	adds	r3, #1
 8003e00:	069b      	lsls	r3, r3, #26
 8003e02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e06:	e015      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x618>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003e20:	2320      	movs	r3, #32
 8003e22:	e003      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	fab3 f383 	clz	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	069b      	lsls	r3, r3, #26
 8003e30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d109      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x638>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	0e9b      	lsrs	r3, r3, #26
 8003e46:	3301      	adds	r3, #1
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e52:	e017      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x668>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	fa93 f3a3 	rbit	r3, r3
 8003e60:	61bb      	str	r3, [r7, #24]
  return result;
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003e6c:	2320      	movs	r3, #32
 8003e6e:	e003      	b.n	8003e78 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	fab3 f383 	clz	r3, r3
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	3301      	adds	r3, #1
 8003e7a:	f003 031f 	and.w	r3, r3, #31
 8003e7e:	2101      	movs	r1, #1
 8003e80:	fa01 f303 	lsl.w	r3, r1, r3
 8003e84:	ea42 0103 	orr.w	r1, r2, r3
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10d      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x694>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	0e9b      	lsrs	r3, r3, #26
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	f003 021f 	and.w	r2, r3, #31
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3b1e      	subs	r3, #30
 8003ea8:	051b      	lsls	r3, r3, #20
 8003eaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003eae:	e01d      	b.n	8003eec <HAL_ADC_ConfigChannel+0x6d0>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	fa93 f3a3 	rbit	r3, r3
 8003ebc:	60fb      	str	r3, [r7, #12]
  return result;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003ec8:	2320      	movs	r3, #32
 8003eca:	e005      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x6bc>
 8003ecc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	fab3 f383 	clz	r3, r3
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	3301      	adds	r3, #1
 8003eda:	f003 021f 	and.w	r2, r3, #31
 8003ede:	4613      	mov	r3, r2
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3b1e      	subs	r3, #30
 8003ee6:	051b      	lsls	r3, r3, #20
 8003ee8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f7ff f9b5 	bl	8003262 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d06c      	beq.n	8003fde <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f04:	483c      	ldr	r0, [pc, #240]	; (8003ff8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003f06:	f7ff f8f7 	bl	80030f8 <LL_ADC_GetCommonPathInternalCh>
 8003f0a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a3a      	ldr	r2, [pc, #232]	; (8003ffc <HAL_ADC_ConfigChannel+0x7e0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d127      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d121      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a35      	ldr	r2, [pc, #212]	; (8004000 <HAL_ADC_ConfigChannel+0x7e4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d157      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f36:	4619      	mov	r1, r3
 8003f38:	482f      	ldr	r0, [pc, #188]	; (8003ff8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003f3a:	f7ff f8ca 	bl	80030d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f3e:	4b31      	ldr	r3, [pc, #196]	; (8004004 <HAL_ADC_ConfigChannel+0x7e8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	099b      	lsrs	r3, r3, #6
 8003f44:	4a30      	ldr	r2, [pc, #192]	; (8004008 <HAL_ADC_ConfigChannel+0x7ec>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	099b      	lsrs	r3, r3, #6
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	4613      	mov	r3, r2
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003f58:	e002      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f9      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f66:	e03a      	b.n	8003fde <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a27      	ldr	r2, [pc, #156]	; (800400c <HAL_ADC_ConfigChannel+0x7f0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d113      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10d      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1f      	ldr	r2, [pc, #124]	; (8004000 <HAL_ADC_ConfigChannel+0x7e4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d12a      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f90:	4619      	mov	r1, r3
 8003f92:	4819      	ldr	r0, [pc, #100]	; (8003ff8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003f94:	f7ff f89d 	bl	80030d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f98:	e021      	b.n	8003fde <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a1c      	ldr	r2, [pc, #112]	; (8004010 <HAL_ADC_ConfigChannel+0x7f4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d11c      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d116      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a12      	ldr	r2, [pc, #72]	; (8004000 <HAL_ADC_ConfigChannel+0x7e4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d111      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	480c      	ldr	r0, [pc, #48]	; (8003ff8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003fc6:	f7ff f884 	bl	80030d2 <LL_ADC_SetCommonPathInternalCh>
 8003fca:	e008      	b.n	8003fde <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	f043 0220 	orr.w	r2, r3, #32
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003fe6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	37d8      	adds	r7, #216	; 0xd8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	80080000 	.word	0x80080000
 8003ff8:	50040300 	.word	0x50040300
 8003ffc:	c7520000 	.word	0xc7520000
 8004000:	50040000 	.word	0x50040000
 8004004:	20000000 	.word	0x20000000
 8004008:	053e2d63 	.word	0x053e2d63
 800400c:	cb840000 	.word	0xcb840000
 8004010:	80000001 	.word	0x80000001

08004014 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800401c:	2300      	movs	r3, #0
 800401e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff f9cd 	bl	80033c4 <LL_ADC_IsEnabled>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d169      	bne.n	8004104 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	4b36      	ldr	r3, [pc, #216]	; (8004110 <ADC_Enable+0xfc>)
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00d      	beq.n	800405a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004042:	f043 0210 	orr.w	r2, r3, #16
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404e:	f043 0201 	orr.w	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e055      	b.n	8004106 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff f99c 	bl	800339c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004064:	482b      	ldr	r0, [pc, #172]	; (8004114 <ADC_Enable+0x100>)
 8004066:	f7ff f847 	bl	80030f8 <LL_ADC_GetCommonPathInternalCh>
 800406a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800406c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004070:	2b00      	cmp	r3, #0
 8004072:	d013      	beq.n	800409c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004074:	4b28      	ldr	r3, [pc, #160]	; (8004118 <ADC_Enable+0x104>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	099b      	lsrs	r3, r3, #6
 800407a:	4a28      	ldr	r2, [pc, #160]	; (800411c <ADC_Enable+0x108>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	099b      	lsrs	r3, r3, #6
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	4613      	mov	r3, r2
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800408e:	e002      	b.n	8004096 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	3b01      	subs	r3, #1
 8004094:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1f9      	bne.n	8004090 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800409c:	f7fe ffd6 	bl	800304c <HAL_GetTick>
 80040a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040a2:	e028      	b.n	80040f6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff f98b 	bl	80033c4 <LL_ADC_IsEnabled>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d104      	bne.n	80040be <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff f96f 	bl	800339c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040be:	f7fe ffc5 	bl	800304c <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d914      	bls.n	80040f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d00d      	beq.n	80040f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040de:	f043 0210 	orr.w	r2, r3, #16
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ea:	f043 0201 	orr.w	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e007      	b.n	8004106 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b01      	cmp	r3, #1
 8004102:	d1cf      	bne.n	80040a4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	8000003f 	.word	0x8000003f
 8004114:	50040300 	.word	0x50040300
 8004118:	20000000 	.word	0x20000000
 800411c:	053e2d63 	.word	0x053e2d63

08004120 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004136:	2b00      	cmp	r3, #0
 8004138:	d14b      	bne.n	80041d2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d021      	beq.n	8004198 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff f843 	bl	80031e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d032      	beq.n	80041ca <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d12b      	bne.n	80041ca <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d11f      	bne.n	80041ca <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	f043 0201 	orr.w	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	659a      	str	r2, [r3, #88]	; 0x58
 8004196:	e018      	b.n	80041ca <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d111      	bne.n	80041ca <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d105      	bne.n	80041ca <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c2:	f043 0201 	orr.w	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f7fc fe84 	bl	8000ed8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041d0:	e00e      	b.n	80041f0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f7ff fb12 	bl	8003808 <HAL_ADC_ErrorCallback>
}
 80041e4:	e004      	b.n	80041f0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	4798      	blx	r3
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f7ff faf4 	bl	80037f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004226:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004232:	f043 0204 	orr.w	r2, r3, #4
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f7ff fae4 	bl	8003808 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004258:	4b0c      	ldr	r3, [pc, #48]	; (800428c <__NVIC_SetPriorityGrouping+0x44>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004264:	4013      	ands	r3, r2
 8004266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800427a:	4a04      	ldr	r2, [pc, #16]	; (800428c <__NVIC_SetPriorityGrouping+0x44>)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	60d3      	str	r3, [r2, #12]
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	e000ed00 	.word	0xe000ed00

08004290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004294:	4b04      	ldr	r3, [pc, #16]	; (80042a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	0a1b      	lsrs	r3, r3, #8
 800429a:	f003 0307 	and.w	r3, r3, #7
}
 800429e:	4618      	mov	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	e000ed00 	.word	0xe000ed00

080042ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	db0b      	blt.n	80042d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042be:	79fb      	ldrb	r3, [r7, #7]
 80042c0:	f003 021f 	and.w	r2, r3, #31
 80042c4:	4907      	ldr	r1, [pc, #28]	; (80042e4 <__NVIC_EnableIRQ+0x38>)
 80042c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	2001      	movs	r0, #1
 80042ce:	fa00 f202 	lsl.w	r2, r0, r2
 80042d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	e000e100 	.word	0xe000e100

080042e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	6039      	str	r1, [r7, #0]
 80042f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	db0a      	blt.n	8004312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	490c      	ldr	r1, [pc, #48]	; (8004334 <__NVIC_SetPriority+0x4c>)
 8004302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004306:	0112      	lsls	r2, r2, #4
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	440b      	add	r3, r1
 800430c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004310:	e00a      	b.n	8004328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	b2da      	uxtb	r2, r3
 8004316:	4908      	ldr	r1, [pc, #32]	; (8004338 <__NVIC_SetPriority+0x50>)
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	3b04      	subs	r3, #4
 8004320:	0112      	lsls	r2, r2, #4
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	440b      	add	r3, r1
 8004326:	761a      	strb	r2, [r3, #24]
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	e000e100 	.word	0xe000e100
 8004338:	e000ed00 	.word	0xe000ed00

0800433c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800433c:	b480      	push	{r7}
 800433e:	b089      	sub	sp, #36	; 0x24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f1c3 0307 	rsb	r3, r3, #7
 8004356:	2b04      	cmp	r3, #4
 8004358:	bf28      	it	cs
 800435a:	2304      	movcs	r3, #4
 800435c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	3304      	adds	r3, #4
 8004362:	2b06      	cmp	r3, #6
 8004364:	d902      	bls.n	800436c <NVIC_EncodePriority+0x30>
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	3b03      	subs	r3, #3
 800436a:	e000      	b.n	800436e <NVIC_EncodePriority+0x32>
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004370:	f04f 32ff 	mov.w	r2, #4294967295
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43da      	mvns	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	401a      	ands	r2, r3
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004384:	f04f 31ff 	mov.w	r1, #4294967295
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	fa01 f303 	lsl.w	r3, r1, r3
 800438e:	43d9      	mvns	r1, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004394:	4313      	orrs	r3, r2
         );
}
 8004396:	4618      	mov	r0, r3
 8004398:	3724      	adds	r7, #36	; 0x24
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043b4:	d301      	bcc.n	80043ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043b6:	2301      	movs	r3, #1
 80043b8:	e00f      	b.n	80043da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ba:	4a0a      	ldr	r2, [pc, #40]	; (80043e4 <SysTick_Config+0x40>)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3b01      	subs	r3, #1
 80043c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043c2:	210f      	movs	r1, #15
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295
 80043c8:	f7ff ff8e 	bl	80042e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <SysTick_Config+0x40>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043d2:	4b04      	ldr	r3, [pc, #16]	; (80043e4 <SysTick_Config+0x40>)
 80043d4:	2207      	movs	r2, #7
 80043d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	e000e010 	.word	0xe000e010

080043e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff ff29 	bl	8004248 <__NVIC_SetPriorityGrouping>
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b086      	sub	sp, #24
 8004402:	af00      	add	r7, sp, #0
 8004404:	4603      	mov	r3, r0
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	607a      	str	r2, [r7, #4]
 800440a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004410:	f7ff ff3e 	bl	8004290 <__NVIC_GetPriorityGrouping>
 8004414:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	6978      	ldr	r0, [r7, #20]
 800441c:	f7ff ff8e 	bl	800433c <NVIC_EncodePriority>
 8004420:	4602      	mov	r2, r0
 8004422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004426:	4611      	mov	r1, r2
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff ff5d 	bl	80042e8 <__NVIC_SetPriority>
}
 800442e:	bf00      	nop
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	4603      	mov	r3, r0
 800443e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff ff31 	bl	80042ac <__NVIC_EnableIRQ>
}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff ffa2 	bl	80043a4 <SysTick_Config>
 8004460:	4603      	mov	r3, r0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b082      	sub	sp, #8
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e014      	b.n	80044a6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	791b      	ldrb	r3, [r3, #4]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d105      	bne.n	8004492 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7fe fac1 	bl	8002a14 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2202      	movs	r2, #2
 8004496:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	795b      	ldrb	r3, [r3, #5]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_DAC_ConfigChannel+0x1c>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e137      	b.n	800473c <HAL_DAC_ConfigChannel+0x28c>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2202      	movs	r2, #2
 80044d6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b04      	cmp	r3, #4
 80044de:	f040 8081 	bne.w	80045e4 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80044e2:	f7fe fdb3 	bl	800304c <HAL_GetTick>
 80044e6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d140      	bne.n	8004570 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80044ee:	e018      	b.n	8004522 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80044f0:	f7fe fdac 	bl	800304c <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d911      	bls.n	8004522 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f043 0208 	orr.w	r2, r3, #8
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2203      	movs	r2, #3
 800451c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e10c      	b.n	800473c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1df      	bne.n	80044f0 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8004530:	2001      	movs	r0, #1
 8004532:	f7fe fd97 	bl	8003064 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	69d2      	ldr	r2, [r2, #28]
 800453e:	641a      	str	r2, [r3, #64]	; 0x40
 8004540:	e023      	b.n	800458a <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004542:	f7fe fd83 	bl	800304c <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	d90f      	bls.n	8004570 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004556:	2b00      	cmp	r3, #0
 8004558:	da0a      	bge.n	8004570 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f043 0208 	orr.w	r2, r3, #8
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2203      	movs	r2, #3
 800456a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e0e5      	b.n	800473c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004576:	2b00      	cmp	r3, #0
 8004578:	dbe3      	blt.n	8004542 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800457a:	2001      	movs	r0, #1
 800457c:	f7fe fd72 	bl	8003064 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	69d2      	ldr	r2, [r2, #28]
 8004588:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800459a:	fa01 f303 	lsl.w	r3, r1, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	ea02 0103 	and.w	r1, r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	6a1a      	ldr	r2, [r3, #32]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f003 0310 	and.w	r3, r3, #16
 80045ae:	409a      	lsls	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	21ff      	movs	r1, #255	; 0xff
 80045c6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ca:	43db      	mvns	r3, r3
 80045cc:	ea02 0103 	and.w	r1, r2, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	409a      	lsls	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d11d      	bne.n	8004628 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f003 0310 	and.w	r3, r3, #16
 80045fa:	221f      	movs	r2, #31
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	43db      	mvns	r3, r3
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	4013      	ands	r3, r2
 8004606:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	4313      	orrs	r3, r2
 800461e:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462e:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f003 0310 	and.w	r3, r3, #16
 8004636:	2207      	movs	r2, #7
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	43db      	mvns	r3, r3
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	4013      	ands	r3, r2
 8004642:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	431a      	orrs	r2, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	4313      	orrs	r3, r2
 8004666:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6819      	ldr	r1, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	43da      	mvns	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	400a      	ands	r2, r1
 800468c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	f640 72fe 	movw	r2, #4094	; 0xffe
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	43db      	mvns	r3, r3
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	4013      	ands	r3, r2
 80046aa:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046cc:	d104      	bne.n	80046d8 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d4:	61fb      	str	r3, [r7, #28]
 80046d6:	e018      	b.n	800470a <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046e6:	61fb      	str	r3, [r7, #28]
 80046e8:	e00f      	b.n	800470a <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80046ea:	f001 fafd 	bl	8005ce8 <HAL_RCC_GetHCLKFreq>
 80046ee:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4a14      	ldr	r2, [pc, #80]	; (8004744 <HAL_DAC_ConfigChannel+0x294>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d904      	bls.n	8004702 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046fe:	61fb      	str	r3, [r7, #28]
 8004700:	e003      	b.n	800470a <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004708:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6819      	ldr	r1, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	22c0      	movs	r2, #192	; 0xc0
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43da      	mvns	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	400a      	ands	r2, r1
 800472c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2201      	movs	r2, #1
 8004732:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3720      	adds	r7, #32
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	04c4b400 	.word	0x04c4b400

08004748 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e08d      	b.n	8004876 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	4b47      	ldr	r3, [pc, #284]	; (8004880 <HAL_DMA_Init+0x138>)
 8004762:	429a      	cmp	r2, r3
 8004764:	d80f      	bhi.n	8004786 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	4b45      	ldr	r3, [pc, #276]	; (8004884 <HAL_DMA_Init+0x13c>)
 800476e:	4413      	add	r3, r2
 8004770:	4a45      	ldr	r2, [pc, #276]	; (8004888 <HAL_DMA_Init+0x140>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	091b      	lsrs	r3, r3, #4
 8004778:	009a      	lsls	r2, r3, #2
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a42      	ldr	r2, [pc, #264]	; (800488c <HAL_DMA_Init+0x144>)
 8004782:	641a      	str	r2, [r3, #64]	; 0x40
 8004784:	e00e      	b.n	80047a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	4b40      	ldr	r3, [pc, #256]	; (8004890 <HAL_DMA_Init+0x148>)
 800478e:	4413      	add	r3, r2
 8004790:	4a3d      	ldr	r2, [pc, #244]	; (8004888 <HAL_DMA_Init+0x140>)
 8004792:	fba2 2303 	umull	r2, r3, r2, r3
 8004796:	091b      	lsrs	r3, r3, #4
 8004798:	009a      	lsls	r2, r3, #2
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a3c      	ldr	r2, [pc, #240]	; (8004894 <HAL_DMA_Init+0x14c>)
 80047a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80047ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80047c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f9b6 	bl	8004b68 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004804:	d102      	bne.n	800480c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004820:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d010      	beq.n	800484c <HAL_DMA_Init+0x104>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b04      	cmp	r3, #4
 8004830:	d80c      	bhi.n	800484c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f9d6 	bl	8004be4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	e008      	b.n	800485e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40020407 	.word	0x40020407
 8004884:	bffdfff8 	.word	0xbffdfff8
 8004888:	cccccccd 	.word	0xcccccccd
 800488c:	40020000 	.word	0x40020000
 8004890:	bffdfbf8 	.word	0xbffdfbf8
 8004894:	40020400 	.word	0x40020400

08004898 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_DMA_Start_IT+0x20>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e066      	b.n	8004986 <HAL_DMA_Start_IT+0xee>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d155      	bne.n	8004978 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	68b9      	ldr	r1, [r7, #8]
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f8fb 	bl	8004aec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d008      	beq.n	8004910 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 020e 	orr.w	r2, r2, #14
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	e00f      	b.n	8004930 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0204 	bic.w	r2, r2, #4
 800491e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 020a 	orr.w	r2, r2, #10
 800492e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800494c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004964:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f042 0201 	orr.w	r2, r2, #1
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	e005      	b.n	8004984 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004980:	2302      	movs	r3, #2
 8004982:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004984:	7dfb      	ldrb	r3, [r7, #23]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049aa:	f003 031c 	and.w	r3, r3, #28
 80049ae:	2204      	movs	r2, #4
 80049b0:	409a      	lsls	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4013      	ands	r3, r2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d026      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x7a>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d021      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d107      	bne.n	80049e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0204 	bic.w	r2, r2, #4
 80049e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	f003 021c 	and.w	r2, r3, #28
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2104      	movs	r1, #4
 80049f0:	fa01 f202 	lsl.w	r2, r1, r2
 80049f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d071      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004a06:	e06c      	b.n	8004ae2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0c:	f003 031c 	and.w	r3, r3, #28
 8004a10:	2202      	movs	r2, #2
 8004a12:	409a      	lsls	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d02e      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xec>
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d029      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10b      	bne.n	8004a4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 020a 	bic.w	r2, r2, #10
 8004a42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a50:	f003 021c 	and.w	r2, r3, #28
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	2102      	movs	r1, #2
 8004a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d038      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a78:	e033      	b.n	8004ae2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	f003 031c 	and.w	r3, r3, #28
 8004a82:	2208      	movs	r2, #8
 8004a84:	409a      	lsls	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d02a      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x156>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d025      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 020e 	bic.w	r2, r2, #14
 8004aa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aac:	f003 021c 	and.w	r2, r3, #28
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d004      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
}
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b02:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d004      	beq.n	8004b16 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b14:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	f003 021c 	and.w	r2, r3, #28
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	2101      	movs	r1, #1
 8004b24:	fa01 f202 	lsl.w	r2, r1, r2
 8004b28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b10      	cmp	r3, #16
 8004b38:	d108      	bne.n	8004b4c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b4a:	e007      	b.n	8004b5c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	60da      	str	r2, [r3, #12]
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	4b17      	ldr	r3, [pc, #92]	; (8004bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d80a      	bhi.n	8004b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b80:	089b      	lsrs	r3, r3, #2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b88:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6493      	str	r3, [r2, #72]	; 0x48
 8004b90:	e007      	b.n	8004ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b96:	089b      	lsrs	r3, r3, #2
 8004b98:	009a      	lsls	r2, r3, #2
 8004b9a:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004b9c:	4413      	add	r3, r2
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	3b08      	subs	r3, #8
 8004baa:	4a0c      	ldr	r2, [pc, #48]	; (8004bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004bac:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a0a      	ldr	r2, [pc, #40]	; (8004be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004bb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f003 031f 	and.w	r3, r3, #31
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	409a      	lsls	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bc8:	bf00      	nop
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40020407 	.word	0x40020407
 8004bd8:	4002081c 	.word	0x4002081c
 8004bdc:	cccccccd 	.word	0xcccccccd
 8004be0:	40020880 	.word	0x40020880

08004be4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c06:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	f003 0303 	and.w	r3, r3, #3
 8004c10:	2201      	movs	r2, #1
 8004c12:	409a      	lsls	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004c18:	bf00      	nop
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	1000823f 	.word	0x1000823f
 8004c28:	40020940 	.word	0x40020940

08004c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c3a:	e166      	b.n	8004f0a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	2101      	movs	r1, #1
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	fa01 f303 	lsl.w	r3, r1, r3
 8004c48:	4013      	ands	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 8158 	beq.w	8004f04 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 0303 	and.w	r3, r3, #3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d005      	beq.n	8004c6c <HAL_GPIO_Init+0x40>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f003 0303 	and.w	r3, r3, #3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d130      	bne.n	8004cce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	2203      	movs	r2, #3
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4013      	ands	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43db      	mvns	r3, r3
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	091b      	lsrs	r3, r3, #4
 8004cb8:	f003 0201 	and.w	r2, r3, #1
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d017      	beq.n	8004d0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	43db      	mvns	r3, r3
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d123      	bne.n	8004d5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	08da      	lsrs	r2, r3, #3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3208      	adds	r2, #8
 8004d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	220f      	movs	r2, #15
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	43db      	mvns	r3, r3
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4013      	ands	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	08da      	lsrs	r2, r3, #3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3208      	adds	r2, #8
 8004d58:	6939      	ldr	r1, [r7, #16]
 8004d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	2203      	movs	r2, #3
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4013      	ands	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f003 0203 	and.w	r2, r3, #3
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 80b2 	beq.w	8004f04 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004da0:	4b61      	ldr	r3, [pc, #388]	; (8004f28 <HAL_GPIO_Init+0x2fc>)
 8004da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da4:	4a60      	ldr	r2, [pc, #384]	; (8004f28 <HAL_GPIO_Init+0x2fc>)
 8004da6:	f043 0301 	orr.w	r3, r3, #1
 8004daa:	6613      	str	r3, [r2, #96]	; 0x60
 8004dac:	4b5e      	ldr	r3, [pc, #376]	; (8004f28 <HAL_GPIO_Init+0x2fc>)
 8004dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004db8:	4a5c      	ldr	r2, [pc, #368]	; (8004f2c <HAL_GPIO_Init+0x300>)
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	089b      	lsrs	r3, r3, #2
 8004dbe:	3302      	adds	r3, #2
 8004dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	220f      	movs	r2, #15
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004de2:	d02b      	beq.n	8004e3c <HAL_GPIO_Init+0x210>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a52      	ldr	r2, [pc, #328]	; (8004f30 <HAL_GPIO_Init+0x304>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d025      	beq.n	8004e38 <HAL_GPIO_Init+0x20c>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a51      	ldr	r2, [pc, #324]	; (8004f34 <HAL_GPIO_Init+0x308>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d01f      	beq.n	8004e34 <HAL_GPIO_Init+0x208>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a50      	ldr	r2, [pc, #320]	; (8004f38 <HAL_GPIO_Init+0x30c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d019      	beq.n	8004e30 <HAL_GPIO_Init+0x204>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a4f      	ldr	r2, [pc, #316]	; (8004f3c <HAL_GPIO_Init+0x310>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d013      	beq.n	8004e2c <HAL_GPIO_Init+0x200>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a4e      	ldr	r2, [pc, #312]	; (8004f40 <HAL_GPIO_Init+0x314>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00d      	beq.n	8004e28 <HAL_GPIO_Init+0x1fc>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a4d      	ldr	r2, [pc, #308]	; (8004f44 <HAL_GPIO_Init+0x318>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d007      	beq.n	8004e24 <HAL_GPIO_Init+0x1f8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a4c      	ldr	r2, [pc, #304]	; (8004f48 <HAL_GPIO_Init+0x31c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d101      	bne.n	8004e20 <HAL_GPIO_Init+0x1f4>
 8004e1c:	2307      	movs	r3, #7
 8004e1e:	e00e      	b.n	8004e3e <HAL_GPIO_Init+0x212>
 8004e20:	2308      	movs	r3, #8
 8004e22:	e00c      	b.n	8004e3e <HAL_GPIO_Init+0x212>
 8004e24:	2306      	movs	r3, #6
 8004e26:	e00a      	b.n	8004e3e <HAL_GPIO_Init+0x212>
 8004e28:	2305      	movs	r3, #5
 8004e2a:	e008      	b.n	8004e3e <HAL_GPIO_Init+0x212>
 8004e2c:	2304      	movs	r3, #4
 8004e2e:	e006      	b.n	8004e3e <HAL_GPIO_Init+0x212>
 8004e30:	2303      	movs	r3, #3
 8004e32:	e004      	b.n	8004e3e <HAL_GPIO_Init+0x212>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e002      	b.n	8004e3e <HAL_GPIO_Init+0x212>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e000      	b.n	8004e3e <HAL_GPIO_Init+0x212>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	f002 0203 	and.w	r2, r2, #3
 8004e44:	0092      	lsls	r2, r2, #2
 8004e46:	4093      	lsls	r3, r2
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e4e:	4937      	ldr	r1, [pc, #220]	; (8004f2c <HAL_GPIO_Init+0x300>)
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	089b      	lsrs	r3, r3, #2
 8004e54:	3302      	adds	r3, #2
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e5c:	4b3b      	ldr	r3, [pc, #236]	; (8004f4c <HAL_GPIO_Init+0x320>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	43db      	mvns	r3, r3
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e80:	4a32      	ldr	r2, [pc, #200]	; (8004f4c <HAL_GPIO_Init+0x320>)
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e86:	4b31      	ldr	r3, [pc, #196]	; (8004f4c <HAL_GPIO_Init+0x320>)
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4013      	ands	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004eaa:	4a28      	ldr	r2, [pc, #160]	; (8004f4c <HAL_GPIO_Init+0x320>)
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004eb0:	4b26      	ldr	r3, [pc, #152]	; (8004f4c <HAL_GPIO_Init+0x320>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ed4:	4a1d      	ldr	r2, [pc, #116]	; (8004f4c <HAL_GPIO_Init+0x320>)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004eda:	4b1c      	ldr	r3, [pc, #112]	; (8004f4c <HAL_GPIO_Init+0x320>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004efe:	4a13      	ldr	r2, [pc, #76]	; (8004f4c <HAL_GPIO_Init+0x320>)
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	3301      	adds	r3, #1
 8004f08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f47f ae91 	bne.w	8004c3c <HAL_GPIO_Init+0x10>
  }
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	371c      	adds	r7, #28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	48000400 	.word	0x48000400
 8004f34:	48000800 	.word	0x48000800
 8004f38:	48000c00 	.word	0x48000c00
 8004f3c:	48001000 	.word	0x48001000
 8004f40:	48001400 	.word	0x48001400
 8004f44:	48001800 	.word	0x48001800
 8004f48:	48001c00 	.word	0x48001c00
 8004f4c:	40010400 	.word	0x40010400

08004f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	807b      	strh	r3, [r7, #2]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f60:	787b      	ldrb	r3, [r7, #1]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f66:	887a      	ldrh	r2, [r7, #2]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f6c:	e002      	b.n	8004f74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f6e:	887a      	ldrh	r2, [r7, #2]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f84:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <HAL_PWREx_GetVoltageRange+0x3c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f90:	d102      	bne.n	8004f98 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f96:	e00b      	b.n	8004fb0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004f98:	4b08      	ldr	r3, [pc, #32]	; (8004fbc <HAL_PWREx_GetVoltageRange+0x3c>)
 8004f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa6:	d102      	bne.n	8004fae <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fac:	e000      	b.n	8004fb0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004fae:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40007000 	.word	0x40007000

08004fc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d141      	bne.n	8005052 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fce:	4b4b      	ldr	r3, [pc, #300]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fda:	d131      	bne.n	8005040 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fdc:	4b47      	ldr	r3, [pc, #284]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fe2:	4a46      	ldr	r2, [pc, #280]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fec:	4b43      	ldr	r3, [pc, #268]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ff4:	4a41      	ldr	r2, [pc, #260]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ffa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004ffc:	4b40      	ldr	r3, [pc, #256]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2232      	movs	r2, #50	; 0x32
 8005002:	fb02 f303 	mul.w	r3, r2, r3
 8005006:	4a3f      	ldr	r2, [pc, #252]	; (8005104 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005008:	fba2 2303 	umull	r2, r3, r2, r3
 800500c:	0c9b      	lsrs	r3, r3, #18
 800500e:	3301      	adds	r3, #1
 8005010:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005012:	e002      	b.n	800501a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3b01      	subs	r3, #1
 8005018:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800501a:	4b38      	ldr	r3, [pc, #224]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005026:	d102      	bne.n	800502e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f2      	bne.n	8005014 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800502e:	4b33      	ldr	r3, [pc, #204]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503a:	d158      	bne.n	80050ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e057      	b.n	80050f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005040:	4b2e      	ldr	r3, [pc, #184]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005046:	4a2d      	ldr	r2, [pc, #180]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800504c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005050:	e04d      	b.n	80050ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005058:	d141      	bne.n	80050de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800505a:	4b28      	ldr	r3, [pc, #160]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005066:	d131      	bne.n	80050cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005068:	4b24      	ldr	r3, [pc, #144]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800506a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800506e:	4a23      	ldr	r2, [pc, #140]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005074:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005078:	4b20      	ldr	r3, [pc, #128]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005080:	4a1e      	ldr	r2, [pc, #120]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005086:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005088:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2232      	movs	r2, #50	; 0x32
 800508e:	fb02 f303 	mul.w	r3, r2, r3
 8005092:	4a1c      	ldr	r2, [pc, #112]	; (8005104 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005094:	fba2 2303 	umull	r2, r3, r2, r3
 8005098:	0c9b      	lsrs	r3, r3, #18
 800509a:	3301      	adds	r3, #1
 800509c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800509e:	e002      	b.n	80050a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050a6:	4b15      	ldr	r3, [pc, #84]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b2:	d102      	bne.n	80050ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f2      	bne.n	80050a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050ba:	4b10      	ldr	r3, [pc, #64]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c6:	d112      	bne.n	80050ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e011      	b.n	80050f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050d2:	4a0a      	ldr	r2, [pc, #40]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80050dc:	e007      	b.n	80050ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050de:	4b07      	ldr	r3, [pc, #28]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050e6:	4a05      	ldr	r2, [pc, #20]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050ec:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	40007000 	.word	0x40007000
 8005100:	20000000 	.word	0x20000000
 8005104:	431bde83 	.word	0x431bde83

08005108 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800510c:	4b05      	ldr	r3, [pc, #20]	; (8005124 <HAL_PWREx_EnableVddIO2+0x1c>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	4a04      	ldr	r2, [pc, #16]	; (8005124 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005116:	6053      	str	r3, [r2, #4]
}
 8005118:	bf00      	nop
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40007000 	.word	0x40007000

08005128 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d102      	bne.n	800513c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	f000 bc08 	b.w	800594c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800513c:	4b96      	ldr	r3, [pc, #600]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 030c 	and.w	r3, r3, #12
 8005144:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005146:	4b94      	ldr	r3, [pc, #592]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 80e4 	beq.w	8005326 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <HAL_RCC_OscConfig+0x4c>
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	2b0c      	cmp	r3, #12
 8005168:	f040 808b 	bne.w	8005282 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2b01      	cmp	r3, #1
 8005170:	f040 8087 	bne.w	8005282 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005174:	4b88      	ldr	r3, [pc, #544]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <HAL_RCC_OscConfig+0x64>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e3df      	b.n	800594c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1a      	ldr	r2, [r3, #32]
 8005190:	4b81      	ldr	r3, [pc, #516]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0308 	and.w	r3, r3, #8
 8005198:	2b00      	cmp	r3, #0
 800519a:	d004      	beq.n	80051a6 <HAL_RCC_OscConfig+0x7e>
 800519c:	4b7e      	ldr	r3, [pc, #504]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051a4:	e005      	b.n	80051b2 <HAL_RCC_OscConfig+0x8a>
 80051a6:	4b7c      	ldr	r3, [pc, #496]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 80051a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d223      	bcs.n	80051fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fdcc 	bl	8005d58 <RCC_SetFlashLatencyFromMSIRange>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e3c0      	b.n	800594c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051ca:	4b73      	ldr	r3, [pc, #460]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a72      	ldr	r2, [pc, #456]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 80051d0:	f043 0308 	orr.w	r3, r3, #8
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	4b70      	ldr	r3, [pc, #448]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	496d      	ldr	r1, [pc, #436]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051e8:	4b6b      	ldr	r3, [pc, #428]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	021b      	lsls	r3, r3, #8
 80051f6:	4968      	ldr	r1, [pc, #416]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	604b      	str	r3, [r1, #4]
 80051fc:	e025      	b.n	800524a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051fe:	4b66      	ldr	r3, [pc, #408]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a65      	ldr	r2, [pc, #404]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 8005204:	f043 0308 	orr.w	r3, r3, #8
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	4b63      	ldr	r3, [pc, #396]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	4960      	ldr	r1, [pc, #384]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 8005218:	4313      	orrs	r3, r2
 800521a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800521c:	4b5e      	ldr	r3, [pc, #376]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	495b      	ldr	r1, [pc, #364]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 800522c:	4313      	orrs	r3, r2
 800522e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d109      	bne.n	800524a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fd8c 	bl	8005d58 <RCC_SetFlashLatencyFromMSIRange>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e380      	b.n	800594c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800524a:	f000 fcc1 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 800524e:	4602      	mov	r2, r0
 8005250:	4b51      	ldr	r3, [pc, #324]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	4950      	ldr	r1, [pc, #320]	; (800539c <HAL_RCC_OscConfig+0x274>)
 800525c:	5ccb      	ldrb	r3, [r1, r3]
 800525e:	f003 031f 	and.w	r3, r3, #31
 8005262:	fa22 f303 	lsr.w	r3, r2, r3
 8005266:	4a4e      	ldr	r2, [pc, #312]	; (80053a0 <HAL_RCC_OscConfig+0x278>)
 8005268:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800526a:	4b4e      	ldr	r3, [pc, #312]	; (80053a4 <HAL_RCC_OscConfig+0x27c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f7fd fe9c 	bl	8002fac <HAL_InitTick>
 8005274:	4603      	mov	r3, r0
 8005276:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005278:	7bfb      	ldrb	r3, [r7, #15]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d052      	beq.n	8005324 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	e364      	b.n	800594c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d032      	beq.n	80052f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800528a:	4b43      	ldr	r3, [pc, #268]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a42      	ldr	r2, [pc, #264]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 8005290:	f043 0301 	orr.w	r3, r3, #1
 8005294:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005296:	f7fd fed9 	bl	800304c <HAL_GetTick>
 800529a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800529c:	e008      	b.n	80052b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800529e:	f7fd fed5 	bl	800304c <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e34d      	b.n	800594c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052b0:	4b39      	ldr	r3, [pc, #228]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0f0      	beq.n	800529e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052bc:	4b36      	ldr	r3, [pc, #216]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a35      	ldr	r2, [pc, #212]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 80052c2:	f043 0308 	orr.w	r3, r3, #8
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	4b33      	ldr	r3, [pc, #204]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	4930      	ldr	r1, [pc, #192]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052da:	4b2f      	ldr	r3, [pc, #188]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	492b      	ldr	r1, [pc, #172]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	604b      	str	r3, [r1, #4]
 80052ee:	e01a      	b.n	8005326 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052f0:	4b29      	ldr	r3, [pc, #164]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a28      	ldr	r2, [pc, #160]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 80052f6:	f023 0301 	bic.w	r3, r3, #1
 80052fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052fc:	f7fd fea6 	bl	800304c <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005304:	f7fd fea2 	bl	800304c <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e31a      	b.n	800594c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005316:	4b20      	ldr	r3, [pc, #128]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f0      	bne.n	8005304 <HAL_RCC_OscConfig+0x1dc>
 8005322:	e000      	b.n	8005326 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005324:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d073      	beq.n	800541a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d005      	beq.n	8005344 <HAL_RCC_OscConfig+0x21c>
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	2b0c      	cmp	r3, #12
 800533c:	d10e      	bne.n	800535c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b03      	cmp	r3, #3
 8005342:	d10b      	bne.n	800535c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005344:	4b14      	ldr	r3, [pc, #80]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d063      	beq.n	8005418 <HAL_RCC_OscConfig+0x2f0>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d15f      	bne.n	8005418 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e2f7      	b.n	800594c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005364:	d106      	bne.n	8005374 <HAL_RCC_OscConfig+0x24c>
 8005366:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a0b      	ldr	r2, [pc, #44]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 800536c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	e025      	b.n	80053c0 <HAL_RCC_OscConfig+0x298>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800537c:	d114      	bne.n	80053a8 <HAL_RCC_OscConfig+0x280>
 800537e:	4b06      	ldr	r3, [pc, #24]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a05      	ldr	r2, [pc, #20]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 8005384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	4b03      	ldr	r3, [pc, #12]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a02      	ldr	r2, [pc, #8]	; (8005398 <HAL_RCC_OscConfig+0x270>)
 8005390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	e013      	b.n	80053c0 <HAL_RCC_OscConfig+0x298>
 8005398:	40021000 	.word	0x40021000
 800539c:	0800c19c 	.word	0x0800c19c
 80053a0:	20000000 	.word	0x20000000
 80053a4:	20000004 	.word	0x20000004
 80053a8:	4ba0      	ldr	r3, [pc, #640]	; (800562c <HAL_RCC_OscConfig+0x504>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a9f      	ldr	r2, [pc, #636]	; (800562c <HAL_RCC_OscConfig+0x504>)
 80053ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	4b9d      	ldr	r3, [pc, #628]	; (800562c <HAL_RCC_OscConfig+0x504>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a9c      	ldr	r2, [pc, #624]	; (800562c <HAL_RCC_OscConfig+0x504>)
 80053ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d013      	beq.n	80053f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c8:	f7fd fe40 	bl	800304c <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053d0:	f7fd fe3c 	bl	800304c <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b64      	cmp	r3, #100	; 0x64
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e2b4      	b.n	800594c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053e2:	4b92      	ldr	r3, [pc, #584]	; (800562c <HAL_RCC_OscConfig+0x504>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0f0      	beq.n	80053d0 <HAL_RCC_OscConfig+0x2a8>
 80053ee:	e014      	b.n	800541a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f0:	f7fd fe2c 	bl	800304c <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053f8:	f7fd fe28 	bl	800304c <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b64      	cmp	r3, #100	; 0x64
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e2a0      	b.n	800594c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800540a:	4b88      	ldr	r3, [pc, #544]	; (800562c <HAL_RCC_OscConfig+0x504>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1f0      	bne.n	80053f8 <HAL_RCC_OscConfig+0x2d0>
 8005416:	e000      	b.n	800541a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d060      	beq.n	80054e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	2b04      	cmp	r3, #4
 800542a:	d005      	beq.n	8005438 <HAL_RCC_OscConfig+0x310>
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	2b0c      	cmp	r3, #12
 8005430:	d119      	bne.n	8005466 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b02      	cmp	r3, #2
 8005436:	d116      	bne.n	8005466 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005438:	4b7c      	ldr	r3, [pc, #496]	; (800562c <HAL_RCC_OscConfig+0x504>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <HAL_RCC_OscConfig+0x328>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e27d      	b.n	800594c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005450:	4b76      	ldr	r3, [pc, #472]	; (800562c <HAL_RCC_OscConfig+0x504>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	061b      	lsls	r3, r3, #24
 800545e:	4973      	ldr	r1, [pc, #460]	; (800562c <HAL_RCC_OscConfig+0x504>)
 8005460:	4313      	orrs	r3, r2
 8005462:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005464:	e040      	b.n	80054e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d023      	beq.n	80054b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800546e:	4b6f      	ldr	r3, [pc, #444]	; (800562c <HAL_RCC_OscConfig+0x504>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a6e      	ldr	r2, [pc, #440]	; (800562c <HAL_RCC_OscConfig+0x504>)
 8005474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547a:	f7fd fde7 	bl	800304c <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005480:	e008      	b.n	8005494 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005482:	f7fd fde3 	bl	800304c <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e25b      	b.n	800594c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005494:	4b65      	ldr	r3, [pc, #404]	; (800562c <HAL_RCC_OscConfig+0x504>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0f0      	beq.n	8005482 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a0:	4b62      	ldr	r3, [pc, #392]	; (800562c <HAL_RCC_OscConfig+0x504>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	061b      	lsls	r3, r3, #24
 80054ae:	495f      	ldr	r1, [pc, #380]	; (800562c <HAL_RCC_OscConfig+0x504>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	604b      	str	r3, [r1, #4]
 80054b4:	e018      	b.n	80054e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054b6:	4b5d      	ldr	r3, [pc, #372]	; (800562c <HAL_RCC_OscConfig+0x504>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a5c      	ldr	r2, [pc, #368]	; (800562c <HAL_RCC_OscConfig+0x504>)
 80054bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c2:	f7fd fdc3 	bl	800304c <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ca:	f7fd fdbf 	bl	800304c <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e237      	b.n	800594c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054dc:	4b53      	ldr	r3, [pc, #332]	; (800562c <HAL_RCC_OscConfig+0x504>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f0      	bne.n	80054ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d03c      	beq.n	800556e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01c      	beq.n	8005536 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054fc:	4b4b      	ldr	r3, [pc, #300]	; (800562c <HAL_RCC_OscConfig+0x504>)
 80054fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005502:	4a4a      	ldr	r2, [pc, #296]	; (800562c <HAL_RCC_OscConfig+0x504>)
 8005504:	f043 0301 	orr.w	r3, r3, #1
 8005508:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800550c:	f7fd fd9e 	bl	800304c <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005514:	f7fd fd9a 	bl	800304c <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e212      	b.n	800594c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005526:	4b41      	ldr	r3, [pc, #260]	; (800562c <HAL_RCC_OscConfig+0x504>)
 8005528:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0ef      	beq.n	8005514 <HAL_RCC_OscConfig+0x3ec>
 8005534:	e01b      	b.n	800556e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005536:	4b3d      	ldr	r3, [pc, #244]	; (800562c <HAL_RCC_OscConfig+0x504>)
 8005538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553c:	4a3b      	ldr	r2, [pc, #236]	; (800562c <HAL_RCC_OscConfig+0x504>)
 800553e:	f023 0301 	bic.w	r3, r3, #1
 8005542:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005546:	f7fd fd81 	bl	800304c <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800554c:	e008      	b.n	8005560 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800554e:	f7fd fd7d 	bl	800304c <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e1f5      	b.n	800594c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005560:	4b32      	ldr	r3, [pc, #200]	; (800562c <HAL_RCC_OscConfig+0x504>)
 8005562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1ef      	bne.n	800554e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 80a6 	beq.w	80056c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800557c:	2300      	movs	r3, #0
 800557e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005580:	4b2a      	ldr	r3, [pc, #168]	; (800562c <HAL_RCC_OscConfig+0x504>)
 8005582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10d      	bne.n	80055a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800558c:	4b27      	ldr	r3, [pc, #156]	; (800562c <HAL_RCC_OscConfig+0x504>)
 800558e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005590:	4a26      	ldr	r2, [pc, #152]	; (800562c <HAL_RCC_OscConfig+0x504>)
 8005592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005596:	6593      	str	r3, [r2, #88]	; 0x58
 8005598:	4b24      	ldr	r3, [pc, #144]	; (800562c <HAL_RCC_OscConfig+0x504>)
 800559a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055a4:	2301      	movs	r3, #1
 80055a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055a8:	4b21      	ldr	r3, [pc, #132]	; (8005630 <HAL_RCC_OscConfig+0x508>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d118      	bne.n	80055e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055b4:	4b1e      	ldr	r3, [pc, #120]	; (8005630 <HAL_RCC_OscConfig+0x508>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1d      	ldr	r2, [pc, #116]	; (8005630 <HAL_RCC_OscConfig+0x508>)
 80055ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055c0:	f7fd fd44 	bl	800304c <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c8:	f7fd fd40 	bl	800304c <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e1b8      	b.n	800594c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055da:	4b15      	ldr	r3, [pc, #84]	; (8005630 <HAL_RCC_OscConfig+0x508>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0f0      	beq.n	80055c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d108      	bne.n	8005600 <HAL_RCC_OscConfig+0x4d8>
 80055ee:	4b0f      	ldr	r3, [pc, #60]	; (800562c <HAL_RCC_OscConfig+0x504>)
 80055f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f4:	4a0d      	ldr	r2, [pc, #52]	; (800562c <HAL_RCC_OscConfig+0x504>)
 80055f6:	f043 0301 	orr.w	r3, r3, #1
 80055fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055fe:	e029      	b.n	8005654 <HAL_RCC_OscConfig+0x52c>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	2b05      	cmp	r3, #5
 8005606:	d115      	bne.n	8005634 <HAL_RCC_OscConfig+0x50c>
 8005608:	4b08      	ldr	r3, [pc, #32]	; (800562c <HAL_RCC_OscConfig+0x504>)
 800560a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560e:	4a07      	ldr	r2, [pc, #28]	; (800562c <HAL_RCC_OscConfig+0x504>)
 8005610:	f043 0304 	orr.w	r3, r3, #4
 8005614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005618:	4b04      	ldr	r3, [pc, #16]	; (800562c <HAL_RCC_OscConfig+0x504>)
 800561a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561e:	4a03      	ldr	r2, [pc, #12]	; (800562c <HAL_RCC_OscConfig+0x504>)
 8005620:	f043 0301 	orr.w	r3, r3, #1
 8005624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005628:	e014      	b.n	8005654 <HAL_RCC_OscConfig+0x52c>
 800562a:	bf00      	nop
 800562c:	40021000 	.word	0x40021000
 8005630:	40007000 	.word	0x40007000
 8005634:	4b9d      	ldr	r3, [pc, #628]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 8005636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563a:	4a9c      	ldr	r2, [pc, #624]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 800563c:	f023 0301 	bic.w	r3, r3, #1
 8005640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005644:	4b99      	ldr	r3, [pc, #612]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 8005646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564a:	4a98      	ldr	r2, [pc, #608]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 800564c:	f023 0304 	bic.w	r3, r3, #4
 8005650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d016      	beq.n	800568a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800565c:	f7fd fcf6 	bl	800304c <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005662:	e00a      	b.n	800567a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005664:	f7fd fcf2 	bl	800304c <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005672:	4293      	cmp	r3, r2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e168      	b.n	800594c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800567a:	4b8c      	ldr	r3, [pc, #560]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 800567c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0ed      	beq.n	8005664 <HAL_RCC_OscConfig+0x53c>
 8005688:	e015      	b.n	80056b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800568a:	f7fd fcdf 	bl	800304c <HAL_GetTick>
 800568e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005690:	e00a      	b.n	80056a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005692:	f7fd fcdb 	bl	800304c <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e151      	b.n	800594c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056a8:	4b80      	ldr	r3, [pc, #512]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 80056aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1ed      	bne.n	8005692 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056b6:	7ffb      	ldrb	r3, [r7, #31]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d105      	bne.n	80056c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056bc:	4b7b      	ldr	r3, [pc, #492]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 80056be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c0:	4a7a      	ldr	r2, [pc, #488]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 80056c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0320 	and.w	r3, r3, #32
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d03c      	beq.n	800574e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01c      	beq.n	8005716 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056dc:	4b73      	ldr	r3, [pc, #460]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 80056de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056e2:	4a72      	ldr	r2, [pc, #456]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 80056e4:	f043 0301 	orr.w	r3, r3, #1
 80056e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ec:	f7fd fcae 	bl	800304c <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056f4:	f7fd fcaa 	bl	800304c <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e122      	b.n	800594c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005706:	4b69      	ldr	r3, [pc, #420]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 8005708:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0ef      	beq.n	80056f4 <HAL_RCC_OscConfig+0x5cc>
 8005714:	e01b      	b.n	800574e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005716:	4b65      	ldr	r3, [pc, #404]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 8005718:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800571c:	4a63      	ldr	r2, [pc, #396]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 800571e:	f023 0301 	bic.w	r3, r3, #1
 8005722:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005726:	f7fd fc91 	bl	800304c <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800572e:	f7fd fc8d 	bl	800304c <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e105      	b.n	800594c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005740:	4b5a      	ldr	r3, [pc, #360]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 8005742:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1ef      	bne.n	800572e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 80f9 	beq.w	800594a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575c:	2b02      	cmp	r3, #2
 800575e:	f040 80cf 	bne.w	8005900 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005762:	4b52      	ldr	r3, [pc, #328]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f003 0203 	and.w	r2, r3, #3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005772:	429a      	cmp	r2, r3
 8005774:	d12c      	bne.n	80057d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005780:	3b01      	subs	r3, #1
 8005782:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005784:	429a      	cmp	r2, r3
 8005786:	d123      	bne.n	80057d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005792:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005794:	429a      	cmp	r2, r3
 8005796:	d11b      	bne.n	80057d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d113      	bne.n	80057d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	085b      	lsrs	r3, r3, #1
 80057b4:	3b01      	subs	r3, #1
 80057b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d109      	bne.n	80057d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	085b      	lsrs	r3, r3, #1
 80057c8:	3b01      	subs	r3, #1
 80057ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d071      	beq.n	80058b4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	2b0c      	cmp	r3, #12
 80057d4:	d068      	beq.n	80058a8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80057d6:	4b35      	ldr	r3, [pc, #212]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d105      	bne.n	80057ee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80057e2:	4b32      	ldr	r3, [pc, #200]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e0ac      	b.n	800594c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80057f2:	4b2e      	ldr	r3, [pc, #184]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a2d      	ldr	r2, [pc, #180]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 80057f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057fe:	f7fd fc25 	bl	800304c <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005804:	e008      	b.n	8005818 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005806:	f7fd fc21 	bl	800304c <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e099      	b.n	800594c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005818:	4b24      	ldr	r3, [pc, #144]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1f0      	bne.n	8005806 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005824:	4b21      	ldr	r3, [pc, #132]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	4b21      	ldr	r3, [pc, #132]	; (80058b0 <HAL_RCC_OscConfig+0x788>)
 800582a:	4013      	ands	r3, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005834:	3a01      	subs	r2, #1
 8005836:	0112      	lsls	r2, r2, #4
 8005838:	4311      	orrs	r1, r2
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800583e:	0212      	lsls	r2, r2, #8
 8005840:	4311      	orrs	r1, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005846:	0852      	lsrs	r2, r2, #1
 8005848:	3a01      	subs	r2, #1
 800584a:	0552      	lsls	r2, r2, #21
 800584c:	4311      	orrs	r1, r2
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005852:	0852      	lsrs	r2, r2, #1
 8005854:	3a01      	subs	r2, #1
 8005856:	0652      	lsls	r2, r2, #25
 8005858:	4311      	orrs	r1, r2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800585e:	06d2      	lsls	r2, r2, #27
 8005860:	430a      	orrs	r2, r1
 8005862:	4912      	ldr	r1, [pc, #72]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 8005864:	4313      	orrs	r3, r2
 8005866:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005868:	4b10      	ldr	r3, [pc, #64]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a0f      	ldr	r2, [pc, #60]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 800586e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005872:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005874:	4b0d      	ldr	r3, [pc, #52]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	4a0c      	ldr	r2, [pc, #48]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 800587a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800587e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005880:	f7fd fbe4 	bl	800304c <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005888:	f7fd fbe0 	bl	800304c <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e058      	b.n	800594c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800589a:	4b04      	ldr	r3, [pc, #16]	; (80058ac <HAL_RCC_OscConfig+0x784>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f0      	beq.n	8005888 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058a6:	e050      	b.n	800594a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e04f      	b.n	800594c <HAL_RCC_OscConfig+0x824>
 80058ac:	40021000 	.word	0x40021000
 80058b0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058b4:	4b27      	ldr	r3, [pc, #156]	; (8005954 <HAL_RCC_OscConfig+0x82c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d144      	bne.n	800594a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80058c0:	4b24      	ldr	r3, [pc, #144]	; (8005954 <HAL_RCC_OscConfig+0x82c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a23      	ldr	r2, [pc, #140]	; (8005954 <HAL_RCC_OscConfig+0x82c>)
 80058c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058cc:	4b21      	ldr	r3, [pc, #132]	; (8005954 <HAL_RCC_OscConfig+0x82c>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	4a20      	ldr	r2, [pc, #128]	; (8005954 <HAL_RCC_OscConfig+0x82c>)
 80058d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058d8:	f7fd fbb8 	bl	800304c <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e0:	f7fd fbb4 	bl	800304c <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e02c      	b.n	800594c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058f2:	4b18      	ldr	r3, [pc, #96]	; (8005954 <HAL_RCC_OscConfig+0x82c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0f0      	beq.n	80058e0 <HAL_RCC_OscConfig+0x7b8>
 80058fe:	e024      	b.n	800594a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	2b0c      	cmp	r3, #12
 8005904:	d01f      	beq.n	8005946 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005906:	4b13      	ldr	r3, [pc, #76]	; (8005954 <HAL_RCC_OscConfig+0x82c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a12      	ldr	r2, [pc, #72]	; (8005954 <HAL_RCC_OscConfig+0x82c>)
 800590c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005912:	f7fd fb9b 	bl	800304c <HAL_GetTick>
 8005916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800591a:	f7fd fb97 	bl	800304c <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e00f      	b.n	800594c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800592c:	4b09      	ldr	r3, [pc, #36]	; (8005954 <HAL_RCC_OscConfig+0x82c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1f0      	bne.n	800591a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005938:	4b06      	ldr	r3, [pc, #24]	; (8005954 <HAL_RCC_OscConfig+0x82c>)
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	4905      	ldr	r1, [pc, #20]	; (8005954 <HAL_RCC_OscConfig+0x82c>)
 800593e:	4b06      	ldr	r3, [pc, #24]	; (8005958 <HAL_RCC_OscConfig+0x830>)
 8005940:	4013      	ands	r3, r2
 8005942:	60cb      	str	r3, [r1, #12]
 8005944:	e001      	b.n	800594a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40021000 	.word	0x40021000
 8005958:	feeefffc 	.word	0xfeeefffc

0800595c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005966:	2300      	movs	r3, #0
 8005968:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e11d      	b.n	8005bb0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005974:	4b90      	ldr	r3, [pc, #576]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d910      	bls.n	80059a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005982:	4b8d      	ldr	r3, [pc, #564]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f023 020f 	bic.w	r2, r3, #15
 800598a:	498b      	ldr	r1, [pc, #556]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	4313      	orrs	r3, r2
 8005990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005992:	4b89      	ldr	r3, [pc, #548]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	429a      	cmp	r2, r3
 800599e:	d001      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e105      	b.n	8005bb0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d010      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	4b81      	ldr	r3, [pc, #516]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059bc:	429a      	cmp	r2, r3
 80059be:	d908      	bls.n	80059d2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059c0:	4b7e      	ldr	r3, [pc, #504]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	497b      	ldr	r1, [pc, #492]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d079      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d11e      	bne.n	8005a24 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059e6:	4b75      	ldr	r3, [pc, #468]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e0dc      	b.n	8005bb0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80059f6:	f000 fa09 	bl	8005e0c <RCC_GetSysClockFreqFromPLLSource>
 80059fa:	4603      	mov	r3, r0
 80059fc:	4a70      	ldr	r2, [pc, #448]	; (8005bc0 <HAL_RCC_ClockConfig+0x264>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d946      	bls.n	8005a90 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005a02:	4b6e      	ldr	r3, [pc, #440]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d140      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a0e:	4b6b      	ldr	r3, [pc, #428]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a16:	4a69      	ldr	r2, [pc, #420]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a1e:	2380      	movs	r3, #128	; 0x80
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	e035      	b.n	8005a90 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d107      	bne.n	8005a3c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a2c:	4b63      	ldr	r3, [pc, #396]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d115      	bne.n	8005a64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e0b9      	b.n	8005bb0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d107      	bne.n	8005a54 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a44:	4b5d      	ldr	r3, [pc, #372]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d109      	bne.n	8005a64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e0ad      	b.n	8005bb0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a54:	4b59      	ldr	r3, [pc, #356]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e0a5      	b.n	8005bb0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005a64:	f000 f8b4 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	4a55      	ldr	r2, [pc, #340]	; (8005bc0 <HAL_RCC_ClockConfig+0x264>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d90f      	bls.n	8005a90 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005a70:	4b52      	ldr	r3, [pc, #328]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d109      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a7c:	4b4f      	ldr	r3, [pc, #316]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a84:	4a4d      	ldr	r2, [pc, #308]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a8a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a8c:	2380      	movs	r3, #128	; 0x80
 8005a8e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a90:	4b4a      	ldr	r3, [pc, #296]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f023 0203 	bic.w	r2, r3, #3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	4947      	ldr	r1, [pc, #284]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa2:	f7fd fad3 	bl	800304c <HAL_GetTick>
 8005aa6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aa8:	e00a      	b.n	8005ac0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aaa:	f7fd facf 	bl	800304c <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e077      	b.n	8005bb0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac0:	4b3e      	ldr	r3, [pc, #248]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 020c 	and.w	r2, r3, #12
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d1eb      	bne.n	8005aaa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b80      	cmp	r3, #128	; 0x80
 8005ad6:	d105      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005ad8:	4b38      	ldr	r3, [pc, #224]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	4a37      	ldr	r2, [pc, #220]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ae2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d010      	beq.n	8005b12 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	4b31      	ldr	r3, [pc, #196]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d208      	bcs.n	8005b12 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b00:	4b2e      	ldr	r3, [pc, #184]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	492b      	ldr	r1, [pc, #172]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b12:	4b29      	ldr	r3, [pc, #164]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d210      	bcs.n	8005b42 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b20:	4b25      	ldr	r3, [pc, #148]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f023 020f 	bic.w	r2, r3, #15
 8005b28:	4923      	ldr	r1, [pc, #140]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b30:	4b21      	ldr	r3, [pc, #132]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d001      	beq.n	8005b42 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e036      	b.n	8005bb0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d008      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b4e:	4b1b      	ldr	r3, [pc, #108]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	4918      	ldr	r1, [pc, #96]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d009      	beq.n	8005b80 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b6c:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	4910      	ldr	r1, [pc, #64]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b80:	f000 f826 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8005b84:	4602      	mov	r2, r0
 8005b86:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	091b      	lsrs	r3, r3, #4
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	490c      	ldr	r1, [pc, #48]	; (8005bc4 <HAL_RCC_ClockConfig+0x268>)
 8005b92:	5ccb      	ldrb	r3, [r1, r3]
 8005b94:	f003 031f 	and.w	r3, r3, #31
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9c:	4a0a      	ldr	r2, [pc, #40]	; (8005bc8 <HAL_RCC_ClockConfig+0x26c>)
 8005b9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <HAL_RCC_ClockConfig+0x270>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fd fa01 	bl	8002fac <HAL_InitTick>
 8005baa:	4603      	mov	r3, r0
 8005bac:	73fb      	strb	r3, [r7, #15]

  return status;
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3718      	adds	r7, #24
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	40022000 	.word	0x40022000
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	04c4b400 	.word	0x04c4b400
 8005bc4:	0800c19c 	.word	0x0800c19c
 8005bc8:	20000000 	.word	0x20000000
 8005bcc:	20000004 	.word	0x20000004

08005bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b089      	sub	sp, #36	; 0x24
 8005bd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bde:	4b3e      	ldr	r3, [pc, #248]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 030c 	and.w	r3, r3, #12
 8005be6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005be8:	4b3b      	ldr	r3, [pc, #236]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f003 0303 	and.w	r3, r3, #3
 8005bf0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <HAL_RCC_GetSysClockFreq+0x34>
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	2b0c      	cmp	r3, #12
 8005bfc:	d121      	bne.n	8005c42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d11e      	bne.n	8005c42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c04:	4b34      	ldr	r3, [pc, #208]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d107      	bne.n	8005c20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c10:	4b31      	ldr	r3, [pc, #196]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c16:	0a1b      	lsrs	r3, r3, #8
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	61fb      	str	r3, [r7, #28]
 8005c1e:	e005      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c20:	4b2d      	ldr	r3, [pc, #180]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	091b      	lsrs	r3, r3, #4
 8005c26:	f003 030f 	and.w	r3, r3, #15
 8005c2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c2c:	4a2b      	ldr	r2, [pc, #172]	; (8005cdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10d      	bne.n	8005c58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c40:	e00a      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d102      	bne.n	8005c4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c48:	4b25      	ldr	r3, [pc, #148]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c4a:	61bb      	str	r3, [r7, #24]
 8005c4c:	e004      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	d101      	bne.n	8005c58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c54:	4b23      	ldr	r3, [pc, #140]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	2b0c      	cmp	r3, #12
 8005c5c:	d134      	bne.n	8005cc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c5e:	4b1e      	ldr	r3, [pc, #120]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d003      	beq.n	8005c76 <HAL_RCC_GetSysClockFreq+0xa6>
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d003      	beq.n	8005c7c <HAL_RCC_GetSysClockFreq+0xac>
 8005c74:	e005      	b.n	8005c82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005c76:	4b1a      	ldr	r3, [pc, #104]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c78:	617b      	str	r3, [r7, #20]
      break;
 8005c7a:	e005      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005c7c:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c7e:	617b      	str	r3, [r7, #20]
      break;
 8005c80:	e002      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	617b      	str	r3, [r7, #20]
      break;
 8005c86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c88:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	091b      	lsrs	r3, r3, #4
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	3301      	adds	r3, #1
 8005c94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c96:	4b10      	ldr	r3, [pc, #64]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	0a1b      	lsrs	r3, r3, #8
 8005c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	fb03 f202 	mul.w	r2, r3, r2
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cae:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	0e5b      	lsrs	r3, r3, #25
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	3301      	adds	r3, #1
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005cc8:	69bb      	ldr	r3, [r7, #24]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3724      	adds	r7, #36	; 0x24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	0800c1b4 	.word	0x0800c1b4
 8005ce0:	00f42400 	.word	0x00f42400
 8005ce4:	007a1200 	.word	0x007a1200

08005ce8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cec:	4b03      	ldr	r3, [pc, #12]	; (8005cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8005cee:	681b      	ldr	r3, [r3, #0]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20000000 	.word	0x20000000

08005d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d04:	f7ff fff0 	bl	8005ce8 <HAL_RCC_GetHCLKFreq>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	4b06      	ldr	r3, [pc, #24]	; (8005d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	0a1b      	lsrs	r3, r3, #8
 8005d10:	f003 0307 	and.w	r3, r3, #7
 8005d14:	4904      	ldr	r1, [pc, #16]	; (8005d28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d16:	5ccb      	ldrb	r3, [r1, r3]
 8005d18:	f003 031f 	and.w	r3, r3, #31
 8005d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40021000 	.word	0x40021000
 8005d28:	0800c1ac 	.word	0x0800c1ac

08005d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d30:	f7ff ffda 	bl	8005ce8 <HAL_RCC_GetHCLKFreq>
 8005d34:	4602      	mov	r2, r0
 8005d36:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	0adb      	lsrs	r3, r3, #11
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	4904      	ldr	r1, [pc, #16]	; (8005d54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d42:	5ccb      	ldrb	r3, [r1, r3]
 8005d44:	f003 031f 	and.w	r3, r3, #31
 8005d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	40021000 	.word	0x40021000
 8005d54:	0800c1ac 	.word	0x0800c1ac

08005d58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d60:	2300      	movs	r3, #0
 8005d62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d64:	4b27      	ldr	r3, [pc, #156]	; (8005e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d70:	f7ff f906 	bl	8004f80 <HAL_PWREx_GetVoltageRange>
 8005d74:	6178      	str	r0, [r7, #20]
 8005d76:	e014      	b.n	8005da2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d78:	4b22      	ldr	r3, [pc, #136]	; (8005e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7c:	4a21      	ldr	r2, [pc, #132]	; (8005e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d82:	6593      	str	r3, [r2, #88]	; 0x58
 8005d84:	4b1f      	ldr	r3, [pc, #124]	; (8005e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d90:	f7ff f8f6 	bl	8004f80 <HAL_PWREx_GetVoltageRange>
 8005d94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d96:	4b1b      	ldr	r3, [pc, #108]	; (8005e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9a:	4a1a      	ldr	r2, [pc, #104]	; (8005e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005da0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da8:	d10b      	bne.n	8005dc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b80      	cmp	r3, #128	; 0x80
 8005dae:	d913      	bls.n	8005dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2ba0      	cmp	r3, #160	; 0xa0
 8005db4:	d902      	bls.n	8005dbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005db6:	2302      	movs	r3, #2
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	e00d      	b.n	8005dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	e00a      	b.n	8005dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b7f      	cmp	r3, #127	; 0x7f
 8005dc6:	d902      	bls.n	8005dce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005dc8:	2302      	movs	r3, #2
 8005dca:	613b      	str	r3, [r7, #16]
 8005dcc:	e004      	b.n	8005dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b70      	cmp	r3, #112	; 0x70
 8005dd2:	d101      	bne.n	8005dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005dd8:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f023 020f 	bic.w	r2, r3, #15
 8005de0:	4909      	ldr	r1, [pc, #36]	; (8005e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005de8:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 030f 	and.w	r3, r3, #15
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d001      	beq.n	8005dfa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40021000 	.word	0x40021000
 8005e08:	40022000 	.word	0x40022000

08005e0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e12:	4b2d      	ldr	r3, [pc, #180]	; (8005ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b03      	cmp	r3, #3
 8005e20:	d00b      	beq.n	8005e3a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d825      	bhi.n	8005e74 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d008      	beq.n	8005e40 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d11f      	bne.n	8005e74 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005e34:	4b25      	ldr	r3, [pc, #148]	; (8005ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e36:	613b      	str	r3, [r7, #16]
    break;
 8005e38:	e01f      	b.n	8005e7a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005e3a:	4b25      	ldr	r3, [pc, #148]	; (8005ed0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005e3c:	613b      	str	r3, [r7, #16]
    break;
 8005e3e:	e01c      	b.n	8005e7a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e40:	4b21      	ldr	r3, [pc, #132]	; (8005ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0308 	and.w	r3, r3, #8
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d107      	bne.n	8005e5c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e4c:	4b1e      	ldr	r3, [pc, #120]	; (8005ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e52:	0a1b      	lsrs	r3, r3, #8
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	617b      	str	r3, [r7, #20]
 8005e5a:	e005      	b.n	8005e68 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e5c:	4b1a      	ldr	r3, [pc, #104]	; (8005ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	091b      	lsrs	r3, r3, #4
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005e68:	4a1a      	ldr	r2, [pc, #104]	; (8005ed4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e70:	613b      	str	r3, [r7, #16]
    break;
 8005e72:	e002      	b.n	8005e7a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	613b      	str	r3, [r7, #16]
    break;
 8005e78:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e7a:	4b13      	ldr	r3, [pc, #76]	; (8005ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	091b      	lsrs	r3, r3, #4
 8005e80:	f003 030f 	and.w	r3, r3, #15
 8005e84:	3301      	adds	r3, #1
 8005e86:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e88:	4b0f      	ldr	r3, [pc, #60]	; (8005ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	0a1b      	lsrs	r3, r3, #8
 8005e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	fb03 f202 	mul.w	r2, r3, r2
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ea0:	4b09      	ldr	r3, [pc, #36]	; (8005ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	0e5b      	lsrs	r3, r3, #25
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	3301      	adds	r3, #1
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005eba:	683b      	ldr	r3, [r7, #0]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	00f42400 	.word	0x00f42400
 8005ed0:	007a1200 	.word	0x007a1200
 8005ed4:	0800c1b4 	.word	0x0800c1b4

08005ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d040      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ef8:	2b80      	cmp	r3, #128	; 0x80
 8005efa:	d02a      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005efc:	2b80      	cmp	r3, #128	; 0x80
 8005efe:	d825      	bhi.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f00:	2b60      	cmp	r3, #96	; 0x60
 8005f02:	d026      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f04:	2b60      	cmp	r3, #96	; 0x60
 8005f06:	d821      	bhi.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f08:	2b40      	cmp	r3, #64	; 0x40
 8005f0a:	d006      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005f0c:	2b40      	cmp	r3, #64	; 0x40
 8005f0e:	d81d      	bhi.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d009      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d010      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005f18:	e018      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f1a:	4b89      	ldr	r3, [pc, #548]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	4a88      	ldr	r2, [pc, #544]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f24:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f26:	e015      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f001 fa24 	bl	800737c <RCCEx_PLLSAI1_Config>
 8005f34:	4603      	mov	r3, r0
 8005f36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f38:	e00c      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3320      	adds	r3, #32
 8005f3e:	2100      	movs	r1, #0
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 fb0f 	bl	8007564 <RCCEx_PLLSAI2_Config>
 8005f46:	4603      	mov	r3, r0
 8005f48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f4a:	e003      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	74fb      	strb	r3, [r7, #19]
      break;
 8005f50:	e000      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f54:	7cfb      	ldrb	r3, [r7, #19]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10b      	bne.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f5a:	4b79      	ldr	r3, [pc, #484]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f60:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f68:	4975      	ldr	r1, [pc, #468]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005f70:	e001      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f72:	7cfb      	ldrb	r3, [r7, #19]
 8005f74:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d047      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f8a:	d030      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f90:	d82a      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f96:	d02a      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f9c:	d824      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa2:	d008      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa8:	d81e      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb2:	d010      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005fb4:	e018      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005fb6:	4b62      	ldr	r3, [pc, #392]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	4a61      	ldr	r2, [pc, #388]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fc2:	e015      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	2100      	movs	r1, #0
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f001 f9d6 	bl	800737c <RCCEx_PLLSAI1_Config>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fd4:	e00c      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	3320      	adds	r3, #32
 8005fda:	2100      	movs	r1, #0
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f001 fac1 	bl	8007564 <RCCEx_PLLSAI2_Config>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fe6:	e003      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	74fb      	strb	r3, [r7, #19]
      break;
 8005fec:	e000      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ff0:	7cfb      	ldrb	r3, [r7, #19]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10b      	bne.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ff6:	4b52      	ldr	r3, [pc, #328]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ff8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006004:	494e      	ldr	r1, [pc, #312]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006006:	4313      	orrs	r3, r2
 8006008:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800600c:	e001      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800600e:	7cfb      	ldrb	r3, [r7, #19]
 8006010:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 809f 	beq.w	800615e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006020:	2300      	movs	r3, #0
 8006022:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006024:	4b46      	ldr	r3, [pc, #280]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006030:	2301      	movs	r3, #1
 8006032:	e000      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006034:	2300      	movs	r3, #0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00d      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800603a:	4b41      	ldr	r3, [pc, #260]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800603c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603e:	4a40      	ldr	r2, [pc, #256]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006044:	6593      	str	r3, [r2, #88]	; 0x58
 8006046:	4b3e      	ldr	r3, [pc, #248]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800604e:	60bb      	str	r3, [r7, #8]
 8006050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006052:	2301      	movs	r3, #1
 8006054:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006056:	4b3b      	ldr	r3, [pc, #236]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a3a      	ldr	r2, [pc, #232]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800605c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006060:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006062:	f7fc fff3 	bl	800304c <HAL_GetTick>
 8006066:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006068:	e009      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606a:	f7fc ffef 	bl	800304c <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d902      	bls.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	74fb      	strb	r3, [r7, #19]
        break;
 800607c:	e005      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800607e:	4b31      	ldr	r3, [pc, #196]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0ef      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800608a:	7cfb      	ldrb	r3, [r7, #19]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d15b      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006090:	4b2b      	ldr	r3, [pc, #172]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800609a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d01f      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d019      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060ae:	4b24      	ldr	r3, [pc, #144]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060ba:	4b21      	ldr	r3, [pc, #132]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c0:	4a1f      	ldr	r2, [pc, #124]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060ca:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d0:	4a1b      	ldr	r2, [pc, #108]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060da:	4a19      	ldr	r2, [pc, #100]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d016      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ec:	f7fc ffae 	bl	800304c <HAL_GetTick>
 80060f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060f2:	e00b      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f4:	f7fc ffaa 	bl	800304c <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006102:	4293      	cmp	r3, r2
 8006104:	d902      	bls.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	74fb      	strb	r3, [r7, #19]
            break;
 800610a:	e006      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800610c:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800610e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0ec      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800611a:	7cfb      	ldrb	r3, [r7, #19]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10c      	bne.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006120:	4b07      	ldr	r3, [pc, #28]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006126:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006130:	4903      	ldr	r1, [pc, #12]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006132:	4313      	orrs	r3, r2
 8006134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006138:	e008      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800613a:	7cfb      	ldrb	r3, [r7, #19]
 800613c:	74bb      	strb	r3, [r7, #18]
 800613e:	e005      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006140:	40021000 	.word	0x40021000
 8006144:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006148:	7cfb      	ldrb	r3, [r7, #19]
 800614a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800614c:	7c7b      	ldrb	r3, [r7, #17]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d105      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006152:	4ba0      	ldr	r3, [pc, #640]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006156:	4a9f      	ldr	r2, [pc, #636]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800615c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800616a:	4b9a      	ldr	r3, [pc, #616]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800616c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006170:	f023 0203 	bic.w	r2, r3, #3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006178:	4996      	ldr	r1, [pc, #600]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800617a:	4313      	orrs	r3, r2
 800617c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800618c:	4b91      	ldr	r3, [pc, #580]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800618e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006192:	f023 020c 	bic.w	r2, r3, #12
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	498e      	ldr	r1, [pc, #568]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800619c:	4313      	orrs	r3, r2
 800619e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0304 	and.w	r3, r3, #4
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061ae:	4b89      	ldr	r3, [pc, #548]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061bc:	4985      	ldr	r1, [pc, #532]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0308 	and.w	r3, r3, #8
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061d0:	4b80      	ldr	r3, [pc, #512]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061de:	497d      	ldr	r1, [pc, #500]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0310 	and.w	r3, r3, #16
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061f2:	4b78      	ldr	r3, [pc, #480]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006200:	4974      	ldr	r1, [pc, #464]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006202:	4313      	orrs	r3, r2
 8006204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006214:	4b6f      	ldr	r3, [pc, #444]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006222:	496c      	ldr	r1, [pc, #432]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006224:	4313      	orrs	r3, r2
 8006226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006236:	4b67      	ldr	r3, [pc, #412]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006244:	4963      	ldr	r1, [pc, #396]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006246:	4313      	orrs	r3, r2
 8006248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00a      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006258:	4b5e      	ldr	r3, [pc, #376]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800625a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006266:	495b      	ldr	r1, [pc, #364]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006268:	4313      	orrs	r3, r2
 800626a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800627a:	4b56      	ldr	r3, [pc, #344]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800627c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006280:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006288:	4952      	ldr	r1, [pc, #328]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800628a:	4313      	orrs	r3, r2
 800628c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00a      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800629c:	4b4d      	ldr	r3, [pc, #308]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800629e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062aa:	494a      	ldr	r1, [pc, #296]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062be:	4b45      	ldr	r3, [pc, #276]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062cc:	4941      	ldr	r1, [pc, #260]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00a      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062e0:	4b3c      	ldr	r3, [pc, #240]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062e6:	f023 0203 	bic.w	r2, r3, #3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ee:	4939      	ldr	r1, [pc, #228]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d028      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006302:	4b34      	ldr	r3, [pc, #208]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006308:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006310:	4930      	ldr	r1, [pc, #192]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006312:	4313      	orrs	r3, r2
 8006314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800631c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006320:	d106      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006322:	4b2c      	ldr	r3, [pc, #176]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	4a2b      	ldr	r2, [pc, #172]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800632c:	60d3      	str	r3, [r2, #12]
 800632e:	e011      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006338:	d10c      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	3304      	adds	r3, #4
 800633e:	2101      	movs	r1, #1
 8006340:	4618      	mov	r0, r3
 8006342:	f001 f81b 	bl	800737c <RCCEx_PLLSAI1_Config>
 8006346:	4603      	mov	r3, r0
 8006348:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800634a:	7cfb      	ldrb	r3, [r7, #19]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006350:	7cfb      	ldrb	r3, [r7, #19]
 8006352:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d04d      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006368:	d108      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800636a:	4b1a      	ldr	r3, [pc, #104]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800636c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006370:	4a18      	ldr	r2, [pc, #96]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006376:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800637a:	e012      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800637c:	4b15      	ldr	r3, [pc, #84]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800637e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006382:	4a14      	ldr	r2, [pc, #80]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006384:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006388:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800638c:	4b11      	ldr	r3, [pc, #68]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800638e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006392:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800639a:	490e      	ldr	r1, [pc, #56]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800639c:	4313      	orrs	r3, r2
 800639e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063aa:	d106      	bne.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063ac:	4b09      	ldr	r3, [pc, #36]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	4a08      	ldr	r2, [pc, #32]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063b6:	60d3      	str	r3, [r2, #12]
 80063b8:	e020      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063c2:	d109      	bne.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80063c4:	4b03      	ldr	r3, [pc, #12]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	4a02      	ldr	r2, [pc, #8]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ce:	60d3      	str	r3, [r2, #12]
 80063d0:	e014      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80063d2:	bf00      	nop
 80063d4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063e0:	d10c      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3304      	adds	r3, #4
 80063e6:	2101      	movs	r1, #1
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 ffc7 	bl	800737c <RCCEx_PLLSAI1_Config>
 80063ee:	4603      	mov	r3, r0
 80063f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063f2:	7cfb      	ldrb	r3, [r7, #19]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80063f8:	7cfb      	ldrb	r3, [r7, #19]
 80063fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d028      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006408:	4b4a      	ldr	r3, [pc, #296]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800640a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006416:	4947      	ldr	r1, [pc, #284]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006418:	4313      	orrs	r3, r2
 800641a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006422:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006426:	d106      	bne.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006428:	4b42      	ldr	r3, [pc, #264]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	4a41      	ldr	r2, [pc, #260]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800642e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006432:	60d3      	str	r3, [r2, #12]
 8006434:	e011      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800643a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800643e:	d10c      	bne.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3304      	adds	r3, #4
 8006444:	2101      	movs	r1, #1
 8006446:	4618      	mov	r0, r3
 8006448:	f000 ff98 	bl	800737c <RCCEx_PLLSAI1_Config>
 800644c:	4603      	mov	r3, r0
 800644e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006450:	7cfb      	ldrb	r3, [r7, #19]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006456:	7cfb      	ldrb	r3, [r7, #19]
 8006458:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d01e      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006466:	4b33      	ldr	r3, [pc, #204]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006476:	492f      	ldr	r1, [pc, #188]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006478:	4313      	orrs	r3, r2
 800647a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006484:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006488:	d10c      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3304      	adds	r3, #4
 800648e:	2102      	movs	r1, #2
 8006490:	4618      	mov	r0, r3
 8006492:	f000 ff73 	bl	800737c <RCCEx_PLLSAI1_Config>
 8006496:	4603      	mov	r3, r0
 8006498:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800649a:	7cfb      	ldrb	r3, [r7, #19]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80064a0:	7cfb      	ldrb	r3, [r7, #19]
 80064a2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00b      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064b0:	4b20      	ldr	r3, [pc, #128]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064b6:	f023 0204 	bic.w	r2, r3, #4
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064c0:	491c      	ldr	r1, [pc, #112]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00b      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80064d4:	4b17      	ldr	r3, [pc, #92]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064da:	f023 0218 	bic.w	r2, r3, #24
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e4:	4913      	ldr	r1, [pc, #76]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d017      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80064f8:	4b0e      	ldr	r3, [pc, #56]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006508:	490a      	ldr	r1, [pc, #40]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800650a:	4313      	orrs	r3, r2
 800650c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006516:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800651a:	d105      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800651c:	4b05      	ldr	r3, [pc, #20]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	4a04      	ldr	r2, [pc, #16]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006526:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006528:	7cbb      	ldrb	r3, [r7, #18]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	40021000 	.word	0x40021000

08006538 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b088      	sub	sp, #32
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800654a:	d13e      	bne.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800654c:	4bb6      	ldr	r3, [pc, #728]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800654e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006556:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800655e:	d028      	beq.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006566:	f200 86f4 	bhi.w	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006570:	d005      	beq.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006578:	d00e      	beq.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800657a:	f000 beea 	b.w	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800657e:	4baa      	ldr	r3, [pc, #680]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b02      	cmp	r3, #2
 800658a:	f040 86e4 	bne.w	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800658e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006592:	61fb      	str	r3, [r7, #28]
      break;
 8006594:	f000 bedf 	b.w	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006598:	4ba3      	ldr	r3, [pc, #652]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800659a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	f040 86d9 	bne.w	800735a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80065a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80065ac:	61fb      	str	r3, [r7, #28]
      break;
 80065ae:	f000 bed4 	b.w	800735a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80065b2:	4b9d      	ldr	r3, [pc, #628]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065be:	f040 86ce 	bne.w	800735e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 80065c2:	4b9a      	ldr	r3, [pc, #616]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80065c4:	61fb      	str	r3, [r7, #28]
      break;
 80065c6:	f000 beca 	b.w	800735e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065ca:	4b97      	ldr	r3, [pc, #604]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	d036      	beq.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d840      	bhi.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d003      	beq.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d020      	beq.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80065ec:	e039      	b.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80065ee:	4b8e      	ldr	r3, [pc, #568]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d116      	bne.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80065fa:	4b8b      	ldr	r3, [pc, #556]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d005      	beq.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006606:	4b88      	ldr	r3, [pc, #544]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	091b      	lsrs	r3, r3, #4
 800660c:	f003 030f 	and.w	r3, r3, #15
 8006610:	e005      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006612:	4b85      	ldr	r3, [pc, #532]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006618:	0a1b      	lsrs	r3, r3, #8
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	4a84      	ldr	r2, [pc, #528]	; (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006624:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006626:	e01f      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	61bb      	str	r3, [r7, #24]
      break;
 800662c:	e01c      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800662e:	4b7e      	ldr	r3, [pc, #504]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800663a:	d102      	bne.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800663c:	4b7d      	ldr	r3, [pc, #500]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800663e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006640:	e012      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	61bb      	str	r3, [r7, #24]
      break;
 8006646:	e00f      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006648:	4b77      	ldr	r3, [pc, #476]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006654:	d102      	bne.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8006656:	4b78      	ldr	r3, [pc, #480]	; (8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006658:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800665a:	e005      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	61bb      	str	r3, [r7, #24]
      break;
 8006660:	e002      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	61bb      	str	r3, [r7, #24]
      break;
 8006666:	bf00      	nop
    }

    switch(PeriphClk)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800666e:	f000 8606 	beq.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006678:	f200 8673 	bhi.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006682:	f000 8469 	beq.w	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800668c:	f200 8669 	bhi.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006696:	f000 8531 	beq.w	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066a0:	f200 865f 	bhi.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066aa:	f000 8187 	beq.w	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066b4:	f200 8655 	bhi.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066be:	f000 80cd 	beq.w	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066c8:	f200 864b 	bhi.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d2:	f000 8430 	beq.w	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066dc:	f200 8641 	bhi.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066e6:	f000 83e4 	beq.w	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066f0:	f200 8637 	bhi.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066fa:	f000 80af 	beq.w	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006704:	f200 862d 	bhi.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670e:	f000 809d 	beq.w	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006718:	f200 8623 	bhi.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006722:	f000 808b 	beq.w	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800672c:	f200 8619 	bhi.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006736:	f000 8554 	beq.w	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006740:	f200 860f 	bhi.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800674a:	f000 8500 	beq.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006754:	f200 8605 	bhi.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800675e:	f000 84a1 	beq.w	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006768:	f200 85fb 	bhi.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b80      	cmp	r3, #128	; 0x80
 8006770:	f000 846c 	beq.w	800704c <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b80      	cmp	r3, #128	; 0x80
 8006778:	f200 85f3 	bhi.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b20      	cmp	r3, #32
 8006780:	d84c      	bhi.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 85ec 	beq.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3b01      	subs	r3, #1
 800678e:	2b1f      	cmp	r3, #31
 8006790:	f200 85e7 	bhi.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006794:	a201      	add	r2, pc, #4	; (adr r2, 800679c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679a:	bf00      	nop
 800679c:	08006bb1 	.word	0x08006bb1
 80067a0:	08006c1f 	.word	0x08006c1f
 80067a4:	08007363 	.word	0x08007363
 80067a8:	08006cb3 	.word	0x08006cb3
 80067ac:	08007363 	.word	0x08007363
 80067b0:	08007363 	.word	0x08007363
 80067b4:	08007363 	.word	0x08007363
 80067b8:	08006d2b 	.word	0x08006d2b
 80067bc:	08007363 	.word	0x08007363
 80067c0:	08007363 	.word	0x08007363
 80067c4:	08007363 	.word	0x08007363
 80067c8:	08007363 	.word	0x08007363
 80067cc:	08007363 	.word	0x08007363
 80067d0:	08007363 	.word	0x08007363
 80067d4:	08007363 	.word	0x08007363
 80067d8:	08006daf 	.word	0x08006daf
 80067dc:	08007363 	.word	0x08007363
 80067e0:	08007363 	.word	0x08007363
 80067e4:	08007363 	.word	0x08007363
 80067e8:	08007363 	.word	0x08007363
 80067ec:	08007363 	.word	0x08007363
 80067f0:	08007363 	.word	0x08007363
 80067f4:	08007363 	.word	0x08007363
 80067f8:	08007363 	.word	0x08007363
 80067fc:	08007363 	.word	0x08007363
 8006800:	08007363 	.word	0x08007363
 8006804:	08007363 	.word	0x08007363
 8006808:	08007363 	.word	0x08007363
 800680c:	08007363 	.word	0x08007363
 8006810:	08007363 	.word	0x08007363
 8006814:	08007363 	.word	0x08007363
 8006818:	08006e31 	.word	0x08006e31
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b40      	cmp	r3, #64	; 0x40
 8006820:	f000 83e8 	beq.w	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006824:	f000 bd9d 	b.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006828:	40021000 	.word	0x40021000
 800682c:	0003d090 	.word	0x0003d090
 8006830:	0800c1b4 	.word	0x0800c1b4
 8006834:	00f42400 	.word	0x00f42400
 8006838:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800683c:	69b9      	ldr	r1, [r7, #24]
 800683e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006842:	f000 ff83 	bl	800774c <RCCEx_GetSAIxPeriphCLKFreq>
 8006846:	61f8      	str	r0, [r7, #28]
      break;
 8006848:	f000 bd8e 	b.w	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800684c:	69b9      	ldr	r1, [r7, #24]
 800684e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006852:	f000 ff7b 	bl	800774c <RCCEx_GetSAIxPeriphCLKFreq>
 8006856:	61f8      	str	r0, [r7, #28]
      break;
 8006858:	f000 bd86 	b.w	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800685c:	4b9a      	ldr	r3, [pc, #616]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800685e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006862:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800686e:	d015      	beq.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006876:	f200 8092 	bhi.w	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006880:	d029      	beq.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006888:	f200 8089 	bhi.w	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d07b      	beq.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006898:	d04a      	beq.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800689a:	e080      	b.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800689c:	4b8a      	ldr	r3, [pc, #552]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d17d      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80068a8:	4b87      	ldr	r3, [pc, #540]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80068b4:	4b84      	ldr	r3, [pc, #528]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	091b      	lsrs	r3, r3, #4
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	e005      	b.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80068c0:	4b81      	ldr	r3, [pc, #516]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068c6:	0a1b      	lsrs	r3, r3, #8
 80068c8:	f003 030f 	and.w	r3, r3, #15
 80068cc:	4a7f      	ldr	r2, [pc, #508]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80068ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068d2:	61fb      	str	r3, [r7, #28]
          break;
 80068d4:	e066      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80068d6:	4b7c      	ldr	r3, [pc, #496]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068e2:	d162      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80068e4:	4b78      	ldr	r3, [pc, #480]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068f0:	d15b      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80068f2:	4b75      	ldr	r3, [pc, #468]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	0a1b      	lsrs	r3, r3, #8
 80068f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068fc:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	fb03 f202 	mul.w	r2, r3, r2
 8006906:	4b70      	ldr	r3, [pc, #448]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	091b      	lsrs	r3, r3, #4
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	3301      	adds	r3, #1
 8006912:	fbb2 f3f3 	udiv	r3, r2, r3
 8006916:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006918:	4b6b      	ldr	r3, [pc, #428]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	0d5b      	lsrs	r3, r3, #21
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	3301      	adds	r3, #1
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	fbb2 f3f3 	udiv	r3, r2, r3
 800692c:	61fb      	str	r3, [r7, #28]
          break;
 800692e:	e03c      	b.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006930:	4b65      	ldr	r3, [pc, #404]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800693c:	d138      	bne.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800693e:	4b62      	ldr	r3, [pc, #392]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800694a:	d131      	bne.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800694c:	4b5e      	ldr	r3, [pc, #376]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	0a1b      	lsrs	r3, r3, #8
 8006952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006956:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	fb03 f202 	mul.w	r2, r3, r2
 8006960:	4b59      	ldr	r3, [pc, #356]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	091b      	lsrs	r3, r3, #4
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	3301      	adds	r3, #1
 800696c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006970:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006972:	4b55      	ldr	r3, [pc, #340]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	0d5b      	lsrs	r3, r3, #21
 8006978:	f003 0303 	and.w	r3, r3, #3
 800697c:	3301      	adds	r3, #1
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	fbb2 f3f3 	udiv	r3, r2, r3
 8006986:	61fb      	str	r3, [r7, #28]
          break;
 8006988:	e012      	b.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800698a:	4b4f      	ldr	r3, [pc, #316]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800698c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b02      	cmp	r3, #2
 8006996:	d10e      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8006998:	4b4d      	ldr	r3, [pc, #308]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800699a:	61fb      	str	r3, [r7, #28]
          break;
 800699c:	e00b      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800699e:	bf00      	nop
 80069a0:	f000 bce2 	b.w	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069a4:	bf00      	nop
 80069a6:	f000 bcdf 	b.w	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069aa:	bf00      	nop
 80069ac:	f000 bcdc 	b.w	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069b0:	bf00      	nop
 80069b2:	f000 bcd9 	b.w	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069b6:	bf00      	nop
        break;
 80069b8:	f000 bcd6 	b.w	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80069bc:	4b42      	ldr	r3, [pc, #264]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ca:	d13d      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80069cc:	4b3e      	ldr	r3, [pc, #248]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069d8:	f040 84c5 	bne.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80069dc:	4b3a      	ldr	r3, [pc, #232]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069e8:	f040 84bd 	bne.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80069ec:	4b36      	ldr	r3, [pc, #216]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	0a1b      	lsrs	r3, r3, #8
 80069f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069f6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	fb03 f202 	mul.w	r2, r3, r2
 8006a00:	4b31      	ldr	r3, [pc, #196]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	091b      	lsrs	r3, r3, #4
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a10:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006a12:	4b2d      	ldr	r3, [pc, #180]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	0edb      	lsrs	r3, r3, #27
 8006a18:	f003 031f 	and.w	r3, r3, #31
 8006a1c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10a      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006a24:	4b28      	ldr	r3, [pc, #160]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8006a30:	2311      	movs	r3, #17
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	e001      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8006a36:	2307      	movs	r3, #7
 8006a38:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a42:	61fb      	str	r3, [r7, #28]
      break;
 8006a44:	f000 bc8f 	b.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006a48:	4b1f      	ldr	r3, [pc, #124]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006a5a:	d016      	beq.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006a62:	f200 809b 	bhi.w	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a6c:	d032      	beq.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a74:	f200 8092 	bhi.w	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8084 	beq.w	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a86:	d052      	beq.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8006a88:	e088      	b.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006a8a:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	f040 8084 	bne.w	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006a98:	4b0b      	ldr	r3, [pc, #44]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0308 	and.w	r3, r3, #8
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006aa4:	4b08      	ldr	r3, [pc, #32]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	091b      	lsrs	r3, r3, #4
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	e005      	b.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8006ab0:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ab6:	0a1b      	lsrs	r3, r3, #8
 8006ab8:	f003 030f 	and.w	r3, r3, #15
 8006abc:	4a03      	ldr	r2, [pc, #12]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ac2:	61fb      	str	r3, [r7, #28]
          break;
 8006ac4:	e06c      	b.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8006ac6:	bf00      	nop
 8006ac8:	40021000 	.word	0x40021000
 8006acc:	0800c1b4 	.word	0x0800c1b4
 8006ad0:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006ad4:	4ba5      	ldr	r3, [pc, #660]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006adc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ae0:	d160      	bne.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006ae2:	4ba2      	ldr	r3, [pc, #648]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aee:	d159      	bne.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006af0:	4b9e      	ldr	r3, [pc, #632]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	0a1b      	lsrs	r3, r3, #8
 8006af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006afa:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	fb03 f202 	mul.w	r2, r3, r2
 8006b04:	4b99      	ldr	r3, [pc, #612]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	091b      	lsrs	r3, r3, #4
 8006b0a:	f003 030f 	and.w	r3, r3, #15
 8006b0e:	3301      	adds	r3, #1
 8006b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b14:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006b16:	4b95      	ldr	r3, [pc, #596]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	0d5b      	lsrs	r3, r3, #21
 8006b1c:	f003 0303 	and.w	r3, r3, #3
 8006b20:	3301      	adds	r3, #1
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2a:	61fb      	str	r3, [r7, #28]
          break;
 8006b2c:	e03a      	b.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006b2e:	4b8f      	ldr	r3, [pc, #572]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b3a:	d135      	bne.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006b3c:	4b8b      	ldr	r3, [pc, #556]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b48:	d12e      	bne.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006b4a:	4b88      	ldr	r3, [pc, #544]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	0a1b      	lsrs	r3, r3, #8
 8006b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b54:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	fb03 f202 	mul.w	r2, r3, r2
 8006b5e:	4b83      	ldr	r3, [pc, #524]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	091b      	lsrs	r3, r3, #4
 8006b64:	f003 030f 	and.w	r3, r3, #15
 8006b68:	3301      	adds	r3, #1
 8006b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006b70:	4b7e      	ldr	r3, [pc, #504]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	0d5b      	lsrs	r3, r3, #21
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b84:	61fb      	str	r3, [r7, #28]
          break;
 8006b86:	e00f      	b.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006b88:	4b78      	ldr	r3, [pc, #480]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d10a      	bne.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8006b96:	4b76      	ldr	r3, [pc, #472]	; (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006b98:	61fb      	str	r3, [r7, #28]
          break;
 8006b9a:	e007      	b.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8006b9c:	bf00      	nop
 8006b9e:	e3e2      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006ba0:	bf00      	nop
 8006ba2:	e3e0      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006ba4:	bf00      	nop
 8006ba6:	e3de      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006ba8:	bf00      	nop
 8006baa:	e3dc      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006bac:	bf00      	nop
      break;
 8006bae:	e3da      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006bb0:	4b6e      	ldr	r3, [pc, #440]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d827      	bhi.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006bc2:	a201      	add	r2, pc, #4	; (adr r2, 8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8006bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc8:	08006bd9 	.word	0x08006bd9
 8006bcc:	08006be1 	.word	0x08006be1
 8006bd0:	08006be9 	.word	0x08006be9
 8006bd4:	08006bfd 	.word	0x08006bfd
          frequency = HAL_RCC_GetPCLK2Freq();
 8006bd8:	f7ff f8a8 	bl	8005d2c <HAL_RCC_GetPCLK2Freq>
 8006bdc:	61f8      	str	r0, [r7, #28]
          break;
 8006bde:	e01d      	b.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006be0:	f7fe fff6 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8006be4:	61f8      	str	r0, [r7, #28]
          break;
 8006be6:	e019      	b.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006be8:	4b60      	ldr	r3, [pc, #384]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bf4:	d10f      	bne.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8006bf6:	4b5f      	ldr	r3, [pc, #380]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006bf8:	61fb      	str	r3, [r7, #28]
          break;
 8006bfa:	e00c      	b.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006bfc:	4b5b      	ldr	r3, [pc, #364]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d107      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8006c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c0e:	61fb      	str	r3, [r7, #28]
          break;
 8006c10:	e003      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8006c12:	bf00      	nop
 8006c14:	e3a8      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c16:	bf00      	nop
 8006c18:	e3a6      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c1a:	bf00      	nop
        break;
 8006c1c:	e3a4      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006c1e:	4b53      	ldr	r3, [pc, #332]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c24:	f003 030c 	and.w	r3, r3, #12
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b0c      	cmp	r3, #12
 8006c2e:	d83a      	bhi.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006c30:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8006c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c36:	bf00      	nop
 8006c38:	08006c6d 	.word	0x08006c6d
 8006c3c:	08006ca7 	.word	0x08006ca7
 8006c40:	08006ca7 	.word	0x08006ca7
 8006c44:	08006ca7 	.word	0x08006ca7
 8006c48:	08006c75 	.word	0x08006c75
 8006c4c:	08006ca7 	.word	0x08006ca7
 8006c50:	08006ca7 	.word	0x08006ca7
 8006c54:	08006ca7 	.word	0x08006ca7
 8006c58:	08006c7d 	.word	0x08006c7d
 8006c5c:	08006ca7 	.word	0x08006ca7
 8006c60:	08006ca7 	.word	0x08006ca7
 8006c64:	08006ca7 	.word	0x08006ca7
 8006c68:	08006c91 	.word	0x08006c91
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c6c:	f7ff f848 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 8006c70:	61f8      	str	r0, [r7, #28]
          break;
 8006c72:	e01d      	b.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c74:	f7fe ffac 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8006c78:	61f8      	str	r0, [r7, #28]
          break;
 8006c7a:	e019      	b.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c7c:	4b3b      	ldr	r3, [pc, #236]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c88:	d10f      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8006c8a:	4b3a      	ldr	r3, [pc, #232]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c8c:	61fb      	str	r3, [r7, #28]
          break;
 8006c8e:	e00c      	b.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c90:	4b36      	ldr	r3, [pc, #216]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d107      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8006c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ca2:	61fb      	str	r3, [r7, #28]
          break;
 8006ca4:	e003      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8006ca6:	bf00      	nop
 8006ca8:	e35e      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006caa:	bf00      	nop
 8006cac:	e35c      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006cae:	bf00      	nop
        break;
 8006cb0:	e35a      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006cb2:	4b2e      	ldr	r3, [pc, #184]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b30      	cmp	r3, #48	; 0x30
 8006cc2:	d021      	beq.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b30      	cmp	r3, #48	; 0x30
 8006cc8:	d829      	bhi.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b20      	cmp	r3, #32
 8006cce:	d011      	beq.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	d823      	bhi.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b10      	cmp	r3, #16
 8006ce0:	d004      	beq.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8006ce2:	e01c      	b.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ce4:	f7ff f80c 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 8006ce8:	61f8      	str	r0, [r7, #28]
          break;
 8006cea:	e01d      	b.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006cec:	f7fe ff70 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8006cf0:	61f8      	str	r0, [r7, #28]
          break;
 8006cf2:	e019      	b.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cf4:	4b1d      	ldr	r3, [pc, #116]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d00:	d10f      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8006d02:	4b1c      	ldr	r3, [pc, #112]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d04:	61fb      	str	r3, [r7, #28]
          break;
 8006d06:	e00c      	b.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d08:	4b18      	ldr	r3, [pc, #96]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d107      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8006d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d1a:	61fb      	str	r3, [r7, #28]
          break;
 8006d1c:	e003      	b.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8006d1e:	bf00      	nop
 8006d20:	e322      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006d22:	bf00      	nop
 8006d24:	e320      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006d26:	bf00      	nop
        break;
 8006d28:	e31e      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006d2a:	4b10      	ldr	r3, [pc, #64]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2bc0      	cmp	r3, #192	; 0xc0
 8006d3a:	d027      	beq.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2bc0      	cmp	r3, #192	; 0xc0
 8006d40:	d82f      	bhi.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2b80      	cmp	r3, #128	; 0x80
 8006d46:	d017      	beq.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2b80      	cmp	r3, #128	; 0x80
 8006d4c:	d829      	bhi.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b40      	cmp	r3, #64	; 0x40
 8006d58:	d004      	beq.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8006d5a:	e022      	b.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d5c:	f7fe ffd0 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 8006d60:	61f8      	str	r0, [r7, #28]
          break;
 8006d62:	e023      	b.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d64:	f7fe ff34 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8006d68:	61f8      	str	r0, [r7, #28]
          break;
 8006d6a:	e01f      	b.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8006d6c:	40021000 	.word	0x40021000
 8006d70:	02dc6c00 	.word	0x02dc6c00
 8006d74:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d78:	4b9b      	ldr	r3, [pc, #620]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d84:	d10f      	bne.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8006d86:	4b99      	ldr	r3, [pc, #612]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006d88:	61fb      	str	r3, [r7, #28]
          break;
 8006d8a:	e00c      	b.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d8c:	4b96      	ldr	r3, [pc, #600]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d107      	bne.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8006d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d9e:	61fb      	str	r3, [r7, #28]
          break;
 8006da0:	e003      	b.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8006da2:	bf00      	nop
 8006da4:	e2e0      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006da6:	bf00      	nop
 8006da8:	e2de      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006daa:	bf00      	nop
        break;
 8006dac:	e2dc      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006dae:	4b8e      	ldr	r3, [pc, #568]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006db8:	60fb      	str	r3, [r7, #12]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dc0:	d025      	beq.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dc8:	d82c      	bhi.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd0:	d013      	beq.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd8:	d824      	bhi.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d004      	beq.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de6:	d004      	beq.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8006de8:	e01c      	b.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006dea:	f7fe ff89 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 8006dee:	61f8      	str	r0, [r7, #28]
          break;
 8006df0:	e01d      	b.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006df2:	f7fe feed 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8006df6:	61f8      	str	r0, [r7, #28]
          break;
 8006df8:	e019      	b.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006dfa:	4b7b      	ldr	r3, [pc, #492]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e06:	d10f      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8006e08:	4b78      	ldr	r3, [pc, #480]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006e0a:	61fb      	str	r3, [r7, #28]
          break;
 8006e0c:	e00c      	b.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e0e:	4b76      	ldr	r3, [pc, #472]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d107      	bne.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8006e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e20:	61fb      	str	r3, [r7, #28]
          break;
 8006e22:	e003      	b.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8006e24:	bf00      	nop
 8006e26:	e29f      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e28:	bf00      	nop
 8006e2a:	e29d      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e2c:	bf00      	nop
        break;
 8006e2e:	e29b      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006e30:	4b6d      	ldr	r3, [pc, #436]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e42:	d025      	beq.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e4a:	d82c      	bhi.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e52:	d013      	beq.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e5a:	d824      	bhi.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d004      	beq.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e68:	d004      	beq.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8006e6a:	e01c      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e6c:	f7fe ff48 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 8006e70:	61f8      	str	r0, [r7, #28]
          break;
 8006e72:	e01d      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e74:	f7fe feac 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8006e78:	61f8      	str	r0, [r7, #28]
          break;
 8006e7a:	e019      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e7c:	4b5a      	ldr	r3, [pc, #360]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e88:	d10f      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8006e8a:	4b58      	ldr	r3, [pc, #352]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006e8c:	61fb      	str	r3, [r7, #28]
          break;
 8006e8e:	e00c      	b.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e90:	4b55      	ldr	r3, [pc, #340]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d107      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8006e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ea2:	61fb      	str	r3, [r7, #28]
          break;
 8006ea4:	e003      	b.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8006ea6:	bf00      	nop
 8006ea8:	e25e      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006eaa:	bf00      	nop
 8006eac:	e25c      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006eae:	bf00      	nop
        break;
 8006eb0:	e25a      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006eb2:	4b4d      	ldr	r3, [pc, #308]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ec4:	d007      	beq.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ecc:	d12f      	bne.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ece:	f7fe fe7f 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8006ed2:	61f8      	str	r0, [r7, #28]
          break;
 8006ed4:	e02e      	b.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006ed6:	4b44      	ldr	r3, [pc, #272]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ee2:	d126      	bne.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006ee4:	4b40      	ldr	r3, [pc, #256]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d020      	beq.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006ef0:	4b3d      	ldr	r3, [pc, #244]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	0a1b      	lsrs	r3, r3, #8
 8006ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006efa:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	fb03 f202 	mul.w	r2, r3, r2
 8006f04:	4b38      	ldr	r3, [pc, #224]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	091b      	lsrs	r3, r3, #4
 8006f0a:	f003 030f 	and.w	r3, r3, #15
 8006f0e:	3301      	adds	r3, #1
 8006f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f14:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006f16:	4b34      	ldr	r3, [pc, #208]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	0e5b      	lsrs	r3, r3, #25
 8006f1c:	f003 0303 	and.w	r3, r3, #3
 8006f20:	3301      	adds	r3, #1
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f2a:	61fb      	str	r3, [r7, #28]
          break;
 8006f2c:	e001      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8006f2e:	bf00      	nop
 8006f30:	e21a      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f32:	bf00      	nop
        break;
 8006f34:	e218      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006f36:	4b2c      	ldr	r3, [pc, #176]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d103      	bne.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006f48:	f7fe fef0 	bl	8005d2c <HAL_RCC_GetPCLK2Freq>
 8006f4c:	61f8      	str	r0, [r7, #28]
        break;
 8006f4e:	e20b      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f50:	f7fe fe3e 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8006f54:	61f8      	str	r0, [r7, #28]
        break;
 8006f56:	e207      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006f58:	4b23      	ldr	r3, [pc, #140]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f5e:	f003 0318 	and.w	r3, r3, #24
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b10      	cmp	r3, #16
 8006f68:	d010      	beq.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b10      	cmp	r3, #16
 8006f6e:	d834      	bhi.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d024      	beq.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8006f7c:	e02d      	b.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006f7e:	69b9      	ldr	r1, [r7, #24]
 8006f80:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006f84:	f000 fbe2 	bl	800774c <RCCEx_GetSAIxPeriphCLKFreq>
 8006f88:	61f8      	str	r0, [r7, #28]
          break;
 8006f8a:	e02b      	b.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006f8c:	4b16      	ldr	r3, [pc, #88]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d122      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006f98:	4b13      	ldr	r3, [pc, #76]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0308 	and.w	r3, r3, #8
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d005      	beq.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8006fa4:	4b10      	ldr	r3, [pc, #64]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	091b      	lsrs	r3, r3, #4
 8006faa:	f003 030f 	and.w	r3, r3, #15
 8006fae:	e005      	b.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006fb0:	4b0d      	ldr	r3, [pc, #52]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fb6:	0a1b      	lsrs	r3, r3, #8
 8006fb8:	f003 030f 	and.w	r3, r3, #15
 8006fbc:	4a0c      	ldr	r2, [pc, #48]	; (8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc2:	61fb      	str	r3, [r7, #28]
          break;
 8006fc4:	e00b      	b.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fc6:	4b08      	ldr	r3, [pc, #32]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd2:	d106      	bne.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8006fd4:	4b05      	ldr	r3, [pc, #20]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006fd6:	61fb      	str	r3, [r7, #28]
          break;
 8006fd8:	e003      	b.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8006fda:	bf00      	nop
 8006fdc:	e1c4      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006fde:	bf00      	nop
 8006fe0:	e1c2      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006fe2:	bf00      	nop
        break;
 8006fe4:	e1c0      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8006fe6:	bf00      	nop
 8006fe8:	40021000 	.word	0x40021000
 8006fec:	00f42400 	.word	0x00f42400
 8006ff0:	0800c1b4 	.word	0x0800c1b4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006ff4:	4b96      	ldr	r3, [pc, #600]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ffa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007006:	d013      	beq.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800700e:	d819      	bhi.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d004      	beq.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800701c:	d004      	beq.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800701e:	e011      	b.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007020:	f7fe fe6e 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 8007024:	61f8      	str	r0, [r7, #28]
          break;
 8007026:	e010      	b.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8007028:	f7fe fdd2 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 800702c:	61f8      	str	r0, [r7, #28]
          break;
 800702e:	e00c      	b.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007030:	4b87      	ldr	r3, [pc, #540]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800703c:	d104      	bne.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800703e:	4b85      	ldr	r3, [pc, #532]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007040:	61fb      	str	r3, [r7, #28]
          break;
 8007042:	e001      	b.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8007044:	bf00      	nop
 8007046:	e18f      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007048:	bf00      	nop
        break;
 800704a:	e18d      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800704c:	4b80      	ldr	r3, [pc, #512]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800704e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007052:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800705e:	d013      	beq.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007066:	d819      	bhi.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d004      	beq.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007074:	d004      	beq.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8007076:	e011      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007078:	f7fe fe42 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 800707c:	61f8      	str	r0, [r7, #28]
          break;
 800707e:	e010      	b.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8007080:	f7fe fda6 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8007084:	61f8      	str	r0, [r7, #28]
          break;
 8007086:	e00c      	b.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007088:	4b71      	ldr	r3, [pc, #452]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007094:	d104      	bne.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8007096:	4b6f      	ldr	r3, [pc, #444]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007098:	61fb      	str	r3, [r7, #28]
          break;
 800709a:	e001      	b.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800709c:	bf00      	nop
 800709e:	e163      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80070a0:	bf00      	nop
        break;
 80070a2:	e161      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80070a4:	4b6a      	ldr	r3, [pc, #424]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80070a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070b6:	d013      	beq.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070be:	d819      	bhi.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d004      	beq.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070cc:	d004      	beq.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 80070ce:	e011      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80070d0:	f7fe fe16 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 80070d4:	61f8      	str	r0, [r7, #28]
          break;
 80070d6:	e010      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 80070d8:	f7fe fd7a 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 80070dc:	61f8      	str	r0, [r7, #28]
          break;
 80070de:	e00c      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070e0:	4b5b      	ldr	r3, [pc, #364]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ec:	d104      	bne.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 80070ee:	4b59      	ldr	r3, [pc, #356]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80070f0:	61fb      	str	r3, [r7, #28]
          break;
 80070f2:	e001      	b.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 80070f4:	bf00      	nop
 80070f6:	e137      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80070f8:	bf00      	nop
        break;
 80070fa:	e135      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80070fc:	4b54      	ldr	r3, [pc, #336]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80070fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007102:	f003 0303 	and.w	r3, r3, #3
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b02      	cmp	r3, #2
 800710c:	d011      	beq.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b02      	cmp	r3, #2
 8007112:	d818      	bhi.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d004      	beq.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8007120:	e011      	b.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007122:	f7fe fded 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 8007126:	61f8      	str	r0, [r7, #28]
          break;
 8007128:	e010      	b.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800712a:	f7fe fd51 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 800712e:	61f8      	str	r0, [r7, #28]
          break;
 8007130:	e00c      	b.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007132:	4b47      	ldr	r3, [pc, #284]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800713a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800713e:	d104      	bne.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8007140:	4b44      	ldr	r3, [pc, #272]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007142:	61fb      	str	r3, [r7, #28]
          break;
 8007144:	e001      	b.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8007146:	bf00      	nop
 8007148:	e10e      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800714a:	bf00      	nop
        break;
 800714c:	e10c      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800714e:	4b40      	ldr	r3, [pc, #256]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007154:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007160:	d02c      	beq.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007168:	d833      	bhi.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007170:	d01a      	beq.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007178:	d82b      	bhi.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d004      	beq.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007186:	d004      	beq.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8007188:	e023      	b.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800718a:	f7fe fdb9 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 800718e:	61f8      	str	r0, [r7, #28]
          break;
 8007190:	e026      	b.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007192:	4b2f      	ldr	r3, [pc, #188]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b02      	cmp	r3, #2
 800719e:	d11a      	bne.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 80071a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80071a4:	61fb      	str	r3, [r7, #28]
          break;
 80071a6:	e016      	b.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071a8:	4b29      	ldr	r3, [pc, #164]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071b4:	d111      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 80071b6:	4b27      	ldr	r3, [pc, #156]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80071b8:	61fb      	str	r3, [r7, #28]
          break;
 80071ba:	e00e      	b.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80071bc:	4b24      	ldr	r3, [pc, #144]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80071be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d109      	bne.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 80071ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071ce:	61fb      	str	r3, [r7, #28]
          break;
 80071d0:	e005      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 80071d2:	bf00      	nop
 80071d4:	e0c8      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80071d6:	bf00      	nop
 80071d8:	e0c6      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80071da:	bf00      	nop
 80071dc:	e0c4      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80071de:	bf00      	nop
        break;
 80071e0:	e0c2      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80071e2:	4b1b      	ldr	r3, [pc, #108]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80071e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071f4:	d030      	beq.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071fc:	d837      	bhi.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007204:	d01a      	beq.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800720c:	d82f      	bhi.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d004      	beq.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800721a:	d004      	beq.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800721c:	e027      	b.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800721e:	f7fe fd6f 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 8007222:	61f8      	str	r0, [r7, #28]
          break;
 8007224:	e02a      	b.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007226:	4b0a      	ldr	r3, [pc, #40]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b02      	cmp	r3, #2
 8007232:	d11e      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8007234:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007238:	61fb      	str	r3, [r7, #28]
          break;
 800723a:	e01a      	b.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800723c:	4b04      	ldr	r3, [pc, #16]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007248:	d115      	bne.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800724a:	4b02      	ldr	r3, [pc, #8]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800724c:	61fb      	str	r3, [r7, #28]
          break;
 800724e:	e012      	b.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007250:	40021000 	.word	0x40021000
 8007254:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007258:	4b46      	ldr	r3, [pc, #280]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800725a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b02      	cmp	r3, #2
 8007264:	d109      	bne.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8007266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800726a:	61fb      	str	r3, [r7, #28]
          break;
 800726c:	e005      	b.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800726e:	bf00      	nop
 8007270:	e07a      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007272:	bf00      	nop
 8007274:	e078      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007276:	bf00      	nop
 8007278:	e076      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800727a:	bf00      	nop
        break;
 800727c:	e074      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800727e:	4b3d      	ldr	r3, [pc, #244]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007280:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007284:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007290:	d02c      	beq.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007298:	d855      	bhi.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d004      	beq.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072a6:	d004      	beq.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 80072a8:	e04d      	b.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80072aa:	f7fe fc91 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 80072ae:	61f8      	str	r0, [r7, #28]
          break;
 80072b0:	e04e      	b.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80072b2:	4b30      	ldr	r3, [pc, #192]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d145      	bne.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80072be:	4b2d      	ldr	r3, [pc, #180]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0308 	and.w	r3, r3, #8
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d005      	beq.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80072ca:	4b2a      	ldr	r3, [pc, #168]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	091b      	lsrs	r3, r3, #4
 80072d0:	f003 030f 	and.w	r3, r3, #15
 80072d4:	e005      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 80072d6:	4b27      	ldr	r3, [pc, #156]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80072d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072dc:	0a1b      	lsrs	r3, r3, #8
 80072de:	f003 030f 	and.w	r3, r3, #15
 80072e2:	4a25      	ldr	r2, [pc, #148]	; (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80072e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072e8:	61fb      	str	r3, [r7, #28]
          break;
 80072ea:	e02e      	b.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80072ec:	4b21      	ldr	r3, [pc, #132]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072f8:	d129      	bne.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80072fa:	4b1e      	ldr	r3, [pc, #120]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007306:	d122      	bne.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007308:	4b1a      	ldr	r3, [pc, #104]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	0a1b      	lsrs	r3, r3, #8
 800730e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007312:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	fb03 f202 	mul.w	r2, r3, r2
 800731c:	4b15      	ldr	r3, [pc, #84]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	091b      	lsrs	r3, r3, #4
 8007322:	f003 030f 	and.w	r3, r3, #15
 8007326:	3301      	adds	r3, #1
 8007328:	fbb2 f3f3 	udiv	r3, r2, r3
 800732c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800732e:	4b11      	ldr	r3, [pc, #68]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	0d5b      	lsrs	r3, r3, #21
 8007334:	f003 0303 	and.w	r3, r3, #3
 8007338:	3301      	adds	r3, #1
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	69ba      	ldr	r2, [r7, #24]
 800733e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007342:	61fb      	str	r3, [r7, #28]
          break;
 8007344:	e003      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8007346:	bf00      	nop
 8007348:	e00e      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800734a:	bf00      	nop
 800734c:	e00c      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800734e:	bf00      	nop
        break;
 8007350:	e00a      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007352:	bf00      	nop
 8007354:	e008      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007356:	bf00      	nop
 8007358:	e006      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800735a:	bf00      	nop
 800735c:	e004      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800735e:	bf00      	nop
 8007360:	e002      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007362:	bf00      	nop
 8007364:	e000      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007366:	bf00      	nop
    }
  }

  return(frequency);
 8007368:	69fb      	ldr	r3, [r7, #28]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3720      	adds	r7, #32
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	40021000 	.word	0x40021000
 8007378:	0800c1b4 	.word	0x0800c1b4

0800737c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800738a:	4b72      	ldr	r3, [pc, #456]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00e      	beq.n	80073b4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007396:	4b6f      	ldr	r3, [pc, #444]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	f003 0203 	and.w	r2, r3, #3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d103      	bne.n	80073ae <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
       ||
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d142      	bne.n	8007434 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	73fb      	strb	r3, [r7, #15]
 80073b2:	e03f      	b.n	8007434 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d018      	beq.n	80073ee <RCCEx_PLLSAI1_Config+0x72>
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d825      	bhi.n	800740c <RCCEx_PLLSAI1_Config+0x90>
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d002      	beq.n	80073ca <RCCEx_PLLSAI1_Config+0x4e>
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d009      	beq.n	80073dc <RCCEx_PLLSAI1_Config+0x60>
 80073c8:	e020      	b.n	800740c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073ca:	4b62      	ldr	r3, [pc, #392]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d11d      	bne.n	8007412 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073da:	e01a      	b.n	8007412 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073dc:	4b5d      	ldr	r3, [pc, #372]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d116      	bne.n	8007416 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073ec:	e013      	b.n	8007416 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80073ee:	4b59      	ldr	r3, [pc, #356]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10f      	bne.n	800741a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80073fa:	4b56      	ldr	r3, [pc, #344]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d109      	bne.n	800741a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800740a:	e006      	b.n	800741a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	73fb      	strb	r3, [r7, #15]
      break;
 8007410:	e004      	b.n	800741c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007412:	bf00      	nop
 8007414:	e002      	b.n	800741c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007416:	bf00      	nop
 8007418:	e000      	b.n	800741c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800741a:	bf00      	nop
    }

    if(status == HAL_OK)
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d108      	bne.n	8007434 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007422:	4b4c      	ldr	r3, [pc, #304]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f023 0203 	bic.w	r2, r3, #3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4949      	ldr	r1, [pc, #292]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007430:	4313      	orrs	r3, r2
 8007432:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	2b00      	cmp	r3, #0
 8007438:	f040 8086 	bne.w	8007548 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800743c:	4b45      	ldr	r3, [pc, #276]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a44      	ldr	r2, [pc, #272]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007442:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007446:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007448:	f7fb fe00 	bl	800304c <HAL_GetTick>
 800744c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800744e:	e009      	b.n	8007464 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007450:	f7fb fdfc 	bl	800304c <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	2b02      	cmp	r3, #2
 800745c:	d902      	bls.n	8007464 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	73fb      	strb	r3, [r7, #15]
        break;
 8007462:	e005      	b.n	8007470 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007464:	4b3b      	ldr	r3, [pc, #236]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1ef      	bne.n	8007450 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007470:	7bfb      	ldrb	r3, [r7, #15]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d168      	bne.n	8007548 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d113      	bne.n	80074a4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800747c:	4b35      	ldr	r3, [pc, #212]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 800747e:	691a      	ldr	r2, [r3, #16]
 8007480:	4b35      	ldr	r3, [pc, #212]	; (8007558 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007482:	4013      	ands	r3, r2
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	6892      	ldr	r2, [r2, #8]
 8007488:	0211      	lsls	r1, r2, #8
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	68d2      	ldr	r2, [r2, #12]
 800748e:	06d2      	lsls	r2, r2, #27
 8007490:	4311      	orrs	r1, r2
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	6852      	ldr	r2, [r2, #4]
 8007496:	3a01      	subs	r2, #1
 8007498:	0112      	lsls	r2, r2, #4
 800749a:	430a      	orrs	r2, r1
 800749c:	492d      	ldr	r1, [pc, #180]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	610b      	str	r3, [r1, #16]
 80074a2:	e02d      	b.n	8007500 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d115      	bne.n	80074d6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074aa:	4b2a      	ldr	r3, [pc, #168]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074ac:	691a      	ldr	r2, [r3, #16]
 80074ae:	4b2b      	ldr	r3, [pc, #172]	; (800755c <RCCEx_PLLSAI1_Config+0x1e0>)
 80074b0:	4013      	ands	r3, r2
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6892      	ldr	r2, [r2, #8]
 80074b6:	0211      	lsls	r1, r2, #8
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	6912      	ldr	r2, [r2, #16]
 80074bc:	0852      	lsrs	r2, r2, #1
 80074be:	3a01      	subs	r2, #1
 80074c0:	0552      	lsls	r2, r2, #21
 80074c2:	4311      	orrs	r1, r2
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	6852      	ldr	r2, [r2, #4]
 80074c8:	3a01      	subs	r2, #1
 80074ca:	0112      	lsls	r2, r2, #4
 80074cc:	430a      	orrs	r2, r1
 80074ce:	4921      	ldr	r1, [pc, #132]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	610b      	str	r3, [r1, #16]
 80074d4:	e014      	b.n	8007500 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074d6:	4b1f      	ldr	r3, [pc, #124]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074d8:	691a      	ldr	r2, [r3, #16]
 80074da:	4b21      	ldr	r3, [pc, #132]	; (8007560 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074dc:	4013      	ands	r3, r2
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6892      	ldr	r2, [r2, #8]
 80074e2:	0211      	lsls	r1, r2, #8
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6952      	ldr	r2, [r2, #20]
 80074e8:	0852      	lsrs	r2, r2, #1
 80074ea:	3a01      	subs	r2, #1
 80074ec:	0652      	lsls	r2, r2, #25
 80074ee:	4311      	orrs	r1, r2
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	6852      	ldr	r2, [r2, #4]
 80074f4:	3a01      	subs	r2, #1
 80074f6:	0112      	lsls	r2, r2, #4
 80074f8:	430a      	orrs	r2, r1
 80074fa:	4916      	ldr	r1, [pc, #88]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007500:	4b14      	ldr	r3, [pc, #80]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a13      	ldr	r2, [pc, #76]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007506:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800750a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800750c:	f7fb fd9e 	bl	800304c <HAL_GetTick>
 8007510:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007512:	e009      	b.n	8007528 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007514:	f7fb fd9a 	bl	800304c <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b02      	cmp	r3, #2
 8007520:	d902      	bls.n	8007528 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	73fb      	strb	r3, [r7, #15]
          break;
 8007526:	e005      	b.n	8007534 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007528:	4b0a      	ldr	r3, [pc, #40]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d0ef      	beq.n	8007514 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d106      	bne.n	8007548 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800753a:	4b06      	ldr	r3, [pc, #24]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 800753c:	691a      	ldr	r2, [r3, #16]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	4904      	ldr	r1, [pc, #16]	; (8007554 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007544:	4313      	orrs	r3, r2
 8007546:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007548:	7bfb      	ldrb	r3, [r7, #15]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	40021000 	.word	0x40021000
 8007558:	07ff800f 	.word	0x07ff800f
 800755c:	ff9f800f 	.word	0xff9f800f
 8007560:	f9ff800f 	.word	0xf9ff800f

08007564 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007572:	4b72      	ldr	r3, [pc, #456]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00e      	beq.n	800759c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800757e:	4b6f      	ldr	r3, [pc, #444]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	f003 0203 	and.w	r2, r3, #3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	d103      	bne.n	8007596 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
       ||
 8007592:	2b00      	cmp	r3, #0
 8007594:	d142      	bne.n	800761c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	73fb      	strb	r3, [r7, #15]
 800759a:	e03f      	b.n	800761c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d018      	beq.n	80075d6 <RCCEx_PLLSAI2_Config+0x72>
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	d825      	bhi.n	80075f4 <RCCEx_PLLSAI2_Config+0x90>
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d002      	beq.n	80075b2 <RCCEx_PLLSAI2_Config+0x4e>
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d009      	beq.n	80075c4 <RCCEx_PLLSAI2_Config+0x60>
 80075b0:	e020      	b.n	80075f4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80075b2:	4b62      	ldr	r3, [pc, #392]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d11d      	bne.n	80075fa <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075c2:	e01a      	b.n	80075fa <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80075c4:	4b5d      	ldr	r3, [pc, #372]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d116      	bne.n	80075fe <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075d4:	e013      	b.n	80075fe <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80075d6:	4b59      	ldr	r3, [pc, #356]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10f      	bne.n	8007602 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80075e2:	4b56      	ldr	r3, [pc, #344]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d109      	bne.n	8007602 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80075f2:	e006      	b.n	8007602 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	73fb      	strb	r3, [r7, #15]
      break;
 80075f8:	e004      	b.n	8007604 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80075fa:	bf00      	nop
 80075fc:	e002      	b.n	8007604 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80075fe:	bf00      	nop
 8007600:	e000      	b.n	8007604 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007602:	bf00      	nop
    }

    if(status == HAL_OK)
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d108      	bne.n	800761c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800760a:	4b4c      	ldr	r3, [pc, #304]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f023 0203 	bic.w	r2, r3, #3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4949      	ldr	r1, [pc, #292]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007618:	4313      	orrs	r3, r2
 800761a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	2b00      	cmp	r3, #0
 8007620:	f040 8086 	bne.w	8007730 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007624:	4b45      	ldr	r3, [pc, #276]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a44      	ldr	r2, [pc, #272]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 800762a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800762e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007630:	f7fb fd0c 	bl	800304c <HAL_GetTick>
 8007634:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007636:	e009      	b.n	800764c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007638:	f7fb fd08 	bl	800304c <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	2b02      	cmp	r3, #2
 8007644:	d902      	bls.n	800764c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	73fb      	strb	r3, [r7, #15]
        break;
 800764a:	e005      	b.n	8007658 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800764c:	4b3b      	ldr	r3, [pc, #236]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1ef      	bne.n	8007638 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007658:	7bfb      	ldrb	r3, [r7, #15]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d168      	bne.n	8007730 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d113      	bne.n	800768c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007664:	4b35      	ldr	r3, [pc, #212]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007666:	695a      	ldr	r2, [r3, #20]
 8007668:	4b35      	ldr	r3, [pc, #212]	; (8007740 <RCCEx_PLLSAI2_Config+0x1dc>)
 800766a:	4013      	ands	r3, r2
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	6892      	ldr	r2, [r2, #8]
 8007670:	0211      	lsls	r1, r2, #8
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	68d2      	ldr	r2, [r2, #12]
 8007676:	06d2      	lsls	r2, r2, #27
 8007678:	4311      	orrs	r1, r2
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6852      	ldr	r2, [r2, #4]
 800767e:	3a01      	subs	r2, #1
 8007680:	0112      	lsls	r2, r2, #4
 8007682:	430a      	orrs	r2, r1
 8007684:	492d      	ldr	r1, [pc, #180]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007686:	4313      	orrs	r3, r2
 8007688:	614b      	str	r3, [r1, #20]
 800768a:	e02d      	b.n	80076e8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d115      	bne.n	80076be <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007692:	4b2a      	ldr	r3, [pc, #168]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007694:	695a      	ldr	r2, [r3, #20]
 8007696:	4b2b      	ldr	r3, [pc, #172]	; (8007744 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007698:	4013      	ands	r3, r2
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	6892      	ldr	r2, [r2, #8]
 800769e:	0211      	lsls	r1, r2, #8
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	6912      	ldr	r2, [r2, #16]
 80076a4:	0852      	lsrs	r2, r2, #1
 80076a6:	3a01      	subs	r2, #1
 80076a8:	0552      	lsls	r2, r2, #21
 80076aa:	4311      	orrs	r1, r2
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	6852      	ldr	r2, [r2, #4]
 80076b0:	3a01      	subs	r2, #1
 80076b2:	0112      	lsls	r2, r2, #4
 80076b4:	430a      	orrs	r2, r1
 80076b6:	4921      	ldr	r1, [pc, #132]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	614b      	str	r3, [r1, #20]
 80076bc:	e014      	b.n	80076e8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80076be:	4b1f      	ldr	r3, [pc, #124]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 80076c0:	695a      	ldr	r2, [r3, #20]
 80076c2:	4b21      	ldr	r3, [pc, #132]	; (8007748 <RCCEx_PLLSAI2_Config+0x1e4>)
 80076c4:	4013      	ands	r3, r2
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6892      	ldr	r2, [r2, #8]
 80076ca:	0211      	lsls	r1, r2, #8
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	6952      	ldr	r2, [r2, #20]
 80076d0:	0852      	lsrs	r2, r2, #1
 80076d2:	3a01      	subs	r2, #1
 80076d4:	0652      	lsls	r2, r2, #25
 80076d6:	4311      	orrs	r1, r2
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	6852      	ldr	r2, [r2, #4]
 80076dc:	3a01      	subs	r2, #1
 80076de:	0112      	lsls	r2, r2, #4
 80076e0:	430a      	orrs	r2, r1
 80076e2:	4916      	ldr	r1, [pc, #88]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80076e8:	4b14      	ldr	r3, [pc, #80]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a13      	ldr	r2, [pc, #76]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 80076ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076f4:	f7fb fcaa 	bl	800304c <HAL_GetTick>
 80076f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80076fa:	e009      	b.n	8007710 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80076fc:	f7fb fca6 	bl	800304c <HAL_GetTick>
 8007700:	4602      	mov	r2, r0
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	2b02      	cmp	r3, #2
 8007708:	d902      	bls.n	8007710 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	73fb      	strb	r3, [r7, #15]
          break;
 800770e:	e005      	b.n	800771c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007710:	4b0a      	ldr	r3, [pc, #40]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d0ef      	beq.n	80076fc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800771c:	7bfb      	ldrb	r3, [r7, #15]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007722:	4b06      	ldr	r3, [pc, #24]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007724:	695a      	ldr	r2, [r3, #20]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	4904      	ldr	r1, [pc, #16]	; (800773c <RCCEx_PLLSAI2_Config+0x1d8>)
 800772c:	4313      	orrs	r3, r2
 800772e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007730:	7bfb      	ldrb	r3, [r7, #15]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	40021000 	.word	0x40021000
 8007740:	07ff800f 	.word	0x07ff800f
 8007744:	ff9f800f 	.word	0xff9f800f
 8007748:	f9ff800f 	.word	0xf9ff800f

0800774c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800774c:	b480      	push	{r7}
 800774e:	b089      	sub	sp, #36	; 0x24
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800775e:	2300      	movs	r3, #0
 8007760:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007768:	d10b      	bne.n	8007782 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800776a:	4b7e      	ldr	r3, [pc, #504]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800776c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007770:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007774:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	2b60      	cmp	r3, #96	; 0x60
 800777a:	d112      	bne.n	80077a2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800777c:	4b7a      	ldr	r3, [pc, #488]	; (8007968 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800777e:	61fb      	str	r3, [r7, #28]
 8007780:	e00f      	b.n	80077a2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007788:	d10b      	bne.n	80077a2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800778a:	4b76      	ldr	r3, [pc, #472]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800778c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007790:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007794:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800779c:	d101      	bne.n	80077a2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800779e:	4b72      	ldr	r3, [pc, #456]	; (8007968 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80077a0:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f040 80d6 	bne.w	8007956 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	2b40      	cmp	r3, #64	; 0x40
 80077b2:	d003      	beq.n	80077bc <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ba:	d13b      	bne.n	8007834 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80077bc:	4b69      	ldr	r3, [pc, #420]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077c8:	f040 80c4 	bne.w	8007954 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80077cc:	4b65      	ldr	r3, [pc, #404]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 80bd 	beq.w	8007954 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80077da:	4b62      	ldr	r3, [pc, #392]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	091b      	lsrs	r3, r3, #4
 80077e0:	f003 030f 	and.w	r3, r3, #15
 80077e4:	3301      	adds	r3, #1
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ec:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80077ee:	4b5d      	ldr	r3, [pc, #372]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	0a1b      	lsrs	r3, r3, #8
 80077f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077f8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80077fa:	4b5a      	ldr	r3, [pc, #360]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	0edb      	lsrs	r3, r3, #27
 8007800:	f003 031f 	and.w	r3, r3, #31
 8007804:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800780c:	4b55      	ldr	r3, [pc, #340]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8007818:	2311      	movs	r3, #17
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	e001      	b.n	8007822 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800781e:	2307      	movs	r3, #7
 8007820:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	fb03 f202 	mul.w	r2, r3, r2
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007830:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007832:	e08f      	b.n	8007954 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d13a      	bne.n	80078b0 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800783a:	4b4a      	ldr	r3, [pc, #296]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007846:	f040 8086 	bne.w	8007956 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800784a:	4b46      	ldr	r3, [pc, #280]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d07f      	beq.n	8007956 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007856:	4b43      	ldr	r3, [pc, #268]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	091b      	lsrs	r3, r3, #4
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	3301      	adds	r3, #1
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	fbb2 f3f3 	udiv	r3, r2, r3
 8007868:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800786a:	4b3e      	ldr	r3, [pc, #248]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	0a1b      	lsrs	r3, r3, #8
 8007870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007874:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007876:	4b3b      	ldr	r3, [pc, #236]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	0edb      	lsrs	r3, r3, #27
 800787c:	f003 031f 	and.w	r3, r3, #31
 8007880:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10a      	bne.n	800789e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007888:	4b36      	ldr	r3, [pc, #216]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007894:	2311      	movs	r3, #17
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	e001      	b.n	800789e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800789a:	2307      	movs	r3, #7
 800789c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	fb03 f202 	mul.w	r2, r3, r2
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ac:	61fb      	str	r3, [r7, #28]
 80078ae:	e052      	b.n	8007956 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	2b80      	cmp	r3, #128	; 0x80
 80078b4:	d003      	beq.n	80078be <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078bc:	d109      	bne.n	80078d2 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078be:	4b29      	ldr	r3, [pc, #164]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078ca:	d144      	bne.n	8007956 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80078cc:	4b27      	ldr	r3, [pc, #156]	; (800796c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80078ce:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078d0:	e041      	b.n	8007956 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	2b20      	cmp	r3, #32
 80078d6:	d003      	beq.n	80078e0 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078de:	d13a      	bne.n	8007956 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80078e0:	4b20      	ldr	r3, [pc, #128]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ec:	d133      	bne.n	8007956 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80078ee:	4b1d      	ldr	r3, [pc, #116]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d02d      	beq.n	8007956 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80078fa:	4b1a      	ldr	r3, [pc, #104]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	091b      	lsrs	r3, r3, #4
 8007900:	f003 030f 	and.w	r3, r3, #15
 8007904:	3301      	adds	r3, #1
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	fbb2 f3f3 	udiv	r3, r2, r3
 800790c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800790e:	4b15      	ldr	r3, [pc, #84]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	0a1b      	lsrs	r3, r3, #8
 8007914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007918:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800791a:	4b12      	ldr	r3, [pc, #72]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	0edb      	lsrs	r3, r3, #27
 8007920:	f003 031f 	and.w	r3, r3, #31
 8007924:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10a      	bne.n	8007942 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800792c:	4b0d      	ldr	r3, [pc, #52]	; (8007964 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8007938:	2311      	movs	r3, #17
 800793a:	617b      	str	r3, [r7, #20]
 800793c:	e001      	b.n	8007942 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800793e:	2307      	movs	r3, #7
 8007940:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	fb03 f202 	mul.w	r2, r3, r2
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007950:	61fb      	str	r3, [r7, #28]
 8007952:	e000      	b.n	8007956 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007954:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007956:	69fb      	ldr	r3, [r7, #28]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3724      	adds	r7, #36	; 0x24
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	40021000 	.word	0x40021000
 8007968:	001fff68 	.word	0x001fff68
 800796c:	00f42400 	.word	0x00f42400

08007970 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2b02      	cmp	r3, #2
 8007982:	d904      	bls.n	800798e <HAL_SAI_InitProtocol+0x1e>
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	3b03      	subs	r3, #3
 8007988:	2b01      	cmp	r3, #1
 800798a:	d812      	bhi.n	80079b2 <HAL_SAI_InitProtocol+0x42>
 800798c:	e008      	b.n	80079a0 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	68b9      	ldr	r1, [r7, #8]
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 f9fb 	bl	8007d90 <SAI_InitI2S>
 800799a:	4603      	mov	r3, r0
 800799c:	75fb      	strb	r3, [r7, #23]
      break;
 800799e:	e00b      	b.n	80079b8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	68b9      	ldr	r1, [r7, #8]
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 faa4 	bl	8007ef4 <SAI_InitPCM>
 80079ac:	4603      	mov	r3, r0
 80079ae:	75fb      	strb	r3, [r7, #23]
      break;
 80079b0:	e002      	b.n	80079b8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	75fb      	strb	r3, [r7, #23]
      break;
 80079b6:	bf00      	nop
  }

  if (status == HAL_OK)
 80079b8:	7dfb      	ldrb	r3, [r7, #23]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d104      	bne.n	80079c8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 f808 	bl	80079d4 <HAL_SAI_Init>
 80079c4:	4603      	mov	r3, r0
 80079c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80079c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
	...

080079d4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08a      	sub	sp, #40	; 0x28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e1c7      	b.n	8007d76 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d10e      	bne.n	8007a0e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a81      	ldr	r2, [pc, #516]	; (8007bfc <HAL_SAI_Init+0x228>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d107      	bne.n	8007a0a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d103      	bne.n	8007a0a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e1b3      	b.n	8007d76 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d106      	bne.n	8007a28 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7fb f9ee 	bl	8002e04 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fae5 	bl	8007ff8 <SAI_Disable>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e19e      	b.n	8007d76 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d00c      	beq.n	8007a62 <HAL_SAI_Init+0x8e>
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d80d      	bhi.n	8007a68 <HAL_SAI_Init+0x94>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <HAL_SAI_Init+0x82>
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d003      	beq.n	8007a5c <HAL_SAI_Init+0x88>
 8007a54:	e008      	b.n	8007a68 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007a5a:	e008      	b.n	8007a6e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007a5c:	2310      	movs	r3, #16
 8007a5e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007a60:	e005      	b.n	8007a6e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007a62:	2320      	movs	r3, #32
 8007a64:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007a66:	e002      	b.n	8007a6e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007a6c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d81d      	bhi.n	8007ab2 <HAL_SAI_Init+0xde>
 8007a76:	a201      	add	r2, pc, #4	; (adr r2, 8007a7c <HAL_SAI_Init+0xa8>)
 8007a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7c:	08007a8d 	.word	0x08007a8d
 8007a80:	08007a93 	.word	0x08007a93
 8007a84:	08007a9b 	.word	0x08007a9b
 8007a88:	08007aa3 	.word	0x08007aa3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	61fb      	str	r3, [r7, #28]
      break;
 8007a90:	e012      	b.n	8007ab8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a96:	61fb      	str	r3, [r7, #28]
      break;
 8007a98:	e00e      	b.n	8007ab8 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a9e:	61fb      	str	r3, [r7, #28]
      break;
 8007aa0:	e00a      	b.n	8007ab8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007aa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007aa6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	f043 0301 	orr.w	r3, r3, #1
 8007aae:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007ab0:	e002      	b.n	8007ab8 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	61fb      	str	r3, [r7, #28]
      break;
 8007ab6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a4f      	ldr	r2, [pc, #316]	; (8007bfc <HAL_SAI_Init+0x228>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d004      	beq.n	8007acc <HAL_SAI_Init+0xf8>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a4e      	ldr	r2, [pc, #312]	; (8007c00 <HAL_SAI_Init+0x22c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d103      	bne.n	8007ad4 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8007acc:	4a4d      	ldr	r2, [pc, #308]	; (8007c04 <HAL_SAI_Init+0x230>)
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	6013      	str	r3, [r2, #0]
 8007ad2:	e002      	b.n	8007ada <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007ad4:	4a4c      	ldr	r2, [pc, #304]	; (8007c08 <HAL_SAI_Init+0x234>)
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d073      	beq.n	8007bca <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a45      	ldr	r2, [pc, #276]	; (8007bfc <HAL_SAI_Init+0x228>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d004      	beq.n	8007af6 <HAL_SAI_Init+0x122>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a43      	ldr	r2, [pc, #268]	; (8007c00 <HAL_SAI_Init+0x22c>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d105      	bne.n	8007b02 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007af6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007afa:	f7fe fd1d 	bl	8006538 <HAL_RCCEx_GetPeriphCLKFreq>
 8007afe:	61b8      	str	r0, [r7, #24]
 8007b00:	e004      	b.n	8007b0c <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007b02:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007b06:	f7fe fd17 	bl	8006538 <HAL_RCCEx_GetPeriphCLKFreq>
 8007b0a:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b14:	d120      	bne.n	8007b58 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	2b04      	cmp	r3, #4
 8007b1c:	d102      	bne.n	8007b24 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8007b1e:	2340      	movs	r3, #64	; 0x40
 8007b20:	613b      	str	r3, [r7, #16]
 8007b22:	e00a      	b.n	8007b3a <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b28:	2b08      	cmp	r3, #8
 8007b2a:	d103      	bne.n	8007b34 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8007b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b30:	613b      	str	r3, [r7, #16]
 8007b32:	e002      	b.n	8007b3a <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b38:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	4619      	mov	r1, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	fb02 f303 	mul.w	r3, r2, r3
 8007b50:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b54:	617b      	str	r3, [r7, #20]
 8007b56:	e017      	b.n	8007b88 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b60:	d101      	bne.n	8007b66 <HAL_SAI_Init+0x192>
 8007b62:	2302      	movs	r3, #2
 8007b64:	e000      	b.n	8007b68 <HAL_SAI_Init+0x194>
 8007b66:	2301      	movs	r3, #1
 8007b68:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	005b      	lsls	r3, r3, #1
 8007b74:	4619      	mov	r1, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	fb02 f303 	mul.w	r3, r2, r3
 8007b80:	021b      	lsls	r3, r3, #8
 8007b82:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b86:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	4a20      	ldr	r2, [pc, #128]	; (8007c0c <HAL_SAI_Init+0x238>)
 8007b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b90:	08da      	lsrs	r2, r3, #3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007b96:	6979      	ldr	r1, [r7, #20]
 8007b98:	4b1c      	ldr	r3, [pc, #112]	; (8007c0c <HAL_SAI_Init+0x238>)
 8007b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8007b9e:	08da      	lsrs	r2, r3, #3
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	1aca      	subs	r2, r1, r3
 8007baa:	2a08      	cmp	r2, #8
 8007bac:	d904      	bls.n	8007bb8 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	1c5a      	adds	r2, r3, #1
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	d104      	bne.n	8007bca <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a1b      	ldr	r3, [r3, #32]
 8007bc4:	085a      	lsrs	r2, r3, #1
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <HAL_SAI_Init+0x206>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d109      	bne.n	8007bee <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d101      	bne.n	8007be6 <HAL_SAI_Init+0x212>
 8007be2:	2300      	movs	r3, #0
 8007be4:	e001      	b.n	8007bea <HAL_SAI_Init+0x216>
 8007be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bea:	623b      	str	r3, [r7, #32]
 8007bec:	e012      	b.n	8007c14 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d10c      	bne.n	8007c10 <HAL_SAI_Init+0x23c>
 8007bf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bfa:	e00a      	b.n	8007c12 <HAL_SAI_Init+0x23e>
 8007bfc:	40015404 	.word	0x40015404
 8007c00:	40015424 	.word	0x40015424
 8007c04:	40015400 	.word	0x40015400
 8007c08:	40015800 	.word	0x40015800
 8007c0c:	cccccccd 	.word	0xcccccccd
 8007c10:	2300      	movs	r3, #0
 8007c12:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6819      	ldr	r1, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	4b58      	ldr	r3, [pc, #352]	; (8007d80 <HAL_SAI_Init+0x3ac>)
 8007c20:	400b      	ands	r3, r1
 8007c22:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6819      	ldr	r1, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007c38:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8007c4c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007c58:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	051b      	lsls	r3, r3, #20
 8007c60:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007c66:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	6812      	ldr	r2, [r2, #0]
 8007c7a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007c7e:	f023 030f 	bic.w	r3, r3, #15
 8007c82:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6859      	ldr	r1, [r3, #4]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	699a      	ldr	r2, [r3, #24]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c92:	431a      	orrs	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6899      	ldr	r1, [r3, #8]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	4b35      	ldr	r3, [pc, #212]	; (8007d84 <HAL_SAI_Init+0x3b0>)
 8007cae:	400b      	ands	r3, r1
 8007cb0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6899      	ldr	r1, [r3, #8]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cbc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007cc2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8007cc8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8007cce:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007cd8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68d9      	ldr	r1, [r3, #12]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007cf0:	400b      	ands	r3, r1
 8007cf2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68d9      	ldr	r1, [r3, #12]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d02:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d08:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007d0a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d10:	3b01      	subs	r3, #1
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a19      	ldr	r2, [pc, #100]	; (8007d88 <HAL_SAI_Init+0x3b4>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d119      	bne.n	8007d5c <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007d28:	4b18      	ldr	r3, [pc, #96]	; (8007d8c <HAL_SAI_Init+0x3b8>)
 8007d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2c:	4a17      	ldr	r2, [pc, #92]	; (8007d8c <HAL_SAI_Init+0x3b8>)
 8007d2e:	f023 0301 	bic.w	r3, r3, #1
 8007d32:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d10e      	bne.n	8007d5c <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d46:	3b01      	subs	r3, #1
 8007d48:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007d4a:	4910      	ldr	r1, [pc, #64]	; (8007d8c <HAL_SAI_Init+0x3b8>)
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8007d50:	4b0e      	ldr	r3, [pc, #56]	; (8007d8c <HAL_SAI_Init+0x3b8>)
 8007d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d54:	4a0d      	ldr	r2, [pc, #52]	; (8007d8c <HAL_SAI_Init+0x3b8>)
 8007d56:	f043 0301 	orr.w	r3, r3, #1
 8007d5a:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3728      	adds	r7, #40	; 0x28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	f805c010 	.word	0xf805c010
 8007d84:	fff88000 	.word	0xfff88000
 8007d88:	40015404 	.word	0x40015404
 8007d8c:	40015400 	.word	0x40015400

08007d90 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
 8007d9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <SAI_InitI2S+0x2e>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d103      	bne.n	8007dc6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	64da      	str	r2, [r3, #76]	; 0x4c
 8007dc4:	e002      	b.n	8007dcc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007dd2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dda:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e077      	b.n	8007ee6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d107      	bne.n	8007e0c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007e08:	661a      	str	r2, [r3, #96]	; 0x60
 8007e0a:	e006      	b.n	8007e1a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007e12:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d84f      	bhi.n	8007ec0 <SAI_InitI2S+0x130>
 8007e20:	a201      	add	r2, pc, #4	; (adr r2, 8007e28 <SAI_InitI2S+0x98>)
 8007e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e26:	bf00      	nop
 8007e28:	08007e39 	.word	0x08007e39
 8007e2c:	08007e5b 	.word	0x08007e5b
 8007e30:	08007e7d 	.word	0x08007e7d
 8007e34:	08007e9f 	.word	0x08007e9f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2280      	movs	r2, #128	; 0x80
 8007e3c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	085b      	lsrs	r3, r3, #1
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	085b      	lsrs	r3, r3, #1
 8007e4c:	011a      	lsls	r2, r3, #4
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2240      	movs	r2, #64	; 0x40
 8007e56:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007e58:	e035      	b.n	8007ec6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2280      	movs	r2, #128	; 0x80
 8007e5e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	085b      	lsrs	r3, r3, #1
 8007e64:	019a      	lsls	r2, r3, #6
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	085b      	lsrs	r3, r3, #1
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2280      	movs	r2, #128	; 0x80
 8007e78:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007e7a:	e024      	b.n	8007ec6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	22c0      	movs	r2, #192	; 0xc0
 8007e80:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	085b      	lsrs	r3, r3, #1
 8007e86:	019a      	lsls	r2, r3, #6
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	085b      	lsrs	r3, r3, #1
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2280      	movs	r2, #128	; 0x80
 8007e9a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007e9c:	e013      	b.n	8007ec6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	22e0      	movs	r2, #224	; 0xe0
 8007ea2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	085b      	lsrs	r3, r3, #1
 8007ea8:	019a      	lsls	r2, r3, #6
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	085b      	lsrs	r3, r3, #1
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2280      	movs	r2, #128	; 0x80
 8007ebc:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007ebe:	e002      	b.n	8007ec6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ec4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d10b      	bne.n	8007ee4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d102      	bne.n	8007ed8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2210      	movs	r2, #16
 8007ed6:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d102      	bne.n	8007ee4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2208      	movs	r2, #8
 8007ee2:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 8007ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	371c      	adds	r7, #28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop

08007ef4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
 8007f00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <SAI_InitPCM+0x2e>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d103      	bne.n	8007f2a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2201      	movs	r2, #1
 8007f26:	64da      	str	r2, [r3, #76]	; 0x4c
 8007f28:	e002      	b.n	8007f30 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007f3c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007f44:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f58:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b04      	cmp	r3, #4
 8007f5e:	d103      	bne.n	8007f68 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2201      	movs	r2, #1
 8007f64:	655a      	str	r2, [r3, #84]	; 0x54
 8007f66:	e002      	b.n	8007f6e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	220d      	movs	r2, #13
 8007f6c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d837      	bhi.n	8007fe4 <SAI_InitPCM+0xf0>
 8007f74:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <SAI_InitPCM+0x88>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08007f8d 	.word	0x08007f8d
 8007f80:	08007fa3 	.word	0x08007fa3
 8007f84:	08007fb9 	.word	0x08007fb9
 8007f88:	08007fcf 	.word	0x08007fcf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2280      	movs	r2, #128	; 0x80
 8007f90:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	011a      	lsls	r2, r3, #4
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2240      	movs	r2, #64	; 0x40
 8007f9e:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007fa0:	e023      	b.n	8007fea <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2280      	movs	r2, #128	; 0x80
 8007fa6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2280      	movs	r2, #128	; 0x80
 8007fb4:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007fb6:	e018      	b.n	8007fea <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	22c0      	movs	r2, #192	; 0xc0
 8007fbc:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2280      	movs	r2, #128	; 0x80
 8007fca:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007fcc:	e00d      	b.n	8007fea <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	22e0      	movs	r2, #224	; 0xe0
 8007fd2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2280      	movs	r2, #128	; 0x80
 8007fe0:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007fe2:	e002      	b.n	8007fea <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe8:	bf00      	nop
  }

  return status;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	371c      	adds	r7, #28
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008000:	4b18      	ldr	r3, [pc, #96]	; (8008064 <SAI_Disable+0x6c>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a18      	ldr	r2, [pc, #96]	; (8008068 <SAI_Disable+0x70>)
 8008006:	fba2 2303 	umull	r2, r3, r2, r3
 800800a:	0b1b      	lsrs	r3, r3, #12
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008022:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10a      	bne.n	8008040 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008030:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	72fb      	strb	r3, [r7, #11]
      break;
 800803e:	e009      	b.n	8008054 <SAI_Disable+0x5c>
    }
    count--;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3b01      	subs	r3, #1
 8008044:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1e7      	bne.n	8008024 <SAI_Disable+0x2c>

  return status;
 8008054:	7afb      	ldrb	r3, [r7, #11]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	20000000 	.word	0x20000000
 8008068:	95cbec1b 	.word	0x95cbec1b

0800806c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d101      	bne.n	800807e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e095      	b.n	80081aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008082:	2b00      	cmp	r3, #0
 8008084:	d108      	bne.n	8008098 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800808e:	d009      	beq.n	80080a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	61da      	str	r2, [r3, #28]
 8008096:	e005      	b.n	80080a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d106      	bne.n	80080c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7fa fd46 	bl	8002b50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2202      	movs	r2, #2
 80080c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080e4:	d902      	bls.n	80080ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	e002      	b.n	80080f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80080ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80080fa:	d007      	beq.n	800810c <HAL_SPI_Init+0xa0>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008104:	d002      	beq.n	800810c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800811c:	431a      	orrs	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	431a      	orrs	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	431a      	orrs	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800813a:	431a      	orrs	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	69db      	ldr	r3, [r3, #28]
 8008140:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008144:	431a      	orrs	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814e:	ea42 0103 	orr.w	r1, r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008156:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	430a      	orrs	r2, r1
 8008160:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	0c1b      	lsrs	r3, r3, #16
 8008168:	f003 0204 	and.w	r2, r3, #4
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	f003 0310 	and.w	r3, r3, #16
 8008174:	431a      	orrs	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817a:	f003 0308 	and.w	r3, r3, #8
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008188:	ea42 0103 	orr.w	r1, r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b082      	sub	sp, #8
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e049      	b.n	8008258 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d106      	bne.n	80081de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7fa fcfb 	bl	8002bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2202      	movs	r2, #2
 80081e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3304      	adds	r3, #4
 80081ee:	4619      	mov	r1, r3
 80081f0:	4610      	mov	r0, r2
 80081f2:	f000 fcbb 	bl	8008b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b01      	cmp	r3, #1
 8008272:	d001      	beq.n	8008278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e04f      	b.n	8008318 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f042 0201 	orr.w	r2, r2, #1
 800828e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a23      	ldr	r2, [pc, #140]	; (8008324 <HAL_TIM_Base_Start_IT+0xc4>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d01d      	beq.n	80082d6 <HAL_TIM_Base_Start_IT+0x76>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a2:	d018      	beq.n	80082d6 <HAL_TIM_Base_Start_IT+0x76>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a1f      	ldr	r2, [pc, #124]	; (8008328 <HAL_TIM_Base_Start_IT+0xc8>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d013      	beq.n	80082d6 <HAL_TIM_Base_Start_IT+0x76>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a1e      	ldr	r2, [pc, #120]	; (800832c <HAL_TIM_Base_Start_IT+0xcc>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d00e      	beq.n	80082d6 <HAL_TIM_Base_Start_IT+0x76>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a1c      	ldr	r2, [pc, #112]	; (8008330 <HAL_TIM_Base_Start_IT+0xd0>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d009      	beq.n	80082d6 <HAL_TIM_Base_Start_IT+0x76>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a1b      	ldr	r2, [pc, #108]	; (8008334 <HAL_TIM_Base_Start_IT+0xd4>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d004      	beq.n	80082d6 <HAL_TIM_Base_Start_IT+0x76>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a19      	ldr	r2, [pc, #100]	; (8008338 <HAL_TIM_Base_Start_IT+0xd8>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d115      	bne.n	8008302 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	689a      	ldr	r2, [r3, #8]
 80082dc:	4b17      	ldr	r3, [pc, #92]	; (800833c <HAL_TIM_Base_Start_IT+0xdc>)
 80082de:	4013      	ands	r3, r2
 80082e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2b06      	cmp	r3, #6
 80082e6:	d015      	beq.n	8008314 <HAL_TIM_Base_Start_IT+0xb4>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ee:	d011      	beq.n	8008314 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0201 	orr.w	r2, r2, #1
 80082fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008300:	e008      	b.n	8008314 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 0201 	orr.w	r2, r2, #1
 8008310:	601a      	str	r2, [r3, #0]
 8008312:	e000      	b.n	8008316 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008314:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	40012c00 	.word	0x40012c00
 8008328:	40000400 	.word	0x40000400
 800832c:	40000800 	.word	0x40000800
 8008330:	40000c00 	.word	0x40000c00
 8008334:	40013400 	.word	0x40013400
 8008338:	40014000 	.word	0x40014000
 800833c:	00010007 	.word	0x00010007

08008340 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e049      	b.n	80083e6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d106      	bne.n	800836c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f841 	bl	80083ee <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2202      	movs	r2, #2
 8008370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3304      	adds	r3, #4
 800837c:	4619      	mov	r1, r3
 800837e:	4610      	mov	r0, r2
 8008380:	f000 fbf4 	bl	8008b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b083      	sub	sp, #12
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80083f6:	bf00      	nop
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b082      	sub	sp, #8
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e049      	b.n	80084a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d106      	bne.n	800842e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7fa fc29 	bl	8002c80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2202      	movs	r2, #2
 8008432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3304      	adds	r3, #4
 800843e:	4619      	mov	r1, r3
 8008440:	4610      	mov	r0, r2
 8008442:	f000 fb93 	bl	8008b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d109      	bne.n	80084d4 <HAL_TIM_PWM_Start+0x24>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	bf14      	ite	ne
 80084cc:	2301      	movne	r3, #1
 80084ce:	2300      	moveq	r3, #0
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	e03c      	b.n	800854e <HAL_TIM_PWM_Start+0x9e>
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	2b04      	cmp	r3, #4
 80084d8:	d109      	bne.n	80084ee <HAL_TIM_PWM_Start+0x3e>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	bf14      	ite	ne
 80084e6:	2301      	movne	r3, #1
 80084e8:	2300      	moveq	r3, #0
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	e02f      	b.n	800854e <HAL_TIM_PWM_Start+0x9e>
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b08      	cmp	r3, #8
 80084f2:	d109      	bne.n	8008508 <HAL_TIM_PWM_Start+0x58>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	bf14      	ite	ne
 8008500:	2301      	movne	r3, #1
 8008502:	2300      	moveq	r3, #0
 8008504:	b2db      	uxtb	r3, r3
 8008506:	e022      	b.n	800854e <HAL_TIM_PWM_Start+0x9e>
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2b0c      	cmp	r3, #12
 800850c:	d109      	bne.n	8008522 <HAL_TIM_PWM_Start+0x72>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b01      	cmp	r3, #1
 8008518:	bf14      	ite	ne
 800851a:	2301      	movne	r3, #1
 800851c:	2300      	moveq	r3, #0
 800851e:	b2db      	uxtb	r3, r3
 8008520:	e015      	b.n	800854e <HAL_TIM_PWM_Start+0x9e>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b10      	cmp	r3, #16
 8008526:	d109      	bne.n	800853c <HAL_TIM_PWM_Start+0x8c>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800852e:	b2db      	uxtb	r3, r3
 8008530:	2b01      	cmp	r3, #1
 8008532:	bf14      	ite	ne
 8008534:	2301      	movne	r3, #1
 8008536:	2300      	moveq	r3, #0
 8008538:	b2db      	uxtb	r3, r3
 800853a:	e008      	b.n	800854e <HAL_TIM_PWM_Start+0x9e>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b01      	cmp	r3, #1
 8008546:	bf14      	ite	ne
 8008548:	2301      	movne	r3, #1
 800854a:	2300      	moveq	r3, #0
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e09c      	b.n	8008690 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d104      	bne.n	8008566 <HAL_TIM_PWM_Start+0xb6>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2202      	movs	r2, #2
 8008560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008564:	e023      	b.n	80085ae <HAL_TIM_PWM_Start+0xfe>
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	2b04      	cmp	r3, #4
 800856a:	d104      	bne.n	8008576 <HAL_TIM_PWM_Start+0xc6>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2202      	movs	r2, #2
 8008570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008574:	e01b      	b.n	80085ae <HAL_TIM_PWM_Start+0xfe>
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2b08      	cmp	r3, #8
 800857a:	d104      	bne.n	8008586 <HAL_TIM_PWM_Start+0xd6>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2202      	movs	r2, #2
 8008580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008584:	e013      	b.n	80085ae <HAL_TIM_PWM_Start+0xfe>
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	2b0c      	cmp	r3, #12
 800858a:	d104      	bne.n	8008596 <HAL_TIM_PWM_Start+0xe6>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2202      	movs	r2, #2
 8008590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008594:	e00b      	b.n	80085ae <HAL_TIM_PWM_Start+0xfe>
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2b10      	cmp	r3, #16
 800859a:	d104      	bne.n	80085a6 <HAL_TIM_PWM_Start+0xf6>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085a4:	e003      	b.n	80085ae <HAL_TIM_PWM_Start+0xfe>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2202      	movs	r2, #2
 80085aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2201      	movs	r2, #1
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 fee2 	bl	8009380 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a35      	ldr	r2, [pc, #212]	; (8008698 <HAL_TIM_PWM_Start+0x1e8>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d013      	beq.n	80085ee <HAL_TIM_PWM_Start+0x13e>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a34      	ldr	r2, [pc, #208]	; (800869c <HAL_TIM_PWM_Start+0x1ec>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d00e      	beq.n	80085ee <HAL_TIM_PWM_Start+0x13e>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a32      	ldr	r2, [pc, #200]	; (80086a0 <HAL_TIM_PWM_Start+0x1f0>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d009      	beq.n	80085ee <HAL_TIM_PWM_Start+0x13e>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a31      	ldr	r2, [pc, #196]	; (80086a4 <HAL_TIM_PWM_Start+0x1f4>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d004      	beq.n	80085ee <HAL_TIM_PWM_Start+0x13e>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a2f      	ldr	r2, [pc, #188]	; (80086a8 <HAL_TIM_PWM_Start+0x1f8>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d101      	bne.n	80085f2 <HAL_TIM_PWM_Start+0x142>
 80085ee:	2301      	movs	r3, #1
 80085f0:	e000      	b.n	80085f4 <HAL_TIM_PWM_Start+0x144>
 80085f2:	2300      	movs	r3, #0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d007      	beq.n	8008608 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008606:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a22      	ldr	r2, [pc, #136]	; (8008698 <HAL_TIM_PWM_Start+0x1e8>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d01d      	beq.n	800864e <HAL_TIM_PWM_Start+0x19e>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800861a:	d018      	beq.n	800864e <HAL_TIM_PWM_Start+0x19e>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a22      	ldr	r2, [pc, #136]	; (80086ac <HAL_TIM_PWM_Start+0x1fc>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d013      	beq.n	800864e <HAL_TIM_PWM_Start+0x19e>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a21      	ldr	r2, [pc, #132]	; (80086b0 <HAL_TIM_PWM_Start+0x200>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d00e      	beq.n	800864e <HAL_TIM_PWM_Start+0x19e>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a1f      	ldr	r2, [pc, #124]	; (80086b4 <HAL_TIM_PWM_Start+0x204>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d009      	beq.n	800864e <HAL_TIM_PWM_Start+0x19e>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a17      	ldr	r2, [pc, #92]	; (800869c <HAL_TIM_PWM_Start+0x1ec>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d004      	beq.n	800864e <HAL_TIM_PWM_Start+0x19e>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a15      	ldr	r2, [pc, #84]	; (80086a0 <HAL_TIM_PWM_Start+0x1f0>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d115      	bne.n	800867a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689a      	ldr	r2, [r3, #8]
 8008654:	4b18      	ldr	r3, [pc, #96]	; (80086b8 <HAL_TIM_PWM_Start+0x208>)
 8008656:	4013      	ands	r3, r2
 8008658:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b06      	cmp	r3, #6
 800865e:	d015      	beq.n	800868c <HAL_TIM_PWM_Start+0x1dc>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008666:	d011      	beq.n	800868c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0201 	orr.w	r2, r2, #1
 8008676:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008678:	e008      	b.n	800868c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f042 0201 	orr.w	r2, r2, #1
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	e000      	b.n	800868e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800868c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	40012c00 	.word	0x40012c00
 800869c:	40013400 	.word	0x40013400
 80086a0:	40014000 	.word	0x40014000
 80086a4:	40014400 	.word	0x40014400
 80086a8:	40014800 	.word	0x40014800
 80086ac:	40000400 	.word	0x40000400
 80086b0:	40000800 	.word	0x40000800
 80086b4:	40000c00 	.word	0x40000c00
 80086b8:	00010007 	.word	0x00010007

080086bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d101      	bne.n	80086da <HAL_TIM_OC_ConfigChannel+0x1e>
 80086d6:	2302      	movs	r3, #2
 80086d8:	e066      	b.n	80087a8 <HAL_TIM_OC_ConfigChannel+0xec>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b14      	cmp	r3, #20
 80086e6:	d857      	bhi.n	8008798 <HAL_TIM_OC_ConfigChannel+0xdc>
 80086e8:	a201      	add	r2, pc, #4	; (adr r2, 80086f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80086ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ee:	bf00      	nop
 80086f0:	08008745 	.word	0x08008745
 80086f4:	08008799 	.word	0x08008799
 80086f8:	08008799 	.word	0x08008799
 80086fc:	08008799 	.word	0x08008799
 8008700:	08008753 	.word	0x08008753
 8008704:	08008799 	.word	0x08008799
 8008708:	08008799 	.word	0x08008799
 800870c:	08008799 	.word	0x08008799
 8008710:	08008761 	.word	0x08008761
 8008714:	08008799 	.word	0x08008799
 8008718:	08008799 	.word	0x08008799
 800871c:	08008799 	.word	0x08008799
 8008720:	0800876f 	.word	0x0800876f
 8008724:	08008799 	.word	0x08008799
 8008728:	08008799 	.word	0x08008799
 800872c:	08008799 	.word	0x08008799
 8008730:	0800877d 	.word	0x0800877d
 8008734:	08008799 	.word	0x08008799
 8008738:	08008799 	.word	0x08008799
 800873c:	08008799 	.word	0x08008799
 8008740:	0800878b 	.word	0x0800878b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68b9      	ldr	r1, [r7, #8]
 800874a:	4618      	mov	r0, r3
 800874c:	f000 faa8 	bl	8008ca0 <TIM_OC1_SetConfig>
      break;
 8008750:	e025      	b.n	800879e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68b9      	ldr	r1, [r7, #8]
 8008758:	4618      	mov	r0, r3
 800875a:	f000 fb31 	bl	8008dc0 <TIM_OC2_SetConfig>
      break;
 800875e:	e01e      	b.n	800879e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68b9      	ldr	r1, [r7, #8]
 8008766:	4618      	mov	r0, r3
 8008768:	f000 fbb4 	bl	8008ed4 <TIM_OC3_SetConfig>
      break;
 800876c:	e017      	b.n	800879e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68b9      	ldr	r1, [r7, #8]
 8008774:	4618      	mov	r0, r3
 8008776:	f000 fc35 	bl	8008fe4 <TIM_OC4_SetConfig>
      break;
 800877a:	e010      	b.n	800879e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68b9      	ldr	r1, [r7, #8]
 8008782:	4618      	mov	r0, r3
 8008784:	f000 fc98 	bl	80090b8 <TIM_OC5_SetConfig>
      break;
 8008788:	e009      	b.n	800879e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68b9      	ldr	r1, [r7, #8]
 8008790:	4618      	mov	r0, r3
 8008792:	f000 fcf5 	bl	8009180 <TIM_OC6_SetConfig>
      break;
 8008796:	e002      	b.n	800879e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	75fb      	strb	r3, [r7, #23]
      break;
 800879c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d101      	bne.n	80087ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087ca:	2302      	movs	r3, #2
 80087cc:	e0ff      	b.n	80089ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b14      	cmp	r3, #20
 80087da:	f200 80f0 	bhi.w	80089be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80087de:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80087e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e4:	08008839 	.word	0x08008839
 80087e8:	080089bf 	.word	0x080089bf
 80087ec:	080089bf 	.word	0x080089bf
 80087f0:	080089bf 	.word	0x080089bf
 80087f4:	08008879 	.word	0x08008879
 80087f8:	080089bf 	.word	0x080089bf
 80087fc:	080089bf 	.word	0x080089bf
 8008800:	080089bf 	.word	0x080089bf
 8008804:	080088bb 	.word	0x080088bb
 8008808:	080089bf 	.word	0x080089bf
 800880c:	080089bf 	.word	0x080089bf
 8008810:	080089bf 	.word	0x080089bf
 8008814:	080088fb 	.word	0x080088fb
 8008818:	080089bf 	.word	0x080089bf
 800881c:	080089bf 	.word	0x080089bf
 8008820:	080089bf 	.word	0x080089bf
 8008824:	0800893d 	.word	0x0800893d
 8008828:	080089bf 	.word	0x080089bf
 800882c:	080089bf 	.word	0x080089bf
 8008830:	080089bf 	.word	0x080089bf
 8008834:	0800897d 	.word	0x0800897d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68b9      	ldr	r1, [r7, #8]
 800883e:	4618      	mov	r0, r3
 8008840:	f000 fa2e 	bl	8008ca0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	699a      	ldr	r2, [r3, #24]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f042 0208 	orr.w	r2, r2, #8
 8008852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	699a      	ldr	r2, [r3, #24]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 0204 	bic.w	r2, r2, #4
 8008862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6999      	ldr	r1, [r3, #24]
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	691a      	ldr	r2, [r3, #16]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	430a      	orrs	r2, r1
 8008874:	619a      	str	r2, [r3, #24]
      break;
 8008876:	e0a5      	b.n	80089c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68b9      	ldr	r1, [r7, #8]
 800887e:	4618      	mov	r0, r3
 8008880:	f000 fa9e 	bl	8008dc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	699a      	ldr	r2, [r3, #24]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	699a      	ldr	r2, [r3, #24]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6999      	ldr	r1, [r3, #24]
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	021a      	lsls	r2, r3, #8
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	619a      	str	r2, [r3, #24]
      break;
 80088b8:	e084      	b.n	80089c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68b9      	ldr	r1, [r7, #8]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 fb07 	bl	8008ed4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	69da      	ldr	r2, [r3, #28]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f042 0208 	orr.w	r2, r2, #8
 80088d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	69da      	ldr	r2, [r3, #28]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f022 0204 	bic.w	r2, r2, #4
 80088e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	69d9      	ldr	r1, [r3, #28]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	691a      	ldr	r2, [r3, #16]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	430a      	orrs	r2, r1
 80088f6:	61da      	str	r2, [r3, #28]
      break;
 80088f8:	e064      	b.n	80089c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68b9      	ldr	r1, [r7, #8]
 8008900:	4618      	mov	r0, r3
 8008902:	f000 fb6f 	bl	8008fe4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	69da      	ldr	r2, [r3, #28]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	69da      	ldr	r2, [r3, #28]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	69d9      	ldr	r1, [r3, #28]
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	021a      	lsls	r2, r3, #8
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	61da      	str	r2, [r3, #28]
      break;
 800893a:	e043      	b.n	80089c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68b9      	ldr	r1, [r7, #8]
 8008942:	4618      	mov	r0, r3
 8008944:	f000 fbb8 	bl	80090b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f042 0208 	orr.w	r2, r2, #8
 8008956:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0204 	bic.w	r2, r2, #4
 8008966:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	691a      	ldr	r2, [r3, #16]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800897a:	e023      	b.n	80089c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68b9      	ldr	r1, [r7, #8]
 8008982:	4618      	mov	r0, r3
 8008984:	f000 fbfc 	bl	8009180 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008996:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	021a      	lsls	r2, r3, #8
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	430a      	orrs	r2, r1
 80089ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80089bc:	e002      	b.n	80089c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	75fb      	strb	r3, [r7, #23]
      break;
 80089c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3718      	adds	r7, #24
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop

080089d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d101      	bne.n	80089f4 <HAL_TIM_ConfigClockSource+0x1c>
 80089f0:	2302      	movs	r3, #2
 80089f2:	e0b6      	b.n	8008b62 <HAL_TIM_ConfigClockSource+0x18a>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2202      	movs	r2, #2
 8008a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a30:	d03e      	beq.n	8008ab0 <HAL_TIM_ConfigClockSource+0xd8>
 8008a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a36:	f200 8087 	bhi.w	8008b48 <HAL_TIM_ConfigClockSource+0x170>
 8008a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a3e:	f000 8086 	beq.w	8008b4e <HAL_TIM_ConfigClockSource+0x176>
 8008a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a46:	d87f      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x170>
 8008a48:	2b70      	cmp	r3, #112	; 0x70
 8008a4a:	d01a      	beq.n	8008a82 <HAL_TIM_ConfigClockSource+0xaa>
 8008a4c:	2b70      	cmp	r3, #112	; 0x70
 8008a4e:	d87b      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x170>
 8008a50:	2b60      	cmp	r3, #96	; 0x60
 8008a52:	d050      	beq.n	8008af6 <HAL_TIM_ConfigClockSource+0x11e>
 8008a54:	2b60      	cmp	r3, #96	; 0x60
 8008a56:	d877      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x170>
 8008a58:	2b50      	cmp	r3, #80	; 0x50
 8008a5a:	d03c      	beq.n	8008ad6 <HAL_TIM_ConfigClockSource+0xfe>
 8008a5c:	2b50      	cmp	r3, #80	; 0x50
 8008a5e:	d873      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x170>
 8008a60:	2b40      	cmp	r3, #64	; 0x40
 8008a62:	d058      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x13e>
 8008a64:	2b40      	cmp	r3, #64	; 0x40
 8008a66:	d86f      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x170>
 8008a68:	2b30      	cmp	r3, #48	; 0x30
 8008a6a:	d064      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0x15e>
 8008a6c:	2b30      	cmp	r3, #48	; 0x30
 8008a6e:	d86b      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x170>
 8008a70:	2b20      	cmp	r3, #32
 8008a72:	d060      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0x15e>
 8008a74:	2b20      	cmp	r3, #32
 8008a76:	d867      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x170>
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d05c      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0x15e>
 8008a7c:	2b10      	cmp	r3, #16
 8008a7e:	d05a      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0x15e>
 8008a80:	e062      	b.n	8008b48 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a92:	f000 fc55 	bl	8009340 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	609a      	str	r2, [r3, #8]
      break;
 8008aae:	e04f      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ac0:	f000 fc3e 	bl	8009340 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	689a      	ldr	r2, [r3, #8]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ad2:	609a      	str	r2, [r3, #8]
      break;
 8008ad4:	e03c      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f000 fbb2 	bl	800924c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2150      	movs	r1, #80	; 0x50
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 fc0b 	bl	800930a <TIM_ITRx_SetConfig>
      break;
 8008af4:	e02c      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b02:	461a      	mov	r2, r3
 8008b04:	f000 fbd1 	bl	80092aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2160      	movs	r1, #96	; 0x60
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 fbfb 	bl	800930a <TIM_ITRx_SetConfig>
      break;
 8008b14:	e01c      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b22:	461a      	mov	r2, r3
 8008b24:	f000 fb92 	bl	800924c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2140      	movs	r1, #64	; 0x40
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fbeb 	bl	800930a <TIM_ITRx_SetConfig>
      break;
 8008b34:	e00c      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	4610      	mov	r0, r2
 8008b42:	f000 fbe2 	bl	800930a <TIM_ITRx_SetConfig>
      break;
 8008b46:	e003      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b4c:	e000      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
	...

08008b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a40      	ldr	r2, [pc, #256]	; (8008c80 <TIM_Base_SetConfig+0x114>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d013      	beq.n	8008bac <TIM_Base_SetConfig+0x40>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b8a:	d00f      	beq.n	8008bac <TIM_Base_SetConfig+0x40>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a3d      	ldr	r2, [pc, #244]	; (8008c84 <TIM_Base_SetConfig+0x118>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d00b      	beq.n	8008bac <TIM_Base_SetConfig+0x40>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a3c      	ldr	r2, [pc, #240]	; (8008c88 <TIM_Base_SetConfig+0x11c>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d007      	beq.n	8008bac <TIM_Base_SetConfig+0x40>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a3b      	ldr	r2, [pc, #236]	; (8008c8c <TIM_Base_SetConfig+0x120>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d003      	beq.n	8008bac <TIM_Base_SetConfig+0x40>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a3a      	ldr	r2, [pc, #232]	; (8008c90 <TIM_Base_SetConfig+0x124>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d108      	bne.n	8008bbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a2f      	ldr	r2, [pc, #188]	; (8008c80 <TIM_Base_SetConfig+0x114>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d01f      	beq.n	8008c06 <TIM_Base_SetConfig+0x9a>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bcc:	d01b      	beq.n	8008c06 <TIM_Base_SetConfig+0x9a>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a2c      	ldr	r2, [pc, #176]	; (8008c84 <TIM_Base_SetConfig+0x118>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d017      	beq.n	8008c06 <TIM_Base_SetConfig+0x9a>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a2b      	ldr	r2, [pc, #172]	; (8008c88 <TIM_Base_SetConfig+0x11c>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d013      	beq.n	8008c06 <TIM_Base_SetConfig+0x9a>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a2a      	ldr	r2, [pc, #168]	; (8008c8c <TIM_Base_SetConfig+0x120>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d00f      	beq.n	8008c06 <TIM_Base_SetConfig+0x9a>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a29      	ldr	r2, [pc, #164]	; (8008c90 <TIM_Base_SetConfig+0x124>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d00b      	beq.n	8008c06 <TIM_Base_SetConfig+0x9a>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a28      	ldr	r2, [pc, #160]	; (8008c94 <TIM_Base_SetConfig+0x128>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d007      	beq.n	8008c06 <TIM_Base_SetConfig+0x9a>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a27      	ldr	r2, [pc, #156]	; (8008c98 <TIM_Base_SetConfig+0x12c>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d003      	beq.n	8008c06 <TIM_Base_SetConfig+0x9a>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a26      	ldr	r2, [pc, #152]	; (8008c9c <TIM_Base_SetConfig+0x130>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d108      	bne.n	8008c18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	689a      	ldr	r2, [r3, #8]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a10      	ldr	r2, [pc, #64]	; (8008c80 <TIM_Base_SetConfig+0x114>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d00f      	beq.n	8008c64 <TIM_Base_SetConfig+0xf8>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a12      	ldr	r2, [pc, #72]	; (8008c90 <TIM_Base_SetConfig+0x124>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d00b      	beq.n	8008c64 <TIM_Base_SetConfig+0xf8>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a11      	ldr	r2, [pc, #68]	; (8008c94 <TIM_Base_SetConfig+0x128>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d007      	beq.n	8008c64 <TIM_Base_SetConfig+0xf8>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a10      	ldr	r2, [pc, #64]	; (8008c98 <TIM_Base_SetConfig+0x12c>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d003      	beq.n	8008c64 <TIM_Base_SetConfig+0xf8>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a0f      	ldr	r2, [pc, #60]	; (8008c9c <TIM_Base_SetConfig+0x130>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d103      	bne.n	8008c6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	691a      	ldr	r2, [r3, #16]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	615a      	str	r2, [r3, #20]
}
 8008c72:	bf00      	nop
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	40012c00 	.word	0x40012c00
 8008c84:	40000400 	.word	0x40000400
 8008c88:	40000800 	.word	0x40000800
 8008c8c:	40000c00 	.word	0x40000c00
 8008c90:	40013400 	.word	0x40013400
 8008c94:	40014000 	.word	0x40014000
 8008c98:	40014400 	.word	0x40014400
 8008c9c:	40014800 	.word	0x40014800

08008ca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a1b      	ldr	r3, [r3, #32]
 8008cb4:	f023 0201 	bic.w	r2, r3, #1
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f023 0303 	bic.w	r3, r3, #3
 8008cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	f023 0302 	bic.w	r3, r3, #2
 8008cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a2c      	ldr	r2, [pc, #176]	; (8008dac <TIM_OC1_SetConfig+0x10c>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d00f      	beq.n	8008d20 <TIM_OC1_SetConfig+0x80>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a2b      	ldr	r2, [pc, #172]	; (8008db0 <TIM_OC1_SetConfig+0x110>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d00b      	beq.n	8008d20 <TIM_OC1_SetConfig+0x80>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a2a      	ldr	r2, [pc, #168]	; (8008db4 <TIM_OC1_SetConfig+0x114>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d007      	beq.n	8008d20 <TIM_OC1_SetConfig+0x80>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a29      	ldr	r2, [pc, #164]	; (8008db8 <TIM_OC1_SetConfig+0x118>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d003      	beq.n	8008d20 <TIM_OC1_SetConfig+0x80>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a28      	ldr	r2, [pc, #160]	; (8008dbc <TIM_OC1_SetConfig+0x11c>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d10c      	bne.n	8008d3a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f023 0308 	bic.w	r3, r3, #8
 8008d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f023 0304 	bic.w	r3, r3, #4
 8008d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a1b      	ldr	r2, [pc, #108]	; (8008dac <TIM_OC1_SetConfig+0x10c>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d00f      	beq.n	8008d62 <TIM_OC1_SetConfig+0xc2>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a1a      	ldr	r2, [pc, #104]	; (8008db0 <TIM_OC1_SetConfig+0x110>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d00b      	beq.n	8008d62 <TIM_OC1_SetConfig+0xc2>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a19      	ldr	r2, [pc, #100]	; (8008db4 <TIM_OC1_SetConfig+0x114>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d007      	beq.n	8008d62 <TIM_OC1_SetConfig+0xc2>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a18      	ldr	r2, [pc, #96]	; (8008db8 <TIM_OC1_SetConfig+0x118>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d003      	beq.n	8008d62 <TIM_OC1_SetConfig+0xc2>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a17      	ldr	r2, [pc, #92]	; (8008dbc <TIM_OC1_SetConfig+0x11c>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d111      	bne.n	8008d86 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	685a      	ldr	r2, [r3, #4]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	621a      	str	r2, [r3, #32]
}
 8008da0:	bf00      	nop
 8008da2:	371c      	adds	r7, #28
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	40012c00 	.word	0x40012c00
 8008db0:	40013400 	.word	0x40013400
 8008db4:	40014000 	.word	0x40014000
 8008db8:	40014400 	.word	0x40014400
 8008dbc:	40014800 	.word	0x40014800

08008dc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b087      	sub	sp, #28
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a1b      	ldr	r3, [r3, #32]
 8008dd4:	f023 0210 	bic.w	r2, r3, #16
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	699b      	ldr	r3, [r3, #24]
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	021b      	lsls	r3, r3, #8
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	f023 0320 	bic.w	r3, r3, #32
 8008e0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	011b      	lsls	r3, r3, #4
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a28      	ldr	r2, [pc, #160]	; (8008ec0 <TIM_OC2_SetConfig+0x100>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d003      	beq.n	8008e2c <TIM_OC2_SetConfig+0x6c>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a27      	ldr	r2, [pc, #156]	; (8008ec4 <TIM_OC2_SetConfig+0x104>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d10d      	bne.n	8008e48 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	011b      	lsls	r3, r3, #4
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a1d      	ldr	r2, [pc, #116]	; (8008ec0 <TIM_OC2_SetConfig+0x100>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d00f      	beq.n	8008e70 <TIM_OC2_SetConfig+0xb0>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a1c      	ldr	r2, [pc, #112]	; (8008ec4 <TIM_OC2_SetConfig+0x104>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d00b      	beq.n	8008e70 <TIM_OC2_SetConfig+0xb0>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a1b      	ldr	r2, [pc, #108]	; (8008ec8 <TIM_OC2_SetConfig+0x108>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d007      	beq.n	8008e70 <TIM_OC2_SetConfig+0xb0>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a1a      	ldr	r2, [pc, #104]	; (8008ecc <TIM_OC2_SetConfig+0x10c>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d003      	beq.n	8008e70 <TIM_OC2_SetConfig+0xb0>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a19      	ldr	r2, [pc, #100]	; (8008ed0 <TIM_OC2_SetConfig+0x110>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d113      	bne.n	8008e98 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	693a      	ldr	r2, [r7, #16]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	693a      	ldr	r2, [r7, #16]
 8008e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	685a      	ldr	r2, [r3, #4]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	621a      	str	r2, [r3, #32]
}
 8008eb2:	bf00      	nop
 8008eb4:	371c      	adds	r7, #28
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	40012c00 	.word	0x40012c00
 8008ec4:	40013400 	.word	0x40013400
 8008ec8:	40014000 	.word	0x40014000
 8008ecc:	40014400 	.word	0x40014400
 8008ed0:	40014800 	.word	0x40014800

08008ed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b087      	sub	sp, #28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a1b      	ldr	r3, [r3, #32]
 8008ee8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f023 0303 	bic.w	r3, r3, #3
 8008f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	021b      	lsls	r3, r3, #8
 8008f28:	697a      	ldr	r2, [r7, #20]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a27      	ldr	r2, [pc, #156]	; (8008fd0 <TIM_OC3_SetConfig+0xfc>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d003      	beq.n	8008f3e <TIM_OC3_SetConfig+0x6a>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a26      	ldr	r2, [pc, #152]	; (8008fd4 <TIM_OC3_SetConfig+0x100>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d10d      	bne.n	8008f5a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	021b      	lsls	r3, r3, #8
 8008f4c:	697a      	ldr	r2, [r7, #20]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a1c      	ldr	r2, [pc, #112]	; (8008fd0 <TIM_OC3_SetConfig+0xfc>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d00f      	beq.n	8008f82 <TIM_OC3_SetConfig+0xae>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a1b      	ldr	r2, [pc, #108]	; (8008fd4 <TIM_OC3_SetConfig+0x100>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d00b      	beq.n	8008f82 <TIM_OC3_SetConfig+0xae>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a1a      	ldr	r2, [pc, #104]	; (8008fd8 <TIM_OC3_SetConfig+0x104>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d007      	beq.n	8008f82 <TIM_OC3_SetConfig+0xae>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a19      	ldr	r2, [pc, #100]	; (8008fdc <TIM_OC3_SetConfig+0x108>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d003      	beq.n	8008f82 <TIM_OC3_SetConfig+0xae>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a18      	ldr	r2, [pc, #96]	; (8008fe0 <TIM_OC3_SetConfig+0x10c>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d113      	bne.n	8008faa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	011b      	lsls	r3, r3, #4
 8008f98:	693a      	ldr	r2, [r7, #16]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	011b      	lsls	r3, r3, #4
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	621a      	str	r2, [r3, #32]
}
 8008fc4:	bf00      	nop
 8008fc6:	371c      	adds	r7, #28
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	40012c00 	.word	0x40012c00
 8008fd4:	40013400 	.word	0x40013400
 8008fd8:	40014000 	.word	0x40014000
 8008fdc:	40014400 	.word	0x40014400
 8008fe0:	40014800 	.word	0x40014800

08008fe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b087      	sub	sp, #28
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a1b      	ldr	r3, [r3, #32]
 8008ff8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800901e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	021b      	lsls	r3, r3, #8
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	4313      	orrs	r3, r2
 800902a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009032:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	031b      	lsls	r3, r3, #12
 800903a:	693a      	ldr	r2, [r7, #16]
 800903c:	4313      	orrs	r3, r2
 800903e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a18      	ldr	r2, [pc, #96]	; (80090a4 <TIM_OC4_SetConfig+0xc0>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d00f      	beq.n	8009068 <TIM_OC4_SetConfig+0x84>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a17      	ldr	r2, [pc, #92]	; (80090a8 <TIM_OC4_SetConfig+0xc4>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d00b      	beq.n	8009068 <TIM_OC4_SetConfig+0x84>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a16      	ldr	r2, [pc, #88]	; (80090ac <TIM_OC4_SetConfig+0xc8>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d007      	beq.n	8009068 <TIM_OC4_SetConfig+0x84>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a15      	ldr	r2, [pc, #84]	; (80090b0 <TIM_OC4_SetConfig+0xcc>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d003      	beq.n	8009068 <TIM_OC4_SetConfig+0x84>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a14      	ldr	r2, [pc, #80]	; (80090b4 <TIM_OC4_SetConfig+0xd0>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d109      	bne.n	800907c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800906e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	695b      	ldr	r3, [r3, #20]
 8009074:	019b      	lsls	r3, r3, #6
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	4313      	orrs	r3, r2
 800907a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	685a      	ldr	r2, [r3, #4]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	693a      	ldr	r2, [r7, #16]
 8009094:	621a      	str	r2, [r3, #32]
}
 8009096:	bf00      	nop
 8009098:	371c      	adds	r7, #28
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	40012c00 	.word	0x40012c00
 80090a8:	40013400 	.word	0x40013400
 80090ac:	40014000 	.word	0x40014000
 80090b0:	40014400 	.word	0x40014400
 80090b4:	40014800 	.word	0x40014800

080090b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b087      	sub	sp, #28
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6a1b      	ldr	r3, [r3, #32]
 80090cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80090fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	041b      	lsls	r3, r3, #16
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	4313      	orrs	r3, r2
 8009108:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a17      	ldr	r2, [pc, #92]	; (800916c <TIM_OC5_SetConfig+0xb4>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d00f      	beq.n	8009132 <TIM_OC5_SetConfig+0x7a>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a16      	ldr	r2, [pc, #88]	; (8009170 <TIM_OC5_SetConfig+0xb8>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d00b      	beq.n	8009132 <TIM_OC5_SetConfig+0x7a>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a15      	ldr	r2, [pc, #84]	; (8009174 <TIM_OC5_SetConfig+0xbc>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d007      	beq.n	8009132 <TIM_OC5_SetConfig+0x7a>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a14      	ldr	r2, [pc, #80]	; (8009178 <TIM_OC5_SetConfig+0xc0>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d003      	beq.n	8009132 <TIM_OC5_SetConfig+0x7a>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a13      	ldr	r2, [pc, #76]	; (800917c <TIM_OC5_SetConfig+0xc4>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d109      	bne.n	8009146 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009138:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	021b      	lsls	r3, r3, #8
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	4313      	orrs	r3, r2
 8009144:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	693a      	ldr	r2, [r7, #16]
 800915e:	621a      	str	r2, [r3, #32]
}
 8009160:	bf00      	nop
 8009162:	371c      	adds	r7, #28
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	40012c00 	.word	0x40012c00
 8009170:	40013400 	.word	0x40013400
 8009174:	40014000 	.word	0x40014000
 8009178:	40014400 	.word	0x40014400
 800917c:	40014800 	.word	0x40014800

08009180 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009180:	b480      	push	{r7}
 8009182:	b087      	sub	sp, #28
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a1b      	ldr	r3, [r3, #32]
 8009194:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	021b      	lsls	r3, r3, #8
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	4313      	orrs	r3, r2
 80091be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80091c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	051b      	lsls	r3, r3, #20
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a18      	ldr	r2, [pc, #96]	; (8009238 <TIM_OC6_SetConfig+0xb8>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d00f      	beq.n	80091fc <TIM_OC6_SetConfig+0x7c>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a17      	ldr	r2, [pc, #92]	; (800923c <TIM_OC6_SetConfig+0xbc>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d00b      	beq.n	80091fc <TIM_OC6_SetConfig+0x7c>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a16      	ldr	r2, [pc, #88]	; (8009240 <TIM_OC6_SetConfig+0xc0>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d007      	beq.n	80091fc <TIM_OC6_SetConfig+0x7c>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a15      	ldr	r2, [pc, #84]	; (8009244 <TIM_OC6_SetConfig+0xc4>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d003      	beq.n	80091fc <TIM_OC6_SetConfig+0x7c>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a14      	ldr	r2, [pc, #80]	; (8009248 <TIM_OC6_SetConfig+0xc8>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d109      	bne.n	8009210 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009202:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	029b      	lsls	r3, r3, #10
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	4313      	orrs	r3, r2
 800920e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	685a      	ldr	r2, [r3, #4]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	621a      	str	r2, [r3, #32]
}
 800922a:	bf00      	nop
 800922c:	371c      	adds	r7, #28
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	40012c00 	.word	0x40012c00
 800923c:	40013400 	.word	0x40013400
 8009240:	40014000 	.word	0x40014000
 8009244:	40014400 	.word	0x40014400
 8009248:	40014800 	.word	0x40014800

0800924c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6a1b      	ldr	r3, [r3, #32]
 800925c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	f023 0201 	bic.w	r2, r3, #1
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	011b      	lsls	r3, r3, #4
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	4313      	orrs	r3, r2
 8009280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f023 030a 	bic.w	r3, r3, #10
 8009288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	4313      	orrs	r3, r2
 8009290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	621a      	str	r2, [r3, #32]
}
 800929e:	bf00      	nop
 80092a0:	371c      	adds	r7, #28
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092aa:	b480      	push	{r7}
 80092ac:	b087      	sub	sp, #28
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	60f8      	str	r0, [r7, #12]
 80092b2:	60b9      	str	r1, [r7, #8]
 80092b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6a1b      	ldr	r3, [r3, #32]
 80092c0:	f023 0210 	bic.w	r2, r3, #16
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	699b      	ldr	r3, [r3, #24]
 80092cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	031b      	lsls	r3, r3, #12
 80092da:	693a      	ldr	r2, [r7, #16]
 80092dc:	4313      	orrs	r3, r2
 80092de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	011b      	lsls	r3, r3, #4
 80092ec:	697a      	ldr	r2, [r7, #20]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	693a      	ldr	r2, [r7, #16]
 80092f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	621a      	str	r2, [r3, #32]
}
 80092fe:	bf00      	nop
 8009300:	371c      	adds	r7, #28
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr

0800930a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800930a:	b480      	push	{r7}
 800930c:	b085      	sub	sp, #20
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009320:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009322:	683a      	ldr	r2, [r7, #0]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	4313      	orrs	r3, r2
 8009328:	f043 0307 	orr.w	r3, r3, #7
 800932c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	609a      	str	r2, [r3, #8]
}
 8009334:	bf00      	nop
 8009336:	3714      	adds	r7, #20
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009340:	b480      	push	{r7}
 8009342:	b087      	sub	sp, #28
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
 800934c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800935a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	021a      	lsls	r2, r3, #8
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	431a      	orrs	r2, r3
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	4313      	orrs	r3, r2
 8009368:	697a      	ldr	r2, [r7, #20]
 800936a:	4313      	orrs	r3, r2
 800936c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	609a      	str	r2, [r3, #8]
}
 8009374:	bf00      	nop
 8009376:	371c      	adds	r7, #28
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009380:	b480      	push	{r7}
 8009382:	b087      	sub	sp, #28
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	f003 031f 	and.w	r3, r3, #31
 8009392:	2201      	movs	r2, #1
 8009394:	fa02 f303 	lsl.w	r3, r2, r3
 8009398:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6a1a      	ldr	r2, [r3, #32]
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	43db      	mvns	r3, r3
 80093a2:	401a      	ands	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6a1a      	ldr	r2, [r3, #32]
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	f003 031f 	and.w	r3, r3, #31
 80093b2:	6879      	ldr	r1, [r7, #4]
 80093b4:	fa01 f303 	lsl.w	r3, r1, r3
 80093b8:	431a      	orrs	r2, r3
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	621a      	str	r2, [r3, #32]
}
 80093be:	bf00      	nop
 80093c0:	371c      	adds	r7, #28
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
	...

080093cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d101      	bne.n	80093e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093e0:	2302      	movs	r3, #2
 80093e2:	e068      	b.n	80094b6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a2e      	ldr	r2, [pc, #184]	; (80094c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d004      	beq.n	8009418 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a2d      	ldr	r2, [pc, #180]	; (80094c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d108      	bne.n	800942a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800941e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	4313      	orrs	r3, r2
 8009428:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009430:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	4313      	orrs	r3, r2
 800943a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a1e      	ldr	r2, [pc, #120]	; (80094c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d01d      	beq.n	800948a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009456:	d018      	beq.n	800948a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a1b      	ldr	r2, [pc, #108]	; (80094cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d013      	beq.n	800948a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a1a      	ldr	r2, [pc, #104]	; (80094d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d00e      	beq.n	800948a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a18      	ldr	r2, [pc, #96]	; (80094d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d009      	beq.n	800948a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a13      	ldr	r2, [pc, #76]	; (80094c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d004      	beq.n	800948a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a14      	ldr	r2, [pc, #80]	; (80094d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d10c      	bne.n	80094a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009490:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	4313      	orrs	r3, r2
 800949a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	40012c00 	.word	0x40012c00
 80094c8:	40013400 	.word	0x40013400
 80094cc:	40000400 	.word	0x40000400
 80094d0:	40000800 	.word	0x40000800
 80094d4:	40000c00 	.word	0x40000c00
 80094d8:	40014000 	.word	0x40014000

080094dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80094e6:	2300      	movs	r3, #0
 80094e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d101      	bne.n	80094f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80094f4:	2302      	movs	r3, #2
 80094f6:	e065      	b.n	80095c4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	4313      	orrs	r3, r2
 800950c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	4313      	orrs	r3, r2
 800951a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	4313      	orrs	r3, r2
 8009528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4313      	orrs	r3, r2
 8009536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	4313      	orrs	r3, r2
 8009544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	695b      	ldr	r3, [r3, #20]
 8009550:	4313      	orrs	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955e:	4313      	orrs	r3, r2
 8009560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	041b      	lsls	r3, r3, #16
 800956e:	4313      	orrs	r3, r2
 8009570:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a16      	ldr	r2, [pc, #88]	; (80095d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d004      	beq.n	8009586 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a14      	ldr	r2, [pc, #80]	; (80095d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d115      	bne.n	80095b2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009590:	051b      	lsls	r3, r3, #20
 8009592:	4313      	orrs	r3, r2
 8009594:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	69db      	ldr	r3, [r3, #28]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3714      	adds	r7, #20
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	40012c00 	.word	0x40012c00
 80095d4:	40013400 	.word	0x40013400

080095d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d101      	bne.n	80095ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e042      	b.n	8009670 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d106      	bne.n	8009602 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7f9 fa47 	bl	8002a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2224      	movs	r2, #36	; 0x24
 8009606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 0201 	bic.w	r2, r2, #1
 8009618:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961e:	2b00      	cmp	r3, #0
 8009620:	d002      	beq.n	8009628 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fb24 	bl	8009c70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f825 	bl	8009678 <UART_SetConfig>
 800962e:	4603      	mov	r3, r0
 8009630:	2b01      	cmp	r3, #1
 8009632:	d101      	bne.n	8009638 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	e01b      	b.n	8009670 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685a      	ldr	r2, [r3, #4]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009646:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689a      	ldr	r2, [r3, #8]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009656:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f042 0201 	orr.w	r2, r2, #1
 8009666:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 fba3 	bl	8009db4 <UART_CheckIdleState>
 800966e:	4603      	mov	r3, r0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800967c:	b08c      	sub	sp, #48	; 0x30
 800967e:	af00      	add	r7, sp, #0
 8009680:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	689a      	ldr	r2, [r3, #8]
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	431a      	orrs	r2, r3
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	431a      	orrs	r2, r3
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	69db      	ldr	r3, [r3, #28]
 800969c:	4313      	orrs	r3, r2
 800969e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	4baa      	ldr	r3, [pc, #680]	; (8009950 <UART_SetConfig+0x2d8>)
 80096a8:	4013      	ands	r3, r2
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	6812      	ldr	r2, [r2, #0]
 80096ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096b0:	430b      	orrs	r3, r1
 80096b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	68da      	ldr	r2, [r3, #12]
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	430a      	orrs	r2, r1
 80096c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	699b      	ldr	r3, [r3, #24]
 80096ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a9f      	ldr	r2, [pc, #636]	; (8009954 <UART_SetConfig+0x2dc>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d004      	beq.n	80096e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096e0:	4313      	orrs	r3, r2
 80096e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80096ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	6812      	ldr	r2, [r2, #0]
 80096f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096f8:	430b      	orrs	r3, r1
 80096fa:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009702:	f023 010f 	bic.w	r1, r3, #15
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	430a      	orrs	r2, r1
 8009710:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a90      	ldr	r2, [pc, #576]	; (8009958 <UART_SetConfig+0x2e0>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d125      	bne.n	8009768 <UART_SetConfig+0xf0>
 800971c:	4b8f      	ldr	r3, [pc, #572]	; (800995c <UART_SetConfig+0x2e4>)
 800971e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009722:	f003 0303 	and.w	r3, r3, #3
 8009726:	2b03      	cmp	r3, #3
 8009728:	d81a      	bhi.n	8009760 <UART_SetConfig+0xe8>
 800972a:	a201      	add	r2, pc, #4	; (adr r2, 8009730 <UART_SetConfig+0xb8>)
 800972c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009730:	08009741 	.word	0x08009741
 8009734:	08009751 	.word	0x08009751
 8009738:	08009749 	.word	0x08009749
 800973c:	08009759 	.word	0x08009759
 8009740:	2301      	movs	r3, #1
 8009742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009746:	e116      	b.n	8009976 <UART_SetConfig+0x2fe>
 8009748:	2302      	movs	r3, #2
 800974a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800974e:	e112      	b.n	8009976 <UART_SetConfig+0x2fe>
 8009750:	2304      	movs	r3, #4
 8009752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009756:	e10e      	b.n	8009976 <UART_SetConfig+0x2fe>
 8009758:	2308      	movs	r3, #8
 800975a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800975e:	e10a      	b.n	8009976 <UART_SetConfig+0x2fe>
 8009760:	2310      	movs	r3, #16
 8009762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009766:	e106      	b.n	8009976 <UART_SetConfig+0x2fe>
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a7c      	ldr	r2, [pc, #496]	; (8009960 <UART_SetConfig+0x2e8>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d138      	bne.n	80097e4 <UART_SetConfig+0x16c>
 8009772:	4b7a      	ldr	r3, [pc, #488]	; (800995c <UART_SetConfig+0x2e4>)
 8009774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009778:	f003 030c 	and.w	r3, r3, #12
 800977c:	2b0c      	cmp	r3, #12
 800977e:	d82d      	bhi.n	80097dc <UART_SetConfig+0x164>
 8009780:	a201      	add	r2, pc, #4	; (adr r2, 8009788 <UART_SetConfig+0x110>)
 8009782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009786:	bf00      	nop
 8009788:	080097bd 	.word	0x080097bd
 800978c:	080097dd 	.word	0x080097dd
 8009790:	080097dd 	.word	0x080097dd
 8009794:	080097dd 	.word	0x080097dd
 8009798:	080097cd 	.word	0x080097cd
 800979c:	080097dd 	.word	0x080097dd
 80097a0:	080097dd 	.word	0x080097dd
 80097a4:	080097dd 	.word	0x080097dd
 80097a8:	080097c5 	.word	0x080097c5
 80097ac:	080097dd 	.word	0x080097dd
 80097b0:	080097dd 	.word	0x080097dd
 80097b4:	080097dd 	.word	0x080097dd
 80097b8:	080097d5 	.word	0x080097d5
 80097bc:	2300      	movs	r3, #0
 80097be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097c2:	e0d8      	b.n	8009976 <UART_SetConfig+0x2fe>
 80097c4:	2302      	movs	r3, #2
 80097c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097ca:	e0d4      	b.n	8009976 <UART_SetConfig+0x2fe>
 80097cc:	2304      	movs	r3, #4
 80097ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097d2:	e0d0      	b.n	8009976 <UART_SetConfig+0x2fe>
 80097d4:	2308      	movs	r3, #8
 80097d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097da:	e0cc      	b.n	8009976 <UART_SetConfig+0x2fe>
 80097dc:	2310      	movs	r3, #16
 80097de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097e2:	e0c8      	b.n	8009976 <UART_SetConfig+0x2fe>
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a5e      	ldr	r2, [pc, #376]	; (8009964 <UART_SetConfig+0x2ec>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d125      	bne.n	800983a <UART_SetConfig+0x1c2>
 80097ee:	4b5b      	ldr	r3, [pc, #364]	; (800995c <UART_SetConfig+0x2e4>)
 80097f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80097f8:	2b30      	cmp	r3, #48	; 0x30
 80097fa:	d016      	beq.n	800982a <UART_SetConfig+0x1b2>
 80097fc:	2b30      	cmp	r3, #48	; 0x30
 80097fe:	d818      	bhi.n	8009832 <UART_SetConfig+0x1ba>
 8009800:	2b20      	cmp	r3, #32
 8009802:	d00a      	beq.n	800981a <UART_SetConfig+0x1a2>
 8009804:	2b20      	cmp	r3, #32
 8009806:	d814      	bhi.n	8009832 <UART_SetConfig+0x1ba>
 8009808:	2b00      	cmp	r3, #0
 800980a:	d002      	beq.n	8009812 <UART_SetConfig+0x19a>
 800980c:	2b10      	cmp	r3, #16
 800980e:	d008      	beq.n	8009822 <UART_SetConfig+0x1aa>
 8009810:	e00f      	b.n	8009832 <UART_SetConfig+0x1ba>
 8009812:	2300      	movs	r3, #0
 8009814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009818:	e0ad      	b.n	8009976 <UART_SetConfig+0x2fe>
 800981a:	2302      	movs	r3, #2
 800981c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009820:	e0a9      	b.n	8009976 <UART_SetConfig+0x2fe>
 8009822:	2304      	movs	r3, #4
 8009824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009828:	e0a5      	b.n	8009976 <UART_SetConfig+0x2fe>
 800982a:	2308      	movs	r3, #8
 800982c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009830:	e0a1      	b.n	8009976 <UART_SetConfig+0x2fe>
 8009832:	2310      	movs	r3, #16
 8009834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009838:	e09d      	b.n	8009976 <UART_SetConfig+0x2fe>
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a4a      	ldr	r2, [pc, #296]	; (8009968 <UART_SetConfig+0x2f0>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d125      	bne.n	8009890 <UART_SetConfig+0x218>
 8009844:	4b45      	ldr	r3, [pc, #276]	; (800995c <UART_SetConfig+0x2e4>)
 8009846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800984a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800984e:	2bc0      	cmp	r3, #192	; 0xc0
 8009850:	d016      	beq.n	8009880 <UART_SetConfig+0x208>
 8009852:	2bc0      	cmp	r3, #192	; 0xc0
 8009854:	d818      	bhi.n	8009888 <UART_SetConfig+0x210>
 8009856:	2b80      	cmp	r3, #128	; 0x80
 8009858:	d00a      	beq.n	8009870 <UART_SetConfig+0x1f8>
 800985a:	2b80      	cmp	r3, #128	; 0x80
 800985c:	d814      	bhi.n	8009888 <UART_SetConfig+0x210>
 800985e:	2b00      	cmp	r3, #0
 8009860:	d002      	beq.n	8009868 <UART_SetConfig+0x1f0>
 8009862:	2b40      	cmp	r3, #64	; 0x40
 8009864:	d008      	beq.n	8009878 <UART_SetConfig+0x200>
 8009866:	e00f      	b.n	8009888 <UART_SetConfig+0x210>
 8009868:	2300      	movs	r3, #0
 800986a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800986e:	e082      	b.n	8009976 <UART_SetConfig+0x2fe>
 8009870:	2302      	movs	r3, #2
 8009872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009876:	e07e      	b.n	8009976 <UART_SetConfig+0x2fe>
 8009878:	2304      	movs	r3, #4
 800987a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800987e:	e07a      	b.n	8009976 <UART_SetConfig+0x2fe>
 8009880:	2308      	movs	r3, #8
 8009882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009886:	e076      	b.n	8009976 <UART_SetConfig+0x2fe>
 8009888:	2310      	movs	r3, #16
 800988a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800988e:	e072      	b.n	8009976 <UART_SetConfig+0x2fe>
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a35      	ldr	r2, [pc, #212]	; (800996c <UART_SetConfig+0x2f4>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d12a      	bne.n	80098f0 <UART_SetConfig+0x278>
 800989a:	4b30      	ldr	r3, [pc, #192]	; (800995c <UART_SetConfig+0x2e4>)
 800989c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098a8:	d01a      	beq.n	80098e0 <UART_SetConfig+0x268>
 80098aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098ae:	d81b      	bhi.n	80098e8 <UART_SetConfig+0x270>
 80098b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098b4:	d00c      	beq.n	80098d0 <UART_SetConfig+0x258>
 80098b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098ba:	d815      	bhi.n	80098e8 <UART_SetConfig+0x270>
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d003      	beq.n	80098c8 <UART_SetConfig+0x250>
 80098c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098c4:	d008      	beq.n	80098d8 <UART_SetConfig+0x260>
 80098c6:	e00f      	b.n	80098e8 <UART_SetConfig+0x270>
 80098c8:	2300      	movs	r3, #0
 80098ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098ce:	e052      	b.n	8009976 <UART_SetConfig+0x2fe>
 80098d0:	2302      	movs	r3, #2
 80098d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098d6:	e04e      	b.n	8009976 <UART_SetConfig+0x2fe>
 80098d8:	2304      	movs	r3, #4
 80098da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098de:	e04a      	b.n	8009976 <UART_SetConfig+0x2fe>
 80098e0:	2308      	movs	r3, #8
 80098e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098e6:	e046      	b.n	8009976 <UART_SetConfig+0x2fe>
 80098e8:	2310      	movs	r3, #16
 80098ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098ee:	e042      	b.n	8009976 <UART_SetConfig+0x2fe>
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a17      	ldr	r2, [pc, #92]	; (8009954 <UART_SetConfig+0x2dc>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d13a      	bne.n	8009970 <UART_SetConfig+0x2f8>
 80098fa:	4b18      	ldr	r3, [pc, #96]	; (800995c <UART_SetConfig+0x2e4>)
 80098fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009900:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009904:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009908:	d01a      	beq.n	8009940 <UART_SetConfig+0x2c8>
 800990a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800990e:	d81b      	bhi.n	8009948 <UART_SetConfig+0x2d0>
 8009910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009914:	d00c      	beq.n	8009930 <UART_SetConfig+0x2b8>
 8009916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800991a:	d815      	bhi.n	8009948 <UART_SetConfig+0x2d0>
 800991c:	2b00      	cmp	r3, #0
 800991e:	d003      	beq.n	8009928 <UART_SetConfig+0x2b0>
 8009920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009924:	d008      	beq.n	8009938 <UART_SetConfig+0x2c0>
 8009926:	e00f      	b.n	8009948 <UART_SetConfig+0x2d0>
 8009928:	2300      	movs	r3, #0
 800992a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800992e:	e022      	b.n	8009976 <UART_SetConfig+0x2fe>
 8009930:	2302      	movs	r3, #2
 8009932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009936:	e01e      	b.n	8009976 <UART_SetConfig+0x2fe>
 8009938:	2304      	movs	r3, #4
 800993a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800993e:	e01a      	b.n	8009976 <UART_SetConfig+0x2fe>
 8009940:	2308      	movs	r3, #8
 8009942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009946:	e016      	b.n	8009976 <UART_SetConfig+0x2fe>
 8009948:	2310      	movs	r3, #16
 800994a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800994e:	e012      	b.n	8009976 <UART_SetConfig+0x2fe>
 8009950:	cfff69f3 	.word	0xcfff69f3
 8009954:	40008000 	.word	0x40008000
 8009958:	40013800 	.word	0x40013800
 800995c:	40021000 	.word	0x40021000
 8009960:	40004400 	.word	0x40004400
 8009964:	40004800 	.word	0x40004800
 8009968:	40004c00 	.word	0x40004c00
 800996c:	40005000 	.word	0x40005000
 8009970:	2310      	movs	r3, #16
 8009972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4aae      	ldr	r2, [pc, #696]	; (8009c34 <UART_SetConfig+0x5bc>)
 800997c:	4293      	cmp	r3, r2
 800997e:	f040 8097 	bne.w	8009ab0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009982:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009986:	2b08      	cmp	r3, #8
 8009988:	d823      	bhi.n	80099d2 <UART_SetConfig+0x35a>
 800998a:	a201      	add	r2, pc, #4	; (adr r2, 8009990 <UART_SetConfig+0x318>)
 800998c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009990:	080099b5 	.word	0x080099b5
 8009994:	080099d3 	.word	0x080099d3
 8009998:	080099bd 	.word	0x080099bd
 800999c:	080099d3 	.word	0x080099d3
 80099a0:	080099c3 	.word	0x080099c3
 80099a4:	080099d3 	.word	0x080099d3
 80099a8:	080099d3 	.word	0x080099d3
 80099ac:	080099d3 	.word	0x080099d3
 80099b0:	080099cb 	.word	0x080099cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099b4:	f7fc f9a4 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 80099b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80099ba:	e010      	b.n	80099de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099bc:	4b9e      	ldr	r3, [pc, #632]	; (8009c38 <UART_SetConfig+0x5c0>)
 80099be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80099c0:	e00d      	b.n	80099de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099c2:	f7fc f905 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 80099c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80099c8:	e009      	b.n	80099de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80099d0:	e005      	b.n	80099de <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80099d2:	2300      	movs	r3, #0
 80099d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80099dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f000 8130 	beq.w	8009c46 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ea:	4a94      	ldr	r2, [pc, #592]	; (8009c3c <UART_SetConfig+0x5c4>)
 80099ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099f0:	461a      	mov	r2, r3
 80099f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80099f8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	685a      	ldr	r2, [r3, #4]
 80099fe:	4613      	mov	r3, r2
 8009a00:	005b      	lsls	r3, r3, #1
 8009a02:	4413      	add	r3, r2
 8009a04:	69ba      	ldr	r2, [r7, #24]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d305      	bcc.n	8009a16 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a10:	69ba      	ldr	r2, [r7, #24]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d903      	bls.n	8009a1e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009a1c:	e113      	b.n	8009c46 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a20:	2200      	movs	r2, #0
 8009a22:	60bb      	str	r3, [r7, #8]
 8009a24:	60fa      	str	r2, [r7, #12]
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2a:	4a84      	ldr	r2, [pc, #528]	; (8009c3c <UART_SetConfig+0x5c4>)
 8009a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	2200      	movs	r2, #0
 8009a34:	603b      	str	r3, [r7, #0]
 8009a36:	607a      	str	r2, [r7, #4]
 8009a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a40:	f7f7 f8cc 	bl	8000bdc <__aeabi_uldivmod>
 8009a44:	4602      	mov	r2, r0
 8009a46:	460b      	mov	r3, r1
 8009a48:	4610      	mov	r0, r2
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	f04f 0200 	mov.w	r2, #0
 8009a50:	f04f 0300 	mov.w	r3, #0
 8009a54:	020b      	lsls	r3, r1, #8
 8009a56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a5a:	0202      	lsls	r2, r0, #8
 8009a5c:	6979      	ldr	r1, [r7, #20]
 8009a5e:	6849      	ldr	r1, [r1, #4]
 8009a60:	0849      	lsrs	r1, r1, #1
 8009a62:	2000      	movs	r0, #0
 8009a64:	460c      	mov	r4, r1
 8009a66:	4605      	mov	r5, r0
 8009a68:	eb12 0804 	adds.w	r8, r2, r4
 8009a6c:	eb43 0905 	adc.w	r9, r3, r5
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	469a      	mov	sl, r3
 8009a78:	4693      	mov	fp, r2
 8009a7a:	4652      	mov	r2, sl
 8009a7c:	465b      	mov	r3, fp
 8009a7e:	4640      	mov	r0, r8
 8009a80:	4649      	mov	r1, r9
 8009a82:	f7f7 f8ab 	bl	8000bdc <__aeabi_uldivmod>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a8e:	6a3b      	ldr	r3, [r7, #32]
 8009a90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a94:	d308      	bcc.n	8009aa8 <UART_SetConfig+0x430>
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a9c:	d204      	bcs.n	8009aa8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	6a3a      	ldr	r2, [r7, #32]
 8009aa4:	60da      	str	r2, [r3, #12]
 8009aa6:	e0ce      	b.n	8009c46 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009aae:	e0ca      	b.n	8009c46 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	69db      	ldr	r3, [r3, #28]
 8009ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ab8:	d166      	bne.n	8009b88 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009aba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009abe:	2b08      	cmp	r3, #8
 8009ac0:	d827      	bhi.n	8009b12 <UART_SetConfig+0x49a>
 8009ac2:	a201      	add	r2, pc, #4	; (adr r2, 8009ac8 <UART_SetConfig+0x450>)
 8009ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac8:	08009aed 	.word	0x08009aed
 8009acc:	08009af5 	.word	0x08009af5
 8009ad0:	08009afd 	.word	0x08009afd
 8009ad4:	08009b13 	.word	0x08009b13
 8009ad8:	08009b03 	.word	0x08009b03
 8009adc:	08009b13 	.word	0x08009b13
 8009ae0:	08009b13 	.word	0x08009b13
 8009ae4:	08009b13 	.word	0x08009b13
 8009ae8:	08009b0b 	.word	0x08009b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009aec:	f7fc f908 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 8009af0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009af2:	e014      	b.n	8009b1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009af4:	f7fc f91a 	bl	8005d2c <HAL_RCC_GetPCLK2Freq>
 8009af8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009afa:	e010      	b.n	8009b1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009afc:	4b4e      	ldr	r3, [pc, #312]	; (8009c38 <UART_SetConfig+0x5c0>)
 8009afe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b00:	e00d      	b.n	8009b1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b02:	f7fc f865 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8009b06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b08:	e009      	b.n	8009b1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b10:	e005      	b.n	8009b1e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009b12:	2300      	movs	r3, #0
 8009b14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009b1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f000 8090 	beq.w	8009c46 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2a:	4a44      	ldr	r2, [pc, #272]	; (8009c3c <UART_SetConfig+0x5c4>)
 8009b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b30:	461a      	mov	r2, r3
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b38:	005a      	lsls	r2, r3, #1
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	085b      	lsrs	r3, r3, #1
 8009b40:	441a      	add	r2, r3
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b4a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	2b0f      	cmp	r3, #15
 8009b50:	d916      	bls.n	8009b80 <UART_SetConfig+0x508>
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b58:	d212      	bcs.n	8009b80 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	f023 030f 	bic.w	r3, r3, #15
 8009b62:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	085b      	lsrs	r3, r3, #1
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	f003 0307 	and.w	r3, r3, #7
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	8bfb      	ldrh	r3, [r7, #30]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	8bfa      	ldrh	r2, [r7, #30]
 8009b7c:	60da      	str	r2, [r3, #12]
 8009b7e:	e062      	b.n	8009c46 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009b86:	e05e      	b.n	8009c46 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b8c:	2b08      	cmp	r3, #8
 8009b8e:	d828      	bhi.n	8009be2 <UART_SetConfig+0x56a>
 8009b90:	a201      	add	r2, pc, #4	; (adr r2, 8009b98 <UART_SetConfig+0x520>)
 8009b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b96:	bf00      	nop
 8009b98:	08009bbd 	.word	0x08009bbd
 8009b9c:	08009bc5 	.word	0x08009bc5
 8009ba0:	08009bcd 	.word	0x08009bcd
 8009ba4:	08009be3 	.word	0x08009be3
 8009ba8:	08009bd3 	.word	0x08009bd3
 8009bac:	08009be3 	.word	0x08009be3
 8009bb0:	08009be3 	.word	0x08009be3
 8009bb4:	08009be3 	.word	0x08009be3
 8009bb8:	08009bdb 	.word	0x08009bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bbc:	f7fc f8a0 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 8009bc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bc2:	e014      	b.n	8009bee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bc4:	f7fc f8b2 	bl	8005d2c <HAL_RCC_GetPCLK2Freq>
 8009bc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bca:	e010      	b.n	8009bee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bcc:	4b1a      	ldr	r3, [pc, #104]	; (8009c38 <UART_SetConfig+0x5c0>)
 8009bce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009bd0:	e00d      	b.n	8009bee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bd2:	f7fb fffd 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8009bd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bd8:	e009      	b.n	8009bee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009be0:	e005      	b.n	8009bee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009be2:	2300      	movs	r3, #0
 8009be4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009bec:	bf00      	nop
    }

    if (pclk != 0U)
 8009bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d028      	beq.n	8009c46 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf8:	4a10      	ldr	r2, [pc, #64]	; (8009c3c <UART_SetConfig+0x5c4>)
 8009bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	085b      	lsrs	r3, r3, #1
 8009c0c:	441a      	add	r2, r3
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c16:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	2b0f      	cmp	r3, #15
 8009c1c:	d910      	bls.n	8009c40 <UART_SetConfig+0x5c8>
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c24:	d20c      	bcs.n	8009c40 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	60da      	str	r2, [r3, #12]
 8009c30:	e009      	b.n	8009c46 <UART_SetConfig+0x5ce>
 8009c32:	bf00      	nop
 8009c34:	40008000 	.word	0x40008000
 8009c38:	00f42400 	.word	0x00f42400
 8009c3c:	0800c1e4 	.word	0x0800c1e4
      }
      else
      {
        ret = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	2201      	movs	r2, #1
 8009c52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009c62:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3730      	adds	r7, #48	; 0x30
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c7c:	f003 0308 	and.w	r3, r3, #8
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00a      	beq.n	8009c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	430a      	orrs	r2, r1
 8009c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c9e:	f003 0301 	and.w	r3, r3, #1
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00a      	beq.n	8009cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	430a      	orrs	r2, r1
 8009cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc0:	f003 0302 	and.w	r3, r3, #2
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00a      	beq.n	8009cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	430a      	orrs	r2, r1
 8009cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce2:	f003 0304 	and.w	r3, r3, #4
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00a      	beq.n	8009d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	430a      	orrs	r2, r1
 8009cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d04:	f003 0310 	and.w	r3, r3, #16
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00a      	beq.n	8009d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d26:	f003 0320 	and.w	r3, r3, #32
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00a      	beq.n	8009d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	430a      	orrs	r2, r1
 8009d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d01a      	beq.n	8009d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	430a      	orrs	r2, r1
 8009d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d6e:	d10a      	bne.n	8009d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	430a      	orrs	r2, r1
 8009d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00a      	beq.n	8009da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	430a      	orrs	r2, r1
 8009da6:	605a      	str	r2, [r3, #4]
  }
}
 8009da8:	bf00      	nop
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b098      	sub	sp, #96	; 0x60
 8009db8:	af02      	add	r7, sp, #8
 8009dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009dc4:	f7f9 f942 	bl	800304c <HAL_GetTick>
 8009dc8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f003 0308 	and.w	r3, r3, #8
 8009dd4:	2b08      	cmp	r3, #8
 8009dd6:	d12f      	bne.n	8009e38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009de0:	2200      	movs	r2, #0
 8009de2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f88e 	bl	8009f08 <UART_WaitOnFlagUntilTimeout>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d022      	beq.n	8009e38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dfa:	e853 3f00 	ldrex	r3, [r3]
 8009dfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e06:	653b      	str	r3, [r7, #80]	; 0x50
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e10:	647b      	str	r3, [r7, #68]	; 0x44
 8009e12:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e18:	e841 2300 	strex	r3, r2, [r1]
 8009e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1e6      	bne.n	8009df2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2220      	movs	r2, #32
 8009e28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e34:	2303      	movs	r3, #3
 8009e36:	e063      	b.n	8009f00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f003 0304 	and.w	r3, r3, #4
 8009e42:	2b04      	cmp	r3, #4
 8009e44:	d149      	bne.n	8009eda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 f857 	bl	8009f08 <UART_WaitOnFlagUntilTimeout>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d03c      	beq.n	8009eda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e68:	e853 3f00 	ldrex	r3, [r3]
 8009e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8009e80:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e86:	e841 2300 	strex	r3, r2, [r1]
 8009e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1e6      	bne.n	8009e60 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	3308      	adds	r3, #8
 8009e98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	e853 3f00 	ldrex	r3, [r3]
 8009ea0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f023 0301 	bic.w	r3, r3, #1
 8009ea8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	3308      	adds	r3, #8
 8009eb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009eb2:	61fa      	str	r2, [r7, #28]
 8009eb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb6:	69b9      	ldr	r1, [r7, #24]
 8009eb8:	69fa      	ldr	r2, [r7, #28]
 8009eba:	e841 2300 	strex	r3, r2, [r1]
 8009ebe:	617b      	str	r3, [r7, #20]
   return(result);
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1e5      	bne.n	8009e92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2220      	movs	r2, #32
 8009eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e012      	b.n	8009f00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2220      	movs	r2, #32
 8009ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2220      	movs	r2, #32
 8009ee6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3758      	adds	r7, #88	; 0x58
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	603b      	str	r3, [r7, #0]
 8009f14:	4613      	mov	r3, r2
 8009f16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f18:	e049      	b.n	8009fae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f20:	d045      	beq.n	8009fae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f22:	f7f9 f893 	bl	800304c <HAL_GetTick>
 8009f26:	4602      	mov	r2, r0
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	69ba      	ldr	r2, [r7, #24]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d302      	bcc.n	8009f38 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e048      	b.n	8009fce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 0304 	and.w	r3, r3, #4
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d031      	beq.n	8009fae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	69db      	ldr	r3, [r3, #28]
 8009f50:	f003 0308 	and.w	r3, r3, #8
 8009f54:	2b08      	cmp	r3, #8
 8009f56:	d110      	bne.n	8009f7a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2208      	movs	r2, #8
 8009f5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f000 f838 	bl	8009fd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2208      	movs	r2, #8
 8009f6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e029      	b.n	8009fce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	69db      	ldr	r3, [r3, #28]
 8009f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f88:	d111      	bne.n	8009fae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f000 f81e 	bl	8009fd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2220      	movs	r2, #32
 8009f9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009faa:	2303      	movs	r3, #3
 8009fac:	e00f      	b.n	8009fce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	69da      	ldr	r2, [r3, #28]
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	bf0c      	ite	eq
 8009fbe:	2301      	moveq	r3, #1
 8009fc0:	2300      	movne	r3, #0
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	79fb      	ldrb	r3, [r7, #7]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d0a6      	beq.n	8009f1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fd6:	b480      	push	{r7}
 8009fd8:	b095      	sub	sp, #84	; 0x54
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe6:	e853 3f00 	ldrex	r3, [r3]
 8009fea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ffc:	643b      	str	r3, [r7, #64]	; 0x40
 8009ffe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a000:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a002:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a004:	e841 2300 	strex	r3, r2, [r1]
 800a008:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1e6      	bne.n	8009fde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	3308      	adds	r3, #8
 800a016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a018:	6a3b      	ldr	r3, [r7, #32]
 800a01a:	e853 3f00 	ldrex	r3, [r3]
 800a01e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a026:	f023 0301 	bic.w	r3, r3, #1
 800a02a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	3308      	adds	r3, #8
 800a032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a034:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a03a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a03c:	e841 2300 	strex	r3, r2, [r1]
 800a040:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1e3      	bne.n	800a010 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d118      	bne.n	800a082 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	e853 3f00 	ldrex	r3, [r3]
 800a05c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	f023 0310 	bic.w	r3, r3, #16
 800a064:	647b      	str	r3, [r7, #68]	; 0x44
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a06e:	61bb      	str	r3, [r7, #24]
 800a070:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a072:	6979      	ldr	r1, [r7, #20]
 800a074:	69ba      	ldr	r2, [r7, #24]
 800a076:	e841 2300 	strex	r3, r2, [r1]
 800a07a:	613b      	str	r3, [r7, #16]
   return(result);
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1e6      	bne.n	800a050 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2220      	movs	r2, #32
 800a086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a096:	bf00      	nop
 800a098:	3754      	adds	r7, #84	; 0x54
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr

0800a0a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a0a2:	b480      	push	{r7}
 800a0a4:	b085      	sub	sp, #20
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d101      	bne.n	800a0b8 <HAL_UARTEx_DisableFifoMode+0x16>
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	e027      	b.n	800a108 <HAL_UARTEx_DisableFifoMode+0x66>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2224      	movs	r2, #36	; 0x24
 800a0c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f022 0201 	bic.w	r2, r2, #1
 800a0de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a0e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2220      	movs	r2, #32
 800a0fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3714      	adds	r7, #20
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a124:	2b01      	cmp	r3, #1
 800a126:	d101      	bne.n	800a12c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a128:	2302      	movs	r3, #2
 800a12a:	e02d      	b.n	800a188 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2224      	movs	r2, #36	; 0x24
 800a138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f022 0201 	bic.w	r2, r2, #1
 800a152:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	683a      	ldr	r2, [r7, #0]
 800a164:	430a      	orrs	r2, r1
 800a166:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 f84f 	bl	800a20c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2220      	movs	r2, #32
 800a17a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3710      	adds	r7, #16
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d101      	bne.n	800a1a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	e02d      	b.n	800a204 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2224      	movs	r2, #36	; 0x24
 800a1b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f022 0201 	bic.w	r2, r2, #1
 800a1ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	683a      	ldr	r2, [r7, #0]
 800a1e0:	430a      	orrs	r2, r1
 800a1e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 f811 	bl	800a20c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2220      	movs	r2, #32
 800a1f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a202:	2300      	movs	r3, #0
}
 800a204:	4618      	mov	r0, r3
 800a206:	3710      	adds	r7, #16
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d108      	bne.n	800a22e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a22c:	e031      	b.n	800a292 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a22e:	2308      	movs	r3, #8
 800a230:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a232:	2308      	movs	r3, #8
 800a234:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	0e5b      	lsrs	r3, r3, #25
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	f003 0307 	and.w	r3, r3, #7
 800a244:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	0f5b      	lsrs	r3, r3, #29
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	f003 0307 	and.w	r3, r3, #7
 800a254:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a256:	7bbb      	ldrb	r3, [r7, #14]
 800a258:	7b3a      	ldrb	r2, [r7, #12]
 800a25a:	4911      	ldr	r1, [pc, #68]	; (800a2a0 <UARTEx_SetNbDataToProcess+0x94>)
 800a25c:	5c8a      	ldrb	r2, [r1, r2]
 800a25e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a262:	7b3a      	ldrb	r2, [r7, #12]
 800a264:	490f      	ldr	r1, [pc, #60]	; (800a2a4 <UARTEx_SetNbDataToProcess+0x98>)
 800a266:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a268:	fb93 f3f2 	sdiv	r3, r3, r2
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a274:	7bfb      	ldrb	r3, [r7, #15]
 800a276:	7b7a      	ldrb	r2, [r7, #13]
 800a278:	4909      	ldr	r1, [pc, #36]	; (800a2a0 <UARTEx_SetNbDataToProcess+0x94>)
 800a27a:	5c8a      	ldrb	r2, [r1, r2]
 800a27c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a280:	7b7a      	ldrb	r2, [r7, #13]
 800a282:	4908      	ldr	r1, [pc, #32]	; (800a2a4 <UARTEx_SetNbDataToProcess+0x98>)
 800a284:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a286:	fb93 f3f2 	sdiv	r3, r3, r2
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a292:	bf00      	nop
 800a294:	3714      	adds	r7, #20
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	0800c1fc 	.word	0x0800c1fc
 800a2a4:	0800c204 	.word	0x0800c204

0800a2a8 <arm_mean_f32>:
 800a2a8:	b430      	push	{r4, r5}
 800a2aa:	088d      	lsrs	r5, r1, #2
 800a2ac:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800a320 <arm_mean_f32+0x78>
 800a2b0:	d018      	beq.n	800a2e4 <arm_mean_f32+0x3c>
 800a2b2:	f100 0310 	add.w	r3, r0, #16
 800a2b6:	462c      	mov	r4, r5
 800a2b8:	ed53 5a04 	vldr	s11, [r3, #-16]
 800a2bc:	ed13 6a03 	vldr	s12, [r3, #-12]
 800a2c0:	ed53 6a02 	vldr	s13, [r3, #-8]
 800a2c4:	ed13 7a01 	vldr	s14, [r3, #-4]
 800a2c8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a2cc:	3c01      	subs	r4, #1
 800a2ce:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a2d2:	f103 0310 	add.w	r3, r3, #16
 800a2d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2de:	d1eb      	bne.n	800a2b8 <arm_mean_f32+0x10>
 800a2e0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800a2e4:	f011 0303 	ands.w	r3, r1, #3
 800a2e8:	d00f      	beq.n	800a30a <arm_mean_f32+0x62>
 800a2ea:	ed90 7a00 	vldr	s14, [r0]
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2f4:	d009      	beq.n	800a30a <arm_mean_f32+0x62>
 800a2f6:	ed90 7a01 	vldr	s14, [r0, #4]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a300:	bf1c      	itt	ne
 800a302:	ed90 7a02 	vldrne	s14, [r0, #8]
 800a306:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800a30a:	ee07 1a10 	vmov	s14, r1
 800a30e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a312:	bc30      	pop	{r4, r5}
 800a314:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a318:	edc2 6a00 	vstr	s13, [r2]
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	00000000 	.word	0x00000000

0800a324 <arm_max_f32>:
 800a324:	f101 3cff 	add.w	ip, r1, #4294967295
 800a328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a32a:	4607      	mov	r7, r0
 800a32c:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800a330:	ecf7 7a01 	vldmia	r7!, {s15}
 800a334:	d060      	beq.n	800a3f8 <arm_max_f32+0xd4>
 800a336:	2400      	movs	r4, #0
 800a338:	3014      	adds	r0, #20
 800a33a:	4625      	mov	r5, r4
 800a33c:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800a340:	ed10 7a04 	vldr	s14, [r0, #-16]
 800a344:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a34c:	bf48      	it	mi
 800a34e:	eef0 7a47 	vmovmi.f32	s15, s14
 800a352:	ed10 7a03 	vldr	s14, [r0, #-12]
 800a356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a35a:	bf48      	it	mi
 800a35c:	1c65      	addmi	r5, r4, #1
 800a35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a362:	bf48      	it	mi
 800a364:	eef0 7a47 	vmovmi.f32	s15, s14
 800a368:	ed10 7a02 	vldr	s14, [r0, #-8]
 800a36c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a370:	bf48      	it	mi
 800a372:	1ca5      	addmi	r5, r4, #2
 800a374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a378:	bf48      	it	mi
 800a37a:	eef0 7a47 	vmovmi.f32	s15, s14
 800a37e:	ed10 7a01 	vldr	s14, [r0, #-4]
 800a382:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a386:	bf48      	it	mi
 800a388:	1ce5      	addmi	r5, r4, #3
 800a38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a38e:	f104 0404 	add.w	r4, r4, #4
 800a392:	bf44      	itt	mi
 800a394:	eef0 7a47 	vmovmi.f32	s15, s14
 800a398:	4625      	movmi	r5, r4
 800a39a:	42a6      	cmp	r6, r4
 800a39c:	f100 0010 	add.w	r0, r0, #16
 800a3a0:	d1ce      	bne.n	800a340 <arm_max_f32+0x1c>
 800a3a2:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800a3a6:	f01c 0003 	ands.w	r0, ip, #3
 800a3aa:	d021      	beq.n	800a3f0 <arm_max_f32+0xcc>
 800a3ac:	ed97 7a00 	vldr	s14, [r7]
 800a3b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3b8:	bfc4      	itt	gt
 800a3ba:	eef0 7a47 	vmovgt.f32	s15, s14
 800a3be:	1a0d      	subgt	r5, r1, r0
 800a3c0:	3801      	subs	r0, #1
 800a3c2:	d015      	beq.n	800a3f0 <arm_max_f32+0xcc>
 800a3c4:	ed97 7a01 	vldr	s14, [r7, #4]
 800a3c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3d0:	bf44      	itt	mi
 800a3d2:	eef0 7a47 	vmovmi.f32	s15, s14
 800a3d6:	1a0d      	submi	r5, r1, r0
 800a3d8:	2801      	cmp	r0, #1
 800a3da:	d009      	beq.n	800a3f0 <arm_max_f32+0xcc>
 800a3dc:	ed97 7a02 	vldr	s14, [r7, #8]
 800a3e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e8:	bfc4      	itt	gt
 800a3ea:	eef0 7a47 	vmovgt.f32	s15, s14
 800a3ee:	4665      	movgt	r5, ip
 800a3f0:	edc2 7a00 	vstr	s15, [r2]
 800a3f4:	601d      	str	r5, [r3, #0]
 800a3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3f8:	4675      	mov	r5, lr
 800a3fa:	e7d4      	b.n	800a3a6 <arm_max_f32+0x82>

0800a3fc <arm_rfft_32_fast_init_f32>:
 800a3fc:	b178      	cbz	r0, 800a41e <arm_rfft_32_fast_init_f32+0x22>
 800a3fe:	b430      	push	{r4, r5}
 800a400:	4908      	ldr	r1, [pc, #32]	; (800a424 <arm_rfft_32_fast_init_f32+0x28>)
 800a402:	4a09      	ldr	r2, [pc, #36]	; (800a428 <arm_rfft_32_fast_init_f32+0x2c>)
 800a404:	2310      	movs	r3, #16
 800a406:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a40a:	8003      	strh	r3, [r0, #0]
 800a40c:	2520      	movs	r5, #32
 800a40e:	2414      	movs	r4, #20
 800a410:	4b06      	ldr	r3, [pc, #24]	; (800a42c <arm_rfft_32_fast_init_f32+0x30>)
 800a412:	8205      	strh	r5, [r0, #16]
 800a414:	8184      	strh	r4, [r0, #12]
 800a416:	6143      	str	r3, [r0, #20]
 800a418:	bc30      	pop	{r4, r5}
 800a41a:	2000      	movs	r0, #0
 800a41c:	4770      	bx	lr
 800a41e:	f04f 30ff 	mov.w	r0, #4294967295
 800a422:	4770      	bx	lr
 800a424:	0800d1bc 	.word	0x0800d1bc
 800a428:	08011af4 	.word	0x08011af4
 800a42c:	0801a874 	.word	0x0801a874

0800a430 <arm_rfft_64_fast_init_f32>:
 800a430:	b178      	cbz	r0, 800a452 <arm_rfft_64_fast_init_f32+0x22>
 800a432:	b430      	push	{r4, r5}
 800a434:	4908      	ldr	r1, [pc, #32]	; (800a458 <arm_rfft_64_fast_init_f32+0x28>)
 800a436:	4a09      	ldr	r2, [pc, #36]	; (800a45c <arm_rfft_64_fast_init_f32+0x2c>)
 800a438:	2320      	movs	r3, #32
 800a43a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a43e:	8003      	strh	r3, [r0, #0]
 800a440:	2540      	movs	r5, #64	; 0x40
 800a442:	2430      	movs	r4, #48	; 0x30
 800a444:	4b06      	ldr	r3, [pc, #24]	; (800a460 <arm_rfft_64_fast_init_f32+0x30>)
 800a446:	8205      	strh	r5, [r0, #16]
 800a448:	8184      	strh	r4, [r0, #12]
 800a44a:	6143      	str	r3, [r0, #20]
 800a44c:	bc30      	pop	{r4, r5}
 800a44e:	2000      	movs	r0, #0
 800a450:	4770      	bx	lr
 800a452:	f04f 30ff 	mov.w	r0, #4294967295
 800a456:	4770      	bx	lr
 800a458:	0800f314 	.word	0x0800f314
 800a45c:	08016374 	.word	0x08016374
 800a460:	0801f0f4 	.word	0x0801f0f4

0800a464 <arm_rfft_256_fast_init_f32>:
 800a464:	b180      	cbz	r0, 800a488 <arm_rfft_256_fast_init_f32+0x24>
 800a466:	b430      	push	{r4, r5}
 800a468:	4909      	ldr	r1, [pc, #36]	; (800a490 <arm_rfft_256_fast_init_f32+0x2c>)
 800a46a:	4a0a      	ldr	r2, [pc, #40]	; (800a494 <arm_rfft_256_fast_init_f32+0x30>)
 800a46c:	2380      	movs	r3, #128	; 0x80
 800a46e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a472:	8003      	strh	r3, [r0, #0]
 800a474:	f44f 7580 	mov.w	r5, #256	; 0x100
 800a478:	24d0      	movs	r4, #208	; 0xd0
 800a47a:	4b07      	ldr	r3, [pc, #28]	; (800a498 <arm_rfft_256_fast_init_f32+0x34>)
 800a47c:	8205      	strh	r5, [r0, #16]
 800a47e:	8184      	strh	r4, [r0, #12]
 800a480:	6143      	str	r3, [r0, #20]
 800a482:	bc30      	pop	{r4, r5}
 800a484:	2000      	movs	r0, #0
 800a486:	4770      	bx	lr
 800a488:	f04f 30ff 	mov.w	r0, #4294967295
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	0800d01c 	.word	0x0800d01c
 800a494:	080116f4 	.word	0x080116f4
 800a498:	0801a474 	.word	0x0801a474

0800a49c <arm_rfft_512_fast_init_f32>:
 800a49c:	b190      	cbz	r0, 800a4c4 <arm_rfft_512_fast_init_f32+0x28>
 800a49e:	b430      	push	{r4, r5}
 800a4a0:	490a      	ldr	r1, [pc, #40]	; (800a4cc <arm_rfft_512_fast_init_f32+0x30>)
 800a4a2:	4a0b      	ldr	r2, [pc, #44]	; (800a4d0 <arm_rfft_512_fast_init_f32+0x34>)
 800a4a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4a8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a4ac:	8003      	strh	r3, [r0, #0]
 800a4ae:	f44f 7500 	mov.w	r5, #512	; 0x200
 800a4b2:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800a4b6:	4b07      	ldr	r3, [pc, #28]	; (800a4d4 <arm_rfft_512_fast_init_f32+0x38>)
 800a4b8:	8205      	strh	r5, [r0, #16]
 800a4ba:	8184      	strh	r4, [r0, #12]
 800a4bc:	6143      	str	r3, [r0, #20]
 800a4be:	bc30      	pop	{r4, r5}
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	4770      	bx	lr
 800a4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	0800efa4 	.word	0x0800efa4
 800a4d0:	08015b74 	.word	0x08015b74
 800a4d4:	0801e8f4 	.word	0x0801e8f4

0800a4d8 <arm_rfft_1024_fast_init_f32>:
 800a4d8:	b190      	cbz	r0, 800a500 <arm_rfft_1024_fast_init_f32+0x28>
 800a4da:	b430      	push	{r4, r5}
 800a4dc:	490a      	ldr	r1, [pc, #40]	; (800a508 <arm_rfft_1024_fast_init_f32+0x30>)
 800a4de:	4a0b      	ldr	r2, [pc, #44]	; (800a50c <arm_rfft_1024_fast_init_f32+0x34>)
 800a4e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4e4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a4e8:	8003      	strh	r3, [r0, #0]
 800a4ea:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800a4ee:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800a4f2:	4b07      	ldr	r3, [pc, #28]	; (800a510 <arm_rfft_1024_fast_init_f32+0x38>)
 800a4f4:	8205      	strh	r5, [r0, #16]
 800a4f6:	8184      	strh	r4, [r0, #12]
 800a4f8:	6143      	str	r3, [r0, #20]
 800a4fa:	bc30      	pop	{r4, r5}
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	4770      	bx	lr
 800a500:	f04f 30ff 	mov.w	r0, #4294967295
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	0800f374 	.word	0x0800f374
 800a50c:	08016474 	.word	0x08016474
 800a510:	08017474 	.word	0x08017474

0800a514 <arm_rfft_2048_fast_init_f32>:
 800a514:	b190      	cbz	r0, 800a53c <arm_rfft_2048_fast_init_f32+0x28>
 800a516:	b430      	push	{r4, r5}
 800a518:	490a      	ldr	r1, [pc, #40]	; (800a544 <arm_rfft_2048_fast_init_f32+0x30>)
 800a51a:	4a0b      	ldr	r2, [pc, #44]	; (800a548 <arm_rfft_2048_fast_init_f32+0x34>)
 800a51c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a520:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a524:	8003      	strh	r3, [r0, #0]
 800a526:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800a52a:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800a52e:	4b07      	ldr	r3, [pc, #28]	; (800a54c <arm_rfft_2048_fast_init_f32+0x38>)
 800a530:	8205      	strh	r5, [r0, #16]
 800a532:	8184      	strh	r4, [r0, #12]
 800a534:	6143      	str	r3, [r0, #20]
 800a536:	bc30      	pop	{r4, r5}
 800a538:	2000      	movs	r0, #0
 800a53a:	4770      	bx	lr
 800a53c:	f04f 30ff 	mov.w	r0, #4294967295
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	0800c20c 	.word	0x0800c20c
 800a548:	0800f6f4 	.word	0x0800f6f4
 800a54c:	08018474 	.word	0x08018474

0800a550 <arm_rfft_4096_fast_init_f32>:
 800a550:	b190      	cbz	r0, 800a578 <arm_rfft_4096_fast_init_f32+0x28>
 800a552:	b430      	push	{r4, r5}
 800a554:	490a      	ldr	r1, [pc, #40]	; (800a580 <arm_rfft_4096_fast_init_f32+0x30>)
 800a556:	4a0b      	ldr	r2, [pc, #44]	; (800a584 <arm_rfft_4096_fast_init_f32+0x34>)
 800a558:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a55c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a560:	8003      	strh	r3, [r0, #0]
 800a562:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800a566:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800a56a:	4b07      	ldr	r3, [pc, #28]	; (800a588 <arm_rfft_4096_fast_init_f32+0x38>)
 800a56c:	8205      	strh	r5, [r0, #16]
 800a56e:	8184      	strh	r4, [r0, #12]
 800a570:	6143      	str	r3, [r0, #20]
 800a572:	bc30      	pop	{r4, r5}
 800a574:	2000      	movs	r0, #0
 800a576:	4770      	bx	lr
 800a578:	f04f 30ff 	mov.w	r0, #4294967295
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	0800d1e4 	.word	0x0800d1e4
 800a584:	08011b74 	.word	0x08011b74
 800a588:	0801a8f4 	.word	0x0801a8f4

0800a58c <arm_rfft_fast_init_f32>:
 800a58c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a590:	d01f      	beq.n	800a5d2 <arm_rfft_fast_init_f32+0x46>
 800a592:	d90b      	bls.n	800a5ac <arm_rfft_fast_init_f32+0x20>
 800a594:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800a598:	d019      	beq.n	800a5ce <arm_rfft_fast_init_f32+0x42>
 800a59a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800a59e:	d012      	beq.n	800a5c6 <arm_rfft_fast_init_f32+0x3a>
 800a5a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a5a4:	d00d      	beq.n	800a5c2 <arm_rfft_fast_init_f32+0x36>
 800a5a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5aa:	4770      	bx	lr
 800a5ac:	2940      	cmp	r1, #64	; 0x40
 800a5ae:	d00c      	beq.n	800a5ca <arm_rfft_fast_init_f32+0x3e>
 800a5b0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a5b4:	d003      	beq.n	800a5be <arm_rfft_fast_init_f32+0x32>
 800a5b6:	2920      	cmp	r1, #32
 800a5b8:	d1f5      	bne.n	800a5a6 <arm_rfft_fast_init_f32+0x1a>
 800a5ba:	4b07      	ldr	r3, [pc, #28]	; (800a5d8 <arm_rfft_fast_init_f32+0x4c>)
 800a5bc:	4718      	bx	r3
 800a5be:	4b07      	ldr	r3, [pc, #28]	; (800a5dc <arm_rfft_fast_init_f32+0x50>)
 800a5c0:	4718      	bx	r3
 800a5c2:	4b07      	ldr	r3, [pc, #28]	; (800a5e0 <arm_rfft_fast_init_f32+0x54>)
 800a5c4:	4718      	bx	r3
 800a5c6:	4b07      	ldr	r3, [pc, #28]	; (800a5e4 <arm_rfft_fast_init_f32+0x58>)
 800a5c8:	4718      	bx	r3
 800a5ca:	4b07      	ldr	r3, [pc, #28]	; (800a5e8 <arm_rfft_fast_init_f32+0x5c>)
 800a5cc:	e7f6      	b.n	800a5bc <arm_rfft_fast_init_f32+0x30>
 800a5ce:	4b07      	ldr	r3, [pc, #28]	; (800a5ec <arm_rfft_fast_init_f32+0x60>)
 800a5d0:	e7f4      	b.n	800a5bc <arm_rfft_fast_init_f32+0x30>
 800a5d2:	4b07      	ldr	r3, [pc, #28]	; (800a5f0 <arm_rfft_fast_init_f32+0x64>)
 800a5d4:	e7f2      	b.n	800a5bc <arm_rfft_fast_init_f32+0x30>
 800a5d6:	bf00      	nop
 800a5d8:	0800a3fd 	.word	0x0800a3fd
 800a5dc:	0800a465 	.word	0x0800a465
 800a5e0:	0800a4d9 	.word	0x0800a4d9
 800a5e4:	0800a551 	.word	0x0800a551
 800a5e8:	0800a431 	.word	0x0800a431
 800a5ec:	0800a515 	.word	0x0800a515
 800a5f0:	0800a49d 	.word	0x0800a49d

0800a5f4 <stage_rfft_f32>:
 800a5f4:	b410      	push	{r4}
 800a5f6:	edd1 7a00 	vldr	s15, [r1]
 800a5fa:	ed91 7a01 	vldr	s14, [r1, #4]
 800a5fe:	8804      	ldrh	r4, [r0, #0]
 800a600:	6940      	ldr	r0, [r0, #20]
 800a602:	ee37 7a07 	vadd.f32	s14, s14, s14
 800a606:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a60a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800a60e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a612:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a616:	3c01      	subs	r4, #1
 800a618:	ee26 7a84 	vmul.f32	s14, s13, s8
 800a61c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a620:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800a624:	ed82 7a00 	vstr	s14, [r2]
 800a628:	edc2 7a01 	vstr	s15, [r2, #4]
 800a62c:	3010      	adds	r0, #16
 800a62e:	3210      	adds	r2, #16
 800a630:	3b08      	subs	r3, #8
 800a632:	3110      	adds	r1, #16
 800a634:	ed11 5a02 	vldr	s10, [r1, #-8]
 800a638:	ed93 7a02 	vldr	s14, [r3, #8]
 800a63c:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a640:	edd3 4a03 	vldr	s9, [r3, #12]
 800a644:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a648:	ed10 6a01 	vldr	s12, [r0, #-4]
 800a64c:	ee77 5a45 	vsub.f32	s11, s14, s10
 800a650:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a654:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800a658:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800a65c:	ee66 5a25 	vmul.f32	s11, s12, s11
 800a660:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a664:	ee37 7a23 	vadd.f32	s14, s14, s7
 800a668:	ee66 6a85 	vmul.f32	s13, s13, s10
 800a66c:	ee26 6a05 	vmul.f32	s12, s12, s10
 800a670:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a674:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a678:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a67c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a680:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a684:	3c01      	subs	r4, #1
 800a686:	ed02 7a02 	vstr	s14, [r2, #-8]
 800a68a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a68e:	f1a3 0308 	sub.w	r3, r3, #8
 800a692:	f101 0108 	add.w	r1, r1, #8
 800a696:	f100 0008 	add.w	r0, r0, #8
 800a69a:	f102 0208 	add.w	r2, r2, #8
 800a69e:	d1c9      	bne.n	800a634 <stage_rfft_f32+0x40>
 800a6a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop

0800a6a8 <merge_rfft_f32>:
 800a6a8:	b410      	push	{r4}
 800a6aa:	edd1 7a00 	vldr	s15, [r1]
 800a6ae:	edd1 6a01 	vldr	s13, [r1, #4]
 800a6b2:	8804      	ldrh	r4, [r0, #0]
 800a6b4:	6940      	ldr	r0, [r0, #20]
 800a6b6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a6ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a6be:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800a6c2:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a6c6:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a6ca:	3c01      	subs	r4, #1
 800a6cc:	ed82 7a00 	vstr	s14, [r2]
 800a6d0:	edc2 7a01 	vstr	s15, [r2, #4]
 800a6d4:	b3dc      	cbz	r4, 800a74e <merge_rfft_f32+0xa6>
 800a6d6:	00e3      	lsls	r3, r4, #3
 800a6d8:	3b08      	subs	r3, #8
 800a6da:	440b      	add	r3, r1
 800a6dc:	3010      	adds	r0, #16
 800a6de:	3210      	adds	r2, #16
 800a6e0:	3110      	adds	r1, #16
 800a6e2:	ed11 5a02 	vldr	s10, [r1, #-8]
 800a6e6:	ed93 7a02 	vldr	s14, [r3, #8]
 800a6ea:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a6ee:	edd3 4a03 	vldr	s9, [r3, #12]
 800a6f2:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a6f6:	ed10 6a01 	vldr	s12, [r0, #-4]
 800a6fa:	ee75 5a47 	vsub.f32	s11, s10, s14
 800a6fe:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a702:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800a706:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800a70a:	ee66 5a25 	vmul.f32	s11, s12, s11
 800a70e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a712:	ee37 7a63 	vsub.f32	s14, s14, s7
 800a716:	ee66 6a85 	vmul.f32	s13, s13, s10
 800a71a:	ee26 6a05 	vmul.f32	s12, s12, s10
 800a71e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a722:	ee37 7a46 	vsub.f32	s14, s14, s12
 800a726:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a72a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a72e:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a732:	3c01      	subs	r4, #1
 800a734:	ed02 7a02 	vstr	s14, [r2, #-8]
 800a738:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a73c:	f1a3 0308 	sub.w	r3, r3, #8
 800a740:	f101 0108 	add.w	r1, r1, #8
 800a744:	f100 0008 	add.w	r0, r0, #8
 800a748:	f102 0208 	add.w	r2, r2, #8
 800a74c:	d1c9      	bne.n	800a6e2 <merge_rfft_f32+0x3a>
 800a74e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <arm_rfft_fast_f32>:
 800a754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a758:	8a05      	ldrh	r5, [r0, #16]
 800a75a:	086d      	lsrs	r5, r5, #1
 800a75c:	8005      	strh	r5, [r0, #0]
 800a75e:	4604      	mov	r4, r0
 800a760:	4616      	mov	r6, r2
 800a762:	461d      	mov	r5, r3
 800a764:	b14b      	cbz	r3, 800a77a <arm_rfft_fast_f32+0x26>
 800a766:	f7ff ff9f 	bl	800a6a8 <merge_rfft_f32>
 800a76a:	462a      	mov	r2, r5
 800a76c:	4631      	mov	r1, r6
 800a76e:	4620      	mov	r0, r4
 800a770:	2301      	movs	r3, #1
 800a772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a776:	f000 bb33 	b.w	800ade0 <arm_cfft_f32>
 800a77a:	460f      	mov	r7, r1
 800a77c:	461a      	mov	r2, r3
 800a77e:	2301      	movs	r3, #1
 800a780:	f000 fb2e 	bl	800ade0 <arm_cfft_f32>
 800a784:	4632      	mov	r2, r6
 800a786:	4639      	mov	r1, r7
 800a788:	4620      	mov	r0, r4
 800a78a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a78e:	f7ff bf31 	b.w	800a5f4 <stage_rfft_f32>
 800a792:	bf00      	nop

0800a794 <arm_cfft_radix8by2_f32>:
 800a794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a798:	ed2d 8b08 	vpush	{d8-d11}
 800a79c:	4607      	mov	r7, r0
 800a79e:	4608      	mov	r0, r1
 800a7a0:	f8b7 c000 	ldrh.w	ip, [r7]
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800a7aa:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800a7ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800a7b2:	f000 80b0 	beq.w	800a916 <arm_cfft_radix8by2_f32+0x182>
 800a7b6:	008c      	lsls	r4, r1, #2
 800a7b8:	3410      	adds	r4, #16
 800a7ba:	f100 0310 	add.w	r3, r0, #16
 800a7be:	1906      	adds	r6, r0, r4
 800a7c0:	3210      	adds	r2, #16
 800a7c2:	4444      	add	r4, r8
 800a7c4:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800a7c8:	f108 0510 	add.w	r5, r8, #16
 800a7cc:	ed15 2a04 	vldr	s4, [r5, #-16]
 800a7d0:	ed55 2a03 	vldr	s5, [r5, #-12]
 800a7d4:	ed54 4a04 	vldr	s9, [r4, #-16]
 800a7d8:	ed14 4a03 	vldr	s8, [r4, #-12]
 800a7dc:	ed14 6a02 	vldr	s12, [r4, #-8]
 800a7e0:	ed54 5a01 	vldr	s11, [r4, #-4]
 800a7e4:	ed53 3a04 	vldr	s7, [r3, #-16]
 800a7e8:	ed15 0a02 	vldr	s0, [r5, #-8]
 800a7ec:	ed55 0a01 	vldr	s1, [r5, #-4]
 800a7f0:	ed56 6a04 	vldr	s13, [r6, #-16]
 800a7f4:	ed16 3a03 	vldr	s6, [r6, #-12]
 800a7f8:	ed13 7a03 	vldr	s14, [r3, #-12]
 800a7fc:	ed13 5a02 	vldr	s10, [r3, #-8]
 800a800:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a804:	ed16 1a02 	vldr	s2, [r6, #-8]
 800a808:	ed56 1a01 	vldr	s3, [r6, #-4]
 800a80c:	ee73 ba82 	vadd.f32	s23, s7, s4
 800a810:	ee37 ba22 	vadd.f32	s22, s14, s5
 800a814:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800a818:	ee33 9a04 	vadd.f32	s18, s6, s8
 800a81c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800a820:	ee75 aa00 	vadd.f32	s21, s10, s0
 800a824:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800a828:	ee71 8a06 	vadd.f32	s17, s2, s12
 800a82c:	ed43 ba04 	vstr	s23, [r3, #-16]
 800a830:	ed03 ba03 	vstr	s22, [r3, #-12]
 800a834:	ed43 aa02 	vstr	s21, [r3, #-8]
 800a838:	ed03 aa01 	vstr	s20, [r3, #-4]
 800a83c:	ed06 8a01 	vstr	s16, [r6, #-4]
 800a840:	ed46 9a04 	vstr	s19, [r6, #-16]
 800a844:	ed06 9a03 	vstr	s18, [r6, #-12]
 800a848:	ed46 8a02 	vstr	s17, [r6, #-8]
 800a84c:	ee37 7a62 	vsub.f32	s14, s14, s5
 800a850:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800a854:	ee34 4a43 	vsub.f32	s8, s8, s6
 800a858:	ed52 6a03 	vldr	s13, [r2, #-12]
 800a85c:	ed12 3a04 	vldr	s6, [r2, #-16]
 800a860:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800a864:	ee27 8a26 	vmul.f32	s16, s14, s13
 800a868:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800a86c:	ee23 2a83 	vmul.f32	s4, s7, s6
 800a870:	ee64 4a83 	vmul.f32	s9, s9, s6
 800a874:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800a878:	ee27 7a03 	vmul.f32	s14, s14, s6
 800a87c:	ee64 6a26 	vmul.f32	s13, s8, s13
 800a880:	ee24 4a03 	vmul.f32	s8, s8, s6
 800a884:	ee37 7a63 	vsub.f32	s14, s14, s7
 800a888:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a88c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800a890:	ee32 3a08 	vadd.f32	s6, s4, s16
 800a894:	ed05 7a03 	vstr	s14, [r5, #-12]
 800a898:	ed05 3a04 	vstr	s6, [r5, #-16]
 800a89c:	ed04 4a04 	vstr	s8, [r4, #-16]
 800a8a0:	ed44 6a03 	vstr	s13, [r4, #-12]
 800a8a4:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a8a8:	ee76 6a41 	vsub.f32	s13, s12, s2
 800a8ac:	ee35 5a40 	vsub.f32	s10, s10, s0
 800a8b0:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800a8b4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a8b8:	ed52 5a02 	vldr	s11, [r2, #-8]
 800a8bc:	ee67 3a87 	vmul.f32	s7, s15, s14
 800a8c0:	ee66 4a87 	vmul.f32	s9, s13, s14
 800a8c4:	ee25 4a25 	vmul.f32	s8, s10, s11
 800a8c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a8cc:	ee25 5a07 	vmul.f32	s10, s10, s14
 800a8d0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a8d4:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a8d8:	ee26 6a25 	vmul.f32	s12, s12, s11
 800a8dc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a8e0:	ee74 5a23 	vadd.f32	s11, s8, s7
 800a8e4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800a8e8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a8ec:	3310      	adds	r3, #16
 800a8ee:	4563      	cmp	r3, ip
 800a8f0:	ed45 5a02 	vstr	s11, [r5, #-8]
 800a8f4:	f106 0610 	add.w	r6, r6, #16
 800a8f8:	ed45 7a01 	vstr	s15, [r5, #-4]
 800a8fc:	f102 0210 	add.w	r2, r2, #16
 800a900:	ed04 6a02 	vstr	s12, [r4, #-8]
 800a904:	ed04 7a01 	vstr	s14, [r4, #-4]
 800a908:	f105 0510 	add.w	r5, r5, #16
 800a90c:	f104 0410 	add.w	r4, r4, #16
 800a910:	f47f af5c 	bne.w	800a7cc <arm_cfft_radix8by2_f32+0x38>
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	b28c      	uxth	r4, r1
 800a918:	4621      	mov	r1, r4
 800a91a:	2302      	movs	r3, #2
 800a91c:	f000 fb3c 	bl	800af98 <arm_radix8_butterfly_f32>
 800a920:	ecbd 8b08 	vpop	{d8-d11}
 800a924:	4621      	mov	r1, r4
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	4640      	mov	r0, r8
 800a92a:	2302      	movs	r3, #2
 800a92c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a930:	f000 bb32 	b.w	800af98 <arm_radix8_butterfly_f32>

0800a934 <arm_cfft_radix8by4_f32>:
 800a934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a938:	ed2d 8b0a 	vpush	{d8-d12}
 800a93c:	b08d      	sub	sp, #52	; 0x34
 800a93e:	460d      	mov	r5, r1
 800a940:	910b      	str	r1, [sp, #44]	; 0x2c
 800a942:	8801      	ldrh	r1, [r0, #0]
 800a944:	6842      	ldr	r2, [r0, #4]
 800a946:	900a      	str	r0, [sp, #40]	; 0x28
 800a948:	0849      	lsrs	r1, r1, #1
 800a94a:	008b      	lsls	r3, r1, #2
 800a94c:	18ee      	adds	r6, r5, r3
 800a94e:	18f0      	adds	r0, r6, r3
 800a950:	edd0 5a00 	vldr	s11, [r0]
 800a954:	edd5 7a00 	vldr	s15, [r5]
 800a958:	ed96 7a00 	vldr	s14, [r6]
 800a95c:	edd0 3a01 	vldr	s7, [r0, #4]
 800a960:	ed96 4a01 	vldr	s8, [r6, #4]
 800a964:	ed95 5a01 	vldr	s10, [r5, #4]
 800a968:	9008      	str	r0, [sp, #32]
 800a96a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800a96e:	18c7      	adds	r7, r0, r3
 800a970:	edd7 4a00 	vldr	s9, [r7]
 800a974:	ed97 3a01 	vldr	s6, [r7, #4]
 800a978:	9701      	str	r7, [sp, #4]
 800a97a:	ee77 6a06 	vadd.f32	s13, s14, s12
 800a97e:	462c      	mov	r4, r5
 800a980:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a984:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a988:	ee16 ca90 	vmov	ip, s13
 800a98c:	f844 cb08 	str.w	ip, [r4], #8
 800a990:	ee75 6a23 	vadd.f32	s13, s10, s7
 800a994:	edd6 5a01 	vldr	s11, [r6, #4]
 800a998:	edd7 2a01 	vldr	s5, [r7, #4]
 800a99c:	9404      	str	r4, [sp, #16]
 800a99e:	ee35 5a63 	vsub.f32	s10, s10, s7
 800a9a2:	ee74 3a27 	vadd.f32	s7, s8, s15
 800a9a6:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a9aa:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800a9ae:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800a9b2:	0849      	lsrs	r1, r1, #1
 800a9b4:	f102 0e08 	add.w	lr, r2, #8
 800a9b8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800a9bc:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800a9c0:	9109      	str	r1, [sp, #36]	; 0x24
 800a9c2:	ee35 4a47 	vsub.f32	s8, s10, s14
 800a9c6:	f1a1 0902 	sub.w	r9, r1, #2
 800a9ca:	f8cd e00c 	str.w	lr, [sp, #12]
 800a9ce:	4631      	mov	r1, r6
 800a9d0:	ee13 ea90 	vmov	lr, s7
 800a9d4:	ee36 6a64 	vsub.f32	s12, s12, s9
 800a9d8:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800a9dc:	4604      	mov	r4, r0
 800a9de:	edc5 5a01 	vstr	s11, [r5, #4]
 800a9e2:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a9e6:	f841 eb08 	str.w	lr, [r1], #8
 800a9ea:	ee34 5a24 	vadd.f32	s10, s8, s9
 800a9ee:	ee16 ea10 	vmov	lr, s12
 800a9f2:	ed86 5a01 	vstr	s10, [r6, #4]
 800a9f6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800a9fa:	f844 eb08 	str.w	lr, [r4], #8
 800a9fe:	ee77 7a83 	vadd.f32	s15, s15, s6
 800aa02:	edc0 6a01 	vstr	s13, [r0, #4]
 800aa06:	9405      	str	r4, [sp, #20]
 800aa08:	4604      	mov	r4, r0
 800aa0a:	ee17 0a90 	vmov	r0, s15
 800aa0e:	9106      	str	r1, [sp, #24]
 800aa10:	ee37 7a64 	vsub.f32	s14, s14, s9
 800aa14:	f102 0110 	add.w	r1, r2, #16
 800aa18:	46bc      	mov	ip, r7
 800aa1a:	9100      	str	r1, [sp, #0]
 800aa1c:	f847 0b08 	str.w	r0, [r7], #8
 800aa20:	f102 0118 	add.w	r1, r2, #24
 800aa24:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800aa28:	9102      	str	r1, [sp, #8]
 800aa2a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800aa2e:	9007      	str	r0, [sp, #28]
 800aa30:	f000 8134 	beq.w	800ac9c <arm_cfft_radix8by4_f32+0x368>
 800aa34:	f102 0920 	add.w	r9, r2, #32
 800aa38:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800aa3c:	9a01      	ldr	r2, [sp, #4]
 800aa3e:	f8dd a000 	ldr.w	sl, [sp]
 800aa42:	3b0c      	subs	r3, #12
 800aa44:	4683      	mov	fp, r0
 800aa46:	4463      	add	r3, ip
 800aa48:	f105 0e10 	add.w	lr, r5, #16
 800aa4c:	f1a4 010c 	sub.w	r1, r4, #12
 800aa50:	f104 0510 	add.w	r5, r4, #16
 800aa54:	f1a6 0c0c 	sub.w	ip, r6, #12
 800aa58:	f1a2 040c 	sub.w	r4, r2, #12
 800aa5c:	f106 0010 	add.w	r0, r6, #16
 800aa60:	3210      	adds	r2, #16
 800aa62:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800aa66:	ed55 5a02 	vldr	s11, [r5, #-8]
 800aa6a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800aa6e:	ed52 1a02 	vldr	s3, [r2, #-8]
 800aa72:	ed55 6a01 	vldr	s13, [r5, #-4]
 800aa76:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800aa7a:	ed12 1a01 	vldr	s2, [r2, #-4]
 800aa7e:	ed10 8a01 	vldr	s16, [r0, #-4]
 800aa82:	ee35 4a25 	vadd.f32	s8, s10, s11
 800aa86:	ee30 6a26 	vadd.f32	s12, s0, s13
 800aa8a:	ee37 7a84 	vadd.f32	s14, s15, s8
 800aa8e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800aa92:	ee37 7a21 	vadd.f32	s14, s14, s3
 800aa96:	ee75 5a65 	vsub.f32	s11, s10, s11
 800aa9a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800aa9e:	ed10 7a01 	vldr	s14, [r0, #-4]
 800aaa2:	ed52 6a01 	vldr	s13, [r2, #-4]
 800aaa6:	ee36 7a07 	vadd.f32	s14, s12, s14
 800aaaa:	ee78 aa25 	vadd.f32	s21, s16, s11
 800aaae:	ee37 7a26 	vadd.f32	s14, s14, s13
 800aab2:	ee70 3a67 	vsub.f32	s7, s0, s15
 800aab6:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800aaba:	ed94 7a02 	vldr	s14, [r4, #8]
 800aabe:	ed9c 2a02 	vldr	s4, [ip, #8]
 800aac2:	ed91 ba02 	vldr	s22, [r1, #8]
 800aac6:	edd3 9a02 	vldr	s19, [r3, #8]
 800aaca:	edd4 2a01 	vldr	s5, [r4, #4]
 800aace:	ed9c 9a01 	vldr	s18, [ip, #4]
 800aad2:	ed93 5a01 	vldr	s10, [r3, #4]
 800aad6:	edd1 0a01 	vldr	s1, [r1, #4]
 800aada:	ee72 6a07 	vadd.f32	s13, s4, s14
 800aade:	ee32 2a47 	vsub.f32	s4, s4, s14
 800aae2:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800aae6:	ee79 4a22 	vadd.f32	s9, s18, s5
 800aaea:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800aaee:	ee79 2a62 	vsub.f32	s5, s18, s5
 800aaf2:	ed8c 7a02 	vstr	s14, [ip, #8]
 800aaf6:	ed91 7a01 	vldr	s14, [r1, #4]
 800aafa:	edd3 8a01 	vldr	s17, [r3, #4]
 800aafe:	ee34 7a87 	vadd.f32	s14, s9, s14
 800ab02:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800ab06:	ee37 7a28 	vadd.f32	s14, s14, s17
 800ab0a:	ee32 9a60 	vsub.f32	s18, s4, s1
 800ab0e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800ab12:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800ab16:	ed1a aa02 	vldr	s20, [sl, #-8]
 800ab1a:	ee73 8a22 	vadd.f32	s17, s6, s5
 800ab1e:	ee39 9a05 	vadd.f32	s18, s18, s10
 800ab22:	ee7a aac1 	vsub.f32	s21, s21, s2
 800ab26:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800ab2a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800ab2e:	ee69 ba07 	vmul.f32	s23, s18, s14
 800ab32:	ee6a aa87 	vmul.f32	s21, s21, s14
 800ab36:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800ab3a:	ee63 ca87 	vmul.f32	s25, s7, s14
 800ab3e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800ab42:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800ab46:	ee68 8a87 	vmul.f32	s17, s17, s14
 800ab4a:	ee73 3aea 	vsub.f32	s7, s7, s21
 800ab4e:	ee78 8a89 	vadd.f32	s17, s17, s18
 800ab52:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800ab56:	ee3b aaca 	vsub.f32	s20, s23, s20
 800ab5a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800ab5e:	ee76 6acb 	vsub.f32	s13, s13, s22
 800ab62:	ee36 6a48 	vsub.f32	s12, s12, s16
 800ab66:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800ab6a:	ed00 7a02 	vstr	s14, [r0, #-8]
 800ab6e:	ed40 3a01 	vstr	s7, [r0, #-4]
 800ab72:	edc1 8a01 	vstr	s17, [r1, #4]
 800ab76:	ed81 aa02 	vstr	s20, [r1, #8]
 800ab7a:	ed59 3a04 	vldr	s7, [r9, #-16]
 800ab7e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800ab82:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800ab86:	ed59 6a03 	vldr	s13, [r9, #-12]
 800ab8a:	ee34 4a61 	vsub.f32	s8, s8, s3
 800ab8e:	ee36 6a41 	vsub.f32	s12, s12, s2
 800ab92:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800ab96:	ee66 9a26 	vmul.f32	s19, s12, s13
 800ab9a:	ee24 9a23 	vmul.f32	s18, s8, s7
 800ab9e:	ee26 6a23 	vmul.f32	s12, s12, s7
 800aba2:	ee24 4a26 	vmul.f32	s8, s8, s13
 800aba6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800abaa:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800abae:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800abb2:	ee36 6a44 	vsub.f32	s12, s12, s8
 800abb6:	ee37 7a64 	vsub.f32	s14, s14, s9
 800abba:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800abbe:	ee79 3a29 	vadd.f32	s7, s18, s19
 800abc2:	ee75 6a60 	vsub.f32	s13, s10, s1
 800abc6:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800abca:	ee77 7a80 	vadd.f32	s15, s15, s0
 800abce:	ed45 3a02 	vstr	s7, [r5, #-8]
 800abd2:	ed05 6a01 	vstr	s12, [r5, #-4]
 800abd6:	ed84 7a01 	vstr	s14, [r4, #4]
 800abda:	ed84 4a02 	vstr	s8, [r4, #8]
 800abde:	ee35 6a81 	vadd.f32	s12, s11, s2
 800abe2:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800abe6:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800abea:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800abee:	ee33 3a62 	vsub.f32	s6, s6, s5
 800abf2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800abf6:	ee67 2a26 	vmul.f32	s5, s14, s13
 800abfa:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800abfe:	ee26 5a25 	vmul.f32	s10, s12, s11
 800ac02:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ac06:	ee26 6a26 	vmul.f32	s12, s12, s13
 800ac0a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ac0e:	ee63 6a26 	vmul.f32	s13, s6, s13
 800ac12:	ee23 3a25 	vmul.f32	s6, s6, s11
 800ac16:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ac1a:	ee75 5a24 	vadd.f32	s11, s10, s9
 800ac1e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800ac22:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ac26:	f1bb 0b01 	subs.w	fp, fp, #1
 800ac2a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800ac2e:	ed42 7a01 	vstr	s15, [r2, #-4]
 800ac32:	f10e 0e08 	add.w	lr, lr, #8
 800ac36:	ed83 3a02 	vstr	s6, [r3, #8]
 800ac3a:	ed83 7a01 	vstr	s14, [r3, #4]
 800ac3e:	f1ac 0c08 	sub.w	ip, ip, #8
 800ac42:	f10a 0a08 	add.w	sl, sl, #8
 800ac46:	f100 0008 	add.w	r0, r0, #8
 800ac4a:	f1a1 0108 	sub.w	r1, r1, #8
 800ac4e:	f109 0910 	add.w	r9, r9, #16
 800ac52:	f105 0508 	add.w	r5, r5, #8
 800ac56:	f1a4 0408 	sub.w	r4, r4, #8
 800ac5a:	f108 0818 	add.w	r8, r8, #24
 800ac5e:	f102 0208 	add.w	r2, r2, #8
 800ac62:	f1a3 0308 	sub.w	r3, r3, #8
 800ac66:	f47f aefc 	bne.w	800aa62 <arm_cfft_radix8by4_f32+0x12e>
 800ac6a:	9907      	ldr	r1, [sp, #28]
 800ac6c:	9800      	ldr	r0, [sp, #0]
 800ac6e:	00cb      	lsls	r3, r1, #3
 800ac70:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800ac74:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800ac78:	9100      	str	r1, [sp, #0]
 800ac7a:	9904      	ldr	r1, [sp, #16]
 800ac7c:	4419      	add	r1, r3
 800ac7e:	9104      	str	r1, [sp, #16]
 800ac80:	9903      	ldr	r1, [sp, #12]
 800ac82:	4419      	add	r1, r3
 800ac84:	9103      	str	r1, [sp, #12]
 800ac86:	9906      	ldr	r1, [sp, #24]
 800ac88:	4419      	add	r1, r3
 800ac8a:	9106      	str	r1, [sp, #24]
 800ac8c:	9905      	ldr	r1, [sp, #20]
 800ac8e:	441f      	add	r7, r3
 800ac90:	4419      	add	r1, r3
 800ac92:	9b02      	ldr	r3, [sp, #8]
 800ac94:	9105      	str	r1, [sp, #20]
 800ac96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac9a:	9302      	str	r3, [sp, #8]
 800ac9c:	9904      	ldr	r1, [sp, #16]
 800ac9e:	9805      	ldr	r0, [sp, #20]
 800aca0:	ed91 4a00 	vldr	s8, [r1]
 800aca4:	edd0 6a00 	vldr	s13, [r0]
 800aca8:	9b06      	ldr	r3, [sp, #24]
 800acaa:	ed97 3a00 	vldr	s6, [r7]
 800acae:	edd3 7a00 	vldr	s15, [r3]
 800acb2:	edd0 4a01 	vldr	s9, [r0, #4]
 800acb6:	edd1 3a01 	vldr	s7, [r1, #4]
 800acba:	ed97 2a01 	vldr	s4, [r7, #4]
 800acbe:	ed93 7a01 	vldr	s14, [r3, #4]
 800acc2:	9a03      	ldr	r2, [sp, #12]
 800acc4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800acc8:	ee34 6a26 	vadd.f32	s12, s8, s13
 800accc:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800acd0:	ee37 5a86 	vadd.f32	s10, s15, s12
 800acd4:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800acd8:	ee35 5a03 	vadd.f32	s10, s10, s6
 800acdc:	ee74 6a66 	vsub.f32	s13, s8, s13
 800ace0:	ed81 5a00 	vstr	s10, [r1]
 800ace4:	ed93 5a01 	vldr	s10, [r3, #4]
 800ace8:	edd7 4a01 	vldr	s9, [r7, #4]
 800acec:	ee35 5a85 	vadd.f32	s10, s11, s10
 800acf0:	ee37 4a26 	vadd.f32	s8, s14, s13
 800acf4:	ee35 5a24 	vadd.f32	s10, s10, s9
 800acf8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800acfc:	ed81 5a01 	vstr	s10, [r1, #4]
 800ad00:	edd2 1a00 	vldr	s3, [r2]
 800ad04:	edd2 2a01 	vldr	s5, [r2, #4]
 800ad08:	ee34 5a83 	vadd.f32	s10, s9, s6
 800ad0c:	ee34 4a42 	vsub.f32	s8, s8, s4
 800ad10:	ee36 6a67 	vsub.f32	s12, s12, s15
 800ad14:	ee64 4a21 	vmul.f32	s9, s8, s3
 800ad18:	ee24 4a22 	vmul.f32	s8, s8, s5
 800ad1c:	ee65 2a22 	vmul.f32	s5, s10, s5
 800ad20:	ee25 5a21 	vmul.f32	s10, s10, s3
 800ad24:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800ad28:	ee35 5a44 	vsub.f32	s10, s10, s8
 800ad2c:	edc3 2a00 	vstr	s5, [r3]
 800ad30:	ed83 5a01 	vstr	s10, [r3, #4]
 800ad34:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800ad38:	9b00      	ldr	r3, [sp, #0]
 800ad3a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800ad3e:	ed93 4a01 	vldr	s8, [r3, #4]
 800ad42:	ed93 5a00 	vldr	s10, [r3]
 800ad46:	9b02      	ldr	r3, [sp, #8]
 800ad48:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800ad4c:	ee66 4a05 	vmul.f32	s9, s12, s10
 800ad50:	ee25 5a85 	vmul.f32	s10, s11, s10
 800ad54:	ee26 6a04 	vmul.f32	s12, s12, s8
 800ad58:	ee65 5a84 	vmul.f32	s11, s11, s8
 800ad5c:	ee35 6a46 	vsub.f32	s12, s10, s12
 800ad60:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800ad64:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ad68:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ad6c:	ed80 6a01 	vstr	s12, [r0, #4]
 800ad70:	edc0 5a00 	vstr	s11, [r0]
 800ad74:	edd3 5a01 	vldr	s11, [r3, #4]
 800ad78:	edd3 6a00 	vldr	s13, [r3]
 800ad7c:	ee37 7a02 	vadd.f32	s14, s14, s4
 800ad80:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800ad84:	ee27 6a26 	vmul.f32	s12, s14, s13
 800ad88:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ad8c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ad90:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ad94:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ad98:	ee76 7a27 	vadd.f32	s15, s12, s15
 800ad9c:	ed87 7a01 	vstr	s14, [r7, #4]
 800ada0:	edc7 7a00 	vstr	s15, [r7]
 800ada4:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800ada8:	4621      	mov	r1, r4
 800adaa:	686a      	ldr	r2, [r5, #4]
 800adac:	2304      	movs	r3, #4
 800adae:	f000 f8f3 	bl	800af98 <arm_radix8_butterfly_f32>
 800adb2:	4630      	mov	r0, r6
 800adb4:	4621      	mov	r1, r4
 800adb6:	686a      	ldr	r2, [r5, #4]
 800adb8:	2304      	movs	r3, #4
 800adba:	f000 f8ed 	bl	800af98 <arm_radix8_butterfly_f32>
 800adbe:	9808      	ldr	r0, [sp, #32]
 800adc0:	686a      	ldr	r2, [r5, #4]
 800adc2:	4621      	mov	r1, r4
 800adc4:	2304      	movs	r3, #4
 800adc6:	f000 f8e7 	bl	800af98 <arm_radix8_butterfly_f32>
 800adca:	686a      	ldr	r2, [r5, #4]
 800adcc:	9801      	ldr	r0, [sp, #4]
 800adce:	4621      	mov	r1, r4
 800add0:	2304      	movs	r3, #4
 800add2:	b00d      	add	sp, #52	; 0x34
 800add4:	ecbd 8b0a 	vpop	{d8-d12}
 800add8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800addc:	f000 b8dc 	b.w	800af98 <arm_radix8_butterfly_f32>

0800ade0 <arm_cfft_f32>:
 800ade0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade4:	2a01      	cmp	r2, #1
 800ade6:	4606      	mov	r6, r0
 800ade8:	4617      	mov	r7, r2
 800adea:	460c      	mov	r4, r1
 800adec:	4698      	mov	r8, r3
 800adee:	8805      	ldrh	r5, [r0, #0]
 800adf0:	d056      	beq.n	800aea0 <arm_cfft_f32+0xc0>
 800adf2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800adf6:	d063      	beq.n	800aec0 <arm_cfft_f32+0xe0>
 800adf8:	d916      	bls.n	800ae28 <arm_cfft_f32+0x48>
 800adfa:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800adfe:	d01a      	beq.n	800ae36 <arm_cfft_f32+0x56>
 800ae00:	d947      	bls.n	800ae92 <arm_cfft_f32+0xb2>
 800ae02:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800ae06:	d05b      	beq.n	800aec0 <arm_cfft_f32+0xe0>
 800ae08:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800ae0c:	d105      	bne.n	800ae1a <arm_cfft_f32+0x3a>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	6872      	ldr	r2, [r6, #4]
 800ae12:	4629      	mov	r1, r5
 800ae14:	4620      	mov	r0, r4
 800ae16:	f000 f8bf 	bl	800af98 <arm_radix8_butterfly_f32>
 800ae1a:	f1b8 0f00 	cmp.w	r8, #0
 800ae1e:	d111      	bne.n	800ae44 <arm_cfft_f32+0x64>
 800ae20:	2f01      	cmp	r7, #1
 800ae22:	d016      	beq.n	800ae52 <arm_cfft_f32+0x72>
 800ae24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae28:	2d20      	cmp	r5, #32
 800ae2a:	d049      	beq.n	800aec0 <arm_cfft_f32+0xe0>
 800ae2c:	d935      	bls.n	800ae9a <arm_cfft_f32+0xba>
 800ae2e:	2d40      	cmp	r5, #64	; 0x40
 800ae30:	d0ed      	beq.n	800ae0e <arm_cfft_f32+0x2e>
 800ae32:	2d80      	cmp	r5, #128	; 0x80
 800ae34:	d1f1      	bne.n	800ae1a <arm_cfft_f32+0x3a>
 800ae36:	4621      	mov	r1, r4
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f7ff fcab 	bl	800a794 <arm_cfft_radix8by2_f32>
 800ae3e:	f1b8 0f00 	cmp.w	r8, #0
 800ae42:	d0ed      	beq.n	800ae20 <arm_cfft_f32+0x40>
 800ae44:	68b2      	ldr	r2, [r6, #8]
 800ae46:	89b1      	ldrh	r1, [r6, #12]
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f000 f841 	bl	800aed0 <arm_bitreversal_32>
 800ae4e:	2f01      	cmp	r7, #1
 800ae50:	d1e8      	bne.n	800ae24 <arm_cfft_f32+0x44>
 800ae52:	ee07 5a90 	vmov	s15, r5
 800ae56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ae62:	2d00      	cmp	r5, #0
 800ae64:	d0de      	beq.n	800ae24 <arm_cfft_f32+0x44>
 800ae66:	f104 0108 	add.w	r1, r4, #8
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	429d      	cmp	r5, r3
 800ae70:	f101 0108 	add.w	r1, r1, #8
 800ae74:	ed11 7a04 	vldr	s14, [r1, #-16]
 800ae78:	ed51 7a03 	vldr	s15, [r1, #-12]
 800ae7c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ae80:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ae84:	ed01 7a04 	vstr	s14, [r1, #-16]
 800ae88:	ed41 7a03 	vstr	s15, [r1, #-12]
 800ae8c:	d1ee      	bne.n	800ae6c <arm_cfft_f32+0x8c>
 800ae8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae92:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800ae96:	d0ba      	beq.n	800ae0e <arm_cfft_f32+0x2e>
 800ae98:	e7bf      	b.n	800ae1a <arm_cfft_f32+0x3a>
 800ae9a:	2d10      	cmp	r5, #16
 800ae9c:	d0cb      	beq.n	800ae36 <arm_cfft_f32+0x56>
 800ae9e:	e7bc      	b.n	800ae1a <arm_cfft_f32+0x3a>
 800aea0:	b19d      	cbz	r5, 800aeca <arm_cfft_f32+0xea>
 800aea2:	f101 030c 	add.w	r3, r1, #12
 800aea6:	2200      	movs	r2, #0
 800aea8:	ed53 7a02 	vldr	s15, [r3, #-8]
 800aeac:	3201      	adds	r2, #1
 800aeae:	eef1 7a67 	vneg.f32	s15, s15
 800aeb2:	4295      	cmp	r5, r2
 800aeb4:	ed43 7a02 	vstr	s15, [r3, #-8]
 800aeb8:	f103 0308 	add.w	r3, r3, #8
 800aebc:	d1f4      	bne.n	800aea8 <arm_cfft_f32+0xc8>
 800aebe:	e798      	b.n	800adf2 <arm_cfft_f32+0x12>
 800aec0:	4621      	mov	r1, r4
 800aec2:	4630      	mov	r0, r6
 800aec4:	f7ff fd36 	bl	800a934 <arm_cfft_radix8by4_f32>
 800aec8:	e7a7      	b.n	800ae1a <arm_cfft_f32+0x3a>
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d0aa      	beq.n	800ae24 <arm_cfft_f32+0x44>
 800aece:	e7b9      	b.n	800ae44 <arm_cfft_f32+0x64>

0800aed0 <arm_bitreversal_32>:
 800aed0:	b1e9      	cbz	r1, 800af0e <arm_bitreversal_32+0x3e>
 800aed2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aed4:	2500      	movs	r5, #0
 800aed6:	f102 0e02 	add.w	lr, r2, #2
 800aeda:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800aede:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800aee2:	08a4      	lsrs	r4, r4, #2
 800aee4:	089b      	lsrs	r3, r3, #2
 800aee6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800aeea:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800aeee:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800aef2:	00a6      	lsls	r6, r4, #2
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800aefa:	3304      	adds	r3, #4
 800aefc:	1d34      	adds	r4, r6, #4
 800aefe:	3502      	adds	r5, #2
 800af00:	58c6      	ldr	r6, [r0, r3]
 800af02:	5907      	ldr	r7, [r0, r4]
 800af04:	50c7      	str	r7, [r0, r3]
 800af06:	428d      	cmp	r5, r1
 800af08:	5106      	str	r6, [r0, r4]
 800af0a:	d3e6      	bcc.n	800aeda <arm_bitreversal_32+0xa>
 800af0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af0e:	4770      	bx	lr

0800af10 <arm_abs_f32>:
 800af10:	b470      	push	{r4, r5, r6}
 800af12:	0896      	lsrs	r6, r2, #2
 800af14:	d025      	beq.n	800af62 <arm_abs_f32+0x52>
 800af16:	f100 0410 	add.w	r4, r0, #16
 800af1a:	f101 0310 	add.w	r3, r1, #16
 800af1e:	4635      	mov	r5, r6
 800af20:	ed54 7a04 	vldr	s15, [r4, #-16]
 800af24:	eef0 7ae7 	vabs.f32	s15, s15
 800af28:	ed43 7a04 	vstr	s15, [r3, #-16]
 800af2c:	ed54 7a03 	vldr	s15, [r4, #-12]
 800af30:	eef0 7ae7 	vabs.f32	s15, s15
 800af34:	ed43 7a03 	vstr	s15, [r3, #-12]
 800af38:	ed54 7a02 	vldr	s15, [r4, #-8]
 800af3c:	eef0 7ae7 	vabs.f32	s15, s15
 800af40:	ed43 7a02 	vstr	s15, [r3, #-8]
 800af44:	ed54 7a01 	vldr	s15, [r4, #-4]
 800af48:	3d01      	subs	r5, #1
 800af4a:	eef0 7ae7 	vabs.f32	s15, s15
 800af4e:	ed43 7a01 	vstr	s15, [r3, #-4]
 800af52:	f104 0410 	add.w	r4, r4, #16
 800af56:	f103 0310 	add.w	r3, r3, #16
 800af5a:	d1e1      	bne.n	800af20 <arm_abs_f32+0x10>
 800af5c:	0136      	lsls	r6, r6, #4
 800af5e:	4430      	add	r0, r6
 800af60:	4431      	add	r1, r6
 800af62:	f012 0203 	ands.w	r2, r2, #3
 800af66:	d015      	beq.n	800af94 <arm_abs_f32+0x84>
 800af68:	edd0 7a00 	vldr	s15, [r0]
 800af6c:	3a01      	subs	r2, #1
 800af6e:	eef0 7ae7 	vabs.f32	s15, s15
 800af72:	edc1 7a00 	vstr	s15, [r1]
 800af76:	d00d      	beq.n	800af94 <arm_abs_f32+0x84>
 800af78:	edd0 7a01 	vldr	s15, [r0, #4]
 800af7c:	2a01      	cmp	r2, #1
 800af7e:	eef0 7ae7 	vabs.f32	s15, s15
 800af82:	edc1 7a01 	vstr	s15, [r1, #4]
 800af86:	d005      	beq.n	800af94 <arm_abs_f32+0x84>
 800af88:	edd0 7a02 	vldr	s15, [r0, #8]
 800af8c:	eef0 7ae7 	vabs.f32	s15, s15
 800af90:	edc1 7a02 	vstr	s15, [r1, #8]
 800af94:	bc70      	pop	{r4, r5, r6}
 800af96:	4770      	bx	lr

0800af98 <arm_radix8_butterfly_f32>:
 800af98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af9c:	ed2d 8b10 	vpush	{d8-d15}
 800afa0:	b095      	sub	sp, #84	; 0x54
 800afa2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800afa6:	4603      	mov	r3, r0
 800afa8:	3304      	adds	r3, #4
 800afaa:	ed9f bab9 	vldr	s22, [pc, #740]	; 800b290 <arm_radix8_butterfly_f32+0x2f8>
 800afae:	9012      	str	r0, [sp, #72]	; 0x48
 800afb0:	468b      	mov	fp, r1
 800afb2:	9313      	str	r3, [sp, #76]	; 0x4c
 800afb4:	4689      	mov	r9, r1
 800afb6:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800afba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afbc:	960f      	str	r6, [sp, #60]	; 0x3c
 800afbe:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800afc2:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800afc6:	eb03 0508 	add.w	r5, r3, r8
 800afca:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800afce:	eb05 040e 	add.w	r4, r5, lr
 800afd2:	0137      	lsls	r7, r6, #4
 800afd4:	eba6 030a 	sub.w	r3, r6, sl
 800afd8:	eb04 000e 	add.w	r0, r4, lr
 800afdc:	44b2      	add	sl, r6
 800afde:	1d3a      	adds	r2, r7, #4
 800afe0:	9702      	str	r7, [sp, #8]
 800afe2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800afe6:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800afea:	ebae 0c06 	sub.w	ip, lr, r6
 800afee:	9703      	str	r7, [sp, #12]
 800aff0:	eb03 0708 	add.w	r7, r3, r8
 800aff4:	9701      	str	r7, [sp, #4]
 800aff6:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800affa:	9706      	str	r7, [sp, #24]
 800affc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800affe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800b002:	f10e 0104 	add.w	r1, lr, #4
 800b006:	4439      	add	r1, r7
 800b008:	443a      	add	r2, r7
 800b00a:	0137      	lsls	r7, r6, #4
 800b00c:	00f6      	lsls	r6, r6, #3
 800b00e:	9704      	str	r7, [sp, #16]
 800b010:	9605      	str	r6, [sp, #20]
 800b012:	9f01      	ldr	r7, [sp, #4]
 800b014:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800b016:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800b01a:	f04f 0c00 	mov.w	ip, #0
 800b01e:	edd4 6a00 	vldr	s13, [r4]
 800b022:	edd7 1a00 	vldr	s3, [r7]
 800b026:	ed16 aa01 	vldr	s20, [r6, #-4]
 800b02a:	edd5 5a00 	vldr	s11, [r5]
 800b02e:	ed52 9a01 	vldr	s19, [r2, #-4]
 800b032:	ed90 6a00 	vldr	s12, [r0]
 800b036:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b03a:	ed93 3a00 	vldr	s6, [r3]
 800b03e:	ee39 0a86 	vadd.f32	s0, s19, s12
 800b042:	ee33 2a21 	vadd.f32	s4, s6, s3
 800b046:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800b04a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800b04e:	ee35 7a02 	vadd.f32	s14, s10, s4
 800b052:	ee34 4a80 	vadd.f32	s8, s9, s0
 800b056:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b05a:	ee74 6a07 	vadd.f32	s13, s8, s14
 800b05e:	ee34 4a47 	vsub.f32	s8, s8, s14
 800b062:	ed46 6a01 	vstr	s13, [r6, #-4]
 800b066:	ed85 4a00 	vstr	s8, [r5]
 800b06a:	edd1 6a00 	vldr	s13, [r1]
 800b06e:	ed94 9a01 	vldr	s18, [r4, #4]
 800b072:	edd3 2a01 	vldr	s5, [r3, #4]
 800b076:	edd7 8a01 	vldr	s17, [r7, #4]
 800b07a:	edd6 0a00 	vldr	s1, [r6]
 800b07e:	edd5 3a01 	vldr	s7, [r5, #4]
 800b082:	ed90 8a01 	vldr	s16, [r0, #4]
 800b086:	ed92 7a00 	vldr	s14, [r2]
 800b08a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b08e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800b092:	ee72 aae8 	vsub.f32	s21, s5, s17
 800b096:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800b09a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800b09e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b0a2:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800b0a6:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800b0aa:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800b0ae:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800b0b2:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800b0b6:	ee77 0a08 	vadd.f32	s1, s14, s16
 800b0ba:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800b0be:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b0c2:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800b0c6:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800b0ca:	ee76 6a89 	vadd.f32	s13, s13, s18
 800b0ce:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800b0d2:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b0d6:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800b0da:	ee35 5a42 	vsub.f32	s10, s10, s4
 800b0de:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800b0e2:	ee33 2a20 	vadd.f32	s4, s6, s1
 800b0e6:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800b0ea:	ee33 3a60 	vsub.f32	s6, s6, s1
 800b0ee:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800b0f2:	ee77 0a01 	vadd.f32	s1, s14, s2
 800b0f6:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800b0fa:	ee37 7a41 	vsub.f32	s14, s14, s2
 800b0fe:	ee73 1a84 	vadd.f32	s3, s7, s8
 800b102:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800b106:	ee76 3a27 	vadd.f32	s7, s12, s15
 800b10a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b10e:	ee32 8a00 	vadd.f32	s16, s4, s0
 800b112:	ee33 1a45 	vsub.f32	s2, s6, s10
 800b116:	ee32 2a40 	vsub.f32	s4, s4, s0
 800b11a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b11e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800b122:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800b126:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800b12a:	ee34 6a67 	vsub.f32	s12, s8, s15
 800b12e:	ee75 4a87 	vadd.f32	s9, s11, s14
 800b132:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800b136:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800b13a:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b13e:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800b142:	44dc      	add	ip, fp
 800b144:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b148:	45e1      	cmp	r9, ip
 800b14a:	ed86 8a00 	vstr	s16, [r6]
 800b14e:	ed85 2a01 	vstr	s4, [r5, #4]
 800b152:	4456      	add	r6, sl
 800b154:	ed02 0a01 	vstr	s0, [r2, #-4]
 800b158:	4455      	add	r5, sl
 800b15a:	edc0 6a00 	vstr	s13, [r0]
 800b15e:	ed82 1a00 	vstr	s2, [r2]
 800b162:	ed80 5a01 	vstr	s10, [r0, #4]
 800b166:	4452      	add	r2, sl
 800b168:	ed01 3a01 	vstr	s6, [r1, #-4]
 800b16c:	4450      	add	r0, sl
 800b16e:	edc7 2a00 	vstr	s5, [r7]
 800b172:	edc4 4a00 	vstr	s9, [r4]
 800b176:	ed83 7a00 	vstr	s14, [r3]
 800b17a:	edc1 5a00 	vstr	s11, [r1]
 800b17e:	edc7 3a01 	vstr	s7, [r7, #4]
 800b182:	4451      	add	r1, sl
 800b184:	ed84 6a01 	vstr	s12, [r4, #4]
 800b188:	4457      	add	r7, sl
 800b18a:	edc3 7a01 	vstr	s15, [r3, #4]
 800b18e:	4454      	add	r4, sl
 800b190:	4453      	add	r3, sl
 800b192:	f63f af44 	bhi.w	800b01e <arm_radix8_butterfly_f32+0x86>
 800b196:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b198:	2b07      	cmp	r3, #7
 800b19a:	f240 81b7 	bls.w	800b50c <arm_radix8_butterfly_f32+0x574>
 800b19e:	9b06      	ldr	r3, [sp, #24]
 800b1a0:	9903      	ldr	r1, [sp, #12]
 800b1a2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b1a4:	9e05      	ldr	r6, [sp, #20]
 800b1a6:	9a04      	ldr	r2, [sp, #16]
 800b1a8:	f103 0c08 	add.w	ip, r3, #8
 800b1ac:	9b02      	ldr	r3, [sp, #8]
 800b1ae:	3108      	adds	r1, #8
 800b1b0:	f108 0808 	add.w	r8, r8, #8
 800b1b4:	1841      	adds	r1, r0, r1
 800b1b6:	3608      	adds	r6, #8
 800b1b8:	330c      	adds	r3, #12
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	4444      	add	r4, r8
 800b1be:	18c3      	adds	r3, r0, r3
 800b1c0:	9109      	str	r1, [sp, #36]	; 0x24
 800b1c2:	1981      	adds	r1, r0, r6
 800b1c4:	f10e 0e08 	add.w	lr, lr, #8
 800b1c8:	3208      	adds	r2, #8
 800b1ca:	940b      	str	r4, [sp, #44]	; 0x2c
 800b1cc:	9107      	str	r1, [sp, #28]
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	4601      	mov	r1, r0
 800b1d2:	9304      	str	r3, [sp, #16]
 800b1d4:	f100 030c 	add.w	r3, r0, #12
 800b1d8:	4474      	add	r4, lr
 800b1da:	f04f 0801 	mov.w	r8, #1
 800b1de:	1882      	adds	r2, r0, r2
 800b1e0:	4461      	add	r1, ip
 800b1e2:	9305      	str	r3, [sp, #20]
 800b1e4:	464b      	mov	r3, r9
 800b1e6:	940a      	str	r4, [sp, #40]	; 0x28
 800b1e8:	46c1      	mov	r9, r8
 800b1ea:	9208      	str	r2, [sp, #32]
 800b1ec:	46d8      	mov	r8, fp
 800b1ee:	9106      	str	r1, [sp, #24]
 800b1f0:	f04f 0e00 	mov.w	lr, #0
 800b1f4:	469b      	mov	fp, r3
 800b1f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b1fa:	449e      	add	lr, r3
 800b1fc:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800b200:	441a      	add	r2, r3
 800b202:	920e      	str	r2, [sp, #56]	; 0x38
 800b204:	441a      	add	r2, r3
 800b206:	18d4      	adds	r4, r2, r3
 800b208:	18e5      	adds	r5, r4, r3
 800b20a:	18ee      	adds	r6, r5, r3
 800b20c:	18f7      	adds	r7, r6, r3
 800b20e:	eb07 0c03 	add.w	ip, r7, r3
 800b212:	920d      	str	r2, [sp, #52]	; 0x34
 800b214:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800b218:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800b21c:	910c      	str	r1, [sp, #48]	; 0x30
 800b21e:	4419      	add	r1, r3
 800b220:	9103      	str	r1, [sp, #12]
 800b222:	4419      	add	r1, r3
 800b224:	18ca      	adds	r2, r1, r3
 800b226:	9202      	str	r2, [sp, #8]
 800b228:	441a      	add	r2, r3
 800b22a:	18d0      	adds	r0, r2, r3
 800b22c:	ed92 ea01 	vldr	s28, [r2, #4]
 800b230:	9a02      	ldr	r2, [sp, #8]
 800b232:	edd4 7a00 	vldr	s15, [r4]
 800b236:	edd2 da01 	vldr	s27, [r2, #4]
 800b23a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b23c:	ed91 da01 	vldr	s26, [r1, #4]
 800b240:	ed92 ca01 	vldr	s24, [r2, #4]
 800b244:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b246:	9903      	ldr	r1, [sp, #12]
 800b248:	edcd 7a03 	vstr	s15, [sp, #12]
 800b24c:	edd2 7a00 	vldr	s15, [r2]
 800b250:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b252:	edcd 7a02 	vstr	s15, [sp, #8]
 800b256:	edd2 7a00 	vldr	s15, [r2]
 800b25a:	edd0 ea01 	vldr	s29, [r0, #4]
 800b25e:	edd1 ca01 	vldr	s25, [r1, #4]
 800b262:	eddc ba00 	vldr	s23, [ip]
 800b266:	edd7 aa00 	vldr	s21, [r7]
 800b26a:	ed96 aa00 	vldr	s20, [r6]
 800b26e:	edd5 9a00 	vldr	s19, [r5]
 800b272:	edcd 7a01 	vstr	s15, [sp, #4]
 800b276:	4403      	add	r3, r0
 800b278:	ed93 fa01 	vldr	s30, [r3, #4]
 800b27c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800b280:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800b284:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b288:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b28c:	46cc      	mov	ip, r9
 800b28e:	e001      	b.n	800b294 <arm_radix8_butterfly_f32+0x2fc>
 800b290:	3f3504f3 	.word	0x3f3504f3
 800b294:	ed91 6a00 	vldr	s12, [r1]
 800b298:	ed93 5a00 	vldr	s10, [r3]
 800b29c:	edd0 fa00 	vldr	s31, [r0]
 800b2a0:	edd4 7a00 	vldr	s15, [r4]
 800b2a4:	ed95 7a00 	vldr	s14, [r5]
 800b2a8:	ed56 3a01 	vldr	s7, [r6, #-4]
 800b2ac:	ed17 3a01 	vldr	s6, [r7, #-4]
 800b2b0:	ed92 2a00 	vldr	s4, [r2]
 800b2b4:	ed96 0a00 	vldr	s0, [r6]
 800b2b8:	ee33 8a85 	vadd.f32	s16, s7, s10
 800b2bc:	ee32 1a06 	vadd.f32	s2, s4, s12
 800b2c0:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800b2c4:	ee77 4a87 	vadd.f32	s9, s15, s14
 800b2c8:	ee78 1a04 	vadd.f32	s3, s16, s8
 800b2cc:	ee71 6a24 	vadd.f32	s13, s2, s9
 800b2d0:	ee32 2a46 	vsub.f32	s4, s4, s12
 800b2d4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800b2d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b2dc:	ed06 6a01 	vstr	s12, [r6, #-4]
 800b2e0:	edd4 8a01 	vldr	s17, [r4, #4]
 800b2e4:	ed92 9a01 	vldr	s18, [r2, #4]
 800b2e8:	edd7 0a00 	vldr	s1, [r7]
 800b2ec:	edd1 2a01 	vldr	s5, [r1, #4]
 800b2f0:	ed95 7a01 	vldr	s14, [r5, #4]
 800b2f4:	ed93 6a01 	vldr	s12, [r3, #4]
 800b2f8:	edd0 5a01 	vldr	s11, [r0, #4]
 800b2fc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800b300:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800b304:	ee39 5a62 	vsub.f32	s10, s18, s5
 800b308:	ee78 fac7 	vsub.f32	s31, s17, s14
 800b30c:	ee38 4a44 	vsub.f32	s8, s16, s8
 800b310:	ee38 7a87 	vadd.f32	s14, s17, s14
 800b314:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800b318:	ee79 2a22 	vadd.f32	s5, s18, s5
 800b31c:	ee32 9a27 	vadd.f32	s18, s4, s15
 800b320:	ee72 7a67 	vsub.f32	s15, s4, s15
 800b324:	ee30 2a06 	vadd.f32	s4, s0, s12
 800b328:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800b32c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800b330:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800b334:	ee32 1a08 	vadd.f32	s2, s4, s16
 800b338:	ee72 fa87 	vadd.f32	s31, s5, s14
 800b33c:	ee32 2a48 	vsub.f32	s4, s4, s16
 800b340:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800b344:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800b348:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800b34c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800b350:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800b354:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800b358:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800b35c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b360:	ee30 6a46 	vsub.f32	s12, s0, s12
 800b364:	ee74 0a22 	vadd.f32	s1, s8, s5
 800b368:	ee36 0a28 	vadd.f32	s0, s12, s17
 800b36c:	ee74 2a62 	vsub.f32	s5, s8, s5
 800b370:	ee36 6a68 	vsub.f32	s12, s12, s17
 800b374:	ee32 4a64 	vsub.f32	s8, s4, s9
 800b378:	ee73 8a09 	vadd.f32	s17, s6, s18
 800b37c:	ee74 4a82 	vadd.f32	s9, s9, s4
 800b380:	ee33 9a49 	vsub.f32	s18, s6, s18
 800b384:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800b388:	ee35 3a85 	vadd.f32	s6, s11, s10
 800b38c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800b390:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800b394:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800b398:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800b39c:	ee30 7a68 	vsub.f32	s14, s0, s17
 800b3a0:	ee35 8a03 	vadd.f32	s16, s10, s6
 800b3a4:	ee38 0a80 	vadd.f32	s0, s17, s0
 800b3a8:	ee73 3a82 	vadd.f32	s7, s7, s4
 800b3ac:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800b3b0:	ed9d 2a01 	vldr	s4, [sp, #4]
 800b3b4:	eddd 1a02 	vldr	s3, [sp, #8]
 800b3b8:	ee35 5a43 	vsub.f32	s10, s10, s6
 800b3bc:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800b3c0:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800b3c4:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800b3c8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b3cc:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800b3d0:	ee76 5a49 	vsub.f32	s11, s12, s18
 800b3d4:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800b3d8:	ee39 6a06 	vadd.f32	s12, s18, s12
 800b3dc:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800b3e0:	ee21 4a84 	vmul.f32	s8, s3, s8
 800b3e4:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800b3e8:	ee22 7a07 	vmul.f32	s14, s4, s14
 800b3ec:	ee22 2a08 	vmul.f32	s4, s4, s16
 800b3f0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800b3f4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800b3f8:	ee31 1a09 	vadd.f32	s2, s2, s18
 800b3fc:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800b400:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800b404:	ee74 0a60 	vsub.f32	s1, s8, s1
 800b408:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b40c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800b410:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800b414:	ee72 1a21 	vadd.f32	s3, s4, s3
 800b418:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800b41c:	ee38 2a89 	vadd.f32	s4, s17, s18
 800b420:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800b424:	ee38 8a04 	vadd.f32	s16, s16, s8
 800b428:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800b42c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800b430:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800b434:	eddd 5a03 	vldr	s11, [sp, #12]
 800b438:	edc6 fa00 	vstr	s31, [r6]
 800b43c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800b440:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800b444:	ee30 0a45 	vsub.f32	s0, s0, s10
 800b448:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800b44c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800b450:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800b454:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800b458:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800b45c:	ee25 6a86 	vmul.f32	s12, s11, s12
 800b460:	ee74 4a89 	vadd.f32	s9, s9, s18
 800b464:	ee34 3a43 	vsub.f32	s6, s8, s6
 800b468:	ee78 8a85 	vadd.f32	s17, s17, s10
 800b46c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b470:	44c4      	add	ip, r8
 800b472:	45e3      	cmp	fp, ip
 800b474:	edc3 3a00 	vstr	s7, [r3]
 800b478:	edc3 6a01 	vstr	s13, [r3, #4]
 800b47c:	4456      	add	r6, sl
 800b47e:	ed07 1a01 	vstr	s2, [r7, #-4]
 800b482:	edc7 0a00 	vstr	s1, [r7]
 800b486:	4453      	add	r3, sl
 800b488:	ed80 2a00 	vstr	s4, [r0]
 800b48c:	edc0 2a01 	vstr	s5, [r0, #4]
 800b490:	4457      	add	r7, sl
 800b492:	edc2 1a00 	vstr	s3, [r2]
 800b496:	ed82 7a01 	vstr	s14, [r2, #4]
 800b49a:	4450      	add	r0, sl
 800b49c:	ed85 8a00 	vstr	s16, [r5]
 800b4a0:	ed85 0a01 	vstr	s0, [r5, #4]
 800b4a4:	4452      	add	r2, sl
 800b4a6:	edc1 4a00 	vstr	s9, [r1]
 800b4aa:	4455      	add	r5, sl
 800b4ac:	ed81 3a01 	vstr	s6, [r1, #4]
 800b4b0:	edc4 8a00 	vstr	s17, [r4]
 800b4b4:	ed84 6a01 	vstr	s12, [r4, #4]
 800b4b8:	4451      	add	r1, sl
 800b4ba:	4454      	add	r4, sl
 800b4bc:	f63f aeea 	bhi.w	800b294 <arm_radix8_butterfly_f32+0x2fc>
 800b4c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4c2:	3308      	adds	r3, #8
 800b4c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4c8:	3308      	adds	r3, #8
 800b4ca:	930a      	str	r3, [sp, #40]	; 0x28
 800b4cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ce:	3308      	adds	r3, #8
 800b4d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b4d2:	9b08      	ldr	r3, [sp, #32]
 800b4d4:	3308      	adds	r3, #8
 800b4d6:	9308      	str	r3, [sp, #32]
 800b4d8:	9b07      	ldr	r3, [sp, #28]
 800b4da:	3308      	adds	r3, #8
 800b4dc:	9307      	str	r3, [sp, #28]
 800b4de:	9b06      	ldr	r3, [sp, #24]
 800b4e0:	3308      	adds	r3, #8
 800b4e2:	9306      	str	r3, [sp, #24]
 800b4e4:	9b05      	ldr	r3, [sp, #20]
 800b4e6:	3308      	adds	r3, #8
 800b4e8:	9305      	str	r3, [sp, #20]
 800b4ea:	9b04      	ldr	r3, [sp, #16]
 800b4ec:	3308      	adds	r3, #8
 800b4ee:	9304      	str	r3, [sp, #16]
 800b4f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4f2:	f109 0901 	add.w	r9, r9, #1
 800b4f6:	454b      	cmp	r3, r9
 800b4f8:	f47f ae7d 	bne.w	800b1f6 <arm_radix8_butterfly_f32+0x25e>
 800b4fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4fe:	00db      	lsls	r3, r3, #3
 800b500:	b29b      	uxth	r3, r3
 800b502:	46d9      	mov	r9, fp
 800b504:	9310      	str	r3, [sp, #64]	; 0x40
 800b506:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800b50a:	e554      	b.n	800afb6 <arm_radix8_butterfly_f32+0x1e>
 800b50c:	b015      	add	sp, #84	; 0x54
 800b50e:	ecbd 8b10 	vpop	{d8-d15}
 800b512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b516:	bf00      	nop

0800b518 <memset>:
 800b518:	4402      	add	r2, r0
 800b51a:	4603      	mov	r3, r0
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d100      	bne.n	800b522 <memset+0xa>
 800b520:	4770      	bx	lr
 800b522:	f803 1b01 	strb.w	r1, [r3], #1
 800b526:	e7f9      	b.n	800b51c <memset+0x4>

0800b528 <__errno>:
 800b528:	4b01      	ldr	r3, [pc, #4]	; (800b530 <__errno+0x8>)
 800b52a:	6818      	ldr	r0, [r3, #0]
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	20000058 	.word	0x20000058

0800b534 <__libc_init_array>:
 800b534:	b570      	push	{r4, r5, r6, lr}
 800b536:	4d0d      	ldr	r5, [pc, #52]	; (800b56c <__libc_init_array+0x38>)
 800b538:	4c0d      	ldr	r4, [pc, #52]	; (800b570 <__libc_init_array+0x3c>)
 800b53a:	1b64      	subs	r4, r4, r5
 800b53c:	10a4      	asrs	r4, r4, #2
 800b53e:	2600      	movs	r6, #0
 800b540:	42a6      	cmp	r6, r4
 800b542:	d109      	bne.n	800b558 <__libc_init_array+0x24>
 800b544:	4d0b      	ldr	r5, [pc, #44]	; (800b574 <__libc_init_array+0x40>)
 800b546:	4c0c      	ldr	r4, [pc, #48]	; (800b578 <__libc_init_array+0x44>)
 800b548:	f000 fdf2 	bl	800c130 <_init>
 800b54c:	1b64      	subs	r4, r4, r5
 800b54e:	10a4      	asrs	r4, r4, #2
 800b550:	2600      	movs	r6, #0
 800b552:	42a6      	cmp	r6, r4
 800b554:	d105      	bne.n	800b562 <__libc_init_array+0x2e>
 800b556:	bd70      	pop	{r4, r5, r6, pc}
 800b558:	f855 3b04 	ldr.w	r3, [r5], #4
 800b55c:	4798      	blx	r3
 800b55e:	3601      	adds	r6, #1
 800b560:	e7ee      	b.n	800b540 <__libc_init_array+0xc>
 800b562:	f855 3b04 	ldr.w	r3, [r5], #4
 800b566:	4798      	blx	r3
 800b568:	3601      	adds	r6, #1
 800b56a:	e7f2      	b.n	800b552 <__libc_init_array+0x1e>
 800b56c:	0801f5cc 	.word	0x0801f5cc
 800b570:	0801f5cc 	.word	0x0801f5cc
 800b574:	0801f5cc 	.word	0x0801f5cc
 800b578:	0801f5d0 	.word	0x0801f5d0

0800b57c <sqrtf>:
 800b57c:	b508      	push	{r3, lr}
 800b57e:	ed2d 8b02 	vpush	{d8}
 800b582:	eeb0 8a40 	vmov.f32	s16, s0
 800b586:	f000 f85b 	bl	800b640 <__ieee754_sqrtf>
 800b58a:	eeb4 8a48 	vcmp.f32	s16, s16
 800b58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b592:	d60c      	bvs.n	800b5ae <sqrtf+0x32>
 800b594:	eddf 8a07 	vldr	s17, [pc, #28]	; 800b5b4 <sqrtf+0x38>
 800b598:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b59c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a0:	d505      	bpl.n	800b5ae <sqrtf+0x32>
 800b5a2:	f7ff ffc1 	bl	800b528 <__errno>
 800b5a6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b5aa:	2321      	movs	r3, #33	; 0x21
 800b5ac:	6003      	str	r3, [r0, #0]
 800b5ae:	ecbd 8b02 	vpop	{d8}
 800b5b2:	bd08      	pop	{r3, pc}
 800b5b4:	00000000 	.word	0x00000000

0800b5b8 <cosf>:
 800b5b8:	ee10 3a10 	vmov	r3, s0
 800b5bc:	b507      	push	{r0, r1, r2, lr}
 800b5be:	4a1e      	ldr	r2, [pc, #120]	; (800b638 <cosf+0x80>)
 800b5c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	dc06      	bgt.n	800b5d6 <cosf+0x1e>
 800b5c8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800b63c <cosf+0x84>
 800b5cc:	b003      	add	sp, #12
 800b5ce:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5d2:	f000 b8b9 	b.w	800b748 <__kernel_cosf>
 800b5d6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b5da:	db04      	blt.n	800b5e6 <cosf+0x2e>
 800b5dc:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b5e0:	b003      	add	sp, #12
 800b5e2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b5e6:	4668      	mov	r0, sp
 800b5e8:	f000 f954 	bl	800b894 <__ieee754_rem_pio2f>
 800b5ec:	f000 0003 	and.w	r0, r0, #3
 800b5f0:	2801      	cmp	r0, #1
 800b5f2:	d009      	beq.n	800b608 <cosf+0x50>
 800b5f4:	2802      	cmp	r0, #2
 800b5f6:	d010      	beq.n	800b61a <cosf+0x62>
 800b5f8:	b9b0      	cbnz	r0, 800b628 <cosf+0x70>
 800b5fa:	eddd 0a01 	vldr	s1, [sp, #4]
 800b5fe:	ed9d 0a00 	vldr	s0, [sp]
 800b602:	f000 f8a1 	bl	800b748 <__kernel_cosf>
 800b606:	e7eb      	b.n	800b5e0 <cosf+0x28>
 800b608:	eddd 0a01 	vldr	s1, [sp, #4]
 800b60c:	ed9d 0a00 	vldr	s0, [sp]
 800b610:	f000 f8f8 	bl	800b804 <__kernel_sinf>
 800b614:	eeb1 0a40 	vneg.f32	s0, s0
 800b618:	e7e2      	b.n	800b5e0 <cosf+0x28>
 800b61a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b61e:	ed9d 0a00 	vldr	s0, [sp]
 800b622:	f000 f891 	bl	800b748 <__kernel_cosf>
 800b626:	e7f5      	b.n	800b614 <cosf+0x5c>
 800b628:	eddd 0a01 	vldr	s1, [sp, #4]
 800b62c:	ed9d 0a00 	vldr	s0, [sp]
 800b630:	2001      	movs	r0, #1
 800b632:	f000 f8e7 	bl	800b804 <__kernel_sinf>
 800b636:	e7d3      	b.n	800b5e0 <cosf+0x28>
 800b638:	3f490fd8 	.word	0x3f490fd8
 800b63c:	00000000 	.word	0x00000000

0800b640 <__ieee754_sqrtf>:
 800b640:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b644:	4770      	bx	lr
	...

0800b648 <floor>:
 800b648:	ec51 0b10 	vmov	r0, r1, d0
 800b64c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b654:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800b658:	2e13      	cmp	r6, #19
 800b65a:	ee10 5a10 	vmov	r5, s0
 800b65e:	ee10 8a10 	vmov	r8, s0
 800b662:	460c      	mov	r4, r1
 800b664:	dc31      	bgt.n	800b6ca <floor+0x82>
 800b666:	2e00      	cmp	r6, #0
 800b668:	da14      	bge.n	800b694 <floor+0x4c>
 800b66a:	a333      	add	r3, pc, #204	; (adr r3, 800b738 <floor+0xf0>)
 800b66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b670:	f7f4 fdcc 	bl	800020c <__adddf3>
 800b674:	2200      	movs	r2, #0
 800b676:	2300      	movs	r3, #0
 800b678:	f7f5 fa0e 	bl	8000a98 <__aeabi_dcmpgt>
 800b67c:	b138      	cbz	r0, 800b68e <floor+0x46>
 800b67e:	2c00      	cmp	r4, #0
 800b680:	da53      	bge.n	800b72a <floor+0xe2>
 800b682:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800b686:	4325      	orrs	r5, r4
 800b688:	d052      	beq.n	800b730 <floor+0xe8>
 800b68a:	4c2d      	ldr	r4, [pc, #180]	; (800b740 <floor+0xf8>)
 800b68c:	2500      	movs	r5, #0
 800b68e:	4621      	mov	r1, r4
 800b690:	4628      	mov	r0, r5
 800b692:	e024      	b.n	800b6de <floor+0x96>
 800b694:	4f2b      	ldr	r7, [pc, #172]	; (800b744 <floor+0xfc>)
 800b696:	4137      	asrs	r7, r6
 800b698:	ea01 0307 	and.w	r3, r1, r7
 800b69c:	4303      	orrs	r3, r0
 800b69e:	d01e      	beq.n	800b6de <floor+0x96>
 800b6a0:	a325      	add	r3, pc, #148	; (adr r3, 800b738 <floor+0xf0>)
 800b6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a6:	f7f4 fdb1 	bl	800020c <__adddf3>
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	f7f5 f9f3 	bl	8000a98 <__aeabi_dcmpgt>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d0eb      	beq.n	800b68e <floor+0x46>
 800b6b6:	2c00      	cmp	r4, #0
 800b6b8:	bfbe      	ittt	lt
 800b6ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b6be:	4133      	asrlt	r3, r6
 800b6c0:	18e4      	addlt	r4, r4, r3
 800b6c2:	ea24 0407 	bic.w	r4, r4, r7
 800b6c6:	2500      	movs	r5, #0
 800b6c8:	e7e1      	b.n	800b68e <floor+0x46>
 800b6ca:	2e33      	cmp	r6, #51	; 0x33
 800b6cc:	dd0b      	ble.n	800b6e6 <floor+0x9e>
 800b6ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b6d2:	d104      	bne.n	800b6de <floor+0x96>
 800b6d4:	ee10 2a10 	vmov	r2, s0
 800b6d8:	460b      	mov	r3, r1
 800b6da:	f7f4 fd97 	bl	800020c <__adddf3>
 800b6de:	ec41 0b10 	vmov	d0, r0, r1
 800b6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800b6ea:	f04f 37ff 	mov.w	r7, #4294967295
 800b6ee:	40df      	lsrs	r7, r3
 800b6f0:	4238      	tst	r0, r7
 800b6f2:	d0f4      	beq.n	800b6de <floor+0x96>
 800b6f4:	a310      	add	r3, pc, #64	; (adr r3, 800b738 <floor+0xf0>)
 800b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fa:	f7f4 fd87 	bl	800020c <__adddf3>
 800b6fe:	2200      	movs	r2, #0
 800b700:	2300      	movs	r3, #0
 800b702:	f7f5 f9c9 	bl	8000a98 <__aeabi_dcmpgt>
 800b706:	2800      	cmp	r0, #0
 800b708:	d0c1      	beq.n	800b68e <floor+0x46>
 800b70a:	2c00      	cmp	r4, #0
 800b70c:	da0a      	bge.n	800b724 <floor+0xdc>
 800b70e:	2e14      	cmp	r6, #20
 800b710:	d101      	bne.n	800b716 <floor+0xce>
 800b712:	3401      	adds	r4, #1
 800b714:	e006      	b.n	800b724 <floor+0xdc>
 800b716:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b71a:	2301      	movs	r3, #1
 800b71c:	40b3      	lsls	r3, r6
 800b71e:	441d      	add	r5, r3
 800b720:	45a8      	cmp	r8, r5
 800b722:	d8f6      	bhi.n	800b712 <floor+0xca>
 800b724:	ea25 0507 	bic.w	r5, r5, r7
 800b728:	e7b1      	b.n	800b68e <floor+0x46>
 800b72a:	2500      	movs	r5, #0
 800b72c:	462c      	mov	r4, r5
 800b72e:	e7ae      	b.n	800b68e <floor+0x46>
 800b730:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b734:	e7ab      	b.n	800b68e <floor+0x46>
 800b736:	bf00      	nop
 800b738:	8800759c 	.word	0x8800759c
 800b73c:	7e37e43c 	.word	0x7e37e43c
 800b740:	bff00000 	.word	0xbff00000
 800b744:	000fffff 	.word	0x000fffff

0800b748 <__kernel_cosf>:
 800b748:	ee10 3a10 	vmov	r3, s0
 800b74c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b750:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b754:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b758:	da05      	bge.n	800b766 <__kernel_cosf+0x1e>
 800b75a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b75e:	ee17 2a90 	vmov	r2, s15
 800b762:	2a00      	cmp	r2, #0
 800b764:	d03b      	beq.n	800b7de <__kernel_cosf+0x96>
 800b766:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b76a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b7e4 <__kernel_cosf+0x9c>
 800b76e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800b7e8 <__kernel_cosf+0xa0>
 800b772:	4a1e      	ldr	r2, [pc, #120]	; (800b7ec <__kernel_cosf+0xa4>)
 800b774:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b778:	4293      	cmp	r3, r2
 800b77a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800b7f0 <__kernel_cosf+0xa8>
 800b77e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b782:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800b7f4 <__kernel_cosf+0xac>
 800b786:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b78a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800b7f8 <__kernel_cosf+0xb0>
 800b78e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b792:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800b7fc <__kernel_cosf+0xb4>
 800b796:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b79a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800b79e:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b7a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b7a6:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b7aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ae:	dc04      	bgt.n	800b7ba <__kernel_cosf+0x72>
 800b7b0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b7b4:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800b7b8:	4770      	bx	lr
 800b7ba:	4a11      	ldr	r2, [pc, #68]	; (800b800 <__kernel_cosf+0xb8>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	bfda      	itte	le
 800b7c0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800b7c4:	ee07 3a10 	vmovle	s14, r3
 800b7c8:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800b7cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b7d0:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800b7d4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b7d8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b7dc:	4770      	bx	lr
 800b7de:	eeb0 0a66 	vmov.f32	s0, s13
 800b7e2:	4770      	bx	lr
 800b7e4:	ad47d74e 	.word	0xad47d74e
 800b7e8:	310f74f6 	.word	0x310f74f6
 800b7ec:	3e999999 	.word	0x3e999999
 800b7f0:	b493f27c 	.word	0xb493f27c
 800b7f4:	37d00d01 	.word	0x37d00d01
 800b7f8:	bab60b61 	.word	0xbab60b61
 800b7fc:	3d2aaaab 	.word	0x3d2aaaab
 800b800:	3f480000 	.word	0x3f480000

0800b804 <__kernel_sinf>:
 800b804:	ee10 3a10 	vmov	r3, s0
 800b808:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b80c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b810:	da04      	bge.n	800b81c <__kernel_sinf+0x18>
 800b812:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b816:	ee17 3a90 	vmov	r3, s15
 800b81a:	b35b      	cbz	r3, 800b874 <__kernel_sinf+0x70>
 800b81c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b820:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b878 <__kernel_sinf+0x74>
 800b824:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b87c <__kernel_sinf+0x78>
 800b828:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b82c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b880 <__kernel_sinf+0x7c>
 800b830:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b834:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800b884 <__kernel_sinf+0x80>
 800b838:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b83c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b888 <__kernel_sinf+0x84>
 800b840:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b844:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b848:	b930      	cbnz	r0, 800b858 <__kernel_sinf+0x54>
 800b84a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b88c <__kernel_sinf+0x88>
 800b84e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b852:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b856:	4770      	bx	lr
 800b858:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b85c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b860:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b864:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b868:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b890 <__kernel_sinf+0x8c>
 800b86c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b870:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	2f2ec9d3 	.word	0x2f2ec9d3
 800b87c:	b2d72f34 	.word	0xb2d72f34
 800b880:	3638ef1b 	.word	0x3638ef1b
 800b884:	b9500d01 	.word	0xb9500d01
 800b888:	3c088889 	.word	0x3c088889
 800b88c:	be2aaaab 	.word	0xbe2aaaab
 800b890:	3e2aaaab 	.word	0x3e2aaaab

0800b894 <__ieee754_rem_pio2f>:
 800b894:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b896:	ee10 6a10 	vmov	r6, s0
 800b89a:	4b86      	ldr	r3, [pc, #536]	; (800bab4 <__ieee754_rem_pio2f+0x220>)
 800b89c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b8a0:	429d      	cmp	r5, r3
 800b8a2:	b087      	sub	sp, #28
 800b8a4:	4604      	mov	r4, r0
 800b8a6:	dc05      	bgt.n	800b8b4 <__ieee754_rem_pio2f+0x20>
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	ed80 0a00 	vstr	s0, [r0]
 800b8ae:	6043      	str	r3, [r0, #4]
 800b8b0:	2000      	movs	r0, #0
 800b8b2:	e020      	b.n	800b8f6 <__ieee754_rem_pio2f+0x62>
 800b8b4:	4b80      	ldr	r3, [pc, #512]	; (800bab8 <__ieee754_rem_pio2f+0x224>)
 800b8b6:	429d      	cmp	r5, r3
 800b8b8:	dc38      	bgt.n	800b92c <__ieee754_rem_pio2f+0x98>
 800b8ba:	2e00      	cmp	r6, #0
 800b8bc:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800babc <__ieee754_rem_pio2f+0x228>
 800b8c0:	4b7f      	ldr	r3, [pc, #508]	; (800bac0 <__ieee754_rem_pio2f+0x22c>)
 800b8c2:	f025 050f 	bic.w	r5, r5, #15
 800b8c6:	dd18      	ble.n	800b8fa <__ieee754_rem_pio2f+0x66>
 800b8c8:	429d      	cmp	r5, r3
 800b8ca:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b8ce:	bf09      	itett	eq
 800b8d0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800bac4 <__ieee754_rem_pio2f+0x230>
 800b8d4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800bac8 <__ieee754_rem_pio2f+0x234>
 800b8d8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b8dc:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800bacc <__ieee754_rem_pio2f+0x238>
 800b8e0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b8e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b8e8:	edc0 6a00 	vstr	s13, [r0]
 800b8ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b8f0:	edc0 7a01 	vstr	s15, [r0, #4]
 800b8f4:	2001      	movs	r0, #1
 800b8f6:	b007      	add	sp, #28
 800b8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8fa:	429d      	cmp	r5, r3
 800b8fc:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b900:	bf09      	itett	eq
 800b902:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800bac4 <__ieee754_rem_pio2f+0x230>
 800b906:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800bac8 <__ieee754_rem_pio2f+0x234>
 800b90a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b90e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800bacc <__ieee754_rem_pio2f+0x238>
 800b912:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b916:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b91a:	edc0 6a00 	vstr	s13, [r0]
 800b91e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b922:	edc0 7a01 	vstr	s15, [r0, #4]
 800b926:	f04f 30ff 	mov.w	r0, #4294967295
 800b92a:	e7e4      	b.n	800b8f6 <__ieee754_rem_pio2f+0x62>
 800b92c:	4b68      	ldr	r3, [pc, #416]	; (800bad0 <__ieee754_rem_pio2f+0x23c>)
 800b92e:	429d      	cmp	r5, r3
 800b930:	dc71      	bgt.n	800ba16 <__ieee754_rem_pio2f+0x182>
 800b932:	f000 f8db 	bl	800baec <fabsf>
 800b936:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800bad4 <__ieee754_rem_pio2f+0x240>
 800b93a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b93e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b946:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b94a:	ee17 0a90 	vmov	r0, s15
 800b94e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800babc <__ieee754_rem_pio2f+0x228>
 800b952:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b956:	281f      	cmp	r0, #31
 800b958:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800bac8 <__ieee754_rem_pio2f+0x234>
 800b95c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b960:	eeb1 6a47 	vneg.f32	s12, s14
 800b964:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b968:	ee16 2a90 	vmov	r2, s13
 800b96c:	dc1c      	bgt.n	800b9a8 <__ieee754_rem_pio2f+0x114>
 800b96e:	495a      	ldr	r1, [pc, #360]	; (800bad8 <__ieee754_rem_pio2f+0x244>)
 800b970:	1e47      	subs	r7, r0, #1
 800b972:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b976:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b97a:	428b      	cmp	r3, r1
 800b97c:	d014      	beq.n	800b9a8 <__ieee754_rem_pio2f+0x114>
 800b97e:	6022      	str	r2, [r4, #0]
 800b980:	ed94 7a00 	vldr	s14, [r4]
 800b984:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b988:	2e00      	cmp	r6, #0
 800b98a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b98e:	ed84 0a01 	vstr	s0, [r4, #4]
 800b992:	dab0      	bge.n	800b8f6 <__ieee754_rem_pio2f+0x62>
 800b994:	eeb1 7a47 	vneg.f32	s14, s14
 800b998:	eeb1 0a40 	vneg.f32	s0, s0
 800b99c:	ed84 7a00 	vstr	s14, [r4]
 800b9a0:	ed84 0a01 	vstr	s0, [r4, #4]
 800b9a4:	4240      	negs	r0, r0
 800b9a6:	e7a6      	b.n	800b8f6 <__ieee754_rem_pio2f+0x62>
 800b9a8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b9ac:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800b9b0:	2908      	cmp	r1, #8
 800b9b2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b9b6:	dde2      	ble.n	800b97e <__ieee754_rem_pio2f+0xea>
 800b9b8:	eddf 5a42 	vldr	s11, [pc, #264]	; 800bac4 <__ieee754_rem_pio2f+0x230>
 800b9bc:	eef0 6a40 	vmov.f32	s13, s0
 800b9c0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b9c4:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b9c8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b9cc:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800bacc <__ieee754_rem_pio2f+0x238>
 800b9d0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b9d4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b9d8:	ee15 2a90 	vmov	r2, s11
 800b9dc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b9e0:	1a5b      	subs	r3, r3, r1
 800b9e2:	2b19      	cmp	r3, #25
 800b9e4:	dc04      	bgt.n	800b9f0 <__ieee754_rem_pio2f+0x15c>
 800b9e6:	edc4 5a00 	vstr	s11, [r4]
 800b9ea:	eeb0 0a66 	vmov.f32	s0, s13
 800b9ee:	e7c7      	b.n	800b980 <__ieee754_rem_pio2f+0xec>
 800b9f0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800badc <__ieee754_rem_pio2f+0x248>
 800b9f4:	eeb0 0a66 	vmov.f32	s0, s13
 800b9f8:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b9fc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ba00:	eddf 6a37 	vldr	s13, [pc, #220]	; 800bae0 <__ieee754_rem_pio2f+0x24c>
 800ba04:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ba08:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800ba0c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ba10:	ed84 7a00 	vstr	s14, [r4]
 800ba14:	e7b4      	b.n	800b980 <__ieee754_rem_pio2f+0xec>
 800ba16:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ba1a:	db06      	blt.n	800ba2a <__ieee754_rem_pio2f+0x196>
 800ba1c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ba20:	edc0 7a01 	vstr	s15, [r0, #4]
 800ba24:	edc0 7a00 	vstr	s15, [r0]
 800ba28:	e742      	b.n	800b8b0 <__ieee754_rem_pio2f+0x1c>
 800ba2a:	15ea      	asrs	r2, r5, #23
 800ba2c:	3a86      	subs	r2, #134	; 0x86
 800ba2e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800ba32:	ee07 3a90 	vmov	s15, r3
 800ba36:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ba3a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800bae4 <__ieee754_rem_pio2f+0x250>
 800ba3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ba42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba46:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ba4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ba4e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ba52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ba56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba5a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ba5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ba62:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ba66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6a:	edcd 7a05 	vstr	s15, [sp, #20]
 800ba6e:	d11e      	bne.n	800baae <__ieee754_rem_pio2f+0x21a>
 800ba70:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ba74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba78:	bf14      	ite	ne
 800ba7a:	2302      	movne	r3, #2
 800ba7c:	2301      	moveq	r3, #1
 800ba7e:	491a      	ldr	r1, [pc, #104]	; (800bae8 <__ieee754_rem_pio2f+0x254>)
 800ba80:	9101      	str	r1, [sp, #4]
 800ba82:	2102      	movs	r1, #2
 800ba84:	9100      	str	r1, [sp, #0]
 800ba86:	a803      	add	r0, sp, #12
 800ba88:	4621      	mov	r1, r4
 800ba8a:	f000 f837 	bl	800bafc <__kernel_rem_pio2f>
 800ba8e:	2e00      	cmp	r6, #0
 800ba90:	f6bf af31 	bge.w	800b8f6 <__ieee754_rem_pio2f+0x62>
 800ba94:	edd4 7a00 	vldr	s15, [r4]
 800ba98:	eef1 7a67 	vneg.f32	s15, s15
 800ba9c:	edc4 7a00 	vstr	s15, [r4]
 800baa0:	edd4 7a01 	vldr	s15, [r4, #4]
 800baa4:	eef1 7a67 	vneg.f32	s15, s15
 800baa8:	edc4 7a01 	vstr	s15, [r4, #4]
 800baac:	e77a      	b.n	800b9a4 <__ieee754_rem_pio2f+0x110>
 800baae:	2303      	movs	r3, #3
 800bab0:	e7e5      	b.n	800ba7e <__ieee754_rem_pio2f+0x1ea>
 800bab2:	bf00      	nop
 800bab4:	3f490fd8 	.word	0x3f490fd8
 800bab8:	4016cbe3 	.word	0x4016cbe3
 800babc:	3fc90f80 	.word	0x3fc90f80
 800bac0:	3fc90fd0 	.word	0x3fc90fd0
 800bac4:	37354400 	.word	0x37354400
 800bac8:	37354443 	.word	0x37354443
 800bacc:	2e85a308 	.word	0x2e85a308
 800bad0:	43490f80 	.word	0x43490f80
 800bad4:	3f22f984 	.word	0x3f22f984
 800bad8:	0801f1f4 	.word	0x0801f1f4
 800badc:	2e85a300 	.word	0x2e85a300
 800bae0:	248d3132 	.word	0x248d3132
 800bae4:	43800000 	.word	0x43800000
 800bae8:	0801f274 	.word	0x0801f274

0800baec <fabsf>:
 800baec:	ee10 3a10 	vmov	r3, s0
 800baf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800baf4:	ee00 3a10 	vmov	s0, r3
 800baf8:	4770      	bx	lr
	...

0800bafc <__kernel_rem_pio2f>:
 800bafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb00:	ed2d 8b04 	vpush	{d8-d9}
 800bb04:	b0d9      	sub	sp, #356	; 0x164
 800bb06:	4688      	mov	r8, r1
 800bb08:	9002      	str	r0, [sp, #8]
 800bb0a:	49b8      	ldr	r1, [pc, #736]	; (800bdec <__kernel_rem_pio2f+0x2f0>)
 800bb0c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800bb0e:	9301      	str	r3, [sp, #4]
 800bb10:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800bb14:	9901      	ldr	r1, [sp, #4]
 800bb16:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800bb18:	f101 3bff 	add.w	fp, r1, #4294967295
 800bb1c:	1d11      	adds	r1, r2, #4
 800bb1e:	db25      	blt.n	800bb6c <__kernel_rem_pio2f+0x70>
 800bb20:	1ed0      	subs	r0, r2, #3
 800bb22:	bf48      	it	mi
 800bb24:	1d10      	addmi	r0, r2, #4
 800bb26:	10c0      	asrs	r0, r0, #3
 800bb28:	1c45      	adds	r5, r0, #1
 800bb2a:	00e9      	lsls	r1, r5, #3
 800bb2c:	eba0 070b 	sub.w	r7, r0, fp
 800bb30:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800bdfc <__kernel_rem_pio2f+0x300>
 800bb34:	9103      	str	r1, [sp, #12]
 800bb36:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800bb3a:	eb0a 0c0b 	add.w	ip, sl, fp
 800bb3e:	ae1c      	add	r6, sp, #112	; 0x70
 800bb40:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800bb44:	2400      	movs	r4, #0
 800bb46:	4564      	cmp	r4, ip
 800bb48:	dd12      	ble.n	800bb70 <__kernel_rem_pio2f+0x74>
 800bb4a:	9901      	ldr	r1, [sp, #4]
 800bb4c:	ac1c      	add	r4, sp, #112	; 0x70
 800bb4e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800bb52:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800bb56:	f04f 0c00 	mov.w	ip, #0
 800bb5a:	45d4      	cmp	ip, sl
 800bb5c:	dc27      	bgt.n	800bbae <__kernel_rem_pio2f+0xb2>
 800bb5e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800bb62:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800bdfc <__kernel_rem_pio2f+0x300>
 800bb66:	4627      	mov	r7, r4
 800bb68:	2600      	movs	r6, #0
 800bb6a:	e016      	b.n	800bb9a <__kernel_rem_pio2f+0x9e>
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	e7db      	b.n	800bb28 <__kernel_rem_pio2f+0x2c>
 800bb70:	42e7      	cmn	r7, r4
 800bb72:	bf5d      	ittte	pl
 800bb74:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800bb78:	ee07 1a90 	vmovpl	s15, r1
 800bb7c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bb80:	eef0 7a47 	vmovmi.f32	s15, s14
 800bb84:	ece6 7a01 	vstmia	r6!, {s15}
 800bb88:	3401      	adds	r4, #1
 800bb8a:	e7dc      	b.n	800bb46 <__kernel_rem_pio2f+0x4a>
 800bb8c:	ecfe 6a01 	vldmia	lr!, {s13}
 800bb90:	ed97 7a00 	vldr	s14, [r7]
 800bb94:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bb98:	3601      	adds	r6, #1
 800bb9a:	455e      	cmp	r6, fp
 800bb9c:	f1a7 0704 	sub.w	r7, r7, #4
 800bba0:	ddf4      	ble.n	800bb8c <__kernel_rem_pio2f+0x90>
 800bba2:	ece9 7a01 	vstmia	r9!, {s15}
 800bba6:	f10c 0c01 	add.w	ip, ip, #1
 800bbaa:	3404      	adds	r4, #4
 800bbac:	e7d5      	b.n	800bb5a <__kernel_rem_pio2f+0x5e>
 800bbae:	a908      	add	r1, sp, #32
 800bbb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbb4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800bbb8:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800bdf8 <__kernel_rem_pio2f+0x2fc>
 800bbbc:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800bdf4 <__kernel_rem_pio2f+0x2f8>
 800bbc0:	9105      	str	r1, [sp, #20]
 800bbc2:	9304      	str	r3, [sp, #16]
 800bbc4:	4656      	mov	r6, sl
 800bbc6:	00b3      	lsls	r3, r6, #2
 800bbc8:	9306      	str	r3, [sp, #24]
 800bbca:	ab58      	add	r3, sp, #352	; 0x160
 800bbcc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800bbd0:	ac08      	add	r4, sp, #32
 800bbd2:	ab44      	add	r3, sp, #272	; 0x110
 800bbd4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800bbd8:	46a4      	mov	ip, r4
 800bbda:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800bbde:	4637      	mov	r7, r6
 800bbe0:	2f00      	cmp	r7, #0
 800bbe2:	f1a0 0004 	sub.w	r0, r0, #4
 800bbe6:	dc4a      	bgt.n	800bc7e <__kernel_rem_pio2f+0x182>
 800bbe8:	4628      	mov	r0, r5
 800bbea:	9207      	str	r2, [sp, #28]
 800bbec:	f000 f9f8 	bl	800bfe0 <scalbnf>
 800bbf0:	eeb0 8a40 	vmov.f32	s16, s0
 800bbf4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800bbf8:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bbfc:	f000 fa56 	bl	800c0ac <floorf>
 800bc00:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800bc04:	eea0 8a67 	vfms.f32	s16, s0, s15
 800bc08:	2d00      	cmp	r5, #0
 800bc0a:	9a07      	ldr	r2, [sp, #28]
 800bc0c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800bc10:	ee17 9a90 	vmov	r9, s15
 800bc14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc18:	ee38 8a67 	vsub.f32	s16, s16, s15
 800bc1c:	dd41      	ble.n	800bca2 <__kernel_rem_pio2f+0x1a6>
 800bc1e:	f106 3cff 	add.w	ip, r6, #4294967295
 800bc22:	ab08      	add	r3, sp, #32
 800bc24:	f1c5 0e08 	rsb	lr, r5, #8
 800bc28:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800bc2c:	fa47 f00e 	asr.w	r0, r7, lr
 800bc30:	4481      	add	r9, r0
 800bc32:	fa00 f00e 	lsl.w	r0, r0, lr
 800bc36:	1a3f      	subs	r7, r7, r0
 800bc38:	f1c5 0007 	rsb	r0, r5, #7
 800bc3c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800bc40:	4107      	asrs	r7, r0
 800bc42:	2f00      	cmp	r7, #0
 800bc44:	dd3c      	ble.n	800bcc0 <__kernel_rem_pio2f+0x1c4>
 800bc46:	f04f 0e00 	mov.w	lr, #0
 800bc4a:	f109 0901 	add.w	r9, r9, #1
 800bc4e:	4671      	mov	r1, lr
 800bc50:	4576      	cmp	r6, lr
 800bc52:	dc67      	bgt.n	800bd24 <__kernel_rem_pio2f+0x228>
 800bc54:	2d00      	cmp	r5, #0
 800bc56:	dd03      	ble.n	800bc60 <__kernel_rem_pio2f+0x164>
 800bc58:	2d01      	cmp	r5, #1
 800bc5a:	d074      	beq.n	800bd46 <__kernel_rem_pio2f+0x24a>
 800bc5c:	2d02      	cmp	r5, #2
 800bc5e:	d07b      	beq.n	800bd58 <__kernel_rem_pio2f+0x25c>
 800bc60:	2f02      	cmp	r7, #2
 800bc62:	d12d      	bne.n	800bcc0 <__kernel_rem_pio2f+0x1c4>
 800bc64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bc68:	ee30 8a48 	vsub.f32	s16, s0, s16
 800bc6c:	b341      	cbz	r1, 800bcc0 <__kernel_rem_pio2f+0x1c4>
 800bc6e:	4628      	mov	r0, r5
 800bc70:	9207      	str	r2, [sp, #28]
 800bc72:	f000 f9b5 	bl	800bfe0 <scalbnf>
 800bc76:	9a07      	ldr	r2, [sp, #28]
 800bc78:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bc7c:	e020      	b.n	800bcc0 <__kernel_rem_pio2f+0x1c4>
 800bc7e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800bc82:	3f01      	subs	r7, #1
 800bc84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc8c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800bc90:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bc94:	ecac 0a01 	vstmia	ip!, {s0}
 800bc98:	ed90 0a00 	vldr	s0, [r0]
 800bc9c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bca0:	e79e      	b.n	800bbe0 <__kernel_rem_pio2f+0xe4>
 800bca2:	d105      	bne.n	800bcb0 <__kernel_rem_pio2f+0x1b4>
 800bca4:	1e70      	subs	r0, r6, #1
 800bca6:	ab08      	add	r3, sp, #32
 800bca8:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800bcac:	11ff      	asrs	r7, r7, #7
 800bcae:	e7c8      	b.n	800bc42 <__kernel_rem_pio2f+0x146>
 800bcb0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bcb4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bcb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcbc:	da30      	bge.n	800bd20 <__kernel_rem_pio2f+0x224>
 800bcbe:	2700      	movs	r7, #0
 800bcc0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bcc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc8:	f040 809a 	bne.w	800be00 <__kernel_rem_pio2f+0x304>
 800bccc:	1e74      	subs	r4, r6, #1
 800bcce:	46a4      	mov	ip, r4
 800bcd0:	2100      	movs	r1, #0
 800bcd2:	45d4      	cmp	ip, sl
 800bcd4:	da47      	bge.n	800bd66 <__kernel_rem_pio2f+0x26a>
 800bcd6:	2900      	cmp	r1, #0
 800bcd8:	d063      	beq.n	800bda2 <__kernel_rem_pio2f+0x2a6>
 800bcda:	ab08      	add	r3, sp, #32
 800bcdc:	3d08      	subs	r5, #8
 800bcde:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d07f      	beq.n	800bde6 <__kernel_rem_pio2f+0x2ea>
 800bce6:	4628      	mov	r0, r5
 800bce8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bcec:	f000 f978 	bl	800bfe0 <scalbnf>
 800bcf0:	1c63      	adds	r3, r4, #1
 800bcf2:	aa44      	add	r2, sp, #272	; 0x110
 800bcf4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800bdf8 <__kernel_rem_pio2f+0x2fc>
 800bcf8:	0099      	lsls	r1, r3, #2
 800bcfa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bcfe:	4623      	mov	r3, r4
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f280 80ad 	bge.w	800be60 <__kernel_rem_pio2f+0x364>
 800bd06:	4623      	mov	r3, r4
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f2c0 80cb 	blt.w	800bea4 <__kernel_rem_pio2f+0x3a8>
 800bd0e:	aa44      	add	r2, sp, #272	; 0x110
 800bd10:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800bd14:	4e36      	ldr	r6, [pc, #216]	; (800bdf0 <__kernel_rem_pio2f+0x2f4>)
 800bd16:	eddf 7a39 	vldr	s15, [pc, #228]	; 800bdfc <__kernel_rem_pio2f+0x300>
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	1ae2      	subs	r2, r4, r3
 800bd1e:	e0b6      	b.n	800be8e <__kernel_rem_pio2f+0x392>
 800bd20:	2702      	movs	r7, #2
 800bd22:	e790      	b.n	800bc46 <__kernel_rem_pio2f+0x14a>
 800bd24:	6820      	ldr	r0, [r4, #0]
 800bd26:	b949      	cbnz	r1, 800bd3c <__kernel_rem_pio2f+0x240>
 800bd28:	b118      	cbz	r0, 800bd32 <__kernel_rem_pio2f+0x236>
 800bd2a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800bd2e:	6020      	str	r0, [r4, #0]
 800bd30:	2001      	movs	r0, #1
 800bd32:	f10e 0e01 	add.w	lr, lr, #1
 800bd36:	3404      	adds	r4, #4
 800bd38:	4601      	mov	r1, r0
 800bd3a:	e789      	b.n	800bc50 <__kernel_rem_pio2f+0x154>
 800bd3c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800bd40:	6020      	str	r0, [r4, #0]
 800bd42:	4608      	mov	r0, r1
 800bd44:	e7f5      	b.n	800bd32 <__kernel_rem_pio2f+0x236>
 800bd46:	1e74      	subs	r4, r6, #1
 800bd48:	ab08      	add	r3, sp, #32
 800bd4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800bd4e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800bd52:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bd56:	e783      	b.n	800bc60 <__kernel_rem_pio2f+0x164>
 800bd58:	1e74      	subs	r4, r6, #1
 800bd5a:	ab08      	add	r3, sp, #32
 800bd5c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800bd60:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800bd64:	e7f5      	b.n	800bd52 <__kernel_rem_pio2f+0x256>
 800bd66:	ab08      	add	r3, sp, #32
 800bd68:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800bd6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bd70:	4301      	orrs	r1, r0
 800bd72:	e7ae      	b.n	800bcd2 <__kernel_rem_pio2f+0x1d6>
 800bd74:	3001      	adds	r0, #1
 800bd76:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800bd7a:	2f00      	cmp	r7, #0
 800bd7c:	d0fa      	beq.n	800bd74 <__kernel_rem_pio2f+0x278>
 800bd7e:	9b06      	ldr	r3, [sp, #24]
 800bd80:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800bd84:	eb0d 0403 	add.w	r4, sp, r3
 800bd88:	9b01      	ldr	r3, [sp, #4]
 800bd8a:	18f7      	adds	r7, r6, r3
 800bd8c:	ab1c      	add	r3, sp, #112	; 0x70
 800bd8e:	f106 0c01 	add.w	ip, r6, #1
 800bd92:	3c4c      	subs	r4, #76	; 0x4c
 800bd94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd98:	4430      	add	r0, r6
 800bd9a:	4560      	cmp	r0, ip
 800bd9c:	da04      	bge.n	800bda8 <__kernel_rem_pio2f+0x2ac>
 800bd9e:	4606      	mov	r6, r0
 800bda0:	e711      	b.n	800bbc6 <__kernel_rem_pio2f+0xca>
 800bda2:	9c05      	ldr	r4, [sp, #20]
 800bda4:	2001      	movs	r0, #1
 800bda6:	e7e6      	b.n	800bd76 <__kernel_rem_pio2f+0x27a>
 800bda8:	9b04      	ldr	r3, [sp, #16]
 800bdaa:	f8dd e008 	ldr.w	lr, [sp, #8]
 800bdae:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800bdb2:	9306      	str	r3, [sp, #24]
 800bdb4:	ee07 3a90 	vmov	s15, r3
 800bdb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdbc:	2600      	movs	r6, #0
 800bdbe:	ece7 7a01 	vstmia	r7!, {s15}
 800bdc2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800bdfc <__kernel_rem_pio2f+0x300>
 800bdc6:	46b9      	mov	r9, r7
 800bdc8:	455e      	cmp	r6, fp
 800bdca:	dd04      	ble.n	800bdd6 <__kernel_rem_pio2f+0x2da>
 800bdcc:	ece4 7a01 	vstmia	r4!, {s15}
 800bdd0:	f10c 0c01 	add.w	ip, ip, #1
 800bdd4:	e7e1      	b.n	800bd9a <__kernel_rem_pio2f+0x29e>
 800bdd6:	ecfe 6a01 	vldmia	lr!, {s13}
 800bdda:	ed39 7a01 	vldmdb	r9!, {s14}
 800bdde:	3601      	adds	r6, #1
 800bde0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bde4:	e7f0      	b.n	800bdc8 <__kernel_rem_pio2f+0x2cc>
 800bde6:	3c01      	subs	r4, #1
 800bde8:	e777      	b.n	800bcda <__kernel_rem_pio2f+0x1de>
 800bdea:	bf00      	nop
 800bdec:	0801f5b8 	.word	0x0801f5b8
 800bdf0:	0801f58c 	.word	0x0801f58c
 800bdf4:	43800000 	.word	0x43800000
 800bdf8:	3b800000 	.word	0x3b800000
 800bdfc:	00000000 	.word	0x00000000
 800be00:	9b03      	ldr	r3, [sp, #12]
 800be02:	eeb0 0a48 	vmov.f32	s0, s16
 800be06:	1a98      	subs	r0, r3, r2
 800be08:	f000 f8ea 	bl	800bfe0 <scalbnf>
 800be0c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800bdf4 <__kernel_rem_pio2f+0x2f8>
 800be10:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800be14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be18:	db19      	blt.n	800be4e <__kernel_rem_pio2f+0x352>
 800be1a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800bdf8 <__kernel_rem_pio2f+0x2fc>
 800be1e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800be22:	aa08      	add	r2, sp, #32
 800be24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be28:	1c74      	adds	r4, r6, #1
 800be2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be2e:	3508      	adds	r5, #8
 800be30:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800be34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be38:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800be3c:	ee10 3a10 	vmov	r3, s0
 800be40:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800be44:	ee17 3a90 	vmov	r3, s15
 800be48:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800be4c:	e74b      	b.n	800bce6 <__kernel_rem_pio2f+0x1ea>
 800be4e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800be52:	aa08      	add	r2, sp, #32
 800be54:	ee10 3a10 	vmov	r3, s0
 800be58:	4634      	mov	r4, r6
 800be5a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800be5e:	e742      	b.n	800bce6 <__kernel_rem_pio2f+0x1ea>
 800be60:	a808      	add	r0, sp, #32
 800be62:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800be66:	9001      	str	r0, [sp, #4]
 800be68:	ee07 0a90 	vmov	s15, r0
 800be6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be70:	3b01      	subs	r3, #1
 800be72:	ee67 7a80 	vmul.f32	s15, s15, s0
 800be76:	ee20 0a07 	vmul.f32	s0, s0, s14
 800be7a:	ed62 7a01 	vstmdb	r2!, {s15}
 800be7e:	e73f      	b.n	800bd00 <__kernel_rem_pio2f+0x204>
 800be80:	ecf6 6a01 	vldmia	r6!, {s13}
 800be84:	ecb5 7a01 	vldmia	r5!, {s14}
 800be88:	eee6 7a87 	vfma.f32	s15, s13, s14
 800be8c:	3001      	adds	r0, #1
 800be8e:	4550      	cmp	r0, sl
 800be90:	dc01      	bgt.n	800be96 <__kernel_rem_pio2f+0x39a>
 800be92:	4290      	cmp	r0, r2
 800be94:	ddf4      	ble.n	800be80 <__kernel_rem_pio2f+0x384>
 800be96:	a858      	add	r0, sp, #352	; 0x160
 800be98:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800be9c:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800bea0:	3b01      	subs	r3, #1
 800bea2:	e731      	b.n	800bd08 <__kernel_rem_pio2f+0x20c>
 800bea4:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	dc09      	bgt.n	800bebe <__kernel_rem_pio2f+0x3c2>
 800beaa:	2b00      	cmp	r3, #0
 800beac:	dc2b      	bgt.n	800bf06 <__kernel_rem_pio2f+0x40a>
 800beae:	d044      	beq.n	800bf3a <__kernel_rem_pio2f+0x43e>
 800beb0:	f009 0007 	and.w	r0, r9, #7
 800beb4:	b059      	add	sp, #356	; 0x164
 800beb6:	ecbd 8b04 	vpop	{d8-d9}
 800beba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bebe:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800bec0:	2b03      	cmp	r3, #3
 800bec2:	d1f5      	bne.n	800beb0 <__kernel_rem_pio2f+0x3b4>
 800bec4:	aa30      	add	r2, sp, #192	; 0xc0
 800bec6:	1f0b      	subs	r3, r1, #4
 800bec8:	4413      	add	r3, r2
 800beca:	461a      	mov	r2, r3
 800becc:	4620      	mov	r0, r4
 800bece:	2800      	cmp	r0, #0
 800bed0:	f1a2 0204 	sub.w	r2, r2, #4
 800bed4:	dc52      	bgt.n	800bf7c <__kernel_rem_pio2f+0x480>
 800bed6:	4622      	mov	r2, r4
 800bed8:	2a01      	cmp	r2, #1
 800beda:	f1a3 0304 	sub.w	r3, r3, #4
 800bede:	dc5d      	bgt.n	800bf9c <__kernel_rem_pio2f+0x4a0>
 800bee0:	ab30      	add	r3, sp, #192	; 0xc0
 800bee2:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800bdfc <__kernel_rem_pio2f+0x300>
 800bee6:	440b      	add	r3, r1
 800bee8:	2c01      	cmp	r4, #1
 800beea:	dc67      	bgt.n	800bfbc <__kernel_rem_pio2f+0x4c0>
 800beec:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800bef0:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800bef4:	2f00      	cmp	r7, #0
 800bef6:	d167      	bne.n	800bfc8 <__kernel_rem_pio2f+0x4cc>
 800bef8:	edc8 6a00 	vstr	s13, [r8]
 800befc:	ed88 7a01 	vstr	s14, [r8, #4]
 800bf00:	edc8 7a02 	vstr	s15, [r8, #8]
 800bf04:	e7d4      	b.n	800beb0 <__kernel_rem_pio2f+0x3b4>
 800bf06:	ab30      	add	r3, sp, #192	; 0xc0
 800bf08:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800bdfc <__kernel_rem_pio2f+0x300>
 800bf0c:	440b      	add	r3, r1
 800bf0e:	4622      	mov	r2, r4
 800bf10:	2a00      	cmp	r2, #0
 800bf12:	da24      	bge.n	800bf5e <__kernel_rem_pio2f+0x462>
 800bf14:	b34f      	cbz	r7, 800bf6a <__kernel_rem_pio2f+0x46e>
 800bf16:	eef1 7a47 	vneg.f32	s15, s14
 800bf1a:	edc8 7a00 	vstr	s15, [r8]
 800bf1e:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800bf22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf26:	aa31      	add	r2, sp, #196	; 0xc4
 800bf28:	2301      	movs	r3, #1
 800bf2a:	429c      	cmp	r4, r3
 800bf2c:	da20      	bge.n	800bf70 <__kernel_rem_pio2f+0x474>
 800bf2e:	b10f      	cbz	r7, 800bf34 <__kernel_rem_pio2f+0x438>
 800bf30:	eef1 7a67 	vneg.f32	s15, s15
 800bf34:	edc8 7a01 	vstr	s15, [r8, #4]
 800bf38:	e7ba      	b.n	800beb0 <__kernel_rem_pio2f+0x3b4>
 800bf3a:	ab30      	add	r3, sp, #192	; 0xc0
 800bf3c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800bdfc <__kernel_rem_pio2f+0x300>
 800bf40:	440b      	add	r3, r1
 800bf42:	2c00      	cmp	r4, #0
 800bf44:	da05      	bge.n	800bf52 <__kernel_rem_pio2f+0x456>
 800bf46:	b10f      	cbz	r7, 800bf4c <__kernel_rem_pio2f+0x450>
 800bf48:	eef1 7a67 	vneg.f32	s15, s15
 800bf4c:	edc8 7a00 	vstr	s15, [r8]
 800bf50:	e7ae      	b.n	800beb0 <__kernel_rem_pio2f+0x3b4>
 800bf52:	ed33 7a01 	vldmdb	r3!, {s14}
 800bf56:	3c01      	subs	r4, #1
 800bf58:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf5c:	e7f1      	b.n	800bf42 <__kernel_rem_pio2f+0x446>
 800bf5e:	ed73 7a01 	vldmdb	r3!, {s15}
 800bf62:	3a01      	subs	r2, #1
 800bf64:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bf68:	e7d2      	b.n	800bf10 <__kernel_rem_pio2f+0x414>
 800bf6a:	eef0 7a47 	vmov.f32	s15, s14
 800bf6e:	e7d4      	b.n	800bf1a <__kernel_rem_pio2f+0x41e>
 800bf70:	ecb2 7a01 	vldmia	r2!, {s14}
 800bf74:	3301      	adds	r3, #1
 800bf76:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf7a:	e7d6      	b.n	800bf2a <__kernel_rem_pio2f+0x42e>
 800bf7c:	edd2 7a00 	vldr	s15, [r2]
 800bf80:	edd2 6a01 	vldr	s13, [r2, #4]
 800bf84:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bf88:	3801      	subs	r0, #1
 800bf8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf8e:	ed82 7a00 	vstr	s14, [r2]
 800bf92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf96:	edc2 7a01 	vstr	s15, [r2, #4]
 800bf9a:	e798      	b.n	800bece <__kernel_rem_pio2f+0x3d2>
 800bf9c:	edd3 7a00 	vldr	s15, [r3]
 800bfa0:	edd3 6a01 	vldr	s13, [r3, #4]
 800bfa4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bfa8:	3a01      	subs	r2, #1
 800bfaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bfae:	ed83 7a00 	vstr	s14, [r3]
 800bfb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfb6:	edc3 7a01 	vstr	s15, [r3, #4]
 800bfba:	e78d      	b.n	800bed8 <__kernel_rem_pio2f+0x3dc>
 800bfbc:	ed33 7a01 	vldmdb	r3!, {s14}
 800bfc0:	3c01      	subs	r4, #1
 800bfc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bfc6:	e78f      	b.n	800bee8 <__kernel_rem_pio2f+0x3ec>
 800bfc8:	eef1 6a66 	vneg.f32	s13, s13
 800bfcc:	eeb1 7a47 	vneg.f32	s14, s14
 800bfd0:	edc8 6a00 	vstr	s13, [r8]
 800bfd4:	ed88 7a01 	vstr	s14, [r8, #4]
 800bfd8:	eef1 7a67 	vneg.f32	s15, s15
 800bfdc:	e790      	b.n	800bf00 <__kernel_rem_pio2f+0x404>
 800bfde:	bf00      	nop

0800bfe0 <scalbnf>:
 800bfe0:	ee10 3a10 	vmov	r3, s0
 800bfe4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800bfe8:	d02b      	beq.n	800c042 <scalbnf+0x62>
 800bfea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bfee:	d302      	bcc.n	800bff6 <scalbnf+0x16>
 800bff0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bff4:	4770      	bx	lr
 800bff6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800bffa:	d123      	bne.n	800c044 <scalbnf+0x64>
 800bffc:	4b24      	ldr	r3, [pc, #144]	; (800c090 <scalbnf+0xb0>)
 800bffe:	eddf 7a25 	vldr	s15, [pc, #148]	; 800c094 <scalbnf+0xb4>
 800c002:	4298      	cmp	r0, r3
 800c004:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c008:	db17      	blt.n	800c03a <scalbnf+0x5a>
 800c00a:	ee10 3a10 	vmov	r3, s0
 800c00e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c012:	3a19      	subs	r2, #25
 800c014:	f24c 3150 	movw	r1, #50000	; 0xc350
 800c018:	4288      	cmp	r0, r1
 800c01a:	dd15      	ble.n	800c048 <scalbnf+0x68>
 800c01c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c098 <scalbnf+0xb8>
 800c020:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800c09c <scalbnf+0xbc>
 800c024:	ee10 3a10 	vmov	r3, s0
 800c028:	eeb0 7a67 	vmov.f32	s14, s15
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	bfb8      	it	lt
 800c030:	eef0 7a66 	vmovlt.f32	s15, s13
 800c034:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c038:	4770      	bx	lr
 800c03a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800c0a0 <scalbnf+0xc0>
 800c03e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c042:	4770      	bx	lr
 800c044:	0dd2      	lsrs	r2, r2, #23
 800c046:	e7e5      	b.n	800c014 <scalbnf+0x34>
 800c048:	4410      	add	r0, r2
 800c04a:	28fe      	cmp	r0, #254	; 0xfe
 800c04c:	dce6      	bgt.n	800c01c <scalbnf+0x3c>
 800c04e:	2800      	cmp	r0, #0
 800c050:	dd06      	ble.n	800c060 <scalbnf+0x80>
 800c052:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c056:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c05a:	ee00 3a10 	vmov	s0, r3
 800c05e:	4770      	bx	lr
 800c060:	f110 0f16 	cmn.w	r0, #22
 800c064:	da09      	bge.n	800c07a <scalbnf+0x9a>
 800c066:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c0a0 <scalbnf+0xc0>
 800c06a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800c0a4 <scalbnf+0xc4>
 800c06e:	ee10 3a10 	vmov	r3, s0
 800c072:	eeb0 7a67 	vmov.f32	s14, s15
 800c076:	2b00      	cmp	r3, #0
 800c078:	e7d9      	b.n	800c02e <scalbnf+0x4e>
 800c07a:	3019      	adds	r0, #25
 800c07c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c080:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c084:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800c0a8 <scalbnf+0xc8>
 800c088:	ee07 3a90 	vmov	s15, r3
 800c08c:	e7d7      	b.n	800c03e <scalbnf+0x5e>
 800c08e:	bf00      	nop
 800c090:	ffff3cb0 	.word	0xffff3cb0
 800c094:	4c000000 	.word	0x4c000000
 800c098:	7149f2ca 	.word	0x7149f2ca
 800c09c:	f149f2ca 	.word	0xf149f2ca
 800c0a0:	0da24260 	.word	0x0da24260
 800c0a4:	8da24260 	.word	0x8da24260
 800c0a8:	33000000 	.word	0x33000000

0800c0ac <floorf>:
 800c0ac:	ee10 3a10 	vmov	r3, s0
 800c0b0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c0b4:	3a7f      	subs	r2, #127	; 0x7f
 800c0b6:	2a16      	cmp	r2, #22
 800c0b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c0bc:	dc2a      	bgt.n	800c114 <floorf+0x68>
 800c0be:	2a00      	cmp	r2, #0
 800c0c0:	da11      	bge.n	800c0e6 <floorf+0x3a>
 800c0c2:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c124 <floorf+0x78>
 800c0c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c0ca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d2:	dd05      	ble.n	800c0e0 <floorf+0x34>
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	da23      	bge.n	800c120 <floorf+0x74>
 800c0d8:	4a13      	ldr	r2, [pc, #76]	; (800c128 <floorf+0x7c>)
 800c0da:	2900      	cmp	r1, #0
 800c0dc:	bf18      	it	ne
 800c0de:	4613      	movne	r3, r2
 800c0e0:	ee00 3a10 	vmov	s0, r3
 800c0e4:	4770      	bx	lr
 800c0e6:	4911      	ldr	r1, [pc, #68]	; (800c12c <floorf+0x80>)
 800c0e8:	4111      	asrs	r1, r2
 800c0ea:	420b      	tst	r3, r1
 800c0ec:	d0fa      	beq.n	800c0e4 <floorf+0x38>
 800c0ee:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c124 <floorf+0x78>
 800c0f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c0f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0fe:	ddef      	ble.n	800c0e0 <floorf+0x34>
 800c100:	2b00      	cmp	r3, #0
 800c102:	bfbe      	ittt	lt
 800c104:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c108:	fa40 f202 	asrlt.w	r2, r0, r2
 800c10c:	189b      	addlt	r3, r3, r2
 800c10e:	ea23 0301 	bic.w	r3, r3, r1
 800c112:	e7e5      	b.n	800c0e0 <floorf+0x34>
 800c114:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c118:	d3e4      	bcc.n	800c0e4 <floorf+0x38>
 800c11a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c11e:	4770      	bx	lr
 800c120:	2300      	movs	r3, #0
 800c122:	e7dd      	b.n	800c0e0 <floorf+0x34>
 800c124:	7149f2ca 	.word	0x7149f2ca
 800c128:	bf800000 	.word	0xbf800000
 800c12c:	007fffff 	.word	0x007fffff

0800c130 <_init>:
 800c130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c132:	bf00      	nop
 800c134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c136:	bc08      	pop	{r3}
 800c138:	469e      	mov	lr, r3
 800c13a:	4770      	bx	lr

0800c13c <_fini>:
 800c13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c13e:	bf00      	nop
 800c140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c142:	bc08      	pop	{r3}
 800c144:	469e      	mov	lr, r3
 800c146:	4770      	bx	lr
